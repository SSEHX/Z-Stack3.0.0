///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               26/Oct/2017  13:54:59
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack 3.0.0\Components\stack\zdo\ZDApp.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        "C:\Texas Instruments\Z-Stack 3.0.0\Components\stack\zdo\ZDApp.c" -D
//        SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D
//        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
//        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LEGACY_LCD_DEBUG -D
//        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES -D ZCL_GROUPS
//        -lC "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
//        Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\" -I
//        "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\CoordinatorEB\List\ZDApp.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME ZDApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V3
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_ADD_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_SHL
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?XLOAD_R0123
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN ?XSTORE_R0123
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??AddrMgrWriteNVRequest::?relay`
        FUNCTION `??AddrMgrWriteNVRequest::?relay`,0203H
        PUBLIC `??ZDAppCheckForHoldKey::?relay`
        FUNCTION `??ZDAppCheckForHoldKey::?relay`,0203H
        PUBLIC `??ZDAppDetermineDeviceType::?relay`
        FUNCTION `??ZDAppDetermineDeviceType::?relay`,0203H
        PUBLIC `??ZDApp_AnnounceNewAddress::?relay`
        FUNCTION `??ZDApp_AnnounceNewAddress::?relay`,0203H
        PUBLIC `??ZDApp_ChangeMatchDescRespPermission::?relay`
        FUNCTION `??ZDApp_ChangeMatchDescRespPermission::?relay`,0203H
        PUBLIC `??ZDApp_ChangeState::?relay`
        FUNCTION `??ZDApp_ChangeState::?relay`,0203H
        PUBLIC `??ZDApp_CoordStartPANIDConflictCB::?relay`
        FUNCTION `??ZDApp_CoordStartPANIDConflictCB::?relay`,0203H
        PUBLIC `??ZDApp_DeviceAuthEvt::?relay`
        FUNCTION `??ZDApp_DeviceAuthEvt::?relay`,0203H
        PUBLIC `??ZDApp_DeviceConfigured::?relay`
        FUNCTION `??ZDApp_DeviceConfigured::?relay`,0203H
        PUBLIC `??ZDApp_ForceConcentratorChange::?relay`
        FUNCTION `??ZDApp_ForceConcentratorChange::?relay`,0203H
        PUBLIC `??ZDApp_InMsgCB::?relay`
        FUNCTION `??ZDApp_InMsgCB::?relay`,0203H
        PUBLIC `??ZDApp_Init::?relay`
        FUNCTION `??ZDApp_Init::?relay`,0203H
        PUBLIC `??ZDApp_InitUserDesc::?relay`
        FUNCTION `??ZDApp_InitUserDesc::?relay`,0203H
        PUBLIC `??ZDApp_InitZdoCBFunc::?relay`
        FUNCTION `??ZDApp_InitZdoCBFunc::?relay`,0203H
        PUBLIC `??ZDApp_JoinReq::?relay`
        FUNCTION `??ZDApp_JoinReq::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlBypass::?relay`
        FUNCTION `??ZDApp_LeaveCtrlBypass::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlInit::?relay`
        FUNCTION `??ZDApp_LeaveCtrlInit::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlReset::?relay`
        FUNCTION `??ZDApp_LeaveCtrlReset::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlSet::?relay`
        FUNCTION `??ZDApp_LeaveCtrlSet::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlStartup::?relay`
        FUNCTION `??ZDApp_LeaveCtrlStartup::?relay`,0203H
        PUBLIC `??ZDApp_LeaveReset::?relay`
        FUNCTION `??ZDApp_LeaveReset::?relay`,0203H
        PUBLIC `??ZDApp_LeaveUpdate::?relay`
        FUNCTION `??ZDApp_LeaveUpdate::?relay`,0203H
        PUBLIC `??ZDApp_NVUpdate::?relay`
        FUNCTION `??ZDApp_NVUpdate::?relay`,0203H
        PUBLIC `??ZDApp_NetworkDiscoveryReq::?relay`
        FUNCTION `??ZDApp_NetworkDiscoveryReq::?relay`,0203H
        PUBLIC `??ZDApp_NetworkInit::?relay`
        FUNCTION `??ZDApp_NetworkInit::?relay`,0203H
        PUBLIC `??ZDApp_NetworkStartEvt::?relay`
        FUNCTION `??ZDApp_NetworkStartEvt::?relay`,0203H
        PUBLIC `??ZDApp_NodeProfileSync::?relay`
        FUNCTION `??ZDApp_NodeProfileSync::?relay`,0203H
        PUBLIC `??ZDApp_NwkDescListProcessing::?relay`
        FUNCTION `??ZDApp_NwkDescListProcessing::?relay`,0203H
        PUBLIC `??ZDApp_NwkStateUpdateCB::?relay`
        FUNCTION `??ZDApp_NwkStateUpdateCB::?relay`,0203H
        PUBLIC `??ZDApp_ProcessMsgCBs::?relay`
        FUNCTION `??ZDApp_ProcessMsgCBs::?relay`,0203H
        PUBLIC `??ZDApp_ProcessNetworkJoin::?relay`
        FUNCTION `??ZDApp_ProcessNetworkJoin::?relay`,0203H
        PUBLIC `??ZDApp_ProcessOSALMsg::?relay`
        FUNCTION `??ZDApp_ProcessOSALMsg::?relay`,0203H
        PUBLIC `??ZDApp_ProcessSecEvent::?relay`
        FUNCTION `??ZDApp_ProcessSecEvent::?relay`,0203H
        PUBLIC `??ZDApp_ProcessSecMsg::?relay`
        FUNCTION `??ZDApp_ProcessSecMsg::?relay`,0203H
        PUBLIC `??ZDApp_ReadNetworkRestoreState::?relay`
        FUNCTION `??ZDApp_ReadNetworkRestoreState::?relay`,0203H
        PUBLIC `??ZDApp_RegisterCBs::?relay`
        FUNCTION `??ZDApp_RegisterCBs::?relay`,0203H
        PUBLIC `??ZDApp_ResetNwkKey::?relay`
        FUNCTION `??ZDApp_ResetNwkKey::?relay`,0203H
        PUBLIC `??ZDApp_ResetTimerCancel::?relay`
        FUNCTION `??ZDApp_ResetTimerCancel::?relay`,0203H
        PUBLIC `??ZDApp_ResetTimerStart::?relay`
        FUNCTION `??ZDApp_ResetTimerStart::?relay`,0203H
        PUBLIC `??ZDApp_RestoreNetworkState::?relay`
        FUNCTION `??ZDApp_RestoreNetworkState::?relay`,0203H
        PUBLIC `??ZDApp_RestoreNwkKey::?relay`
        FUNCTION `??ZDApp_RestoreNwkKey::?relay`,0203H
        PUBLIC `??ZDApp_RestoreNwkSecMaterial::?relay`
        FUNCTION `??ZDApp_RestoreNwkSecMaterial::?relay`,0203H
        PUBLIC `??ZDApp_SaveNetworkStateEvt::?relay`
        FUNCTION `??ZDApp_SaveNetworkStateEvt::?relay`,0203H
        PUBLIC `??ZDApp_SaveNwkKey::?relay`
        FUNCTION `??ZDApp_SaveNwkKey::?relay`,0203H
        PUBLIC `??ZDApp_SecInit::?relay`
        FUNCTION `??ZDApp_SecInit::?relay`,0203H
        PUBLIC `??ZDApp_SendEventMsg::?relay`
        FUNCTION `??ZDApp_SendEventMsg::?relay`,0203H
        PUBLIC `??ZDApp_SendMsg::?relay`
        FUNCTION `??ZDApp_SendMsg::?relay`,0203H
        PUBLIC `??ZDApp_SendParentAnnce::?relay`
        FUNCTION `??ZDApp_SendParentAnnce::?relay`,0203H
        PUBLIC `??ZDApp_SetParentAnnceTimer::?relay`
        FUNCTION `??ZDApp_SetParentAnnceTimer::?relay`,0203H
        PUBLIC `??ZDApp_SetRejoinBackoffDuration::?relay`
        FUNCTION `??ZDApp_SetRejoinBackoffDuration::?relay`,0203H
        PUBLIC `??ZDApp_SetRejoinScanDuration::?relay`
        FUNCTION `??ZDApp_SetRejoinScanDuration::?relay`,0203H
        PUBLIC `??ZDApp_StartJoiningCycle::?relay`
        FUNCTION `??ZDApp_StartJoiningCycle::?relay`,0203H
        PUBLIC `??ZDApp_StopJoiningCycle::?relay`
        FUNCTION `??ZDApp_StopJoiningCycle::?relay`,0203H
        PUBLIC `??ZDApp_StoreNwkSecMaterial::?relay`
        FUNCTION `??ZDApp_StoreNwkSecMaterial::?relay`,0203H
        PUBLIC `??ZDApp_event_loop::?relay`
        FUNCTION `??ZDApp_event_loop::?relay`,0203H
        PUBLIC `??ZDOInitDeviceEx::?relay`
        FUNCTION `??ZDOInitDeviceEx::?relay`,0203H
        PUBLIC `??ZDO_AddrChangeIndicationCB::?relay`
        FUNCTION `??ZDO_AddrChangeIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_ConcentratorIndicationCB::?relay`
        FUNCTION `??ZDO_ConcentratorIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_DeregisterForZdoCB::?relay`
        FUNCTION `??ZDO_DeregisterForZdoCB::?relay`,0203H
        PUBLIC `??ZDO_JoinConfirmCB::?relay`
        FUNCTION `??ZDO_JoinConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_JoinIndicationCB::?relay`
        FUNCTION `??ZDO_JoinIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_LeaveCnf::?relay`
        FUNCTION `??ZDO_LeaveCnf::?relay`,0203H
        PUBLIC `??ZDO_LeaveInd::?relay`
        FUNCTION `??ZDO_LeaveInd::?relay`,0203H
        PUBLIC `??ZDO_ManytoOneFailureIndicationCB::?relay`
        FUNCTION `??ZDO_ManytoOneFailureIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_NetworkDiscoveryConfirmCB::?relay`
        FUNCTION `??ZDO_NetworkDiscoveryConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_NetworkFormationConfirmCB::?relay`
        FUNCTION `??ZDO_NetworkFormationConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_NetworkStatusCB::?relay`
        FUNCTION `??ZDO_NetworkStatusCB::?relay`,0203H
        PUBLIC `??ZDO_PermitJoinCB::?relay`
        FUNCTION `??ZDO_PermitJoinCB::?relay`,0203H
        PUBLIC `??ZDO_PollConfirmCB::?relay`
        FUNCTION `??ZDO_PollConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_RegisterForZdoCB::?relay`
        FUNCTION `??ZDO_RegisterForZdoCB::?relay`,0203H
        PUBLIC `??ZDO_SrcRtgIndCB::?relay`
        FUNCTION `??ZDO_SrcRtgIndCB::?relay`,0203H
        PUBLIC `??ZDO_StartRouterConfirmCB::?relay`
        FUNCTION `??ZDO_StartRouterConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_SyncIndicationCB::?relay`
        FUNCTION `??ZDO_SyncIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_UpdateDeviceIndication::?relay`
        FUNCTION `??ZDO_UpdateDeviceIndication::?relay`,0203H
        PUBLIC `??ZDO_beaconNotifyIndCB::?relay`
        FUNCTION `??ZDO_beaconNotifyIndCB::?relay`,0203H
        PUBLIC AddrMgrWriteNVRequest
        FUNCTION AddrMgrWriteNVRequest,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC FrameCounterUpdated
        PUBLIC MatchRsps
        PUBLIC ZDAppCheckForHoldKey
        FUNCTION ZDAppCheckForHoldKey,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDAppDetermineDeviceType
        FUNCTION ZDAppDetermineDeviceType,021203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDAppNwkAddr
        PUBLIC ZDAppTaskID
        PUBLIC ZDApp_AnnounceNewAddress
        FUNCTION ZDApp_AnnounceNewAddress,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDApp_AutoFindMode_epDesc
        PUBLIC ZDApp_ChangeMatchDescRespPermission
        FUNCTION ZDApp_ChangeMatchDescRespPermission,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_ChangeState
        FUNCTION ZDApp_ChangeState,021203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_CoordStartPANIDConflictCB
        FUNCTION ZDApp_CoordStartPANIDConflictCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDApp_DeviceAuthEvt
        FUNCTION ZDApp_DeviceAuthEvt,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_DeviceConfigured
        FUNCTION ZDApp_DeviceConfigured,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_ForceConcentratorChange
        FUNCTION ZDApp_ForceConcentratorChange,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_InMsgCB
        FUNCTION ZDApp_InMsgCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_Init
        FUNCTION ZDApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_InitUserDesc
        FUNCTION ZDApp_InitUserDesc,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDApp_InitZdoCBFunc
        FUNCTION ZDApp_InitZdoCBFunc,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_JoinReq
        FUNCTION ZDApp_JoinReq,0a1203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_LeaveCtrl
        PUBLIC ZDApp_LeaveCtrlBypass
        FUNCTION ZDApp_LeaveCtrlBypass,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_LeaveCtrlInit
        FUNCTION ZDApp_LeaveCtrlInit,0a1203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlReset
        FUNCTION ZDApp_LeaveCtrlReset,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlSet
        FUNCTION ZDApp_LeaveCtrlSet,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlStartup
        FUNCTION ZDApp_LeaveCtrlStartup,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_LeaveReset
        FUNCTION ZDApp_LeaveReset,0a1203H
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDApp_LeaveUpdate
        FUNCTION ZDApp_LeaveUpdate,0a1203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 44, STACK
        PUBLIC ZDApp_NVUpdate
        FUNCTION ZDApp_NVUpdate,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        PUBLIC ZDApp_NetworkDiscoveryReq
        FUNCTION ZDApp_NetworkDiscoveryReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDApp_NetworkInit
        FUNCTION ZDApp_NetworkInit,0a1203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_NetworkStartEvt
        FUNCTION ZDApp_NetworkStartEvt,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_NewDeviceList
        PUBLIC ZDApp_NodeProfileSync
        FUNCTION ZDApp_NodeProfileSync,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_NwkDescListProcessing
        FUNCTION ZDApp_NwkDescListProcessing,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_NwkStateUpdateCB
        FUNCTION ZDApp_NwkStateUpdateCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ProcessMsgCBs
        FUNCTION ZDApp_ProcessMsgCBs,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 54, STACK
        PUBLIC ZDApp_ProcessNetworkJoin
        FUNCTION ZDApp_ProcessNetworkJoin,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDApp_ProcessOSALMsg
        FUNCTION ZDApp_ProcessOSALMsg,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ProcessSecEvent
        FUNCTION ZDApp_ProcessSecEvent,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDApp_ProcessSecMsg
        FUNCTION ZDApp_ProcessSecMsg,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 33, STACK
        PUBLIC ZDApp_ReadNetworkRestoreState
        FUNCTION ZDApp_ReadNetworkRestoreState,021203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_RegisterCBs
        FUNCTION ZDApp_RegisterCBs,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ResetNwkKey
        FUNCTION ZDApp_ResetNwkKey,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC ZDApp_ResetTimerCancel
        FUNCTION ZDApp_ResetTimerCancel,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ResetTimerStart
        FUNCTION ZDApp_ResetTimerStart,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_RestoreNetworkState
        FUNCTION ZDApp_RestoreNetworkState,021203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_RestoreNwkKey
        FUNCTION ZDApp_RestoreNwkKey,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 52, STACK
        PUBLIC ZDApp_RestoreNwkSecMaterial
        FUNCTION ZDApp_RestoreNwkSecMaterial,0a1203H
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDApp_SaveNetworkStateEvt
        FUNCTION ZDApp_SaveNetworkStateEvt,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_SaveNwkKey
        FUNCTION ZDApp_SaveNwkKey,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 52, STACK
        PUBLIC ZDApp_SavedPollRate
        PUBLIC ZDApp_SecInit
        FUNCTION ZDApp_SecInit,0a1203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 25, STACK
        PUBLIC ZDApp_SendEventMsg
        FUNCTION ZDApp_SendEventMsg,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_SendMsg
        FUNCTION ZDApp_SendMsg,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDApp_SendParentAnnce
        FUNCTION ZDApp_SendParentAnnce,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDApp_SetParentAnnceTimer
        FUNCTION ZDApp_SetParentAnnceTimer,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_SetRejoinBackoffDuration
        FUNCTION ZDApp_SetRejoinBackoffDuration,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDApp_SetRejoinScanDuration
        FUNCTION ZDApp_SetRejoinScanDuration,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDApp_StartJoiningCycle
        FUNCTION ZDApp_StartJoiningCycle,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_StopJoiningCycle
        FUNCTION ZDApp_StopJoiningCycle,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_StoreNwkSecMaterial
        FUNCTION ZDApp_StoreNwkSecMaterial,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDApp_epDesc
        PUBLIC ZDApp_event_loop
        FUNCTION ZDApp_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDOInitDeviceEx
        FUNCTION ZDOInitDeviceEx,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC ZDO_AddrChangeIndicationCB
        FUNCTION ZDO_AddrChangeIndicationCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_ConcentratorIndicationCB
        FUNCTION ZDO_ConcentratorIndicationCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_DeregisterForZdoCB
        FUNCTION ZDO_DeregisterForZdoCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_JoinConfirmCB
        FUNCTION ZDO_JoinConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_JoinIndicationCB
        FUNCTION ZDO_JoinIndicationCB,0a1203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDO_LeaveCnf
        FUNCTION ZDO_LeaveCnf,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDO_LeaveInd
        FUNCTION ZDO_LeaveInd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDO_ManytoOneFailureIndicationCB
        FUNCTION ZDO_ManytoOneFailureIndicationCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_NetworkDiscoveryConfirmCB
        FUNCTION ZDO_NetworkDiscoveryConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 3, STACK
        PUBLIC ZDO_NetworkFormationConfirmCB
        FUNCTION ZDO_NetworkFormationConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC ZDO_NetworkStatusCB
        FUNCTION ZDO_NetworkStatusCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_PermitJoinCB
        FUNCTION ZDO_PermitJoinCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC ZDO_PollConfirmCB
        FUNCTION ZDO_PollConfirmCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDO_RegisterForZdoCB
        FUNCTION ZDO_RegisterForZdoCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_SrcRtgIndCB
        FUNCTION ZDO_SrcRtgIndCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_StartRouterConfirmCB
        FUNCTION ZDO_StartRouterConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDO_SyncIndicationCB
        FUNCTION ZDO_SyncIndicationCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDO_UpdateDeviceIndication
        FUNCTION ZDO_UpdateDeviceIndication,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDO_UseExtendedPANID
        PUBLIC ZDO_beaconNotifyIndCB
        FUNCTION ZDO_beaconNotifyIndCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBWEAK __Constant_0
        PUBWEAK __Constant_258
        PUBWEAK __Constant_2710
        PUBWEAK __Constant_2bc
        PUBWEAK __Constant_4e2
        PUBWEAK __Constant_64
        PUBLIC _tmpRejoinState
        PUBLIC continueJoining
        PUBLIC devStartMode
        PUBLIC devState
        PUBLIC nwkStatus
        PUBLIC prevDevState
        PUBLIC retryCnt
        PUBLIC runtimeChannel
        PUBLIC zdappMgmtNwkDiscReqInProgress
        PUBLIC zdappMgmtNwkDiscRspAddr
        PUBLIC zdappMgmtNwkDiscRspTransSeq
        PUBLIC zdappMgmtNwkDiscStartIndex
        PUBLIC zdappMgmtSavedNwkState
        PUBLIC zdoCBFunc
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
APSME_GetRequest    SYMBOL "APSME_GetRequest"
`??APSME_GetRequest::?relay` SYMBOL "?relay", APSME_GetRequest
APSME_HoldDataRequests SYMBOL "APSME_HoldDataRequests"
`??APSME_HoldDataRequests::?relay` SYMBOL "?relay", APSME_HoldDataRequests
APSME_IsDistributedSecurity SYMBOL "APSME_IsDistributedSecurity"
`??APSME_IsDistributedSecurity::?relay` SYMBOL "?relay", APSME_IsDistributedSecurity
APSME_SearchTCLinkKeyEntry SYMBOL "APSME_SearchTCLinkKeyEntry"
`??APSME_SearchTCLinkKeyEntry::?relay` SYMBOL "?relay", APSME_SearchTCLinkKeyEntry
APSME_UpdateDeviceReq SYMBOL "APSME_UpdateDeviceReq"
`??APSME_UpdateDeviceReq::?relay` SYMBOL "?relay", APSME_UpdateDeviceReq
AssocMakeListOfRfdChild SYMBOL "AssocMakeListOfRfdChild"
`??AssocMakeListOfRfdChild::?relay` SYMBOL "?relay", AssocMakeListOfRfdChild
HalKeyRead          SYMBOL "HalKeyRead"
`??HalKeyRead::?relay` SYMBOL "?relay", HalKeyRead
NLME_GetCoordShortAddr SYMBOL "NLME_GetCoordShortAddr"
`??NLME_GetCoordShortAddr::?relay` SYMBOL "?relay", NLME_GetCoordShortAddr
NLME_GetEnergyThreshold SYMBOL "NLME_GetEnergyThreshold"
`??NLME_GetEnergyThreshold::?relay` SYMBOL "?relay", NLME_GetEnergyThreshold
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
`??NLME_GetExtAddr::?relay` SYMBOL "?relay", NLME_GetExtAddr
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_InitNV         SYMBOL "NLME_InitNV"
`??NLME_InitNV::?relay` SYMBOL "?relay", NLME_InitNV
NLME_JoinRequest    SYMBOL "NLME_JoinRequest"
`??NLME_JoinRequest::?relay` SYMBOL "?relay", NLME_JoinRequest
NLME_LeaveRsp       SYMBOL "NLME_LeaveRsp"
`??NLME_LeaveRsp::?relay` SYMBOL "?relay", NLME_LeaveRsp
NLME_NetworkDiscoveryRequest SYMBOL "NLME_NetworkDiscoveryRequest"
`??NLME_NetworkDiscoveryRequest::?relay` SYMBOL "?relay", NLME_NetworkDiscoveryRequest
NLME_NwkDiscTerm    SYMBOL "NLME_NwkDiscTerm"
`??NLME_NwkDiscTerm::?relay` SYMBOL "?relay", NLME_NwkDiscTerm
NLME_RemoveChild    SYMBOL "NLME_RemoveChild"
`??NLME_RemoveChild::?relay` SYMBOL "?relay", NLME_RemoveChild
NLME_RestoreFromNV  SYMBOL "NLME_RestoreFromNV"
`??NLME_RestoreFromNV::?relay` SYMBOL "?relay", NLME_RestoreFromNV
NLME_SetAssocFlags  SYMBOL "NLME_SetAssocFlags"
`??NLME_SetAssocFlags::?relay` SYMBOL "?relay", NLME_SetAssocFlags
NLME_SetBroadcastFilter SYMBOL "NLME_SetBroadcastFilter"
`??NLME_SetBroadcastFilter::?relay` SYMBOL "?relay", NLME_SetBroadcastFilter
NLME_SetDefaultNV   SYMBOL "NLME_SetDefaultNV"
`??NLME_SetDefaultNV::?relay` SYMBOL "?relay", NLME_SetDefaultNV
NLME_SetEnergyThreshold SYMBOL "NLME_SetEnergyThreshold"
`??NLME_SetEnergyThreshold::?relay` SYMBOL "?relay", NLME_SetEnergyThreshold
NLME_SetPollRate    SYMBOL "NLME_SetPollRate"
`??NLME_SetPollRate::?relay` SYMBOL "?relay", NLME_SetPollRate
NLME_SetQueuedPollRate SYMBOL "NLME_SetQueuedPollRate"
`??NLME_SetQueuedPollRate::?relay` SYMBOL "?relay", NLME_SetQueuedPollRate
NLME_SetResponseRate SYMBOL "NLME_SetResponseRate"
`??NLME_SetResponseRate::?relay` SYMBOL "?relay", NLME_SetResponseRate
NLME_SetUpdateID    SYMBOL "NLME_SetUpdateID"
`??NLME_SetUpdateID::?relay` SYMBOL "?relay", NLME_SetUpdateID
NLME_StartRouterRequest SYMBOL "NLME_StartRouterRequest"
`??NLME_StartRouterRequest::?relay` SYMBOL "?relay", NLME_StartRouterRequest
NLME_UpdateNV       SYMBOL "NLME_UpdateNV"
`??NLME_UpdateNV::?relay` SYMBOL "?relay", NLME_UpdateNV
RTG_MTORouteReq     SYMBOL "RTG_MTORouteReq"
`??RTG_MTORouteReq::?relay` SYMBOL "?relay", RTG_MTORouteReq
RTG_RemoveRtgEntry  SYMBOL "RTG_RemoveRtgEntry"
`??RTG_RemoveRtgEntry::?relay` SYMBOL "?relay", RTG_RemoveRtgEntry
SSP_ReadNwkActiveKey SYMBOL "SSP_ReadNwkActiveKey"
`??SSP_ReadNwkActiveKey::?relay` SYMBOL "?relay", SSP_ReadNwkActiveKey
SSP_SwitchNwkKey    SYMBOL "SSP_SwitchNwkKey"
`??SSP_SwitchNwkKey::?relay` SYMBOL "?relay", SSP_SwitchNwkKey
SSP_UpdateNwkKey    SYMBOL "SSP_UpdateNwkKey"
`??SSP_UpdateNwkKey::?relay` SYMBOL "?relay", SSP_UpdateNwkKey
ZDConfig_InitDescriptors SYMBOL "ZDConfig_InitDescriptors"
`??ZDConfig_InitDescriptors::?relay` SYMBOL "?relay", ZDConfig_InitDescriptors
ZDMatchSendState    SYMBOL "ZDMatchSendState"
`??ZDMatchSendState::?relay` SYMBOL "?relay", ZDMatchSendState
ZDO_Init            SYMBOL "ZDO_Init"
`??ZDO_Init::?relay` SYMBOL "?relay", ZDO_Init
ZDO_MatchEndDeviceBind SYMBOL "ZDO_MatchEndDeviceBind"
`??ZDO_MatchEndDeviceBind::?relay` SYMBOL "?relay", ZDO_MatchEndDeviceBind
ZDO_ParseAddrRsp    SYMBOL "ZDO_ParseAddrRsp"
`??ZDO_ParseAddrRsp::?relay` SYMBOL "?relay", ZDO_ParseAddrRsp
ZDO_ParseBindUnbindReq SYMBOL "ZDO_ParseBindUnbindReq"
`??ZDO_ParseBindUnbindReq::?relay` SYMBOL "?relay", ZDO_ParseBindUnbindReq
ZDO_ParseEndDeviceBindReq SYMBOL "ZDO_ParseEndDeviceBindReq"
`??ZDO_ParseEndDeviceBindReq::?relay` SYMBOL "?relay", ZDO_ParseEndDeviceBindReq
ZDO_ProcessBindUnbindReq SYMBOL "ZDO_ProcessBindUnbindReq"
`??ZDO_ProcessBindUnbindReq::?relay` SYMBOL "?relay", ZDO_ProcessBindUnbindReq
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDO_StartDevice     SYMBOL "ZDO_StartDevice"
`??ZDO_StartDevice::?relay` SYMBOL "?relay", ZDO_StartDevice
ZDO_UpdateAddrManager SYMBOL "ZDO_UpdateAddrManager"
`??ZDO_UpdateAddrManager::?relay` SYMBOL "?relay", ZDO_UpdateAddrManager
ZDO_UpdateNwkStatus SYMBOL "ZDO_UpdateNwkStatus"
`??ZDO_UpdateNwkStatus::?relay` SYMBOL "?relay", ZDO_UpdateNwkStatus
ZDP_DeviceAnnce     SYMBOL "ZDP_DeviceAnnce"
`??ZDP_DeviceAnnce::?relay` SYMBOL "?relay", ZDP_DeviceAnnce
ZDP_GenericRsp      SYMBOL "ZDP_GenericRsp"
`??ZDP_GenericRsp::?relay` SYMBOL "?relay", ZDP_GenericRsp
ZDP_IncomingData    SYMBOL "ZDP_IncomingData"
`??ZDP_IncomingData::?relay` SYMBOL "?relay", ZDP_IncomingData
ZDP_ParentAnnce     SYMBOL "ZDP_ParentAnnce"
`??ZDP_ParentAnnce::?relay` SYMBOL "?relay", ZDP_ParentAnnce
ZDSecMgrAddrClear   SYMBOL "ZDSecMgrAddrClear"
`??ZDSecMgrAddrClear::?relay` SYMBOL "?relay", ZDSecMgrAddrClear
ZDSecMgrClearNVKeyValues SYMBOL "ZDSecMgrClearNVKeyValues"
`??ZDSecMgrClearNVKeyValues::?relay` SYMBOL "?relay", ZDSecMgrClearNVKeyValues
ZDSecMgrDeviceRemoveByExtAddr SYMBOL "ZDSecMgrDeviceRemoveByExtAddr"
`??ZDSecMgrDeviceRemoveByExtAddr::?relay` SYMBOL "?relay", ZDSecMgrDeviceRemoveByExtAddr
ZDSecMgrGenerateRndKey SYMBOL "ZDSecMgrGenerateRndKey"
`??ZDSecMgrGenerateRndKey::?relay` SYMBOL "?relay", ZDSecMgrGenerateRndKey
ZDSecMgrInit        SYMBOL "ZDSecMgrInit"
`??ZDSecMgrInit::?relay` SYMBOL "?relay", ZDSecMgrInit
ZDSecMgrNewDeviceEvent SYMBOL "ZDSecMgrNewDeviceEvent"
`??ZDSecMgrNewDeviceEvent::?relay` SYMBOL "?relay", ZDSecMgrNewDeviceEvent
ZDSecMgrReadKeyFromNv SYMBOL "ZDSecMgrReadKeyFromNv"
`??ZDSecMgrReadKeyFromNv::?relay` SYMBOL "?relay", ZDSecMgrReadKeyFromNv
ZDSecMgrRequestKeyInd SYMBOL "ZDSecMgrRequestKeyInd"
`??ZDSecMgrRequestKeyInd::?relay` SYMBOL "?relay", ZDSecMgrRequestKeyInd
ZDSecMgrSaveApsLinkKey SYMBOL "ZDSecMgrSaveApsLinkKey"
`??ZDSecMgrSaveApsLinkKey::?relay` SYMBOL "?relay", ZDSecMgrSaveApsLinkKey
ZDSecMgrSaveTCLinkKey SYMBOL "ZDSecMgrSaveTCLinkKey"
`??ZDSecMgrSaveTCLinkKey::?relay` SYMBOL "?relay", ZDSecMgrSaveTCLinkKey
ZDSecMgrUpdateDeviceInd SYMBOL "ZDSecMgrUpdateDeviceInd"
`??ZDSecMgrUpdateDeviceInd::?relay` SYMBOL "?relay", ZDSecMgrUpdateDeviceInd
ZDSecMgrUpdateTCAddress SYMBOL "ZDSecMgrUpdateTCAddress"
`??ZDSecMgrUpdateTCAddress::?relay` SYMBOL "?relay", ZDSecMgrUpdateTCAddress
ZDSecMgrVerifyKeyInd SYMBOL "ZDSecMgrVerifyKeyInd"
`??ZDSecMgrVerifyKeyInd::?relay` SYMBOL "?relay", ZDSecMgrVerifyKeyInd
ZMacSetReq          SYMBOL "ZMacSetReq"
`??ZMacSetReq::?relay` SYMBOL "?relay", ZMacSetReq
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
afSetMatch          SYMBOL "afSetMatch"
`??afSetMatch::?relay` SYMBOL "?relay", afSetMatch
bdb_TCjoiningDeviceComplete SYMBOL "bdb_TCjoiningDeviceComplete"
`??bdb_TCjoiningDeviceComplete::?relay` SYMBOL "?relay", bdb_TCjoiningDeviceComplete
bdb_isDeviceNonFactoryNew SYMBOL "bdb_isDeviceNonFactoryNew"
`??bdb_isDeviceNonFactoryNew::?relay` SYMBOL "?relay", bdb_isDeviceNonFactoryNew
bdb_nwkAssocAttemt  SYMBOL "bdb_nwkAssocAttemt"
`??bdb_nwkAssocAttemt::?relay` SYMBOL "?relay", bdb_nwkAssocAttemt
bdb_nwkFormationAttempt SYMBOL "bdb_nwkFormationAttempt"
`??bdb_nwkFormationAttempt::?relay` SYMBOL "?relay", bdb_nwkFormationAttempt
bdb_reportCommissioningState SYMBOL "bdb_reportCommissioningState"
`??bdb_reportCommissioningState::?relay` SYMBOL "?relay", bdb_reportCommissioningState
bdb_setFN           SYMBOL "bdb_setFN"
`??bdb_setFN::?relay` SYMBOL "?relay", bdb_setFN
bdb_setNodeIsOnANetwork SYMBOL "bdb_setNodeIsOnANetwork"
`??bdb_setNodeIsOnANetwork::?relay` SYMBOL "?relay", bdb_setNodeIsOnANetwork
gp_ProxyTblInit     SYMBOL "gp_ProxyTblInit"
`??gp_ProxyTblInit::?relay` SYMBOL "?relay", gp_ProxyTblInit
nwkNeighborInitTable SYMBOL "nwkNeighborInitTable"
`??nwkNeighborInitTable::?relay` SYMBOL "?relay", nwkNeighborInitTable
nwkNeighborRemove   SYMBOL "nwkNeighborRemove"
`??nwkNeighborRemove::?relay` SYMBOL "?relay", nwkNeighborRemove
nwk_ExtPANIDValid   SYMBOL "nwk_ExtPANIDValid"
`??nwk_ExtPANIDValid::?relay` SYMBOL "?relay", nwk_ExtPANIDValid
nwk_desc_list_free  SYMBOL "nwk_desc_list_free"
`??nwk_desc_list_free::?relay` SYMBOL "?relay", nwk_desc_list_free
nwk_getNwkDescList  SYMBOL "nwk_getNwkDescList"
`??nwk_getNwkDescList::?relay` SYMBOL "?relay", nwk_getNwkDescList
osal_clear_event    SYMBOL "osal_clear_event"
`??osal_clear_event::?relay` SYMBOL "?relay", osal_clear_event
osal_get_timeoutEx  SYMBOL "osal_get_timeoutEx"
`??osal_get_timeoutEx::?relay` SYMBOL "?relay", osal_get_timeoutEx
osal_isbufset       SYMBOL "osal_isbufset"
`??osal_isbufset::?relay` SYMBOL "?relay", osal_isbufset
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcmp         SYMBOL "osal_memcmp"
`??osal_memcmp::?relay` SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_pwrmgr_device  SYMBOL "osal_pwrmgr_device"
`??osal_pwrmgr_device::?relay` SYMBOL "?relay", osal_pwrmgr_device
osal_rand           SYMBOL "osal_rand"
`??osal_rand::?relay` SYMBOL "?relay", osal_rand
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
sAddrExtCmp         SYMBOL "sAddrExtCmp"
`??sAddrExtCmp::?relay` SYMBOL "?relay", sAddrExtCmp
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
zgInitItems         SYMBOL "zgInitItems"
`??zgInitItems::?relay` SYMBOL "?relay", zgInitItems
zgReadStartupOptions SYMBOL "zgReadStartupOptions"
`??zgReadStartupOptions::?relay` SYMBOL "?relay", zgReadStartupOptions
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
AddrMgrWriteNVRequest SYMBOL "AddrMgrWriteNVRequest"
`??AddrMgrWriteNVRequest::?relay` SYMBOL "?relay", AddrMgrWriteNVRequest
ZDAppCheckForHoldKey SYMBOL "ZDAppCheckForHoldKey"
`??ZDAppCheckForHoldKey::?relay` SYMBOL "?relay", ZDAppCheckForHoldKey
ZDAppDetermineDeviceType SYMBOL "ZDAppDetermineDeviceType"
`??ZDAppDetermineDeviceType::?relay` SYMBOL "?relay", ZDAppDetermineDeviceType
ZDApp_AnnounceNewAddress SYMBOL "ZDApp_AnnounceNewAddress"
`??ZDApp_AnnounceNewAddress::?relay` SYMBOL "?relay", ZDApp_AnnounceNewAddress
ZDApp_ChangeMatchDescRespPermission SYMBOL "ZDApp_ChangeMatchDescRespPermission"
`??ZDApp_ChangeMatchDescRespPermission::?relay` SYMBOL "?relay", ZDApp_ChangeMatchDescRespPermission
ZDApp_ChangeState   SYMBOL "ZDApp_ChangeState"
`??ZDApp_ChangeState::?relay` SYMBOL "?relay", ZDApp_ChangeState
ZDApp_CoordStartPANIDConflictCB SYMBOL "ZDApp_CoordStartPANIDConflictCB"
`??ZDApp_CoordStartPANIDConflictCB::?relay` SYMBOL "?relay", ZDApp_CoordStartPANIDConflictCB
ZDApp_DeviceAuthEvt SYMBOL "ZDApp_DeviceAuthEvt"
`??ZDApp_DeviceAuthEvt::?relay` SYMBOL "?relay", ZDApp_DeviceAuthEvt
ZDApp_DeviceConfigured SYMBOL "ZDApp_DeviceConfigured"
`??ZDApp_DeviceConfigured::?relay` SYMBOL "?relay", ZDApp_DeviceConfigured
ZDApp_ForceConcentratorChange SYMBOL "ZDApp_ForceConcentratorChange"
`??ZDApp_ForceConcentratorChange::?relay` SYMBOL "?relay", ZDApp_ForceConcentratorChange
ZDApp_InMsgCB       SYMBOL "ZDApp_InMsgCB"
`??ZDApp_InMsgCB::?relay` SYMBOL "?relay", ZDApp_InMsgCB
ZDApp_Init          SYMBOL "ZDApp_Init"
`??ZDApp_Init::?relay` SYMBOL "?relay", ZDApp_Init
ZDApp_InitUserDesc  SYMBOL "ZDApp_InitUserDesc"
`??ZDApp_InitUserDesc::?relay` SYMBOL "?relay", ZDApp_InitUserDesc
ZDApp_InitZdoCBFunc SYMBOL "ZDApp_InitZdoCBFunc"
`??ZDApp_InitZdoCBFunc::?relay` SYMBOL "?relay", ZDApp_InitZdoCBFunc
ZDApp_JoinReq       SYMBOL "ZDApp_JoinReq"
`??ZDApp_JoinReq::?relay` SYMBOL "?relay", ZDApp_JoinReq
ZDApp_LeaveCtrlBypass SYMBOL "ZDApp_LeaveCtrlBypass"
`??ZDApp_LeaveCtrlBypass::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlBypass
ZDApp_LeaveCtrlInit SYMBOL "ZDApp_LeaveCtrlInit"
`??ZDApp_LeaveCtrlInit::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlInit
ZDApp_LeaveCtrlReset SYMBOL "ZDApp_LeaveCtrlReset"
`??ZDApp_LeaveCtrlReset::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlReset
ZDApp_LeaveCtrlSet  SYMBOL "ZDApp_LeaveCtrlSet"
`??ZDApp_LeaveCtrlSet::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlSet
ZDApp_LeaveCtrlStartup SYMBOL "ZDApp_LeaveCtrlStartup"
`??ZDApp_LeaveCtrlStartup::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlStartup
ZDApp_LeaveReset    SYMBOL "ZDApp_LeaveReset"
`??ZDApp_LeaveReset::?relay` SYMBOL "?relay", ZDApp_LeaveReset
ZDApp_LeaveUpdate   SYMBOL "ZDApp_LeaveUpdate"
`??ZDApp_LeaveUpdate::?relay` SYMBOL "?relay", ZDApp_LeaveUpdate
ZDApp_NVUpdate      SYMBOL "ZDApp_NVUpdate"
`??ZDApp_NVUpdate::?relay` SYMBOL "?relay", ZDApp_NVUpdate
ZDApp_NetworkDiscoveryReq SYMBOL "ZDApp_NetworkDiscoveryReq"
`??ZDApp_NetworkDiscoveryReq::?relay` SYMBOL "?relay", ZDApp_NetworkDiscoveryReq
ZDApp_NetworkInit   SYMBOL "ZDApp_NetworkInit"
`??ZDApp_NetworkInit::?relay` SYMBOL "?relay", ZDApp_NetworkInit
ZDApp_NetworkStartEvt SYMBOL "ZDApp_NetworkStartEvt"
`??ZDApp_NetworkStartEvt::?relay` SYMBOL "?relay", ZDApp_NetworkStartEvt
ZDApp_NodeProfileSync SYMBOL "ZDApp_NodeProfileSync"
`??ZDApp_NodeProfileSync::?relay` SYMBOL "?relay", ZDApp_NodeProfileSync
ZDApp_NwkDescListProcessing SYMBOL "ZDApp_NwkDescListProcessing"
`??ZDApp_NwkDescListProcessing::?relay` SYMBOL "?relay", ZDApp_NwkDescListProcessing
ZDApp_NwkStateUpdateCB SYMBOL "ZDApp_NwkStateUpdateCB"
`??ZDApp_NwkStateUpdateCB::?relay` SYMBOL "?relay", ZDApp_NwkStateUpdateCB
ZDApp_ProcessMsgCBs SYMBOL "ZDApp_ProcessMsgCBs"
`??ZDApp_ProcessMsgCBs::?relay` SYMBOL "?relay", ZDApp_ProcessMsgCBs
ZDApp_ProcessNetworkJoin SYMBOL "ZDApp_ProcessNetworkJoin"
`??ZDApp_ProcessNetworkJoin::?relay` SYMBOL "?relay", ZDApp_ProcessNetworkJoin
ZDApp_ProcessOSALMsg SYMBOL "ZDApp_ProcessOSALMsg"
`??ZDApp_ProcessOSALMsg::?relay` SYMBOL "?relay", ZDApp_ProcessOSALMsg
ZDApp_ProcessSecEvent SYMBOL "ZDApp_ProcessSecEvent"
`??ZDApp_ProcessSecEvent::?relay` SYMBOL "?relay", ZDApp_ProcessSecEvent
ZDApp_ProcessSecMsg SYMBOL "ZDApp_ProcessSecMsg"
`??ZDApp_ProcessSecMsg::?relay` SYMBOL "?relay", ZDApp_ProcessSecMsg
ZDApp_ReadNetworkRestoreState SYMBOL "ZDApp_ReadNetworkRestoreState"
`??ZDApp_ReadNetworkRestoreState::?relay` SYMBOL "?relay", ZDApp_ReadNetworkRestoreState
ZDApp_RegisterCBs   SYMBOL "ZDApp_RegisterCBs"
`??ZDApp_RegisterCBs::?relay` SYMBOL "?relay", ZDApp_RegisterCBs
ZDApp_ResetNwkKey   SYMBOL "ZDApp_ResetNwkKey"
`??ZDApp_ResetNwkKey::?relay` SYMBOL "?relay", ZDApp_ResetNwkKey
ZDApp_ResetTimerCancel SYMBOL "ZDApp_ResetTimerCancel"
`??ZDApp_ResetTimerCancel::?relay` SYMBOL "?relay", ZDApp_ResetTimerCancel
ZDApp_ResetTimerStart SYMBOL "ZDApp_ResetTimerStart"
`??ZDApp_ResetTimerStart::?relay` SYMBOL "?relay", ZDApp_ResetTimerStart
ZDApp_RestoreNetworkState SYMBOL "ZDApp_RestoreNetworkState"
`??ZDApp_RestoreNetworkState::?relay` SYMBOL "?relay", ZDApp_RestoreNetworkState
ZDApp_RestoreNwkKey SYMBOL "ZDApp_RestoreNwkKey"
`??ZDApp_RestoreNwkKey::?relay` SYMBOL "?relay", ZDApp_RestoreNwkKey
ZDApp_RestoreNwkSecMaterial SYMBOL "ZDApp_RestoreNwkSecMaterial"
`??ZDApp_RestoreNwkSecMaterial::?relay` SYMBOL "?relay", ZDApp_RestoreNwkSecMaterial
ZDApp_SaveNetworkStateEvt SYMBOL "ZDApp_SaveNetworkStateEvt"
`??ZDApp_SaveNetworkStateEvt::?relay` SYMBOL "?relay", ZDApp_SaveNetworkStateEvt
ZDApp_SaveNwkKey    SYMBOL "ZDApp_SaveNwkKey"
`??ZDApp_SaveNwkKey::?relay` SYMBOL "?relay", ZDApp_SaveNwkKey
ZDApp_SecInit       SYMBOL "ZDApp_SecInit"
`??ZDApp_SecInit::?relay` SYMBOL "?relay", ZDApp_SecInit
ZDApp_SendEventMsg  SYMBOL "ZDApp_SendEventMsg"
`??ZDApp_SendEventMsg::?relay` SYMBOL "?relay", ZDApp_SendEventMsg
ZDApp_SendMsg       SYMBOL "ZDApp_SendMsg"
`??ZDApp_SendMsg::?relay` SYMBOL "?relay", ZDApp_SendMsg
ZDApp_SendParentAnnce SYMBOL "ZDApp_SendParentAnnce"
`??ZDApp_SendParentAnnce::?relay` SYMBOL "?relay", ZDApp_SendParentAnnce
ZDApp_SetParentAnnceTimer SYMBOL "ZDApp_SetParentAnnceTimer"
`??ZDApp_SetParentAnnceTimer::?relay` SYMBOL "?relay", ZDApp_SetParentAnnceTimer
ZDApp_SetRejoinBackoffDuration SYMBOL "ZDApp_SetRejoinBackoffDuration"
`??ZDApp_SetRejoinBackoffDuration::?relay` SYMBOL "?relay", ZDApp_SetRejoinBackoffDuration
ZDApp_SetRejoinScanDuration SYMBOL "ZDApp_SetRejoinScanDuration"
`??ZDApp_SetRejoinScanDuration::?relay` SYMBOL "?relay", ZDApp_SetRejoinScanDuration
ZDApp_StartJoiningCycle SYMBOL "ZDApp_StartJoiningCycle"
`??ZDApp_StartJoiningCycle::?relay` SYMBOL "?relay", ZDApp_StartJoiningCycle
ZDApp_StopJoiningCycle SYMBOL "ZDApp_StopJoiningCycle"
`??ZDApp_StopJoiningCycle::?relay` SYMBOL "?relay", ZDApp_StopJoiningCycle
ZDApp_StoreNwkSecMaterial SYMBOL "ZDApp_StoreNwkSecMaterial"
`??ZDApp_StoreNwkSecMaterial::?relay` SYMBOL "?relay", ZDApp_StoreNwkSecMaterial
ZDApp_event_loop    SYMBOL "ZDApp_event_loop"
`??ZDApp_event_loop::?relay` SYMBOL "?relay", ZDApp_event_loop
ZDOInitDeviceEx     SYMBOL "ZDOInitDeviceEx"
`??ZDOInitDeviceEx::?relay` SYMBOL "?relay", ZDOInitDeviceEx
ZDO_AddrChangeIndicationCB SYMBOL "ZDO_AddrChangeIndicationCB"
`??ZDO_AddrChangeIndicationCB::?relay` SYMBOL "?relay", ZDO_AddrChangeIndicationCB
ZDO_ConcentratorIndicationCB SYMBOL "ZDO_ConcentratorIndicationCB"
`??ZDO_ConcentratorIndicationCB::?relay` SYMBOL "?relay", ZDO_ConcentratorIndicationCB
ZDO_DeregisterForZdoCB SYMBOL "ZDO_DeregisterForZdoCB"
`??ZDO_DeregisterForZdoCB::?relay` SYMBOL "?relay", ZDO_DeregisterForZdoCB
ZDO_JoinConfirmCB   SYMBOL "ZDO_JoinConfirmCB"
`??ZDO_JoinConfirmCB::?relay` SYMBOL "?relay", ZDO_JoinConfirmCB
ZDO_JoinIndicationCB SYMBOL "ZDO_JoinIndicationCB"
`??ZDO_JoinIndicationCB::?relay` SYMBOL "?relay", ZDO_JoinIndicationCB
ZDO_LeaveCnf        SYMBOL "ZDO_LeaveCnf"
`??ZDO_LeaveCnf::?relay` SYMBOL "?relay", ZDO_LeaveCnf
ZDO_LeaveInd        SYMBOL "ZDO_LeaveInd"
`??ZDO_LeaveInd::?relay` SYMBOL "?relay", ZDO_LeaveInd
ZDO_ManytoOneFailureIndicationCB SYMBOL "ZDO_ManytoOneFailureIndicationCB"
`??ZDO_ManytoOneFailureIndicationCB::?relay` SYMBOL "?relay", ZDO_ManytoOneFailureIndicationCB
ZDO_NetworkDiscoveryConfirmCB SYMBOL "ZDO_NetworkDiscoveryConfirmCB"
`??ZDO_NetworkDiscoveryConfirmCB::?relay` SYMBOL "?relay", ZDO_NetworkDiscoveryConfirmCB
ZDO_NetworkFormationConfirmCB SYMBOL "ZDO_NetworkFormationConfirmCB"
`??ZDO_NetworkFormationConfirmCB::?relay` SYMBOL "?relay", ZDO_NetworkFormationConfirmCB
ZDO_NetworkStatusCB SYMBOL "ZDO_NetworkStatusCB"
`??ZDO_NetworkStatusCB::?relay` SYMBOL "?relay", ZDO_NetworkStatusCB
ZDO_PermitJoinCB    SYMBOL "ZDO_PermitJoinCB"
`??ZDO_PermitJoinCB::?relay` SYMBOL "?relay", ZDO_PermitJoinCB
ZDO_PollConfirmCB   SYMBOL "ZDO_PollConfirmCB"
`??ZDO_PollConfirmCB::?relay` SYMBOL "?relay", ZDO_PollConfirmCB
ZDO_RegisterForZdoCB SYMBOL "ZDO_RegisterForZdoCB"
`??ZDO_RegisterForZdoCB::?relay` SYMBOL "?relay", ZDO_RegisterForZdoCB
ZDO_SrcRtgIndCB     SYMBOL "ZDO_SrcRtgIndCB"
`??ZDO_SrcRtgIndCB::?relay` SYMBOL "?relay", ZDO_SrcRtgIndCB
ZDO_StartRouterConfirmCB SYMBOL "ZDO_StartRouterConfirmCB"
`??ZDO_StartRouterConfirmCB::?relay` SYMBOL "?relay", ZDO_StartRouterConfirmCB
ZDO_SyncIndicationCB SYMBOL "ZDO_SyncIndicationCB"
`??ZDO_SyncIndicationCB::?relay` SYMBOL "?relay", ZDO_SyncIndicationCB
ZDO_UpdateDeviceIndication SYMBOL "ZDO_UpdateDeviceIndication"
`??ZDO_UpdateDeviceIndication::?relay` SYMBOL "?relay", ZDO_UpdateDeviceIndication
ZDO_beaconNotifyIndCB SYMBOL "ZDO_beaconNotifyIndCB"
`??ZDO_beaconNotifyIndCB::?relay` SYMBOL "?relay", ZDO_beaconNotifyIndCB

        EXTERN `??APSME_GetRequest::?relay`
        FUNCTION `??APSME_GetRequest::?relay`,00H
        EXTERN `??APSME_HoldDataRequests::?relay`
        FUNCTION `??APSME_HoldDataRequests::?relay`,00H
        EXTERN `??APSME_IsDistributedSecurity::?relay`
        FUNCTION `??APSME_IsDistributedSecurity::?relay`,00H
        EXTERN `??APSME_SearchTCLinkKeyEntry::?relay`
        FUNCTION `??APSME_SearchTCLinkKeyEntry::?relay`,00H
        EXTERN `??APSME_UpdateDeviceReq::?relay`
        FUNCTION `??APSME_UpdateDeviceReq::?relay`,00H
        EXTERN `??AssocMakeListOfRfdChild::?relay`
        FUNCTION `??AssocMakeListOfRfdChild::?relay`,00H
        EXTERN `??HalKeyRead::?relay`
        FUNCTION `??HalKeyRead::?relay`,00H
        EXTERN `??NLME_GetCoordShortAddr::?relay`
        FUNCTION `??NLME_GetCoordShortAddr::?relay`,00H
        EXTERN `??NLME_GetEnergyThreshold::?relay`
        FUNCTION `??NLME_GetEnergyThreshold::?relay`,00H
        EXTERN `??NLME_GetExtAddr::?relay`
        FUNCTION `??NLME_GetExtAddr::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_InitNV::?relay`
        FUNCTION `??NLME_InitNV::?relay`,00H
        EXTERN `??NLME_JoinRequest::?relay`
        FUNCTION `??NLME_JoinRequest::?relay`,00H
        EXTERN `??NLME_LeaveRsp::?relay`
        FUNCTION `??NLME_LeaveRsp::?relay`,00H
        EXTERN `??NLME_NetworkDiscoveryRequest::?relay`
        FUNCTION `??NLME_NetworkDiscoveryRequest::?relay`,00H
        EXTERN `??NLME_NwkDiscTerm::?relay`
        FUNCTION `??NLME_NwkDiscTerm::?relay`,00H
        EXTERN `??NLME_RemoveChild::?relay`
        FUNCTION `??NLME_RemoveChild::?relay`,00H
        EXTERN `??NLME_RestoreFromNV::?relay`
        FUNCTION `??NLME_RestoreFromNV::?relay`,00H
        EXTERN `??NLME_SetAssocFlags::?relay`
        FUNCTION `??NLME_SetAssocFlags::?relay`,00H
        EXTERN `??NLME_SetBroadcastFilter::?relay`
        FUNCTION `??NLME_SetBroadcastFilter::?relay`,00H
        EXTERN `??NLME_SetDefaultNV::?relay`
        FUNCTION `??NLME_SetDefaultNV::?relay`,00H
        EXTERN `??NLME_SetEnergyThreshold::?relay`
        FUNCTION `??NLME_SetEnergyThreshold::?relay`,00H
        EXTERN `??NLME_SetPollRate::?relay`
        FUNCTION `??NLME_SetPollRate::?relay`,00H
        EXTERN `??NLME_SetQueuedPollRate::?relay`
        FUNCTION `??NLME_SetQueuedPollRate::?relay`,00H
        EXTERN `??NLME_SetResponseRate::?relay`
        FUNCTION `??NLME_SetResponseRate::?relay`,00H
        EXTERN `??NLME_SetUpdateID::?relay`
        FUNCTION `??NLME_SetUpdateID::?relay`,00H
        EXTERN `??NLME_StartRouterRequest::?relay`
        FUNCTION `??NLME_StartRouterRequest::?relay`,00H
        EXTERN `??NLME_UpdateNV::?relay`
        FUNCTION `??NLME_UpdateNV::?relay`,00H
        EXTERN `??RTG_MTORouteReq::?relay`
        FUNCTION `??RTG_MTORouteReq::?relay`,00H
        EXTERN `??RTG_RemoveRtgEntry::?relay`
        FUNCTION `??RTG_RemoveRtgEntry::?relay`,00H
        EXTERN `??SSP_ReadNwkActiveKey::?relay`
        FUNCTION `??SSP_ReadNwkActiveKey::?relay`,00H
        EXTERN `??SSP_SwitchNwkKey::?relay`
        FUNCTION `??SSP_SwitchNwkKey::?relay`,00H
        EXTERN `??SSP_UpdateNwkKey::?relay`
        FUNCTION `??SSP_UpdateNwkKey::?relay`,00H
        EXTERN `??ZDConfig_InitDescriptors::?relay`
        FUNCTION `??ZDConfig_InitDescriptors::?relay`,00H
        EXTERN `??ZDMatchSendState::?relay`
        FUNCTION `??ZDMatchSendState::?relay`,00H
        EXTERN `??ZDO_Init::?relay`
        FUNCTION `??ZDO_Init::?relay`,00H
        EXTERN `??ZDO_MatchEndDeviceBind::?relay`
        FUNCTION `??ZDO_MatchEndDeviceBind::?relay`,00H
        EXTERN `??ZDO_ParseAddrRsp::?relay`
        FUNCTION `??ZDO_ParseAddrRsp::?relay`,00H
        EXTERN `??ZDO_ParseBindUnbindReq::?relay`
        FUNCTION `??ZDO_ParseBindUnbindReq::?relay`,00H
        EXTERN `??ZDO_ParseEndDeviceBindReq::?relay`
        FUNCTION `??ZDO_ParseEndDeviceBindReq::?relay`,00H
        EXTERN `??ZDO_ProcessBindUnbindReq::?relay`
        FUNCTION `??ZDO_ProcessBindUnbindReq::?relay`,00H
        EXTERN `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,00H
        EXTERN `??ZDO_StartDevice::?relay`
        FUNCTION `??ZDO_StartDevice::?relay`,00H
        EXTERN `??ZDO_UpdateAddrManager::?relay`
        FUNCTION `??ZDO_UpdateAddrManager::?relay`,00H
        EXTERN `??ZDO_UpdateNwkStatus::?relay`
        FUNCTION `??ZDO_UpdateNwkStatus::?relay`,00H
        EXTERN `??ZDP_DeviceAnnce::?relay`
        FUNCTION `??ZDP_DeviceAnnce::?relay`,00H
        EXTERN `??ZDP_GenericRsp::?relay`
        FUNCTION `??ZDP_GenericRsp::?relay`,00H
        EXTERN `??ZDP_IncomingData::?relay`
        FUNCTION `??ZDP_IncomingData::?relay`,00H
        EXTERN `??ZDP_ParentAnnce::?relay`
        FUNCTION `??ZDP_ParentAnnce::?relay`,00H
        EXTERN `??ZDSecMgrAddrClear::?relay`
        FUNCTION `??ZDSecMgrAddrClear::?relay`,00H
        EXTERN `??ZDSecMgrClearNVKeyValues::?relay`
        FUNCTION `??ZDSecMgrClearNVKeyValues::?relay`,00H
        EXTERN `??ZDSecMgrDeviceRemoveByExtAddr::?relay`
        FUNCTION `??ZDSecMgrDeviceRemoveByExtAddr::?relay`,00H
        EXTERN `??ZDSecMgrGenerateRndKey::?relay`
        FUNCTION `??ZDSecMgrGenerateRndKey::?relay`,00H
        EXTERN `??ZDSecMgrInit::?relay`
        FUNCTION `??ZDSecMgrInit::?relay`,00H
        EXTERN `??ZDSecMgrNewDeviceEvent::?relay`
        FUNCTION `??ZDSecMgrNewDeviceEvent::?relay`,00H
        EXTERN `??ZDSecMgrReadKeyFromNv::?relay`
        FUNCTION `??ZDSecMgrReadKeyFromNv::?relay`,00H
        EXTERN `??ZDSecMgrRequestKeyInd::?relay`
        FUNCTION `??ZDSecMgrRequestKeyInd::?relay`,00H
        EXTERN `??ZDSecMgrSaveApsLinkKey::?relay`
        FUNCTION `??ZDSecMgrSaveApsLinkKey::?relay`,00H
        EXTERN `??ZDSecMgrSaveTCLinkKey::?relay`
        FUNCTION `??ZDSecMgrSaveTCLinkKey::?relay`,00H
        EXTERN `??ZDSecMgrUpdateDeviceInd::?relay`
        FUNCTION `??ZDSecMgrUpdateDeviceInd::?relay`,00H
        EXTERN `??ZDSecMgrUpdateTCAddress::?relay`
        FUNCTION `??ZDSecMgrUpdateTCAddress::?relay`,00H
        EXTERN `??ZDSecMgrVerifyKeyInd::?relay`
        FUNCTION `??ZDSecMgrVerifyKeyInd::?relay`,00H
        EXTERN `??ZMacSetReq::?relay`
        FUNCTION `??ZMacSetReq::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??afSetMatch::?relay`
        FUNCTION `??afSetMatch::?relay`,00H
        EXTERN `??bdb_TCjoiningDeviceComplete::?relay`
        FUNCTION `??bdb_TCjoiningDeviceComplete::?relay`,00H
        EXTERN `??bdb_isDeviceNonFactoryNew::?relay`
        FUNCTION `??bdb_isDeviceNonFactoryNew::?relay`,00H
        EXTERN `??bdb_nwkAssocAttemt::?relay`
        FUNCTION `??bdb_nwkAssocAttemt::?relay`,00H
        EXTERN `??bdb_nwkFormationAttempt::?relay`
        FUNCTION `??bdb_nwkFormationAttempt::?relay`,00H
        EXTERN `??bdb_reportCommissioningState::?relay`
        FUNCTION `??bdb_reportCommissioningState::?relay`,00H
        EXTERN `??bdb_setFN::?relay`
        FUNCTION `??bdb_setFN::?relay`,00H
        EXTERN `??bdb_setNodeIsOnANetwork::?relay`
        FUNCTION `??bdb_setNodeIsOnANetwork::?relay`,00H
        EXTERN `??gp_ProxyTblInit::?relay`
        FUNCTION `??gp_ProxyTblInit::?relay`,00H
        EXTERN `??nwkNeighborInitTable::?relay`
        FUNCTION `??nwkNeighborInitTable::?relay`,00H
        EXTERN `??nwkNeighborRemove::?relay`
        FUNCTION `??nwkNeighborRemove::?relay`,00H
        EXTERN `??nwk_ExtPANIDValid::?relay`
        FUNCTION `??nwk_ExtPANIDValid::?relay`,00H
        EXTERN `??nwk_desc_list_free::?relay`
        FUNCTION `??nwk_desc_list_free::?relay`,00H
        EXTERN `??nwk_getNwkDescList::?relay`
        FUNCTION `??nwk_getNwkDescList::?relay`,00H
        EXTERN `??osal_clear_event::?relay`
        FUNCTION `??osal_clear_event::?relay`,00H
        EXTERN `??osal_get_timeoutEx::?relay`
        FUNCTION `??osal_get_timeoutEx::?relay`,00H
        EXTERN `??osal_isbufset::?relay`
        FUNCTION `??osal_isbufset::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcmp::?relay`
        FUNCTION `??osal_memcmp::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_pwrmgr_device::?relay`
        FUNCTION `??osal_pwrmgr_device::?relay`,00H
        EXTERN `??osal_rand::?relay`
        FUNCTION `??osal_rand::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??sAddrExtCmp::?relay`
        FUNCTION `??sAddrExtCmp::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN `??zgInitItems::?relay`
        FUNCTION `??zgInitItems::?relay`,00H
        EXTERN `??zgReadStartupOptions::?relay`
        FUNCTION `??zgReadStartupOptions::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN AIB_apsUseExtendedPANID
        EXTERN AIB_apsUseInsecureJoin
        EXTERN APSME_GetRequest
        FUNCTION APSME_GetRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_HoldDataRequests
        FUNCTION APSME_HoldDataRequests,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_IsDistributedSecurity
        FUNCTION APSME_IsDistributedSecurity,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_SearchTCLinkKeyEntry
        FUNCTION APSME_SearchTCLinkKeyEntry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_UpdateDeviceReq
        FUNCTION APSME_UpdateDeviceReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocMakeListOfRfdChild
        FUNCTION AssocMakeListOfRfdChild,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN GP_CheckAnnouncedDeviceGCB
        EXTERN GP_aliasConflictAnnce
        EXTERN HalKeyRead
        FUNCTION HalKeyRead,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetEnergyThreshold
        FUNCTION NLME_GetEnergyThreshold,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_InitNV
        FUNCTION NLME_InitNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_JoinRequest
        FUNCTION NLME_JoinRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveRsp
        FUNCTION NLME_LeaveRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_NetworkDiscoveryRequest
        FUNCTION NLME_NetworkDiscoveryRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_NwkDiscTerm
        FUNCTION NLME_NwkDiscTerm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_RemoveChild
        FUNCTION NLME_RemoveChild,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_RestoreFromNV
        FUNCTION NLME_RestoreFromNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetAssocFlags
        FUNCTION NLME_SetAssocFlags,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetBroadcastFilter
        FUNCTION NLME_SetBroadcastFilter,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetDefaultNV
        FUNCTION NLME_SetDefaultNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetEnergyThreshold
        FUNCTION NLME_SetEnergyThreshold,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetPollRate
        FUNCTION NLME_SetPollRate,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetQueuedPollRate
        FUNCTION NLME_SetQueuedPollRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetResponseRate
        FUNCTION NLME_SetResponseRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetUpdateID
        FUNCTION NLME_SetUpdateID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_StartRouterRequest
        FUNCTION NLME_StartRouterRequest,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_UpdateNV
        FUNCTION NLME_UpdateNV,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NWK_TaskID
        EXTERN NwkDescList
        EXTERN Onboard_soft_reset
        FUNCTION Onboard_soft_reset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_MTORouteReq
        FUNCTION RTG_MTORouteReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_RemoveRtgEntry
        FUNCTION RTG_RemoveRtgEntry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_ReadNwkActiveKey
        FUNCTION SSP_ReadNwkActiveKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_SwitchNwkKey
        FUNCTION SSP_SwitchNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_UpdateNwkKey
        FUNCTION SSP_UpdateNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDConfig_InitDescriptors
        FUNCTION ZDConfig_InitDescriptors,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDMatchSendState
        FUNCTION ZDMatchSendState,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_Config_Node_Descriptor
        EXTERN ZDO_Init
        FUNCTION ZDO_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_MatchEndDeviceBind
        FUNCTION ZDO_MatchEndDeviceBind,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseAddrRsp
        FUNCTION ZDO_ParseAddrRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseBindUnbindReq
        FUNCTION ZDO_ParseBindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEndDeviceBindReq
        FUNCTION ZDO_ParseEndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ProcessBindUnbindReq
        FUNCTION ZDO_ProcessBindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_StartDevice
        FUNCTION ZDO_StartDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_UpdateAddrManager
        FUNCTION ZDO_UpdateAddrManager,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_UpdateNwkStatus
        FUNCTION ZDO_UpdateNwkStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_DeviceAnnce
        FUNCTION ZDP_DeviceAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_GenericRsp
        FUNCTION ZDP_GenericRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_IncomingData
        FUNCTION ZDP_IncomingData,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_ParentAnnce
        FUNCTION ZDP_ParentAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_TransID
        EXTERN ZDSecMgrAddrClear
        FUNCTION ZDSecMgrAddrClear,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrClearNVKeyValues
        FUNCTION ZDSecMgrClearNVKeyValues,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrDeviceRemoveByExtAddr
        FUNCTION ZDSecMgrDeviceRemoveByExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrGenerateRndKey
        FUNCTION ZDSecMgrGenerateRndKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrInit
        FUNCTION ZDSecMgrInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrNewDeviceEvent
        FUNCTION ZDSecMgrNewDeviceEvent,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrReadKeyFromNv
        FUNCTION ZDSecMgrReadKeyFromNv,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrRequestKeyInd
        FUNCTION ZDSecMgrRequestKeyInd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrSaveApsLinkKey
        FUNCTION ZDSecMgrSaveApsLinkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrSaveTCLinkKey
        FUNCTION ZDSecMgrSaveTCLinkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrUpdateDeviceInd
        FUNCTION ZDSecMgrUpdateDeviceInd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrUpdateTCAddress
        FUNCTION ZDSecMgrUpdateTCAddress,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrVerifyKeyInd
        FUNCTION ZDSecMgrVerifyKeyInd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN aExtendedAddress
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afSetMatch
        FUNCTION afSetMatch,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdbCommissioningProcedureState
        EXTERN bdb_TCjoiningDeviceComplete
        FUNCTION bdb_TCjoiningDeviceComplete,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_isDeviceNonFactoryNew
        FUNCTION bdb_isDeviceNonFactoryNew,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_nwkAssocAttemt
        FUNCTION bdb_nwkAssocAttemt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_nwkFormationAttempt
        FUNCTION bdb_nwkFormationAttempt,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_reportCommissioningState
        FUNCTION bdb_reportCommissioningState,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_setFN
        FUNCTION bdb_setFN,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_setNodeIsOnANetwork
        FUNCTION bdb_setNodeIsOnANetwork,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN epList
        EXTERN gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
        EXTERN gMIN_TREE_LQI
        EXTERN gp_ProxyTblInit
        FUNCTION gp_ProxyTblInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gp_TaskID
        EXTERN matchED
        EXTERN nwkFrameCounter
        EXTERN nwkFrameCounterChanges
        EXTERN nwkNeighborInitTable
        FUNCTION nwkNeighborInitTable,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwkNeighborRemove
        FUNCTION nwkNeighborRemove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_ExtPANIDValid
        FUNCTION nwk_ExtPANIDValid,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_desc_list_free
        FUNCTION nwk_desc_list_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_getNwkDescList
        FUNCTION nwk_getNwkDescList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_clear_event
        FUNCTION osal_clear_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_isbufset
        FUNCTION osal_isbufset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_pwrmgr_device
        FUNCTION osal_pwrmgr_device,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN pZDNwkMgr_ProcessDataConfirm
        EXTERN pbindRemoveDev
        EXTERN sAddrExtCmp
        FUNCTION sAddrExtCmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN savedQueuedPollRate
        EXTERN savedResponseRate
        EXTERN zgApsLinkKeyType
        EXTERN zgChildAgingEnable
        EXTERN zgConcentratorDiscoveryTime
        EXTERN zgConcentratorEnable
        EXTERN zgConfigPANID
        EXTERN zgDefaultChannelList
        EXTERN zgDefaultRejoinBackoff
        EXTERN zgDefaultRejoinScan
        EXTERN zgDeviceLogicalType
        EXTERN zgInitItems
        FUNCTION zgInitItems,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgPollRate
        EXTERN zgQueuedPollRate
        EXTERN zgReadStartupOptions
        FUNCTION zgReadStartupOptions,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgRejoinPollRate
        EXTERN zgResponsePollRate
        EXTERN zgStackProfile
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack 3.0.0\Components\stack\zdo\ZDApp.c
//    1 /**************************************************************************************************
//    2   Filename:       ZDApp.c
//    3   Revised:        $Date: 2015-10-06 12:04:24 -0700 (Tue, 06 Oct 2015) $
//    4   Revision:       $Revision: 44520 $
//    5 
//    6   Description:    This file contains the interface to the Zigbee Device Application. This is the
//    7                   Application part that the user can change. This also contains the Task functions.
//    8 
//    9 
//   10   Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License"). You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product. Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42  * INCLUDES
//   43  */
//   44 
//   45 #include "ZComDef.h"
//   46 #include "ZMAC.h"
//   47 #include "OSAL.h"
//   48 #include "OSAL_Tasks.h"
//   49 #include "OSAL_PwrMgr.h"
//   50 #include "OSAL_Nv.h"
//   51 #include "AF.h"
//   52 #include "APSMEDE.h"
//   53 #include "NLMEDE.h"
//   54 #include "AddrMgr.h"
//   55 #include "ZDProfile.h"
//   56 #include "ZDObject.h"
//   57 #include "ZDConfig.h"
//   58 #include "ZDSecMgr.h"
//   59 #include "ZDApp.h"
//   60 #include "DebugTrace.h"
//   61 #include "nwk_util.h"
//   62 #include "OnBoard.h"
//   63 #include "ZGlobals.h"
//   64 #include "ZDNwkMgr.h"
//   65 #include "rtg.h"
//   66    
//   67 //GP_UPDATE
//   68 #include "gp_common.h"
//   69 
//   70    
//   71 #include "bdb.h"
//   72 #include "bdb_interface.h"
//   73 
//   74 #include "ssp.h"
//   75 
//   76 /* HAL */
//   77 #include "hal_led.h"
//   78 #include "hal_lcd.h"
//   79 #include "hal_key.h"
//   80 
//   81 #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
//   82   #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
//   83 #endif
//   84 
//   85 /*********************************************************************
//   86  * CONSTANTS
//   87  */
//   88 
//   89 #if !defined( NWK_START_DELAY )
//   90   #define NWK_START_DELAY             100   // in milliseconds
//   91 #endif
//   92 
//   93 #if !defined( LEAVE_RESET_DELAY )
//   94   #define LEAVE_RESET_DELAY           5000  // in milliseconds
//   95 #endif
//   96 
//   97 #if !defined( EXTENDED_JOINING_RANDOM_MASK )
//   98   #define EXTENDED_JOINING_RANDOM_MASK 0x007F
//   99 #endif
//  100 
//  101 #if !defined( BEACON_REQUEST_DELAY )
//  102   #define BEACON_REQUEST_DELAY        100   // in milliseconds
//  103 #endif
//  104 
//  105 #if !defined( BEACON_REQ_DELAY_MASK )
//  106   #define BEACON_REQ_DELAY_MASK       0x007F
//  107 #endif
//  108 
//  109 #define MAX_RESUME_RETRY            3
//  110 
//  111 #define MAX_DEVICE_UNAUTH_TIMEOUT   10000  // 10 seconds
//  112 
//  113 // Beacon Order Settings (see NLMEDE.h)
//  114 #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
//  115 #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
//  116 
//  117 // Leave control bits
//  118 #define ZDAPP_LEAVE_CTRL_INIT 0
//  119 #define ZDAPP_LEAVE_CTRL_SET  1
//  120 #define ZDAPP_LEAVE_CTRL_RA   2
//  121 
//  122 // Address Manager Stub Implementation
//  123 #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
//  124 
//  125 
//  126 #if !defined ZDO_NV_SAVE_RFDs
//  127 #define ZDO_NV_SAVE_RFDs  TRUE
//  128 #endif
//  129 
//  130 // Delay time before updating NWK NV data to force fewer writes during high activity.
//  131 #if ZDO_NV_SAVE_RFDs
//  132 #define ZDAPP_UPDATE_NWK_NV_TIME 700
//  133 #else
//  134 #define ZDAPP_UPDATE_NWK_NV_TIME 65000
//  135 #endif
//  136 
//  137 // Timeout value to process New Devices
//  138 #define ZDAPP_NEW_DEVICE_TIME     600   // in ms
//  139 
//  140 
//  141 //ZDP_BIND_SKIP_VALIDATION, redefined as ZDP_BIND_VALIDATION
//  142 #if defined ( ZDP_BIND_VALIDATION )
//  143 #if !defined MAX_PENDING_BIND_REQ
//  144 #define MAX_PENDING_BIND_REQ 3
//  145 #endif
//  146 #endif
//  147 
//  148 #ifdef LEGACY_ZDO_LEDS
//  149 #define zdoHalLedSet HalLedSet
//  150 #else
//  151 #define zdoHalLedSet(...)
//  152 #endif
//  153 
//  154 /******************************************************************************
//  155  * TYPEDEFS
//  156  */
//  157 typedef struct
//  158 {
//  159   void   *next;
//  160   uint16 shortAddr;
//  161   uint16 timeDelta;
//  162 } ZDAppNewDevice_t;
//  163 
//  164 /*********************************************************************
//  165  * GLOBAL VARIABLES
//  166  */
//  167 
//  168 #if defined( LCD_SUPPORTED )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  169   uint8 MatchRsps = 0;
MatchRsps:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  170 #endif
//  171 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  172 zAddrType_t ZDAppNwkAddr;
ZDAppNwkAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z
//  173 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  174 uint8 zdappMgmtNwkDiscRspTransSeq;
zdappMgmtNwkDiscRspTransSeq:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  175 uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
zdappMgmtNwkDiscReqInProgress:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  176 zAddrType_t zdappMgmtNwkDiscRspAddr;
zdappMgmtNwkDiscRspAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  177 uint8 zdappMgmtNwkDiscStartIndex;
zdappMgmtNwkDiscStartIndex:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  178 uint8 zdappMgmtSavedNwkState;
zdappMgmtSavedNwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  179 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  180 uint8 continueJoining = TRUE;
continueJoining:
        DATA8
        DS 1
        REQUIRE `?<Initializer for continueJoining>`
        REQUIRE __INIT_XDATA_I
//  181 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  182 uint8  _tmpRejoinState;
_tmpRejoinState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  183 
//  184 // The extended PanID used in ZDO layer for rejoin.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  185 uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
ZDO_UseExtendedPANID:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  186 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  187 pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
zdoCBFunc:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  188 
//  189 #if defined ( ZDP_BIND_VALIDATION )
//  190 ZDO_PendingBindReq_t *ZDAppPendingBindReq = NULL;
//  191 #endif
//  192 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  193 uint32 runtimeChannel;
runtimeChannel:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  194 uint8 FrameCounterUpdated = FALSE;
FrameCounterUpdated:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  195 /*********************************************************************
//  196  * EXTERNAL VARIABLES
//  197  */
//  198 
//  199 extern bool    requestNewTrustCenterLinkKey;
//  200 extern uint32  requestLinkKeyTimeout;
//  201 extern CONST   uint8 gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES;
//  202 /*********************************************************************
//  203  * EXTERNAL FUNCTIONS
//  204  */
//  205 
//  206 /*********************************************************************
//  207  * LOCAL FUNCTIONS
//  208  */
//  209 void ZDApp_NetworkStartEvt( void );
//  210 void ZDApp_DeviceAuthEvt( void );
//  211 void ZDApp_SaveNetworkStateEvt( void );
//  212 
//  213 uint8 ZDApp_ReadNetworkRestoreState( void );
//  214 uint8 ZDApp_RestoreNetworkState( void );
//  215 void ZDAppDetermineDeviceType( void );
//  216 void ZDApp_InitUserDesc( void );
//  217 void ZDAppCheckForHoldKey( void );
//  218 void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
//  219 void ZDApp_ProcessNetworkJoin( void );
//  220 void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
//  221 uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
//  222 networkDesc_t* ZDApp_NwkDescListProcessing(void);
//  223 
//  224 void ZDApp_SecInit( uint8 state );
//  225 UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
//  226 void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
//  227 
//  228 void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
//  229 
//  230 void ZDApp_ResetTimerStart( uint16 delay );
//  231 void ZDApp_ResetTimerCancel( void );
//  232 void ZDApp_LeaveCtrlInit( void );
//  233 void ZDApp_LeaveCtrlSet( uint8 ra );
//  234 uint8 ZDApp_LeaveCtrlBypass( void );
//  235 void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
//  236 void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr, uint8 removeChildren, uint8 rejoin );
//  237 void ZDApp_NodeProfileSync( uint8 stackProfile );
//  238 void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
//  239 void ZDApp_RegisterCBs( void );
//  240 void ZDApp_InitZdoCBFunc(void);
//  241 #if defined ( ZDP_BIND_VALIDATION )
//  242 void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq );
//  243 void ZDApp_InitPendingBind( void );
//  244 void ZDApp_ProcessPendingBindReq( uint8 *extAddr );
//  245 void ZDApp_AgeOutPendingBindEntry( void );
//  246 #endif
//  247 
//  248 void ZDApp_SetParentAnnceTimer( void );
//  249 void ZDApp_StoreNwkSecMaterial(void);
//  250 
//  251 /*********************************************************************
//  252  * LOCAL VARIABLES
//  253  */
//  254 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  255 uint8 ZDAppTaskID;
ZDAppTaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  256 uint8 nwkStatus;
nwkStatus:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  257 endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
ZDApp_AutoFindMode_epDesc:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  258 uint8 ZDApp_LeaveCtrl;
ZDApp_LeaveCtrl:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  259 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  260 devStates_t devState = DEV_HOLD;
devState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  261 
//  262 // previous rejoin state

        RSEG XDATA_I:XDATA:NOROOT(0)
//  263   devStates_t prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
prevDevState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for prevDevState>`
        REQUIRE __INIT_XDATA_I
//  264 
//  265 #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )
//  266   devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
//  267   //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
//  268                         // to parent. Set to make the device do an Orphan scan.
//  269 #else
//  270   // Set the default to coodinator

        RSEG XDATA_I:XDATA:NOROOT(0)
//  271   devStartModes_t devStartMode = MODE_HARD;
devStartMode:
        DATA8
        DS 1
        REQUIRE `?<Initializer for devStartMode>`
        REQUIRE __INIT_XDATA_I
//  272 #endif
//  273 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  274 uint8 retryCnt = 0;
retryCnt:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  275 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  276 endPointDesc_t ZDApp_epDesc =
ZDApp_epDesc:
        DATA8
        DS 7
        REQUIRE `?<Initializer for ZDApp_epDesc>`
        REQUIRE __INIT_XDATA_I
//  277 {
//  278   ZDO_EP,
//  279   0,
//  280   &ZDAppTaskID,
//  281   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
//  282   (afNetworkLatencyReq_t)0            // No Network Latency req
//  283 };
//  284 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  285 uint32 ZDApp_SavedPollRate = POLL_RATE;
ZDApp_SavedPollRate:
        DATA32
        DS 4
        REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
        REQUIRE __INIT_XDATA_I
//  286 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  287 ZDAppNewDevice_t *ZDApp_NewDeviceList = NULL;
ZDApp_NewDeviceList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  288 
//  289 /* "Hold Key" status saved during ZDAppCheckForHoldKey() */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  290 static uint8 zdappHoldKeys;
zdappHoldKeys:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  291 
//  292 /*********************************************************************
//  293  * @fn      ZDApp_Init
//  294  *
//  295  * @brief   ZDApp Initialization function.
//  296  *
//  297  * @param   task_id - ZDApp Task ID
//  298  *
//  299  * @return  None
//  300  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  301 void ZDApp_Init( uint8 task_id )
ZDApp_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ZDApp_Init
        CODE
//  302 {
        FUNCALL ZDApp_Init, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDAppCheckForHoldKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDO_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDApp_InitZdoCBFunc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDApp_RegisterCBs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  303   // Save the task ID
//  304   ZDAppTaskID = task_id;
        MOV     DPTR,#ZDAppTaskID
        MOVX    @DPTR,A
//  305 
//  306   // Initialize the ZDO global device short address storage
//  307   ZDAppNwkAddr.addrMode = Addr16Bit;
        MOV     DPTR,#ZDAppNwkAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  308   ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
        MOV     DPTR,#ZDAppNwkAddr
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
//  309   (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
//  310 
//  311   // Check for manual "Hold Auto Start"
//  312   ZDAppCheckForHoldKey();
        ; Setup parameters for call to function ZDAppCheckForHoldKey
        LCALL   `??ZDAppCheckForHoldKey::?relay`; Banked call to: ZDAppCheckForHoldKey
//  313 
//  314   // Initialize ZDO items and setup the device - type of device to create.
//  315   ZDO_Init();
        ; Setup parameters for call to function ZDO_Init
        LCALL   `??ZDO_Init::?relay` ; Banked call to: ZDO_Init
//  316 
//  317   // Register the endpoint description with the AF
//  318   // This task doesn't have a Simple description, but we still need
//  319   // to register the endpoint.
//  320   afRegister( (endPointDesc_t *)&ZDApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#ZDApp_epDesc & 0xff
        MOV     R3,#(ZDApp_epDesc >> 8) & 0xff
        LCALL   `??afRegister::?relay`; Banked call to: afRegister
//  321 
//  322 #if defined( ZDO_USERDESC_RESPONSE )
//  323   ZDApp_InitUserDesc();
//  324 #endif // ZDO_USERDESC_RESPONSE
//  325 
//  326   // Initialize the ZDO callback function pointers zdoCBFunc[]
//  327   ZDApp_InitZdoCBFunc();
        ; Setup parameters for call to function ZDApp_InitZdoCBFunc
        LCALL   `??ZDApp_InitZdoCBFunc::?relay`; Banked call to: ZDApp_InitZdoCBFunc
//  328 
//  329   ZDApp_RegisterCBs();
        ; Setup parameters for call to function ZDApp_RegisterCBs
        LCALL   `??ZDApp_RegisterCBs::?relay`; Banked call to: ZDApp_RegisterCBs
//  330 
//  331 #if defined ( ZDP_BIND_VALIDATION )
//  332 #if defined ( REFLECTOR )
//  333   ZDApp_InitPendingBind();
//  334 #endif
//  335 #endif
//  336 } /* ZDApp_Init() */
        LJMP    ??Subroutine29_0 & 0xFFFF
          CFI EndBlock cfiBlock0
//  337 
//  338 /*********************************************************************
//  339  * @fn          ZDApp_SecInit
//  340  *
//  341  * @brief       ZDApp initialize security.
//  342  *
//  343  * @param       state - device initialization state
//  344  *
//  345  * @return      none
//  346  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  347 void ZDApp_SecInit( uint8 state )
ZDApp_SecInit:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ZDApp_SecInit
        CODE
//  348 {
        FUNCALL ZDApp_SecInit, ZDSecMgrInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, ZDSecMgrReadKeyFromNv
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0,R1
//  349   uint8 zgPreConfigKey[SEC_KEY_LEN];
//  350 
//  351   if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
//  352   {
//  353     // Set the Trust Center bit
//  354     ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 8
        MOVX    A,@DPTR
        ORL     A,#0x1
        MOVX    @DPTR,A
//  355   }
//  356 
//  357   // Initialize ZigBee Device Security Manager
//  358   ZDSecMgrInit(state);
        ; Setup parameters for call to function ZDSecMgrInit
        LCALL   `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
//  359 
//  360   if ( ZG_SECURE_ENABLED )
//  361   {
//  362     if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
        MOV     A,?V0
        JZ      ??ZDApp_SecInit_0
//  363     {
//  364       if( _NIB.nwkKeyLoaded == FALSE )
        MOV     DPTR,#_NIB + 61
        MOVX    A,@DPTR
        JNZ     ??ZDApp_SecInit_0
//  365       {
//  366         if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
//  367              ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
//  368         {
//  369             ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
        ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R2,#0x62
        MOV     R3,#0x0
        LCALL   `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
//  370             SSP_UpdateNwkKey( zgPreConfigKey, 0);
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
//  371             SSP_SwitchNwkKey( 0 );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     R1,#0x0
        LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
//  372 
//  373             // clear local copy of key
//  374             osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  375         }
//  376       }
//  377     }
//  378 
//  379     // clean the new devices list when Security module is initialized
//  380     if ( ZDApp_NewDeviceList != NULL )
??ZDApp_SecInit_0:
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_59:
        JZ      ??ZDApp_SecInit_1
//  381     {
//  382       ZDAppNewDevice_t *pNewDeviceNext;
//  383 
//  384       while ( ZDApp_NewDeviceList )
//  385       {
//  386         pNewDeviceNext = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
??ZDApp_SecInit_2:
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  387         osal_mem_free( ZDApp_NewDeviceList );
        ; Setup parameters for call to function osal_mem_free
        MOV     DPTR,#ZDApp_NewDeviceList
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_39:
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  388         ZDApp_NewDeviceList = pNewDeviceNext;
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     DPTR,#ZDApp_NewDeviceList
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  389       }
        MOV     A,R0
        ORL     A,R1
        JNZ     ??ZDApp_SecInit_2
//  390     }
//  391   }
//  392 }
??ZDApp_SecInit_1:
        MOV     A,#0x10
        LJMP    ??Subroutine28_0 & 0xFFFF
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function ZDApp_SecInit
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function ZDApp_ProcessSecEvent
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond3) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOV     DPTR,#ZDApp_NewDeviceList
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine27_0:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
          CFI Conditional ??CrossCallReturnLabel_27
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 54)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function ZDApp_SecInit
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function ZDApp_ProcessSecEvent
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-2
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker10 Using cfiCommon1
          CFI (cfiPicker10) NoFunction
          CFI (cfiPicker10) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiPicker10
//  393 
//  394 /*********************************************************************
//  395  * @fn      ZDApp_event_loop()
//  396  *
//  397  * @brief   Main event loop for Zigbee device objects task. This function
//  398  *          should be called at periodic intervals.
//  399  *
//  400  * @param   task_id - Task ID
//  401  * @param   events  - Bitmap of events
//  402  *
//  403  * @return  none
//  404  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  405 UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
ZDApp_event_loop:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function ZDApp_event_loop
        CODE
//  406 {
        FUNCALL ZDApp_event_loop, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDO_StartDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ProcessOSALMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_NetworkStartEvt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_pwrmgr_device
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_SetParentAnnceTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_SendParentAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_StartJoiningCycle
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_StopJoiningCycle
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDO_UpdateNwkStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_SaveNetworkStateEvt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, Onboard_soft_reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ProcessSecEvent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V2,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  407   uint8 *msg_ptr;
//  408 
//  409   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     ??ZDApp_event_loop_0
//  410   {
//  411     while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
//  412     {
//  413       ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
//  414 
//  415       // Release the memory
//  416       osal_msg_deallocate( msg_ptr );
//  417     }
//  418 
//  419     // Return unprocessed events
//  420     return (events ^ SYS_EVENT_MSG);
//  421   }
//  422 
//  423   if ( events & ZDO_NETWORK_INIT )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDApp_event_loop_1
//  424   {
//  425     // Initialize apps and start the network
//  426     ZDApp_ChangeState( DEV_INIT );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV     R1,#0x1
        LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
//  427 
//  428     ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
//  429                      DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
        ; Setup parameters for call to function ZDO_StartDevice
        MOV     R4,#0xf
        MOV     R3,#0xf
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0x7
        MOV     R1,A
        LCALL   `??ZDO_StartDevice::?relay`; Banked call to: ZDO_StartDevice
//  430 
//  431     // Return unprocessed events
//  432     return (events ^ ZDO_NETWORK_INIT);
        MOV     A,R6
        XRL     A,#0x1
        LJMP    ??ZDApp_event_loop_2 & 0xFFFF
//  433   }
??ZDApp_event_loop_3:
        ; Setup parameters for call to function ZDApp_ProcessOSALMsg
        LCALL   `??ZDApp_ProcessOSALMsg::?relay`; Banked call to: ZDApp_ProcessOSALMsg
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??ZDApp_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JNZ     ??ZDApp_event_loop_3
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        LJMP    ??ZDApp_event_loop_4 & 0xFFFF
//  434 
//  435   if ( ZSTACK_ROUTER_BUILD )
//  436   {
//  437     if ( events & ZDO_NETWORK_START )
??ZDApp_event_loop_1:
        ANL     A,#0x2
        JZ      ??ZDApp_event_loop_5
//  438     {
//  439       ZDApp_NetworkStartEvt();
        ; Setup parameters for call to function ZDApp_NetworkStartEvt
        LCALL   `??ZDApp_NetworkStartEvt::?relay`; Banked call to: ZDApp_NetworkStartEvt
//  440 
//  441       // Return unprocessed events
//  442       return (events ^ ZDO_NETWORK_START);
        MOV     A,R6
        XRL     A,#0x2
        LJMP    ??ZDApp_event_loop_2 & 0xFFFF
//  443     }
//  444 
//  445     if ( events & ZDO_ROUTER_START )
??ZDApp_event_loop_5:
        MOV     A,R6
        ANL     A,#0x20
        JZ      ??ZDApp_event_loop_6
//  446     {
//  447       if ( nwkStatus == ZSuccess )
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JNZ     ??ZDApp_event_loop_7
//  448       {
//  449         if ( devState == DEV_END_DEVICE )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??ZDApp_event_loop_8
//  450         {
//  451           ZDApp_ChangeState( DEV_ROUTER );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV     R1,#0x7
        LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
//  452         }
//  453 
//  454         osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
??ZDApp_event_loop_8:
        ; Setup parameters for call to function osal_pwrmgr_device
        MOV     R1,#0x0
        LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
//  455 
//  456         if ( zgChildAgingEnable == TRUE )
        MOV     DPTR,#zgChildAgingEnable
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_event_loop_7
//  457         {
//  458           // Once the device has changed its state to a ROUTER set the timer to send
//  459           // Parent annce
//  460           ZDApp_SetParentAnnceTimer();
        ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
        LCALL   `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
//  461         }
//  462       }
//  463       else
//  464       {
//  465         // remain as end device
//  466       }
//  467       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
??ZDApp_event_loop_7:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
//  468 
//  469       // Return unprocessed events
//  470       return (events ^ ZDO_ROUTER_START);
        MOV     A,R6
        XRL     A,#0x20
        SJMP    ??ZDApp_event_loop_2
//  471     }
//  472 
//  473     if ( events & ZDO_PARENT_ANNCE_EVT )
??ZDApp_event_loop_6:
        MOV     A,R7
        ANL     A,#0x40
        JZ      ??ZDApp_event_loop_9
//  474     {
//  475       ZDApp_SendParentAnnce();
        ; Setup parameters for call to function ZDApp_SendParentAnnce
        LCALL   `??ZDApp_SendParentAnnce::?relay`; Banked call to: ZDApp_SendParentAnnce
//  476 
//  477       // Return unprocessed events
//  478       return (events ^ ZDO_PARENT_ANNCE_EVT);
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x40
        LJMP    ??ZDApp_event_loop_4 & 0xFFFF
//  479     }
//  480   }
//  481 
//  482   if( events & ZDO_REJOIN_BACKOFF )
??ZDApp_event_loop_9:
        MOV     A,R7
        ANL     A,#0x20
        JZ      ??ZDApp_event_loop_10
//  483   {
//  484     if( devState == DEV_NWK_BACKOFF )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0xc
        JNZ     ??ZDApp_event_loop_11
//  485     {
//  486       ZDApp_ChangeState(DEV_NWK_DISC);
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV     R1,#0x2
        LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
//  487       // Restart scan for rejoin
//  488       ZDApp_StartJoiningCycle();
        ; Setup parameters for call to function ZDApp_StartJoiningCycle
        LCALL   `??ZDApp_StartJoiningCycle::?relay`; Banked call to: ZDApp_StartJoiningCycle
//  489       osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinScan );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#zgDefaultRejoinScan
        SJMP    ??ZDApp_event_loop_12
//  490     }
//  491     else
//  492     {
//  493       // Rejoin backoff, silent period
//  494       ZDApp_ChangeState(DEV_NWK_BACKOFF);
??ZDApp_event_loop_11:
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV     R1,#0xc
        LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
//  495       ZDApp_StopJoiningCycle();
        ; Setup parameters for call to function ZDApp_StopJoiningCycle
        LCALL   `??ZDApp_StopJoiningCycle::?relay`; Banked call to: ZDApp_StopJoiningCycle
//  496       osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinBackoff );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#zgDefaultRejoinBackoff
??ZDApp_event_loop_12:
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R2,#0x0
        MOV     R3,#0x20
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  497     }
//  498 
//  499     return ( events ^ ZDO_REJOIN_BACKOFF);
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x20
        SJMP    ??ZDApp_event_loop_4
//  500   }
//  501 
//  502   if ( events & ZDO_STATE_CHANGE_EVT )
??ZDApp_event_loop_10:
        MOV     A,R6
        ANL     A,#0x10
        JZ      ??ZDApp_event_loop_13
//  503   {
//  504     ZDO_UpdateNwkStatus( devState );
        ; Setup parameters for call to function ZDO_UpdateNwkStatus
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_UpdateNwkStatus::?relay`; Banked call to: ZDO_UpdateNwkStatus
//  505 
//  506     // At start up, do one MTO route discovery if the device is a concentrator
//  507     if ( zgConcentratorEnable == TRUE )
        MOV     DPTR,#zgConcentratorEnable
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_event_loop_14
//  508     {
//  509       // Start next event
//  510       osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_64
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R2,#0x0
        MOV     R3,#0x8
        MOV     DPTR,#NWK_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  511     }
//  512 
//  513     // Return unprocessed events
//  514     return (events ^ ZDO_STATE_CHANGE_EVT);
??ZDApp_event_loop_14:
        MOV     A,R6
        XRL     A,#0x10
??ZDApp_event_loop_2:
        MOV     R2,A
        MOV     A,R7
        SJMP    ??ZDApp_event_loop_4
//  515   }
//  516 
//  517   if ( events & ZDO_COMMAND_CNF )
??ZDApp_event_loop_13:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??ZDApp_event_loop_15
//  518   {
//  519     // User defined logic
//  520 
//  521     // Return unprocessed events
//  522     return (events ^ ZDO_COMMAND_CNF);
        MOV     A,R6
        XRL     A,#0x8
        MOV     R2,A
        SJMP    ??ZDApp_event_loop_16
//  523   }
//  524 
//  525   if ( events & ZDO_NWK_UPDATE_NV )
??ZDApp_event_loop_15:
        MOV     A,R7
        ANL     A,#0x1
        JZ      ??ZDApp_event_loop_17
//  526   {
//  527     // Save only in valid state
//  528     if ( _NIB.nwkState == NWK_ROUTER || _NIB.nwkState == NWK_ENDDEVICE )
        MOV     DPTR,#_NIB + 35
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x8
        XRL     A,R0
        JZ      ??ZDApp_event_loop_18
        MOV     A,#0x4
        XRL     A,R0
        JNZ     ??ZDApp_event_loop_19
//  529     {
//  530       ZDApp_SaveNetworkStateEvt();
??ZDApp_event_loop_18:
        ; Setup parameters for call to function ZDApp_SaveNetworkStateEvt
        LCALL   `??ZDApp_SaveNetworkStateEvt::?relay`; Banked call to: ZDApp_SaveNetworkStateEvt
//  531     }
//  532 
//  533     // Return unprocessed events
//  534     return (events ^ ZDO_NWK_UPDATE_NV);
??ZDApp_event_loop_19:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x1
??ZDApp_event_loop_4:
        MOV     R3,A
        SJMP    ??ZDApp_event_loop_16
//  535   }
//  536 
//  537   if ( events & ZDO_DEVICE_RESET )
??ZDApp_event_loop_17:
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??ZDApp_event_loop_20
//  538   {
//  539 #ifdef ZBA_FALLBACK_NWKKEY
//  540     if ( devState == DEV_END_DEVICE_UNAUTH )
//  541     {
//  542       ZDSecMgrFallbackNwkKey();
//  543     }
//  544     else
//  545 #endif
//  546     {
//  547       // Set the NV startup option to force a "new" join.
//  548       zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x2
        MOV     R1,#-0x1
        LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  549 
//  550       // The device has been in the UNAUTH state, so reset
//  551       // Note: there will be no return from this call
//  552       SystemResetSoft();
        ; Setup parameters for call to function Onboard_soft_reset
        LCALL   Onboard_soft_reset & 0xFFFF
//  553     }
//  554   }
//  555 
//  556 #if defined ( ZDP_BIND_VALIDATION )
//  557   if ( events & ZDO_PENDING_BIND_REQ_EVT )
//  558   {
//  559 #if defined ( REFLECTOR )
//  560     ZDApp_AgeOutPendingBindEntry();
//  561 #endif
//  562     // Return unprocessed events
//  563     return (events ^ ZDO_PENDING_BIND_REQ_EVT);
//  564   }
//  565 #endif
//  566 
//  567   if ( ZG_SECURE_ENABLED )
//  568   {
//  569     return ( ZDApp_ProcessSecEvent( task_id, events ) );
??ZDApp_event_loop_20:
        ; Setup parameters for call to function ZDApp_ProcessSecEvent
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V2
        LCALL   `??ZDApp_ProcessSecEvent::?relay`; Banked call to: ZDApp_ProcessSecEvent
//  570   }
??ZDApp_event_loop_16:
        LJMP    ?Subroutine1 & 0xFFFF
//  571   else
//  572   {
//  573     // Discard or make more handlers
//  574     return 0;
//  575   }
//  576 }
          CFI EndBlock cfiBlock11
//  577 
//  578 /*********************************************************************
//  579  * @fn      ZDApp_ProcessSecEvent()
//  580  *
//  581  * @brief   Process incoming security events.
//  582  *
//  583  * @param   task_id - Task ID
//  584  * @param   events  - Bitmap of events
//  585  *
//  586  * @return  none
//  587  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  588 UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
ZDApp_ProcessSecEvent:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function ZDApp_ProcessSecEvent
        CODE
//  589 {
        FUNCALL ZDApp_ProcessSecEvent, ZDSecMgrNewDeviceEvent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDApp_StoreNwkSecMaterial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDApp_DeviceAuthEvt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDApp_SaveNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDSecMgrSaveApsLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDSecMgrSaveTCLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  590   (void)task_id;  // Intentionally unreferenced parameter
//  591 
//  592   if ( ZSTACK_ROUTER_BUILD )
//  593   {
//  594     if ( events & ZDO_NEW_DEVICE )
        MOV     A,R6
        ANL     A,#0x40
        JNZ     $+5
        LJMP    ??ZDApp_ProcessSecEvent_0 & 0xFFFF
//  595     {
//  596       // process the new device event
//  597       if ( ZDApp_NewDeviceList )
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_60:
        JZ      ??ZDApp_ProcessSecEvent_1
//  598       {
//  599         ZDAppNewDevice_t *pNewDevice;
//  600         uint16 timeDelta;
//  601 
//  602         (void) ZDSecMgrNewDeviceEvent( ZDApp_NewDeviceList->shortAddr );
        ; Setup parameters for call to function ZDSecMgrNewDeviceEvent
        LCALL   ??Subroutine41_0 & 0xFFFF
??CrossCallReturnLabel_72:
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_40:
        LCALL   `??ZDSecMgrNewDeviceEvent::?relay`; Banked call to: ZDSecMgrNewDeviceEvent
//  603 
//  604         pNewDevice = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_31:
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
//  605         osal_mem_free( ZDApp_NewDeviceList );
        ; Setup parameters for call to function osal_mem_free
        MOV     DPTR,#ZDApp_NewDeviceList
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  606         ZDApp_NewDeviceList = pNewDevice;
        MOV     DPTR,#ZDApp_NewDeviceList
        LCALL   ??Subroutine40_0 & 0xFFFF
//  607 
//  608         if ( pNewDevice )
??CrossCallReturnLabel_68:
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??ZDApp_ProcessSecEvent_1
//  609         {
//  610           timeDelta = pNewDevice->timeDelta;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
//  611           pNewDevice = pNewDevice->next;
        SJMP    ??ZDApp_ProcessSecEvent_2
//  612 
//  613           while ( pNewDevice )
//  614           {
//  615             pNewDevice->timeDelta -= timeDelta;
??ZDApp_ProcessSecEvent_3:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,?V4
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V5
        MOVX    @DPTR,A
//  616             pNewDevice = pNewDevice->next;
??ZDApp_ProcessSecEvent_2:
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
//  617           }
        MOV     A,?V0
        ORL     A,?V1
        JNZ     ??ZDApp_ProcessSecEvent_3
//  618 
//  619           osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, timeDelta );
        ; Setup parameters for call to function osal_start_timerEx
        CLR     A
        MOV     ?V6,A
        MOV     ?V7,A
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R2,#0x40
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//  620         }
//  621       }
//  622 
//  623       // Return unprocessed events
//  624       return (events ^ ZDO_NEW_DEVICE);
??ZDApp_ProcessSecEvent_1:
        MOV     A,R6
        XRL     A,#0x40
        SJMP    ??ZDApp_ProcessSecEvent_4
//  625     }
//  626   }
//  627 
//  628   if ( events & ZDO_DEVICE_AUTH )
??ZDApp_ProcessSecEvent_0:
        MOV     A,R6
        ANL     A,#0x80
        JZ      ??ZDApp_ProcessSecEvent_5
//  629   {
//  630     ZDApp_StoreNwkSecMaterial();
        ; Setup parameters for call to function ZDApp_StoreNwkSecMaterial
        LCALL   `??ZDApp_StoreNwkSecMaterial::?relay`; Banked call to: ZDApp_StoreNwkSecMaterial
//  631     
//  632     ZDApp_DeviceAuthEvt();
        ; Setup parameters for call to function ZDApp_DeviceAuthEvt
        LCALL   `??ZDApp_DeviceAuthEvt::?relay`; Banked call to: ZDApp_DeviceAuthEvt
//  633 
//  634     bdb_setNodeIsOnANetwork(TRUE);
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV     R1,#0x1
        LCALL   `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
//  635     
//  636     bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV     R2,#0x1
        MOV     R1,#0x3
        LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
//  637 
//  638     // Return unprocessed events
//  639     return (events ^ ZDO_DEVICE_AUTH);
        MOV     A,R6
        XRL     A,#0x80
??ZDApp_ProcessSecEvent_4:
        MOV     R2,A
        MOV     A,R7
        SJMP    ??ZDApp_ProcessSecEvent_6
//  640   }
//  641 
//  642   if ( events & ZDO_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_5:
        MOV     A,R7
        ANL     A,#0x2
        JZ      ??ZDApp_ProcessSecEvent_7
//  643   {
//  644     ZDApp_SaveNwkKey();
        ; Setup parameters for call to function ZDApp_SaveNwkKey
        LCALL   `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
//  645 
//  646     // Return unprocessed events
//  647     return (events ^ ZDO_FRAMECOUNTER_CHANGE);
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x2
        SJMP    ??ZDApp_ProcessSecEvent_6
//  648   }
//  649 
//  650   if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_7:
        MOV     A,R7
        ANL     A,#0x8
        JZ      ??ZDApp_ProcessSecEvent_8
//  651   {
//  652 #if defined (NV_RESTORE)
//  653     ZDSecMgrSaveApsLinkKey();
        ; Setup parameters for call to function ZDSecMgrSaveApsLinkKey
        LCALL   `??ZDSecMgrSaveApsLinkKey::?relay`; Banked call to: ZDSecMgrSaveApsLinkKey
//  654 #endif // (NV_RESTORE)
//  655 
//  656     // Return unprocessed events
//  657     return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x8
        SJMP    ??ZDApp_ProcessSecEvent_6
//  658   }
//  659 
//  660   if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_8:
        MOV     A,R7
        ANL     A,#0x4
        JZ      ??ZDApp_ProcessSecEvent_9
//  661   {
//  662     ZDSecMgrSaveTCLinkKey();
        ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
        LCALL   `??ZDSecMgrSaveTCLinkKey::?relay`; Banked call to: ZDSecMgrSaveTCLinkKey
//  663 
//  664     // Return unprocessed events
//  665     return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x4
??ZDApp_ProcessSecEvent_6:
        MOV     R3,A
        SJMP    ??ZDApp_ProcessSecEvent_10
//  666   }
//  667 
//  668   // Discard or make more handlers
//  669   return 0;
??ZDApp_ProcessSecEvent_9:
        MOV     R2,#0x0
        MOV     R3,#0x0
??ZDApp_ProcessSecEvent_10:
          CFI EndBlock cfiBlock12
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  670 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock13
//  671 
//  672 /*********************************************************************
//  673  * Application Functions
//  674  */
//  675 
//  676 /*********************************************************************
//  677  * @fn      ZDOInitDevice
//  678  *
//  679  * @brief   Start the device in the network.  This function will read
//  680  *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
//  681  *   restore the network state of the device.
//  682  *
//  683  * @param   startDelay - timeDelay to start device (in milliseconds).
//  684  *                       There is a jitter added to this delay:
//  685  *                       ((NWK_START_DELAY + startDelay)
//  686  *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
//  687  *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
//  688  *                       this function will hold the network init. Application
//  689  *                       can start the device.
//  690  * #@param  mode       - ZDO_INITDEV_CENTRALIZED or ZDO_INITDEV_DISTRIBUTED to specify
//  691  *                       which mode should the device start with (only has effect on 
//  692  *                       Router devices)
//  693  *
//  694  * NOTE:    If the application would like to force a "new" join, the
//  695  *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  696  *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
//  697  *          this function. "new" join means to not restore the network
//  698  *          state of the device. Use zgWriteStartupOptions() to set these
//  699  *          options.
//  700  *
//  701  * @return
//  702  *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
//  703  *          restored.
//  704  *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
//  705  *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
//  706  *          it could mean that there was no network state to restore.
//  707  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  708 uint8 ZDOInitDeviceEx( uint16 startDelay, uint8 mode)
ZDOInitDeviceEx:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function ZDOInitDeviceEx
        CODE
//  709 {
        FUNCALL ZDOInitDeviceEx, zgInitItems
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDConfig_InitDescriptors
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, NLME_InitNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, NLME_SetDefaultNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDSecMgrClearNVKeyValues
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDAppDetermineDeviceType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, gp_ProxyTblInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, NLME_SetUpdateID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDSecMgrUpdateTCAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDApp_ReadNetworkRestoreState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDApp_RestoreNetworkState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDSecMgrUpdateTCAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDApp_SecInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDApp_LeaveCtrlInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, NLME_SetBroadcastFilter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     ?V1,R1
//  710   uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
        MOV     ?V0,#0x1
//  711   uint16 extendedDelay = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  712   
//  713   if ( devState == DEV_HOLD )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JNZ     ??ZDOInitDeviceEx_0
//  714   {
//  715     byte temp = FALSE;
        CLR     A
        MOVX    @DPTR,A
//  716     // Initialize the RAM items table, in case an NV item has been updated.
//  717     zgInitItems( FALSE );
        ; Setup parameters for call to function zgInitItems
        MOV     R1,A
        LCALL   `??zgInitItems::?relay`; Banked call to: zgInitItems
//  718     
//  719     //Turn off the radio
//  720     ZMacSetReq(ZMacRxOnIdle, &temp);
        ; Setup parameters for call to function ZMacSetReq
        SJMP    ??ZDOInitDeviceEx_1
//  721   }
//  722   else
//  723   {
//  724     byte temp = TRUE;
??ZDOInitDeviceEx_0:
        MOV     A,#0x1
        MOVX    @DPTR,A
//  725     //Turn on the radio
//  726     ZMacSetReq(ZMacRxOnIdle, &temp);
        ; Setup parameters for call to function ZMacSetReq
??ZDOInitDeviceEx_1:
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x52
        LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
//  727   }
//  728 
//  729   ZDConfig_InitDescriptors();
        ; Setup parameters for call to function ZDConfig_InitDescriptors
        LCALL   `??ZDConfig_InitDescriptors::?relay`; Banked call to: ZDConfig_InitDescriptors
//  730   //devtag.071807.todo - fix this temporary solution
//  731   _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     DPTR,#_NIB + 14
        MOVX    @DPTR,A
//  732 
//  733 #if defined ( NV_RESTORE )
//  734   // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
//  735   // while booting to skip past NV Restore.
//  736   if ( zdappHoldKeys == SW_BYPASS_NV )
        MOV     DPTR,#zdappHoldKeys
        MOVX    A,@DPTR
        XRL     A,#0x4
        JZ      $+5
        LJMP    ??ZDOInitDeviceEx_2 & 0xFFFF
//  737   {
//  738     zdappHoldKeys = 0;   // Only once
        CLR     A
        MOVX    @DPTR,A
//  739     networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
//  740   }
//  741   else
//  742   {
//  743 #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
//  744     if ( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL )
//  745     {
//  746       networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
//  747     }
//  748     else
//  749     {
//  750       // Determine if NV should be restored
//  751       networkStateNV = ZDApp_ReadNetworkRestoreState();
//  752     }
//  753 #else
//  754     // Determine if NV should be restored
//  755     networkStateNV = ZDApp_ReadNetworkRestoreState();
//  756 #endif
//  757   }
//  758 
//  759   if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
//  760   {
//  761     networkStateNV = ZDApp_RestoreNetworkState();
//  762 #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
//  763     if ( ( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL ) && ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE ) )
//  764     {
//  765       networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
//  766     }
//  767 #endif
//  768     runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
//  769   }
//  770   else
//  771   {
//  772     // Wipe out the network state in NV
//  773     NLME_InitNV();
??ZDOInitDeviceEx_3:
        ; Setup parameters for call to function NLME_InitNV
        LCALL   `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
//  774     NLME_SetDefaultNV();
        ; Setup parameters for call to function NLME_SetDefaultNV
        LCALL   `??NLME_SetDefaultNV::?relay`; Banked call to: NLME_SetDefaultNV
//  775     // clear NWK key values
//  776     ZDSecMgrClearNVKeyValues();
        ; Setup parameters for call to function ZDSecMgrClearNVKeyValues
        LCALL   `??ZDSecMgrClearNVKeyValues::?relay`; Banked call to: ZDSecMgrClearNVKeyValues
//  777   }
//  778 #endif
//  779 
//  780   if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
??ZDOInitDeviceEx_4:
        MOV     A,#0x1
        XRL     A,?V0
        JZ      $+5
        LJMP    ??ZDOInitDeviceEx_5 & 0xFFFF
//  781   {
//  782     ZDAppDetermineDeviceType();
        ; Setup parameters for call to function ZDAppDetermineDeviceType
        LCALL   `??ZDAppDetermineDeviceType::?relay`; Banked call to: ZDAppDetermineDeviceType
//  783 
//  784     // Only delay if joining network - not restoring network state
//  785     extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
//  786               + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
        ; Setup parameters for call to function osal_rand
        LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
        MOV     A,R2
        ANL     A,#0x7f
        MOV     R0,A
        MOV     A,?V2
        ADD     A,R0
        MOV     R0,A
        CLR     A
        ADDC    A,?V3
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x64
        MOV     R6,A
        CLR     A
        ADDC    A,R1
        MOV     R7,A
//  787 
//  788     runtimeChannel = zgDefaultChannelList;
        MOV     DPTR,#zgDefaultChannelList
        LCALL   ?XLOAD_R0123
        MOV     DPTR,#runtimeChannel
        LCALL   ?XSTORE_R0123
//  789     
//  790     // Set the NV startup option to force a "new" join.
//  791     zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x2
        MOV     R1,#-0x1
        LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  792 //GP_UPDATE    
//  793 #if (ZG_BUILD_RTR_TYPE)
//  794 #ifndef ZNP_ENABLED
//  795     gp_ProxyTblInit( TRUE );
        ; Setup parameters for call to function gp_ProxyTblInit
        MOV     R1,#0x1
        LCALL   `??gp_ProxyTblInit::?relay`; Banked call to: gp_ProxyTblInit
//  796 #endif
//  797 #endif
//  798 
//  799     _NIB.nwkDevAddress = INVALID_NODE_ADDR;
        MOV     DPTR,#_NIB + 20
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
//  800     _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
        MOV     DPTR,#_NIB + 23
        DEC     A
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
//  801     _NIB.nwkPanId = 0xFFFF;
        MOV     DPTR,#_NIB + 33
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  802     osal_memset(_NIB.extendedPANID, 0, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,#(_NIB + 53) & 0xff
        MOV     R3,#((_NIB + 53) >> 8) & 0xff
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  803     NLME_SetUpdateID( 0 );
        ; Setup parameters for call to function NLME_SetUpdateID
        MOV     R1,#0x0
        LCALL   `??NLME_SetUpdateID::?relay`; Banked call to: NLME_SetUpdateID
//  804     
//  805     if(ZG_DEVICE_RTRONLY_TYPE)
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDOInitDeviceEx_6
//  806     {
//  807       if(1 == mode)
        MOV     A,#0x1
        XRL     A,?V1
        JNZ     ??ZDOInitDeviceEx_7
//  808       {
//  809         //Update TC address as distributed network (TC none)
//  810         ZDSecMgrUpdateTCAddress(0);
        ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??ZDOInitDeviceEx_8
//  811       }
??ZDOInitDeviceEx_2:
        ; Setup parameters for call to function ZDApp_ReadNetworkRestoreState
        LCALL   `??ZDApp_ReadNetworkRestoreState::?relay`; Banked call to: ZDApp_ReadNetworkRestoreState
        MOV     A,R1
        MOV     ?V0,A
        JZ      $+5
        LJMP    ??ZDOInitDeviceEx_3 & 0xFFFF
        ; Setup parameters for call to function ZDApp_RestoreNetworkState
        LCALL   `??ZDApp_RestoreNetworkState::?relay`; Banked call to: ZDApp_RestoreNetworkState
        MOV     A,R1
        MOV     ?V0,A
        MOV     ?V4,#0x1
        MOV     ?V5,R6
        MOV     ?V6,R6
        MOV     ?V7,R6
        MOV     DPTR,#_NIB + 22
        MOVX    A,@DPTR
        MOV     R0,#?V4
        LCALL   ?L_SHL
        MOV     DPTR,#runtimeChannel
        MOV     A,?V4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V5
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V7
        MOVX    @DPTR,A
        LJMP    ??ZDOInitDeviceEx_4 & 0xFFFF
//  812       else
//  813       {
//  814         // Centralized mode
//  815         uint8 tmp[Z_EXTADDR_LEN];
//  816         osal_memset(tmp,0x00,Z_EXTADDR_LEN);
??ZDOInitDeviceEx_7:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  817         ZDSecMgrUpdateTCAddress(tmp);
        ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP101_8
??ZDOInitDeviceEx_8:
        LCALL   `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
//  818       }
//  819     }
//  820 
//  821     // Update NIB in NV
//  822     osal_nv_write( ZCD_NV_NIB, 0, sizeof( nwkIB_t ), &_NIB );
??ZDOInitDeviceEx_6:
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V4,#_NIB & 0xff
        MOV     ?V5,#(_NIB >> 8) & 0xff
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V4,#0x6e
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x21
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
//  823 
//  824     // Reset the NV startup option to resume from NV by clearing
//  825     // the "New" join option.
//  826     zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x2
        MOV     R1,#0x0
        LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  827   
//  828   }
//  829 
//  830   // Initialize the security for type of device
//  831   ZDApp_SecInit( networkStateNV );
??ZDOInitDeviceEx_5:
        ; Setup parameters for call to function ZDApp_SecInit
        MOV     R1,?V0
        LCALL   `??ZDApp_SecInit::?relay`; Banked call to: ZDApp_SecInit
//  832 
//  833   if( ZDO_INIT_HOLD_NWK_START != startDelay )
        MOV     A,#-0x1
        XRL     A,?V2
        JNZ     ??ZDOInitDeviceEx_9
        MOV     A,#-0x1
        XRL     A,?V3
??ZDOInitDeviceEx_9:
        JZ      ??ZDOInitDeviceEx_10
//  834   {
//  835     devState = DEV_INIT;    // Remove the Hold state
        MOV     DPTR,#devState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  836 
//  837     // Initialize leave control logic
//  838     ZDApp_LeaveCtrlInit();
        ; Setup parameters for call to function ZDApp_LeaveCtrlInit
        LCALL   `??ZDApp_LeaveCtrlInit::?relay`; Banked call to: ZDApp_LeaveCtrlInit
//  839 
//  840     // Trigger the network start
//  841     ZDApp_NetworkInit( extendedDelay );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
//  842   }
//  843 
//  844   // set broadcast address mask to support broadcast filtering
//  845   NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
??ZDOInitDeviceEx_10:
        ; Setup parameters for call to function NLME_SetBroadcastFilter
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
//  846 
//  847   return ( networkStateNV );
        MOV     R1,?V0
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        LJMP    ?Subroutine2 & 0xFFFF
//  848 }
          CFI EndBlock cfiBlock14
//  849 
//  850 /*********************************************************************
//  851  * @fn      ZDApp_ReadNetworkRestoreState
//  852  *
//  853  * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
//  854  *          or not to restore the network state.
//  855  *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  856  *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
//  857  *
//  858  * @param   none
//  859  *
//  860  * @return  ZDO_INITDEV_NEW_NETWORK_STATE
//  861  *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
//  862  *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
//  863  *          ZCD_NV_STARTUP_OPTION
//  864  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  865 uint8 ZDApp_ReadNetworkRestoreState( void )
ZDApp_ReadNetworkRestoreState:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function ZDApp_ReadNetworkRestoreState
        CODE
//  866 {
        FUNCALL ZDApp_ReadNetworkRestoreState, zgReadStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ReadNetworkRestoreState, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  867   uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
        MOV     R6,#0x0
//  868 
//  869   // Look for the New Network State option.
//  870   if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
        ; Setup parameters for call to function zgReadStartupOptions
        LCALL   `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
        MOV     A,R1
        MOV     R0,A
        MOV     C,0xE0 /* A   */.1
        JNC     ??ZDApp_ReadNetworkRestoreState_0
//  871   {
//  872     networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
        MOV     R6,#0x1
//  873     bdb_setNodeIsOnANetwork(FALSE);
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV     R1,#0x0
        LCALL   `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
//  874   }
//  875 
//  876   return ( networkStateNV );
??ZDApp_ReadNetworkRestoreState_0:
        MOV     A,R6
        MOV     R1,A
        SJMP    ??Subroutine29_0
//  877 }
          CFI EndBlock cfiBlock15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x5
          CFI EndBlock cfiBlock16
        REQUIRE ??Subroutine28_0
        ; // Fall through to label ??Subroutine28_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine28_0:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 25)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock17
        REQUIRE ??Subroutine29_0
        ; // Fall through to label ??Subroutine29_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine29_0:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock18
//  878 
//  879 /*********************************************************************
//  880  * @fn      ZDAppDetermineDeviceType()
//  881  *
//  882  * @brief   Determines the type of device to start.
//  883  *
//  884  *          Looks at zgDeviceLogicalType and determines what type of
//  885  *          device to start.  The types are:
//  886  *            ZG_DEVICETYPE_COORDINATOR
//  887  *            ZG_DEVICETYPE_ROUTER
//  888  *            ZG_DEVICETYPE_ENDDEVICE
//  889  *
//  890  * @param   none
//  891  *
//  892  * @return  none
//  893  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  894 void ZDAppDetermineDeviceType( void )
ZDAppDetermineDeviceType:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function ZDAppDetermineDeviceType
        CODE
//  895 {
        FUNCALL ZDAppDetermineDeviceType, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  896   if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JNZ     ??ZDAppDetermineDeviceType_0
//  897   {
//  898     devStartMode = MODE_HARD;     // Start as a coordinator
        MOV     DPTR,#devStartMode
        MOV     A,#0x2
        MOVX    @DPTR,A
//  899     ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        SJMP    ??ZDAppDetermineDeviceType_1
//  900   }
//  901   else
//  902   {
//  903     if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
??ZDAppDetermineDeviceType_0:
        XRL     A,#0x1
        JNZ     ??ZDAppDetermineDeviceType_2
//  904       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        MOVX    @DPTR,A
        ORL     A,#0x1
        SJMP    ??ZDAppDetermineDeviceType_3
//  905     else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
??ZDAppDetermineDeviceType_2:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDAppDetermineDeviceType_4
//  906       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        MOVX    @DPTR,A
        ORL     A,#0x2
??ZDAppDetermineDeviceType_3:
        MOVX    @DPTR,A
//  907 
//  908     // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
//  909     // The device shall do rejoin the network. Otherwise, do normal join
//  910     if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
??ZDAppDetermineDeviceType_4:
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV     R2,#AIB_apsUseExtendedPANID & 0xff
        MOV     R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
        LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
        MOV     A,R1
        MOV     DPTR,#devStartMode
        JNZ     ??ZDAppDetermineDeviceType_5
//  911     {
//  912       devStartMode = MODE_JOIN;     // Assume joining
        CLR     A
        SJMP    ??ZDAppDetermineDeviceType_1
//  913     }
//  914     else
//  915     {
//  916       devStartMode = MODE_REJOIN;
??ZDAppDetermineDeviceType_5:
        MOV     A,#0x3
        MOVX    @DPTR,A
//  917       prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
        MOV     DPTR,#prevDevState
        INC     A
??ZDAppDetermineDeviceType_1:
        MOVX    @DPTR,A
//  918     }
//  919   }
//  920 }
        LJMP    ??Subroutine33_0 & 0xFFFF
          CFI EndBlock cfiBlock19
//  921 
//  922 /*********************************************************************
//  923  * @fn      ZDApp_NetworkStartEvt()
//  924  *
//  925  * @brief   Process the Network Start Event
//  926  *
//  927  * @param   none
//  928  *
//  929  * @return  none
//  930  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  931 void ZDApp_NetworkStartEvt( void )
ZDApp_NetworkStartEvt:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function ZDApp_NetworkStartEvt
        CODE
//  932 {
        FUNCALL ZDApp_NetworkStartEvt, AddrMgrWriteNVRequest
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, ZDApp_ChangeState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, bdb_nwkFormationAttempt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, ZDApp_StoreNwkSecMaterial
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, bdb_reportCommissioningState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, ZDApp_SetParentAnnceTimer
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_pwrmgr_device
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_GetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_GetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_SetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, bdb_nwkFormationAttempt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  933   if ( nwkStatus == ZSuccess )
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JNZ     ??ZDApp_NetworkStartEvt_0
//  934   {
//  935     // Successfully started a ZigBee network
//  936     if ( devState == DEV_COORD_STARTING )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x8
        JNZ     ??ZDApp_NetworkStartEvt_1
//  937     {
//  938       //save NIB to NV before child joins if NV_RESTORE is defined
//  939       ZDApp_NwkWriteNVRequest();
        ; Setup parameters for call to function AddrMgrWriteNVRequest
        LCALL   `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
//  940       ZDApp_ChangeState( DEV_ZB_COORD );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV     R1,#0x9
        LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
//  941       
//  942       if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FORMATION)
        MOV     DPTR,#bdbCommissioningProcedureState
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??ZDApp_NetworkStartEvt_2
//  943       {
//  944         bdb_nwkFormationAttempt(TRUE);
        ; Setup parameters for call to function bdb_nwkFormationAttempt
        MOV     R1,#0x1
        LCALL   `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
//  945         ZDApp_StoreNwkSecMaterial();
        ; Setup parameters for call to function ZDApp_StoreNwkSecMaterial
        LCALL   `??ZDApp_StoreNwkSecMaterial::?relay`; Banked call to: ZDApp_StoreNwkSecMaterial
        SJMP    ??ZDApp_NetworkStartEvt_3
//  946       }
//  947       else if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_INITIALIZATION)
??ZDApp_NetworkStartEvt_2:
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??ZDApp_NetworkStartEvt_3
//  948       {
//  949         bdb_reportCommissioningState(BDB_INITIALIZATION,TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV     R2,#0x1
        MOV     R1,#0x7
        LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
//  950       }
//  951 
//  952       if ( zgChildAgingEnable == TRUE )
??ZDApp_NetworkStartEvt_3:
        MOV     DPTR,#zgChildAgingEnable
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_NetworkStartEvt_4
//  953       {
//  954         // Once the device has changed its state to a COORDINATOR set the timer to send
//  955         // Parent annce
//  956         ZDApp_SetParentAnnceTimer();
        ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
        LCALL   `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
        SJMP    ??ZDApp_NetworkStartEvt_4
//  957       }
//  958     }
//  959     else
//  960     {
//  961       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
??ZDApp_NetworkStartEvt_1:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
//  962     }
//  963 
//  964     osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
??ZDApp_NetworkStartEvt_4:
        ; Setup parameters for call to function osal_pwrmgr_device
        MOV     R1,#0x0
        LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
        SJMP    ??ZDApp_NetworkStartEvt_5
//  965   }
//  966   else
//  967   {
//  968     // Try again with a higher energy threshold
//  969     if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
??ZDApp_NetworkStartEvt_0:
        ; Setup parameters for call to function NLME_GetEnergyThreshold
        LCALL   `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
        MOV     A,R1
        MOV     R1,#0x0
        ADD     A,#0x10
        JNC     ??ZDApp_NetworkStartEvt_6
        INC     R1
??ZDApp_NetworkStartEvt_6:
        CLR     C
        SUBB    A,#-0x1
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??ZDApp_NetworkStartEvt_7
//  970     {
//  971       NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
        ; Setup parameters for call to function NLME_GetEnergyThreshold
        LCALL   `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
        MOV     A,R1
        MOV     R0,A
        ; Setup parameters for call to function NLME_SetEnergyThreshold
        MOV     A,#0x10
        ADD     A,R1
        MOV     R1,A
        LCALL   `??NLME_SetEnergyThreshold::?relay`; Banked call to: NLME_SetEnergyThreshold
//  972       osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
        SJMP    ??ZDApp_NetworkStartEvt_5
//  973     }
//  974     else
//  975     {
//  976       bdb_nwkFormationAttempt(FALSE);
??ZDApp_NetworkStartEvt_7:
        ; Setup parameters for call to function bdb_nwkFormationAttempt
        MOV     R1,#0x0
        LCALL   `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
//  977     }
//  978   }
//  979 }
??ZDApp_NetworkStartEvt_5:
        LJMP    ??Subroutine33_0 & 0xFFFF
          CFI EndBlock cfiBlock20
//  980 
//  981 /*********************************************************************
//  982  * @fn      ZDApp_DeviceAuthEvt()
//  983  *
//  984  * @brief   Process the Device Authentic Event
//  985  *
//  986  * @param   none
//  987  *
//  988  * @return  none
//  989  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  990 void ZDApp_DeviceAuthEvt( void )
ZDApp_DeviceAuthEvt:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function ZDApp_DeviceAuthEvt
        CODE
//  991 {
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_ResetTimerCancel
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_ChangeState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, NLME_StartRouterRequest
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_NVUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_SaveNwkKey
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, NLME_SetPollRate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_NVUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  992   // received authentication from trust center
//  993   if ( devState == DEV_END_DEVICE_UNAUTH )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??ZDApp_DeviceAuthEvt_0
//  994   {
//  995     // Stop the reset timer so it doesn't reset
//  996     ZDApp_ResetTimerCancel();
        ; Setup parameters for call to function ZDApp_ResetTimerCancel
        LCALL   `??ZDApp_ResetTimerCancel::?relay`; Banked call to: ZDApp_ResetTimerCancel
//  997 
//  998     ZDApp_ChangeState( DEV_END_DEVICE );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV     R1,#0x6
        LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
//  999 
// 1000     // Set the Power Manager Device
// 1001 #if defined ( POWER_SAVING )
// 1002     osal_pwrmgr_device( PWRMGR_BATTERY );
// 1003 #endif
// 1004 
// 1005     if ( ZSTACK_ROUTER_BUILD )
// 1006     {
// 1007       if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_10:
        JZ      ??ZDApp_DeviceAuthEvt_1
// 1008       {
// 1009         // NOTE: first two parameters are not used, see NLMEDE.h for details
// 1010         NLME_StartRouterRequest( 0, 0, false );
        ; Setup parameters for call to function NLME_StartRouterRequest
        MOV     R3,#0x0
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
// 1011       }
// 1012     }
// 1013 
// 1014     // Notify to save info into NV
// 1015     ZDApp_NVUpdate();
??ZDApp_DeviceAuthEvt_1:
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
// 1016 
// 1017     // Save off the security
// 1018     ZDApp_SaveNwkKey();
        ; Setup parameters for call to function ZDApp_SaveNwkKey
        LCALL   `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
// 1019 
// 1020     ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
// 1021 
// 1022     if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
// 1023         || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
// 1024           && (zgChildAgingEnable == TRUE) ) )
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JNC     ??ZDApp_DeviceAuthEvt_2
        MOV     DPTR,#zgChildAgingEnable
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_DeviceAuthEvt_3
// 1025     {
// 1026       NLME_SetPollRate( ZDApp_SavedPollRate );
??ZDApp_DeviceAuthEvt_2:
        ; Setup parameters for call to function NLME_SetPollRate
        MOV     DPTR,#ZDApp_SavedPollRate
        LCALL   ?XLOAD_R2345
        LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
        SJMP    ??ZDApp_DeviceAuthEvt_3
// 1027     }
// 1028   }
// 1029   else
// 1030   {
// 1031     ZDApp_NVUpdate();
??ZDApp_DeviceAuthEvt_0:
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
// 1032   }
// 1033 }
??ZDApp_DeviceAuthEvt_3:
        LJMP    ??Subroutine33_0 & 0xFFFF
          CFI EndBlock cfiBlock21
// 1034 
// 1035 /*********************************************************************
// 1036  * @fn      ZDApp_SaveNetworkStateEvt()
// 1037  *
// 1038  * @brief   Process the Save the Network State Event
// 1039  *
// 1040  * @param   none
// 1041  *
// 1042  * @return  none
// 1043  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1044 void ZDApp_SaveNetworkStateEvt( void )
ZDApp_SaveNetworkStateEvt:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function ZDApp_SaveNetworkStateEvt
        CODE
// 1045 {
        FUNCALL ZDApp_SaveNetworkStateEvt, NLME_UpdateNV
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNetworkStateEvt, zgWriteStartupOptions
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1046 #if defined ( NV_RESTORE )
// 1047  #if defined ( NV_TURN_OFF_RADIO )
// 1048   // Turn off the radio's receiver during an NV update
// 1049   uint8 RxOnIdle;
// 1050   uint8 x = false;
// 1051   ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
// 1052   ZMacSetReq( ZMacRxOnIdle, &x );
// 1053  #endif
// 1054 
// 1055   // Update the Network State in NV
// 1056   NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
// 1057                  NWK_NV_DEVICELIST_ENABLE |
// 1058                  NWK_NV_BINDING_ENABLE    |
// 1059                  NWK_NV_ADDRMGR_ENABLE );
        ; Setup parameters for call to function NLME_UpdateNV
        MOV     R1,#0xf
        LCALL   `??NLME_UpdateNV::?relay`; Banked call to: NLME_UpdateNV
// 1060 
// 1061   // Reset the NV startup option to resume from NV by
// 1062   // clearing the "New" join option.
// 1063   zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x2
        MOV     R1,#0x0
        LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
// 1064 
// 1065  #if defined ( NV_TURN_OFF_RADIO )
// 1066   ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
// 1067  #endif
// 1068 #endif // NV_RESTORE
// 1069 }
        LJMP    ??Subroutine33_0 & 0xFFFF
          CFI EndBlock cfiBlock22
// 1070 
// 1071 #if defined ( NV_RESTORE )
// 1072 /*********************************************************************
// 1073  * @fn      ZDApp_RestoreNetworkState()
// 1074  *
// 1075  * @brief   This function will restore the network state of the
// 1076  *          device if the network state is stored in NV.
// 1077  *
// 1078  * @param   none
// 1079  *
// 1080  * @return
// 1081  *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
// 1082  *          restored.
// 1083  *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
// 1084  *          This could mean that zgStartupOption said to not restore, or
// 1085  *          it could mean that there was no network state to restore.
// 1086  *
// 1087  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1088 uint8 ZDApp_RestoreNetworkState( void )
ZDApp_RestoreNetworkState:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function ZDApp_RestoreNetworkState
        CODE
// 1089 {
        FUNCALL ZDApp_RestoreNetworkState, NLME_InitNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNetworkState, NLME_RestoreFromNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNetworkState, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNetworkState, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNetworkState, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1090   uint8 nvStat;
// 1091 
// 1092   // Initialize NWK NV items
// 1093   nvStat = NLME_InitNV();
        ; Setup parameters for call to function NLME_InitNV
        LCALL   `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
        MOV     A,R1
        MOV     R6,A
// 1094 
// 1095   if ( nvStat != NV_OPER_FAILED )
        MOV     A,#0xa
        XRL     A,R6
        JZ      ??ZDApp_RestoreNetworkState_0
// 1096   {
// 1097     if ( NLME_RestoreFromNV() )
        ; Setup parameters for call to function NLME_RestoreFromNV
        LCALL   `??NLME_RestoreFromNV::?relay`; Banked call to: NLME_RestoreFromNV
        MOV     A,R1
        JZ      ??ZDApp_RestoreNetworkState_1
// 1098     {
// 1099       // Are we a coordinator
// 1100       ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     DPTR,#ZDAppNwkAddr
        LCALL   ??Subroutine42_0 & 0xFFFF
// 1101       if ( ZDAppNwkAddr.addr.shortAddr == 0 )
??CrossCallReturnLabel_78:
        MOV     DPTR,#ZDAppNwkAddr
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_50:
        JNZ     ??ZDApp_RestoreNetworkState_2
// 1102       {
// 1103         ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        MOVX    @DPTR,A
// 1104       }
// 1105       if(ZG_DEVICE_ENDDEVICE_TYPE) 
??ZDApp_RestoreNetworkState_2:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x2
        MOV     DPTR,#devStartMode
        JNZ     ??ZDApp_RestoreNetworkState_3
// 1106       {
// 1107         devStartMode = MODE_REJOIN;
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1108         _NIB.nwkState = NWK_INIT;
        MOV     DPTR,#_NIB + 35
        CLR     A
        SJMP    ??ZDApp_RestoreNetworkState_4
// 1109       }
// 1110       else
// 1111       {
// 1112         devStartMode = MODE_RESUME;
??ZDApp_RestoreNetworkState_3:
        MOV     A,#0x1
// 1113       }
// 1114       osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
// 1115     }
??ZDApp_RestoreNetworkState_4:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP    ??ZDApp_RestoreNetworkState_5
// 1116     else
// 1117       nvStat = NV_ITEM_UNINIT;
??ZDApp_RestoreNetworkState_1:
        MOV     R6,#0x9
// 1118 
// 1119     if ( ZG_SECURE_ENABLED )
// 1120     {
// 1121       nwkFrameCounterChanges = 0;
??ZDApp_RestoreNetworkState_5:
        MOV     DPTR,#nwkFrameCounterChanges
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1122 
// 1123       if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1124       {
// 1125         ZDApp_RestoreNwkKey( TRUE );
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        MOV     R1,#0x1
        LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
// 1126       }
// 1127     }
// 1128 
// 1129     // The default for RxOnWhenIdle is true for Routers and false for end devices
// 1130     // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
// 1131     // other than default.
// 1132   }
// 1133 
// 1134   if ( nvStat == ZSUCCESS )
        MOV     A,R6
        JNZ     ??ZDApp_RestoreNetworkState_0
// 1135     return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
        MOV     R1,#0x0
        SJMP    ??ZDApp_RestoreNetworkState_6
// 1136   else
// 1137     return ( ZDO_INITDEV_NEW_NETWORK_STATE );
??ZDApp_RestoreNetworkState_0:
        MOV     R1,#0x1
??ZDApp_RestoreNetworkState_6:
        LJMP    ??Subroutine29_0 & 0xFFFF
// 1138 }
          CFI EndBlock cfiBlock23
// 1139 #endif // NV_RESTORE
// 1140 
// 1141 /*********************************************************************
// 1142  * @fn      ZDApp_InitUserDesc()
// 1143  *
// 1144  * @brief   Initialize the User Descriptor, the descriptor is read from NV
// 1145  *          when needed.  If you want to initialize the User descriptor to
// 1146  *          something other than all zero, do it here.
// 1147  *
// 1148  * @param   none
// 1149  *
// 1150  * @return  none
// 1151  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1152 void ZDApp_InitUserDesc( void )
ZDApp_InitUserDesc:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function ZDApp_InitUserDesc
        CODE
// 1153 {
        FUNCALL ZDApp_InitUserDesc, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_InitUserDesc, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_InitUserDesc, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 17
        MOV     A,#-0x11
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1154   UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
// 1155 
// 1156   // Initialize the User Descriptor, the descriptor is read from NV
// 1157   // when needed.  If you want to initialize the User descriptor to something
// 1158   // other than all zero, do it here.
// 1159   osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1160   if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
// 1161          sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
        ; Setup parameters for call to function osal_nv_item_init
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R2,#-0x7f
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        JNZ     ??ZDApp_InitUserDesc_0
// 1162   {
// 1163     if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
// 1164          sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0,#0x11
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7f
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        JNZ     ??ZDApp_InitUserDesc_0
// 1165     {
// 1166       if ( ZDO_DefaultUserDescriptor.len != 0 )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JZ      ??ZDApp_InitUserDesc_0
// 1167       {
// 1168         ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.4
        MOVX    @DPTR,A
// 1169       }
// 1170     }
// 1171   }
// 1172 }
??ZDApp_InitUserDesc_0:
        MOV     A,#0x11
        LJMP    ??Subroutine30_0 & 0xFFFF
          CFI EndBlock cfiBlock24
// 1173 
// 1174 /*********************************************************************
// 1175  * @fn      ZDAppCheckForHoldKey()
// 1176  *
// 1177  * @brief   Check for key to set the device into Hold Auto Start
// 1178  *
// 1179  * @param   none
// 1180  *
// 1181  * @return  none
// 1182  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1183 void ZDAppCheckForHoldKey( void )
ZDAppCheckForHoldKey:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function ZDAppCheckForHoldKey
        CODE
// 1184 {
        FUNCALL ZDAppCheckForHoldKey, HalKeyRead
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1185 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
// 1186 
// 1187   // Get Keypad directly to see if a HOLD is needed
// 1188   zdappHoldKeys = HalKeyRead();
        ; Setup parameters for call to function HalKeyRead
        LCALL   `??HalKeyRead::?relay`; Banked call to: HalKeyRead
        MOV     A,R1
        MOV     DPTR,#zdappHoldKeys
        MOVX    @DPTR,A
// 1189 
// 1190   // Hold down the SW_BYPASS_START key (see OnBoard.h)
// 1191   // while booting to avoid starting up the device.
// 1192   if ( zdappHoldKeys == SW_BYPASS_START )
        XRL     A,#0x1
        JNZ     ??ZDAppCheckForHoldKey_0
// 1193   {
// 1194     // Change the device state to HOLD on start up
// 1195     devState = DEV_HOLD;
        MOV     DPTR,#devState
        CLR     A
        MOVX    @DPTR,A
// 1196   }
// 1197 #endif // HAL_KEY
// 1198 }
??ZDAppCheckForHoldKey_0:
        LJMP    ??Subroutine33_0 & 0xFFFF
          CFI EndBlock cfiBlock25
// 1199 
// 1200 /*********************************************************************
// 1201  * @fn      ZDApp_ProcessOSALMsg()
// 1202  *
// 1203  * @brief   Process the incoming task message.
// 1204  *
// 1205  * @param   msgPtr - message to process
// 1206  *
// 1207  * @return  none
// 1208  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1209 void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
ZDApp_ProcessOSALMsg:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function ZDApp_ProcessOSALMsg
        CODE
// 1210 {
        FUNCALL ZDApp_ProcessOSALMsg, ZDP_IncomingData
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_ProcessMsgCBs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_ProcessSecMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1211   // Data Confirmation message fields
// 1212   uint8 sentEP;       // This should always be 0
// 1213   uint8 sentStatus;
// 1214   afDataConfirm_t *afDataConfirm;
// 1215 
// 1216 
// 1217   switch ( msgPtr->event )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        DEC     A
        JZ      ??ZDApp_ProcessOSALMsg_0
        DEC     A
        JZ      ??ZDApp_ProcessOSALMsg_0
        ADD     A,#-0x18
        JZ      ??ZDApp_ProcessOSALMsg_1
        ADD     A,#0x47
        JZ      ??ZDApp_ProcessOSALMsg_2
        ADD     A,#-0x2a
        JZ      ??ZDApp_ProcessOSALMsg_3
        SJMP    ??ZDApp_ProcessOSALMsg_4
// 1218   {
// 1219     // Incoming ZDO Message
// 1220     case AF_INCOMING_MSG_CMD:
// 1221       ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
??ZDApp_ProcessOSALMsg_1:
        ; Setup parameters for call to function ZDP_IncomingData
        LCALL   `??ZDP_IncomingData::?relay`; Banked call to: ZDP_IncomingData
// 1222       break;
        SJMP    ??ZDApp_ProcessOSALMsg_0
// 1223 
// 1224     case ZDO_CB_MSG:
// 1225       ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
??ZDApp_ProcessOSALMsg_2:
        ; Setup parameters for call to function ZDApp_ProcessMsgCBs
        LCALL   `??ZDApp_ProcessMsgCBs::?relay`; Banked call to: ZDApp_ProcessMsgCBs
// 1226       break;
        SJMP    ??ZDApp_ProcessOSALMsg_0
// 1227 
// 1228     case AF_DATA_CONFIRM_CMD:
// 1229       // This message is received as a confirmation of a data packet sent.
// 1230       // The status is of ZStatus_t type [defined in NLMEDE.h]
// 1231       // The message fields are defined in AF.h
// 1232       afDataConfirm = (afDataConfirm_t *)msgPtr;
// 1233       sentEP = afDataConfirm->endpoint;
// 1234       sentStatus = afDataConfirm->hdr.status;
// 1235 
// 1236       // Action taken when confirmation is received.
// 1237 #if defined ( ZIGBEE_FREQ_AGILITY )
// 1238       if ( pZDNwkMgr_ProcessDataConfirm )
??ZDApp_ProcessOSALMsg_3:
        MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_51:
        JZ      ??ZDApp_ProcessOSALMsg_0
// 1239         pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
        ; Setup parameters for indirect call
        LCALL   ??Subroutine41_0 & 0xFFFF
??CrossCallReturnLabel_73:
        LCALL   ?CALL_IND
        SJMP    ??ZDApp_ProcessOSALMsg_0
// 1240 #endif
// 1241       (void)sentEP;
// 1242       (void)sentStatus;
// 1243       break;
// 1244 
// 1245     case ZDO_NWK_DISC_CNF:
// 1246       if (devState != DEV_NWK_DISC)
// 1247       {
// 1248         break;
// 1249       }
// 1250       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1251       {
// 1252         //Rejoin or resume
// 1253         if(bdb_isDeviceNonFactoryNew()) 
// 1254         {
// 1255           if(bdb_rejoinNwk() == ZSuccess)
// 1256           {
// 1257             return;
// 1258           }
// 1259 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 1260           else
// 1261           {
// 1262             if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1263             {
// 1264               bdb_parentLost();
// 1265               return;
// 1266             }
// 1267           }
// 1268 #endif
// 1269         }
// 1270         
// 1271         if(nwk_getNwkDescList())
// 1272         {
// 1273           bdb_nwkDiscoveryAttempt(TRUE);
// 1274         }
// 1275         else
// 1276         {
// 1277           bdb_nwkDiscoveryAttempt(FALSE);
// 1278         }
// 1279       }
// 1280     break;
// 1281 
// 1282     case ZDO_NWK_JOIN_IND:
// 1283       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1284       {
// 1285         if((bdbCommissioningProcedureState.bdbCommissioningState == BDB_INITIALIZATION) || (bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST))
// 1286         {
// 1287           bdb_reportCommissioningState(bdbCommissioningProcedureState.bdbCommissioningState,TRUE);
// 1288         }
// 1289         ZDApp_ProcessNetworkJoin();
// 1290       }
// 1291       break;
// 1292 
// 1293     default:
// 1294       if ( ZG_SECURE_ENABLED )
// 1295         ZDApp_ProcessSecMsg( msgPtr );
??ZDApp_ProcessOSALMsg_4:
        ; Setup parameters for call to function ZDApp_ProcessSecMsg
        LCALL   `??ZDApp_ProcessSecMsg::?relay`; Banked call to: ZDApp_ProcessSecMsg
// 1296       break;
// 1297   }
// 1298 
// 1299 }
??ZDApp_ProcessOSALMsg_0:
        LJMP    ??Subroutine33_0 & 0xFFFF
          CFI EndBlock cfiBlock26
// 1300 
// 1301 /*********************************************************************
// 1302  * @fn      ZDApp_ProcessMsgCBs()
// 1303  *
// 1304  * @brief   Process response messages
// 1305  *
// 1306  * @param   none
// 1307  *
// 1308  * @return  none
// 1309  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1310 void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
ZDApp_ProcessMsgCBs:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
        CODE
// 1311 {
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseAddrRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_UpdateAddrManager
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseBindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ProcessBindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDMatchSendState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseEndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_MatchEndDeviceBind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 44
        MOV     A,#-0x2c
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 54)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1312   switch ( inMsg->clusterID )
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,#?V0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        33
        DATA
        DATA16
        DATA
        DATA16
        DW        34
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32768
        DATA
        DATA16
        DATA
        DATA16
        DW        32769
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32801
        DATA
        DATA16
        DATA
        DATA16
        DW        32802
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_4
        CODE
// 1313   {
// 1314 #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
// 1315     case NWK_addr_rsp:
// 1316     case IEEE_addr_rsp:
// 1317       {
// 1318         ZDO_NwkIEEEAddrResp_t *pAddrRsp;
// 1319 
// 1320         pAddrRsp = ZDO_ParseAddrRsp( inMsg );
??ZDApp_ProcessMsgCBs_1:
        ; Setup parameters for call to function ZDO_ParseAddrRsp
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
// 1321         if ( pAddrRsp )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??ZDApp_ProcessMsgCBs_4 & 0xFFFF
// 1322         {
// 1323           if ( pAddrRsp->status == ZSuccess )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessMsgCBs_5
// 1324           {
// 1325             ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
        ; Setup parameters for call to function ZDO_UpdateAddrManager
        MOV     A,R6
        ADD     A,#0x3
        MOV     R4,A
        CLR     A
        ADDC    A,R7
        MOV     R5,A
        INC     DPTR
        LCALL   ??Subroutine37_0 & 0xFFFF
// 1326           }
??CrossCallReturnLabel_43:
        LCALL   `??ZDO_UpdateAddrManager::?relay`; Banked call to: ZDO_UpdateAddrManager
// 1327 
// 1328 #if defined ( ZDP_BIND_VALIDATION )
// 1329           // look for pending bind entry for NWK_addr_rsp Only
// 1330           if ( inMsg->clusterID == NWK_addr_rsp )
// 1331           {
// 1332 #if defined ( REFLECTOR )
// 1333             ZDApp_ProcessPendingBindReq( pAddrRsp->extAddr );
// 1334 #endif
// 1335           }
// 1336 #endif
// 1337 
// 1338           osal_mem_free( pAddrRsp );
??ZDApp_ProcessMsgCBs_5:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        SJMP    ??ZDApp_ProcessMsgCBs_6
// 1339         }
// 1340       }
// 1341       break;
// 1342 #endif
// 1343 
// 1344 #if defined ( REFLECTOR )
// 1345     case Bind_req:
// 1346     case Unbind_req:
// 1347       {
// 1348         ZDO_BindUnbindReq_t bindReq;
// 1349         ZDO_ParseBindUnbindReq( inMsg, &bindReq );
??ZDApp_ProcessMsgCBs_0:
        ; Setup parameters for call to function ZDO_ParseBindUnbindReq
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP102_8
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDO_ParseBindUnbindReq::?relay`; Banked call to: ZDO_ParseBindUnbindReq
// 1350         ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
        ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP102_8
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDO_ProcessBindUnbindReq::?relay`; Banked call to: ZDO_ProcessBindUnbindReq
// 1351       }
// 1352       break;
        SJMP    ??ZDApp_ProcessMsgCBs_4
// 1353 #endif
// 1354 
// 1355 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 1356     case Bind_rsp:
// 1357     case Unbind_rsp:
// 1358       if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
??ZDApp_ProcessMsgCBs_2:
        MOV     DPTR,#matchED
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_52:
        JZ      ??ZDApp_ProcessMsgCBs_4
// 1359       {
// 1360         ZDMatchSendState(
// 1361              (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
// 1362              ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
        MOV     A,#0x21
        XRL     A,R2
        JNZ     ??ZDApp_ProcessMsgCBs_7
        MOV     A,#-0x80
        XRL     A,R3
??ZDApp_ProcessMsgCBs_7:
        JNZ     ??ZDApp_ProcessMsgCBs_8
        MOV     R1,#0x3
        SJMP    ??ZDApp_ProcessMsgCBs_9
??ZDApp_ProcessMsgCBs_8:
        MOV     R1,#0x2
??ZDApp_ProcessMsgCBs_9:
        ; Setup parameters for call to function ZDMatchSendState
        LCALL   ?Subroutine23 & 0xFFFF
// 1363       }
??CrossCallReturnLabel_19:
        MOV     R3,A
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV     R2,A
        LCALL   `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
        SJMP    ??ZDApp_ProcessMsgCBs_4
// 1364       break;
// 1365 
// 1366     case End_Device_Bind_req:
// 1367 #ifdef ZDO_ENDDEVICEBIND_RESPONSE
// 1368       if (ZG_DEVICE_COORDINATOR_TYPE)
// 1369       {
// 1370         ZDEndDeviceBind_t bindReq;
// 1371         ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
??ZDApp_ProcessMsgCBs_3:
        ; Setup parameters for call to function ZDO_ParseEndDeviceBindReq
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDO_ParseEndDeviceBindReq::?relay`; Banked call to: ZDO_ParseEndDeviceBindReq
// 1372         ZDO_MatchEndDeviceBind( &bindReq );
        ; Setup parameters for call to function ZDO_MatchEndDeviceBind
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZDO_MatchEndDeviceBind::?relay`; Banked call to: ZDO_MatchEndDeviceBind
// 1373 
// 1374         // Freeing the cluster lists - if allocated.
// 1375         if ( bindReq.numInClusters )
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JZ      ??ZDApp_ProcessMsgCBs_10
// 1376           osal_mem_free( bindReq.inClusters );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_44:
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1377         if ( bindReq.numOutClusters )
??ZDApp_ProcessMsgCBs_10:
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JZ      ??ZDApp_ProcessMsgCBs_4
// 1378           osal_mem_free( bindReq.outClusters );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
??ZDApp_ProcessMsgCBs_6:
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1379       }
// 1380 #endif
// 1381       break;
// 1382 #endif
// 1383   }
// 1384 }
??ZDApp_ProcessMsgCBs_4:
        MOV     A,#0x2c
        LJMP    ??Subroutine30_0 & 0xFFFF
          CFI EndBlock cfiBlock27
// 1385 
// 1386 /*********************************************************************
// 1387  * @fn      ZDApp_RegisterCBs()
// 1388  *
// 1389  * @brief   Process response messages
// 1390  *
// 1391  * @param   none
// 1392  *
// 1393  * @return  none
// 1394  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1395 void ZDApp_RegisterCBs( void )
ZDApp_RegisterCBs:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI Function ZDApp_RegisterCBs
        CODE
// 1396 {
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1397 #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
// 1398   ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x1
        MOV     R3,#-0x80
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
// 1399 #endif
// 1400 #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
// 1401   ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x0
        MOV     R3,#-0x80
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
// 1402 #endif
// 1403 #if ZG_BUILD_COORDINATOR_TYPE
// 1404   ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x21
        MOV     R3,#-0x80
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
// 1405   ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x22
        MOV     R3,#-0x80
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
// 1406 #ifdef ZDO_ENDDEVICEBIND_RESPONSE
// 1407   ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
// 1408 #endif
// 1409 #endif
// 1410 #if defined ( REFLECTOR )
// 1411   ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x21
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
// 1412   ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x22
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
// 1413 #endif
// 1414 }
        LJMP    ??Subroutine33_0 & 0xFFFF
          CFI EndBlock cfiBlock28
// 1415 
// 1416 /*********************************************************************
// 1417  * @fn      ZDApp_ProcessSecMsg()
// 1418  *
// 1419  * @brief   Process the incoming security message.
// 1420  *
// 1421  * @param   msgPtr - message to process
// 1422  *
// 1423  * @return  none
// 1424  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1425 void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
ZDApp_ProcessSecMsg:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function ZDApp_ProcessSecMsg
        CODE
// 1426 {
        FUNCALL ZDApp_ProcessSecMsg, ZDSecMgrUpdateDeviceInd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecMsg, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecMsg, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecMsg, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecMsg, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecMsg, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecMsg, ZDSecMgrRequestKeyInd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecMsg, bdb_TCjoiningDeviceComplete
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecMsg, ZDSecMgrVerifyKeyInd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 19
        MOV     A,#-0x13
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1427   switch ( msgPtr->event )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#-0x5
        JZ      ??ZDApp_ProcessSecMsg_0
        ADD     A,#-0x2
        JNZ     $+5
        LJMP    ??ZDApp_ProcessSecMsg_1 & 0xFFFF
        ADD     A,#-0x2
        JNZ     $+5
        LJMP    ??ZDApp_ProcessSecMsg_2 & 0xFFFF
        LJMP    ??ZDApp_ProcessSecMsg_3 & 0xFFFF
// 1428   {
// 1429     case ZDO_TRANSPORT_KEY_IND:
// 1430       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1431       {
// 1432         ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
// 1433       }
// 1434       break;
// 1435 
// 1436     case ZDO_UPDATE_DEVICE_IND:
// 1437       if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1438       {
// 1439         ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
??ZDApp_ProcessSecMsg_0:
        ; Setup parameters for call to function ZDSecMgrUpdateDeviceInd
        LCALL   `??ZDSecMgrUpdateDeviceInd::?relay`; Banked call to: ZDSecMgrUpdateDeviceInd
// 1440         
// 1441         // Look at GP proxy table for posible conflict with GPD alias NwkAddr
// 1442 #if ZG_BUILD_RTR_TYPE
// 1443         ZDO_DeviceAnnce_t devAnnce;
// 1444         uint8 invalidIEEE[Z_EXTADDR_LEN] = {0xFF};
        MOV     DPTR,#`?<Constant {255, 0, 0, 0, 0, 0, 0, 0}>`
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x8
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 1445         
// 1446         osal_memcpy( devAnnce.extAddr, ((ZDO_UpdateDeviceInd_t*)msgPtr)->devExtAddr, Z_EXTADDR_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R6
        ADD     A,#0x4
        MOV     ?V0,A
        CLR     A
        ADDC    A,R7
        MOV     ?V1,A
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
// 1447         devAnnce.nwkAddr = ((ZDO_UpdateDeviceInd_t*)msgPtr)->devAddr;
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_37:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1448         
// 1449         // Check GP proxy table to update the entry if necesary
// 1450         if( osal_memcmp( devAnnce.extAddr, invalidIEEE, Z_EXTADDR_LEN ) )
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     R3,#0x0
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R1
        JZ      ??ZDApp_ProcessSecMsg_4
// 1451         {
// 1452           if( osal_get_timeoutEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT ) )
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#gp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV     A,R2
        ORL     A,R3
        ORL     A,R4
        ORL     A,R5
        JZ      ??ZDApp_ProcessSecMsg_3
// 1453           {
// 1454             if ( osal_memcmp( &devAnnce, &GP_aliasConflictAnnce, sizeof( ZDO_DeviceAnnce_t ) ) )
        ; Setup parameters for call to function osal_memcmp
        MOV     ?V0,#GP_aliasConflictAnnce & 0xff
        MOV     ?V1,#(GP_aliasConflictAnnce >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     R4,#0xb
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     R3,#0x0
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R1
        JZ      ??ZDApp_ProcessSecMsg_3
// 1455             {
// 1456               osal_stop_timerEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#gp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        SJMP    ??ZDApp_ProcessSecMsg_3
// 1457             }
// 1458           }
// 1459         }
// 1460         else
// 1461         {
// 1462           if(GP_CheckAnnouncedDeviceGCB != NULL)
??ZDApp_ProcessSecMsg_4:
        MOV     DPTR,#GP_CheckAnnouncedDeviceGCB
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_53:
        JZ      ??ZDApp_ProcessSecMsg_3
// 1463           {
// 1464             GP_CheckAnnouncedDeviceGCB( devAnnce.extAddr, devAnnce.nwkAddr );
        ; Setup parameters for indirect call
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPTR,#GP_CheckAnnouncedDeviceGCB + 1
        LCALL   ??Subroutine41_0 & 0xFFFF
// 1465           }          
// 1466         }
// 1467 #endif
// 1468       }
??CrossCallReturnLabel_74:
        LCALL   ?CALL_IND
        SJMP    ??ZDApp_ProcessSecMsg_3
// 1469       break;
// 1470 
// 1471     case ZDO_REMOVE_DEVICE_IND:
// 1472       if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
// 1473       {
// 1474         ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
// 1475       }
// 1476       break;
// 1477 
// 1478     case ZDO_REQUEST_KEY_IND:
// 1479       if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
// 1480       {
// 1481         if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1482         {
// 1483           ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
??ZDApp_ProcessSecMsg_1:
        ; Setup parameters for call to function ZDSecMgrRequestKeyInd
        LCALL   `??ZDSecMgrRequestKeyInd::?relay`; Banked call to: ZDSecMgrRequestKeyInd
// 1484         }
// 1485       }
// 1486       break;
        SJMP    ??ZDApp_ProcessSecMsg_3
// 1487     case ZDO_VERIFY_KEY_IND:
// 1488 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1489       if(ZG_DEVICE_COORDINATOR_TYPE)
// 1490       {
// 1491         if( ((ZDO_VerifyKeyInd_t*)msgPtr)->verifyKeyStatus == ZSuccess)
??ZDApp_ProcessSecMsg_2:
        MOV     A,R6
        ADD     A,#0x1d
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessSecMsg_5
// 1492         {
// 1493           bdb_TCjoiningDeviceComplete( ((ZDO_VerifyKeyInd_t*)msgPtr)->extAddr );
        ; Setup parameters for call to function bdb_TCjoiningDeviceComplete
        MOV     A,R6
        ADD     A,#0x5
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??bdb_TCjoiningDeviceComplete::?relay`; Banked call to: bdb_TCjoiningDeviceComplete
// 1494         }
// 1495       }
// 1496   
// 1497       ZDSecMgrVerifyKeyInd( (ZDO_VerifyKeyInd_t*)msgPtr );
??ZDApp_ProcessSecMsg_5:
        ; Setup parameters for call to function ZDSecMgrVerifyKeyInd
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDSecMgrVerifyKeyInd::?relay`; Banked call to: ZDSecMgrVerifyKeyInd
// 1498 #endif
// 1499       break;
// 1500 
// 1501     case ZDO_SWITCH_KEY_IND:
// 1502       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1503       {
// 1504         ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
// 1505       }
// 1506       break;
// 1507 
// 1508     default:
// 1509       // Unsupported messages
// 1510       break;
// 1511   }
// 1512 }
??ZDApp_ProcessSecMsg_3:
        MOV     A,#0x13
          CFI EndBlock cfiBlock29
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 30)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Valid
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock30
// 1513 
// 1514 /*********************************************************************
// 1515  * @fn      ZDApp_ProcessNetworkJoin()
// 1516  *
// 1517  * @brief
// 1518  *
// 1519  *   Save off the Network key information.
// 1520  *
// 1521  * @param   none
// 1522  *
// 1523  * @return  none
// 1524  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1525 void ZDApp_ProcessNetworkJoin( void )
ZDApp_ProcessNetworkJoin:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function ZDApp_ProcessNetworkJoin
        CODE
// 1526 {
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, bdb_nwkAssocAttemt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_StartRouterRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, bdb_nwkAssocAttemt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetQueuedPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetResponseRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_StartRouterRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, nwkNeighborInitTable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_NwkDiscTerm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1527   if ( (devState == DEV_NWK_JOINING) ||
// 1528       ((devState == DEV_NWK_ORPHAN)  &&
// 1529        (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      ??ZDApp_ProcessNetworkJoin_0
        MOVX    A,@DPTR
        XRL     A,#0xa
        JZ      $+5
        LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0x7
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
// 1530   {
// 1531     // Result of a Join attempt by this device.
// 1532     if ( nwkStatus == ZSuccess )
??ZDApp_ProcessNetworkJoin_0:
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessNetworkJoin_3
// 1533     {
// 1534       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
// 1535 
// 1536 #if defined ( POWER_SAVING )
// 1537       osal_pwrmgr_device( PWRMGR_BATTERY );
// 1538 #endif
// 1539 
// 1540       if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        MOV     R1,#0x1
        LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
        MOV     A,R1
        JNZ     ??ZDApp_ProcessNetworkJoin_4
// 1541       {
// 1542         // wait for auth from trust center
// 1543         ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV     R1,#0x5
        LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1544         
// 1545         bdb_nwkAssocAttemt(TRUE);
        ; Setup parameters for call to function bdb_nwkAssocAttemt
        MOV     R1,#0x1
        SJMP    ??ZDApp_ProcessNetworkJoin_5
// 1546       }
// 1547       else
// 1548       {
// 1549         if ( ZSTACK_ROUTER_BUILD )
// 1550         {
// 1551           if ( devState == DEV_NWK_ORPHAN
// 1552             && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
??ZDApp_ProcessNetworkJoin_4:
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0xa
        JNZ     ??ZDApp_ProcessNetworkJoin_6
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_11:
        JZ      ??ZDApp_ProcessNetworkJoin_7
// 1553           {
// 1554             // Change NIB state to router for restore
// 1555             _NIB.nwkState = NWK_ROUTER;
        MOV     DPTR,#_NIB + 35
        MOV     A,#0x8
        MOVX    @DPTR,A
        SJMP    ??ZDApp_ProcessNetworkJoin_7
// 1556           }
// 1557         }
// 1558 
// 1559         if ( devState == DEV_NWK_JOINING )
??ZDApp_ProcessNetworkJoin_6:
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??ZDApp_ProcessNetworkJoin_7
// 1560         {
// 1561           ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
// 1562           if( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL )
        MOV     DPTR,#bdbCommissioningProcedureState
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_ProcessNetworkJoin_7
// 1563           {
// 1564             bdb_setNodeIsOnANetwork(TRUE);
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV     R1,#0x1
        LCALL   `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
// 1565             bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, TRUE );
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV     R2,#0x1
        MOV     R1,#0x2
        LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 1566           }
// 1567         }
// 1568 
// 1569         ZDApp_ChangeState( DEV_END_DEVICE );
??ZDApp_ProcessNetworkJoin_7:
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV     R1,#0x6
        LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1570 
// 1571         if ( ZSTACK_ROUTER_BUILD )
// 1572         {
// 1573           // NOTE: first two parameters are not used, see NLMEDE.h for details
// 1574           if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_12:
        JNZ     $+5
        LJMP    ??ZDApp_ProcessNetworkJoin_8 & 0xFFFF
// 1575           {
// 1576             NLME_StartRouterRequest( 0, 0, false );
        ; Setup parameters for call to function NLME_StartRouterRequest
        MOV     R3,#0x0
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
        LJMP    ??ZDApp_ProcessNetworkJoin_8 & 0xFFFF
// 1577           }
// 1578         }
// 1579       }
// 1580     }
// 1581     else
// 1582     {
// 1583 
// 1584       bdb_nwkAssocAttemt(FALSE);
??ZDApp_ProcessNetworkJoin_3:
        ; Setup parameters for call to function bdb_nwkAssocAttemt
        MOV     R1,#0x0
??ZDApp_ProcessNetworkJoin_5:
        LCALL   `??bdb_nwkAssocAttemt::?relay`; Banked call to: bdb_nwkAssocAttemt
        LJMP    ??ZDApp_ProcessNetworkJoin_8 & 0xFFFF
// 1585     }
// 1586   }
// 1587   else if ( devState == DEV_NWK_ORPHAN ||
// 1588             devState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL ||
// 1589             devState == DEV_NWK_TC_REJOIN_CURR_CHANNEL ||
// 1590             devState == DEV_NWK_TC_REJOIN_ALL_CHANNEL ||
// 1591             devState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL )
??ZDApp_ProcessNetworkJoin_1:
        MOVX    A,@DPTR
        XRL     A,#0x4
        JZ      ??ZDApp_ProcessNetworkJoin_2
        MOVX    A,@DPTR
        XRL     A,#0xe
        JZ      ??ZDApp_ProcessNetworkJoin_2
        MOVX    A,@DPTR
        XRL     A,#0xf
        JZ      ??ZDApp_ProcessNetworkJoin_2
        MOVX    A,@DPTR
        XRL     A,#0xd
        JZ      $+5
        LJMP    ??ZDApp_ProcessNetworkJoin_9 & 0xFFFF
// 1592   {
// 1593     // results of an orphaning attempt by this device
// 1594     if (nwkStatus == ZSuccess)
??ZDApp_ProcessNetworkJoin_2:
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??ZDApp_ProcessNetworkJoin_10 & 0xFFFF
// 1595     {
// 1596       //When the device has successfully rejoined then reset retryCnt
// 1597       retryCnt = 0;
        MOV     DPTR,#retryCnt
        CLR     A
        MOVX    @DPTR,A
// 1598 
// 1599       // Verify NWK key is available before sending Device_annce
// 1600       if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        MOV     R1,#0x1
        LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
        MOV     A,R1
        JNZ     ??ZDApp_ProcessNetworkJoin_11
// 1601       {
// 1602         // wait for auth from trust center
// 1603         ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV     R1,#0x5
        LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1604 
// 1605         // Start the reset timer for MAX UNAUTH time
// 1606         ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
        ; Setup parameters for call to function ZDApp_ResetTimerStart
        MOV     R2,#0x10
        MOV     R3,#0x27
        LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
        LJMP    ??ZDApp_ProcessNetworkJoin_8 & 0xFFFF
// 1607       }
// 1608       else
// 1609       {
// 1610         ZDApp_ChangeState( DEV_END_DEVICE );
??ZDApp_ProcessNetworkJoin_11:
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV     R1,#0x6
        LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1611 
// 1612         osal_stop_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x0
        MOV     R3,#0x20
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 1613 
// 1614         // setup Power Manager Device
// 1615 #if defined ( POWER_SAVING )
// 1616         osal_pwrmgr_device( PWRMGR_BATTERY );
// 1617 #endif
// 1618 
// 1619         // The receiver is on, turn network layer polling off.
// 1620         if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JNC     ??ZDApp_ProcessNetworkJoin_12
// 1621         {
// 1622           // if Child Table Management process is not enabled
// 1623           if ( zgChildAgingEnable == FALSE )
        MOV     DPTR,#zgChildAgingEnable
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessNetworkJoin_12
// 1624           {
// 1625             NLME_SetPollRate( 0 );
        ; Setup parameters for call to function NLME_SetPollRate
        MOV     DPTR,#__Constant_0
        LCALL   ?XLOAD_R2345
        LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1626             NLME_SetQueuedPollRate( 0 );
        ; Setup parameters for call to function NLME_SetQueuedPollRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
// 1627             NLME_SetResponseRate( 0 );
        ; Setup parameters for call to function NLME_SetResponseRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
// 1628           }
// 1629         }
// 1630 
// 1631         if ( ZSTACK_ROUTER_BUILD )
// 1632         {
// 1633           // NOTE: first two parameters are not used, see NLMEDE.h for details
// 1634           if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
??ZDApp_ProcessNetworkJoin_12:
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_13:
        JZ      ??ZDApp_ProcessNetworkJoin_13
// 1635           {
// 1636             NLME_StartRouterRequest( 0, 0, false );
        ; Setup parameters for call to function NLME_StartRouterRequest
        MOV     R3,#0x0
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
// 1637           }
// 1638         }
// 1639 
// 1640         ZDApp_AnnounceNewAddress();
??ZDApp_ProcessNetworkJoin_13:
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
// 1641 
// 1642         if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
// 1643             || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
// 1644               && (zgChildAgingEnable == TRUE) ) )
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JNC     ??ZDApp_ProcessNetworkJoin_14
        MOV     DPTR,#zgChildAgingEnable
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDApp_ProcessNetworkJoin_8 & 0xFFFF
// 1645         {
// 1646           if(devStartMode == MODE_REJOIN)
??ZDApp_ProcessNetworkJoin_14:
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??ZDApp_ProcessNetworkJoin_15
// 1647           {
// 1648             NLME_SetPollRate( zgRejoinPollRate );
        ; Setup parameters for call to function NLME_SetPollRate
        MOV     DPTR,#zgRejoinPollRate
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,?V0
        MOV     R3,A
        CLR     A
        MOV     R4,A
        MOV     R5,A
        SJMP    ??ZDApp_ProcessNetworkJoin_16
// 1649           }
// 1650           else
// 1651           {
// 1652             NLME_SetPollRate( ZDApp_SavedPollRate );
??ZDApp_ProcessNetworkJoin_15:
        ; Setup parameters for call to function NLME_SetPollRate
        MOV     DPTR,#ZDApp_SavedPollRate
        LCALL   ?XLOAD_R2345
??ZDApp_ProcessNetworkJoin_16:
        LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
        SJMP    ??ZDApp_ProcessNetworkJoin_8
// 1653           }
// 1654         }
// 1655       }
// 1656     }
// 1657     else
// 1658     {
// 1659       if ( devStartMode == MODE_RESUME )
??ZDApp_ProcessNetworkJoin_10:
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_ProcessNetworkJoin_17
// 1660       {
// 1661         if ( ++retryCnt <= MAX_RESUME_RETRY )
        MOV     DPTR,#retryCnt
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x4
        JNC     ??ZDApp_ProcessNetworkJoin_18
// 1662         {
// 1663           if ( _NIB.nwkPanId == 0xFFFF )
        MOV     DPTR,#_NIB + 33
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??ZDApp_ProcessNetworkJoin_19
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_ProcessNetworkJoin_19:
        JZ      ??ZDApp_ProcessNetworkJoin_20
// 1664             devStartMode = MODE_JOIN;
// 1665           else
// 1666           {
// 1667             devStartMode = MODE_REJOIN;
        MOV     DPTR,#devStartMode
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1668             _tmpRejoinState = true;
        MOV     DPTR,#_tmpRejoinState
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1669             prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
        MOV     DPTR,#prevDevState
        MOV     A,#0x4
        SJMP    ??ZDApp_ProcessNetworkJoin_21
// 1670           }
// 1671         }
// 1672         // Do a normal join to the network after certain times of rejoin retries
// 1673         else if( AIB_apsUseInsecureJoin == true )
??ZDApp_ProcessNetworkJoin_18:
        MOV     DPTR,#AIB_apsUseInsecureJoin
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_ProcessNetworkJoin_17
// 1674         {
// 1675           devStartMode = MODE_JOIN;
??ZDApp_ProcessNetworkJoin_20:
        MOV     DPTR,#devStartMode
        CLR     A
??ZDApp_ProcessNetworkJoin_21:
        MOVX    @DPTR,A
// 1676         }
// 1677       }
// 1678       else if(devStartMode == MODE_REJOIN)
// 1679       {
// 1680         if ( ZSTACK_END_DEVICE_BUILD )
// 1681         {
// 1682           devStartMode = MODE_REJOIN;
// 1683           _tmpRejoinState = true;
// 1684           _NIB.nwkState = NWK_INIT;
// 1685 
// 1686           if( prevDevState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL )
// 1687           {
// 1688             runtimeChannel = MAX_CHANNELS_24GHZ;
// 1689             prevDevState = DEV_NWK_SEC_REJOIN_ALL_CHANNEL ;
// 1690           }
// 1691           else if ( prevDevState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL)
// 1692           {
// 1693             // Set the flag that will ask the device to do trust center network layer rejoin.
// 1694             _NIB.nwkKeyLoaded = FALSE;
// 1695             ZDApp_ResetNwkKey(); // Clear up the old network key.
// 1696             runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
// 1697             prevDevState = DEV_NWK_TC_REJOIN_CURR_CHANNEL ;
// 1698           }
// 1699           else if ( prevDevState == DEV_NWK_TC_REJOIN_CURR_CHANNEL )
// 1700           {
// 1701             runtimeChannel = MAX_CHANNELS_24GHZ;
// 1702             prevDevState= DEV_NWK_TC_REJOIN_ALL_CHANNEL ;
// 1703           }
// 1704 
// 1705         }
// 1706       }
// 1707 
// 1708       // Clear the neighbor Table and network discovery tables.
// 1709       nwkNeighborInitTable();
??ZDApp_ProcessNetworkJoin_17:
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
// 1710       NLME_NwkDiscTerm();
        ; Setup parameters for call to function NLME_NwkDiscTerm
        LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
// 1711 
// 1712       // setup a retry for later...
// 1713       ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1714            + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
        ; Setup parameters for call to function osal_rand
        LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV     A,R2
        ANL     A,#0x7f
        ADD     A,#0x64
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
        SJMP    ??ZDApp_ProcessNetworkJoin_8
// 1715     }
// 1716   }
// 1717 #if defined ( ZIGBEEPRO )
// 1718   else if ( devState != DEV_HOLD )
??ZDApp_ProcessNetworkJoin_9:
        MOVX    A,@DPTR
        JZ      ??ZDApp_ProcessNetworkJoin_8
// 1719   {
// 1720     // Assume from address conflict
// 1721 
// 1722     // Notify the network
// 1723     ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
// 1724 
// 1725     // Notify apps
// 1726     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
// 1727   }
// 1728 #endif
// 1729 }
??ZDApp_ProcessNetworkJoin_8:
        SJMP    ??Subroutine31_0
          CFI EndBlock cfiBlock31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond32 Using cfiCommon0
          CFI Function ZDApp_DeviceAuthEvt
          CFI Conditional ??CrossCallReturnLabel_10
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function ZDO_LeaveInd
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker37 Using cfiCommon1
          CFI (cfiPicker37) NoFunction
          CFI (cfiPicker37) Picker
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0x7
        XRL     A,#0x2
        RET
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiPicker37

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
        MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7b
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
          CFI EndBlock cfiBlock38
        REQUIRE ??Subroutine30_0
        ; // Fall through to label ??Subroutine30_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine30_0:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 27)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock39
        REQUIRE ??Subroutine31_0
        ; // Fall through to label ??Subroutine31_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine31_0:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock40
// 1730 
// 1731 /******************************************************************************
// 1732  * @fn          ZDApp_StoreNwkSecMaterial
// 1733  *
// 1734  * @brief       Stores new entries in the NwkSecMaterial
// 1735  *
// 1736  * @param       none
// 1737  *
// 1738  * @return      none
// 1739  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1740 void ZDApp_StoreNwkSecMaterial(void)
ZDApp_StoreNwkSecMaterial:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function ZDApp_StoreNwkSecMaterial
        CODE
// 1741 {
        FUNCALL ZDApp_StoreNwkSecMaterial, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_StoreNwkSecMaterial, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_StoreNwkSecMaterial, osal_isbufset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_StoreNwkSecMaterial, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_StoreNwkSecMaterial, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1742   nwkSecMaterialDesc_t nwkSecMaterialDesc;
// 1743   uint8 i;
// 1744   uint8 emptyEntryIndexOffset = gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES;
// 1745   
// 1746   //Search if we do have security material for this network
// 1747   for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
        MOV     R6,#0x0
        MOV     ?V0,#(_NIB + 53) & 0xff
        MOV     ?V1,#((_NIB + 53) >> 8) & 0xff
        MOV     ?V2,R6
        SJMP    ??ZDApp_StoreNwkSecMaterial_0
??ZDApp_StoreNwkSecMaterial_1:
        INC     R6
??ZDApp_StoreNwkSecMaterial_0:
        MOV     DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??ZDApp_StoreNwkSecMaterial_2 & 0xFFFF
// 1748   {
// 1749     osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V4,#0xc
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x75
        MOV     R2,A
        CLR     A
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1750     {
// 1751       if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V4,R1
        MOV     ?V5,R2
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,?V0
        MOV     R2,?V1
        MOV     R3,?V2
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        JNZ     ??ZDApp_StoreNwkSecMaterial_2
// 1752       {
// 1753         break;
// 1754       }
// 1755       if(osal_isbufset(nwkSecMaterialDesc.extendedPanID,0,Z_EXTADDR_LEN))
        ; Setup parameters for call to function osal_isbufset
        MOV     R4,#0x8
        MOV     R1,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_isbufset::?relay`; Banked call to: osal_isbufset
        MOV     A,R1
        JZ      ??ZDApp_StoreNwkSecMaterial_1
// 1756       {
// 1757         emptyEntryIndexOffset = i;
        MOV     A,R6
        MOV     R7,A
// 1758         break;
// 1759       }
// 1760     }
// 1761   }
// 1762   
// 1763   //ExtPanID not found and found an empty entry, save the extended PANID
// 1764   if(emptyEntryIndexOffset < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES)
// 1765   {
// 1766     osal_memcpy(nwkSecMaterialDesc.extendedPanID, _NIB.extendedPANID, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1767     nwkSecMaterialDesc.FrameCounter = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine9 & 0xFFFF
// 1768     osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + emptyEntryIndexOffset,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
// 1769   }
??CrossCallReturnLabel_0:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0,#0xc
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R7
        ADD     A,#0x75
        MOV     R2,A
        CLR     A
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1770 
// 1771 }
??ZDApp_StoreNwkSecMaterial_2:
        LJMP    ?Subroutine6 & 0xFFFF
          CFI EndBlock cfiBlock41
// 1772 
// 1773 
// 1774 /*********************************************************************
// 1775  * @fn      ZDApp_SaveNwkKey()
// 1776  *
// 1777  * @brief   Save off the Network key information.
// 1778  *
// 1779  * @param   none
// 1780  *
// 1781  * @return  none
// 1782  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1783 void ZDApp_SaveNwkKey( void )
ZDApp_SaveNwkKey:
          CFI Block cfiBlock42 Using cfiCommon0
          CFI Function ZDApp_SaveNwkKey
        CODE
// 1784 {
        FUNCALL ZDApp_SaveNwkKey, SSP_ReadNwkActiveKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 33
        MOV     A,#-0x21
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 1785   nwkActiveKeyItems keyItems;
// 1786   nwkSecMaterialDesc_t nwkSecMaterialDesc;
// 1787   uint8 found = 0;
// 1788   uint8 i;
// 1789   
// 1790   SSP_ReadNwkActiveKey( &keyItems );
        ; Setup parameters for call to function SSP_ReadNwkActiveKey
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
// 1791 
// 1792   osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1793                 (void *)&keyItems );
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0,#0x15
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 1794   
// 1795   //Search for the security material to update its framecounter
// 1796   for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
        MOV     ?V0,#0x0
        SJMP    ??ZDApp_SaveNwkKey_0
??ZDApp_SaveNwkKey_1:
        INC     ?V0
??ZDApp_SaveNwkKey_0:
        MOV     R6,?V0
        MOV     R7,#0x0
        MOV     DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??ZDApp_SaveNwkKey_2 & 0xFFFF
// 1797   {
// 1798     osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
        MOV     A,R6
        ADD     A,#0x75
        MOV     R6,A
        JNC     ??ZDApp_SaveNwkKey_3
        INC     R7
??ZDApp_SaveNwkKey_3:
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V2,#0xc
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 1799     {
// 1800       if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V4,R1
        MOV     ?V5,R2
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 51)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#(_NIB + 53) & 0xff
        MOV     R2,#((_NIB + 53) >> 8) & 0xff
        MOV     R3,#0x0
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,R1
        JZ      ??ZDApp_SaveNwkKey_1
// 1801       {
// 1802         nwkSecMaterialDesc.FrameCounter = keyItems.frameCounter;
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XLOAD_R0123
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?XSTORE_R0123
// 1803         found = TRUE;
// 1804         //update the framecounter associated to this ExtPanID
// 1805         osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0,#0xc
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        SJMP    ??ZDApp_SaveNwkKey_4
          CFI CFA_XSP16 add(XSP16, 48)
// 1806         break;
// 1807       }
// 1808     }
// 1809   }
// 1810   
// 1811   //If not found, then use the generic
// 1812   if(!found)
// 1813   {
// 1814     osal_memset(nwkSecMaterialDesc.extendedPanID,0xFF,Z_EXTADDR_LEN);
??ZDApp_SaveNwkKey_2:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#-0x1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1815     nwkSecMaterialDesc.FrameCounter = keyItems.frameCounter;
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XLOAD_R0123
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?XSTORE_R0123
// 1816     //update the framecounter associated to this ExtPanID
// 1817     osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i - 1,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0,#0xc
        MOV     ?V1,R7
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x74
        MOV     R2,A
        CLR     A
        ADDC    A,#0x0
??ZDApp_SaveNwkKey_4:
        MOV     R3,A
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 1818   }
// 1819   
// 1820   
// 1821   nwkFrameCounterChanges = 0;
        MOV     DPTR,#nwkFrameCounterChanges
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1822   
// 1823   // Clear copy in RAM before return.
// 1824   osal_memset( &keyItems, 0x00, sizeof(keyItems) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x15
        MOV     R5,A
        MOV     R1,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1825 
// 1826 }
        MOV     A,#0x21
        SJMP    ??Subroutine32_0
          CFI EndBlock cfiBlock42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiBlock43 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 27)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0xc
          CFI EndBlock cfiBlock43
        REQUIRE ??Subroutine32_0
        ; // Fall through to label ??Subroutine32_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine32_0:
          CFI Block cfiBlock44 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 48)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Valid
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock44
// 1827 
// 1828 /*********************************************************************
// 1829  * @fn      ZDApp_ForceConcentratorChange()
// 1830  *
// 1831  * @brief   Force a network concentrator change by resetting
// 1832  *          zgConcentratorEnable and zgConcentratorDiscoveryTime
// 1833  *          from NV and set nwk event.
// 1834  *
// 1835  * @param   none
// 1836  *
// 1837  * @return  none
// 1838  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1839 void ZDApp_ForceConcentratorChange( void )
ZDApp_ForceConcentratorChange:
          CFI Block cfiBlock45 Using cfiCommon0
          CFI Function ZDApp_ForceConcentratorChange
        CODE
// 1840 {
        FUNCALL ZDApp_ForceConcentratorChange, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ForceConcentratorChange, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ForceConcentratorChange, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ForceConcentratorChange, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1841   osal_nv_read( ZCD_NV_CONCENTRATOR_ENABLE, 0, sizeof(zgConcentratorEnable), &zgConcentratorEnable );
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0,#zgConcentratorEnable & 0xff
        MOV     ?V1,#(zgConcentratorEnable >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x32
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1842   osal_nv_read( ZCD_NV_CONCENTRATOR_DISCOVERY, 0, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime );
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0,#zgConcentratorDiscoveryTime & 0xff
        MOV     ?V1,#(zgConcentratorDiscoveryTime >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x33
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1843 
// 1844   if ( zgConcentratorEnable == TRUE )
        MOV     DPTR,#zgConcentratorEnable
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_ForceConcentratorChange_0
// 1845   {
// 1846     // Start next event
// 1847     osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_64
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R2,#0x0
        MOV     R3,#0x8
        MOV     DPTR,#NWK_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        SJMP    ??ZDApp_ForceConcentratorChange_1
// 1848   }
// 1849   else
// 1850   {
// 1851     // Stop the next event
// 1852     osal_stop_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT );
??ZDApp_ForceConcentratorChange_0:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x0
        MOV     R3,#0x8
        MOV     DPTR,#NWK_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 1853   }
// 1854 }
??ZDApp_ForceConcentratorChange_1:
        LJMP    ??Subroutine31_0 & 0xFFFF
          CFI EndBlock cfiBlock45
// 1855 
// 1856 /*********************************************************************
// 1857  * @fn      ZDApp_ResetNwkKey()
// 1858  *
// 1859  * @brief   Reset the Network key information in NV.
// 1860  *
// 1861  * @param   none
// 1862  *
// 1863  * @return  none
// 1864  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1865 void ZDApp_ResetNwkKey( void )
ZDApp_ResetNwkKey:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI Function ZDApp_ResetNwkKey
        CODE
// 1866 {
        FUNCALL ZDApp_ResetNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ResetNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1867   nwkActiveKeyItems keyItems;
// 1868 
// 1869   osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x15
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1870   osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1871                 (void *)&keyItems );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0,#0x15
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1872 }
        MOV     A,#0x15
        LJMP    ??Subroutine30_0 & 0xFFFF
          CFI EndBlock cfiBlock46
// 1873 
// 1874 /*********************************************************************
// 1875  * @fn      ZDApp_RestoreNwkSecMaterial()
// 1876  *
// 1877  * @brief   Restore the network frame counter associated to this ExtPanID and 
// 1878  *          increment it if found. This can only happens once per reset
// 1879  *
// 1880  * @param   none
// 1881  *
// 1882  * @return  none
// 1883  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1884 void ZDApp_RestoreNwkSecMaterial(void)
ZDApp_RestoreNwkSecMaterial:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI Function ZDApp_RestoreNwkSecMaterial
        CODE
// 1885 {
        FUNCALL ZDApp_RestoreNwkSecMaterial, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkSecMaterial, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkSecMaterial, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1886   uint8 Found = FALSE;
// 1887   uint8 i;
// 1888   nwkSecMaterialDesc_t nwkSecMaterialDesc;
// 1889   uint8 UpdateFrameCounter = FALSE;
// 1890 
// 1891   //Search if we do have security material for this network
// 1892   for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
        MOV     ?V0,#0x0
        SJMP    ??ZDApp_RestoreNwkSecMaterial_0
// 1893   {
// 1894     osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
??ZDApp_RestoreNwkSecMaterial_1:
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V2,#0xc
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1895     {
// 1896       if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V4,R1
        MOV     ?V5,R2
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#(_NIB + 53) & 0xff
        MOV     R2,#((_NIB + 53) >> 8) & 0xff
        MOV     R3,#0x0
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        JNZ     ??ZDApp_RestoreNwkSecMaterial_2
// 1897       {
// 1898         UpdateFrameCounter = TRUE;
// 1899         Found = TRUE;
// 1900         break;
// 1901       }
// 1902     }
// 1903   }    
        INC     ?V0
??ZDApp_RestoreNwkSecMaterial_0:
        MOV     A,?V0
        ADD     A,#0x75
        MOV     R6,A
        CLR     A
        ADDC    A,#0x0
        MOV     R7,A
        MOV     DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,?V0
        SUBB    A,R0
        JC      ??ZDApp_RestoreNwkSecMaterial_1
// 1904   //Check if we do have frame counter stored in the generic
// 1905   if(!Found)
// 1906   {
// 1907     //The last entry readed has the Generic item, thefore, no need to read it again
// 1908     if(nwkSecMaterialDesc.FrameCounter)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?XLOAD_R0123
        MOV     A,R0
        ORL     A,R1
        ORL     A,R2
        ORL     A,R3
        JZ      ??ZDApp_RestoreNwkSecMaterial_3
??ZDApp_RestoreNwkSecMaterial_2:
        MOV     DPTR,#FrameCounterUpdated
        MOVX    A,@DPTR
        JNZ     ??ZDApp_RestoreNwkSecMaterial_3
// 1909     {
// 1910       UpdateFrameCounter = TRUE;
// 1911     }
// 1912   }  
// 1913 
// 1914   if(UpdateFrameCounter && (!FrameCounterUpdated))
// 1915   {
// 1916     FrameCounterUpdated = TRUE;
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1917     
// 1918     // Increment the frame counter stored in NV
// 1919     nwkSecMaterialDesc.FrameCounter += ( MAX_NWK_FRAMECOUNTER_CHANGES +
// 1920                               NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA );
        MOV     DPTR,#__Constant_4e2
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0
        LCALL   ?L_ADD_TO_X
// 1921     
// 1922     nwkFrameCounter = nwkSecMaterialDesc.FrameCounter;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?XLOAD_R0123
        MOV     DPTR,#nwkFrameCounter
        LCALL   ?XSTORE_R0123
// 1923     
// 1924     osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0,#0xc
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1925     
// 1926     nwkFrameCounterChanges = 0;
        MOV     DPTR,#nwkFrameCounterChanges
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1927   }
// 1928   return;
??ZDApp_RestoreNwkSecMaterial_3:
        LJMP    ?Subroutine6 & 0xFFFF
// 1929 }
          CFI EndBlock cfiBlock47
// 1930 
// 1931 /*********************************************************************
// 1932  * @fn      ZDApp_RestoreNwkKey(uint8 incrFrmCnt)
// 1933  *
// 1934  * @brief
// 1935  *
// 1936  *   Save off the Network key information.
// 1937  *
// 1938  * @param   incrFrmCnt - set to true if we want to increment the network
// 1939             frame counter, else set to false
// 1940  *
// 1941  * @return  true if restored from NV, false if not
// 1942  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1943 uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt )
ZDApp_RestoreNwkKey:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function ZDApp_RestoreNwkKey
        CODE
// 1944 {
        FUNCALL ZDApp_RestoreNwkKey, ZDApp_RestoreNwkSecMaterial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 37
        MOV     A,#-0x25
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 1945   nwkActiveKeyItems keyItems;
// 1946   uint8 ret = FALSE;
        MOV     R6,#0x0
// 1947 
// 1948   ZDApp_RestoreNwkSecMaterial();
        ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
        LCALL   `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
// 1949 
// 1950   // Restore the key information
// 1951   if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
// 1952       == ZSUCCESS )
        ; Setup parameters for call to function osal_nv_read
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0,#0x15
        MOV     ?V1,R6
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,R1
        JNZ     ??ZDApp_RestoreNwkKey_0
// 1953   {
// 1954     uint8 nullKey[SEC_KEY_LEN];
// 1955 
// 1956     // initialize default value to compare to
// 1957     osal_memset( nullKey, 0x00, SEC_KEY_LEN );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1958 
// 1959     // if stored key is different than default value, then a key has been established
// 1960     if ( !osal_memcmp( keyItems.active.key, nullKey, SEC_KEY_LEN ) )
        ; Setup parameters for call to function osal_memcmp
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     ?V2,R6
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 51)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     R3,#0x0
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,R1
        JNZ     ??ZDApp_RestoreNwkKey_0
// 1961     {
// 1962       ret = TRUE;
        MOV     R6,#0x1
// 1963 
// 1964       // Clear copy in RAM before return.
// 1965       osal_memset( &keyItems, 0x00, sizeof(keyItems) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x15
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1966     }
// 1967   }
// 1968 
// 1969   return ( ret );
??ZDApp_RestoreNwkKey_0:
        MOV     A,R6
        MOV     R1,A
        MOV     A,#0x25
        LJMP    ?Subroutine5 & 0xFFFF
// 1970 }
          CFI EndBlock cfiBlock48
// 1971 
// 1972 /*********************************************************************
// 1973  * @fn      ZDApp_ResetTimerStart
// 1974  *
// 1975  * @brief   Start the reset timer.
// 1976  *
// 1977  * @param   delay - delay time(ms) before reset
// 1978  *
// 1979  * @return  none
// 1980  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1981 void ZDApp_ResetTimerStart( uint16 delay )
ZDApp_ResetTimerStart:
          CFI Block cfiBlock49 Using cfiCommon0
          CFI Function ZDApp_ResetTimerStart
        CODE
// 1982 {
        FUNCALL ZDApp_ResetTimerStart, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ResetTimerStart, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
// 1983   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_DEVICE_RESET ) )
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV     A,R2
        ORL     A,R3
        ORL     A,R4
        ORL     A,R5
        JNZ     ??ZDApp_ResetTimerStart_0
// 1984   {
// 1985     // Start the rest timer
// 1986     osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
        ; Setup parameters for call to function osal_start_timerEx
        CLR     A
        MOV     ?V2,A
        MOV     ?V3,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1987   }
// 1988 }
??ZDApp_ResetTimerStart_0:
        LJMP    ??Subroutine35_0 & 0xFFFF
          CFI EndBlock cfiBlock49
// 1989 
// 1990 /*********************************************************************
// 1991  * @fn      ZDApp_ResetTimerCancel
// 1992  *
// 1993  * @brief   Cancel the reset timer.
// 1994  *
// 1995  * @param   none
// 1996  *
// 1997  * @return  none
// 1998  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1999 void ZDApp_ResetTimerCancel( void )
ZDApp_ResetTimerCancel:
          CFI Block cfiBlock50 Using cfiCommon0
          CFI Function ZDApp_ResetTimerCancel
        CODE
// 2000 {
        FUNCALL ZDApp_ResetTimerCancel, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ResetTimerCancel, osal_clear_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2001   (void)osal_stop_timerEx(ZDAppTaskID, ZDO_DEVICE_RESET);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 2002   (void)osal_clear_event(ZDAppTaskID, ZDO_DEVICE_RESET);
        ; Setup parameters for call to function osal_clear_event
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_clear_event::?relay`; Banked call to: osal_clear_event
// 2003 }
        LJMP    ??Subroutine33_0 & 0xFFFF
          CFI EndBlock cfiBlock50
// 2004 
// 2005 /*********************************************************************
// 2006  * @fn      ZDApp_LeaveCtrlInit
// 2007  *
// 2008  * @brief   Initialize the leave control logic.
// 2009  *
// 2010  * @param   none
// 2011  *
// 2012  * @return  none
// 2013  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2014 void ZDApp_LeaveCtrlInit( void )
ZDApp_LeaveCtrlInit:
          CFI Block cfiBlock51 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlInit
        CODE
// 2015 {
        FUNCALL ZDApp_LeaveCtrlInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveCtrlInit, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2016   uint8 status;
// 2017 
// 2018 
// 2019   // Initialize control state
// 2020   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
        MOV     DPTR,#ZDApp_LeaveCtrl
        CLR     A
        MOVX    @DPTR,A
// 2021 
// 2022   status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
// 2023                               sizeof(ZDApp_LeaveCtrl),
// 2024                               &ZDApp_LeaveCtrl );
// 2025 
// 2026   if ( status == ZSUCCESS )
        ; Setup parameters for call to function osal_nv_item_init
        MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
        MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#-0x7b
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        JNZ     ??ZDApp_LeaveCtrlInit_0
// 2027   {
// 2028     // Read saved control
// 2029     osal_nv_read( ZCD_NV_LEAVE_CTRL,
// 2030                   0,
// 2031                   sizeof( uint8 ),
// 2032                   &ZDApp_LeaveCtrl);
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7b
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 2033   }
// 2034 }
??ZDApp_LeaveCtrlInit_0:
        LJMP    ??Subroutine31_0 & 0xFFFF
          CFI EndBlock cfiBlock51
// 2035 
// 2036 /*********************************************************************
// 2037  * @fn      ZDApp_LeaveCtrlSet
// 2038  *
// 2039  * @brief   Set the leave control logic.
// 2040  *
// 2041  * @param   ra - reassociate flag
// 2042  *
// 2043  * @return  none
// 2044  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2045 void ZDApp_LeaveCtrlSet( uint8 ra )
ZDApp_LeaveCtrlSet:
          CFI Block cfiBlock52 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlSet
        CODE
// 2046 {
        FUNCALL ZDApp_LeaveCtrlSet, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 2047   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
        MOV     DPTR,#ZDApp_LeaveCtrl
        MOV     A,#0x1
        MOVX    @DPTR,A
// 2048 
// 2049   if ( ra == TRUE )
        XRL     A,R6
        JNZ     ??ZDApp_LeaveCtrlSet_0
// 2050   {
// 2051     ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
        MOV     A,#0x3
        MOVX    @DPTR,A
// 2052   }
// 2053 
// 2054   // Write the leave control
// 2055   osal_nv_write( ZCD_NV_LEAVE_CTRL,
// 2056                  0,
// 2057                  sizeof( uint8 ),
// 2058                  &ZDApp_LeaveCtrl);
??ZDApp_LeaveCtrlSet_0:
        ; Setup parameters for call to function osal_nv_write
        LJMP    ?Subroutine4 & 0xFFFF
// 2059 }
          CFI EndBlock cfiBlock52
// 2060 
// 2061 /*********************************************************************
// 2062  * @fn      ZDApp_LeaveCtrlReset
// 2063  *
// 2064  * @brief   Re-initialize the leave control logic.
// 2065  *
// 2066  * @param   none
// 2067  *
// 2068  * @return  none
// 2069  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2070 void ZDApp_LeaveCtrlReset( void )
ZDApp_LeaveCtrlReset:
          CFI Block cfiBlock53 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlReset
        CODE
// 2071 {
        FUNCALL ZDApp_LeaveCtrlReset, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2072   // Set leave control to initialized state
// 2073   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
        MOV     DPTR,#ZDApp_LeaveCtrl
        CLR     A
        MOVX    @DPTR,A
// 2074 
// 2075   // Write initialized control
// 2076   osal_nv_write( ZCD_NV_LEAVE_CTRL,
// 2077                 0,
// 2078                 sizeof( uint8 ),
// 2079                 &ZDApp_LeaveCtrl);
        ; Setup parameters for call to function osal_nv_write
        LJMP    ?Subroutine4 & 0xFFFF
// 2080 }
          CFI EndBlock cfiBlock53
// 2081 
// 2082 /*********************************************************************
// 2083  * @fn      ZDApp_LeaveCtrlBypass
// 2084  *
// 2085  * @brief   Check if NV restore should be skipped during a leave reset.
// 2086  *
// 2087  * @param   none
// 2088  *
// 2089  * @return  uint8 - (TRUE bypass:FALSE do not bypass)
// 2090  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2091 uint8 ZDApp_LeaveCtrlBypass( void )
ZDApp_LeaveCtrlBypass:
          CFI Block cfiBlock54 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlBypass
        CODE
// 2092 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2093   uint8 bypass;
// 2094 
// 2095   if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
// 2096   {
// 2097     bypass = TRUE;
// 2098   }
// 2099   else
// 2100   {
// 2101     bypass = FALSE;
// 2102   }
// 2103 
// 2104   return bypass;
        MOV     DPTR,#ZDApp_LeaveCtrl
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        CLR     A
        RLC     A
        MOV     R1,A
        SJMP    ??Subroutine33_0
// 2105 }
          CFI EndBlock cfiBlock54
// 2106 
// 2107 /*********************************************************************
// 2108  * @fn      ZDApp_LeaveCtrlStartup
// 2109  *
// 2110  * @brief   Check for startup conditions during a leave reset.
// 2111  *
// 2112  * @param   state      - devState_t determined by leave control logic
// 2113  * @param   startDelay - startup delay
// 2114  *
// 2115  * @return  none
// 2116  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2117 void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
ZDApp_LeaveCtrlStartup:
          CFI Block cfiBlock55 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlStartup
        CODE
// 2118 {
        FUNCALL ZDApp_LeaveCtrlStartup, ZDApp_LeaveCtrlReset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2119   *startDelay = 0;
        MOV     DPL,R4
        MOV     DPH,R5
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 2120 
// 2121   if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
        MOV     DPTR,#ZDApp_LeaveCtrl
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDApp_LeaveCtrlStartup_0
// 2122   {
// 2123     if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
        MOV     C,0xE0 /* A   */.1
        JNC     ??ZDApp_LeaveCtrlStartup_1
// 2124     {
// 2125       *startDelay = LEAVE_RESET_DELAY;
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,#-0x78
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x13
        SJMP    ??ZDApp_LeaveCtrlStartup_2
// 2126     }
// 2127     else
// 2128     {
// 2129       *state = DEV_HOLD;
??ZDApp_LeaveCtrlStartup_1:
        MOV     DPL,R2
        MOV     DPH,R3
        CLR     A
??ZDApp_LeaveCtrlStartup_2:
        MOVX    @DPTR,A
// 2130     }
// 2131 
// 2132     // Reset leave control logic
// 2133     ZDApp_LeaveCtrlReset();
        ; Setup parameters for call to function ZDApp_LeaveCtrlReset
        LCALL   `??ZDApp_LeaveCtrlReset::?relay`; Banked call to: ZDApp_LeaveCtrlReset
// 2134   }
// 2135 }
??ZDApp_LeaveCtrlStartup_0:
        SJMP    ??Subroutine33_0
          CFI EndBlock cfiBlock55

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock56 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 3)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock56
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine33_0:
          CFI Block cfiBlock57 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock57
// 2136 
// 2137 /*********************************************************************
// 2138  * @fn      ZDApp_LeaveReset
// 2139  *
// 2140  * @brief   Setup a device reset due to a leave indication/confirm.
// 2141  *
// 2142  * @param   ra - reassociate flag
// 2143  *
// 2144  * @return  none
// 2145  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2146 void ZDApp_LeaveReset( uint8 ra )
ZDApp_LeaveReset:
          CFI Block cfiBlock58 Using cfiCommon0
          CFI Function ZDApp_LeaveReset
        CODE
// 2147 {
        FUNCALL ZDApp_LeaveReset, ZDApp_LeaveCtrlSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, APSME_HoldDataRequests
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, osal_clear_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, NLME_SetResponseRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, NLME_SetQueuedPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, NLME_NwkDiscTerm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 2148   ZDApp_LeaveCtrlSet( ra );
        ; Setup parameters for call to function ZDApp_LeaveCtrlSet
        LCALL   `??ZDApp_LeaveCtrlSet::?relay`; Banked call to: ZDApp_LeaveCtrlSet
// 2149 
// 2150   APSME_HoldDataRequests( LEAVE_RESET_DELAY);
        ; Setup parameters for call to function APSME_HoldDataRequests
        MOV     R2,#-0x78
        MOV     R3,#0x13
        LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
// 2151 
// 2152   if ( ZSTACK_ROUTER_BUILD )
// 2153   {
// 2154     osal_stop_timerEx( NWK_TaskID, NWK_LINK_STATUS_EVT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x0
        MOV     R3,#0x1
        MOV     DPTR,#NWK_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 2155     osal_clear_event( NWK_TaskID, NWK_LINK_STATUS_EVT );
        ; Setup parameters for call to function osal_clear_event
        MOV     R2,#0x0
        MOV     R3,#0x1
        MOV     DPTR,#NWK_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_clear_event::?relay`; Banked call to: osal_clear_event
// 2156   }
// 2157 
// 2158   if (ZG_DEVICE_ENDDEVICE_TYPE)
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_LeaveReset_0
// 2159   {
// 2160     // Save polling values to be restored after rejoin
// 2161     if ( ra == TRUE )
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??ZDApp_LeaveReset_1
// 2162     {
// 2163        ZDApp_SavedPollRate = zgPollRate;
        MOV     DPTR,#zgPollRate
        LCALL   ?XLOAD_R0123
        MOV     DPTR,#ZDApp_SavedPollRate
        LCALL   ?XSTORE_R0123
// 2164        savedResponseRate = zgResponsePollRate;
        MOV     DPTR,#zgResponsePollRate
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_32:
        MOV     DPTR,#savedResponseRate
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2165        savedQueuedPollRate = zgQueuedPollRate;
        MOV     DPTR,#zgQueuedPollRate
        LCALL   ??Subroutine36_0 & 0xFFFF
// 2166     }
??CrossCallReturnLabel_33:
        MOV     DPTR,#savedQueuedPollRate
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2167 
// 2168     // Disable polling
// 2169     NLME_SetPollRate(0);
??ZDApp_LeaveReset_1:
        ; Setup parameters for call to function NLME_SetPollRate
        MOV     DPTR,#__Constant_0
        LCALL   ?XLOAD_R2345
        LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 2170     NLME_SetResponseRate(0);
        ; Setup parameters for call to function NLME_SetResponseRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
// 2171     NLME_SetQueuedPollRate(0);
        ; Setup parameters for call to function NLME_SetQueuedPollRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
// 2172   }
// 2173 
// 2174   if ( ra == TRUE )
??ZDApp_LeaveReset_0:
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??ZDApp_LeaveReset_2
// 2175   {
// 2176     devState = DEV_NWK_DISC;
        MOV     DPTR,#devState
        MOV     A,#0x2
        MOVX    @DPTR,A
// 2177     devStartMode = MODE_REJOIN;
        MOV     DPTR,#devStartMode
        INC     A
        MOVX    @DPTR,A
// 2178     _tmpRejoinState = true;
        MOV     DPTR,#_tmpRejoinState
        MOV     A,#0x1
        LCALL   ?Subroutine12 & 0xFFFF
// 2179 
// 2180     // For rejoin, specify the extended PANID to look for
// 2181     osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
??CrossCallReturnLabel_3:
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 2182 
// 2183     _NIB.nwkState = NWK_DISC;
        MOV     DPTR,#_NIB + 35
        MOV     A,#0x2
        MOVX    @DPTR,A
// 2184      NLME_NwkDiscTerm();
        ; Setup parameters for call to function NLME_NwkDiscTerm
        LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
// 2185 
// 2186     ZDApp_NetworkInit((uint16)(NWK_START_DELAY + ((uint16) (osal_rand() & EXTENDED_JOINING_RANDOM_MASK ))));
        ; Setup parameters for call to function osal_rand
        LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV     A,R2
        ANL     A,#0x7f
        ADD     A,#0x64
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
        SJMP    ??ZDApp_LeaveReset_3
// 2187   }
// 2188   else
// 2189   {
// 2190     ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
??ZDApp_LeaveReset_2:
        ; Setup parameters for call to function ZDApp_ResetTimerStart
        MOV     R2,#-0x78
        MOV     R3,#0x13
        LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
// 2191   }
// 2192 }
??ZDApp_LeaveReset_3:
        LJMP    ??Subroutine31_0 & 0xFFFF
          CFI EndBlock cfiBlock58

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond59 Using cfiCommon0
          CFI Function ZDApp_RestoreNetworkState
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function ZDApp_LeaveReset
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-2
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker61 Using cfiCommon1
          CFI (cfiPicker61) NoFunction
          CFI (cfiPicker61) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function sAddrExtCpy
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,#(_NIB + 53) & 0xff
        MOV     R5,#((_NIB + 53) >> 8) & 0xff
        MOV     R2,#ZDO_UseExtendedPANID & 0xff
        MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        RET
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiPicker61
// 2193 
// 2194 /*********************************************************************
// 2195  * @fn      ZDApp_LeaveUpdate
// 2196  *
// 2197  * @brief   Update local device data related to leaving device.
// 2198  *
// 2199  * @param   nwkAddr        - NWK address of leaving device
// 2200  * @param   extAddr        - EXT address of leaving device
// 2201  * @param   removeChildren - remove children of leaving device
// 2202  * @param   rejoin         - if device will rejoin or not
// 2203  *
// 2204  * @return  none
// 2205  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2206 void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
ZDApp_LeaveUpdate:
          CFI Block cfiBlock62 Using cfiCommon0
          CFI Function ZDApp_LeaveUpdate
        CODE
// 2207                         uint8 removeChildren, uint8 rejoin )
// 2208 {
        FUNCALL ZDApp_LeaveUpdate, ZDSecMgrDeviceRemoveByExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, ZDSecMgrAddrClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, APSME_GetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, APSME_SearchTCLinkKeyEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, APSME_UpdateDeviceReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, APSME_UpdateDeviceReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, NLME_RemoveChild
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, RTG_RemoveRtgEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, nwkNeighborRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, AddrMgrWriteNVRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 26
        MOV     A,#-0x1a
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     ?V2,R1
// 2209   uint8 TC_ExtAddr[Z_EXTADDR_LEN];
// 2210   // Remove Apps Key for leaving device
// 2211   ZDSecMgrDeviceRemoveByExtAddr(extAddr);
        ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
// 2212 
// 2213   // Clear SECURITY bit from Address Manager
// 2214   ZDSecMgrAddrClear( extAddr );
        ; Setup parameters for call to function ZDSecMgrAddrClear
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
// 2215 
// 2216   if ( pbindRemoveDev )
        MOV     DPTR,#pbindRemoveDev
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_54:
        JZ      ??ZDApp_LeaveUpdate_0
// 2217   {
// 2218     zAddrType_t devAddr;
// 2219 
// 2220     // Remove bind entry and all related data
// 2221     devAddr.addrMode = Addr64Bit;
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
// 2222     osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,R6
        MOV     ?V5,R7
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 44)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 41)
// 2223 
// 2224     pbindRemoveDev(&devAddr);
        ; Setup parameters for indirect call
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP101_8
        MOV     DPTR,#pbindRemoveDev
        LCALL   ?Subroutine18 & 0xFFFF
// 2225   }
??CrossCallReturnLabel_76:
        LCALL   ?CALL_IND
// 2226 
// 2227   // Remove if child
// 2228   if ( ZSTACK_ROUTER_BUILD )
// 2229   {
// 2230     // Router shall notify the Trust Center that a child End Device or
// 2231     // a neighbor Router (within radius=1) has left the network
// 2232     APSME_UpdateDeviceReq_t req;
// 2233 
// 2234     // forward authorization to the Trust Center
// 2235     req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
??ZDApp_LeaveUpdate_0:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 2236     req.devAddr    = nwkAddr;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine40_0 & 0xFFFF
// 2237     req.devExtAddr = extAddr;
??CrossCallReturnLabel_69:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 2238     req.status = APSME_UD_DEVICE_LEFT;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 2239 
// 2240     if ( rejoin == FALSE )
        MOV     A,#0x29
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JNZ     ??ZDApp_LeaveUpdate_1
// 2241     {
// 2242       if(!APSME_IsDistributedSecurity())
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL   `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV     A,R1
        JNZ     ??ZDApp_LeaveUpdate_1
// 2243       {
// 2244         if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 2245         {
// 2246           uint8 found;
// 2247           APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
        ; Setup parameters for call to function APSME_GetRequest
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP102_8
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#-0x55
        LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
// 2248           
// 2249           APSME_SearchTCLinkKeyEntry(extAddr,&found,NULL);
        ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
        CLR     A
        MOV     ?V4,A
        MOV     ?V5,A
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP102_8
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 41)
// 2250           
// 2251           // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
// 2252           // un-encrypted and one APS encrypted, to make sure that it can interoperate
// 2253           // with legacy Coordinator devices which can only handle one or the other.
// 2254           if ( ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY) && ( found == FALSE ) )
        MOV     DPTR,#zgApsLinkKeyType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_LeaveUpdate_2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JNZ     ??ZDApp_LeaveUpdate_2
// 2255           {
// 2256             req.apsSecure = FALSE;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 2257 
// 2258             // send and APSME_UPDATE_DEVICE request to the trust center
// 2259             APSME_UpdateDeviceReq( &req );
        ; Setup parameters for call to function APSME_UpdateDeviceReq
        INC     A
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
// 2260           }
// 2261 
// 2262           // send the message APS encrypted
// 2263           req.apsSecure = TRUE;
??ZDApp_LeaveUpdate_2:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 2264 
// 2265           // send and APSME_UPDATE_DEVICE request to the trust center
// 2266           APSME_UpdateDeviceReq( &req );
        ; Setup parameters for call to function APSME_UpdateDeviceReq
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
// 2267         }
// 2268         else
// 2269         {
// 2270           req.apsSecure = FALSE;
// 2271 
// 2272           // send and APSME_UPDATE_DEVICE request to the trust center
// 2273           APSME_UpdateDeviceReq( &req );
// 2274         }
// 2275       }
// 2276     }
// 2277 
// 2278     NLME_RemoveChild( extAddr, removeChildren );
??ZDApp_LeaveUpdate_1:
        ; Setup parameters for call to function NLME_RemoveChild
        MOV     R1,?V2
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??NLME_RemoveChild::?relay`; Banked call to: NLME_RemoveChild
// 2279   }
// 2280 
// 2281   // Remove Routing table related entry
// 2282   RTG_RemoveRtgEntry( nwkAddr, 0 );
        ; Setup parameters for call to function RTG_RemoveRtgEntry
        MOV     R1,#0x0
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
// 2283 
// 2284   // Remove entry from neighborTable
// 2285   nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
        ; Setup parameters for call to function nwkNeighborRemove
        MOV     DPTR,#_NIB + 33
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??nwkNeighborRemove::?relay`; Banked call to: nwkNeighborRemove
// 2286 
// 2287   // Schedule to save data to NV
// 2288   ZDApp_NwkWriteNVRequest();
        ; Setup parameters for call to function AddrMgrWriteNVRequest
        LCALL   `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
// 2289 }
        MOV     A,#0x1a
        LJMP    ??Subroutine32_0 & 0xFFFF
          CFI EndBlock cfiBlock62
// 2290 
// 2291 /*********************************************************************
// 2292  * @fn      ZDApp_NetworkDiscoveryReq
// 2293  *
// 2294  * @brief   Request a network discovery.
// 2295  *
// 2296  * @param  scanChannels -
// 2297  * @param  scanDuration -
// 2298  *
// 2299  * @return  ZStatus_t
// 2300  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2301 ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
ZDApp_NetworkDiscoveryReq:
          CFI Block cfiBlock63 Using cfiCommon0
          CFI Function ZDApp_NetworkDiscoveryReq
        CODE
// 2302 {
        FUNCALL ZDApp_NetworkDiscoveryReq, NLME_NetworkDiscoveryRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 2303   // Setup optional filters - tbd
// 2304 
// 2305   // Request NLME network discovery
// 2306   return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
        ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
        LCALL   `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
        SJMP    ??Subroutine35_0
// 2307 }
          CFI EndBlock cfiBlock63
// 2308 
// 2309 /*********************************************************************
// 2310  * @fn      ZDApp_JoinReq
// 2311  *
// 2312  * @brief   Request the device to join a parent in a network.
// 2313  *
// 2314  * @param   channel -
// 2315  * @param   panID -
// 2316  *
// 2317  * @return  ZStatus_t
// 2318  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiBlock64 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x4
          CFI EndBlock cfiBlock64
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine34_0:
          CFI Block cfiBlock65 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock65
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine35_0:
          CFI Block cfiBlock66 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock66

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2319 ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
ZDApp_JoinReq:
          CFI Block cfiBlock67 Using cfiCommon0
          CFI Function ZDApp_JoinReq
        CODE
// 2320                          uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
// 2321 {
        FUNCALL ZDApp_JoinReq, ZDApp_NodeProfileSync
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_JoinReq, NLME_JoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V2,R1
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 2322   // Sync up the node with the stack profile (In the case where a pro device
// 2323   // joins a non-pro network, or verse versa)
// 2324   ZDApp_NodeProfileSync( stackProfile);
        ; Setup parameters for call to function ZDApp_NodeProfileSync
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
// 2325 
// 2326   // Request NLME Join Request
// 2327   return NLME_JoinRequest(extendedPanID, panID,channel,
// 2328                           ZDO_Config_Node_Descriptor.CapabilityFlags,
// 2329                           chosenParent, parentDepth);
        ; Setup parameters for call to function NLME_JoinRequest
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     R0,#?V3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     R0,#?V3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R1,?V2
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
        SJMP    ?Subroutine7
// 2330 
// 2331 }
          CFI EndBlock cfiBlock67
// 2332 
// 2333 /*********************************************************************
// 2334  * @fn      ZDApp_DeviceConfigured
// 2335  *
// 2336  * @brief   Check to see if the local device is configured (i.e., part
// 2337  *          of a network).
// 2338  *
// 2339  * @param   none
// 2340  *
// 2341  * @return  TRUE if configured. FALSE, otherwise.
// 2342  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2343 uint8 ZDApp_DeviceConfigured( void )
ZDApp_DeviceConfigured:
          CFI Block cfiBlock68 Using cfiCommon0
          CFI Function ZDApp_DeviceConfigured
        CODE
// 2344 {
        FUNCALL ZDApp_DeviceConfigured, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 2345   uint16 nwkAddr = INVALID_NODE_ADDR;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        LCALL   ?Subroutine9 & 0xFFFF
// 2346 
// 2347   osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
// 2348                 sizeof( uint16), &nwkAddr );
??CrossCallReturnLabel_1:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x14
        MOV     R5,#0x0
        MOV     R2,#0x21
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 2349 
// 2350   // Does the NIB have anything more than default?
// 2351   return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_DeviceConfigured_0
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_DeviceConfigured_0:
        JNZ     ??ZDApp_DeviceConfigured_1
        MOV     R1,#0x0
        SJMP    ??ZDApp_DeviceConfigured_2
??ZDApp_DeviceConfigured_1:
        MOV     R1,#0x1
??ZDApp_DeviceConfigured_2:
        MOV     A,#0x2
        LJMP    ??Subroutine30_0 & 0xFFFF
// 2352 }
          CFI EndBlock cfiBlock68

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond69 Using cfiCommon0
          CFI Function ZDApp_StoreNwkSecMaterial
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function ZDApp_DeviceConfigured
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-2
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker71 Using cfiCommon1
          CFI (cfiPicker71) NoFunction
          CFI (cfiPicker71) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_nv_write
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiPicker71
// 2353 
// 2354 /*********************************************************************
// 2355  * CALLBACK FUNCTIONS
// 2356  */
// 2357 
// 2358 
// 2359 /*********************************************************************
// 2360  * @fn      ZDApp_SendEventMsg()
// 2361  *
// 2362  * @brief
// 2363  *
// 2364  *   Sends a Network Join message
// 2365  *
// 2366  * @param  cmd - command ID
// 2367  * @param  len - length (in bytes) of the buf field
// 2368  * @param  buf - buffer for the rest of the message.
// 2369  *
// 2370  * @return  none
// 2371  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2372 void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
ZDApp_SendEventMsg:
          CFI Block cfiBlock72 Using cfiCommon0
          CFI Function ZDApp_SendEventMsg
        CODE
// 2373 {
        FUNCALL ZDApp_SendEventMsg, ZDApp_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
// 2374   ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV     R3,A
        MOV     A,R6
        MOV     R2,A
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
// 2375 }
        LJMP    ??Subroutine29_0 & 0xFFFF
          CFI EndBlock cfiBlock72
// 2376 
// 2377 /*********************************************************************
// 2378  * @fn      ZDApp_SendMsg()
// 2379  *
// 2380  * @brief   Sends a OSAL message
// 2381  *
// 2382  * @param  taskID - Where to send the message
// 2383  * @param  cmd - command ID
// 2384  * @param  len - length (in bytes) of the buf field
// 2385  * @param  buf - buffer for the rest of the message.
// 2386  *
// 2387  * @return  none
// 2388  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2389 void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
ZDApp_SendMsg:
          CFI Block cfiBlock73 Using cfiCommon0
          CFI Function ZDApp_SendMsg
        CODE
// 2390 {
        FUNCALL ZDApp_SendMsg, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendMsg, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendMsg, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        MOV     A,#-0x13
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 0
        MOV     ?V4,R1
        MOV     ?V6,R2
        MOV     ?V5,R3
        MOV     ?V2,R4
        MOV     ?V3,R5
// 2391   osal_event_hdr_t *msgPtr;
// 2392 
// 2393   // Send the address to the task
// 2394   msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
        MOV     R6,?V5
        ; Setup parameters for call to function osal_msg_allocate
        MOV     A,R6
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V0,R2
        MOV     ?V1,R3
// 2395   if ( msgPtr )
        MOV     A,R2
        ORL     A,?V1
        JZ      ??ZDApp_SendMsg_0
// 2396   {
// 2397     if ( (len > 0) && (buf != NULL) )
        MOV     A,R6
        JZ      ??ZDApp_SendMsg_1
        MOV     A,?V2
        ORL     A,?V3
        JZ      ??ZDApp_SendMsg_1
// 2398       osal_memcpy( msgPtr, buf, len );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V8,?V2
        MOV     ?V9,?V3
        MOV     ?V10,#0x0
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R6
        MOV     R4,A
        MOV     R5,#0x0
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 2399 
// 2400     msgPtr->event = cmd;
??ZDApp_SendMsg_1:
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOV     A,?V6
        MOVX    @DPTR,A
// 2401     osal_msg_send( taskID, (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R1,?V4
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
// 2402   }
// 2403 }
??ZDApp_SendMsg_0:
        MOV     R7,#0xb
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock73
// 2404 
// 2405 /*********************************************************************
// 2406  * Call Back Functions from NWK  - API
// 2407  */
// 2408 
// 2409 /*********************************************************************
// 2410  * @fn          ZDO_NetworkDiscoveryConfirmCB
// 2411  *
// 2412  * @brief       This function returns a choice of PAN to join.
// 2413  *
// 2414  * @param       status - return status of the nwk discovery confirm
// 2415  *
// 2416  * @return      ZStatus_t
// 2417  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2418 ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
ZDO_NetworkDiscoveryConfirmCB:
          CFI Block cfiBlock74 Using cfiCommon0
          CFI Function ZDO_NetworkDiscoveryConfirmCB
        CODE
// 2419 {
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 3, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 3, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 3)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 2420   osal_event_hdr_t msg;
// 2421 
// 2422   // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
// 2423   // Send ZDO_MGMT_NWK_DISC_RSP back
// 2424 #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
// 2425   if ( zdappMgmtNwkDiscReqInProgress )
// 2426   {
// 2427     zdappMgmtNwkDiscReqInProgress = false;
// 2428     ZDO_FinishProcessingMgmtNwkDiscReq();
// 2429   }
// 2430   else
// 2431 #endif
// 2432   {
// 2433     // Pass the confirm to another task if it registers the callback
// 2434     // Otherwise, pass the confirm to ZDApp.
// 2435     if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
        MOV     DPTR,#zdoCBFunc + 4
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_4:
        JZ      ??ZDO_NetworkDiscoveryConfirmCB_0
// 2436     {
// 2437       zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
        ; Setup parameters for indirect call
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   ?CALL_IND
        SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
// 2438     }
// 2439     else
// 2440     {
// 2441       // Otherwise, send scan confirm to ZDApp task to proceed
// 2442       msg.status = ZDO_SUCCESS;
??ZDO_NetworkDiscoveryConfirmCB_0:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 2443 
// 2444       ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
        ; Setup parameters for call to function ZDApp_SendMsg
        INC     A
        LCALL   ?XSTACK_DISP102_8
        MOV     R3,#0x2
        MOV     R2,#0x1
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
// 2445     }
// 2446   }
// 2447   return (ZSuccess);
??ZDO_NetworkDiscoveryConfirmCB_1:
        MOV     R1,#0x0
        MOV     A,#0x3
        LJMP    ?Subroutine3 & 0xFFFF
// 2448 }  // ZDO_NetworkDiscoveryConfirmCB
          CFI EndBlock cfiBlock74
// 2449 
// 2450 /*********************************************************************
// 2451  * @fn          ZDApp_NwkDescListProcessing
// 2452  *
// 2453  * @brief       This function process the network discovery result and select
// 2454  *              a parent device to join itself.
// 2455  *
// 2456  * @param       none
// 2457  *
// 2458  * @return      ZStatus_t
// 2459  */
// 2460 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2461 networkDesc_t* ZDApp_NwkDescListProcessing(void)
ZDApp_NwkDescListProcessing:
          CFI Block cfiBlock75 Using cfiCommon0
          CFI Function ZDApp_NwkDescListProcessing
        CODE
// 2462 {
        FUNCALL ZDApp_NwkDescListProcessing, nwk_getNwkDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkDescListProcessing, nwk_getNwkDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkDescListProcessing, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkDescListProcessing, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkDescListProcessing, nwk_desc_list_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
// 2463   networkDesc_t *pNwkDesc;
// 2464   uint8 i, ResultCount = 0;
        MOV     ?V1,#0x0
// 2465   uint8 stackProfile;
// 2466   uint8 stackProfilePro;
// 2467   uint8 selected;
// 2468 
// 2469   // Count the number of nwk descriptors in the list
// 2470   pNwkDesc = nwk_getNwkDescList();
        ; Setup parameters for call to function nwk_getNwkDescList
        LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
        SJMP    ??CrossCallReturnLabel_65
// 2471   while (pNwkDesc)
// 2472   {
// 2473     ResultCount++;
??ZDApp_NwkDescListProcessing_0:
        INC     ?V1
// 2474     pNwkDesc = pNwkDesc->nextDesc;
        LCALL   ?Subroutine19 & 0xFFFF
// 2475   }
??CrossCallReturnLabel_65:
        MOV     A,R6
        ORL     A,R7
        JNZ     ??ZDApp_NwkDescListProcessing_0
// 2476 
// 2477   // process discovery results
// 2478   stackProfilePro = FALSE;
        MOV     ?V0,#0x0
// 2479   selected = FALSE;
// 2480 
// 2481 
// 2482   for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
        MOV     ?V2,#0x0
// 2483   {
// 2484     pNwkDesc = nwk_getNwkDescList();
??ZDApp_NwkDescListProcessing_1:
        ; Setup parameters for call to function nwk_getNwkDescList
        LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R6,?V4
        MOV     R7,?V5
// 2485     for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
        MOV     ?V3,#0x0
        SJMP    ??CrossCallReturnLabel_66
// 2486     {
// 2487        if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
// 2488       {
// 2489         // If the extended Pan ID is commissioned to a non zero value
// 2490         // Only join the Pan that has match EPID
// 2491         if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
// 2492           continue;
// 2493 
// 2494       }
// 2495       else if ( zgConfigPANID != 0xFFFF )
// 2496       {
// 2497         // PAN Id is preconfigured. check if it matches
// 2498         if ( pNwkDesc->panId != zgConfigPANID )
// 2499           continue;
// 2500       }
// 2501 
// 2502       if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
// 2503       {
// 2504         // check that network is allowing joining
// 2505         if ( ZSTACK_ROUTER_BUILD )
// 2506         {
// 2507           if ( stackProfilePro == FALSE )
// 2508           {
// 2509             if ( !pNwkDesc->routerCapacity )
// 2510             {
// 2511               continue;
// 2512             }
// 2513           }
// 2514           else
// 2515           {
// 2516             if ( !pNwkDesc->deviceCapacity )
// 2517             {
// 2518               continue;
// 2519             }
// 2520           }
// 2521         }
// 2522         else if ( ZSTACK_END_DEVICE_BUILD )
// 2523         {
// 2524           if ( !pNwkDesc->deviceCapacity )
// 2525           {
// 2526             continue;
// 2527           }
// 2528         }
// 2529       }
// 2530 
// 2531       // check version of zigbee protocol
// 2532       if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
// 2533         continue;
// 2534 
// 2535       // check version of stack profile
// 2536       if ( pNwkDesc->stackProfile != zgStackProfile  )
// 2537       {
// 2538         if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
// 2539             || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
??ZDApp_NwkDescListProcessing_2:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_NwkDescListProcessing_3
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??ZDApp_NwkDescListProcessing_3
// 2540         {
// 2541           stackProfilePro = TRUE;
??ZDApp_NwkDescListProcessing_4:
        MOV     ?V0,#0x1
// 2542         }
// 2543 
// 2544         if ( stackProfile == 0 )
??ZDApp_NwkDescListProcessing_3:
        MOV     A,?V2
        JZ      $+5
        LJMP    ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
??ZDApp_NwkDescListProcessing_6:
        INC     ?V3
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV     A,?V3
        CLR     C
        SUBB    A,?V1
        JC      $+5
        LJMP    ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV     R2,#ZDO_UseExtendedPANID & 0xff
        MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDApp_NwkDescListProcessing_8
        ; Setup parameters for call to function sAddrExtCmp
        MOV     A,R6
        ADD     A,#0xb
        MOV     R4,A
        CLR     A
        ADDC    A,R7
        MOV     R5,A
        MOV     R2,#ZDO_UseExtendedPANID & 0xff
        MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV     A,R1
        JNZ     ??ZDApp_NwkDescListProcessing_9
        SJMP    ??ZDApp_NwkDescListProcessing_6
??ZDApp_NwkDescListProcessing_8:
        MOV     DPTR,#zgConfigPANID
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??ZDApp_NwkDescListProcessing_10
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_NwkDescListProcessing_10:
        JZ      ??ZDApp_NwkDescListProcessing_9
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_34:
        MOV     DPTR,#zgConfigPANID
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDApp_NwkDescListProcessing_11
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDApp_NwkDescListProcessing_11:
        JNZ     ??ZDApp_NwkDescListProcessing_6
??ZDApp_NwkDescListProcessing_9:
        MOV     DPTR,#_NIB + 23
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDApp_NwkDescListProcessing_12
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDApp_NwkDescListProcessing_12:
        JNZ     ??ZDApp_NwkDescListProcessing_13
        MOV     A,#-0x2
        XRL     A,R0
        JNZ     ??ZDApp_NwkDescListProcessing_14
        MOV     A,#-0x1
        XRL     A,R1
??ZDApp_NwkDescListProcessing_14:
        JNZ     ??ZDApp_NwkDescListProcessing_15
??ZDApp_NwkDescListProcessing_13:
        MOV     A,?V0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        JNZ     ??ZDApp_NwkDescListProcessing_16
        MOVX    A,@DPTR
        JNZ     ??ZDApp_NwkDescListProcessing_15
        LJMP    ??ZDApp_NwkDescListProcessing_6 & 0xFFFF
??ZDApp_NwkDescListProcessing_16:
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??ZDApp_NwkDescListProcessing_6 & 0xFFFF
??ZDApp_NwkDescListProcessing_15:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#_NIB + 17
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      $+5
        LJMP    ??ZDApp_NwkDescListProcessing_6 & 0xFFFF
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#zgStackProfile
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      ??ZDApp_NwkDescListProcessing_5
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
        MOV     A,#0x2
        XRL     A,R0
        JZ      $+5
        LJMP    ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
        LJMP    ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
// 2545         {
// 2546           continue;
// 2547         }
// 2548       }
// 2549 
// 2550       break;
// 2551     }
// 2552 
// 2553     if (i < ResultCount)
// 2554     {
// 2555      selected = TRUE;
// 2556       break;
// 2557     }
// 2558 
// 2559     // break if selected or stack profile pro wasn't found
// 2560     if ( (selected == TRUE) || (stackProfilePro == FALSE) )
??ZDApp_NwkDescListProcessing_7:
        MOV     A,?V0
        JZ      ??ZDApp_NwkDescListProcessing_17
// 2561     {
// 2562       break;
// 2563     }
// 2564   }
        INC     ?V2
        MOV     A,?V2
        CLR     C
        SUBB    A,#0x2
        JNC     $+5
        LJMP    ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
// 2565 
// 2566   if ( i == ResultCount )
??ZDApp_NwkDescListProcessing_17:
        MOV     A,?V1
        XRL     A,?V3
        JNZ     ??ZDApp_NwkDescListProcessing_5
// 2567   {
// 2568     nwk_desc_list_free();
        ; Setup parameters for call to function nwk_desc_list_free
        LCALL   `??nwk_desc_list_free::?relay`; Banked call to: nwk_desc_list_free
// 2569     return (NULL);   // couldn't find appropriate PAN to join !
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??ZDApp_NwkDescListProcessing_18
// 2570   }
// 2571   else
// 2572   {
// 2573     return (pNwkDesc);
??ZDApp_NwkDescListProcessing_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
// 2574   }
??ZDApp_NwkDescListProcessing_18:
        LJMP    ?Subroutine1 & 0xFFFF
// 2575 }
          CFI EndBlock cfiBlock75
// 2576 
// 2577 /*********************************************************************
// 2578  * @fn          ZDO_NetworkFormationConfirmCB
// 2579  *
// 2580  * @brief       This function reports the results of the request to
// 2581  *              initialize a coordinator in a network.
// 2582  *
// 2583  * @param       Status - Result of NLME_NetworkFormationRequest()
// 2584  *
// 2585  * @return      none
// 2586  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2587 void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
ZDO_NetworkFormationConfirmCB:
          CFI Block cfiBlock76 Using cfiCommon0
          CFI Function ZDO_NetworkFormationConfirmCB
        CODE
// 2588 {
        FUNCALL ZDO_NetworkFormationConfirmCB, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, NLME_SetAssocFlags
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, ZDApp_RestoreNwkSecMaterial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, ZDSecMgrGenerateRndKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, bdb_nwkFormationAttempt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 17
        MOV     A,#-0x11
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,R1
// 2589   nwkStatus = (byte)Status;
        MOV     DPTR,#nwkStatus
        MOVX    @DPTR,A
// 2590 
// 2591   if ( Status == ZSUCCESS )
        JZ      $+5
        LJMP    ??ZDO_NetworkFormationConfirmCB_0 & 0xFFFF
// 2592   {
// 2593     bdb_setNodeIsOnANetwork(TRUE);
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV     R1,#0x1
        LCALL   `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
// 2594     
// 2595     if(ZG_DEVICE_COORDINATOR_TYPE)
// 2596     {
// 2597       // LED on shows Coordinator started
// 2598       zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
// 2599 
// 2600       zdoHalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
// 2601 
// 2602         #if defined ( ZBIT )
// 2603             SIM_SetColor(0xd0ffd0);
// 2604         #endif
// 2605 
// 2606       if ( devState == DEV_HOLD )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JNZ     ??ZDO_NetworkFormationConfirmCB_1
// 2607       {
// 2608         ZDApp_ChangeState( DEV_COORD_STARTING );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV     R1,#0x8
        LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 2609       }
// 2610     }
// 2611 
// 2612     if(ZG_DEVICE_RTR_TYPE)
??ZDO_NetworkFormationConfirmCB_1:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??ZDO_NetworkFormationConfirmCB_2
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDO_NetworkFormationConfirmCB_0 & 0xFFFF
// 2613     {
// 2614       uint8 x;
// 2615       uint8 tmpKey[SEC_KEY_LEN] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
??ZDO_NetworkFormationConfirmCB_2:
        MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x10
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 2616       
// 2617       if(APSME_IsDistributedSecurity())
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL   `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV     A,R1
        JNZ     $+5
        LJMP    ??ZDO_NetworkFormationConfirmCB_0 & 0xFFFF
// 2618       {
// 2619         //Check if we have an extended PANID assigned
// 2620         if(nwk_ExtPANIDValid( _NIB.extendedPANID ) == false)
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV     R2,#(_NIB + 53) & 0xff
        MOV     R3,#((_NIB + 53) >> 8) & 0xff
        LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
        MOV     A,R1
        JNZ     ??ZDO_NetworkFormationConfirmCB_3
// 2621         {
// 2622           //Set the extended PANID as the extended address
// 2623           osal_cpyExtAddr( _NIB.extendedPANID, aExtendedAddress );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,#aExtendedAddress & 0xff
        MOV     R5,#(aExtendedAddress >> 8) & 0xff
        MOV     R2,#(_NIB + 53) & 0xff
        MOV     R3,#((_NIB + 53) >> 8) & 0xff
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 2624         } 
// 2625         
// 2626         ZMacSetReq(MAC_SUPERFRAME_PAN_COORD,0);
??ZDO_NetworkFormationConfirmCB_3:
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#-0x10
        LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
// 2627         
// 2628         //Set the MAC address
// 2629         ZMacSetReq( ZMacShortAddress, (uint8 *)&(_NIB.nwkDevAddress) );
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,#(_NIB + 20) & 0xff
        MOV     R3,#((_NIB + 20) >> 8) & 0xff
        MOV     R1,#0x53
        LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
// 2630 
// 2631         if ( _NIB.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
// 2632           x = true;
// 2633         else
// 2634           x = false;
        MOV     DPTR,#_NIB + 14
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JNC     ??ZDO_NetworkFormationConfirmCB_4
        SETB    B.0
        SJMP    ??ZDO_NetworkFormationConfirmCB_5
??ZDO_NetworkFormationConfirmCB_4:
        CLR     B.0
??ZDO_NetworkFormationConfirmCB_5:
        MOV     C,B.0
        CLR     A
        RLC     A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 2635         ZMacSetReq( ZMacRxOnIdle, &x );
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x52
        LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
// 2636 
// 2637         // Change NIB state to router for restore
// 2638         _NIB.nwkState = NWK_ROUTER;
        MOV     DPTR,#_NIB + 35
        MOV     A,#0x8
        MOVX    @DPTR,A
// 2639         NLME_SetAssocFlags();
        ; Setup parameters for call to function NLME_SetAssocFlags
        LCALL   `??NLME_SetAssocFlags::?relay`; Banked call to: NLME_SetAssocFlags
// 2640 
// 2641         //Restore the nwk security material using the generic index
// 2642         ZDApp_RestoreNwkSecMaterial();
        ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
        LCALL   `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
// 2643         
// 2644         //Be sure to store the nwk FrameCounter if
// 2645         if(nwkFrameCounter == 0)
        MOV     DPTR,#nwkFrameCounter
        LCALL   ?XLOAD_R0123
        MOV     A,R0
        ORL     A,R1
        ORL     A,R2
        ORL     A,R3
        JNZ     ??ZDO_NetworkFormationConfirmCB_6
// 2646         {
// 2647           nwkFrameCounter = 1;
        MOV     DPTR,#nwkFrameCounter
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 2648         }
// 2649         
// 2650         osal_set_event(ZDAppTaskID, ZDO_NWK_UPDATE_NV | ZDO_FRAMECOUNTER_CHANGE);
??ZDO_NetworkFormationConfirmCB_6:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x0
        MOV     R3,#0x3
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
// 2651         
// 2652         ZDSecMgrGenerateRndKey(tmpKey);
        ; Setup parameters for call to function ZDSecMgrGenerateRndKey
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??ZDSecMgrGenerateRndKey::?relay`; Banked call to: ZDSecMgrGenerateRndKey
// 2653          
// 2654         //Set the nwk key as the default and initialize the keySeqNum
// 2655         SSP_UpdateNwkKey( tmpKey, 0 );
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV     R1,#0x0
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
// 2656         if ( !_NIB.nwkKeyLoaded )
        MOV     DPTR,#_NIB + 61
        MOVX    A,@DPTR
        JNZ     ??ZDO_NetworkFormationConfirmCB_7
// 2657         {
// 2658           SSP_SwitchNwkKey( 0 );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     R1,#0x0
        LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
// 2659         }
// 2660         
// 2661         // Clear copy in RAM after use 
// 2662         osal_memset(tmpKey,0,SEC_KEY_LEN);
??ZDO_NetworkFormationConfirmCB_7:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2663         
// 2664         //Success formation of distributed nwk
// 2665         bdb_nwkFormationAttempt(TRUE);
        ; Setup parameters for call to function bdb_nwkFormationAttempt
        MOV     R1,#0x1
        LCALL   `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
// 2666       }
// 2667     }
// 2668   }
// 2669 
// 2670   else
// 2671   {
// 2672     #if defined(BLINK_LEDS)
// 2673       zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
// 2674     #endif
// 2675   }
// 2676 
// 2677 
// 2678   osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
??ZDO_NetworkFormationConfirmCB_0:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
// 2679 }
        MOV     A,#0x11
        LJMP    ??Subroutine28_0 & 0xFFFF
          CFI EndBlock cfiBlock76
// 2680 
// 2681 /****************************************************************************
// 2682  * @fn          ZDApp_beaconIndProcessing
// 2683  *
// 2684  * @brief       This function processes the incoming beacon indication.
// 2685  *
// 2686  *              When another task (MT or App) is registered to process
// 2687  *              beacon indication themselves, this function will parse the
// 2688  *              beacon payload and pass the beacon descriptor to that task
// 2689  *              If no other tasks registered, this function will process
// 2690  *              the beacon payload and generate the network descriptor link
// 2691  *              list.
// 2692  *
// 2693  * @param
// 2694  *
// 2695  * @return      none
// 2696  *
// 2697  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2698 void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
ZDO_beaconNotifyIndCB:
          CFI Block cfiBlock77 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
        CODE
// 2699 {
        FUNCALL ZDO_beaconNotifyIndCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_beaconNotifyIndCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_beaconNotifyIndCB, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_beaconNotifyIndCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_beaconNotifyIndCB, bdb_isDeviceNonFactoryNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
// 2700   // Pass the beacon Indication to another task if it registers the callback
// 2701   // Otherwise, process the beacon notification here.
// 2702   if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
        MOV     DPTR,#zdoCBFunc + 6
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_5:
        JZ      ??ZDO_beaconNotifyIndCB_0
// 2703   {
// 2704     zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
        ; Setup parameters for indirect call
        LCALL   ?CALL_IND
        LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
// 2705   }
// 2706   else
// 2707   {
// 2708     networkDesc_t *pNwkDesc;
// 2709     networkDesc_t *pLastNwkDesc;
// 2710     uint8 found = false;
// 2711 
// 2712     // Add the network to the Network Descriptor List
// 2713     pNwkDesc = NwkDescList;
??ZDO_beaconNotifyIndCB_0:
        MOV     DPTR,#NwkDescList
        LCALL   ??Subroutine39_0 & 0xFFFF
// 2714     pLastNwkDesc = NwkDescList;
??CrossCallReturnLabel_62:
        MOV     DPTR,#NwkDescList
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     A,R2
        ADD     A,#0x4
        MOV     ?V6,A
        CLR     A
        ADDC    A,?V1
        MOV     ?V7,A
        MOV     A,R2
        ADD     A,#0x2
        MOV     ?V4,A
        CLR     A
        ADDC    A,?V1
        MOV     ?V5,A
        SJMP    ??CrossCallReturnLabel_67
// 2715     while (pNwkDesc)
// 2716     {
// 2717       if ((pNwkDesc->panId == pBeacon->panID) &&
// 2718           (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
??ZDO_beaconNotifyIndCB_2:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_36:
        MOV     DPL,?V4
        MOV     DPH,?V5
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDO_beaconNotifyIndCB_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDO_beaconNotifyIndCB_3:
        JNZ     ??ZDO_beaconNotifyIndCB_4
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,?V6
        MOV     DPH,?V7
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      ??ZDO_beaconNotifyIndCB_5
// 2719       {
// 2720         found = true;
// 2721         break;
// 2722       }
// 2723       pLastNwkDesc = pNwkDesc;
??ZDO_beaconNotifyIndCB_4:
        MOV     ?V2,R6
        MOV     ?V3,R7
// 2724       pNwkDesc = pNwkDesc->nextDesc;
        LCALL   ?Subroutine19 & 0xFFFF
// 2725     }
??CrossCallReturnLabel_67:
        MOV     A,R6
        ORL     A,R7
        JNZ     ??ZDO_beaconNotifyIndCB_2
// 2726 
// 2727     // If no existing descriptor found, make a new one and add to the list
// 2728     if (found == false)
// 2729     {
// 2730       pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x16
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     R6,?V8
        MOV     R7,?V9
// 2731       if ( !pNwkDesc )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
// 2732       {
// 2733         // Memory alloc failed, discard this beacon
// 2734         return;
// 2735       }
// 2736 
// 2737       // Clear the network descriptor
// 2738       osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x16
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2739 
// 2740       // Initialize the descriptor
// 2741       pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
// 2742       pNwkDesc->chosenRouterDepth = 0xFF;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
// 2743 
// 2744       // Save new entry into the descriptor list
// 2745       if ( !NwkDescList )
        MOV     DPTR,#NwkDescList
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_55:
        JNZ     ??ZDO_beaconNotifyIndCB_6
// 2746       {
// 2747         NwkDescList = pNwkDesc;
        MOV     DPTR,#NwkDescList
        SJMP    ??ZDO_beaconNotifyIndCB_7
// 2748       }
// 2749       else
// 2750       {
// 2751         pLastNwkDesc->nextDesc = pNwkDesc;
??ZDO_beaconNotifyIndCB_6:
        MOV     A,?V2
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,?V3
        MOV     DPH,A
??ZDO_beaconNotifyIndCB_7:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 2752       }
// 2753     }
// 2754 
// 2755     // Update the descriptor with the incoming beacon
// 2756     pNwkDesc->stackProfile   = pBeacon->stackProfile;
??ZDO_beaconNotifyIndCB_5:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_15:
        INC     DPTR
        MOVX    @DPTR,A
// 2757     pNwkDesc->version        = pBeacon->protocolVersion;
        MOV     A,?V0
        ADD     A,#0x8
        MOV     R0,A
        CLR     A
        ADDC    A,?V1
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_16:
        MOVX    @DPTR,A
// 2758     pNwkDesc->logicalChannel = pBeacon->logicalChannel;
        MOV     DPL,?V6
        MOV     DPH,?V7
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
// 2759     pNwkDesc->panId          = pBeacon->panID;
        MOV     DPL,?V4
        MOV     DPH,?V5
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_45:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine42_0 & 0xFFFF
// 2760     pNwkDesc->updateId       = pBeacon->updateID;
??CrossCallReturnLabel_79:
        MOV     A,?V0
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_22:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2761 
// 2762     // Save the extended PAN ID from the beacon payload only if 1.1 version network
// 2763     if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
        MOV     A,R6
        ADD     A,#0xb
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDO_beaconNotifyIndCB_8
// 2764     {
// 2765       osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,?V0
        ADD     A,#0xd
        MOV     R4,A
        CLR     A
        ADDC    A,?V1
        MOV     R5,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP    ??ZDO_beaconNotifyIndCB_9
// 2766     }
// 2767     else
// 2768     {
// 2769       osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
??ZDO_beaconNotifyIndCB_8:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#-0x1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2770     }
// 2771 
// 2772     // check if this device is a better choice to join...
// 2773     // ...dont bother checking assocPermit flag is doing a rejoin
// 2774     if ( ( pBeacon->LQI > gMIN_TREE_LQI ) &&
// 2775         ( ( pBeacon->permitJoining == TRUE ) || ( bdb_isDeviceNonFactoryNew() ) ) )
??ZDO_beaconNotifyIndCB_9:
        MOV     A,?V0
        ADD     A,#0xa
        MOV     R0,A
        CLR     A
        ADDC    A,?V1
        MOV     R1,A
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     DPL,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#gMIN_TREE_LQI
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDO_beaconNotifyIndCB_10
        ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
        LCALL   `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
        MOV     A,R1
        JNZ     $+5
        LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
// 2776     {
// 2777       uint8 selected = FALSE;
??ZDO_beaconNotifyIndCB_10:
        MOV     ?V6,#0x0
// 2778       uint8 capacity = FALSE;
// 2779 
// 2780 #if defined ( ZIGBEEPRO )
// 2781       if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
// 2782             (pBeacon->depth < MAX_NODE_DEPTH)) ||
// 2783           ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
// 2784            (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     ?V4,A
        MOV     A,R6
        ADD     A,#0x9
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     A,R6
        ADD     A,#0xa
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        MOV     A,?V0
        ADD     A,#0xb
        MOV     R4,A
        CLR     A
        ADDC    A,?V1
        MOV     R5,A
        MOV     A,?V5
        CLR     C
        SUBB    A,?V4
        JNC     ??ZDO_beaconNotifyIndCB_11
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x14
        JC      ??ZDO_beaconNotifyIndCB_12
        SJMP    ??ZDO_beaconNotifyIndCB_13
??ZDO_beaconNotifyIndCB_11:
        MOV     A,?V5
        XRL     A,?V4
        JNZ     ??ZDO_beaconNotifyIndCB_13
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V4,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,?V4
        JNC     ??ZDO_beaconNotifyIndCB_13
// 2785       {
// 2786         selected = TRUE;
??ZDO_beaconNotifyIndCB_12:
        MOV     ?V6,#0x1
// 2787       }
// 2788 #else
// 2789       if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
// 2790       {
// 2791         selected = TRUE;
// 2792       }
// 2793 #endif
// 2794 
// 2795       if ( ZSTACK_ROUTER_BUILD )
// 2796       {
// 2797         capacity = pBeacon->routerCapacity;
// 2798       }
// 2799       else if ( ZSTACK_END_DEVICE_BUILD )
// 2800       {
// 2801         capacity = pBeacon->deviceCapacity;
// 2802       }
// 2803 
// 2804       if ( ( (capacity) || ( pBeacon->sourceAddr == _NIB.nwkCoordAddress ) ) && (selected) )
??ZDO_beaconNotifyIndCB_13:
        MOV     A,?V0
        ADD     A,#0x6
        MOV     ?V4,A
        CLR     A
        ADDC    A,?V1
        MOV     ?V5,A
        MOV     DPL,?V4
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     ??ZDO_beaconNotifyIndCB_14
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     ?V8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V9,A
        MOV     DPTR,#_NIB + 23
        MOVX    A,@DPTR
        XRL     A,?V8
        JNZ     ??ZDO_beaconNotifyIndCB_15
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V9
??ZDO_beaconNotifyIndCB_15:
        JNZ     ??ZDO_beaconNotifyIndCB_16
??ZDO_beaconNotifyIndCB_14:
        MOV     A,?V6
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDO_beaconNotifyIndCB_16
// 2805       {
// 2806         // this is the new chosen router for joining...
// 2807         pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     ?V6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V7,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V7
        MOVX    @DPTR,A
// 2808         pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
// 2809         pNwkDesc->chosenRouterDepth       = pBeacon->depth;
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
// 2810       }
// 2811 
// 2812       if ( pBeacon->deviceCapacity )
??ZDO_beaconNotifyIndCB_16:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZDO_beaconNotifyIndCB_17
// 2813         pNwkDesc->deviceCapacity = 1;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
// 2814 
// 2815       if ( pBeacon->routerCapacity )
??ZDO_beaconNotifyIndCB_17:
        MOV     DPL,?V4
        MOV     DPH,?V5
        MOVX    A,@DPTR
        JZ      ??ZDO_beaconNotifyIndCB_1
// 2816         pNwkDesc->routerCapacity = 1;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
// 2817     }
// 2818   }
// 2819 }
??ZDO_beaconNotifyIndCB_1:
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock77

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond78 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 54)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker80 Using cfiCommon1
          CFI (cfiPicker80) NoFunction
          CFI (cfiPicker80) Picker
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiPicker80

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond81 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-2
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker83 Using cfiCommon1
          CFI (cfiPicker83) NoFunction
          CFI (cfiPicker83) Picker
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiPicker83

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond84 Using cfiCommon0
          CFI Function ZDApp_ProcessSecMsg
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function ZDApp_InMsgCB
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-2
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker86 Using cfiCommon1
          CFI (cfiPicker86) NoFunction
          CFI (cfiPicker86) Picker
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_26:
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiPicker86
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine36_0:
          CFI Block cfiCond87 Using cfiCommon0
          CFI Function ZDApp_LeaveReset
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function ZDApp_LeaveReset
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-2
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-2
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-2
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function ZDApp_ProcessSecMsg
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function ZDApp_InMsgCB
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-2
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker94 Using cfiCommon1
          CFI (cfiPicker94) NoFunction
          CFI (cfiPicker94) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiPicker94

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond95 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
          CFI Conditional ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 54)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function ZDApp_ProcessSecMsg
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_37
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-4
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function ZDApp_InMsgCB
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_38
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-4
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker98 Using cfiCommon1
          CFI (cfiPicker98) NoFunction
          CFI (cfiPicker98) Picker
        MOV     A,R6
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiPicker98

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond99 Using cfiCommon0
          CFI Function ZDO_LeaveCnf
          CFI Conditional ??CrossCallReturnLabel_48
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function ZDO_LeaveInd
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-2
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker101 Using cfiCommon1
          CFI (cfiPicker101) NoFunction
          CFI (cfiPicker101) Picker
        MOV     DPL,R6
        MOV     DPH,R7
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiPicker101
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine37_0:
          CFI Block cfiCond102 Using cfiCommon0
          CFI Function ZDApp_SecInit
          CFI Conditional ??CrossCallReturnLabel_39
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function ZDApp_ProcessSecEvent
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function ZDApp_ProcessSecEvent
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-2
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function ZDApp_ProcessMsgCBs
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-2
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 54)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function ZDApp_ProcessMsgCBs
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 54)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function ZDApp_ProcessMsgCBs
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-2
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 54)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-2
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function ZDO_JoinConfirmCB
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-2
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function ZDO_JoinConfirmCB
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-2
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function ZDO_LeaveCnf
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-2
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function ZDO_LeaveInd
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-2
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker113 Using cfiCommon1
          CFI (cfiPicker113) NoFunction
          CFI (cfiPicker113) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiPicker113

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond114 Using cfiCommon0
          CFI Function ZDApp_SecInit
          CFI Conditional ??CrossCallReturnLabel_59
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function ZDApp_ProcessSecEvent
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-2
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function ZDO_JoinIndicationCB
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-2
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker117 Using cfiCommon1
          CFI (cfiPicker117) NoFunction
          CFI (cfiPicker117) Picker
        MOV     DPTR,#ZDApp_NewDeviceList
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiPicker117
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine38_0:
          CFI Block cfiCond118 Using cfiCommon0
          CFI Function ZDApp_RestoreNetworkState
          CFI Conditional ??CrossCallReturnLabel_50
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function ZDApp_ProcessOSALMsg
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond119) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond119) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond119) CFA_SP SP+-7
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function ZDApp_ProcessMsgCBs
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+-2
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 54)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function ZDApp_ProcessSecMsg
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-2
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function ZDApp_LeaveUpdate
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-2
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-2
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function ZDO_JoinConfirmCB
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-2
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function ZDO_JoinIndicationCB
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-2
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function ZDO_SrcRtgIndCB
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-2
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function ZDApp_SecInit
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-2
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function ZDApp_ProcessSecEvent
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond128) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond128) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-2
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function ZDO_JoinIndicationCB
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-2
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker130 Using cfiCommon1
          CFI (cfiPicker130) NoFunction
          CFI (cfiPicker130) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiPicker130
// 2820 
// 2821 /*********************************************************************
// 2822  * @fn          ZDO_StartRouterConfirmCB
// 2823  *
// 2824  * @brief       This function reports the results of the request to
// 2825  *              start functioning as a router in a network.
// 2826  *
// 2827  * @param       Status - Result of NLME_StartRouterRequest()
// 2828  *
// 2829  * @return      none
// 2830  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2831 void ZDO_StartRouterConfirmCB( ZStatus_t Status )
ZDO_StartRouterConfirmCB:
          CFI Block cfiBlock131 Using cfiCommon0
          CFI Function ZDO_StartRouterConfirmCB
        CODE
// 2832 {
        FUNCALL ZDO_StartRouterConfirmCB, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartRouterConfirmCB, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
// 2833   nwkStatus = (byte)Status;
        MOV     DPTR,#nwkStatus
        MOVX    @DPTR,A
// 2834 
// 2835   if ( Status == ZSUCCESS )
        JNZ     ??ZDO_StartRouterConfirmCB_0
// 2836   {
// 2837     // LED on shows Router started
// 2838     zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
// 2839     zdoHalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
// 2840     if ( devState == DEV_HOLD )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JNZ     ??ZDO_StartRouterConfirmCB_0
// 2841     {
// 2842       ZDApp_ChangeState( DEV_END_DEVICE );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV     R1,#0x6
        LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 2843     }
// 2844   }
// 2845 #if defined(BLINK_LEDS)
// 2846   else
// 2847   {
// 2848     zdoHalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
// 2849   }
// 2850 #endif
// 2851 
// 2852   osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
??ZDO_StartRouterConfirmCB_0:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x20
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
// 2853 }
        LJMP    ??Subroutine29_0 & 0xFFFF
          CFI EndBlock cfiBlock131
// 2854 
// 2855 /*********************************************************************
// 2856  * @fn          ZDO_JoinConfirmCB
// 2857  *
// 2858  * @brief       This function allows the next higher layer to be notified
// 2859  *              of the results of its request to join itself or another
// 2860  *              device to a network.
// 2861  *
// 2862  * @param       Status - Result of NLME_JoinRequest()
// 2863  *
// 2864  * @return      none
// 2865  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2866 void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
ZDO_JoinConfirmCB:
          CFI Block cfiBlock132 Using cfiCommon0
          CFI Function ZDO_JoinConfirmCB
        CODE
// 2867 {
        FUNCALL ZDO_JoinConfirmCB, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        MOV     R6,A
// 2868   (void)PanId;  // remove if this parameter is used.
// 2869 
// 2870   nwkStatus = (byte)Status;
        MOV     DPTR,#nwkStatus
        MOVX    @DPTR,A
// 2871 
// 2872   if ( Status == ZSUCCESS )
        JNZ     ??ZDO_JoinConfirmCB_0
// 2873   {
// 2874     if ( ZSTACK_END_DEVICE_BUILD
// 2875       || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
// 2876     {
// 2877       neighborEntry_t *pItem;
// 2878 
// 2879       // We don't need the neighbor table entries.
// 2880       // Clear the neighbor Table to remove beacon information
// 2881       nwkNeighborInitTable();
// 2882 
// 2883       // Force a neighbor table entry for the parent
// 2884       pItem = nwkNeighborFindEmptySlot();
// 2885       if ( pItem != NULL )
// 2886       {
// 2887         osal_memset( pItem, 0x00, sizeof ( neighborEntry_t  )  );
// 2888         pItem->neighborAddress = _NIB.nwkCoordAddress;
// 2889         osal_cpyExtAddr( pItem ->neighborExtAddr, _NIB. nwkCoordExtAddress );
// 2890         pItem->panId = _NIB. nwkPanId;
// 2891         pItem->linkInfo.rxLqi = DEF_LQI;
// 2892         pItem->linkInfo.txCounter = DEF_LINK_COUNTER;
// 2893         pItem->linkInfo.txCost = DEF_LINK_COST;
// 2894       }
// 2895     }
// 2896 
// 2897     // LED on shows device joined
// 2898     zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
// 2899     zdoHalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
// 2900     if ( (devState == DEV_HOLD) )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JNZ     ??ZDO_JoinConfirmCB_0
// 2901     {
// 2902       ZDApp_ChangeState( DEV_NWK_JOINING );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV     R1,#0x3
        LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 2903     }
// 2904 
// 2905     if ( !ZG_SECURE_ENABLED )
// 2906     {
// 2907       // Notify to save info into NV
// 2908       ZDApp_NVUpdate();
// 2909     }
// 2910   }
// 2911   else
// 2912   {
// 2913 #if defined(BLINK_LEDS)
// 2914     zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
// 2915 #endif
// 2916   }
// 2917 
// 2918   // Pass the join confirm to higher layer if callback registered
// 2919   if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
??ZDO_JoinConfirmCB_0:
        MOV     DPTR,#zdoCBFunc + 8
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_56:
        JZ      ??ZDO_JoinConfirmCB_1
// 2920   {
// 2921     zdoJoinCnf_t joinCnf;
// 2922 
// 2923     joinCnf.status = Status;
        MOV     A,R6
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 2924     joinCnf.deviceAddr = _NIB.nwkDevAddress;
        MOV     DPTR,#_NIB + 20
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_46:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine42_0 & 0xFFFF
// 2925     joinCnf.parentAddr = _NIB.nwkCoordAddress;
??CrossCallReturnLabel_80:
        MOV     DPTR,#_NIB + 23
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine42_0 & 0xFFFF
// 2926 
// 2927     zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
??CrossCallReturnLabel_81:
        ; Setup parameters for indirect call
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?CALL_IND
// 2928   }
// 2929   
// 2930   // Notify ZDApp
// 2931   ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
??ZDO_JoinConfirmCB_1:
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R3,#0x2
        MOV     R2,#0x2
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
// 2932 
// 2933 }
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock132
// 2934 
// 2935 /*********************************************************************
// 2936  * @fn          ZDO_PermitJoinCB
// 2937  *
// 2938  * @brief      This function is called when there is a change in the
// 2939  *             device's permit join status.
// 2940  *
// 2941  * @param       duration - the new duration
// 2942  *
// 2943  * @return      none
// 2944  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2945 void ZDO_PermitJoinCB( uint8 duration )
ZDO_PermitJoinCB:
          CFI Block cfiBlock133 Using cfiCommon0
          CFI Function ZDO_PermitJoinCB
        CODE
// 2946 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 1)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 2947   // Pass the Permit Join status to higher layer if callback registered
// 2948   if (zdoCBFunc[ZDO_PERMIT_JOIN_CBID] != NULL )
        MOV     DPTR,#zdoCBFunc + 14
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_6:
        JZ      ??ZDO_PermitJoinCB_0
// 2949   {
// 2950     zdoCBFunc[ZDO_PERMIT_JOIN_CBID]( (void*)&duration );
        ; Setup parameters for indirect call
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   ?CALL_IND
// 2951   }
// 2952 }
??ZDO_PermitJoinCB_0:
        MOV     A,#0x1
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock133
// 2953 
// 2954 /*********************************************************************
// 2955  * @fn          ZDO_AddrChangeIndicationCB
// 2956  *
// 2957  * @brief       This function notifies the application that this
// 2958  *              device's address has changed.  Could happen in
// 2959  *              a network with stochastic addressing (PRO).
// 2960  *
// 2961  * @param       newAddr - the new address
// 2962  *
// 2963  * @return      none
// 2964  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2965 void ZDO_AddrChangeIndicationCB( uint16 newAddr )
ZDO_AddrChangeIndicationCB:
          CFI Block cfiBlock134 Using cfiCommon0
          CFI Function ZDO_AddrChangeIndicationCB
        CODE
// 2966 {
        FUNCALL ZDO_AddrChangeIndicationCB, ZDApp_NVUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
// 2967   ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
// 2968   epList_t *pItem = epList;
        MOV     DPTR,#epList
        LCALL   ??Subroutine39_0 & 0xFFFF
// 2969 
// 2970   // Notify to save info into NV
// 2971   ZDApp_NVUpdate();
??CrossCallReturnLabel_63:
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
// 2972 
// 2973   // Notify the applications
// 2974   osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
        SJMP    ??CrossCallReturnLabel_64
// 2975 
// 2976   while (pItem != NULL)
// 2977   {
// 2978     if (pItem->epDesc->endPoint != ZDO_EP)
??ZDO_AddrChangeIndicationCB_0:
        MOV     A,R6
        ADD     A,#0x2
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     DPL,R0
        MOV     DPH,A
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_28:
        JZ      ??ZDO_AddrChangeIndicationCB_1
// 2979     {
// 2980       pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x4
        MOV     R3,#0x0
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
// 2981       if (pZDOAddrChangeMsg != NULL)
        MOV     A,R2
        ORL     A,R3
        JZ      ??ZDO_AddrChangeIndicationCB_1
// 2982       {
// 2983         pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x2a
        MOVX    @DPTR,A
// 2984         pZDOAddrChangeMsg->shortAddr = newAddr;
        LCALL   ?Subroutine10 & 0xFFFF
// 2985         osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
??CrossCallReturnLabel_70:
        ; Setup parameters for call to function osal_msg_send
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ?Subroutine18 & 0xFFFF
// 2986       }
// 2987     }
??CrossCallReturnLabel_77:
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_29:
        MOV     R1,A
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
// 2988     pItem = pItem->nextDesc;
??ZDO_AddrChangeIndicationCB_1:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine39_0 & 0xFFFF
// 2989   }
??CrossCallReturnLabel_64:
        MOV     A,R6
        ORL     A,R7
        JNZ     ??ZDO_AddrChangeIndicationCB_0
// 2990 
// 2991   // Send out a device announce
// 2992   ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
// 2993 }
          CFI EndBlock cfiBlock134
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock135 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock135

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond136 Using cfiCommon0
          CFI Function ZDApp_NwkDescListProcessing
          CFI Conditional ??CrossCallReturnLabel_65
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-2
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-2
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker139 Using cfiCommon1
          CFI (cfiPicker139) NoFunction
          CFI (cfiPicker139) Picker
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiPicker139
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine39_0:
          CFI Block cfiCond140 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_62
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-2
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-2
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-2
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-2
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-2
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker146 Using cfiCommon1
          CFI (cfiPicker146) NoFunction
          CFI (cfiPicker146) Picker
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        RET
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiPicker146

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond147 Using cfiCommon0
          CFI Function ZDO_AddrChangeIndicationCB
          CFI Conditional ??CrossCallReturnLabel_70
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function ZDO_JoinIndicationCB
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-2
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker149 Using cfiCommon1
          CFI (cfiPicker149) NoFunction
          CFI (cfiPicker149) Picker
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiPicker149
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine40_0:
          CFI Block cfiCond150 Using cfiCommon0
          CFI Function ZDApp_ProcessSecEvent
          CFI Conditional ??CrossCallReturnLabel_68
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function ZDApp_LeaveUpdate
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-2
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond152) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond152) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond152) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond152) CFA_SP SP+-2
          CFI (cfiCond152) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function ZDO_JoinIndicationCB
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond153) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond153) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+-2
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker154 Using cfiCommon1
          CFI (cfiPicker154) NoFunction
          CFI (cfiPicker154) Picker
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiPicker154
// 2994 
// 2995 /*********************************************************************
// 2996  * @fn          ZDO_JoinIndicationCB
// 2997  *
// 2998  * @brief       This function allows the next higher layer of a
// 2999  *              coordinator to be notified of a remote join request.
// 3000  *
// 3001  * @param       ShortAddress - 16-bit address
// 3002  * @param       ExtendedAddress - IEEE (64-bit) address
// 3003  * @param       CapabilityFlags - Association Capability Flags
// 3004  * @param       type - of joining -
// 3005  *                          NWK_ASSOC_JOIN
// 3006  *                          NWK_ASSOC_REJOIN_UNSECURE
// 3007  *                          NWK_ASSOC_REJOIN_SECURE
// 3008  *
// 3009  * @return      ZStatus_t
// 3010  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3011 ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
ZDO_JoinIndicationCB:
          CFI Block cfiBlock155 Using cfiCommon0
          CFI Function ZDO_JoinIndicationCB
        CODE
// 3012                                 uint8 CapabilityFlags, uint8 type)
// 3013 {
        FUNCALL ZDO_JoinIndicationCB, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinIndicationCB, ZDApp_NVUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinIndicationCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinIndicationCB, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinIndicationCB, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
// 3014   (void)ExtendedAddress;
// 3015   //check if the device is leaving before responding to rejoin request
// 3016   if( osal_get_timeoutEx( ZDAppTaskID , ZDO_DEVICE_RESET) )
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV     A,R2
        ORL     A,R3
        ORL     A,R4
        ORL     A,R5
        JZ      ??ZDO_JoinIndicationCB_0
// 3017   {
// 3018     return ZFailure; // device leaving , hence do not allow rejoin
        MOV     R1,#0x1
        LJMP    ??ZDO_JoinIndicationCB_1 & 0xFFFF
// 3019   }
// 3020 
// 3021 #if ZDO_NV_SAVE_RFDs
// 3022     (void)CapabilityFlags;
// 3023 
// 3024 #else  // if !ZDO_NV_SAVE_RFDs
// 3025     if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
// 3026 #endif
// 3027     {
// 3028       ZDApp_NVUpdate();  // Notify to save info into NV.
??ZDO_JoinIndicationCB_0:
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
// 3029     }
// 3030 
// 3031     if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
// 3032     {
// 3033       if ( type == NWK_ASSOC_JOIN ||
// 3034           type == NWK_ASSOC_REJOIN_UNSECURE ||
// 3035             type == NWK_ASSOC_REJOIN_SECURE )
        JZ      ??ZDO_JoinIndicationCB_2
        MOV     A,#0x1
        XRL     A,R0
        JZ      ??ZDO_JoinIndicationCB_2
        MOV     A,#0x2
        XRL     A,R0
        JZ      $+5
        LJMP    ??ZDO_JoinIndicationCB_3 & 0xFFFF
// 3036       {
// 3037         uint16 timeToFire;
// 3038         ZDAppNewDevice_t *pNewDevice, *pDeviceList;
// 3039 
// 3040         pNewDevice = (ZDAppNewDevice_t *) osal_mem_alloc( sizeof(ZDAppNewDevice_t) );
??ZDO_JoinIndicationCB_2:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
// 3041 
// 3042         if ( pNewDevice == NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     ??ZDO_JoinIndicationCB_4
// 3043         {
// 3044           // Memory alloc failed
// 3045           return ZMemError;
        MOV     R1,#0x10
        LJMP    ??ZDO_JoinIndicationCB_1 & 0xFFFF
// 3046         }
// 3047 
// 3048         // Add the new device to the New Device List
// 3049         if ( ZDApp_NewDeviceList == NULL )
??ZDO_JoinIndicationCB_4:
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_61:
        MOV     DPTR,#ZDApp_NewDeviceList
        JNZ     ??ZDO_JoinIndicationCB_5
// 3050         {
// 3051           // The list is empty, add the first element
// 3052           ZDApp_NewDeviceList = pNewDevice;
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        SJMP    ??ZDO_JoinIndicationCB_6
// 3053         }
// 3054         else
// 3055         {
// 3056           pDeviceList = ZDApp_NewDeviceList;
??ZDO_JoinIndicationCB_5:
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        SJMP    ??ZDO_JoinIndicationCB_7
// 3057 
// 3058           // Walk the list to last element
// 3059           while ( pDeviceList->next )
// 3060           {
// 3061             pDeviceList = (ZDAppNewDevice_t *) pDeviceList->next;
??ZDO_JoinIndicationCB_8:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
??ZDO_JoinIndicationCB_7:
        MOV     R3,A
// 3062           }
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_57:
        JNZ     ??ZDO_JoinIndicationCB_8
// 3063 
// 3064           // Add new device at the end
// 3065           pDeviceList->next = pNewDevice;
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
??ZDO_JoinIndicationCB_6:
        MOVX    @DPTR,A
// 3066         }
// 3067 
// 3068         // get the remaining time of the timer
// 3069         timeToFire = osal_get_timeoutEx( ZDAppTaskID, ZDO_NEW_DEVICE );
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV     R2,#0x40
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV     ?V4,R2
        MOV     ?V5,R3
// 3070 
// 3071         pNewDevice->next = NULL;
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 3072         pNewDevice->shortAddr = ShortAddress;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine10 & 0xFFFF
// 3073         pNewDevice->timeDelta = ZDAPP_NEW_DEVICE_TIME - timeToFire;
??CrossCallReturnLabel_71:
        MOV     A,#0x58
        CLR     C
        SUBB    A,?V4
        MOV     R0,A
        MOV     A,#0x2
        SUBB    A,?V5
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 3074 
// 3075         // Start the timer only if there is no pending timer
// 3076         if ( pNewDevice->timeDelta == ZDAPP_NEW_DEVICE_TIME )
        MOV     A,#0x58
        XRL     A,R0
        JNZ     ??ZDO_JoinIndicationCB_9
        MOV     A,#0x2
        XRL     A,R1
??ZDO_JoinIndicationCB_9:
        JNZ     ??ZDO_JoinIndicationCB_3
// 3077         {
// 3078           osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, ZDAPP_NEW_DEVICE_TIME );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_258
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R2,#0x40
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 3079         }
// 3080       }
// 3081     }
// 3082 
// 3083     return ZSuccess;
??ZDO_JoinIndicationCB_3:
        MOV     R1,#0x0
??ZDO_JoinIndicationCB_1:
        LJMP    ?Subroutine2 & 0xFFFF
// 3084 
// 3085 }
          CFI EndBlock cfiBlock155
// 3086 
// 3087 /*********************************************************************
// 3088  * @fn          ZDO_ConcentratorIndicationCB
// 3089  *
// 3090  * @brief       This function allows the next higher layer of a
// 3091  *              device to be notified of existence of the concentrator.
// 3092  *
// 3093  * @param       nwkAddr - 16-bit NWK address of the concentrator
// 3094  * @param       extAddr - pointer to extended Address
// 3095  *                        NULL if not available
// 3096  * @param       pktCost - PktCost from RREQ
// 3097  *
// 3098  * @return      void
// 3099  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3100 void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
ZDO_ConcentratorIndicationCB:
          CFI Block cfiBlock156 Using cfiCommon0
          CFI Function ZDO_ConcentratorIndicationCB
        CODE
// 3101 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 3102   zdoConcentratorInd_t conInd;
// 3103 
// 3104   conInd.nwkAddr = nwkAddr;
        LCALL   ?Subroutine11 & 0xFFFF
// 3105   conInd.extAddr = extAddr;
??CrossCallReturnLabel_83:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 3106   conInd.pktCost = pktCost;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
// 3107 
// 3108   if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
        MOV     DPTR,#zdoCBFunc + 2
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_7:
        JZ      ??ZDO_ConcentratorIndicationCB_0
// 3109   {
// 3110     zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
        ; Setup parameters for indirect call
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   ?CALL_IND
// 3111   }
// 3112 }
??ZDO_ConcentratorIndicationCB_0:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock156

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond157 Using cfiCommon0
          CFI Function ZDO_NetworkDiscoveryConfirmCB
          CFI Conditional ??CrossCallReturnLabel_4
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 3)
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond158) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond158) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+-2
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function ZDO_PermitJoinCB
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond159) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond159) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond159) CFA_SP SP+-7
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function ZDO_ConcentratorIndicationCB
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-2
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function ZDO_LeaveCnf
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+-2
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function ZDO_LeaveInd
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-2
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker163 Using cfiCommon1
          CFI (cfiPicker163) NoFunction
          CFI (cfiPicker163) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,DPL
        ORL     A,DPH
        RET
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiPicker163
// 3113 
// 3114 /*********************************************************************
// 3115  * @fn          ZDO_LeaveCnf
// 3116  *
// 3117  * @brief       This function allows the next higher layer to be
// 3118  *              notified of the results of its request for this or
// 3119  *              a child device to leave the network.
// 3120  *
// 3121  * @param       cnf - NLME_LeaveCnf_t
// 3122  *
// 3123  * @return      none
// 3124  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3125 void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
ZDO_LeaveCnf:
          CFI Block cfiBlock164 Using cfiCommon0
          CFI Function ZDO_LeaveCnf
        CODE
// 3126 {
        FUNCALL ZDO_LeaveCnf, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, ZDApp_LeaveReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, ZDApp_LeaveUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 3127   // Check for this device
// 3128   if ( osal_ExtAddrEqual( cnf->extAddr,
// 3129                           NLME_GetExtAddr() ) == TRUE )
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     A,R6
        ADD     A,#0xb
        MOV     ?V2,A
        CLR     A
        ADDC    A,R7
        MOV     ?V3,A
        MOV     A,R6
        ADD     A,#0x2
        MOV     ?V0,A
        CLR     A
        ADDC    A,R7
        MOV     ?V1,A
        ; Setup parameters for call to function sAddrExtCmp
        MOV     R2,?V0
        MOV     R3,A
        LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDO_LeaveCnf_0
// 3130   {
// 3131     // Pass the leave confirm to higher layer if callback registered
// 3132     if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
// 3133          ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
        MOV     DPTR,#zdoCBFunc + 10
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_8:
        JZ      ??ZDO_LeaveCnf_1
        ; Setup parameters for indirect call
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ?CALL_IND
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JNZ     ??ZDO_LeaveCnf_2
// 3134     {
// 3135       // Prepare to leave with reset
// 3136       ZDApp_LeaveReset( cnf->rejoin );
??ZDO_LeaveCnf_1:
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
        SJMP    ??ZDO_LeaveCnf_2
// 3137     }
// 3138   }
// 3139   else if ( ZSTACK_ROUTER_BUILD )
// 3140   {
// 3141     // Remove device address(optionally descendents) from data
// 3142     ZDApp_LeaveUpdate( cnf->dstAddr,
// 3143                        cnf->extAddr,
// 3144                        cnf->removeChildren,
// 3145                        cnf->rejoin );
??ZDO_LeaveCnf_0:
        ; Setup parameters for call to function ZDApp_LeaveUpdate
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     ?V2,A
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R4,?V0
        MOV     R5,?V1
        LCALL   ?Subroutine16 & 0xFFFF
// 3146   }
??CrossCallReturnLabel_48:
        LCALL   `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 3147 }
??ZDO_LeaveCnf_2:
        LJMP    ??Subroutine35_0 & 0xFFFF
          CFI EndBlock cfiBlock164
// 3148 
// 3149 /*********************************************************************
// 3150  * @fn          ZDO_LeaveInd
// 3151  *
// 3152  * @brief       This function allows the next higher layer of a
// 3153  *              device to be notified of a remote leave request or
// 3154  *              indication.
// 3155  *
// 3156  * @param       ind - NLME_LeaveInd_t
// 3157  *
// 3158  * @return      none
// 3159  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3160 void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
ZDO_LeaveInd:
          CFI Block cfiBlock165 Using cfiCommon0
          CFI Function ZDO_LeaveInd
        CODE
// 3161 {
        FUNCALL ZDO_LeaveInd, bdb_setFN
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, NLME_LeaveRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 3162   uint8 leave;
// 3163 
// 3164   // NWK layer filters out illegal requests
// 3165   if ( ind->request == TRUE )
        MOV     A,R6
        ADD     A,#0xb
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     A,R6
        ADD     A,#0xc
        INC     R0
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDO_LeaveInd_0
// 3166   {
// 3167     byte temp = FALSE;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 3168     
// 3169     // Only respond if we are not rejoining the network
// 3170     if ( ind->rejoin == FALSE )
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        JNZ     ??ZDO_LeaveInd_1
// 3171     {
// 3172       // Notify network of leave
// 3173       NLME_LeaveRsp_t rsp;
// 3174       rsp.rejoin = ind->rejoin;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 3175 
// 3176       if ( ZSTACK_ROUTER_BUILD )
// 3177       {
// 3178         rsp.removeChildren = ind->removeChildren;
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 3179       }
// 3180       else if ( ZSTACK_END_DEVICE_BUILD )
// 3181       {
// 3182         NLME_SetResponseRate(0);
// 3183         NLME_SetQueuedPollRate(0);
// 3184         rsp.removeChildren = 0;
// 3185       }
// 3186       
// 3187       bdb_setFN();
        ; Setup parameters for call to function bdb_setFN
        LCALL   `??bdb_setFN::?relay`; Banked call to: bdb_setFN
// 3188        
// 3189       NLME_LeaveRsp( &rsp );
        ; Setup parameters for call to function NLME_LeaveRsp
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??NLME_LeaveRsp::?relay`; Banked call to: NLME_LeaveRsp
// 3190     }
// 3191 
// 3192     if ( ZSTACK_END_DEVICE_BUILD )
// 3193     {
// 3194       // Stop polling and get ready to reset
// 3195       NLME_SetPollRate( 0 );
// 3196     }
// 3197 
// 3198     // Prepare to leave with reset
// 3199     ZDApp_LeaveReset( ind->rejoin );
??ZDO_LeaveInd_1:
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
// 3200     
// 3201     //Turn on the radio to avoid sending packets after sending the leave    
// 3202     ZMacSetReq(ZMacRxOnIdle, &temp);
        ; Setup parameters for call to function ZMacSetReq
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        MOV     R1,#0x52
        LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
        SJMP    ??ZDO_LeaveInd_2
// 3203   }
// 3204   else
// 3205   {
// 3206     leave = FALSE;
// 3207 
// 3208     // Check if this device needs to leave as a child or descendent
// 3209     if ( ind->srcAddr == NLME_GetCoordShortAddr() )
??ZDO_LeaveInd_0:
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_49:
        MOV     A,?V4
        XRL     A,R2
        JNZ     ??ZDO_LeaveInd_3
        MOV     A,?V5
        XRL     A,R3
??ZDO_LeaveInd_3:
        JNZ     ??ZDO_LeaveInd_4
// 3210     {
// 3211       if ( ( ind->removeChildren == TRUE )   )
        MOV     A,#0x1
        XRL     A,R1
        JZ      ??ZDO_LeaveInd_5
// 3212       {
// 3213         leave = TRUE;
// 3214       }
// 3215       else if ( ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_DEVICE)
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_14:
        JNZ     ??ZDO_LeaveInd_4
// 3216       {
// 3217         // old parents is leaving the network, child needs to search for a new parent
// 3218         ind->rejoin = TRUE;
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOV     A,#0x1
        MOVX    @DPTR,A
// 3219         leave = TRUE;
// 3220       }
// 3221 
// 3222     }
// 3223     else if ( ind->removeChildren == TRUE )
// 3224     {
// 3225       // Check NWK address allocation algorithm
// 3226       //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
// 3227     }
// 3228 
// 3229     if ( leave == TRUE )
// 3230     {
// 3231       // Prepare to leave with reset
// 3232       ZDApp_LeaveReset( ind->rejoin );
??ZDO_LeaveInd_5:
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
        SJMP    ??ZDO_LeaveInd_2
// 3233     }
// 3234     else
// 3235     {
// 3236       // Remove device address(optionally descendents) from data
// 3237       ZDApp_LeaveUpdate( ind->srcAddr,
// 3238                          ind->extAddr,
// 3239                          ind->removeChildren,
// 3240                          ind->rejoin );
??ZDO_LeaveInd_4:
        ; Setup parameters for call to function ZDApp_LeaveUpdate
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,R6
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,R7
        MOV     R5,A
        LCALL   `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
// 3241     }
// 3242   }
// 3243 
// 3244   // Pass the leave indication to higher layer if callback registered.
// 3245   if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
??ZDO_LeaveInd_2:
        MOV     DPTR,#zdoCBFunc + 12
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_9:
        JZ      ??ZDO_LeaveInd_6
// 3246   {
// 3247     (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
        ; Setup parameters for indirect call
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ?CALL_IND
// 3248   }
// 3249 }
??ZDO_LeaveInd_6:
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock165
// 3250 
// 3251 /*********************************************************************
// 3252  * @fn          ZDO_SyncIndicationCB
// 3253  *
// 3254  * @brief       This function allows the next higher layer of a
// 3255  *              coordinator to be notified of a loss of synchronization
// 3256  *                          with the parent/child device.
// 3257  *
// 3258  * @param       type: 0 - child; 1 - parent
// 3259  *
// 3260  *
// 3261  * @return      none
// 3262  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3263 void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
ZDO_SyncIndicationCB:
          CFI Block cfiBlock166 Using cfiCommon0
          CFI Function ZDO_SyncIndicationCB
        CODE
// 3264 {
        ; Saved register size: 0
        ; Auto size: 0
// 3265   (void)shortAddr;  // Remove this line if this parameter is used.
// 3266 
// 3267   if ( ZSTACK_END_DEVICE_BUILD
// 3268     || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
// 3269   {
// 3270     if ( type == 1 && retryCnt == 0 )
// 3271     {
// 3272       // We lost contact with our parent.  Clear the neighbor Table.
// 3273       nwkNeighborInitTable();
// 3274       
// 3275       //If we are Factory new, then report fail on association
// 3276       if(!bdb_isDeviceNonFactoryNew())
// 3277       {
// 3278         bdb_nwkAssocAttemt(FALSE);
// 3279       }
// 3280 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 3281       else
// 3282       {
// 3283         //We lost our parent
// 3284         bdb_parentLost();
// 3285       }
// 3286 #endif
// 3287     }
// 3288   }
// 3289 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock166
// 3290 
// 3291 /*********************************************************************
// 3292  * @fn          ZDO_ManytoOneFailureIndicationCB
// 3293  *
// 3294  * @brief       This function allows the next higher layer of a
// 3295  *              concentrator to be notified of a many-to-one route
// 3296  *              failure.
// 3297  *
// 3298  * @param       none
// 3299  *
// 3300  *
// 3301  * @return      none
// 3302  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3303 void ZDO_ManytoOneFailureIndicationCB()
ZDO_ManytoOneFailureIndicationCB:
          CFI Block cfiBlock167 Using cfiCommon0
          CFI Function ZDO_ManytoOneFailureIndicationCB
        CODE
// 3304 {
        FUNCALL ZDO_ManytoOneFailureIndicationCB, RTG_MTORouteReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3305   // By default, the concentrator automatically redo many-to-one route
// 3306   // discovery to update all many-to-one routes in the network
// 3307   // If you want anything processing other than the default,
// 3308   // please replace the following code.
// 3309 
// 3310   RTG_MTORouteReq();
        ; Setup parameters for call to function RTG_MTORouteReq
        LCALL   `??RTG_MTORouteReq::?relay`; Banked call to: RTG_MTORouteReq
// 3311 }
        LJMP    ??Subroutine33_0 & 0xFFFF
          CFI EndBlock cfiBlock167
// 3312 
// 3313 /*********************************************************************
// 3314  * @fn          ZDO_PollConfirmCB
// 3315  *
// 3316  * @brief       This function allows the next higher layer to be
// 3317  *              notified of a Poll Confirm.
// 3318  *
// 3319  * @param       none
// 3320  *
// 3321  * @return      none
// 3322  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3323 void ZDO_PollConfirmCB( uint8 status )
ZDO_PollConfirmCB:
          CFI Block cfiBlock168 Using cfiCommon0
          CFI Function ZDO_PollConfirmCB
        CODE
// 3324 {
        ; Saved register size: 0
        ; Auto size: 0
// 3325   (void)status;  // Remove this line if this parameter is used.
// 3326   return;
        LJMP    ?BRET
// 3327 }
          CFI EndBlock cfiBlock168
// 3328 
// 3329 /*********************************************************************
// 3330  * @fn          ZDO_NetworkStatusCB
// 3331  *
// 3332  * @brief       Network Status Callback function
// 3333  *
// 3334  * @param       nwkDstAddr - message's destination address- used to determine
// 3335  *                           if the message was intended for this device or
// 3336  *                           a sleeping end device.
// 3337  * @param       statusCode - message's status code (ie. NWKSTAT_NONTREE_LINK_FAILURE)
// 3338  * @param       dstAddr - the destination address related to the status code
// 3339  *
// 3340  * @return      none
// 3341  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3342 void ZDO_NetworkStatusCB( uint16 nwkDstAddr, uint8 statusCode, uint16 dstAddr )
ZDO_NetworkStatusCB:
          CFI Block cfiBlock169 Using cfiCommon0
          CFI Function ZDO_NetworkStatusCB
        CODE
// 3343 {
        FUNCALL ZDO_NetworkStatusCB, NLME_GetShortAddr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3344   (void)dstAddr;     // Remove this line if this parameter is used.
// 3345 
// 3346   if ( (nwkDstAddr == NLME_GetShortAddr())
// 3347       && (statusCode == NWKSTAT_NONTREE_LINK_FAILURE) )
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
// 3348   {
// 3349     // Routing error for dstAddr, this is informational and a Route
// 3350     // Request should happen automatically.
// 3351   }
// 3352 }
        LJMP    ??Subroutine33_0 & 0xFFFF
          CFI EndBlock cfiBlock169
// 3353 
// 3354 /******************************************************************************
// 3355  * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
// 3356  *
// 3357  * @brief       Stub routine implemented by NHLE. NHLE should call
// 3358  *              <AddrMgrWriteNV> when appropriate.
// 3359  *
// 3360  * @param       none
// 3361  *
// 3362  * @return      none
// 3363  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3364 void ZDApp_NwkWriteNVRequest( void )
AddrMgrWriteNVRequest:
          CFI Block cfiBlock170 Using cfiCommon0
          CFI Function AddrMgrWriteNVRequest
        CODE
// 3365 {
        FUNCALL AddrMgrWriteNVRequest, osal_get_timeoutEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AddrMgrWriteNVRequest, ZDApp_NVUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3366 #if defined ( NV_RESTORE )
// 3367   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV     R2,#0x0
        MOV     R3,#0x1
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV     A,R2
        ORL     A,R3
        ORL     A,R4
        ORL     A,R5
        JNZ     ??AddrMgrWriteNVRequest_0
// 3368   {
// 3369     // Trigger to save info into NV
// 3370     ZDApp_NVUpdate();
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
// 3371   }
// 3372 #endif
// 3373 }
??AddrMgrWriteNVRequest_0:
        LJMP    ??Subroutine33_0 & 0xFFFF
          CFI EndBlock cfiBlock170
// 3374 
// 3375 /*********************************************************************
// 3376  * Call Back Functions from Security  - API
// 3377  */
// 3378 
// 3379  /*********************************************************************
// 3380  * @fn          ZDO_UpdateDeviceIndication
// 3381  *
// 3382  * @brief       This function notifies the "Trust Center" of a
// 3383  *              network when a device joins or leaves the network.
// 3384  *
// 3385  * @param       extAddr - pointer to 64 bit address of new device
// 3386  * @param       status  - 0 if a new device joined securely
// 3387  *                      - 1 if a new device joined un-securely
// 3388  *                      - 2 if a device left the network
// 3389  *
// 3390  * @return      true if newly joined device should be allowed to
// 3391  *                                              remain on network
// 3392  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3393 ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
ZDO_UpdateDeviceIndication:
          CFI Block cfiBlock171 Using cfiCommon0
          CFI Function ZDO_UpdateDeviceIndication
        CODE
// 3394 {
        ; Saved register size: 0
        ; Auto size: 0
// 3395   // can implement a network access policy based on the
// 3396   // IEEE address of newly joining devices...
// 3397   (void)extAddr;
// 3398   (void)status;
// 3399 
// 3400   return ZSuccess;
        MOV     R1,#0x0
        LJMP    ?BRET
// 3401 }
          CFI EndBlock cfiBlock171
// 3402 
// 3403 /*********************************************************************
// 3404  * @fn          ZDApp_InMsgCB
// 3405  *
// 3406  * @brief       This function is called to pass up any message that is
// 3407  *              not yet supported.  This allows for the developer to
// 3408  *              support features themselves..
// 3409  *
// 3410  * @return      none
// 3411  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3412 void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
ZDApp_InMsgCB:
          CFI Block cfiBlock172 Using cfiCommon0
          CFI Function ZDApp_InMsgCB
        CODE
// 3413 {
        FUNCALL ZDApp_InMsgCB, ZDP_GenericRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 3414   if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_38:
        ANL     A,#0x80
        JNZ     ??ZDApp_InMsgCB_0
// 3415   {
// 3416     // Handle the response message
// 3417   }
// 3418   else
// 3419   {
// 3420     // Handle the request message by sending a generic "not supported".
// 3421     // Device Announce doesn't have a response.
// 3422     if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
        MOV     A,R6
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     ??ZDApp_InMsgCB_0
        MOV     A,#0x13
        XRL     A,R0
        JNZ     ??ZDApp_InMsgCB_1
        MOV     A,R1
??ZDApp_InMsgCB_1:
        JZ      ??ZDApp_InMsgCB_0
// 3423     {
// 3424       ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
// 3425                       (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
        ; Setup parameters for call to function ZDP_GenericRsp
        MOV     A,R0
        MOV     ?V0,A
        MOV     A,R1
        ORL     A,#0x80
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        CLR     A
        MOV     ?V0,A
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R6
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R4,#-0x7c
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   ?Subroutine23 & 0xFFFF
// 3426     }
// 3427   }
??CrossCallReturnLabel_20:
        MOV     R1,A
        LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 3428 }
??ZDApp_InMsgCB_0:
        LJMP    ??Subroutine31_0 & 0xFFFF
          CFI EndBlock cfiBlock172

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond173 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 54)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function ZDApp_InMsgCB
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-2
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker175 Using cfiCommon1
          CFI (cfiPicker175) NoFunction
          CFI (cfiPicker175) Picker
        MOV     A,R6
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiPicker175
// 3429 
// 3430 
// 3431 /*********************************************************************
// 3432  * @fn      ZDApp_ChangeMatchDescRespPermission()
// 3433  *
// 3434  * @brief   Changes the Match Descriptor Response permission.
// 3435  *
// 3436  * @param   endpoint - endpoint to allow responses
// 3437  * @param   action - true to allow responses, false to not
// 3438  *
// 3439  * @return  none
// 3440  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3441 void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
ZDApp_ChangeMatchDescRespPermission:
          CFI Block cfiBlock176 Using cfiCommon0
          CFI Function ZDApp_ChangeMatchDescRespPermission
        CODE
// 3442 {
        FUNCALL ZDApp_ChangeMatchDescRespPermission, afSetMatch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 3443   // Store the action
// 3444   afSetMatch( endpoint, action );
        ; Setup parameters for call to function afSetMatch
        LCALL   `??afSetMatch::?relay`; Banked call to: afSetMatch
// 3445 }
        LJMP    ??Subroutine29_0 & 0xFFFF
          CFI EndBlock cfiBlock176
// 3446 
// 3447 /*********************************************************************
// 3448  * @fn      ZDApp_NetworkInit()
// 3449  *
// 3450  * @brief   Used to start the network joining process
// 3451  *
// 3452  * @param   delay - mSec delay to wait before starting
// 3453  *
// 3454  * @return  none
// 3455  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3456 void ZDApp_NetworkInit( uint16 delay )
ZDApp_NetworkInit:
          CFI Block cfiBlock177 Using cfiCommon0
          CFI Function ZDApp_NetworkInit
        CODE
// 3457 {
        FUNCALL ZDApp_NetworkInit, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkInit, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 3458   if ( delay )
        MOV     A,R2
        ORL     A,R3
        JZ      ??ZDApp_NetworkInit_0
// 3459   {
// 3460     // Wait awhile before starting the device
// 3461     osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     ?V0,R2
        MOV     ?V1,R3
        CLR     A
        MOV     ?V2,A
        MOV     ?V3,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        SJMP    ??ZDApp_NetworkInit_1
// 3462   }
// 3463   else
// 3464   {
// 3465     osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
??ZDApp_NetworkInit_0:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
// 3466   }
// 3467 }
??ZDApp_NetworkInit_1:
        LJMP    ??Subroutine35_0 & 0xFFFF
          CFI EndBlock cfiBlock177
// 3468 
// 3469 /*********************************************************************
// 3470  * @fn      ZDApp_NwkStateUpdateCB()
// 3471  *
// 3472  * @brief   This function notifies that this device's network
// 3473  *          state info has been changed.
// 3474  *
// 3475  * @param   none
// 3476  *
// 3477  * @return  none
// 3478  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3479 void ZDApp_NwkStateUpdateCB( void )
ZDApp_NwkStateUpdateCB:
          CFI Block cfiBlock178 Using cfiCommon0
          CFI Function ZDApp_NwkStateUpdateCB
        CODE
// 3480 {
        FUNCALL ZDApp_NwkStateUpdateCB, osal_get_timeoutEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkStateUpdateCB, ZDApp_NVUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3481   // Notify to save info into NV
// 3482   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV     R2,#0x0
        MOV     R3,#0x1
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV     A,R2
        ORL     A,R3
        ORL     A,R4
        ORL     A,R5
        JNZ     ??ZDApp_NwkStateUpdateCB_0
// 3483   {
// 3484     // Trigger to save info into NV
// 3485     ZDApp_NVUpdate();
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
// 3486   }
// 3487 }
??ZDApp_NwkStateUpdateCB_0:
        LJMP    ??Subroutine33_0 & 0xFFFF
          CFI EndBlock cfiBlock178
// 3488 
// 3489 /*********************************************************************
// 3490  * @fn      ZDApp_NodeProfileSync()
// 3491  *
// 3492  * @brief   Sync node with stack profile.
// 3493  *
// 3494  * @param   stackProfile - stack profile of the network to join
// 3495  *
// 3496  * @return  none
// 3497  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3498 void ZDApp_NodeProfileSync( uint8 stackProfile )
ZDApp_NodeProfileSync:
          CFI Block cfiBlock179 Using cfiCommon0
          CFI Function ZDApp_NodeProfileSync
        CODE
// 3499 {
        FUNCALL ZDApp_NodeProfileSync, NLME_SetBroadcastFilter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 3500   if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??ZDApp_NodeProfileSync_0
// 3501   {
// 3502     if ( stackProfile != zgStackProfile )
        MOV     DPTR,#zgStackProfile
        MOVX    A,@DPTR
        XRL     A,R6
        JZ      ??ZDApp_NodeProfileSync_0
// 3503     {
// 3504       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        MOVX    @DPTR,A
        ORL     A,#0x2
        MOVX    @DPTR,A
// 3505       ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOV     A,#0xc
        MOVX    @DPTR,A
// 3506       NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
        ; Setup parameters for call to function NLME_SetBroadcastFilter
        MOV     R1,A
        LCALL   `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
// 3507     }
// 3508   }
// 3509 }
??ZDApp_NodeProfileSync_0:
        LJMP    ??Subroutine29_0 & 0xFFFF
          CFI EndBlock cfiBlock179
// 3510 
// 3511 /*********************************************************************
// 3512  * @fn      ZDApp_StartJoiningCycle()
// 3513  *
// 3514  * @brief   Starts the joining cycle of a device.  This will only
// 3515  *          continue an already started (or stopped) joining cycle.
// 3516  *
// 3517  * @param   none
// 3518  *
// 3519  * @return  TRUE if joining stopped, FALSE if joining or rejoining
// 3520  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3521 uint8 ZDApp_StartJoiningCycle( void )
ZDApp_StartJoiningCycle:
          CFI Block cfiBlock180 Using cfiCommon0
          CFI Function ZDApp_StartJoiningCycle
        CODE
// 3522 {
        FUNCALL ZDApp_StartJoiningCycle, ZDApp_NetworkInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3523   if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_StartJoiningCycle_0
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_StartJoiningCycle_1
// 3524   {
// 3525     continueJoining = TRUE;
??ZDApp_StartJoiningCycle_0:
        MOV     DPTR,#continueJoining
        MOV     A,#0x1
        MOVX    @DPTR,A
// 3526     ZDApp_NetworkInit( 0 );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
// 3527 
// 3528     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??ZDApp_StartJoiningCycle_2
// 3529   }
// 3530   else
// 3531     return ( FALSE );
??ZDApp_StartJoiningCycle_1:
        MOV     R1,#0x0
??ZDApp_StartJoiningCycle_2:
        LJMP    ??Subroutine33_0 & 0xFFFF
// 3532 }
          CFI EndBlock cfiBlock180
// 3533 
// 3534 /*********************************************************************
// 3535  * @fn      ZDApp_StopJoiningCycle()
// 3536  *
// 3537  * @brief   Stops the joining or rejoining process of a device.
// 3538  *
// 3539  * @param   none
// 3540  *
// 3541  * @return  TRUE if joining stopped, FALSE if joining or rejoining
// 3542  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3543 uint8 ZDApp_StopJoiningCycle( void )
ZDApp_StopJoiningCycle:
          CFI Block cfiBlock181 Using cfiCommon0
          CFI Function ZDApp_StopJoiningCycle
        CODE
// 3544 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3545   if ( devState == DEV_INIT || devState == DEV_NWK_DISC || devState == DEV_NWK_BACKOFF )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_StopJoiningCycle_0
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??ZDApp_StopJoiningCycle_0
        MOVX    A,@DPTR
        XRL     A,#0xc
        JNZ     ??ZDApp_StopJoiningCycle_1
// 3546   {
// 3547     continueJoining = FALSE;
??ZDApp_StopJoiningCycle_0:
        MOV     DPTR,#continueJoining
        CLR     A
        MOVX    @DPTR,A
// 3548     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??ZDApp_StopJoiningCycle_2
// 3549   }
// 3550   else
// 3551     return ( FALSE );
??ZDApp_StopJoiningCycle_1:
        MOV     R1,#0x0
??ZDApp_StopJoiningCycle_2:
        LJMP    ??Subroutine33_0 & 0xFFFF
// 3552 }
          CFI EndBlock cfiBlock181
// 3553 
// 3554 /*********************************************************************
// 3555  * @fn      ZDApp_AnnounceNewAddress()
// 3556  *
// 3557  * @brief   Send Device Announce and hold all transmissions for
// 3558  *          new address timeout.
// 3559  *
// 3560  * @param   none
// 3561  *
// 3562  * @return  none
// 3563  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3564 void ZDApp_AnnounceNewAddress( void )
ZDApp_AnnounceNewAddress:
          CFI Block cfiBlock182 Using cfiCommon0
          CFI Function ZDApp_AnnounceNewAddress
        CODE
// 3565 {
        FUNCALL ZDApp_AnnounceNewAddress, APSME_HoldDataRequests
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, ZDP_DeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, APSME_HoldDataRequests
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 3566 #if defined ( ZIGBEEPRO )
// 3567   // Turn off data request hold
// 3568   APSME_HoldDataRequests( 0 );
        ; Setup parameters for call to function APSME_HoldDataRequests
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
// 3569 #endif
// 3570 
// 3571   ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
// 3572                      ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        ; Setup parameters for call to function ZDP_DeviceAnnce
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     R4,A
        MOV     R5,?V1
        LCALL   `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 3573 
// 3574 #if defined ( ZIGBEEPRO )
// 3575   // Setup the timeout
// 3576   APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
        ; Setup parameters for call to function APSME_HoldDataRequests
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
// 3577 #endif
// 3578 
// 3579   if ( ZSTACK_END_DEVICE_BUILD )
// 3580   {
// 3581     if ( zgChildAgingEnable == TRUE )
// 3582     {
// 3583       uint8 coordExtAddr[Z_EXTADDR_LEN];
// 3584 
// 3585       // Send the message to parent
// 3586       NLME_GetCoordExtAddr( coordExtAddr );
// 3587       NLME_SendEndDevTimeoutReq( NLME_GetCoordShortAddr(), coordExtAddr,
// 3588                                  zgEndDeviceTimeoutValue,
// 3589                                  zgEndDeviceConfiguration );
// 3590     }
// 3591   }
// 3592 }
        LJMP    ??Subroutine31_0 & 0xFFFF
          CFI EndBlock cfiBlock182
// 3593 
// 3594 /*********************************************************************
// 3595  * @fn      ZDApp_SendParentAnnce()
// 3596  *
// 3597  * @brief   Send Parent Announce message.
// 3598  *
// 3599  * @param   none
// 3600  *
// 3601  * @return  none
// 3602  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3603 void ZDApp_SendParentAnnce( void )
ZDApp_SendParentAnnce:
          CFI Block cfiBlock183 Using cfiCommon0
          CFI Function ZDApp_SendParentAnnce
        CODE
// 3604 {
        FUNCALL ZDApp_SendParentAnnce, AssocMakeListOfRfdChild
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendParentAnnce, ZDP_ParentAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendParentAnnce, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
// 3605   uint8 count;
// 3606   uint8 *childInfo;
// 3607 
// 3608   childInfo = AssocMakeListOfRfdChild( &count );
        ; Setup parameters for call to function AssocMakeListOfRfdChild
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AssocMakeListOfRfdChild::?relay`; Banked call to: AssocMakeListOfRfdChild
        MOV     ?V0,R2
        MOV     ?V1,R3
// 3609 
// 3610   if ( childInfo != NULL )
        MOV     A,R2
        ORL     A,?V1
        JZ      ??ZDApp_SendParentAnnce_0
// 3611   {
// 3612     if ( count > 0 )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JZ      ??ZDApp_SendParentAnnce_1
// 3613     {
// 3614       zAddrType_t dstAddr;
// 3615 
// 3616       dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        MOVX    @DPTR,A
// 3617       dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
// 3618 
// 3619       ZDP_ParentAnnceReq( dstAddr, count, childInfo, 0 );
        ; Setup parameters for call to function ZDP_ParentAnnce
        MOV     ?V2,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V2,#0x1f
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP102_8
        MOV     R2,#ZDP_TransID & 0xff
        MOV     R3,#(ZDP_TransID >> 8) & 0xff
        LCALL   `??ZDP_ParentAnnce::?relay`; Banked call to: ZDP_ParentAnnce
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
// 3620     }
// 3621 
// 3622     // Free the list after the message has been sent
// 3623     osal_mem_free( childInfo );
??ZDApp_SendParentAnnce_1:
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 3624   }
// 3625 }
??ZDApp_SendParentAnnce_0:
        MOV     A,#0xa
        LJMP    ??Subroutine34_0 & 0xFFFF
          CFI EndBlock cfiBlock183
// 3626 
// 3627 /*********************************************************************
// 3628  * @fn          ZDApp_NVUpdate
// 3629  *
// 3630  * @brief       Set the NV Update Timer.
// 3631  *
// 3632  * @param       none
// 3633  *
// 3634  * @return      none
// 3635  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3636 void ZDApp_NVUpdate( void )
ZDApp_NVUpdate:
          CFI Block cfiBlock184 Using cfiCommon0
          CFI Function ZDApp_NVUpdate
        CODE
// 3637 {
        FUNCALL ZDApp_NVUpdate, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NVUpdate, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3638 #if defined ( NV_RESTORE )
// 3639   if ( (ZSTACK_END_DEVICE_BUILD)
// 3640        || (ZSTACK_ROUTER_BUILD
// 3641            && (_NIB.CapabilityFlags & CAPINFO_DEVICETYPE_FFD) == 0) )
        MOV     DPTR,#_NIB + 14
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JC      ??ZDApp_NVUpdate_0
// 3642   {
// 3643     // No need to wait, set the event to save the state
// 3644     osal_set_event(ZDAppTaskID, ZDO_NWK_UPDATE_NV);
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x0
        MOV     R3,#0x1
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
        SJMP    ??ZDApp_NVUpdate_1
// 3645   }
// 3646   else
// 3647   {
// 3648     // To allow for more changes to the network state before saving
// 3649     osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
??ZDApp_NVUpdate_0:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_2bc
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 4)
        MOV     R2,#0x0
        MOV     R3,#0x1
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
// 3650   }
// 3651 #endif
// 3652 }
??ZDApp_NVUpdate_1:
        LJMP    ??Subroutine33_0 & 0xFFFF
          CFI EndBlock cfiBlock184
// 3653 
// 3654 /*********************************************************************
// 3655  * @fn      ZDApp_CoordStartPANIDConflictCB()
// 3656  *
// 3657  * @brief   Returns a PAN ID for the network layer to use during
// 3658  *          a coordinator start and there is another network with
// 3659  *          the intended PANID.
// 3660  *
// 3661  * @param   panid - the intended PAN ID
// 3662  *
// 3663  * @return  PANID to try
// 3664  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3665 uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
ZDApp_CoordStartPANIDConflictCB:
          CFI Block cfiBlock185 Using cfiCommon0
          CFI Function ZDApp_CoordStartPANIDConflictCB
        CODE
// 3666 {
        ; Saved register size: 0
        ; Auto size: 0
// 3667   return ( panid + 1 );
        MOV     A,R2
        ADD     A,#0x1
        INC     R2
        JNC     ??ZDApp_CoordStartPANIDConflictCB_0
        INC     R3
??ZDApp_CoordStartPANIDConflictCB_0:
        LJMP    ?BRET
// 3668 }
          CFI EndBlock cfiBlock185
// 3669 
// 3670 /*********************************************************************
// 3671  * @fn          ZDO_SrcRtgIndCB
// 3672  *
// 3673  * @brief       This function notifies the ZDO available src route record received.
// 3674  *
// 3675  * @param       srcAddr - source address of the source route
// 3676  * @param       relayCnt - number of devices in the relay list
// 3677  * @param       relayList - relay list of the source route
// 3678  *
// 3679  * @return      none
// 3680  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3681 void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
ZDO_SrcRtgIndCB:
          CFI Block cfiBlock186 Using cfiCommon0
          CFI Function ZDO_SrcRtgIndCB
        CODE
// 3682 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 3683   zdoSrcRtg_t srcRtg;
// 3684 
// 3685   srcRtg.srcAddr = srcAddr;
        LCALL   ?Subroutine11 & 0xFFFF
// 3686   srcRtg.relayCnt = relayCnt;
??CrossCallReturnLabel_84:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
// 3687   srcRtg.pRelayList = pRelayList;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 3688 
// 3689   if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
        MOV     DPTR,#zdoCBFunc
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_58:
        JZ      ??ZDO_SrcRtgIndCB_0
// 3690   {
// 3691     zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
        ; Setup parameters for indirect call
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   ??Subroutine41_0 & 0xFFFF
// 3692   }
??CrossCallReturnLabel_75:
        LCALL   ?CALL_IND
// 3693 }
??ZDO_SrcRtgIndCB_0:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock186

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond187 Using cfiCommon0
          CFI Function ZDApp_LeaveUpdate
          CFI Conditional ??CrossCallReturnLabel_76
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond188 Using cfiCommon0
          CFI (cfiCond188) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond188) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond188) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond188) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond188) CFA_SP SP+-2
          CFI (cfiCond188) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker189 Using cfiCommon1
          CFI (cfiPicker189) NoFunction
          CFI (cfiPicker189) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
          CFI EndBlock cfiCond187
          CFI EndBlock cfiCond188
          CFI EndBlock cfiPicker189
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine41_0:
          CFI Block cfiCond190 Using cfiCommon0
          CFI Function ZDApp_ProcessSecEvent
          CFI Conditional ??CrossCallReturnLabel_72
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function ZDApp_ProcessOSALMsg
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond191) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond191) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond191) CFA_SP SP+-7
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function ZDApp_ProcessSecMsg
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+-2
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function ZDO_SrcRtgIndCB
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+-2
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function ZDApp_LeaveUpdate
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond194) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond194) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond194) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond194) CFA_SP SP+-2
          CFI (cfiCond194) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond195) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond195) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond195) CFA_SP SP+-2
          CFI (cfiCond195) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker196 Using cfiCommon1
          CFI (cfiPicker196) NoFunction
          CFI (cfiPicker196) Picker
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiPicker196
// 3694 
// 3695 /*********************************************************************
// 3696  * @fn          ZDApp_InitZdoCBFunc
// 3697  *
// 3698  * @brief       Call this function to initialize zdoCBFunc[]
// 3699  *
// 3700  * @param       none
// 3701  *
// 3702  * @return      none
// 3703  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3704 void ZDApp_InitZdoCBFunc( void )
ZDApp_InitZdoCBFunc:
          CFI Block cfiBlock197 Using cfiCommon0
          CFI Function ZDApp_InitZdoCBFunc
        CODE
// 3705 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3706   uint8 i;
// 3707 
// 3708   for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
        MOV     R2,#0x0
// 3709   {
// 3710     zdoCBFunc[i] = NULL;
??ZDApp_InitZdoCBFunc_0:
        MOV     A,R2
        ADD     A,0xE0 /* A   */
        LCALL   ?Subroutine25 & 0xFFFF
// 3711   }
??CrossCallReturnLabel_23:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x9
        JC      ??ZDApp_InitZdoCBFunc_0
// 3712 }
        LJMP    ??Subroutine33_0 & 0xFFFF
          CFI EndBlock cfiBlock197
// 3713 
// 3714 /*********************************************************************
// 3715  * @fn          ZDO_RegisterForZdoCB
// 3716  *
// 3717  * @brief       Call this function to register the higher layer (for
// 3718  *              example, the Application layer or MT layer) with ZDO
// 3719  *              callbacks to get notified of some ZDO indication like
// 3720  *              existence of a concentrator or receipt of a source
// 3721  *              route record.
// 3722  *
// 3723  * @param       indID - ZDO Indication ID
// 3724  * @param       pFn   - Callback function pointer
// 3725  *
// 3726  * @return      ZSuccess - successful, ZInvalidParameter if not
// 3727  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3728 ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
ZDO_RegisterForZdoCB:
          CFI Block cfiBlock198 Using cfiCommon0
          CFI Function ZDO_RegisterForZdoCB
        CODE
// 3729 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R4,A
// 3730   // Check the range of the indication ID
// 3731   if ( indID < MAX_ZDO_CB_FUNC )
        CLR     C
        SUBB    A,#0x9
        JNC     ??ZDO_RegisterForZdoCB_0
// 3732   {
// 3733     zdoCBFunc[indID] = pFn;
        MOV     A,R4
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL   ??Subroutine42_0 & 0xFFFF
// 3734     return ZSuccess;
??CrossCallReturnLabel_82:
        MOV     R1,#0x0
        SJMP    ??ZDO_RegisterForZdoCB_1
// 3735   }
// 3736 
// 3737   return ZInvalidParameter;
??ZDO_RegisterForZdoCB_0:
        MOV     R1,#0x2
??ZDO_RegisterForZdoCB_1:
        LJMP    ??Subroutine33_0 & 0xFFFF
// 3738 }
          CFI EndBlock cfiBlock198

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond199 Using cfiCommon0
          CFI Function ZDO_ConcentratorIndicationCB
          CFI Conditional ??CrossCallReturnLabel_83
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond200 Using cfiCommon0
          CFI (cfiCond200) Function ZDO_SrcRtgIndCB
          CFI (cfiCond200) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond200) CFA_SP SP+-2
          CFI (cfiCond200) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker201 Using cfiCommon1
          CFI (cfiPicker201) NoFunction
          CFI (cfiPicker201) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
          CFI EndBlock cfiCond199
          CFI EndBlock cfiCond200
          CFI EndBlock cfiPicker201
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine42_0:
          CFI Block cfiCond202 Using cfiCommon0
          CFI Function ZDApp_RestoreNetworkState
          CFI Conditional ??CrossCallReturnLabel_78
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond203) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond203) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond203) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond203) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-2
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function ZDO_JoinConfirmCB
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond204) CFA_SP SP+-2
          CFI (cfiCond204) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond205 Using cfiCommon0
          CFI (cfiCond205) Function ZDO_JoinConfirmCB
          CFI (cfiCond205) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond205) CFA_SP SP+-2
          CFI (cfiCond205) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond206 Using cfiCommon0
          CFI (cfiCond206) Function ZDO_RegisterForZdoCB
          CFI (cfiCond206) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond206) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond206) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond206) CFA_SP SP+-7
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function ZDO_ConcentratorIndicationCB
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond207) CFA_SP SP+-2
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond208 Using cfiCommon0
          CFI (cfiCond208) Function ZDO_SrcRtgIndCB
          CFI (cfiCond208) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond208) CFA_SP SP+-2
          CFI (cfiCond208) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker209 Using cfiCommon1
          CFI (cfiPicker209) NoFunction
          CFI (cfiPicker209) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiCond205
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiCond208
          CFI EndBlock cfiPicker209
// 3739 
// 3740 /*********************************************************************
// 3741  * @fn          ZDO_DeregisterForZdoCB
// 3742  *
// 3743  * @brief       Call this function to de-register the higher layer (for
// 3744  *              example, the Application layer or MT layer) with ZDO
// 3745  *              callbacks to get notified of some ZDO indication like
// 3746  *              existence of a concentrator or receipt of a source
// 3747  *              route record.
// 3748  *
// 3749  * @param       indID - ZDO Indication ID
// 3750  *
// 3751  * @return      ZSuccess - successful, ZInvalidParameter if not
// 3752  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3753 ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
ZDO_DeregisterForZdoCB:
          CFI Block cfiBlock210 Using cfiCommon0
          CFI Function ZDO_DeregisterForZdoCB
        CODE
// 3754 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R2,A
// 3755   // Check the range of the indication ID
// 3756   if ( indID < MAX_ZDO_CB_FUNC )
        CLR     C
        SUBB    A,#0x9
        JNC     ??ZDO_DeregisterForZdoCB_0
// 3757   {
// 3758     zdoCBFunc[indID] = NULL;
        MOV     A,R2
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_18:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 3759     return ZSuccess;
        MOV     R1,A
        SJMP    ??ZDO_DeregisterForZdoCB_1
// 3760   }
// 3761 
// 3762   return ZInvalidParameter;
??ZDO_DeregisterForZdoCB_0:
        MOV     R1,#0x2
??ZDO_DeregisterForZdoCB_1:
        LJMP    ??Subroutine33_0 & 0xFFFF
// 3763 }
          CFI EndBlock cfiBlock210

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond211 Using cfiCommon0
          CFI Function ZDO_RegisterForZdoCB
          CFI Conditional ??CrossCallReturnLabel_17
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond212 Using cfiCommon0
          CFI (cfiCond212) Function ZDO_DeregisterForZdoCB
          CFI (cfiCond212) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond212) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond212) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond212) CFA_SP SP+-7
          CFI Block cfiPicker213 Using cfiCommon1
          CFI (cfiPicker213) NoFunction
          CFI (cfiPicker213) Picker
        ADD     A,R1
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_24:
        RET
          CFI EndBlock cfiCond211
          CFI EndBlock cfiCond212
          CFI EndBlock cfiPicker213

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond214 Using cfiCommon0
          CFI Function ZDApp_InitZdoCBFunc
          CFI Conditional ??CrossCallReturnLabel_23
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond215 Using cfiCommon0
          CFI (cfiCond215) Function ZDO_RegisterForZdoCB
          CFI (cfiCond215) Conditional ??CrossCallReturnLabel_24, ??CrossCallReturnLabel_17
          CFI (cfiCond215) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond215) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond215) CFA_SP SP+-9
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function ZDO_DeregisterForZdoCB
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_24, ??CrossCallReturnLabel_18
          CFI (cfiCond216) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond216) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond216) CFA_SP SP+-9
          CFI Block cfiPicker217 Using cfiCommon1
          CFI (cfiPicker217) NoFunction
          CFI (cfiPicker217) Picker
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#zdoCBFunc & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(zdoCBFunc >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond214
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiPicker217
// 3764 
// 3765 #if defined ( ZDP_BIND_VALIDATION )
// 3766 #if defined ( REFLECTOR )
// 3767 /*********************************************************************
// 3768  * @fn          ZDApp_SetPendingBindDefault
// 3769  *
// 3770  * @brief       This function initializes a specific entry of pending
// 3771  *              Bind Request.
// 3772  *
// 3773  * @param       pendBindReq - pointer to the entry in the table
// 3774  *
// 3775  * @return      none
// 3776  */
// 3777 void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq )
// 3778 {
// 3779   // Set it to an initial value
// 3780   osal_memset( pendBindReq, 0xFF, sizeof( ZDO_PendingBindReq_t ) );
// 3781 
// 3782   // We are checking for age 0 for aged-out records
// 3783   pendBindReq->age = 0;
// 3784 }
// 3785 
// 3786 /*********************************************************************
// 3787  * @fn          ZDApp_InitPendingBind
// 3788  *
// 3789  * @brief       This function initializes the buffer that holds
// 3790  *              pending Bind Request messages if no valid NWK address
// 3791  *              exists in Address Manager and a Network Address Req
// 3792  *              has been sent out.
// 3793  *
// 3794  * @param       none
// 3795  *
// 3796  * @return      none
// 3797  */
// 3798 void ZDApp_InitPendingBind( void )
// 3799 {
// 3800   if ( ZDAppPendingBindReq == NULL )
// 3801   {
// 3802     if ( ( ZDAppPendingBindReq = osal_mem_alloc( sizeof(ZDO_PendingBindReq_t) * MAX_PENDING_BIND_REQ ) ) != NULL )
// 3803     {
// 3804       uint8 i;
// 3805 
// 3806       for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
// 3807       {
// 3808         // Set to default values
// 3809         ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
// 3810       }
// 3811     }
// 3812   }
// 3813 }
// 3814 
// 3815 /*********************************************************************
// 3816  * @fn          ZDApp_GetEmptyPendingBindReq
// 3817  *
// 3818  * @brief       This function looks for an empty entry.
// 3819  *
// 3820  * @param       none
// 3821  *
// 3822  * @return      Pointer to entry
// 3823  */
// 3824 ZDO_PendingBindReq_t *ZDApp_GetEmptyPendingBindReq( void )
// 3825 {
// 3826   uint8 i;
// 3827 
// 3828   if ( ZDAppPendingBindReq != NULL )
// 3829   {
// 3830     for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
// 3831     {
// 3832       if ( ZDAppPendingBindReq[i].age == 0 )
// 3833       {
// 3834         return ( &ZDAppPendingBindReq[i] );
// 3835       }
// 3836     }
// 3837   }
// 3838 
// 3839   // No empty entry was found
// 3840   return NULL;
// 3841 }
// 3842 
// 3843 /*********************************************************************
// 3844  * @fn          ZDApp_ProcessPendingBindReq
// 3845  *
// 3846  * @brief       Process pending entry based on EXT address.
// 3847  *
// 3848  * @param       extAddr - of device to look up
// 3849  *
// 3850  * @return      none
// 3851  */
// 3852 void ZDApp_ProcessPendingBindReq( uint8 *extAddr )
// 3853 {
// 3854   uint8 i;
// 3855 
// 3856   // Loop through all the pending entries for that Ext Address
// 3857   // to create Bind Entries and send Bind Rsp
// 3858   if ( ZDAppPendingBindReq != NULL )
// 3859   {
// 3860     for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
// 3861     {
// 3862       if ( osal_memcmp( ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr,
// 3863                         extAddr, Z_EXTADDR_LEN ) == TRUE )
// 3864       {
// 3865         uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
// 3866 
// 3867         // Add Bind entry
// 3868         if ( APSME_BindRequest( ZDAppPendingBindReq[i].bindReq.srcEndpoint,
// 3869                                 ZDAppPendingBindReq[i].bindReq.clusterID,
// 3870                                 &(ZDAppPendingBindReq[i].bindReq.dstAddress),
// 3871                                 ZDAppPendingBindReq[i].bindReq.dstEndpoint ) == ZSuccess )
// 3872         {
// 3873           // valid entry
// 3874           bindStat = ZDP_SUCCESS;
// 3875 
// 3876           // Notify to save info into NV
// 3877           ZDApp_NVUpdate();
// 3878         }
// 3879 
// 3880         // Send back a response message
// 3881         ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq, &(ZDAppPendingBindReq[i].srcAddr),
// 3882                      bindStat, ZDAppPendingBindReq[i].securityUse );
// 3883 
// 3884         // Set the pending request entry to default values
// 3885         ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
// 3886       }
// 3887     }
// 3888   }
// 3889 }
// 3890 
// 3891 /*********************************************************************
// 3892  * @fn          ZDApp_AgeOutPendingBindEntry
// 3893  *
// 3894  * @brief       Age out pending Bind Req entries.
// 3895  *
// 3896  * @param       none
// 3897  *
// 3898  * @return      none
// 3899  */
// 3900 void ZDApp_AgeOutPendingBindEntry( void )
// 3901 {
// 3902   uint8 i;
// 3903   bool entryFound = FALSE;
// 3904 
// 3905   if ( ZDAppPendingBindReq != NULL )
// 3906   {
// 3907     for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
// 3908     {
// 3909       if ( ZDAppPendingBindReq[i].age > 1 )
// 3910       {
// 3911         ZDAppPendingBindReq[i].age--;
// 3912 
// 3913         entryFound = TRUE;
// 3914       }
// 3915       else if ( ZDAppPendingBindReq[i].age == 1 )
// 3916       {
// 3917         // The record has aged out and has valid data
// 3918         AddrMgrEntry_t entry;
// 3919         uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
// 3920 
// 3921         entry.user = ADDRMGR_USER_BINDING;
// 3922 
// 3923         // Remove the entry in address manager so we do not keep entries
// 3924         // with invalid addresses
// 3925         AddrMgrExtAddrSet( entry.extAddr, ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr );
// 3926 
// 3927         if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
// 3928         {
// 3929           if ( entry.nwkAddr == INVALID_NODE_ADDR )
// 3930           {
// 3931             // Release the entry that contains an invalid NWK address
// 3932             AddrMgrEntryRelease( &entry );
// 3933           }
// 3934         }
// 3935 
// 3936         // Send the Bind Response with failure status
// 3937         ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq,
// 3938                      &(ZDAppPendingBindReq[i].srcAddr),
// 3939                      bindStat, ZDAppPendingBindReq[i].securityUse );
// 3940 
// 3941         // Clear the record and set to default values
// 3942         ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
// 3943       }
// 3944     }
// 3945   }
// 3946 
// 3947   if ( entryFound == FALSE )
// 3948   {
// 3949     osal_stop_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT );
// 3950   }
// 3951   else
// 3952   {
// 3953     osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
// 3954                         AGE_OUT_PEND_BIND_REQ_DELAY );
// 3955   }
// 3956 }
// 3957 #endif
// 3958 #endif
// 3959 
// 3960 /*********************************************************************
// 3961  * @fn          ZDO_ChangeState
// 3962  *
// 3963  * @brief       Chance the device state
// 3964  *
// 3965  * @param       state - new state
// 3966  *
// 3967  * @return      none
// 3968  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3969 void ZDApp_ChangeState( devStates_t state )
ZDApp_ChangeState:
          CFI Block cfiBlock218 Using cfiCommon0
          CFI Function ZDApp_ChangeState
        CODE
// 3970 {
        FUNCALL ZDApp_ChangeState, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 3971   if ( devState != state )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,R6
        JZ      ??ZDApp_ChangeState_0
// 3972   {
// 3973     devState = state;
        MOV     A,R6
        MOVX    @DPTR,A
// 3974     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
// 3975   }
// 3976 }
??ZDApp_ChangeState_0:
        LJMP    ??Subroutine29_0 & 0xFFFF
          CFI EndBlock cfiBlock218
// 3977 
// 3978 /*********************************************************************
// 3979  * @fn      ZDApp_SetRejoinScanDuration()
// 3980  *
// 3981  * @brief   Sets scan duration for rejoin for an end device
// 3982  *
// 3983  * @param   rejoinScanDuration - milliseconds
// 3984  *
// 3985  * @return  none
// 3986  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3987 void ZDApp_SetRejoinScanDuration( uint32 rejoinScanDuration )
ZDApp_SetRejoinScanDuration:
          CFI Block cfiBlock219 Using cfiCommon0
          CFI Function ZDApp_SetRejoinScanDuration
        CODE
// 3988 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R4
        MOV     ?V3,R5
// 3989   zgDefaultRejoinScan = rejoinScanDuration;
        MOV     DPTR,#zgDefaultRejoinScan
          CFI EndBlock cfiBlock219
        REQUIRE ?Subroutine8
        ; // Fall through to label ?Subroutine8
// 3990 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiBlock220 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R0,#?V0
        LCALL   ?L_MOV_TO_X
        LJMP    ??Subroutine35_0 & 0xFFFF
          CFI EndBlock cfiBlock220
// 3991 
// 3992 /*********************************************************************
// 3993  * @fn      ZDApp_SetRejoinBackoffDuration()
// 3994  *
// 3995  * @brief   Sets rejoin backoff duration for rejoin for an end device
// 3996  *
// 3997  * @param   rejoinBackoffDuration - milliseconds
// 3998  *
// 3999  * @return  none
// 4000  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 4001 void ZDApp_SetRejoinBackoffDuration( uint32 rejoinBackoffDuration )
ZDApp_SetRejoinBackoffDuration:
          CFI Block cfiBlock221 Using cfiCommon0
          CFI Function ZDApp_SetRejoinBackoffDuration
        CODE
// 4002 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R4
        MOV     ?V3,R5
// 4003   zgDefaultRejoinBackoff = rejoinBackoffDuration;
        MOV     DPTR,#zgDefaultRejoinBackoff
        SJMP    ?Subroutine8
// 4004 }
          CFI EndBlock cfiBlock221
// 4005 
// 4006 /*********************************************************************
// 4007  * @fn          ZDApp_SetParentAnnceTimer
// 4008  *
// 4009  * @brief       This function sets up the link status timer.
// 4010  *
// 4011  * @param       none
// 4012  *
// 4013  * @return      none
// 4014  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 4015 void ZDApp_SetParentAnnceTimer( void )
ZDApp_SetParentAnnceTimer:
          CFI Block cfiBlock222 Using cfiCommon0
          CFI Function ZDApp_SetParentAnnceTimer
        CODE
// 4016 {
        FUNCALL ZDApp_SetParentAnnceTimer, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SetParentAnnceTimer, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 4017   // Parent Announce shall be sent no earlier than 10 seconds
// 4018   uint32 timeout = 10000;
// 4019 
// 4020   // Add with jitter of up to 10 seconds
// 4021   timeout += (osal_rand() & 0x2710);
        ; Setup parameters for call to function osal_rand
        LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
// 4022 
// 4023   // Set timer to send the message
// 4024   osal_start_timerEx( ZDAppTaskID, ZDO_PARENT_ANNCE_EVT, timeout );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        ANL     A,#0x10
        MOV     ?V0,A
        MOV     A,R3
        ANL     A,#0x27
        MOV     ?V1,A
        CLR     A
        MOV     ?V2,A
        MOV     ?V3,A
        MOV     DPTR,#__Constant_2710
        MOV     R0,#?V0
        LCALL   ?L_ADD_X
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R2,#0x0
        MOV     R3,#0x40
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        LJMP    ?Subroutine7 & 0xFFFF
// 4025 }
          CFI EndBlock cfiBlock222

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for continueJoining>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for prevDevState>`:
        DATA8
        DB 4

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for devStartMode>`:
        DATA8
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDApp_epDesc>`:
        DATA8
        DB 0
        DB 0
        DATA16
        DW ZDAppTaskID
        DW 0H
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDApp_SavedPollRate>`:
        DATA32
        DD 1000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SecInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SecInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessSecEvent::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessSecEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDOInitDeviceEx::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDOInitDeviceEx

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ReadNetworkRestoreState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ReadNetworkRestoreState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDAppDetermineDeviceType::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDAppDetermineDeviceType

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NetworkStartEvt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NetworkStartEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_DeviceAuthEvt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_DeviceAuthEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SaveNetworkStateEvt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SaveNetworkStateEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_RestoreNetworkState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_RestoreNetworkState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_InitUserDesc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_InitUserDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDAppCheckForHoldKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDAppCheckForHoldKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessOSALMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessOSALMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessMsgCBs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessMsgCBs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_RegisterCBs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_RegisterCBs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessSecMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessSecMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessNetworkJoin::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessNetworkJoin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_StoreNwkSecMaterial::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_StoreNwkSecMaterial

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SaveNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SaveNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ForceConcentratorChange::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ForceConcentratorChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ResetNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ResetNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_RestoreNwkSecMaterial::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_RestoreNwkSecMaterial

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_RestoreNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_RestoreNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ResetTimerStart::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ResetTimerStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ResetTimerCancel::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ResetTimerCancel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlSet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlReset::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlBypass::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlBypass

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlStartup::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlStartup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveReset::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveUpdate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NetworkDiscoveryReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NetworkDiscoveryReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_JoinReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_JoinReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_DeviceConfigured::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_DeviceConfigured

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SendEventMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SendEventMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SendMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SendMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_NetworkDiscoveryConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_NetworkDiscoveryConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NwkDescListProcessing::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NwkDescListProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_NetworkFormationConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_NetworkFormationConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_beaconNotifyIndCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_beaconNotifyIndCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_StartRouterConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_StartRouterConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_JoinConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_JoinConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_PermitJoinCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_PermitJoinCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_AddrChangeIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_AddrChangeIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_JoinIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_JoinIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ConcentratorIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ConcentratorIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_LeaveCnf::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_LeaveCnf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_LeaveInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_LeaveInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_SyncIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_SyncIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ManytoOneFailureIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ManytoOneFailureIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_PollConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_PollConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_NetworkStatusCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_NetworkStatusCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AddrMgrWriteNVRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AddrMgrWriteNVRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_UpdateDeviceIndication::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_UpdateDeviceIndication

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_InMsgCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_InMsgCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ChangeMatchDescRespPermission::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ChangeMatchDescRespPermission

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NetworkInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NetworkInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NwkStateUpdateCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NwkStateUpdateCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NodeProfileSync::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NodeProfileSync

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_StartJoiningCycle::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_StartJoiningCycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_StopJoiningCycle::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_StopJoiningCycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_AnnounceNewAddress::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_AnnounceNewAddress

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SendParentAnnce::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SendParentAnnce

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NVUpdate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NVUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_CoordStartPANIDConflictCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_CoordStartPANIDConflictCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_SrcRtgIndCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_SrcRtgIndCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_InitZdoCBFunc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_InitZdoCBFunc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_RegisterForZdoCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_RegisterForZdoCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_DeregisterForZdoCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_DeregisterForZdoCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ChangeState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ChangeState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SetRejoinScanDuration::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SetRejoinScanDuration

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SetRejoinBackoffDuration::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SetRejoinBackoffDuration

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SetParentAnnceTimer::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SetParentAnnceTimer

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {255, 0, 0, 0, 0, 0, 0, 0}>`:
        DB 255
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_64:
        DD 100

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_4e2:
        DD 1250

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_258:
        DD 600

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2bc:
        DD 700

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2710:
        DD 10000

        END
// 4026 
// 4027 /*********************************************************************
// 4028 *********************************************************************/
// 
// 8 256 bytes in segment BANKED_CODE
//   450 bytes in segment BANK_RELAYS
//    14 bytes in segment XDATA_I
//    14 bytes in segment XDATA_ID
//    48 bytes in segment XDATA_ROM_C
//    65 bytes in segment XDATA_Z
// 
// 8 720 bytes of CODE  memory
//    24 bytes of CONST memory (+ 24 bytes shared)
//    79 bytes of XDATA memory
//
//Errors: none
//Warnings: none
