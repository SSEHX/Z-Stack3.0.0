///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               05/Nov/2017  14:38:54
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Components\stack\bdb\bdb_FindingAndBinding.c
//    Command line       =  
//        -f
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Components\stack\bdb\bdb_FindingAndBinding.c
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
//        xPOWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D
//        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
//        xMT_APP_CNF_FUNC -D LEGACY_LCD_DEBUG -D LCD_SUPPORTED=DEBUG -D
//        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D
//        ZCL_IDENTIFY -D ZCL_SCENES -D ZCL_GROUPS -lC
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List
//        -lA
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List
//        --diag_suppress Pe001,Pa010 -o
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\
//        -I
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\Source\
//        -I
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\Source\
//        -I
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\
//        -I
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\gp\
//        -I
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
//        -I
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List\bdb_FindingAndBinding.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME bdb_FindingAndBinding

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_X
        EXTERN ?L_MOV_X
        EXTERN ?L_MUL
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_DIV_MOD
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??bdb_BindIfMatch::?relay`
        FUNCTION `??bdb_BindIfMatch::?relay`,0203H
        PUBLIC `??bdb_FindIfAppCluster::?relay`
        FUNCTION `??bdb_FindIfAppCluster::?relay`,0203H
        PUBLIC `??bdb_GetFBInitiatorStatus::?relay`
        FUNCTION `??bdb_GetFBInitiatorStatus::?relay`,0203H
        PUBLIC `??bdb_RegisterBindNotificationCB::?relay`
        FUNCTION `??bdb_RegisterBindNotificationCB::?relay`,0203H
        PUBLIC `??bdb_RegisterIdentifyTimeChangeCB::?relay`
        FUNCTION `??bdb_RegisterIdentifyTimeChangeCB::?relay`,0203H
        PUBLIC `??bdb_SendIdentifyQuery::?relay`
        FUNCTION `??bdb_SendIdentifyQuery::?relay`,0203H
        PUBLIC `??bdb_SendSimpleDescReq::?relay`
        FUNCTION `??bdb_SendSimpleDescReq::?relay`,0203H
        PUBLIC `??bdb_SetIdentifyActiveEndpoint::?relay`
        FUNCTION `??bdb_SetIdentifyActiveEndpoint::?relay`,0203H
        PUBLIC `??bdb_ZclIdentifyQueryCmdInd::?relay`
        FUNCTION `??bdb_ZclIdentifyQueryCmdInd::?relay`,0203H
        PUBLIC `??bdb_exitFindingBindingWStatus::?relay`
        FUNCTION `??bdb_exitFindingBindingWStatus::?relay`,0203H
        PUBLIC `??bdb_findRespondentNode::?relay`
        FUNCTION `??bdb_findRespondentNode::?relay`,0203H
        PUBLIC `??bdb_getRespondentRetry::?relay`
        FUNCTION `??bdb_getRespondentRetry::?relay`,0203H
        PUBLIC `??bdb_setEpDescListToActiveEndpoint::?relay`
        FUNCTION `??bdb_setEpDescListToActiveEndpoint::?relay`,0203H
        FUNCTION `??bdb_zclFindingBindingAddBindEntry::?relay`,0203H
        PUBLIC `??bdb_zclFindingBindingEpType::?relay`
        FUNCTION `??bdb_zclFindingBindingEpType::?relay`,0203H
        FUNCTION `??bdb_zclSimpleDescClusterListClean::?relay`,0203H
        PUBWEAK __Constant_2710
        PUBWEAK __Constant_3
        PUBWEAK __Constant_3e7
        PUBWEAK __Constant_3e8
        PUBLIC bdbIndentifyActiveEndpoint
        PUBLIC bdb_BindIfMatch
        FUNCTION bdb_BindIfMatch,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 44, STACK
        PUBLIC bdb_FindIfAppCluster
        FUNCTION bdb_FindIfAppCluster,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_FindingBindingTargetSimpleDesc
        PUBLIC bdb_GetFBInitiatorStatus
        FUNCTION bdb_GetFBInitiatorStatus,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC bdb_RegisterBindNotificationCB
        FUNCTION bdb_RegisterBindNotificationCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_RegisterIdentifyTimeChangeCB
        FUNCTION bdb_RegisterIdentifyTimeChangeCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_SendIdentifyQuery
        FUNCTION bdb_SendIdentifyQuery,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC bdb_SendSimpleDescReq
        FUNCTION bdb_SendSimpleDescReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC bdb_SetIdentifyActiveEndpoint
        FUNCTION bdb_SetIdentifyActiveEndpoint,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_ZclIdentifyQueryCmdInd
        FUNCTION bdb_ZclIdentifyQueryCmdInd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bdb_ZclType1Clusters
        PUBLIC bdb_ZclType2Clusters
        PUBLIC bdb_exitFindingBindingWStatus
        FUNCTION bdb_exitFindingBindingWStatus,021203H
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bdb_findRespondentNode
        FUNCTION bdb_findRespondentNode,0203H
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_getRespondentRetry
        FUNCTION bdb_getRespondentRetry,0203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_setEpDescListToActiveEndpoint
        FUNCTION bdb_setEpDescListToActiveEndpoint,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION bdb_zclFindingBindingAddBindEntry,0a1203H
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC bdb_zclFindingBindingEpType
        FUNCTION bdb_zclFindingBindingEpType,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION bdb_zclSimpleDescClusterListClean,0a1203H
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC grpName
        PUBLIC pfnBindNotificationCB
        PUBLIC pfnIdentifyTimeChangeCB
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
ZDO_AnyClusterMatches SYMBOL "ZDO_AnyClusterMatches"
`??ZDO_AnyClusterMatches::?relay` SYMBOL "?relay", ZDO_AnyClusterMatches
ZDO_ParseSimpleDescBuf SYMBOL "ZDO_ParseSimpleDescBuf"
`??ZDO_ParseSimpleDescBuf::?relay` SYMBOL "?relay", ZDO_ParseSimpleDescBuf
ZDP_SimpleDescReq   SYMBOL "ZDP_SimpleDescReq"
`??ZDP_SimpleDescReq::?relay` SYMBOL "?relay", ZDP_SimpleDescReq
bdb_AddRespondentNode SYMBOL "bdb_AddRespondentNode"
`??bdb_AddRespondentNode::?relay` SYMBOL "?relay", bdb_AddRespondentNode
bdb_getZCLFrameCounter SYMBOL "bdb_getZCLFrameCounter"
`??bdb_getZCLFrameCounter::?relay` SYMBOL "?relay", bdb_getZCLFrameCounter
bdb_reportCommissioningState SYMBOL "bdb_reportCommissioningState"
`??bdb_reportCommissioningState::?relay` SYMBOL "?relay", bdb_reportCommissioningState
osal_get_timeoutEx  SYMBOL "osal_get_timeoutEx"
`??osal_get_timeoutEx::?relay` SYMBOL "?relay", osal_get_timeoutEx
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
zclGeneral_SendAddGroupRequest SYMBOL "zclGeneral_SendAddGroupRequest"
`??zclGeneral_SendAddGroupRequest::?relay` SYMBOL "?relay", zclGeneral_SendAddGroupRequest
zcl_SendCommand     SYMBOL "zcl_SendCommand"
`??zcl_SendCommand::?relay` SYMBOL "?relay", zcl_SendCommand
bdb_BindIfMatch     SYMBOL "bdb_BindIfMatch"
`??bdb_BindIfMatch::?relay` SYMBOL "?relay", bdb_BindIfMatch
bdb_FindIfAppCluster SYMBOL "bdb_FindIfAppCluster"
`??bdb_FindIfAppCluster::?relay` SYMBOL "?relay", bdb_FindIfAppCluster
bdb_GetFBInitiatorStatus SYMBOL "bdb_GetFBInitiatorStatus"
`??bdb_GetFBInitiatorStatus::?relay` SYMBOL "?relay", bdb_GetFBInitiatorStatus
bdb_RegisterBindNotificationCB SYMBOL "bdb_RegisterBindNotificationCB"
`??bdb_RegisterBindNotificationCB::?relay` SYMBOL "?relay", bdb_RegisterBindNotificationCB
bdb_RegisterIdentifyTimeChangeCB SYMBOL "bdb_RegisterIdentifyTimeChangeCB"
`??bdb_RegisterIdentifyTimeChangeCB::?relay` SYMBOL "?relay", bdb_RegisterIdentifyTimeChangeCB
bdb_SendIdentifyQuery SYMBOL "bdb_SendIdentifyQuery"
`??bdb_SendIdentifyQuery::?relay` SYMBOL "?relay", bdb_SendIdentifyQuery
bdb_SendSimpleDescReq SYMBOL "bdb_SendSimpleDescReq"
`??bdb_SendSimpleDescReq::?relay` SYMBOL "?relay", bdb_SendSimpleDescReq
bdb_SetIdentifyActiveEndpoint SYMBOL "bdb_SetIdentifyActiveEndpoint"
`??bdb_SetIdentifyActiveEndpoint::?relay` SYMBOL "?relay", bdb_SetIdentifyActiveEndpoint
bdb_ZclIdentifyQueryCmdInd SYMBOL "bdb_ZclIdentifyQueryCmdInd"
`??bdb_ZclIdentifyQueryCmdInd::?relay` SYMBOL "?relay", bdb_ZclIdentifyQueryCmdInd
bdb_exitFindingBindingWStatus SYMBOL "bdb_exitFindingBindingWStatus"
`??bdb_exitFindingBindingWStatus::?relay` SYMBOL "?relay", bdb_exitFindingBindingWStatus
bdb_findRespondentNode SYMBOL "bdb_findRespondentNode"
`??bdb_findRespondentNode::?relay` SYMBOL "?relay", bdb_findRespondentNode
bdb_getRespondentRetry SYMBOL "bdb_getRespondentRetry"
`??bdb_getRespondentRetry::?relay` SYMBOL "?relay", bdb_getRespondentRetry
bdb_setEpDescListToActiveEndpoint SYMBOL "bdb_setEpDescListToActiveEndpoint"
`??bdb_setEpDescListToActiveEndpoint::?relay` SYMBOL "?relay", bdb_setEpDescListToActiveEndpoint
bdb_zclFindingBindingEpType SYMBOL "bdb_zclFindingBindingEpType"
`??bdb_zclFindingBindingEpType::?relay` SYMBOL "?relay", bdb_zclFindingBindingEpType

        EXTERN `??ZDO_AnyClusterMatches::?relay`
        FUNCTION `??ZDO_AnyClusterMatches::?relay`,00H
        EXTERN `??ZDO_ParseSimpleDescBuf::?relay`
        FUNCTION `??ZDO_ParseSimpleDescBuf::?relay`,00H
        EXTERN `??ZDP_SimpleDescReq::?relay`
        FUNCTION `??ZDP_SimpleDescReq::?relay`,00H
        EXTERN `??bdb_AddRespondentNode::?relay`
        FUNCTION `??bdb_AddRespondentNode::?relay`,00H
        EXTERN `??bdb_getZCLFrameCounter::?relay`
        FUNCTION `??bdb_getZCLFrameCounter::?relay`,00H
        EXTERN `??bdb_reportCommissioningState::?relay`
        FUNCTION `??bdb_reportCommissioningState::?relay`,00H
        EXTERN `??osal_get_timeoutEx::?relay`
        FUNCTION `??osal_get_timeoutEx::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??zclGeneral_SendAddGroupRequest::?relay`
        FUNCTION `??zclGeneral_SendAddGroupRequest::?relay`,00H
        EXTERN `??zcl_SendCommand::?relay`
        FUNCTION `??zcl_SendCommand::?relay`,00H
        EXTERN ZDO_AnyClusterMatches
        FUNCTION ZDO_AnyClusterMatches,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseSimpleDescBuf
        FUNCTION ZDO_ParseSimpleDescBuf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_SimpleDescReq
        FUNCTION ZDP_SimpleDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdbAttributes
        EXTERN bdbCommissioningProcedureState
        EXTERN bdb_AddRespondentNode
        FUNCTION bdb_AddRespondentNode,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_CurrEpDescriptorList
        EXTERN bdb_FB_InitiatorCurrentCyclesNumber
        EXTERN bdb_HeadEpDescriptorList
        EXTERN bdb_TaskID
        EXTERN bdb_getZCLFrameCounter
        FUNCTION bdb_getZCLFrameCounter,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_reportCommissioningState
        FUNCTION bdb_reportCommissioningState,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN pRespondentCurr
        EXTERN pRespondentHead
        EXTERN pRespondentNext
        EXTERN pbindAddEntry
        EXTERN zclGeneral_SendAddGroupRequest
        FUNCTION zclGeneral_SendAddGroupRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendCommand
        FUNCTION zcl_SendCommand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgPollRate

// C:\Users\admin\Desktop\github\z-stack3.0.0\Components\stack\bdb\bdb_FindingAndBinding.c
//    1 /**************************************************************************************************
//    2   Filename:       bdb_FindingAndBinding.c
//    3   Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
//    4   Revision:       $Revision: - $
//    5 
//    6   Description:    This file contains the Base Device Behavior functions and attributes.
//    7 
//    8 
//    9   Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "bdb.h"
//   45 #include "ZDObject.h"
//   46 #include "bdb_interface.h"
//   47    
//   48 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)   
//   49    
//   50 /*********************************************************************
//   51  * MACROS
//   52  */
//   53  
//   54 /*********************************************************************
//   55  * CONSTANTS
//   56  */
//   57 /*********************************************************************
//   58  * TYPEDEFS
//   59  */
//   60  
//   61  
//   62 /*********************************************************************
//   63  * GLOBAL VARIABLES
//   64  */
//   65 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   66 uint8 grpName[6] = {'G','r','o','u','p','\0'};
grpName:
        DATA8
        DS 6
        REQUIRE `?<Initializer for grpName>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   67 bdbGCB_IdentifyTimeChange_t      pfnIdentifyTimeChangeCB = NULL; 
pfnIdentifyTimeChangeCB:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   68 bdbGCB_BindNotification_t        pfnBindNotificationCB = NULL;
pfnBindNotificationCB:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   69 
//   70 /*********************************************************************
//   71  * EXTERNAL VARIABLES
//   72  */
//   73 
//   74 /*********************************************************************
//   75  * EXTERNAL FUNCTIONS
//   76  */
//   77 
//   78 
//   79 /*********************************************************************
//   80  * LOCAL VARIABLES
//   81  */
//   82 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   83 SimpleDescriptionFormat_t  bdb_FindingBindingTargetSimpleDesc;
bdb_FindingBindingTargetSimpleDesc:
        DS 12
        REQUIRE __INIT_XDATA_Z
//   84 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   85 uint8 bdbIndentifyActiveEndpoint  = 0xFF;
bdbIndentifyActiveEndpoint:
        DATA8
        DS 1
        REQUIRE `?<Initializer for bdbIndentifyActiveEndpoint>`
        REQUIRE __INIT_XDATA_I
//   86 
//   87 //Your JOB:
//   88 //Remove the clusters that your application do not use. This will save some flash and processing
//   89 //when looking into matching clusters during the finding & binding procedure

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   90 const cId_t bdb_ZclType1Clusters[] =
bdb_ZclType1Clusters:
        DATA16
        DW 5
        DW 6
        DW 8
        DW 9
        DW 22
        DW 258
        DW 514
        DW 515
        DW 768
        DW 769
        DW 1281
        DW 1282
        DW 1536
        DW 1537
        DW 2820
        DW 1556
        DW 1557
        DW 1559
        DW 1792
        DW 1793
        DW 1794
        DW 1795
        DW 2304
        DW 2309
//   91 {
//   92   ZCL_CLUSTER_ID_GEN_SCENES,
//   93   ZCL_CLUSTER_ID_GEN_ON_OFF,
//   94   ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
//   95   ZCL_CLUSTER_ID_GEN_ALARMS,
//   96   ZCL_CLUSTER_ID_GEN_PARTITION,
//   97   ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING,
//   98   ZCL_CLUSTER_ID_HVAC_FAN_CONTROL,
//   99   ZCL_CLUSTER_ID_HVAC_DIHUMIDIFICATION_CONTROL,
//  100   ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
//  101   ZCL_CLUSTER_ID_LIGHTING_BALLAST_CONFIG,
//  102   ZCL_CLUSTER_ID_SS_IAS_ACE,
//  103   ZCL_CLUSTER_ID_SS_IAS_WD,
//  104   ZCL_CLUSTER_ID_PI_GENERIC_TUNNEL,
//  105   ZCL_CLUSTER_ID_PI_BACNET_PROTOCOL_TUNNEL,
//  106   ZCL_CLUSTER_ID_HA_ELECTRICAL_MEASUREMENT,
//  107   ZCL_CLUSTER_ID_PI_11073_PROTOCOL_TUNNEL,
//  108   ZCL_CLUSTER_ID_PI_ISO7818_PROTOCOL_TUNNEL,
//  109   ZCL_CLUSTER_ID_PI_RETAIL_TUNNEL,
//  110   ZCL_CLUSTER_ID_SE_PRICE,
//  111   ZCL_CLUSTER_ID_SE_DRLC,
//  112   ZCL_CLUSTER_ID_SE_METERING,
//  113   ZCL_CLUSTER_ID_SE_MESSAGING,
//  114   ZCL_CLUSTER_ID_TELECOMMUNICATIONS_INFORMATION,
//  115   ZCL_CLUSTER_ID_TELECOMMUNICATIONS_VOICE_OVER_ZIGBEE,
//  116 };
//  117 
//  118 //Your JOB:
//  119 //Remove the clusters that your application do not use. This will save some flash and processing
//  120 //when looking into matching clusters during the finding & binding procedure

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  121 const cId_t bdb_ZclType2Clusters[] =
bdb_ZclType2Clusters:
        DATA16
        DW 7
        DW 10
        DW 12
        DW 13
        DW 14
        DW 15
        DW 16
        DW 17
        DW 18
        DW 19
        DW 20
        DW 25
        DW 27
        DW 256
        DW 257
        DW 512
        DW 513
        DW 1026
        DW 1024
        DW 1025
        DW 1027
        DW 1028
        DW 1029
        DW 1030
        DW 1280
        DW 1538
        DW 1539
        DW 1540
        DW 1541
        DW 1542
        DW 1543
        DW 1544
        DW 1545
        DW 1546
        DW 1547
        DW 1548
        DW 1549
        DW 1550
        DW 1551
        DW 1552
        DW 1553
        DW 1554
        DW 1555
        DW 1796
        DW 2304
        DW 2816
        DW 2817
        DW 2818
        DW 2819
//  122 {
//  123   ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG,
//  124   ZCL_CLUSTER_ID_GEN_TIME,
//  125   ZCL_CLUSTER_ID_GEN_ANALOG_INPUT_BASIC,
//  126   ZCL_CLUSTER_ID_GEN_ANALOG_OUTPUT_BASIC,
//  127   ZCL_CLUSTER_ID_GEN_ANALOG_VALUE_BASIC,
//  128   ZCL_CLUSTER_ID_GEN_BINARY_INPUT_BASIC,
//  129   ZCL_CLUSTER_ID_GEN_BINARY_OUTPUT_BASIC,
//  130   ZCL_CLUSTER_ID_GEN_BINARY_VALUE_BASIC,
//  131   ZCL_CLUSTER_ID_GEN_MULTISTATE_INPUT_BASIC,
//  132   ZCL_CLUSTER_ID_GEN_MULTISTATE_OUTPUT_BASIC,
//  133   ZCL_CLUSTER_ID_GEN_MULTISTATE_VALUE_BASIC,
//  134   ZCL_CLUSTER_ID_OTA,
//  135   ZCL_CLUSTER_ID_GEN_APPLIANCE_CONTROL,
//  136   ZCL_CLUSTER_ID_CLOSURES_SHADE_CONFIG,
//  137   ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
//  138   ZCL_CLUSTER_ID_HVAC_PUMP_CONFIG_CONTROL,
//  139   ZCL_CLUSTER_ID_HVAC_THERMOSTAT,
//  140   ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT,
//  141   ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT,
//  142   ZCL_CLUSTER_ID_MS_ILLUMINANCE_LEVEL_SENSING_CONFIG,
//  143   ZCL_CLUSTER_ID_MS_PRESSURE_MEASUREMENT,
//  144   ZCL_CLUSTER_ID_MS_FLOW_MEASUREMENT,
//  145   ZCL_CLUSTER_ID_MS_RELATIVE_HUMIDITY,
//  146   ZCL_CLUSTER_ID_MS_OCCUPANCY_SENSING,
//  147   ZCL_CLUSTER_ID_SS_IAS_ZONE,
//  148   ZCL_CLUSTER_ID_PI_ANALOG_INPUT_BACNET_REG,
//  149   ZCL_CLUSTER_ID_PI_ANALOG_INPUT_BACNET_EXT,
//  150   ZCL_CLUSTER_ID_PI_ANALOG_OUTPUT_BACNET_REG,
//  151   ZCL_CLUSTER_ID_PI_ANALOG_OUTPUT_BACNET_EXT,
//  152   ZCL_CLUSTER_ID_PI_ANALOG_VALUE_BACNET_REG,
//  153   ZCL_CLUSTER_ID_PI_ANALOG_VALUE_BACNET_EXT,
//  154   ZCL_CLUSTER_ID_PI_BINARY_INPUT_BACNET_REG,
//  155   ZCL_CLUSTER_ID_PI_BINARY_INPUT_BACNET_EXT,
//  156   ZCL_CLUSTER_ID_PI_BINARY_OUTPUT_BACNET_REG,
//  157   ZCL_CLUSTER_ID_PI_BINARY_OUTPUT_BACNET_EXT,
//  158   ZCL_CLUSTER_ID_PI_BINARY_VALUE_BACNET_REG,
//  159   ZCL_CLUSTER_ID_PI_BINARY_VALUE_BACNET_EXT,
//  160   ZCL_CLUSTER_ID_PI_MULTISTATE_INPUT_BACNET_REG,
//  161   ZCL_CLUSTER_ID_PI_MULTISTATE_INPUT_BACNET_EXT,
//  162   ZCL_CLUSTER_ID_PI_MULTISTATE_OUTPUT_BACNET_REG,
//  163   ZCL_CLUSTER_ID_PI_MULTISTATE_OUTPUT_BACNET_EXT,
//  164   ZCL_CLUSTER_ID_PI_MULTISTATE_VALUE_BACNET_REG,
//  165   ZCL_CLUSTER_ID_PI_MULTISTATE_VALUE_BACNET_EXT,
//  166   ZCL_CLUSTER_ID_SE_TUNNELING,
//  167   ZCL_CLUSTER_ID_TELECOMMUNICATIONS_INFORMATION,
//  168   ZCL_CLUSTER_ID_HA_APPLIANCE_IDENTIFICATION,
//  169   ZCL_CLUSTER_ID_HA_METER_IDENTIFICATION,
//  170   ZCL_CLUSTER_ID_HA_APPLIANCE_EVENTS_ALERTS,
//  171   ZCL_CLUSTER_ID_HA_APPLIANCE_STATISTICS,
//  172 };
//  173 
//  174  /*********************************************************************
//  175  * LOCAL FUNCTIONS
//  176  */
//  177 static ZStatus_t bdb_zclFindingBindingAddBindEntry( byte SrcEndpInt,
//  178                                   uint16 BindClusterId,
//  179                                   byte Cnt,                 
//  180                                   uint16 * ClusterList,
//  181                                   zAddrType_t *DstAddr, byte DstEndpInt );
//  182 
//  183 uint8 bdb_FindIfAppCluster( cId_t ClusterId );
//  184 
//  185 
//  186 static void bdb_zclSimpleDescClusterListClean( SimpleDescriptionFormat_t *pSimpleDesc );
//  187 bdbFindingBindingRespondent_t* bdb_findRespondentNode(uint8 endpoint, uint16 shortAddress);
//  188 bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead);
//  189  /*********************************************************************
//  190  * PUBLIC FUNCTIONS
//  191  *********************************************************************/
//  192 void bdb_BindIfMatch( bdbInMsg_t *msgPtr );
//  193 
//  194 
//  195 /*********************************************************************
//  196  * @fn      bdb_SetIdentifyActiveEndpoint
//  197  *
//  198  * @brief   Set the endpoint which will perform the finding and binding (either Target or Initiator)
//  199  *
//  200  * @param   Active endpoint with which perform F&B. If set to 0xFF all endpoints with Identify will be attempted.
//  201  *
//  202  * @return  ZFailure - F&B commissioning mode already requested
//  203  *          ZInvalidParameter - Endpoint specified not found or reserved by Zigbee
//  204  *          ZSuccess - 
//  205  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  206 ZStatus_t bdb_SetIdentifyActiveEndpoint(uint8 activeEndpoint)
bdb_SetIdentifyActiveEndpoint:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function bdb_SetIdentifyActiveEndpoint
        CODE
//  207 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R2,A
//  208   epList_t *bdb_EpDescriptorListTemp = NULL;
//  209   
//  210   //Cannot process the request if no endpoints or F&B is under process
//  211   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_FINDING_BINDING)
        MOV     DPTR,#bdbAttributes + 11
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JNC     ??bdb_SetIdentifyActiveEndpoint_0
//  212   {
//  213     return ZFailure;
        MOV     R1,#0x1
        SJMP    ??bdb_SetIdentifyActiveEndpoint_1
//  214   }
//  215   
//  216   if(activeEndpoint == 0xFF)
??bdb_SetIdentifyActiveEndpoint_0:
        MOV     A,#-0x1
        XRL     A,R2
        JZ      ??bdb_SetIdentifyActiveEndpoint_2
//  217   {
//  218     bdbIndentifyActiveEndpoint = activeEndpoint;
//  219     return ZSuccess;
//  220   }
//  221   
//  222   if((activeEndpoint != 0) && (activeEndpoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
        MOV     A,R2
        JZ      ??bdb_SetIdentifyActiveEndpoint_3
        CLR     C
        SUBB    A,#-0xf
        JNC     ??bdb_SetIdentifyActiveEndpoint_3
//  223   {
//  224     bdb_EpDescriptorListTemp = bdb_HeadEpDescriptorList;
        MOV     DPTR,#bdb_HeadEpDescriptorList
        SJMP    ??bdb_SetIdentifyActiveEndpoint_4
//  225     
//  226     while(bdb_EpDescriptorListTemp != NULL)
//  227     {
//  228       if(bdb_EpDescriptorListTemp->epDesc->endPoint == activeEndpoint)
//  229       {
//  230         bdbIndentifyActiveEndpoint = activeEndpoint;
//  231         return ZSuccess;
//  232       }
//  233       bdb_EpDescriptorListTemp = bdb_EpDescriptorListTemp->nextDesc;
??bdb_SetIdentifyActiveEndpoint_5:
        MOV     DPL,R0
        MOV     DPH,R1
??bdb_SetIdentifyActiveEndpoint_4:
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_33:
        JZ      ??bdb_SetIdentifyActiveEndpoint_3
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R3
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??bdb_SetIdentifyActiveEndpoint_5
??bdb_SetIdentifyActiveEndpoint_2:
        MOV     A,R2
        MOV     DPTR,#bdbIndentifyActiveEndpoint
        MOVX    @DPTR,A
        MOV     R1,#0x0
        SJMP    ??bdb_SetIdentifyActiveEndpoint_1
//  234     }
//  235   }
//  236   
//  237   return ZInvalidParameter;
??bdb_SetIdentifyActiveEndpoint_3:
        MOV     R1,#0x2
??bdb_SetIdentifyActiveEndpoint_1:
        SJMP    ??Subroutine23_0
//  238 }
          CFI EndBlock cfiBlock0
//  239 
//  240 
//  241 /*********************************************************************
//  242  * @fn      bdb_setEpDescListToActiveEndpoint
//  243  *
//  244  * @brief   Set the endpoint list to the active endpoint selected by the application for F&B process
//  245  *
//  246  * @return  Current endpoint descriptor
//  247  */
//  248 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  249 endPointDesc_t* bdb_setEpDescListToActiveEndpoint(void)
bdb_setEpDescListToActiveEndpoint:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function bdb_setEpDescListToActiveEndpoint
        CODE
//  250 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  251   bdb_CurrEpDescriptorList = bdb_HeadEpDescriptorList;
        MOV     DPTR,#bdb_HeadEpDescriptorList
        LCALL   ??Subroutine22_0 & 0xFFFF
//  252  
//  253   //Check which active endpoit is being requested
//  254   if(bdbIndentifyActiveEndpoint != 0xFF)
??CrossCallReturnLabel_28:
        MOV     DPTR,#bdbIndentifyActiveEndpoint
        MOVX    A,@DPTR
        CPL     A
        JZ      ??CrossCallReturnLabel_30
//  255   {
//  256     //Search for an specific endpoint
//  257     while(bdb_CurrEpDescriptorList != NULL)
??bdb_setEpDescListToActiveEndpoint_0:
        MOV     DPTR,#bdb_CurrEpDescriptorList
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_34:
        JZ      ??bdb_setEpDescListToActiveEndpoint_1
//  258     {
//  259       if(bdb_CurrEpDescriptorList->epDesc->endPoint == bdbIndentifyActiveEndpoint)
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     R0,A
        MOV     DPTR,#bdbIndentifyActiveEndpoint
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      ??bdb_setEpDescListToActiveEndpoint_2
//  260       {
//  261         return bdb_CurrEpDescriptorList->epDesc;
//  262       }
//  263       bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
        LCALL   ?Subroutine3 & 0xFFFF
//  264     }
//  265   }
??CrossCallReturnLabel_29:
        SJMP    ??bdb_setEpDescListToActiveEndpoint_0
//  266   else
//  267   {
//  268     //Look for the first endpoint that has Identify cluster
//  269     while(bdb_CurrEpDescriptorList != NULL)
//  270     {
//  271       if((bdb_CurrEpDescriptorList->epDesc->endPoint != 0) && (bdb_CurrEpDescriptorList->epDesc->endPoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
//  272       {
//  273         return bdb_CurrEpDescriptorList->epDesc;
//  274       }
//  275       bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
??bdb_setEpDescListToActiveEndpoint_3:
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV     DPTR,#bdb_CurrEpDescriptorList
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_35:
        JZ      ??bdb_setEpDescListToActiveEndpoint_1
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_5:
        JZ      ??bdb_setEpDescListToActiveEndpoint_3
        CLR     C
        SUBB    A,#-0xf
        JNC     ??bdb_setEpDescListToActiveEndpoint_3
??bdb_setEpDescListToActiveEndpoint_2:
        MOV     DPTR,#bdb_CurrEpDescriptorList
        LCALL   ?Subroutine10 & 0xFFFF
//  276     }
//  277   }
??CrossCallReturnLabel_10:
        LCALL   ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_63:
        SJMP    ??bdb_setEpDescListToActiveEndpoint_4
//  278   //not found
//  279   return NULL;
??bdb_setEpDescListToActiveEndpoint_1:
        MOV     R2,#0x0
        MOV     R3,#0x0
??bdb_setEpDescListToActiveEndpoint_4:
        SJMP    ??Subroutine23_0
//  280 }
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function bdb_setEpDescListToActiveEndpoint
          CFI Conditional ??CrossCallReturnLabel_4
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond3) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond3) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond3) CFA_SP SP+-7
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_25:
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function bdb_setEpDescListToActiveEndpoint
          CFI Conditional ??CrossCallReturnLabel_29
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond6) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond6) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond6) CFA_SP SP+-7
          CFI Block cfiPicker7 Using cfiCommon1
          CFI (cfiPicker7) NoFunction
          CFI (cfiPicker7) Picker
        MOV     DPTR,#bdb_CurrEpDescriptorList
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_24:
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiPicker7
        REQUIRE ??Subroutine22_0
        ; // Fall through to label ??Subroutine22_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine22_0:
          CFI Block cfiCond8 Using cfiCommon0
          CFI Function bdb_setEpDescListToActiveEndpoint
          CFI Conditional ??CrossCallReturnLabel_28
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond9) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond9) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond9) CFA_SP SP+-7
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond10) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond10) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond10) CFA_SP SP+-7
          CFI Block cfiPicker11 Using cfiCommon1
          CFI (cfiPicker11) NoFunction
          CFI (cfiPicker11) Picker
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV     DPTR,#bdb_CurrEpDescriptorList
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiPicker11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
          CFI EndBlock cfiBlock12
        REQUIRE ??Subroutine23_0
        ; // Fall through to label ??Subroutine23_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine23_0:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock13
//  281 
//  282 
//  283 
//  284 /*********************************************************************
//  285  * @fn      bdb_BindIfMatch
//  286  *
//  287  * @brief   To add binds in local table if a cluster in a simple descriptor
//  288  *          from a remote finding and binding respondent matches
//  289  *
//  290  * @param   msgPtr - pointer to simple descriptor response indication message
//  291  *
//  292  * @return  none
//  293  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  294 void bdb_BindIfMatch( bdbInMsg_t *msgPtr )
bdb_BindIfMatch:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function bdb_BindIfMatch
        CODE
//  295 {
        FUNCALL bdb_BindIfMatch, ZDO_ParseSimpleDescBuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_BindIfMatch, bdb_findRespondentNode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_BindIfMatch, bdb_zclFindingBindingAddBindEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_BindIfMatch, bdb_zclFindingBindingAddBindEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_BindIfMatch, zclGeneral_SendAddGroupRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_BindIfMatch, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_BindIfMatch, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_BindIfMatch, bdb_zclSimpleDescClusterListClean
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_BindIfMatch, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_BindIfMatch, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_BindIfMatch, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_BindIfMatch, bdb_zclSimpleDescClusterListClean
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     ?V0,R2
        MOV     ?V1,R3
//  296   ZStatus_t status;
//  297   zAddrType_t dstAddr;
//  298   uint8 i;
//  299   endPointDesc_t *bdb_CurrEpDescriptor;
//  300   bdbFindingBindingRespondent_t *pCurr;
//  301 #ifdef ZCL_GROUPS  
//  302   afAddrType_t afDstAddr;
//  303   uint8 isBindAdded;
//  304 #endif  
//  305   
//  306   dstAddr.addr.shortAddr = BUILD_UINT16( msgPtr->buf[1], msgPtr->buf[2] );
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  307   dstAddr.addrMode = Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  308   
//  309   ZDO_ParseSimpleDescBuf( &msgPtr->buf[4], &bdb_FindingBindingTargetSimpleDesc );
        ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
        MOV     R4,#bdb_FindingBindingTargetSimpleDesc & 0xff
        MOV     R5,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
        MOV     A,?V0
        ADD     A,#0x6
        MOV     R2,A
        CLR     A
        ADDC    A,?V1
        MOV     R3,A
        LCALL   `??ZDO_ParseSimpleDescBuf::?relay`; Banked call to: ZDO_ParseSimpleDescBuf
//  310   
//  311   pCurr = bdb_findRespondentNode(bdb_FindingBindingTargetSimpleDesc.EndPoint, dstAddr.addr.shortAddr);
        ; Setup parameters for call to function bdb_findRespondentNode
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_54:
        MOV     DPTR,#bdb_FindingBindingTargetSimpleDesc
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??bdb_findRespondentNode::?relay`; Banked call to: bdb_findRespondentNode
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R0,?V4
        MOV     R1,?V5
//  312   
//  313   //Just for safety check this is valid
//  314   if(pCurr != NULL) 
        MOV     A,R0
        ORL     A,R1
        JZ      ??bdb_BindIfMatch_0
//  315   {
//  316     //Mark as processed
//  317     pCurr->attempts = FINDING_AND_BINDING_MAX_ATTEMPTS;
        MOV     A,R0
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,#0x4
        SJMP    ??bdb_BindIfMatch_1
//  318   }
//  319   
//  320   while(bdb_CurrEpDescriptorList != NULL)
//  321   {
//  322 #ifdef ZCL_GROUPS  
//  323     isBindAdded = FALSE;
//  324 #endif
//  325 
//  326     bdb_CurrEpDescriptor = bdb_CurrEpDescriptorList->epDesc;
//  327   
//  328     for(i = 0; i < bdb_CurrEpDescriptor->simpleDesc->AppNumOutClusters; i++)
//  329     {
//  330       //Filter for Application clusters (to bind app clusters only)
//  331       status = bdb_zclFindingBindingAddBindEntry( bdb_CurrEpDescriptor->endPoint,
//  332                               bdb_CurrEpDescriptor->simpleDesc->pAppOutClusterList[i],
//  333                               bdb_FindingBindingTargetSimpleDesc.AppNumInClusters,
//  334                               bdb_FindingBindingTargetSimpleDesc.pAppInClusterList,
//  335                               &dstAddr, bdb_FindingBindingTargetSimpleDesc.EndPoint );
//  336 #ifdef ZCL_GROUPS      
//  337       if(status == ZSuccess)
//  338       {
//  339         isBindAdded = TRUE;
//  340       }
//  341 #endif
//  342       
//  343       if ( status == ZApsTableFull )
//  344       {
//  345         break;
//  346       }
//  347       
//  348     }
//  349     
//  350     if(status != ZApsTableFull)
//  351     {
//  352       for(i = 0; i < bdb_CurrEpDescriptor->simpleDesc->AppNumInClusters; i++)
//  353       {
//  354         //Filter for Application clusters (to bind app clusters only)
//  355         status = bdb_zclFindingBindingAddBindEntry( bdb_CurrEpDescriptor->endPoint,
//  356                                 bdb_CurrEpDescriptor->simpleDesc->pAppInClusterList[i],
//  357                                 bdb_FindingBindingTargetSimpleDesc.AppNumOutClusters,
//  358                                 bdb_FindingBindingTargetSimpleDesc.pAppOutClusterList,
//  359                                 &dstAddr, bdb_FindingBindingTargetSimpleDesc.EndPoint );
//  360   #ifdef ZCL_GROUPS      
//  361         if(status == ZSuccess)
//  362         {
//  363           isBindAdded = TRUE;
//  364         }
//  365   #endif
//  366         
//  367         if ( status == ZApsTableFull )
//  368         {
//  369           break;
//  370         }
//  371       }
//  372     }
//  373 
//  374 
//  375 #ifdef ZCL_GROUPS
//  376     // Configure Group
//  377 
//  378     if ( ( isBindAdded == TRUE ) && ( bdbAttributes.bdbCommissioningGroupID != 0xFFFF ) )
//  379     {
//  380       afDstAddr.addr.shortAddr = dstAddr.addr.shortAddr;
//  381       afDstAddr.addrMode = afAddr16Bit;
//  382       afDstAddr.endPoint = bdb_FindingBindingTargetSimpleDesc.EndPoint;
//  383           
//  384       zclGeneral_SendAddGroupRequest( bdb_CurrEpDescriptor->endPoint, &afDstAddr,
//  385                                   COMMAND_GROUP_ADD, bdbAttributes.bdbCommissioningGroupID, grpName,
//  386                                   TRUE, 0x00 );
//  387     }
//  388 #endif
//  389     
//  390     if ( status == ZApsTableFull )
//  391     {
//  392       //If periodic was triggered, then finish it
//  393       if(FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE)                                  
//  394       {
//  395         bdb_FB_InitiatorCurrentCyclesNumber = 0;
//  396         osal_stop_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
//  397       }      
//  398       
//  399       // free messages
//  400       osal_msg_deallocate( (uint8*)msgPtr );
//  401       bdb_zclSimpleDescClusterListClean( &bdb_FindingBindingTargetSimpleDesc );
//  402       osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_SIMPLEDESC_TIMEOUT );
//  403       bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_BINDING_TABLE_FULL );
//  404       
//  405       return;
//  406     }
//  407     
//  408     if(bdbIndentifyActiveEndpoint != 0xFF)
//  409     {
//  410       break;
//  411     }
//  412     
//  413     bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
??bdb_BindIfMatch_2:
        MOV     DPTR,#bdb_CurrEpDescriptorList
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     DPTR,#bdb_CurrEpDescriptorList
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
??bdb_BindIfMatch_1:
        MOVX    @DPTR,A
??bdb_BindIfMatch_0:
        MOV     DPTR,#bdb_CurrEpDescriptorList
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_36:
        JNZ     $+5
        LJMP    ??bdb_BindIfMatch_3 & 0xFFFF
        MOV     R6,#0x0
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     R7,#0x0
        MOV     A,?V4
        ADD     A,#0x4
        MOV     ?V6,A
        CLR     A
        ADDC    A,?V5
        MOV     ?V7,A
        SJMP    ??bdb_BindIfMatch_4
??bdb_BindIfMatch_5:
        MOV     A,#-0x4e
        XRL     A,?V2
        JNZ     $+5
        LJMP    ??bdb_BindIfMatch_6 & 0xFFFF
??bdb_BindIfMatch_7:
        INC     R7
??bdb_BindIfMatch_4:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_6:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R7
        CLR     C
        SUBB    A,R0
        JNC     ??bdb_BindIfMatch_8
        ; Setup parameters for call to function bdb_zclFindingBindingAddBindEntry
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     DPTR,#bdb_FindingBindingTargetSimpleDesc + 7
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV     DPTR,#bdb_FindingBindingTargetSimpleDesc
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPTR,#bdb_FindingBindingTargetSimpleDesc + 6
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_15:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   `??bdb_zclFindingBindingAddBindEntry::?relay`; Banked call to: bdb_zclFindingBindingAddBindEntry
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     A,R1
        MOV     ?V2,A
        JNZ     ??bdb_BindIfMatch_5
        MOV     R6,#0x1
        SJMP    ??bdb_BindIfMatch_7
??bdb_BindIfMatch_8:
        MOV     A,#-0x4e
        XRL     A,?V2
        JZ      ??bdb_BindIfMatch_6
        MOV     R7,#0x0
        SJMP    ??bdb_BindIfMatch_9
??bdb_BindIfMatch_10:
        MOV     R6,#0x1
??bdb_BindIfMatch_11:
        INC     R7
??bdb_BindIfMatch_9:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_7:
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R7
        CLR     C
        SUBB    A,R0
        JNC     ??bdb_BindIfMatch_6
        ; Setup parameters for call to function bdb_zclFindingBindingAddBindEntry
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     DPTR,#bdb_FindingBindingTargetSimpleDesc + 10
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV     DPTR,#bdb_FindingBindingTargetSimpleDesc
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPTR,#bdb_FindingBindingTargetSimpleDesc + 9
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL   `??bdb_zclFindingBindingAddBindEntry::?relay`; Banked call to: bdb_zclFindingBindingAddBindEntry
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     A,R1
        MOV     ?V2,A
        JZ      ??bdb_BindIfMatch_10
        MOV     A,#-0x4e
        XRL     A,?V2
        JNZ     ??bdb_BindIfMatch_11
??bdb_BindIfMatch_6:
        MOV     A,R6
        JZ      ??bdb_BindIfMatch_12
        MOV     DPTR,#bdbAttributes + 8
        MOVX    A,@DPTR
        MOV     ?V6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V7,A
        MOV     A,#-0x1
        XRL     A,?V6
        JNZ     ??bdb_BindIfMatch_13
        MOV     A,#-0x1
        XRL     A,?V7
??bdb_BindIfMatch_13:
        JZ      ??bdb_BindIfMatch_12
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_41:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPTR,#bdb_FindingBindingTargetSimpleDesc
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        ; Setup parameters for call to function zclGeneral_SendAddGroupRequest
        MOV     ?V3,#0x0
        MOV     R0,#?V3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 40)
        MOV     ?V8,#grpName & 0xff
        MOV     ?V9,#(grpName >> 8) & 0xff
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 42)
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 44)
        MOV     R5,#0x1
        MOV     R4,#0x0
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP101_8
        MOV     DPL,?V4
        MOV     DPH,?V5
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zclGeneral_SendAddGroupRequest::?relay`; Banked call to: zclGeneral_SendAddGroupRequest
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
??bdb_BindIfMatch_12:
        MOV     A,#-0x4e
        XRL     A,?V2
        JNZ     ??bdb_BindIfMatch_14
        MOV     DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x40
        MOV     R3,A
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
        ; Setup parameters for call to function bdb_zclSimpleDescClusterListClean
        MOV     R2,#bdb_FindingBindingTargetSimpleDesc & 0xff
        MOV     R3,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
        LCALL   `??bdb_zclSimpleDescClusterListClean::?relay`; Banked call to: bdb_zclSimpleDescClusterListClean
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x0
        MOV     R3,#0x40
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV     R1,#0xc
        LCALL   `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
        SJMP    ??bdb_BindIfMatch_15
??bdb_BindIfMatch_14:
        MOV     DPTR,#bdbIndentifyActiveEndpoint
        MOVX    A,@DPTR
        CPL     A
        JNZ     $+5
        LJMP    ??bdb_BindIfMatch_2 & 0xFFFF
//  414   }
//  415   
//  416   // free messages
//  417   osal_msg_deallocate( (uint8*)msgPtr );
??bdb_BindIfMatch_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
//  418   bdb_zclSimpleDescClusterListClean( &bdb_FindingBindingTargetSimpleDesc );  
        ; Setup parameters for call to function bdb_zclSimpleDescClusterListClean
        MOV     R2,#bdb_FindingBindingTargetSimpleDesc & 0xff
        MOV     R3,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
        LCALL   `??bdb_zclSimpleDescClusterListClean::?relay`; Banked call to: bdb_zclSimpleDescClusterListClean
//  419 }
??bdb_BindIfMatch_15:
        MOV     A,#0x15
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond15 Using cfiCommon0
          CFI Function bdb_BindIfMatch
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function bdb_BindIfMatch
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 43)
          CFI Block cfiPicker17 Using cfiCommon1
          CFI (cfiPicker17) NoFunction
          CFI (cfiPicker17) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R7
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_70:
        MOV     DPL,R2
        MOV     DPH,R3
        RET
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiPicker17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond18 Using cfiCommon0
          CFI Function bdb_BindIfMatch
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function bdb_BindIfMatch
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker20 Using cfiCommon1
          CFI (cfiPicker20) NoFunction
          CFI (cfiPicker20) Picker
        MOV     DPL,?V6
        MOV     DPH,?V7
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_68:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond21 Using cfiCommon0
          CFI Function bdb_BindIfMatch
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function bdb_BindIfMatch
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 43)
          CFI Block cfiPicker23 Using cfiCommon1
          CFI (cfiPicker23) NoFunction
          CFI (cfiPicker23) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV     DPL,?V4
        MOV     DPH,?V5
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiPicker23

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond24 Using cfiCommon0
          CFI Function bdb_SendSimpleDescReq
          CFI Conditional ??CrossCallReturnLabel_31
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function bdb_SendSimpleDescReq
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker26 Using cfiCommon1
          CFI (cfiPicker26) NoFunction
          CFI (cfiPicker26) Picker
        MOV     DPTR,#pRespondentCurr
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiPicker26
        REQUIRE ??Subroutine24_0
        ; // Fall through to label ??Subroutine24_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine24_0:
          CFI Block cfiCond27 Using cfiCommon0
          CFI Function bdb_SendSimpleDescReq
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function bdb_SendSimpleDescReq
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function bdb_SendSimpleDescReq
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker30 Using cfiCommon1
          CFI (cfiPicker30) NoFunction
          CFI (cfiPicker30) Picker
        MOV     DPTR,#pRespondentCurr
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiPicker30
        REQUIRE ??Subroutine25_0
        ; // Fall through to label ??Subroutine25_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine25_0:
          CFI Block cfiCond31 Using cfiCommon0
          CFI Function bdb_SetIdentifyActiveEndpoint
          CFI Conditional ??CrossCallReturnLabel_33
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond32) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond32) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond32) CFA_SP SP+-7
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond33) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond33) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond33) CFA_SP SP+-7
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function bdb_BindIfMatch
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function bdb_zclFindingBindingAddBindEntry
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function bdb_SendSimpleDescReq
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function bdb_SendSimpleDescReq
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function bdb_SendSimpleDescReq
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-2
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function bdb_SendSimpleDescReq
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function bdb_SendSimpleDescReq
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker41 Using cfiCommon1
          CFI (cfiPicker41) NoFunction
          CFI (cfiPicker41) Picker
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiPicker41
//  420 
//  421 /*********************************************************************
//  422  * @fn      bdb_zclFindingBindingEpType
//  423  *
//  424  * @brief   Gives the Ep Type according to application clusters in
//  425  *          simple descriptor
//  426  *
//  427  * @return  epType - If Target, Initiator or both
//  428  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  429 uint8 bdb_zclFindingBindingEpType( endPointDesc_t *epDesc )
bdb_zclFindingBindingEpType:
          CFI Block cfiBlock42 Using cfiCommon0
          CFI Function bdb_zclFindingBindingEpType
        CODE
//  430 {
        FUNCALL bdb_zclFindingBindingEpType, ZDO_AnyClusterMatches
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_zclFindingBindingEpType, ZDO_AnyClusterMatches
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_zclFindingBindingEpType, ZDO_AnyClusterMatches
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_zclFindingBindingEpType, ZDO_AnyClusterMatches
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
//  431   uint8 epType = 0;
        MOV     ?V0,#0x0
//  432   uint8 status;
//  433   uint8 type1ClusterCnt;
//  434   uint8 type2ClusterCnt;
//  435   
//  436   type1ClusterCnt = sizeof( bdb_ZclType1Clusters )/sizeof( uint16 );
//  437   type2ClusterCnt = sizeof( bdb_ZclType2Clusters )/sizeof( uint16 );
//  438   
//  439 
//  440   // Are there matching type 1 on server side?
//  441   status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumInClusters, 
//  442                                   epDesc->simpleDesc->pAppInClusterList,
//  443                                   type1ClusterCnt,
//  444                                   (uint16*)bdb_ZclType1Clusters);
//  445   
//  446   if( status == TRUE )
        MOV     A,R2
        ADD     A,#0x4
        MOV     R6,A
        CLR     A
        ADDC    A,R3
        MOV     R7,A
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV     ?V4,#bdb_ZclType1Clusters & 0xff
        MOV     ?V5,#(bdb_ZclType1Clusters >> 8) & 0xff
        ; Setup parameters for call to function ZDO_AnyClusterMatches
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x18
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??bdb_zclFindingBindingEpType_0
//  447   {
//  448     epType |= BDB_FINDING_AND_BINDING_TARGET;
        MOV     ?V0,#0x2
//  449   }
//  450   
//  451   // Are there matching type 1 on client side?
//  452   status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumOutClusters, 
//  453                                   epDesc->simpleDesc->pAppOutClusterList,
//  454                                   type1ClusterCnt,
//  455                                   (uint16*)bdb_ZclType1Clusters);
//  456   
//  457   if( status == TRUE )
??bdb_zclFindingBindingEpType_0:
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_20:
        ; Setup parameters for call to function ZDO_AnyClusterMatches
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x18
        MOV     DPL,?V2
        MOV     DPH,R1
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_64:
        MOV     DPL,?V2
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??bdb_zclFindingBindingEpType_1
//  458   {
//  459     epType |= BDB_FINDING_AND_BINDING_INITIATOR;
        MOV     A,?V0
        SETB    0xE0 /* A   */.0
        MOV     ?V0,A
//  460   }
//  461   
//  462   // Are there matching type 2 on server side?
//  463   status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumInClusters, 
//  464                                   epDesc->simpleDesc->pAppInClusterList,
//  465                                   type2ClusterCnt,
//  466                                   (uint16*)bdb_ZclType2Clusters);
//  467   
//  468   if( status == TRUE )
??bdb_zclFindingBindingEpType_1:
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV     ?V4,#bdb_ZclType2Clusters & 0xff
        MOV     ?V5,#(bdb_ZclType2Clusters >> 8) & 0xff
        ; Setup parameters for call to function ZDO_AnyClusterMatches
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x31
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??bdb_zclFindingBindingEpType_2
//  469   {
//  470     epType |= BDB_FINDING_AND_BINDING_INITIATOR;
        MOV     A,?V0
        SETB    0xE0 /* A   */.0
        MOV     ?V0,A
//  471   }
//  472   
//  473   // Are there matching type 2 on client side?
//  474   status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumOutClusters, 
//  475                                   epDesc->simpleDesc->pAppOutClusterList,
//  476                                   type2ClusterCnt,
//  477                                   (uint16*)bdb_ZclType2Clusters);
//  478   
//  479   if( status == TRUE )
??bdb_zclFindingBindingEpType_2:
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_43:
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        ; Setup parameters for call to function ZDO_AnyClusterMatches
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x31
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_65:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??bdb_zclFindingBindingEpType_3
//  480   {
//  481     epType |= BDB_FINDING_AND_BINDING_TARGET;
        MOV     A,?V0
        SETB    0xE0 /* A   */.1
        MOV     ?V0,A
//  482   }
//  483 
//  484   return epType;
??bdb_zclFindingBindingEpType_3:
        MOV     R1,?V0
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
//  485 
//  486 }
          CFI EndBlock cfiBlock42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond43 Using cfiCommon0
          CFI Function bdb_zclFindingBindingEpType
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function bdb_zclFindingBindingEpType
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-2
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function bdb_zclFindingBindingEpType
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker46 Using cfiCommon1
          CFI (cfiPicker46) NoFunction
          CFI (cfiPicker46) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_46:
        MOV     ?V2,R0
        RET
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiPicker46

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond47 Using cfiCommon0
          CFI Function bdb_zclFindingBindingEpType
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function bdb_zclFindingBindingEpType
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-2
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker49 Using cfiCommon1
          CFI (cfiPicker49) NoFunction
          CFI (cfiPicker49) Picker
        MOV     DPL,?V2
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_67:
        MOV     DPL,?V2
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiPicker49
//  487 
//  488 /*********************************************************************
//  489  * @fn      bdb_zclFindingBindingAddBindEntry
//  490  *
//  491  * @brief   This function is used to Add an entry to the binding table
//  492  *
//  493  * @param   SrcEndpInt - source endpoint
//  494  * @param   BindClusterId - cluster to try bind
//  495  * @param   Cnt - list of remote clusters
//  496  * @param   ClusterList - pointer to the Object ID list
//  497  * @param   DstAddr - Address of remote node
//  498  * @param   DstEndpInt - EndPoint of remote node
//  499  *
//  500  * @return  status - Success if added
//  501  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  502 static ZStatus_t bdb_zclFindingBindingAddBindEntry( byte SrcEndpInt,
bdb_zclFindingBindingAddBindEntry:
          CFI Block cfiBlock50 Using cfiCommon0
          CFI Function bdb_zclFindingBindingAddBindEntry
        CODE
//  503                                   uint16 BindClusterId,
//  504                                   byte Cnt,                 
//  505                                   uint16 * ClusterList,
//  506                                   zAddrType_t *DstAddr, byte DstEndpInt )
//  507 {
        FUNCALL bdb_zclFindingBindingAddBindEntry, bdb_FindIfAppCluster
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_zclFindingBindingAddBindEntry, ZDO_AnyClusterMatches
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,R1
        MOV     R6,A
        MOV     A,R4
        MOV     R7,A
        MOV     ?V0,R5
//  508   uint8 status;
//  509 
//  510   if ( bdb_FindIfAppCluster ( BindClusterId ) != SUCCESS )
        ; Setup parameters for call to function bdb_FindIfAppCluster
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R2,A
        LCALL   `??bdb_FindIfAppCluster::?relay`; Banked call to: bdb_FindIfAppCluster
        MOV     A,R1
        JNZ     ??bdb_zclFindingBindingAddBindEntry_0
//  511   {
//  512     return ( ZApsFail ); // No App cluster with reportable Attributes
//  513   }
//  514 
//  515   // Are there matching clusters?
//  516   status = ZDO_AnyClusterMatches( Cnt, 
//  517                                   ClusterList,
//  518                                   1,
//  519                                  &BindClusterId);
//  520   if ( status == FALSE )
        ; Setup parameters for call to function ZDO_AnyClusterMatches
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x1
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_55:
        MOV     A,R7
        MOV     R1,A
        LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        JNZ     ??bdb_zclFindingBindingAddBindEntry_1
//  521   {
//  522     return ( ZApsFail ); // No matched Cluster
??bdb_zclFindingBindingAddBindEntry_0:
        MOV     R1,#-0x4f
        SJMP    ??bdb_zclFindingBindingAddBindEntry_2
//  523   }
//  524   
//  525   if ( pbindAddEntry )
??bdb_zclFindingBindingAddBindEntry_1:
        MOV     DPTR,#pbindAddEntry
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_37:
        JZ      ??bdb_zclFindingBindingAddBindEntry_3
//  526   {
//  527     // Add the entry into the binding table
//  528     if ( pbindAddEntry( SrcEndpInt, DstAddr, DstEndpInt,
//  529                            1, &BindClusterId ) )
        ; Setup parameters for indirect call
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R5,#0x1
        MOV     R4,?V0
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_56:
        MOV     A,R6
        MOV     R1,A
        MOV     DPTR,#pbindAddEntry
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?CALL_IND
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V3,R3
        MOV     A,R2
        ORL     A,?V3
        JZ      ??bdb_zclFindingBindingAddBindEntry_4
//  530     {
//  531       return ( ZSuccess );
        MOV     R1,#0x0
        SJMP    ??bdb_zclFindingBindingAddBindEntry_2
//  532     }
//  533     else
//  534     {
//  535       return ( ZApsTableFull );
??bdb_zclFindingBindingAddBindEntry_4:
        MOV     R1,#-0x4e
        SJMP    ??bdb_zclFindingBindingAddBindEntry_2
//  536     }
//  537   }
//  538   else
//  539   {
//  540     return ( ZApsNotSupported );
??bdb_zclFindingBindingAddBindEntry_3:
        MOV     R1,#-0x4a
??bdb_zclFindingBindingAddBindEntry_2:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
//  541   }
//  542 }
          CFI EndBlock cfiBlock50

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond51 Using cfiCommon0
          CFI Function bdb_setEpDescListToActiveEndpoint
          CFI Conditional ??CrossCallReturnLabel_10
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function bdb_zclFindingBindingAddBindEntry
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-2
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function bdb_SendSimpleDescReq
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker54 Using cfiCommon1
          CFI (cfiPicker54) NoFunction
          CFI (cfiPicker54) Picker
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_27:
        RET
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiPicker54

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond55 Using cfiCommon0
          CFI Function bdb_setEpDescListToActiveEndpoint
          CFI Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_4
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-9
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_5
          CFI (cfiCond56) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond56) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond56) CFA_SP SP+-9
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_24, ??CrossCallReturnLabel_29
          CFI (cfiCond57) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond57) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond57) CFA_SP SP+-9
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_24, ??CrossCallReturnLabel_30
          CFI (cfiCond58) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond58) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond58) CFA_SP SP+-9
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_10
          CFI (cfiCond59) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond59) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond59) CFA_SP SP+-9
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function bdb_zclFindingBindingAddBindEntry
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_11
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-4
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function bdb_SendSimpleDescReq
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_12
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-4
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function bdb_BindIfMatch
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_8
          CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond62) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond62) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond62) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond62) CFA_SP SP+-4
          CFI (cfiCond62) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function bdb_SendSimpleDescReq
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_9
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-4
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker64 Using cfiCommon1
          CFI (cfiPicker64) NoFunction
          CFI (cfiPicker64) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiPicker64
//  543 
//  544 /*********************************************************************
//  545  * @fn      bdb_exitFindingBindingWStatus
//  546  *
//  547  * @brief   Clean respondent list and reports the status to bdb state machine
//  548  *
//  549  * @return  
//  550  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  551 void bdb_exitFindingBindingWStatus( uint8 status )
bdb_exitFindingBindingWStatus:
          CFI Block cfiBlock65 Using cfiCommon0
          CFI Function bdb_exitFindingBindingWStatus
        CODE
//  552 {
        FUNCALL bdb_exitFindingBindingWStatus, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  553   // bdb report status
//  554   bdbAttributes.bdbCommissioningStatus = status;
        MOV     DPTR,#bdbAttributes + 10
        MOVX    @DPTR,A
//  555   
//  556   bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_FINDING_BINDING, TRUE );
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV     R2,#0x1
        MOV     R1,#0x6
        LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
//  557 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock65
//  558 
//  559 /*********************************************************************
//  560  * @fn      bdb_zclSimpleDescClusterListClean
//  561  *
//  562  * @brief   This function free Simple Descriptor cluster lists
//  563  *
//  564  * @param   pSimpleDesc - pointer to simple descriptor
//  565  *
//  566  * @return  status
//  567  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  568 static void bdb_zclSimpleDescClusterListClean( SimpleDescriptionFormat_t *pSimpleDesc )
bdb_zclSimpleDescClusterListClean:
          CFI Block cfiBlock66 Using cfiCommon0
          CFI Function bdb_zclSimpleDescClusterListClean
        CODE
//  569 {
        FUNCALL bdb_zclSimpleDescClusterListClean, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_zclSimpleDescClusterListClean, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  570   if(pSimpleDesc->pAppInClusterList != NULL)
        MOV     A,R6
        ADD     A,#0x7
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     DPL,R0
        MOV     DPH,A
        LCALL   ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_57:
        MOV     A,R2
        ORL     A,R3
        JZ      ??bdb_zclSimpleDescClusterListClean_0
//  571   {
//  572     osal_mem_free( pSimpleDesc->pAppInClusterList );
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  573     pSimpleDesc->pAppInClusterList = ( cId_t* )NULL;
        MOV     DPL,?V0
        MOV     DPH,?V1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  574   }
//  575   if(pSimpleDesc->pAppOutClusterList != NULL)
??bdb_zclSimpleDescClusterListClean_0:
        MOV     A,R6
        ADD     A,#0xa
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV     A,R2
        ORL     A,R3
        JZ      ??bdb_zclSimpleDescClusterListClean_1
//  576   {
//  577     osal_mem_free( pSimpleDesc->pAppOutClusterList );
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  578     pSimpleDesc->pAppOutClusterList = ( cId_t* )NULL;
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  579   }
//  580 }
??bdb_zclSimpleDescClusterListClean_1:
          CFI EndBlock cfiBlock66
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock67 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock67
//  581 
//  582 /*********************************************************************
//  583  * @fn      bdb_RegisterIdentifyTimeChangeCB
//  584  *
//  585  * @brief   Register an Application's Identify Time change callback function
//  586  *          to let know the application when identify is active or not.
//  587  *
//  588  * @param   pfnIdentify - application callback
//  589  *
//  590  * @return  none
//  591  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  592 void bdb_RegisterIdentifyTimeChangeCB( bdbGCB_IdentifyTimeChange_t pfnIdentifyTimeChange )
bdb_RegisterIdentifyTimeChangeCB:
          CFI Block cfiBlock68 Using cfiCommon0
          CFI Function bdb_RegisterIdentifyTimeChangeCB
        CODE
//  593 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  594   pfnIdentifyTimeChangeCB = pfnIdentifyTimeChange;
        MOV     DPTR,#pfnIdentifyTimeChangeCB
        LJMP    ?Subroutine0 & 0xFFFF
//  595 }
          CFI EndBlock cfiBlock68
//  596 
//  597 #if (FINDING_AND_BINDING_PERIODIC_ENABLE==TRUE)
//  598 /*********************************************************************
//  599  * @fn      bdb_GetFBInitiatorStatus
//  600  *
//  601  * @brief   Get the F&B initiator status for periodic requests.
//  602  *
//  603  * @param   RemainingTime - in seconds
//  604  * @param   AttemptsLeft - number of attempts to be done
//  605  * @param   MatchesFound - Add the number of matches to this parameter
//  606  *                         since the last bdb_GetFBInitiatorStatus call
//  607  *
//  608  * @return  none
//  609  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  610 void bdb_GetFBInitiatorStatus(uint8 *RemainingTime, uint8* AttemptsLeft)
bdb_GetFBInitiatorStatus:
          CFI Block cfiBlock69 Using cfiCommon0
          CFI Function bdb_GetFBInitiatorStatus
        CODE
//  611 {
        FUNCALL bdb_GetFBInitiatorStatus, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R4
        MOV     ?V1,R5
//  612   if(RemainingTime != NULL)  
        MOV     A,R6
        ORL     A,R7
        JZ      ??bdb_GetFBInitiatorStatus_0
//  613   {
//  614     if (bdb_FB_InitiatorCurrentCyclesNumber == 0)
        MOV     DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX    A,@DPTR
        JNZ     ??bdb_GetFBInitiatorStatus_1
//  615     {
//  616       *RemainingTime = 0;
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        SJMP    ??bdb_GetFBInitiatorStatus_2
//  617     }
//  618     else
//  619     {
//  620       *RemainingTime = (bdb_FB_InitiatorCurrentCyclesNumber - 1) * FINDING_AND_BINDING_PERIODIC_TIME + ((osal_get_timeoutEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT) + 999) / 1000);
??bdb_GetFBInitiatorStatus_1:
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV     R2,#0x40
        MOV     R3,#0x0
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V6,R4
        MOV     ?V7,R5
        MOV     DPTR,#__Constant_3e7
        MOV     R0,#?V4
        LCALL   ?L_ADD_X
        MOV     DPTR,#__Constant_3e8
        MOV     R0,#?V8
        LCALL   ?L_MOV_X
        MOV     R0,#?V4
        MOV     R1,#?V8
        LCALL   ?UL_DIV_MOD
        MOV     B,#0xf
        MOV     DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX    A,@DPTR
        DEC     A
        MUL     AB
        ADD     A,?V4
        MOV     DPL,R6
        MOV     DPH,R7
??bdb_GetFBInitiatorStatus_2:
        MOVX    @DPTR,A
//  621     }
//  622   }
//  623   
//  624   if(AttemptsLeft != NULL)
??bdb_GetFBInitiatorStatus_0:
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??bdb_GetFBInitiatorStatus_3
//  625   {
//  626     *AttemptsLeft = bdb_FB_InitiatorCurrentCyclesNumber;
        MOV     DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX    A,@DPTR
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    @DPTR,A
//  627   }
//  628 }
??bdb_GetFBInitiatorStatus_3:
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock69
//  629 #endif
//  630 
//  631 /*********************************************************************
//  632  * @fn      bdb_RegisterBindNotificationCB
//  633  *
//  634  * @brief   Register an Application's notification callback function to let 
//  635  *          know the application when a new bind is added to the binding table.
//  636  *
//  637  * @param   pfnIdentify - application callback
//  638  *
//  639  * @return  none
//  640  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  641 void bdb_RegisterBindNotificationCB( bdbGCB_BindNotification_t pfnBindNotification )
bdb_RegisterBindNotificationCB:
          CFI Block cfiBlock70 Using cfiCommon0
          CFI Function bdb_RegisterBindNotificationCB
        CODE
//  642 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  643   pfnBindNotificationCB = pfnBindNotification;
        MOV     DPTR,#pfnBindNotificationCB
        LJMP    ?Subroutine0 & 0xFFFF
//  644 }
          CFI EndBlock cfiBlock70
//  645 
//  646 /*********************************************************************
//  647  * @fn      bdb_SendIdentifyQuery
//  648  *
//  649  * @brief   Sends Identify query from the given endpoint
//  650  *
//  651  * @param   endpoint
//  652  *
//  653  * @return  ZStatus_t
//  654  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  655 ZStatus_t bdb_SendIdentifyQuery( uint8 endpoint )
bdb_SendIdentifyQuery:
          CFI Block cfiBlock71 Using cfiCommon0
          CFI Function bdb_SendIdentifyQuery
        CODE
//  656 {
        FUNCALL bdb_SendIdentifyQuery, bdb_getZCLFrameCounter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_SendIdentifyQuery, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_SendIdentifyQuery, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R1
        MOV     R7,A
//  657   afAddrType_t dstAddr;
//  658   ZStatus_t    status;
//  659   
//  660   dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVALL;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  661   dstAddr.addrMode = afAddr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  662   dstAddr.endPoint = 0xFF;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  663 
//  664   status = zclGeneral_SendIdentifyQuery( endpoint, &dstAddr, TRUE, bdb_getZCLFrameCounter() ); 
        ; Setup parameters for call to function bdb_getZCLFrameCounter
        LCALL   `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
        MOV     A,R1
        MOV     R1,A
        ; Setup parameters for call to function zcl_SendCommand
        CLR     A
        MOV     ?V0,A
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,R1
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        CLR     A
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP101_8
        MOV     A,R7
        MOV     R1,A
        LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R1
        MOV     R6,A
//  665   
//  666   if(status == ZSuccess)
        JNZ     ??bdb_SendIdentifyQuery_0
//  667   {
//  668     osal_start_timerEx( bdb_TaskID, BDB_RESPONDENT_SIMPLEDESC_TIMEOUT, IDENTIFY_QUERY_RSP_TIMEOUT );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_2710
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     R2,#0x0
        MOV     R3,#0x40
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  669   }
//  670   
//  671   return status;
??bdb_SendIdentifyQuery_0:
        MOV     A,R6
        MOV     R1,A
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        LJMP    ?Subroutine1 & 0xFFFF
//  672 }
          CFI EndBlock cfiBlock71
//  673 
//  674 /*********************************************************************
//  675  * @fn      bdb_ZclIdentifyQueryCmdInd
//  676  *
//  677  * @brief   Callback from the ZCL General Cluster Library when
//  678  *          it received an Identity Query Response Command for this 
//  679  *          application.
//  680  *
//  681  * @param   srcAddr - source address and endpoint of the response message
//  682  * @param   identifyTime - the number of seconds to identify yourself
//  683  *
//  684  * @return  none
//  685  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  686 void bdb_ZclIdentifyQueryCmdInd( zclIdentifyQueryRsp_t *pCmd )
bdb_ZclIdentifyQueryCmdInd:
          CFI Block cfiBlock72 Using cfiCommon0
          CFI Function bdb_ZclIdentifyQueryCmdInd
        CODE
//  687 {
        FUNCALL bdb_ZclIdentifyQueryCmdInd, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ZclIdentifyQueryCmdInd, bdb_AddRespondentNode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ZclIdentifyQueryCmdInd, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  688   bdbFindingBindingRespondent_t *pCurr;
//  689   
//  690   // Stop the timer before refresh
//  691   osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_SIMPLEDESC_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x0
        MOV     R3,#0x40
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
//  692   
//  693   // add new node to the list
//  694   pCurr = bdb_AddRespondentNode( &pRespondentHead, pCmd );
        ; Setup parameters for call to function bdb_AddRespondentNode
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#pRespondentHead & 0xff
        MOV     R3,#(pRespondentHead >> 8) & 0xff
        LCALL   `??bdb_AddRespondentNode::?relay`; Banked call to: bdb_AddRespondentNode
//  695   
//  696   if(pCurr != NULL)
        MOV     A,R2
        ORL     A,R3
        JZ      ??bdb_ZclIdentifyQueryCmdInd_0
//  697   {
//  698     pCurr->data.addrMode = pCmd->srcAddr->addrMode;
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_44:
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_17:
        MOVX    @DPTR,A
//  699     pCurr->data.addr.shortAddr = pCmd->srcAddr->addr.shortAddr;
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  700     pCurr->data.endPoint = pCmd->srcAddr->endPoint;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_18:
        INC     DPTR
        MOVX    @DPTR,A
//  701     pCurr->data.panId = pCmd->srcAddr->panId;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_52:
        ADD     A,#0xa
        MOV     DPL,A
        CLR     A
        ADDC    A,R0
        MOV     DPH,A
        LCALL   ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  702     pCurr->attempts = 0;
        LCALL   ?Subroutine17 & 0xFFFF
//  703   }
??CrossCallReturnLabel_22:
        CLR     A
        MOVX    @DPTR,A
//  704   
//  705   //Process the identify query rsp
//  706   osal_set_event(bdb_TaskID, BDB_RESPONDENT_SIMPLEDESC_TIMEOUT);
??bdb_ZclIdentifyQueryCmdInd_0:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x0
        MOV     R3,#0x40
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
//  707 }
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock72

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond73 Using cfiCommon0
          CFI Function bdb_zclFindingBindingEpType
          CFI Conditional ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function bdb_ZclIdentifyQueryCmdInd
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-2
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker75 Using cfiCommon1
          CFI (cfiPicker75) NoFunction
          CFI (cfiPicker75) Picker
        MOV     DPL,R6
        MOV     DPH,R7
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiPicker75
        REQUIRE ??Subroutine26_0
        ; // Fall through to label ??Subroutine26_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine26_0:
          CFI Block cfiCond76 Using cfiCommon0
          CFI Function bdb_BindIfMatch
          CFI Conditional ??CrossCallReturnLabel_41
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function bdb_ZclIdentifyQueryCmdInd
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-2
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function bdb_zclFindingBindingEpType
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-2
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function bdb_ZclIdentifyQueryCmdInd
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-2
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker80 Using cfiCommon1
          CFI (cfiPicker80) NoFunction
          CFI (cfiPicker80) Picker
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_49:
        RET
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiPicker80

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond81 Using cfiCommon0
          CFI Function bdb_ZclIdentifyQueryCmdInd
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function bdb_ZclIdentifyQueryCmdInd
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-2
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker83 Using cfiCommon1
          CFI (cfiPicker83) NoFunction
          CFI (cfiPicker83) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiPicker83
//  708 
//  709 /*********************************************************************
//  710  * @fn      bdb_SendSimpleDescReq
//  711  *
//  712  * @brief   Send Simple Descriptor request to current Finding and Binding
//  713  *          respondent in the list.
//  714  *
//  715  * @param   none
//  716  *
//  717  * @return  none
//  718  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  719 void bdb_SendSimpleDescReq( void )
bdb_SendSimpleDescReq:
          CFI Block cfiBlock84 Using cfiCommon0
          CFI Function bdb_SendSimpleDescReq
        CODE
//  720 {
        FUNCALL bdb_SendSimpleDescReq, bdb_getRespondentRetry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_SendSimpleDescReq, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_SendSimpleDescReq, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_SendSimpleDescReq, bdb_getRespondentRetry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_SendSimpleDescReq, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_SendSimpleDescReq, ZDP_SimpleDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_SendSimpleDescReq, bdb_getRespondentRetry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_SendSimpleDescReq, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
//  721 zAddrType_t dstAddr = { 0 };
        MOV     DPTR,#`?<Constant {{0}}>`
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x9
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  722   
//  723   // Look for the first respondent
//  724   if ( pRespondentCurr == NULL )
        LCALL   ??Subroutine24_0 & 0xFFFF
??CrossCallReturnLabel_40:
        JNZ     ??bdb_SendSimpleDescReq_0
//  725   {
//  726     pRespondentCurr = bdb_getRespondentRetry(pRespondentHead);
        ; Setup parameters for call to function bdb_getRespondentRetry
        MOV     DPTR,#pRespondentHead
        LCALL   ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_59:
        LCALL   `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
        LCALL   ?Subroutine2 & 0xFFFF
//  727     
//  728     // If null, then no responses from Identify query request
//  729     if ( (pRespondentCurr == NULL) )
??CrossCallReturnLabel_31:
        JNZ     ??bdb_SendSimpleDescReq_1
//  730     {
//  731       //No responses, then no responses
//  732       if(pRespondentHead == NULL)
        MOV     DPTR,#pRespondentHead
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_38:
        JNZ     ??bdb_SendSimpleDescReq_2
//  733       {
//  734         bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE );
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV     R1,#0xb
        SJMP    ??bdb_SendSimpleDescReq_3
//  735       }
//  736       //Responses and binded to all clusters possible
//  737       else
//  738       {
//  739         bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_SUCCESS );
//  740       }
//  741       return;
//  742     }
//  743   }
//  744   else
//  745   {
//  746     if(pRespondentNext == NULL)
??bdb_SendSimpleDescReq_0:
        MOV     DPTR,#pRespondentNext
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_39:
        JNZ     ??bdb_SendSimpleDescReq_4
//  747     {
//  748       //Review the whole list if we have simple desc that we need to attempt.
//  749       pRespondentCurr = bdb_getRespondentRetry(pRespondentHead);
        ; Setup parameters for call to function bdb_getRespondentRetry
        MOV     DPTR,#pRespondentHead
        LCALL   ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_60:
        LCALL   `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
        LCALL   ?Subroutine2 & 0xFFFF
//  750         
//  751       if(pRespondentCurr == NULL)
??CrossCallReturnLabel_32:
        JNZ     ??bdb_SendSimpleDescReq_1
//  752       {
//  753         bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_SUCCESS );
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
??bdb_SendSimpleDescReq_2:
        MOV     R1,#0x0
??bdb_SendSimpleDescReq_3:
        LCALL   `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
//  754         return;
        LJMP    ??bdb_SendSimpleDescReq_5 & 0xFFFF
//  755       }
//  756     }
//  757     else
//  758     {
//  759       pRespondentCurr = pRespondentNext;
??bdb_SendSimpleDescReq_4:
        MOV     DPTR,#pRespondentCurr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  760     }
//  761   }
//  762   
//  763   //If ParentLost is reported, then do not attempt send SimpleDesc, mark those as pending, 
//  764   //if Parent Lost is restored, then these simpleDesc attempts will be restored to 0
//  765   if(bdbCommissioningProcedureState.bdbCommissioningState != BDB_PARENT_LOST)
??bdb_SendSimpleDescReq_1:
        MOV     DPTR,#bdbCommissioningProcedureState
        MOVX    A,@DPTR
        XRL     A,#0x8
        MOV     DPTR,#pRespondentCurr
        JZ      ??bdb_SendSimpleDescReq_6
//  766   {
//  767     dstAddr.addr.shortAddr = pRespondentCurr->data.addr.shortAddr;
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine16 & 0xFFFF
//  768     dstAddr.addrMode = pRespondentCurr->data.addrMode;
??CrossCallReturnLabel_50:
        ADD     A,#0x8
        MOV     DPL,A
        CLR     A
        ADDC    A,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  769     
//  770     ZDP_SimpleDescReq( &dstAddr, pRespondentCurr->data.addr.shortAddr, pRespondentCurr->data.endPoint, 0 );
        ; Setup parameters for call to function ZDP_SimpleDescReq
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_53:
        ADD     A,#0x9
        MOV     DPL,A
        CLR     A
        ADDC    A,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#pRespondentCurr
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_12:
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
//  771     
//  772     //Update the attempts
//  773     pRespondentCurr->attempts++;
        MOV     DPTR,#pRespondentCurr
        LCALL   ?Subroutine11 & 0xFFFF
//  774   }
??CrossCallReturnLabel_13:
        MOVX    A,@DPTR
        INC     A
        SJMP    ??bdb_SendSimpleDescReq_7
//  775   else
//  776   {
//  777     pRespondentCurr->attempts = BDB_SIMPLE_DESC_PENDING_PARENT_LOST;
??bdb_SendSimpleDescReq_6:
        LCALL   ?Subroutine11 & 0xFFFF
//  778   }
??CrossCallReturnLabel_14:
        MOV     A,#-0x2
??bdb_SendSimpleDescReq_7:
        LCALL   ?Subroutine16 & 0xFFFF
//  779   
//  780   
//  781   //Search for the next respondant that has not enough tries in the list
//  782   pRespondentNext = bdb_getRespondentRetry(pRespondentCurr->pNext);
??CrossCallReturnLabel_51:
        ADD     A,#0xd
        MOV     DPL,A
        CLR     A
        ADDC    A,R0
        MOV     DPH,A
        LCALL   ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_61:
        LCALL   `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
        MOV     DPTR,#pRespondentNext
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  783   
//  784   osal_start_timerEx( bdb_TaskID, BDB_RESPONDENT_SIMPLEDESC_TIMEOUT, SIMPLEDESC_RESPONSE_TIMEOUT );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#zgPollRate
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_3
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?L_MUL
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     R2,#0x0
        MOV     R3,#0x40
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
//  785   
//  786 }
??bdb_SendSimpleDescReq_5:
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock84

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond85 Using cfiCommon0
          CFI Function bdb_SendSimpleDescReq
          CFI Conditional ??CrossCallReturnLabel_50
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function bdb_SendSimpleDescReq
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker87 Using cfiCommon1
          CFI (cfiPicker87) NoFunction
          CFI (cfiPicker87) Picker
        MOVX    @DPTR,A
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiPicker87
        ; Setup parameters for call to function bdb_getRespondentRetry
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine27_0:
          CFI Block cfiCond88 Using cfiCommon0
          CFI Function bdb_SendSimpleDescReq
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function bdb_SendSimpleDescReq
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function bdb_SendSimpleDescReq
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-2
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker91 Using cfiCommon1
          CFI (cfiPicker91) NoFunction
          CFI (cfiPicker91) Picker
        MOV     DPTR,#pRespondentCurr
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiPicker91
        REQUIRE ??Subroutine28_0
        ; // Fall through to label ??Subroutine28_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine28_0:
          CFI Block cfiCond92 Using cfiCommon0
          CFI Function bdb_ZclIdentifyQueryCmdInd
          CFI Conditional ??CrossCallReturnLabel_52
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function bdb_SendSimpleDescReq
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-2
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function bdb_SendSimpleDescReq
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-2
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function bdb_SendSimpleDescReq
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-2
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker96 Using cfiCommon1
          CFI (cfiPicker96) NoFunction
          CFI (cfiPicker96) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        RET
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiPicker96

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond97 Using cfiCommon0
          CFI Function bdb_SendSimpleDescReq
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function bdb_SendSimpleDescReq
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-2
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker99 Using cfiCommon1
          CFI (cfiPicker99) NoFunction
          CFI (cfiPicker99) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,R0
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiPicker99

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond100 Using cfiCommon0
          CFI Function bdb_BindIfMatch
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function bdb_SendSimpleDescReq
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-2
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker102 Using cfiCommon1
          CFI (cfiPicker102) NoFunction
          CFI (cfiPicker102) Picker
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_45:
        RET
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiPicker102

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond103 Using cfiCommon0
          CFI Function bdb_setEpDescListToActiveEndpoint
          CFI Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_29
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-9
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_30
          CFI (cfiCond104) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond104) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond104) CFA_SP SP+-9
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_28
          CFI (cfiCond105) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond105) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond105) CFA_SP SP+-9
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function bdb_SendSimpleDescReq
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_31
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-4
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function bdb_SendSimpleDescReq
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_32
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-4
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function bdb_SendSimpleDescReq
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_40
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-4
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function bdb_SetIdentifyActiveEndpoint
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_33
          CFI (cfiCond109) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond109) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond109) CFA_SP SP+-9
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_34
          CFI (cfiCond110) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond110) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond110) CFA_SP SP+-9
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_35
          CFI (cfiCond111) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond111) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond111) CFA_SP SP+-9
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function bdb_BindIfMatch
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_36
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond112) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-4
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function bdb_zclFindingBindingAddBindEntry
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_37
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-4
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function bdb_SendSimpleDescReq
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_38
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-4
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function bdb_SendSimpleDescReq
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_39
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-4
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function bdb_zclFindingBindingEpType
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_19
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-4
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function bdb_zclFindingBindingEpType
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_20
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-4
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function bdb_zclFindingBindingEpType
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_21
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-4
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function bdb_zclFindingBindingEpType
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_43
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-4
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function bdb_ZclIdentifyQueryCmdInd
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_44
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+-4
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function bdb_BindIfMatch
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_41
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond121) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-4
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function bdb_ZclIdentifyQueryCmdInd
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_42
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-4
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function bdb_BindIfMatch
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_8
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-4
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function bdb_SendSimpleDescReq
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_9
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-4
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker125 Using cfiCommon1
          CFI (cfiPicker125) NoFunction
          CFI (cfiPicker125) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiPicker125

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond126 Using cfiCommon0
          CFI Function bdb_zclFindingBindingEpType
          CFI Conditional ??CrossCallReturnLabel_64
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function bdb_zclFindingBindingEpType
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-2
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker128 Using cfiCommon1
          CFI (cfiPicker128) NoFunction
          CFI (cfiPicker128) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiPicker128
        REQUIRE ??Subroutine29_0
        ; // Fall through to label ??Subroutine29_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine29_0:
          CFI Block cfiCond129 Using cfiCommon0
          CFI Function bdb_setEpDescListToActiveEndpoint
          CFI Conditional ??CrossCallReturnLabel_63
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function bdb_zclFindingBindingEpType
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-2
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function bdb_zclFindingBindingEpType
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-2
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker132 Using cfiCommon1
          CFI (cfiPicker132) NoFunction
          CFI (cfiPicker132) Picker
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiPicker132
        REQUIRE ??Subroutine30_0
        ; // Fall through to label ??Subroutine30_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine30_0:
          CFI Block cfiCond133 Using cfiCommon0
          CFI Function bdb_BindIfMatch
          CFI Conditional ??CrossCallReturnLabel_54
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function bdb_zclFindingBindingAddBindEntry
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-2
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function bdb_zclFindingBindingAddBindEntry
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-2
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function bdb_zclSimpleDescClusterListClean
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-2
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function bdb_zclSimpleDescClusterListClean
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-2
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function bdb_SendSimpleDescReq
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-2
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function bdb_SendSimpleDescReq
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-2
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function bdb_SendSimpleDescReq
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-2
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function bdb_getRespondentRetry
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond141) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond141) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond141) CFA_SP SP+-7
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond142) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond142) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond142) CFA_SP SP+-7
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function bdb_zclFindingBindingEpType
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-2
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function bdb_zclFindingBindingEpType
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-2
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker145 Using cfiCommon1
          CFI (cfiPicker145) NoFunction
          CFI (cfiPicker145) Picker
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_69:
        RET
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiPicker145

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond146 Using cfiCommon0
          CFI Function bdb_BindIfMatch
          CFI Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function bdb_BindIfMatch
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_7
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond147) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+-4
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function bdb_BindIfMatch
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_0
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-4
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function bdb_BindIfMatch
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_1
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-4
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function bdb_zclFindingBindingEpType
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_2
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-4
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function bdb_zclFindingBindingEpType
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_3
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-4
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function bdb_zclFindingBindingEpType
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_64
          CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond152) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond152) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond152) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond152) CFA_SP SP+-4
          CFI (cfiCond152) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function bdb_zclFindingBindingEpType
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_65
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+-4
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_63
          CFI (cfiCond154) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond154) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond154) CFA_SP SP+-9
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function bdb_BindIfMatch
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_54
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-4
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function bdb_zclFindingBindingAddBindEntry
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_55
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-4
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function bdb_zclFindingBindingAddBindEntry
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_56
          CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond157) CFA_SP SP+-4
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function bdb_zclSimpleDescClusterListClean
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_57
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+-4
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function bdb_zclSimpleDescClusterListClean
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_58
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-4
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function bdb_SendSimpleDescReq
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_59
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-4
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function bdb_SendSimpleDescReq
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_60
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond161) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond161) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+-4
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function bdb_SendSimpleDescReq
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_61
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond162) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-4
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function bdb_getRespondentRetry
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_62
          CFI (cfiCond163) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond163) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond163) CFA_SP SP+-9
          CFI Block cfiPicker164 Using cfiCommon1
          CFI (cfiPicker164) NoFunction
          CFI (cfiPicker164) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiPicker164

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {{0}}>`:
        DATA16
        DW 0
        DB 0, 0, 0, 0, 0, 0
        DB 0
//  787 
//  788 /*********************************************************************
//  789  * @fn      bdb_FindIfAppCluster
//  790  *
//  791  * @brief   To verify if cluster is application type
//  792  *
//  793  * @param   none
//  794  *
//  795  * @return  true if success
//  796  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  797 uint8 bdb_FindIfAppCluster( cId_t ClusterId )
bdb_FindIfAppCluster:
          CFI Block cfiBlock165 Using cfiCommon0
          CFI Function bdb_FindIfAppCluster
        CODE
//  798 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  799   uint8 i;
//  800   uint8 ClusterCnt;
//  801 
//  802   ClusterCnt = sizeof( bdb_ZclType1Clusters )/sizeof( uint16 );
//  803   
//  804   for ( i = 0; i < ClusterCnt; i++ )
        MOV     R4,#0x0
//  805   {
//  806     if ( bdb_ZclType1Clusters[i] == ClusterId )
??bdb_FindIfAppCluster_0:
        LCALL   ?Subroutine21 & 0xFFFF
//  807     {
//  808       return ( SUCCESS );
//  809     }
//  810   }
??CrossCallReturnLabel_71:
        MOV     A,#bdb_ZclType1Clusters & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(bdb_ZclType1Clusters >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??bdb_FindIfAppCluster_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??bdb_FindIfAppCluster_1:
        JZ      ??bdb_FindIfAppCluster_2
        INC     R4
        MOV     A,R4
        CLR     C
        SUBB    A,#0x18
        JC      ??bdb_FindIfAppCluster_0
//  811   
//  812   ClusterCnt = sizeof( bdb_ZclType2Clusters )/sizeof( uint16 );
//  813   
//  814   for ( i = 0; i < ClusterCnt; i++ )
        MOV     R4,#0x0
//  815   {
//  816     if ( bdb_ZclType2Clusters[i] == ClusterId )
??bdb_FindIfAppCluster_3:
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_72:
        MOV     A,#bdb_ZclType2Clusters & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(bdb_ZclType2Clusters >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??bdb_FindIfAppCluster_4
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??bdb_FindIfAppCluster_4:
        JNZ     ??bdb_FindIfAppCluster_5
//  817     {
//  818       return ( SUCCESS );
??bdb_FindIfAppCluster_2:
        MOV     R1,#0x0
        SJMP    ??bdb_FindIfAppCluster_6
//  819     }
//  820   }
??bdb_FindIfAppCluster_5:
        INC     R4
        MOV     A,R4
        CLR     C
        SUBB    A,#0x31
        JC      ??bdb_FindIfAppCluster_3
//  821   
//  822   // If not found, take it as application cluster it will be filtered
//  823   // by simple descriptor at some point
//  824   return ( FAILURE );
        MOV     R1,#0x1
??bdb_FindIfAppCluster_6:
        LJMP    ??Subroutine23_0 & 0xFFFF
//  825 }
          CFI EndBlock cfiBlock165

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond166 Using cfiCommon0
          CFI Function bdb_FindIfAppCluster
          CFI Conditional ??CrossCallReturnLabel_71
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function bdb_FindIfAppCluster
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond167) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond167) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond167) CFA_SP SP+-7
          CFI Block cfiPicker168 Using cfiCommon1
          CFI (cfiPicker168) NoFunction
          CFI (cfiPicker168) Picker
        MOV     A,R4
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiPicker168
        REQUIRE ??Subroutine31_0
        ; // Fall through to label ??Subroutine31_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine31_0:
          CFI Block cfiCond169 Using cfiCommon0
          CFI Function bdb_BindIfMatch
          CFI Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function bdb_BindIfMatch
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_16
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond170) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond170) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+-4
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function bdb_FindIfAppCluster
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond171) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond171) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond171) CFA_SP SP+-7
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function bdb_FindIfAppCluster
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond172) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond172) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond172) CFA_SP SP+-7
          CFI Block cfiPicker173 Using cfiCommon1
          CFI (cfiPicker173) NoFunction
          CFI (cfiPicker173) Picker
        ADD     A,0xE0 /* A   */
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        RET
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiPicker173
//  826 
//  827 
//  828 /*********************************************************************
//  829  * @fn      bdb_getRespondentRetry
//  830  *
//  831  * @brief   Get the next Respondant entry to retry
//  832  *
//  833  * @param   pHead - pointer to a pointer of the list head
//  834  *
//  835  * @return  respondant entry if found, otherwise NULL
//  836  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  837 bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead)
bdb_getRespondentRetry:
          CFI Block cfiBlock174 Using cfiCommon0
          CFI Function bdb_getRespondentRetry
        CODE
//  838 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  839   bdbFindingBindingRespondent_t *pTemp;
//  840   
//  841   pTemp = pRespondentHead;
        SJMP    ??CrossCallReturnLabel_62
//  842   
//  843   while(pTemp != NULL)
//  844   {
//  845     if(pTemp->attempts < FINDING_AND_BINDING_MAX_ATTEMPTS)
//  846     {
//  847       return pTemp;
//  848     }
//  849     pTemp = pTemp->pNext;
??bdb_getRespondentRetry_0:
        MOV     A,R2
        ADD     A,#0xd
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        LCALL   ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV     A,R2
        ORL     A,R3
        JZ      ??bdb_getRespondentRetry_1
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_23:
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x4
        JNC     ??bdb_getRespondentRetry_0
        SJMP    ??bdb_getRespondentRetry_2
//  850   }
//  851   return NULL;
??bdb_getRespondentRetry_1:
        MOV     R2,#0x0
        MOV     R3,#0x0
??bdb_getRespondentRetry_2:
        LJMP    ??Subroutine23_0 & 0xFFFF
//  852 }
          CFI EndBlock cfiBlock174

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond175 Using cfiCommon0
          CFI Function bdb_ZclIdentifyQueryCmdInd
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function bdb_getRespondentRetry
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond176) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond176) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond176) CFA_SP SP+-7
          CFI Block cfiPicker177 Using cfiCommon1
          CFI (cfiPicker177) NoFunction
          CFI (cfiPicker177) Picker
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiPicker177
//  853 
//  854 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  855 bdbFindingBindingRespondent_t* bdb_findRespondentNode(uint8 endpoint, uint16 shortAddress)
bdb_findRespondentNode:
          CFI Block cfiBlock178 Using cfiCommon0
          CFI Function bdb_findRespondentNode
        CODE
//  856 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  857   bdbFindingBindingRespondent_t* pTemp = pRespondentHead;
        MOV     DPTR,#pRespondentHead
        SJMP    ??bdb_findRespondentNode_0
//  858   
//  859   while(pTemp != NULL)  
//  860   {
//  861     if((pTemp->data.addr.shortAddr == shortAddress) && (pTemp->data.endPoint == endpoint))
//  862     {
//  863       return pTemp;
//  864     }
//  865     
//  866     pTemp = pTemp->pNext;
??bdb_findRespondentNode_1:
        MOV     A,R4
        ADD     A,#0xd
        MOV     DPL,A
        CLR     A
        ADDC    A,R5
        MOV     DPH,A
??bdb_findRespondentNode_0:
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R4
        ORL     A,R5
        JZ      ??bdb_findRespondentNode_2
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??bdb_findRespondentNode_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??bdb_findRespondentNode_3:
        JNZ     ??bdb_findRespondentNode_1
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
        JNZ     ??bdb_findRespondentNode_1
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
        SJMP    ??bdb_findRespondentNode_4
//  867   }
//  868   
//  869   return NULL;
??bdb_findRespondentNode_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??bdb_findRespondentNode_4:
        LJMP    ??Subroutine23_0 & 0xFFFF
//  870 }
          CFI EndBlock cfiBlock178

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for grpName>`:
        DATA8
        DB 71
        DB 114
        DB 111
        DB 117
        DB 112
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for bdbIndentifyActiveEndpoint>`:
        DATA8
        DB 255

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e7:
        DD 999

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2710:
        DD 10000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3:
        DD 3

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_SetIdentifyActiveEndpoint::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_SetIdentifyActiveEndpoint

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setEpDescListToActiveEndpoint::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setEpDescListToActiveEndpoint

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_BindIfMatch::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_BindIfMatch

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_zclFindingBindingEpType::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_zclFindingBindingEpType

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_zclFindingBindingAddBindEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_zclFindingBindingAddBindEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_exitFindingBindingWStatus::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_exitFindingBindingWStatus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_zclSimpleDescClusterListClean::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_zclSimpleDescClusterListClean

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterIdentifyTimeChangeCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterIdentifyTimeChangeCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_GetFBInitiatorStatus::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_GetFBInitiatorStatus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterBindNotificationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterBindNotificationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_SendIdentifyQuery::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_SendIdentifyQuery

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ZclIdentifyQueryCmdInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ZclIdentifyQueryCmdInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_SendSimpleDescReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_SendSimpleDescReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_FindIfAppCluster::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_FindIfAppCluster

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_getRespondentRetry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_getRespondentRetry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_findRespondentNode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_findRespondentNode

        END
//  871 
//  872 #endif  
//  873 
//  874 /*********************************************************************
//  875 *********************************************************************/
// 
// 2 294 bytes in segment BANKED_CODE
//    96 bytes in segment BANK_RELAYS
//     7 bytes in segment XDATA_I
//     7 bytes in segment XDATA_ID
//   171 bytes in segment XDATA_ROM_C
//    16 bytes in segment XDATA_Z
// 
// 2 397 bytes of CODE  memory
//   155 bytes of CONST memory (+ 16 bytes shared)
//    23 bytes of XDATA memory
//
//Errors: none
//Warnings: none
