###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                05/Nov/2017  14:38:54
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Components\stack\bdb\bdb_FindingAndBinding.c
#    Command line       =  
#        -f
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Components\stack\bdb\bdb_FindingAndBinding.c
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        xPOWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
#        xMT_APP_CNF_FUNC -D LEGACY_LCD_DEBUG -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D
#        ZCL_IDENTIFY -D ZCL_SCENES -D ZCL_GROUPS -lC
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List
#        -lA
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\Source\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\Source\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List\bdb_FindingAndBinding.lst
#    Object file        =  
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\Obj\bdb_FindingAndBinding.r51
#
###############################################################################

C:\Users\admin\Desktop\github\z-stack3.0.0\Components\stack\bdb\bdb_FindingAndBinding.c
      1          /**************************************************************************************************
      2            Filename:       bdb_FindingAndBinding.c
      3            Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
      4            Revision:       $Revision: - $
      5          
      6            Description:    This file contains the Base Device Behavior functions and attributes.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "bdb.h"
     45          #include "ZDObject.h"
     46          #include "bdb_interface.h"
     47             
     48          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)   
     49             
     50          /*********************************************************************
     51           * MACROS
     52           */
     53           
     54          /*********************************************************************
     55           * CONSTANTS
     56           */
     57          /*********************************************************************
     58           * TYPEDEFS
     59           */
     60           
     61           
     62          /*********************************************************************
     63           * GLOBAL VARIABLES
     64           */
     65          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     66          uint8 grpName[6] = {'G','r','o','u','p','\0'};
   \                     grpName:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for grpName>`
   \   000006                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     67          bdbGCB_IdentifyTimeChange_t      pfnIdentifyTimeChangeCB = NULL; 
   \                     pfnIdentifyTimeChangeCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     68          bdbGCB_BindNotification_t        pfnBindNotificationCB = NULL;
   \                     pfnBindNotificationCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     69          
     70          /*********************************************************************
     71           * EXTERNAL VARIABLES
     72           */
     73          
     74          /*********************************************************************
     75           * EXTERNAL FUNCTIONS
     76           */
     77          
     78          
     79          /*********************************************************************
     80           * LOCAL VARIABLES
     81           */
     82          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     83          SimpleDescriptionFormat_t  bdb_FindingBindingTargetSimpleDesc;
   \                     bdb_FindingBindingTargetSimpleDesc:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
     84          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     85          uint8 bdbIndentifyActiveEndpoint  = 0xFF;
   \                     bdbIndentifyActiveEndpoint:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for bdbIndentifyActiveEndpoint>`
   \   000001                REQUIRE __INIT_XDATA_I
     86          
     87          //Your JOB:
     88          //Remove the clusters that your application do not use. This will save some flash and processing
     89          //when looking into matching clusters during the finding & binding procedure

   \                                 In  segment XDATA_ROM_C, align 1
     90          const cId_t bdb_ZclType1Clusters[] =
   \                     bdb_ZclType1Clusters:
   \   000000   0500         DW 5
   \   000002   0600         DW 6
   \   000004   0800         DW 8
   \   000006   0900         DW 9
   \   000008   1600         DW 22
   \   00000A   0201         DW 258
   \   00000C   0202         DW 514
   \   00000E   0302         DW 515
   \   000010   0003         DW 768
   \   000012   0103         DW 769
   \   000014   0105         DW 1281
   \   000016   0205         DW 1282
   \   000018   0006         DW 1536
   \   00001A   0106         DW 1537
   \   00001C   040B         DW 2820
   \   00001E   1406         DW 1556
   \   000020   1506         DW 1557
   \   000022   1706         DW 1559
   \   000024   0007         DW 1792
   \   000026   0107         DW 1793
   \   000028   0207         DW 1794
   \   00002A   0307         DW 1795
   \   00002C   0009         DW 2304
   \   00002E   0509         DW 2309
     91          {
     92            ZCL_CLUSTER_ID_GEN_SCENES,
     93            ZCL_CLUSTER_ID_GEN_ON_OFF,
     94            ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
     95            ZCL_CLUSTER_ID_GEN_ALARMS,
     96            ZCL_CLUSTER_ID_GEN_PARTITION,
     97            ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING,
     98            ZCL_CLUSTER_ID_HVAC_FAN_CONTROL,
     99            ZCL_CLUSTER_ID_HVAC_DIHUMIDIFICATION_CONTROL,
    100            ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    101            ZCL_CLUSTER_ID_LIGHTING_BALLAST_CONFIG,
    102            ZCL_CLUSTER_ID_SS_IAS_ACE,
    103            ZCL_CLUSTER_ID_SS_IAS_WD,
    104            ZCL_CLUSTER_ID_PI_GENERIC_TUNNEL,
    105            ZCL_CLUSTER_ID_PI_BACNET_PROTOCOL_TUNNEL,
    106            ZCL_CLUSTER_ID_HA_ELECTRICAL_MEASUREMENT,
    107            ZCL_CLUSTER_ID_PI_11073_PROTOCOL_TUNNEL,
    108            ZCL_CLUSTER_ID_PI_ISO7818_PROTOCOL_TUNNEL,
    109            ZCL_CLUSTER_ID_PI_RETAIL_TUNNEL,
    110            ZCL_CLUSTER_ID_SE_PRICE,
    111            ZCL_CLUSTER_ID_SE_DRLC,
    112            ZCL_CLUSTER_ID_SE_METERING,
    113            ZCL_CLUSTER_ID_SE_MESSAGING,
    114            ZCL_CLUSTER_ID_TELECOMMUNICATIONS_INFORMATION,
    115            ZCL_CLUSTER_ID_TELECOMMUNICATIONS_VOICE_OVER_ZIGBEE,
    116          };
    117          
    118          //Your JOB:
    119          //Remove the clusters that your application do not use. This will save some flash and processing
    120          //when looking into matching clusters during the finding & binding procedure

   \                                 In  segment XDATA_ROM_C, align 1
    121          const cId_t bdb_ZclType2Clusters[] =
   \                     bdb_ZclType2Clusters:
   \   000000   0700         DW 7
   \   000002   0A00         DW 10
   \   000004   0C00         DW 12
   \   000006   0D00         DW 13
   \   000008   0E00         DW 14
   \   00000A   0F00         DW 15
   \   00000C   1000         DW 16
   \   00000E   1100         DW 17
   \   000010   1200         DW 18
   \   000012   1300         DW 19
   \   000014   1400         DW 20
   \   000016   1900         DW 25
   \   000018   1B00         DW 27
   \   00001A   0001         DW 256
   \   00001C   0101         DW 257
   \   00001E   0002         DW 512
   \   000020   0102         DW 513
   \   000022   0204         DW 1026
   \   000024   0004         DW 1024
   \   000026   0104         DW 1025
   \   000028   0304         DW 1027
   \   00002A   0404         DW 1028
   \   00002C   0504         DW 1029
   \   00002E   0604         DW 1030
   \   000030   0005         DW 1280
   \   000032   0206         DW 1538
   \   000034   0306         DW 1539
   \   000036   0406         DW 1540
   \   000038   0506         DW 1541
   \   00003A   0606         DW 1542
   \   00003C   0706         DW 1543
   \   00003E   0806         DW 1544
   \   000040   0906         DW 1545
   \   000042   0A06         DW 1546
   \   000044   0B06         DW 1547
   \   000046   0C06         DW 1548
   \   000048   0D06         DW 1549
   \   00004A   0E06         DW 1550
   \   00004C   0F06         DW 1551
   \   00004E   1006         DW 1552
   \   000050   1106         DW 1553
   \   000052   1206         DW 1554
   \   000054   1306         DW 1555
   \   000056   0407         DW 1796
   \   000058   0009         DW 2304
   \   00005A   000B         DW 2816
   \   00005C   010B         DW 2817
   \   00005E   020B         DW 2818
   \   000060   030B         DW 2819
    122          {
    123            ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG,
    124            ZCL_CLUSTER_ID_GEN_TIME,
    125            ZCL_CLUSTER_ID_GEN_ANALOG_INPUT_BASIC,
    126            ZCL_CLUSTER_ID_GEN_ANALOG_OUTPUT_BASIC,
    127            ZCL_CLUSTER_ID_GEN_ANALOG_VALUE_BASIC,
    128            ZCL_CLUSTER_ID_GEN_BINARY_INPUT_BASIC,
    129            ZCL_CLUSTER_ID_GEN_BINARY_OUTPUT_BASIC,
    130            ZCL_CLUSTER_ID_GEN_BINARY_VALUE_BASIC,
    131            ZCL_CLUSTER_ID_GEN_MULTISTATE_INPUT_BASIC,
    132            ZCL_CLUSTER_ID_GEN_MULTISTATE_OUTPUT_BASIC,
    133            ZCL_CLUSTER_ID_GEN_MULTISTATE_VALUE_BASIC,
    134            ZCL_CLUSTER_ID_OTA,
    135            ZCL_CLUSTER_ID_GEN_APPLIANCE_CONTROL,
    136            ZCL_CLUSTER_ID_CLOSURES_SHADE_CONFIG,
    137            ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
    138            ZCL_CLUSTER_ID_HVAC_PUMP_CONFIG_CONTROL,
    139            ZCL_CLUSTER_ID_HVAC_THERMOSTAT,
    140            ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT,
    141            ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT,
    142            ZCL_CLUSTER_ID_MS_ILLUMINANCE_LEVEL_SENSING_CONFIG,
    143            ZCL_CLUSTER_ID_MS_PRESSURE_MEASUREMENT,
    144            ZCL_CLUSTER_ID_MS_FLOW_MEASUREMENT,
    145            ZCL_CLUSTER_ID_MS_RELATIVE_HUMIDITY,
    146            ZCL_CLUSTER_ID_MS_OCCUPANCY_SENSING,
    147            ZCL_CLUSTER_ID_SS_IAS_ZONE,
    148            ZCL_CLUSTER_ID_PI_ANALOG_INPUT_BACNET_REG,
    149            ZCL_CLUSTER_ID_PI_ANALOG_INPUT_BACNET_EXT,
    150            ZCL_CLUSTER_ID_PI_ANALOG_OUTPUT_BACNET_REG,
    151            ZCL_CLUSTER_ID_PI_ANALOG_OUTPUT_BACNET_EXT,
    152            ZCL_CLUSTER_ID_PI_ANALOG_VALUE_BACNET_REG,
    153            ZCL_CLUSTER_ID_PI_ANALOG_VALUE_BACNET_EXT,
    154            ZCL_CLUSTER_ID_PI_BINARY_INPUT_BACNET_REG,
    155            ZCL_CLUSTER_ID_PI_BINARY_INPUT_BACNET_EXT,
    156            ZCL_CLUSTER_ID_PI_BINARY_OUTPUT_BACNET_REG,
    157            ZCL_CLUSTER_ID_PI_BINARY_OUTPUT_BACNET_EXT,
    158            ZCL_CLUSTER_ID_PI_BINARY_VALUE_BACNET_REG,
    159            ZCL_CLUSTER_ID_PI_BINARY_VALUE_BACNET_EXT,
    160            ZCL_CLUSTER_ID_PI_MULTISTATE_INPUT_BACNET_REG,
    161            ZCL_CLUSTER_ID_PI_MULTISTATE_INPUT_BACNET_EXT,
    162            ZCL_CLUSTER_ID_PI_MULTISTATE_OUTPUT_BACNET_REG,
    163            ZCL_CLUSTER_ID_PI_MULTISTATE_OUTPUT_BACNET_EXT,
    164            ZCL_CLUSTER_ID_PI_MULTISTATE_VALUE_BACNET_REG,
    165            ZCL_CLUSTER_ID_PI_MULTISTATE_VALUE_BACNET_EXT,
    166            ZCL_CLUSTER_ID_SE_TUNNELING,
    167            ZCL_CLUSTER_ID_TELECOMMUNICATIONS_INFORMATION,
    168            ZCL_CLUSTER_ID_HA_APPLIANCE_IDENTIFICATION,
    169            ZCL_CLUSTER_ID_HA_METER_IDENTIFICATION,
    170            ZCL_CLUSTER_ID_HA_APPLIANCE_EVENTS_ALERTS,
    171            ZCL_CLUSTER_ID_HA_APPLIANCE_STATISTICS,
    172          };
    173          
    174           /*********************************************************************
    175           * LOCAL FUNCTIONS
    176           */
    177          static ZStatus_t bdb_zclFindingBindingAddBindEntry( byte SrcEndpInt,
    178                                            uint16 BindClusterId,
    179                                            byte Cnt,                 
    180                                            uint16 * ClusterList,
    181                                            zAddrType_t *DstAddr, byte DstEndpInt );
    182          
    183          uint8 bdb_FindIfAppCluster( cId_t ClusterId );
    184          
    185          
    186          static void bdb_zclSimpleDescClusterListClean( SimpleDescriptionFormat_t *pSimpleDesc );
    187          bdbFindingBindingRespondent_t* bdb_findRespondentNode(uint8 endpoint, uint16 shortAddress);
    188          bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead);
    189           /*********************************************************************
    190           * PUBLIC FUNCTIONS
    191           *********************************************************************/
    192          void bdb_BindIfMatch( bdbInMsg_t *msgPtr );
    193          
    194          
    195          /*********************************************************************
    196           * @fn      bdb_SetIdentifyActiveEndpoint
    197           *
    198           * @brief   Set the endpoint which will perform the finding and binding (either Target or Initiator)
    199           *
    200           * @param   Active endpoint with which perform F&B. If set to 0xFF all endpoints with Identify will be attempted.
    201           *
    202           * @return  ZFailure - F&B commissioning mode already requested
    203           *          ZInvalidParameter - Endpoint specified not found or reserved by Zigbee
    204           *          ZSuccess - 
    205           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    206          ZStatus_t bdb_SetIdentifyActiveEndpoint(uint8 activeEndpoint)
   \                     bdb_SetIdentifyActiveEndpoint:
    207          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FA           MOV     R2,A
    208            epList_t *bdb_EpDescriptorListTemp = NULL;
    209            
    210            //Cannot process the request if no endpoints or F&B is under process
    211            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_FINDING_BINDING)
   \   000006   90....       MOV     DPTR,#bdbAttributes + 11
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   A2E3         MOV     C,0xE0 /* A   */.3
   \   00000C   5004         JNC     ??bdb_SetIdentifyActiveEndpoint_0
    212            {
    213              return ZFailure;
   \   00000E   7901         MOV     R1,#0x1
   \   000010   8038         SJMP    ??bdb_SetIdentifyActiveEndpoint_1
    214            }
    215            
    216            if(activeEndpoint == 0xFF)
   \                     ??bdb_SetIdentifyActiveEndpoint_0:
   \   000012   74FF         MOV     A,#-0x1
   \   000014   6A           XRL     A,R2
   \   000015   6028         JZ      ??bdb_SetIdentifyActiveEndpoint_2
    217            {
    218              bdbIndentifyActiveEndpoint = activeEndpoint;
    219              return ZSuccess;
    220            }
    221            
    222            if((activeEndpoint != 0) && (activeEndpoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
   \   000017   EA           MOV     A,R2
   \   000018   602E         JZ      ??bdb_SetIdentifyActiveEndpoint_3
   \   00001A   C3           CLR     C
   \   00001B   94F1         SUBB    A,#-0xf
   \   00001D   5029         JNC     ??bdb_SetIdentifyActiveEndpoint_3
    223            {
    224              bdb_EpDescriptorListTemp = bdb_HeadEpDescriptorList;
   \   00001F   90....       MOV     DPTR,#bdb_HeadEpDescriptorList
   \   000022   8004         SJMP    ??bdb_SetIdentifyActiveEndpoint_4
    225              
    226              while(bdb_EpDescriptorListTemp != NULL)
    227              {
    228                if(bdb_EpDescriptorListTemp->epDesc->endPoint == activeEndpoint)
    229                {
    230                  bdbIndentifyActiveEndpoint = activeEndpoint;
    231                  return ZSuccess;
    232                }
    233                bdb_EpDescriptorListTemp = bdb_EpDescriptorListTemp->nextDesc;
   \                     ??bdb_SetIdentifyActiveEndpoint_5:
   \   000024   8882         MOV     DPL,R0
   \   000026   8983         MOV     DPH,R1
   \                     ??bdb_SetIdentifyActiveEndpoint_4:
   \   000028   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00002B   601B         JZ      ??bdb_SetIdentifyActiveEndpoint_3
   \   00002D   8882         MOV     DPL,R0
   \   00002F   8983         MOV     DPH,R1
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FB           MOV     R3,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F583         MOV     DPH,A
   \   000039   8B82         MOV     DPL,R3
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   6A           XRL     A,R2
   \   00003D   70E5         JNZ     ??bdb_SetIdentifyActiveEndpoint_5
   \                     ??bdb_SetIdentifyActiveEndpoint_2:
   \   00003F   EA           MOV     A,R2
   \   000040   90....       MOV     DPTR,#bdbIndentifyActiveEndpoint
   \   000043   F0           MOVX    @DPTR,A
   \   000044   7900         MOV     R1,#0x0
   \   000046   8002         SJMP    ??bdb_SetIdentifyActiveEndpoint_1
    234              }
    235            }
    236            
    237            return ZInvalidParameter;
   \                     ??bdb_SetIdentifyActiveEndpoint_3:
   \   000048   7902         MOV     R1,#0x2
   \                     ??bdb_SetIdentifyActiveEndpoint_1:
   \   00004A   80..         SJMP    ??Subroutine23_0
    238          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine23_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    239          
    240          
    241          /*********************************************************************
    242           * @fn      bdb_setEpDescListToActiveEndpoint
    243           *
    244           * @brief   Set the endpoint list to the active endpoint selected by the application for F&B process
    245           *
    246           * @return  Current endpoint descriptor
    247           */
    248          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    249          endPointDesc_t* bdb_setEpDescListToActiveEndpoint(void)
   \                     bdb_setEpDescListToActiveEndpoint:
    250          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    251            bdb_CurrEpDescriptorList = bdb_HeadEpDescriptorList;
   \   000004   90....       MOV     DPTR,#bdb_HeadEpDescriptorList
   \   000007   12....       LCALL   ??Subroutine22_0 & 0xFFFF
    252           
    253            //Check which active endpoit is being requested
    254            if(bdbIndentifyActiveEndpoint != 0xFF)
   \                     ??CrossCallReturnLabel_28:
   \   00000A   90....       MOV     DPTR,#bdbIndentifyActiveEndpoint
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F4           CPL     A
   \   00000F   601B         JZ      ??CrossCallReturnLabel_30
    255            {
    256              //Search for an specific endpoint
    257              while(bdb_CurrEpDescriptorList != NULL)
   \                     ??bdb_setEpDescListToActiveEndpoint_0:
   \   000011   90....       MOV     DPTR,#bdb_CurrEpDescriptorList
   \   000014   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000017   6030         JZ      ??bdb_setEpDescListToActiveEndpoint_1
    258              {
    259                if(bdb_CurrEpDescriptorList->epDesc->endPoint == bdbIndentifyActiveEndpoint)
   \   000019   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00001C   F8           MOV     R0,A
   \   00001D   90....       MOV     DPTR,#bdbIndentifyActiveEndpoint
   \   000020   E0           MOVX    A,@DPTR
   \   000021   68           XRL     A,R0
   \   000022   601A         JZ      ??bdb_setEpDescListToActiveEndpoint_2
    260                {
    261                  return bdb_CurrEpDescriptorList->epDesc;
    262                }
    263                bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
   \   000024   12....       LCALL   ?Subroutine3 & 0xFFFF
    264              }
    265            }
   \                     ??CrossCallReturnLabel_29:
   \   000027   80E8         SJMP    ??bdb_setEpDescListToActiveEndpoint_0
    266            else
    267            {
    268              //Look for the first endpoint that has Identify cluster
    269              while(bdb_CurrEpDescriptorList != NULL)
    270              {
    271                if((bdb_CurrEpDescriptorList->epDesc->endPoint != 0) && (bdb_CurrEpDescriptorList->epDesc->endPoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
    272                {
    273                  return bdb_CurrEpDescriptorList->epDesc;
    274                }
    275                bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
   \                     ??bdb_setEpDescListToActiveEndpoint_3:
   \   000029   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00002C   90....       MOV     DPTR,#bdb_CurrEpDescriptorList
   \   00002F   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000032   6015         JZ      ??bdb_setEpDescListToActiveEndpoint_1
   \   000034   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000037   60F0         JZ      ??bdb_setEpDescListToActiveEndpoint_3
   \   000039   C3           CLR     C
   \   00003A   94F1         SUBB    A,#-0xf
   \   00003C   50EB         JNC     ??bdb_setEpDescListToActiveEndpoint_3
   \                     ??bdb_setEpDescListToActiveEndpoint_2:
   \   00003E   90....       MOV     DPTR,#bdb_CurrEpDescriptorList
   \   000041   12....       LCALL   ?Subroutine10 & 0xFFFF
    276              }
    277            }
   \                     ??CrossCallReturnLabel_10:
   \   000044   12....       LCALL   ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000047   8004         SJMP    ??bdb_setEpDescListToActiveEndpoint_4
    278            //not found
    279            return NULL;
   \                     ??bdb_setEpDescListToActiveEndpoint_1:
   \   000049   7A00         MOV     R2,#0x0
   \   00004B   7B00         MOV     R3,#0x0
   \                     ??bdb_setEpDescListToActiveEndpoint_4:
   \   00004D   80..         SJMP    ??Subroutine23_0
    280          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   90....       MOV     DPTR,#bdb_CurrEpDescriptorList
   \   000003   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000006                REQUIRE ??Subroutine22_0
   \   000006                ; // Fall through to label ??Subroutine22_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine22_0:
   \   000000   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000003   90....       MOV     DPTR,#bdb_CurrEpDescriptorList
   \   000006   E8           MOV     A,R0
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   E9           MOV     A,R1
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine30_0
   \   000002                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    281          
    282          
    283          
    284          /*********************************************************************
    285           * @fn      bdb_BindIfMatch
    286           *
    287           * @brief   To add binds in local table if a cluster in a simple descriptor
    288           *          from a remote finding and binding respondent matches
    289           *
    290           * @param   msgPtr - pointer to simple descriptor response indication message
    291           *
    292           * @return  none
    293           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    294          void bdb_BindIfMatch( bdbInMsg_t *msgPtr )
   \                     bdb_BindIfMatch:
    295          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
    296            ZStatus_t status;
    297            zAddrType_t dstAddr;
    298            uint8 i;
    299            endPointDesc_t *bdb_CurrEpDescriptor;
    300            bdbFindingBindingRespondent_t *pCurr;
    301          #ifdef ZCL_GROUPS  
    302            afAddrType_t afDstAddr;
    303            uint8 isBindAdded;
    304          #endif  
    305            
    306            dstAddr.addr.shortAddr = BUILD_UINT16( msgPtr->buf[1], msgPtr->buf[2] );
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FA           MOV     R2,A
   \   000017   85..82       MOV     DPL,?V0
   \   00001A   8B83         MOV     DPH,R3
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   EA           MOV     A,R2
   \   000023   85..82       MOV     DPL,?XSP + 0
   \   000026   85..83       MOV     DPH,?XSP + 1
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   E9           MOV     A,R1
   \   00002C   F0           MOVX    @DPTR,A
    307            dstAddr.addrMode = Addr16Bit;
   \   00002D   7408         MOV     A,#0x8
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   7402         MOV     A,#0x2
   \   000034   F0           MOVX    @DPTR,A
    308            
    309            ZDO_ParseSimpleDescBuf( &msgPtr->buf[4], &bdb_FindingBindingTargetSimpleDesc );
   \   000035                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   000035   7C..         MOV     R4,#bdb_FindingBindingTargetSimpleDesc & 0xff
   \   000037   7D..         MOV     R5,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
   \   000039   E5..         MOV     A,?V0
   \   00003B   2406         ADD     A,#0x6
   \   00003D   FA           MOV     R2,A
   \   00003E   E4           CLR     A
   \   00003F   35..         ADDC    A,?V1
   \   000041   FB           MOV     R3,A
   \   000042   12....       LCALL   `??ZDO_ParseSimpleDescBuf::?relay`; Banked call to: ZDO_ParseSimpleDescBuf
    310            
    311            pCurr = bdb_findRespondentNode(bdb_FindingBindingTargetSimpleDesc.EndPoint, dstAddr.addr.shortAddr);
   \   000045                ; Setup parameters for call to function bdb_findRespondentNode
   \   000045   85..82       MOV     DPL,?XSP + 0
   \   000048   85..83       MOV     DPH,?XSP + 1
   \   00004B   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00004E   90....       MOV     DPTR,#bdb_FindingBindingTargetSimpleDesc
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F9           MOV     R1,A
   \   000053   12....       LCALL   `??bdb_findRespondentNode::?relay`; Banked call to: bdb_findRespondentNode
   \   000056   8A..         MOV     ?V4,R2
   \   000058   8B..         MOV     ?V5,R3
   \   00005A   A8..         MOV     R0,?V4
   \   00005C   A9..         MOV     R1,?V5
    312            
    313            //Just for safety check this is valid
    314            if(pCurr != NULL) 
   \   00005E   E8           MOV     A,R0
   \   00005F   49           ORL     A,R1
   \   000060   601B         JZ      ??bdb_BindIfMatch_0
    315            {
    316              //Mark as processed
    317              pCurr->attempts = FINDING_AND_BINDING_MAX_ATTEMPTS;
   \   000062   E8           MOV     A,R0
   \   000063   240C         ADD     A,#0xc
   \   000065   F582         MOV     DPL,A
   \   000067   E4           CLR     A
   \   000068   39           ADDC    A,R1
   \   000069   F583         MOV     DPH,A
   \   00006B   7404         MOV     A,#0x4
   \   00006D   800D         SJMP    ??bdb_BindIfMatch_1
    318            }
    319            
    320            while(bdb_CurrEpDescriptorList != NULL)
    321            {
    322          #ifdef ZCL_GROUPS  
    323              isBindAdded = FALSE;
    324          #endif
    325          
    326              bdb_CurrEpDescriptor = bdb_CurrEpDescriptorList->epDesc;
    327            
    328              for(i = 0; i < bdb_CurrEpDescriptor->simpleDesc->AppNumOutClusters; i++)
    329              {
    330                //Filter for Application clusters (to bind app clusters only)
    331                status = bdb_zclFindingBindingAddBindEntry( bdb_CurrEpDescriptor->endPoint,
    332                                        bdb_CurrEpDescriptor->simpleDesc->pAppOutClusterList[i],
    333                                        bdb_FindingBindingTargetSimpleDesc.AppNumInClusters,
    334                                        bdb_FindingBindingTargetSimpleDesc.pAppInClusterList,
    335                                        &dstAddr, bdb_FindingBindingTargetSimpleDesc.EndPoint );
    336          #ifdef ZCL_GROUPS      
    337                if(status == ZSuccess)
    338                {
    339                  isBindAdded = TRUE;
    340                }
    341          #endif
    342                
    343                if ( status == ZApsTableFull )
    344                {
    345                  break;
    346                }
    347                
    348              }
    349              
    350              if(status != ZApsTableFull)
    351              {
    352                for(i = 0; i < bdb_CurrEpDescriptor->simpleDesc->AppNumInClusters; i++)
    353                {
    354                  //Filter for Application clusters (to bind app clusters only)
    355                  status = bdb_zclFindingBindingAddBindEntry( bdb_CurrEpDescriptor->endPoint,
    356                                          bdb_CurrEpDescriptor->simpleDesc->pAppInClusterList[i],
    357                                          bdb_FindingBindingTargetSimpleDesc.AppNumOutClusters,
    358                                          bdb_FindingBindingTargetSimpleDesc.pAppOutClusterList,
    359                                          &dstAddr, bdb_FindingBindingTargetSimpleDesc.EndPoint );
    360            #ifdef ZCL_GROUPS      
    361                  if(status == ZSuccess)
    362                  {
    363                    isBindAdded = TRUE;
    364                  }
    365            #endif
    366                  
    367                  if ( status == ZApsTableFull )
    368                  {
    369                    break;
    370                  }
    371                }
    372              }
    373          
    374          
    375          #ifdef ZCL_GROUPS
    376              // Configure Group
    377          
    378              if ( ( isBindAdded == TRUE ) && ( bdbAttributes.bdbCommissioningGroupID != 0xFFFF ) )
    379              {
    380                afDstAddr.addr.shortAddr = dstAddr.addr.shortAddr;
    381                afDstAddr.addrMode = afAddr16Bit;
    382                afDstAddr.endPoint = bdb_FindingBindingTargetSimpleDesc.EndPoint;
    383                    
    384                zclGeneral_SendAddGroupRequest( bdb_CurrEpDescriptor->endPoint, &afDstAddr,
    385                                            COMMAND_GROUP_ADD, bdbAttributes.bdbCommissioningGroupID, grpName,
    386                                            TRUE, 0x00 );
    387              }
    388          #endif
    389              
    390              if ( status == ZApsTableFull )
    391              {
    392                //If periodic was triggered, then finish it
    393                if(FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE)                                  
    394                {
    395                  bdb_FB_InitiatorCurrentCyclesNumber = 0;
    396                  osal_stop_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
    397                }      
    398                
    399                // free messages
    400                osal_msg_deallocate( (uint8*)msgPtr );
    401                bdb_zclSimpleDescClusterListClean( &bdb_FindingBindingTargetSimpleDesc );
    402                osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_SIMPLEDESC_TIMEOUT );
    403                bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_BINDING_TABLE_FULL );
    404                
    405                return;
    406              }
    407              
    408              if(bdbIndentifyActiveEndpoint != 0xFF)
    409              {
    410                break;
    411              }
    412              
    413              bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
   \                     ??bdb_BindIfMatch_2:
   \   00006F   90....       MOV     DPTR,#bdb_CurrEpDescriptorList
   \   000072   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000075   90....       MOV     DPTR,#bdb_CurrEpDescriptorList
   \   000078   E8           MOV     A,R0
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   A3           INC     DPTR
   \   00007B   E9           MOV     A,R1
   \                     ??bdb_BindIfMatch_1:
   \   00007C   F0           MOVX    @DPTR,A
   \                     ??bdb_BindIfMatch_0:
   \   00007D   90....       MOV     DPTR,#bdb_CurrEpDescriptorList
   \   000080   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000083   7003         JNZ     $+5
   \   000085   02....       LJMP    ??bdb_BindIfMatch_3 & 0xFFFF
   \   000088   7E00         MOV     R6,#0x0
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F583         MOV     DPH,A
   \   00008D   8882         MOV     DPL,R0
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   E0           MOVX    A,@DPTR
   \   000092   F5..         MOV     ?V4,A
   \   000094   A3           INC     DPTR
   \   000095   E0           MOVX    A,@DPTR
   \   000096   F5..         MOV     ?V5,A
   \   000098   7F00         MOV     R7,#0x0
   \   00009A   E5..         MOV     A,?V4
   \   00009C   2404         ADD     A,#0x4
   \   00009E   F5..         MOV     ?V6,A
   \   0000A0   E4           CLR     A
   \   0000A1   35..         ADDC    A,?V5
   \   0000A3   F5..         MOV     ?V7,A
   \   0000A5   800A         SJMP    ??bdb_BindIfMatch_4
   \                     ??bdb_BindIfMatch_5:
   \   0000A7   74B2         MOV     A,#-0x4e
   \   0000A9   65..         XRL     A,?V2
   \   0000AB   7003         JNZ     $+5
   \   0000AD   02....       LJMP    ??bdb_BindIfMatch_6 & 0xFFFF
   \                     ??bdb_BindIfMatch_7:
   \   0000B0   0F           INC     R7
   \                     ??bdb_BindIfMatch_4:
   \   0000B1   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   F8           MOV     R0,A
   \   0000B9   EF           MOV     A,R7
   \   0000BA   C3           CLR     C
   \   0000BB   98           SUBB    A,R0
   \   0000BC   5035         JNC     ??bdb_BindIfMatch_8
   \   0000BE                ; Setup parameters for call to function bdb_zclFindingBindingAddBindEntry
   \   0000BE   A8..         MOV     R0,?XSP + 0
   \   0000C0   A9..         MOV     R1,?XSP + 1
   \   0000C2   88..         MOV     ?V2,R0
   \   0000C4   89..         MOV     ?V3,R1
   \   0000C6   78..         MOV     R0,#?V2
   \   0000C8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CB   90....       MOV     DPTR,#bdb_FindingBindingTargetSimpleDesc + 7
   \   0000CE   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000D1   90....       MOV     DPTR,#bdb_FindingBindingTargetSimpleDesc
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   FD           MOV     R5,A
   \   0000D6   90....       MOV     DPTR,#bdb_FindingBindingTargetSimpleDesc + 6
   \   0000D9   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000E2   12....       LCALL   `??bdb_zclFindingBindingAddBindEntry::?relay`; Banked call to: bdb_zclFindingBindingAddBindEntry
   \   0000E5   7404         MOV     A,#0x4
   \   0000E7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EA   E9           MOV     A,R1
   \   0000EB   F5..         MOV     ?V2,A
   \   0000ED   70B8         JNZ     ??bdb_BindIfMatch_5
   \   0000EF   7E01         MOV     R6,#0x1
   \   0000F1   80BD         SJMP    ??bdb_BindIfMatch_7
   \                     ??bdb_BindIfMatch_8:
   \   0000F3   74B2         MOV     A,#-0x4e
   \   0000F5   65..         XRL     A,?V2
   \   0000F7   6045         JZ      ??bdb_BindIfMatch_6
   \   0000F9   7F00         MOV     R7,#0x0
   \   0000FB   8003         SJMP    ??bdb_BindIfMatch_9
   \                     ??bdb_BindIfMatch_10:
   \   0000FD   7E01         MOV     R6,#0x1
   \                     ??bdb_BindIfMatch_11:
   \   0000FF   0F           INC     R7
   \                     ??bdb_BindIfMatch_9:
   \   000100   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000103   E0           MOVX    A,@DPTR
   \   000104   F8           MOV     R0,A
   \   000105   EF           MOV     A,R7
   \   000106   C3           CLR     C
   \   000107   98           SUBB    A,R0
   \   000108   5034         JNC     ??bdb_BindIfMatch_6
   \   00010A                ; Setup parameters for call to function bdb_zclFindingBindingAddBindEntry
   \   00010A   A8..         MOV     R0,?XSP + 0
   \   00010C   A9..         MOV     R1,?XSP + 1
   \   00010E   88..         MOV     ?V2,R0
   \   000110   89..         MOV     ?V3,R1
   \   000112   78..         MOV     R0,#?V2
   \   000114   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000117   90....       MOV     DPTR,#bdb_FindingBindingTargetSimpleDesc + 10
   \   00011A   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00011D   90....       MOV     DPTR,#bdb_FindingBindingTargetSimpleDesc
   \   000120   E0           MOVX    A,@DPTR
   \   000121   FD           MOV     R5,A
   \   000122   90....       MOV     DPTR,#bdb_FindingBindingTargetSimpleDesc + 9
   \   000125   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000128   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00012B   12....       LCALL   `??bdb_zclFindingBindingAddBindEntry::?relay`; Banked call to: bdb_zclFindingBindingAddBindEntry
   \   00012E   7404         MOV     A,#0x4
   \   000130   12....       LCALL   ?DEALLOC_XSTACK8
   \   000133   E9           MOV     A,R1
   \   000134   F5..         MOV     ?V2,A
   \   000136   60C5         JZ      ??bdb_BindIfMatch_10
   \   000138   74B2         MOV     A,#-0x4e
   \   00013A   65..         XRL     A,?V2
   \   00013C   70C1         JNZ     ??bdb_BindIfMatch_11
   \                     ??bdb_BindIfMatch_6:
   \   00013E   EE           MOV     A,R6
   \   00013F   6070         JZ      ??bdb_BindIfMatch_12
   \   000141   90....       MOV     DPTR,#bdbAttributes + 8
   \   000144   E0           MOVX    A,@DPTR
   \   000145   F5..         MOV     ?V6,A
   \   000147   A3           INC     DPTR
   \   000148   E0           MOVX    A,@DPTR
   \   000149   F5..         MOV     ?V7,A
   \   00014B   74FF         MOV     A,#-0x1
   \   00014D   65..         XRL     A,?V6
   \   00014F   7004         JNZ     ??bdb_BindIfMatch_13
   \   000151   74FF         MOV     A,#-0x1
   \   000153   65..         XRL     A,?V7
   \                     ??bdb_BindIfMatch_13:
   \   000155   605A         JZ      ??bdb_BindIfMatch_12
   \   000157   85..82       MOV     DPL,?XSP + 0
   \   00015A   85..83       MOV     DPH,?XSP + 1
   \   00015D   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000160   7409         MOV     A,#0x9
   \   000162   12....       LCALL   ?XSTACK_DISP0_8
   \   000165   E8           MOV     A,R0
   \   000166   F0           MOVX    @DPTR,A
   \   000167   A3           INC     DPTR
   \   000168   E9           MOV     A,R1
   \   000169   F0           MOVX    @DPTR,A
   \   00016A   7411         MOV     A,#0x11
   \   00016C   12....       LCALL   ?XSTACK_DISP0_8
   \   00016F   7402         MOV     A,#0x2
   \   000171   F0           MOVX    @DPTR,A
   \   000172   90....       MOV     DPTR,#bdb_FindingBindingTargetSimpleDesc
   \   000175   E0           MOVX    A,@DPTR
   \   000176   C0E0         PUSH    A
   \   000178   7412         MOV     A,#0x12
   \   00017A   12....       LCALL   ?XSTACK_DISP0_8
   \   00017D   D0E0         POP     A
   \   00017F   F0           MOVX    @DPTR,A
   \   000180                ; Setup parameters for call to function zclGeneral_SendAddGroupRequest
   \   000180   75..00       MOV     ?V3,#0x0
   \   000183   78..         MOV     R0,#?V3
   \   000185   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000188   75....       MOV     ?V8,#grpName & 0xff
   \   00018B   75....       MOV     ?V9,#(grpName >> 8) & 0xff
   \   00018E   78..         MOV     R0,#?V8
   \   000190   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000193   78..         MOV     R0,#?V6
   \   000195   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000198   7D01         MOV     R5,#0x1
   \   00019A   7C00         MOV     R4,#0x0
   \   00019C   740E         MOV     A,#0xe
   \   00019E   12....       LCALL   ?XSTACK_DISP101_8
   \   0001A1   85..82       MOV     DPL,?V4
   \   0001A4   85..83       MOV     DPH,?V5
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   F9           MOV     R1,A
   \   0001A9   12....       LCALL   `??zclGeneral_SendAddGroupRequest::?relay`; Banked call to: zclGeneral_SendAddGroupRequest
   \   0001AC   7405         MOV     A,#0x5
   \   0001AE   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??bdb_BindIfMatch_12:
   \   0001B1   74B2         MOV     A,#-0x4e
   \   0001B3   65..         XRL     A,?V2
   \   0001B5   7031         JNZ     ??bdb_BindIfMatch_14
   \   0001B7   90....       MOV     DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   0001BA   E4           CLR     A
   \   0001BB   F0           MOVX    @DPTR,A
   \   0001BC                ; Setup parameters for call to function osal_stop_timerEx
   \   0001BC   7A40         MOV     R2,#0x40
   \   0001BE   FB           MOV     R3,A
   \   0001BF   90....       MOV     DPTR,#bdb_TaskID
   \   0001C2   E0           MOVX    A,@DPTR
   \   0001C3   F9           MOV     R1,A
   \   0001C4   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   0001C7                ; Setup parameters for call to function osal_msg_deallocate
   \   0001C7   AA..         MOV     R2,?V0
   \   0001C9   AB..         MOV     R3,?V1
   \   0001CB   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \   0001CE                ; Setup parameters for call to function bdb_zclSimpleDescClusterListClean
   \   0001CE   7A..         MOV     R2,#bdb_FindingBindingTargetSimpleDesc & 0xff
   \   0001D0   7B..         MOV     R3,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
   \   0001D2   12....       LCALL   `??bdb_zclSimpleDescClusterListClean::?relay`; Banked call to: bdb_zclSimpleDescClusterListClean
   \   0001D5                ; Setup parameters for call to function osal_stop_timerEx
   \   0001D5   7A00         MOV     R2,#0x0
   \   0001D7   7B40         MOV     R3,#0x40
   \   0001D9   90....       MOV     DPTR,#bdb_TaskID
   \   0001DC   E0           MOVX    A,@DPTR
   \   0001DD   F9           MOV     R1,A
   \   0001DE   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   0001E1                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   0001E1   790C         MOV     R1,#0xc
   \   0001E3   12....       LCALL   `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   \   0001E6   8018         SJMP    ??bdb_BindIfMatch_15
   \                     ??bdb_BindIfMatch_14:
   \   0001E8   90....       MOV     DPTR,#bdbIndentifyActiveEndpoint
   \   0001EB   E0           MOVX    A,@DPTR
   \   0001EC   F4           CPL     A
   \   0001ED   7003         JNZ     $+5
   \   0001EF   02....       LJMP    ??bdb_BindIfMatch_2 & 0xFFFF
    414            }
    415            
    416            // free messages
    417            osal_msg_deallocate( (uint8*)msgPtr );
   \                     ??bdb_BindIfMatch_3:
   \   0001F2                ; Setup parameters for call to function osal_msg_deallocate
   \   0001F2   AA..         MOV     R2,?V0
   \   0001F4   AB..         MOV     R3,?V1
   \   0001F6   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    418            bdb_zclSimpleDescClusterListClean( &bdb_FindingBindingTargetSimpleDesc );  
   \   0001F9                ; Setup parameters for call to function bdb_zclSimpleDescClusterListClean
   \   0001F9   7A..         MOV     R2,#bdb_FindingBindingTargetSimpleDesc & 0xff
   \   0001FB   7B..         MOV     R3,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
   \   0001FD   12....       LCALL   `??bdb_zclSimpleDescClusterListClean::?relay`; Banked call to: bdb_zclSimpleDescClusterListClean
    419          }
   \                     ??bdb_BindIfMatch_15:
   \   000200   7415         MOV     A,#0x15
   \   000202   12....       LCALL   ?DEALLOC_XSTACK8
   \   000205   7F0A         MOV     R7,#0xa
   \   000207   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   EF           MOV     A,R7
   \   000003   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   85..82       MOV     DPL,?V6
   \   000003   85..83       MOV     DPH,?V7
   \   000006   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   28           ADD     A,R0
   \   000009   FA           MOV     R2,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   39           ADDC    A,R1
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   F583         MOV     DPH,A
   \   000011   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000014   85..82       MOV     DPL,?V4
   \   000017   85..83       MOV     DPH,?V5
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000003   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   25E0         ADD     A,0xE0 /* A   */
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   22           RET
    420          
    421          /*********************************************************************
    422           * @fn      bdb_zclFindingBindingEpType
    423           *
    424           * @brief   Gives the Ep Type according to application clusters in
    425           *          simple descriptor
    426           *
    427           * @return  epType - If Target, Initiator or both
    428           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    429          uint8 bdb_zclFindingBindingEpType( endPointDesc_t *epDesc )
   \                     bdb_zclFindingBindingEpType:
    430          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    431            uint8 epType = 0;
   \   000005   75..00       MOV     ?V0,#0x0
    432            uint8 status;
    433            uint8 type1ClusterCnt;
    434            uint8 type2ClusterCnt;
    435            
    436            type1ClusterCnt = sizeof( bdb_ZclType1Clusters )/sizeof( uint16 );
    437            type2ClusterCnt = sizeof( bdb_ZclType2Clusters )/sizeof( uint16 );
    438            
    439          
    440            // Are there matching type 1 on server side?
    441            status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumInClusters, 
    442                                            epDesc->simpleDesc->pAppInClusterList,
    443                                            type1ClusterCnt,
    444                                            (uint16*)bdb_ZclType1Clusters);
    445            
    446            if( status == TRUE )
   \   000008   EA           MOV     A,R2
   \   000009   2404         ADD     A,#0x4
   \   00000B   FE           MOV     R6,A
   \   00000C   E4           CLR     A
   \   00000D   3B           ADDC    A,R3
   \   00000E   FF           MOV     R7,A
   \   00000F   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000012   75....       MOV     ?V4,#bdb_ZclType1Clusters & 0xff
   \   000015   75....       MOV     ?V5,#(bdb_ZclType1Clusters >> 8) & 0xff
   \   000018                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000018   78..         MOV     R0,#?V4
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   7C18         MOV     R4,#0x18
   \   00001F   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000022   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   000025   7402         MOV     A,#0x2
   \   000027   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002A   E9           MOV     A,R1
   \   00002B   6401         XRL     A,#0x1
   \   00002D   7003         JNZ     ??bdb_zclFindingBindingEpType_0
    447            {
    448              epType |= BDB_FINDING_AND_BINDING_TARGET;
   \   00002F   75..02       MOV     ?V0,#0x2
    449            }
    450            
    451            // Are there matching type 1 on client side?
    452            status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumOutClusters, 
    453                                            epDesc->simpleDesc->pAppOutClusterList,
    454                                            type1ClusterCnt,
    455                                            (uint16*)bdb_ZclType1Clusters);
    456            
    457            if( status == TRUE )
   \                     ??bdb_zclFindingBindingEpType_0:
   \   000032   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000035                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000035   78..         MOV     R0,#?V4
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   7C18         MOV     R4,#0x18
   \   00003C   85..82       MOV     DPL,?V2
   \   00003F   8983         MOV     DPH,R1
   \   000041   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000044   85..82       MOV     DPL,?V2
   \   000047   8983         MOV     DPH,R1
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F9           MOV     R1,A
   \   000054   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   000057   7402         MOV     A,#0x2
   \   000059   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005C   E9           MOV     A,R1
   \   00005D   6401         XRL     A,#0x1
   \   00005F   7006         JNZ     ??bdb_zclFindingBindingEpType_1
    458            {
    459              epType |= BDB_FINDING_AND_BINDING_INITIATOR;
   \   000061   E5..         MOV     A,?V0
   \   000063   D2E0         SETB    0xE0 /* A   */.0
   \   000065   F5..         MOV     ?V0,A
    460            }
    461            
    462            // Are there matching type 2 on server side?
    463            status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumInClusters, 
    464                                            epDesc->simpleDesc->pAppInClusterList,
    465                                            type2ClusterCnt,
    466                                            (uint16*)bdb_ZclType2Clusters);
    467            
    468            if( status == TRUE )
   \                     ??bdb_zclFindingBindingEpType_1:
   \   000067   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00006A   75....       MOV     ?V4,#bdb_ZclType2Clusters & 0xff
   \   00006D   75....       MOV     ?V5,#(bdb_ZclType2Clusters >> 8) & 0xff
   \   000070                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000070   78..         MOV     R0,#?V4
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   7C31         MOV     R4,#0x31
   \   000077   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00007A   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   00007D   7402         MOV     A,#0x2
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000082   E9           MOV     A,R1
   \   000083   6401         XRL     A,#0x1
   \   000085   7006         JNZ     ??bdb_zclFindingBindingEpType_2
    469            {
    470              epType |= BDB_FINDING_AND_BINDING_INITIATOR;
   \   000087   E5..         MOV     A,?V0
   \   000089   D2E0         SETB    0xE0 /* A   */.0
   \   00008B   F5..         MOV     ?V0,A
    471            }
    472            
    473            // Are there matching type 2 on client side?
    474            status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumOutClusters, 
    475                                            epDesc->simpleDesc->pAppOutClusterList,
    476                                            type2ClusterCnt,
    477                                            (uint16*)bdb_ZclType2Clusters);
    478            
    479            if( status == TRUE )
   \                     ??bdb_zclFindingBindingEpType_2:
   \   00008D   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000090   E8           MOV     A,R0
   \   000091   FE           MOV     R6,A
   \   000092   E9           MOV     A,R1
   \   000093   FF           MOV     R7,A
   \   000094                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000094   78..         MOV     R0,#?V4
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000099   7C31         MOV     R4,#0x31
   \   00009B   8E82         MOV     DPL,R6
   \   00009D   8F83         MOV     DPH,R7
   \   00009F   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0000A2   8E82         MOV     DPL,R6
   \   0000A4   8F83         MOV     DPH,R7
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F9           MOV     R1,A
   \   0000B1   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   0000B4   7402         MOV     A,#0x2
   \   0000B6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B9   E9           MOV     A,R1
   \   0000BA   6401         XRL     A,#0x1
   \   0000BC   7006         JNZ     ??bdb_zclFindingBindingEpType_3
    480            {
    481              epType |= BDB_FINDING_AND_BINDING_TARGET;
   \   0000BE   E5..         MOV     A,?V0
   \   0000C0   D2E1         SETB    0xE0 /* A   */.1
   \   0000C2   F5..         MOV     ?V0,A
    482            }
    483          
    484            return epType;
   \                     ??bdb_zclFindingBindingEpType_3:
   \   0000C4   A9..         MOV     R1,?V0
   \   0000C6   7F06         MOV     R7,#0x6
   \   0000C8   02....       LJMP    ?BANKED_LEAVE_XDATA
    485          
    486          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000007   88..         MOV     ?V2,R0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00000F   85..82       MOV     DPL,?V2
   \   000012   8983         MOV     DPH,R1
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine26_0
   \   000004                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008                REQUIRE ??Subroutine29_0
   \   000008                ; // Fall through to label ??Subroutine29_0
    487          
    488          /*********************************************************************
    489           * @fn      bdb_zclFindingBindingAddBindEntry
    490           *
    491           * @brief   This function is used to Add an entry to the binding table
    492           *
    493           * @param   SrcEndpInt - source endpoint
    494           * @param   BindClusterId - cluster to try bind
    495           * @param   Cnt - list of remote clusters
    496           * @param   ClusterList - pointer to the Object ID list
    497           * @param   DstAddr - Address of remote node
    498           * @param   DstEndpInt - EndPoint of remote node
    499           *
    500           * @return  status - Success if added
    501           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    502          static ZStatus_t bdb_zclFindingBindingAddBindEntry( byte SrcEndpInt,
   \                     bdb_zclFindingBindingAddBindEntry:
    503                                            uint16 BindClusterId,
    504                                            byte Cnt,                 
    505                                            uint16 * ClusterList,
    506                                            zAddrType_t *DstAddr, byte DstEndpInt )
    507          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   E9           MOV     A,R1
   \   000016   FE           MOV     R6,A
   \   000017   EC           MOV     A,R4
   \   000018   FF           MOV     R7,A
   \   000019   8D..         MOV     ?V0,R5
    508            uint8 status;
    509          
    510            if ( bdb_FindIfAppCluster ( BindClusterId ) != SUCCESS )
   \   00001B                ; Setup parameters for call to function bdb_FindIfAppCluster
   \   00001B   85..82       MOV     DPL,?XSP + 0
   \   00001E   85..83       MOV     DPH,?XSP + 1
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FA           MOV     R2,A
   \   000023   12....       LCALL   `??bdb_FindIfAppCluster::?relay`; Banked call to: bdb_FindIfAppCluster
   \   000026   E9           MOV     A,R1
   \   000027   7024         JNZ     ??bdb_zclFindingBindingAddBindEntry_0
    511            {
    512              return ( ZApsFail ); // No App cluster with reportable Attributes
    513            }
    514          
    515            // Are there matching clusters?
    516            status = ZDO_AnyClusterMatches( Cnt, 
    517                                            ClusterList,
    518                                            1,
    519                                           &BindClusterId);
    520            if ( status == FALSE )
   \   000029                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000029   A8..         MOV     R0,?XSP + 0
   \   00002B   A9..         MOV     R1,?XSP + 1
   \   00002D   88..         MOV     ?V2,R0
   \   00002F   89..         MOV     ?V3,R1
   \   000031   78..         MOV     R0,#?V2
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   7C01         MOV     R4,#0x1
   \   000038   7410         MOV     A,#0x10
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000040   EF           MOV     A,R7
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   000045   7402         MOV     A,#0x2
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004A   E9           MOV     A,R1
   \   00004B   7004         JNZ     ??bdb_zclFindingBindingAddBindEntry_1
    521            {
    522              return ( ZApsFail ); // No matched Cluster
   \                     ??bdb_zclFindingBindingAddBindEntry_0:
   \   00004D   79B1         MOV     R1,#-0x4f
   \   00004F   803A         SJMP    ??bdb_zclFindingBindingAddBindEntry_2
    523            }
    524            
    525            if ( pbindAddEntry )
   \                     ??bdb_zclFindingBindingAddBindEntry_1:
   \   000051   90....       MOV     DPTR,#pbindAddEntry
   \   000054   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000057   6030         JZ      ??bdb_zclFindingBindingAddBindEntry_3
    526            {
    527              // Add the entry into the binding table
    528              if ( pbindAddEntry( SrcEndpInt, DstAddr, DstEndpInt,
    529                                     1, &BindClusterId ) )
   \   000059                ; Setup parameters for indirect call
   \   000059   78..         MOV     R0,#?V2
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005E   7D01         MOV     R5,#0x1
   \   000060   AC..         MOV     R4,?V0
   \   000062   7412         MOV     A,#0x12
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00006A   EE           MOV     A,R6
   \   00006B   F9           MOV     R1,A
   \   00006C   90....       MOV     DPTR,#pbindAddEntry
   \   00006F   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000072   12....       LCALL   ?CALL_IND
   \   000075   7402         MOV     A,#0x2
   \   000077   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007A   8B..         MOV     ?V3,R3
   \   00007C   EA           MOV     A,R2
   \   00007D   45..         ORL     A,?V3
   \   00007F   6004         JZ      ??bdb_zclFindingBindingAddBindEntry_4
    530              {
    531                return ( ZSuccess );
   \   000081   7900         MOV     R1,#0x0
   \   000083   8006         SJMP    ??bdb_zclFindingBindingAddBindEntry_2
    532              }
    533              else
    534              {
    535                return ( ZApsTableFull );
   \                     ??bdb_zclFindingBindingAddBindEntry_4:
   \   000085   79B2         MOV     R1,#-0x4e
   \   000087   8002         SJMP    ??bdb_zclFindingBindingAddBindEntry_2
    536              }
    537            }
    538            else
    539            {
    540              return ( ZApsNotSupported );
   \                     ??bdb_zclFindingBindingAddBindEntry_3:
   \   000089   79B6         MOV     R1,#-0x4a
   \                     ??bdb_zclFindingBindingAddBindEntry_2:
   \   00008B   7402         MOV     A,#0x2
   \   00008D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000090   7F04         MOV     R7,#0x4
   \   000092   02....       LJMP    ?BANKED_LEAVE_XDATA
    541            }
    542          }
    543          
    544          /*********************************************************************
    545           * @fn      bdb_exitFindingBindingWStatus
    546           *
    547           * @brief   Clean respondent list and reports the status to bdb state machine
    548           *
    549           * @return  
    550           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    551          void bdb_exitFindingBindingWStatus( uint8 status )
   \                     bdb_exitFindingBindingWStatus:
    552          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    553            // bdb report status
    554            bdbAttributes.bdbCommissioningStatus = status;
   \   000006   90....       MOV     DPTR,#bdbAttributes + 10
   \   000009   F0           MOVX    @DPTR,A
    555            
    556            bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_FINDING_BINDING, TRUE );
   \   00000A                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00000A   7A01         MOV     R2,#0x1
   \   00000C   7906         MOV     R1,#0x6
   \   00000E   12....       LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    557          }
   \   000011   7F01         MOV     R7,#0x1
   \   000013   02....       LJMP    ?BANKED_LEAVE_XDATA
    558          
    559          /*********************************************************************
    560           * @fn      bdb_zclSimpleDescClusterListClean
    561           *
    562           * @brief   This function free Simple Descriptor cluster lists
    563           *
    564           * @param   pSimpleDesc - pointer to simple descriptor
    565           *
    566           * @return  status
    567           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    568          static void bdb_zclSimpleDescClusterListClean( SimpleDescriptionFormat_t *pSimpleDesc )
   \                     bdb_zclSimpleDescClusterListClean:
    569          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    570            if(pSimpleDesc->pAppInClusterList != NULL)
   \   000009   EE           MOV     A,R6
   \   00000A   2407         ADD     A,#0x7
   \   00000C   F8           MOV     R0,A
   \   00000D   E4           CLR     A
   \   00000E   3F           ADDC    A,R7
   \   00000F   F9           MOV     R1,A
   \   000010   88..         MOV     ?V0,R0
   \   000012   89..         MOV     ?V1,R1
   \   000014   8882         MOV     DPL,R0
   \   000016   F583         MOV     DPH,A
   \   000018   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00001B   EA           MOV     A,R2
   \   00001C   4B           ORL     A,R3
   \   00001D   600D         JZ      ??bdb_zclSimpleDescClusterListClean_0
    571            {
    572              osal_mem_free( pSimpleDesc->pAppInClusterList );
   \   00001F                ; Setup parameters for call to function osal_mem_free
   \   00001F   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    573              pSimpleDesc->pAppInClusterList = ( cId_t* )NULL;
   \   000022   85..82       MOV     DPL,?V0
   \   000025   85..83       MOV     DPH,?V1
   \   000028   E4           CLR     A
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   F0           MOVX    @DPTR,A
    574            }
    575            if(pSimpleDesc->pAppOutClusterList != NULL)
   \                     ??bdb_zclSimpleDescClusterListClean_0:
   \   00002C   EE           MOV     A,R6
   \   00002D   240A         ADD     A,#0xa
   \   00002F   F8           MOV     R0,A
   \   000030   E4           CLR     A
   \   000031   3F           ADDC    A,R7
   \   000032   F9           MOV     R1,A
   \   000033   E8           MOV     A,R0
   \   000034   FE           MOV     R6,A
   \   000035   E9           MOV     A,R1
   \   000036   FF           MOV     R7,A
   \   000037   8E82         MOV     DPL,R6
   \   000039   8F83         MOV     DPH,R7
   \   00003B   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00003E   EA           MOV     A,R2
   \   00003F   4B           ORL     A,R3
   \   000040   600B         JZ      ??bdb_zclSimpleDescClusterListClean_1
    576            {
    577              osal_mem_free( pSimpleDesc->pAppOutClusterList );
   \   000042                ; Setup parameters for call to function osal_mem_free
   \   000042   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    578              pSimpleDesc->pAppOutClusterList = ( cId_t* )NULL;
   \   000045   8E82         MOV     DPL,R6
   \   000047   8F83         MOV     DPH,R7
   \   000049   E4           CLR     A
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   F0           MOVX    @DPTR,A
    579            }
    580          }
   \                     ??bdb_zclSimpleDescClusterListClean_1:
   \   00004D                REQUIRE ?Subroutine1
   \   00004D                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    581          
    582          /*********************************************************************
    583           * @fn      bdb_RegisterIdentifyTimeChangeCB
    584           *
    585           * @brief   Register an Application's Identify Time change callback function
    586           *          to let know the application when identify is active or not.
    587           *
    588           * @param   pfnIdentify - application callback
    589           *
    590           * @return  none
    591           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005                REQUIRE ??Subroutine23_0
   \   000005                ; // Fall through to label ??Subroutine23_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    592          void bdb_RegisterIdentifyTimeChangeCB( bdbGCB_IdentifyTimeChange_t pfnIdentifyTimeChange )
   \                     bdb_RegisterIdentifyTimeChangeCB:
    593          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    594            pfnIdentifyTimeChangeCB = pfnIdentifyTimeChange;
   \   000004   90....       MOV     DPTR,#pfnIdentifyTimeChangeCB
   \   000007   02....       LJMP    ?Subroutine0 & 0xFFFF
    595          }
    596          
    597          #if (FINDING_AND_BINDING_PERIODIC_ENABLE==TRUE)
    598          /*********************************************************************
    599           * @fn      bdb_GetFBInitiatorStatus
    600           *
    601           * @brief   Get the F&B initiator status for periodic requests.
    602           *
    603           * @param   RemainingTime - in seconds
    604           * @param   AttemptsLeft - number of attempts to be done
    605           * @param   MatchesFound - Add the number of matches to this parameter
    606           *                         since the last bdb_GetFBInitiatorStatus call
    607           *
    608           * @return  none
    609           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    610          void bdb_GetFBInitiatorStatus(uint8 *RemainingTime, uint8* AttemptsLeft)
   \                     bdb_GetFBInitiatorStatus:
    611          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
    612            if(RemainingTime != NULL)  
   \   00000D   EE           MOV     A,R6
   \   00000E   4F           ORL     A,R7
   \   00000F   6048         JZ      ??bdb_GetFBInitiatorStatus_0
    613            {
    614              if (bdb_FB_InitiatorCurrentCyclesNumber == 0)
   \   000011   90....       MOV     DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   000014   E0           MOVX    A,@DPTR
   \   000015   7007         JNZ     ??bdb_GetFBInitiatorStatus_1
    615              {
    616                *RemainingTime = 0;
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   E4           CLR     A
   \   00001C   803A         SJMP    ??bdb_GetFBInitiatorStatus_2
    617              }
    618              else
    619              {
    620                *RemainingTime = (bdb_FB_InitiatorCurrentCyclesNumber - 1) * FINDING_AND_BINDING_PERIODIC_TIME + ((osal_get_timeoutEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT) + 999) / 1000);
   \                     ??bdb_GetFBInitiatorStatus_1:
   \   00001E                ; Setup parameters for call to function osal_get_timeoutEx
   \   00001E   7A40         MOV     R2,#0x40
   \   000020   7B00         MOV     R3,#0x0
   \   000022   90....       MOV     DPTR,#bdb_TaskID
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F9           MOV     R1,A
   \   000027   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   00002A   8A..         MOV     ?V4,R2
   \   00002C   8B..         MOV     ?V5,R3
   \   00002E   8C..         MOV     ?V6,R4
   \   000030   8D..         MOV     ?V7,R5
   \   000032   90....       MOV     DPTR,#__Constant_3e7
   \   000035   78..         MOV     R0,#?V4
   \   000037   12....       LCALL   ?L_ADD_X
   \   00003A   90....       MOV     DPTR,#__Constant_3e8
   \   00003D   78..         MOV     R0,#?V8
   \   00003F   12....       LCALL   ?L_MOV_X
   \   000042   78..         MOV     R0,#?V4
   \   000044   79..         MOV     R1,#?V8
   \   000046   12....       LCALL   ?UL_DIV_MOD
   \   000049   75F00F       MOV     B,#0xf
   \   00004C   90....       MOV     DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   14           DEC     A
   \   000051   A4           MUL     AB
   \   000052   25..         ADD     A,?V4
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \                     ??bdb_GetFBInitiatorStatus_2:
   \   000058   F0           MOVX    @DPTR,A
    621              }
    622            }
    623            
    624            if(AttemptsLeft != NULL)
   \                     ??bdb_GetFBInitiatorStatus_0:
   \   000059   E5..         MOV     A,?V0
   \   00005B   45..         ORL     A,?V1
   \   00005D   600B         JZ      ??bdb_GetFBInitiatorStatus_3
    625            {
    626              *AttemptsLeft = bdb_FB_InitiatorCurrentCyclesNumber;
   \   00005F   90....       MOV     DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   000062   E0           MOVX    A,@DPTR
   \   000063   85..82       MOV     DPL,?V0
   \   000066   85..83       MOV     DPH,?V1
   \   000069   F0           MOVX    @DPTR,A
    627            }
    628          }
   \                     ??bdb_GetFBInitiatorStatus_3:
   \   00006A   7F0C         MOV     R7,#0xc
   \   00006C   02....       LJMP    ?BANKED_LEAVE_XDATA
    629          #endif
    630          
    631          /*********************************************************************
    632           * @fn      bdb_RegisterBindNotificationCB
    633           *
    634           * @brief   Register an Application's notification callback function to let 
    635           *          know the application when a new bind is added to the binding table.
    636           *
    637           * @param   pfnIdentify - application callback
    638           *
    639           * @return  none
    640           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    641          void bdb_RegisterBindNotificationCB( bdbGCB_BindNotification_t pfnBindNotification )
   \                     bdb_RegisterBindNotificationCB:
    642          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    643            pfnBindNotificationCB = pfnBindNotification;
   \   000004   90....       MOV     DPTR,#pfnBindNotificationCB
   \   000007   02....       LJMP    ?Subroutine0 & 0xFFFF
    644          }
    645          
    646          /*********************************************************************
    647           * @fn      bdb_SendIdentifyQuery
    648           *
    649           * @brief   Sends Identify query from the given endpoint
    650           *
    651           * @param   endpoint
    652           *
    653           * @return  ZStatus_t
    654           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    655          ZStatus_t bdb_SendIdentifyQuery( uint8 endpoint )
   \                     bdb_SendIdentifyQuery:
    656          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
    657            afAddrType_t dstAddr;
    658            ZStatus_t    status;
    659            
    660            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVALL;
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   74FF         MOV     A,#-0x1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   F0           MOVX    @DPTR,A
    661            dstAddr.addrMode = afAddr16Bit;
   \   000017   7408         MOV     A,#0x8
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   7402         MOV     A,#0x2
   \   00001E   F0           MOVX    @DPTR,A
    662            dstAddr.endPoint = 0xFF;
   \   00001F   7409         MOV     A,#0x9
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   74FF         MOV     A,#-0x1
   \   000026   F0           MOVX    @DPTR,A
    663          
    664            status = zclGeneral_SendIdentifyQuery( endpoint, &dstAddr, TRUE, bdb_getZCLFrameCounter() ); 
   \   000027                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   000027   12....       LCALL   `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
   \   00002A   E9           MOV     A,R1
   \   00002B   F9           MOV     R1,A
   \   00002C                ; Setup parameters for call to function zcl_SendCommand
   \   00002C   E4           CLR     A
   \   00002D   F5..         MOV     ?V0,A
   \   00002F   F5..         MOV     ?V1,A
   \   000031   78..         MOV     R0,#?V0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   78..         MOV     R0,#?V0
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   E9           MOV     A,R1
   \   00003C   F5..         MOV     ?V0,A
   \   00003E   78..         MOV     R0,#?V0
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000043   E4           CLR     A
   \   000044   F5..         MOV     ?V0,A
   \   000046   78..         MOV     R0,#?V0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   75..01       MOV     ?V0,#0x1
   \   00004E   78..         MOV     R0,#?V0
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000053   75..00       MOV     ?V0,#0x0
   \   000056   78..         MOV     R0,#?V0
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005B   75..01       MOV     ?V0,#0x1
   \   00005E   78..         MOV     R0,#?V0
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000063   78..         MOV     R0,#?V0
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000068   7C03         MOV     R4,#0x3
   \   00006A   7D00         MOV     R5,#0x0
   \   00006C   740B         MOV     A,#0xb
   \   00006E   12....       LCALL   ?XSTACK_DISP101_8
   \   000071   EF           MOV     A,R7
   \   000072   F9           MOV     R1,A
   \   000073   12....       LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000076   740B         MOV     A,#0xb
   \   000078   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007B   E9           MOV     A,R1
   \   00007C   FE           MOV     R6,A
    665            
    666            if(status == ZSuccess)
   \   00007D   7017         JNZ     ??bdb_SendIdentifyQuery_0
    667            {
    668              osal_start_timerEx( bdb_TaskID, BDB_RESPONDENT_SIMPLEDESC_TIMEOUT, IDENTIFY_QUERY_RSP_TIMEOUT );
   \   00007F                ; Setup parameters for call to function osal_start_timerEx
   \   00007F   90....       MOV     DPTR,#__Constant_2710
   \   000082   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000085   7A00         MOV     R2,#0x0
   \   000087   7B40         MOV     R3,#0x40
   \   000089   90....       MOV     DPTR,#bdb_TaskID
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   F9           MOV     R1,A
   \   00008E   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000091   7404         MOV     A,#0x4
   \   000093   12....       LCALL   ?DEALLOC_XSTACK8
    669            }
    670            
    671            return status;
   \                     ??bdb_SendIdentifyQuery_0:
   \   000096   EE           MOV     A,R6
   \   000097   F9           MOV     R1,A
   \   000098   740C         MOV     A,#0xc
   \   00009A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009D   02....       LJMP    ?Subroutine1 & 0xFFFF
    672          }
    673          
    674          /*********************************************************************
    675           * @fn      bdb_ZclIdentifyQueryCmdInd
    676           *
    677           * @brief   Callback from the ZCL General Cluster Library when
    678           *          it received an Identity Query Response Command for this 
    679           *          application.
    680           *
    681           * @param   srcAddr - source address and endpoint of the response message
    682           * @param   identifyTime - the number of seconds to identify yourself
    683           *
    684           * @return  none
    685           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    686          void bdb_ZclIdentifyQueryCmdInd( zclIdentifyQueryRsp_t *pCmd )
   \                     bdb_ZclIdentifyQueryCmdInd:
    687          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    688            bdbFindingBindingRespondent_t *pCurr;
    689            
    690            // Stop the timer before refresh
    691            osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_SIMPLEDESC_TIMEOUT );
   \   000009                ; Setup parameters for call to function osal_stop_timerEx
   \   000009   7A00         MOV     R2,#0x0
   \   00000B   7B40         MOV     R3,#0x40
   \   00000D   90....       MOV     DPTR,#bdb_TaskID
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    692            
    693            // add new node to the list
    694            pCurr = bdb_AddRespondentNode( &pRespondentHead, pCmd );
   \   000015                ; Setup parameters for call to function bdb_AddRespondentNode
   \   000015   EE           MOV     A,R6
   \   000016   FC           MOV     R4,A
   \   000017   EF           MOV     A,R7
   \   000018   FD           MOV     R5,A
   \   000019   7A..         MOV     R2,#pRespondentHead & 0xff
   \   00001B   7B..         MOV     R3,#(pRespondentHead >> 8) & 0xff
   \   00001D   12....       LCALL   `??bdb_AddRespondentNode::?relay`; Banked call to: bdb_AddRespondentNode
    695            
    696            if(pCurr != NULL)
   \   000020   EA           MOV     A,R2
   \   000021   4B           ORL     A,R3
   \   000022   6051         JZ      ??bdb_ZclIdentifyQueryCmdInd_0
    697            {
    698              pCurr->data.addrMode = pCmd->srcAddr->addrMode;
   \   000024   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000027   8882         MOV     DPL,R0
   \   000029   8983         MOV     DPH,R1
   \   00002B   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00002E   F0           MOVX    @DPTR,A
    699              pCurr->data.addr.shortAddr = pCmd->srcAddr->addr.shortAddr;
   \   00002F   8882         MOV     DPL,R0
   \   000031   8983         MOV     DPH,R1
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FC           MOV     R4,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   FD           MOV     R5,A
   \   000038   8A82         MOV     DPL,R2
   \   00003A   8B83         MOV     DPH,R3
   \   00003C   EC           MOV     A,R4
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   ED           MOV     A,R5
   \   000040   F0           MOVX    @DPTR,A
    700              pCurr->data.endPoint = pCmd->srcAddr->endPoint;
   \   000041   8882         MOV     DPL,R0
   \   000043   8983         MOV     DPH,R1
   \   000045   A3           INC     DPTR
   \   000046   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000049   A3           INC     DPTR
   \   00004A   F0           MOVX    @DPTR,A
    701              pCurr->data.panId = pCmd->srcAddr->panId;
   \   00004B   8E82         MOV     DPL,R6
   \   00004D   8F83         MOV     DPH,R7
   \   00004F   12....       LCALL   ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000052   240A         ADD     A,#0xa
   \   000054   F582         MOV     DPL,A
   \   000056   E4           CLR     A
   \   000057   38           ADDC    A,R0
   \   000058   F583         MOV     DPH,A
   \   00005A   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00005D   8A82         MOV     DPL,R2
   \   00005F   8B83         MOV     DPH,R3
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   E8           MOV     A,R0
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   E9           MOV     A,R1
   \   00006F   F0           MOVX    @DPTR,A
    702              pCurr->attempts = 0;
   \   000070   12....       LCALL   ?Subroutine17 & 0xFFFF
    703            }
   \                     ??CrossCallReturnLabel_22:
   \   000073   E4           CLR     A
   \   000074   F0           MOVX    @DPTR,A
    704            
    705            //Process the identify query rsp
    706            osal_set_event(bdb_TaskID, BDB_RESPONDENT_SIMPLEDESC_TIMEOUT);
   \                     ??bdb_ZclIdentifyQueryCmdInd_0:
   \   000075                ; Setup parameters for call to function osal_set_event
   \   000075   7A00         MOV     R2,#0x0
   \   000077   7B40         MOV     R3,#0x40
   \   000079   90....       MOV     DPTR,#bdb_TaskID
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F9           MOV     R1,A
   \   00007E   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    707          }
   \   000081   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C8           XCH     A,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   EA           MOV     A,R2
   \   000001   240C         ADD     A,#0xc
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3B           ADDC    A,R3
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET
    708          
    709          /*********************************************************************
    710           * @fn      bdb_SendSimpleDescReq
    711           *
    712           * @brief   Send Simple Descriptor request to current Finding and Binding
    713           *          respondent in the list.
    714           *
    715           * @param   none
    716           *
    717           * @return  none
    718           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   90....       MOV     DPTR,#pRespondentCurr
   \   000003   EA           MOV     A,R2
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   EB           MOV     A,R3
   \   000007   F0           MOVX    @DPTR,A
   \   000008                REQUIRE ??Subroutine24_0
   \   000008                ; // Fall through to label ??Subroutine24_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000   90....       MOV     DPTR,#pRespondentCurr
   \   000003                REQUIRE ??Subroutine25_0
   \   000003                ; // Fall through to label ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    719          void bdb_SendSimpleDescReq( void )
   \                     bdb_SendSimpleDescReq:
    720          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    721          zAddrType_t dstAddr = { 0 };
   \   00000A   90....       MOV     DPTR,#`?<Constant {{0}}>`
   \   00000D   AC..         MOV     R4,?XSP + 0
   \   00000F   AD..         MOV     R5,?XSP + 1
   \   000011   7409         MOV     A,#0x9
   \   000013   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    722            
    723            // Look for the first respondent
    724            if ( pRespondentCurr == NULL )
   \   000016   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000019   701A         JNZ     ??bdb_SendSimpleDescReq_0
    725            {
    726              pRespondentCurr = bdb_getRespondentRetry(pRespondentHead);
   \   00001B                ; Setup parameters for call to function bdb_getRespondentRetry
   \   00001B   90....       MOV     DPTR,#pRespondentHead
   \   00001E   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000021   12....       LCALL   `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
   \   000024   12....       LCALL   ?Subroutine2 & 0xFFFF
    727              
    728              // If null, then no responses from Identify query request
    729              if ( (pRespondentCurr == NULL) )
   \                     ??CrossCallReturnLabel_31:
   \   000027   7032         JNZ     ??bdb_SendSimpleDescReq_1
    730              {
    731                //No responses, then no responses
    732                if(pRespondentHead == NULL)
   \   000029   90....       MOV     DPTR,#pRespondentHead
   \   00002C   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00002F   701A         JNZ     ??bdb_SendSimpleDescReq_2
    733                {
    734                  bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE );
   \   000031                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   000031   790B         MOV     R1,#0xb
   \   000033   8018         SJMP    ??bdb_SendSimpleDescReq_3
    735                }
    736                //Responses and binded to all clusters possible
    737                else
    738                {
    739                  bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_SUCCESS );
    740                }
    741                return;
    742              }
    743            }
    744            else
    745            {
    746              if(pRespondentNext == NULL)
   \                     ??bdb_SendSimpleDescReq_0:
   \   000035   90....       MOV     DPTR,#pRespondentNext
   \   000038   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00003B   7016         JNZ     ??bdb_SendSimpleDescReq_4
    747              {
    748                //Review the whole list if we have simple desc that we need to attempt.
    749                pRespondentCurr = bdb_getRespondentRetry(pRespondentHead);
   \   00003D                ; Setup parameters for call to function bdb_getRespondentRetry
   \   00003D   90....       MOV     DPTR,#pRespondentHead
   \   000040   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000043   12....       LCALL   `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
   \   000046   12....       LCALL   ?Subroutine2 & 0xFFFF
    750                  
    751                if(pRespondentCurr == NULL)
   \                     ??CrossCallReturnLabel_32:
   \   000049   7010         JNZ     ??bdb_SendSimpleDescReq_1
    752                {
    753                  bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_SUCCESS );
   \   00004B                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \                     ??bdb_SendSimpleDescReq_2:
   \   00004B   7900         MOV     R1,#0x0
   \                     ??bdb_SendSimpleDescReq_3:
   \   00004D   12....       LCALL   `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
    754                  return;
   \   000050   02....       LJMP    ??bdb_SendSimpleDescReq_5 & 0xFFFF
    755                }
    756              }
    757              else
    758              {
    759                pRespondentCurr = pRespondentNext;
   \                     ??bdb_SendSimpleDescReq_4:
   \   000053   90....       MOV     DPTR,#pRespondentCurr
   \   000056   E8           MOV     A,R0
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   E9           MOV     A,R1
   \   00005A   F0           MOVX    @DPTR,A
    760              }
    761            }
    762            
    763            //If ParentLost is reported, then do not attempt send SimpleDesc, mark those as pending, 
    764            //if Parent Lost is restored, then these simpleDesc attempts will be restored to 0
    765            if(bdbCommissioningProcedureState.bdbCommissioningState != BDB_PARENT_LOST)
   \                     ??bdb_SendSimpleDescReq_1:
   \   00005B   90....       MOV     DPTR,#bdbCommissioningProcedureState
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   6408         XRL     A,#0x8
   \   000061   90....       MOV     DPTR,#pRespondentCurr
   \   000064   605A         JZ      ??bdb_SendSimpleDescReq_6
    766            {
    767              dstAddr.addr.shortAddr = pRespondentCurr->data.addr.shortAddr;
   \   000066   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000069   85..82       MOV     DPL,?XSP + 0
   \   00006C   85..83       MOV     DPH,?XSP + 1
   \   00006F   E8           MOV     A,R0
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
   \   000072   E9           MOV     A,R1
   \   000073   12....       LCALL   ?Subroutine16 & 0xFFFF
    768              dstAddr.addrMode = pRespondentCurr->data.addrMode;
   \                     ??CrossCallReturnLabel_50:
   \   000076   2408         ADD     A,#0x8
   \   000078   F582         MOV     DPL,A
   \   00007A   E4           CLR     A
   \   00007B   38           ADDC    A,R0
   \   00007C   F583         MOV     DPH,A
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   C0E0         PUSH    A
   \   000081   7408         MOV     A,#0x8
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   D0E0         POP     A
   \   000088   F0           MOVX    @DPTR,A
    769              
    770              ZDP_SimpleDescReq( &dstAddr, pRespondentCurr->data.addr.shortAddr, pRespondentCurr->data.endPoint, 0 );
   \   000089                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   000089   75..00       MOV     ?V0,#0x0
   \   00008C   78..         MOV     R0,#?V0
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000091   12....       LCALL   ??Subroutine27_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000094   2409         ADD     A,#0x9
   \   000096   F582         MOV     DPL,A
   \   000098   E4           CLR     A
   \   000099   38           ADDC    A,R0
   \   00009A   F583         MOV     DPH,A
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   F9           MOV     R1,A
   \   00009E   90....       MOV     DPTR,#pRespondentCurr
   \   0000A1   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   FC           MOV     R4,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   FD           MOV     R5,A
   \   0000A9   7401         MOV     A,#0x1
   \   0000AB   12....       LCALL   ?XSTACK_DISP101_8
   \   0000AE   12....       LCALL   `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
   \   0000B1   7401         MOV     A,#0x1
   \   0000B3   12....       LCALL   ?DEALLOC_XSTACK8
    771              
    772              //Update the attempts
    773              pRespondentCurr->attempts++;
   \   0000B6   90....       MOV     DPTR,#pRespondentCurr
   \   0000B9   12....       LCALL   ?Subroutine11 & 0xFFFF
    774            }
   \                     ??CrossCallReturnLabel_13:
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   04           INC     A
   \   0000BE   8005         SJMP    ??bdb_SendSimpleDescReq_7
    775            else
    776            {
    777              pRespondentCurr->attempts = BDB_SIMPLE_DESC_PENDING_PARENT_LOST;
   \                     ??bdb_SendSimpleDescReq_6:
   \   0000C0   12....       LCALL   ?Subroutine11 & 0xFFFF
    778            }
   \                     ??CrossCallReturnLabel_14:
   \   0000C3   74FE         MOV     A,#-0x2
   \                     ??bdb_SendSimpleDescReq_7:
   \   0000C5   12....       LCALL   ?Subroutine16 & 0xFFFF
    779            
    780            
    781            //Search for the next respondant that has not enough tries in the list
    782            pRespondentNext = bdb_getRespondentRetry(pRespondentCurr->pNext);
   \                     ??CrossCallReturnLabel_51:
   \   0000C8   240D         ADD     A,#0xd
   \   0000CA   F582         MOV     DPL,A
   \   0000CC   E4           CLR     A
   \   0000CD   38           ADDC    A,R0
   \   0000CE   F583         MOV     DPH,A
   \   0000D0   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0000D3   12....       LCALL   `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
   \   0000D6   90....       MOV     DPTR,#pRespondentNext
   \   0000D9   EA           MOV     A,R2
   \   0000DA   F0           MOVX    @DPTR,A
   \   0000DB   A3           INC     DPTR
   \   0000DC   EB           MOV     A,R3
   \   0000DD   F0           MOVX    @DPTR,A
    783            
    784            osal_start_timerEx( bdb_TaskID, BDB_RESPONDENT_SIMPLEDESC_TIMEOUT, SIMPLEDESC_RESPONSE_TIMEOUT );
   \   0000DE                ; Setup parameters for call to function osal_start_timerEx
   \   0000DE   90....       MOV     DPTR,#zgPollRate
   \   0000E1   78..         MOV     R0,#?V0
   \   0000E3   12....       LCALL   ?L_MOV_X
   \   0000E6   90....       MOV     DPTR,#__Constant_3
   \   0000E9   78..         MOV     R0,#?V4
   \   0000EB   12....       LCALL   ?L_MOV_X
   \   0000EE   78..         MOV     R0,#?V0
   \   0000F0   79..         MOV     R1,#?V4
   \   0000F2   12....       LCALL   ?L_MUL
   \   0000F5   78..         MOV     R0,#?V0
   \   0000F7   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000FA   7A00         MOV     R2,#0x0
   \   0000FC   7B40         MOV     R3,#0x40
   \   0000FE   90....       MOV     DPTR,#bdb_TaskID
   \   000101   E0           MOVX    A,@DPTR
   \   000102   F9           MOV     R1,A
   \   000103   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000106   7404         MOV     A,#0x4
   \   000108   12....       LCALL   ?DEALLOC_XSTACK8
    785            
    786          }
   \                     ??bdb_SendSimpleDescReq_5:
   \   00010B   7409         MOV     A,#0x9
   \   00010D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000110   7F08         MOV     R7,#0x8
   \   000112   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function bdb_getRespondentRetry
   \   000001                REQUIRE ??Subroutine27_0
   \   000001                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   90....       MOV     DPTR,#pRespondentCurr
   \   000003                REQUIRE ??Subroutine28_0
   \   000003                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C8           XCH     A,R0
   \   000005   240C         ADD     A,#0xc
   \   000007   F582         MOV     DPL,A
   \   000009   E4           CLR     A
   \   00000A   38           ADDC    A,R0
   \   00000B   F583         MOV     DPH,A
   \   00000D   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {{0}}>`:
   \   000000   0000         DW 0
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    
   \   000008   00           DB 0
    787          
    788          /*********************************************************************
    789           * @fn      bdb_FindIfAppCluster
    790           *
    791           * @brief   To verify if cluster is application type
    792           *
    793           * @param   none
    794           *
    795           * @return  true if success
    796           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    797          uint8 bdb_FindIfAppCluster( cId_t ClusterId )
   \                     bdb_FindIfAppCluster:
    798          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    799            uint8 i;
    800            uint8 ClusterCnt;
    801          
    802            ClusterCnt = sizeof( bdb_ZclType1Clusters )/sizeof( uint16 );
    803            
    804            for ( i = 0; i < ClusterCnt; i++ )
   \   000004   7C00         MOV     R4,#0x0
    805            {
    806              if ( bdb_ZclType1Clusters[i] == ClusterId )
   \                     ??bdb_FindIfAppCluster_0:
   \   000006   12....       LCALL   ?Subroutine21 & 0xFFFF
    807              {
    808                return ( SUCCESS );
    809              }
    810            }
   \                     ??CrossCallReturnLabel_71:
   \   000009   74..         MOV     A,#bdb_ZclType1Clusters & 0xff
   \   00000B   28           ADD     A,R0
   \   00000C   F582         MOV     DPL,A
   \   00000E   74..         MOV     A,#(bdb_ZclType1Clusters >> 8) & 0xff
   \   000010   39           ADDC    A,R1
   \   000011   F583         MOV     DPH,A
   \   000013   E0           MOVX    A,@DPTR
   \   000014   6A           XRL     A,R2
   \   000015   7003         JNZ     ??bdb_FindIfAppCluster_1
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   6B           XRL     A,R3
   \                     ??bdb_FindIfAppCluster_1:
   \   00001A   601F         JZ      ??bdb_FindIfAppCluster_2
   \   00001C   0C           INC     R4
   \   00001D   EC           MOV     A,R4
   \   00001E   C3           CLR     C
   \   00001F   9418         SUBB    A,#0x18
   \   000021   40E3         JC      ??bdb_FindIfAppCluster_0
    811            
    812            ClusterCnt = sizeof( bdb_ZclType2Clusters )/sizeof( uint16 );
    813            
    814            for ( i = 0; i < ClusterCnt; i++ )
   \   000023   7C00         MOV     R4,#0x0
    815            {
    816              if ( bdb_ZclType2Clusters[i] == ClusterId )
   \                     ??bdb_FindIfAppCluster_3:
   \   000025   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000028   74..         MOV     A,#bdb_ZclType2Clusters & 0xff
   \   00002A   28           ADD     A,R0
   \   00002B   F582         MOV     DPL,A
   \   00002D   74..         MOV     A,#(bdb_ZclType2Clusters >> 8) & 0xff
   \   00002F   39           ADDC    A,R1
   \   000030   F583         MOV     DPH,A
   \   000032   E0           MOVX    A,@DPTR
   \   000033   6A           XRL     A,R2
   \   000034   7003         JNZ     ??bdb_FindIfAppCluster_4
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   6B           XRL     A,R3
   \                     ??bdb_FindIfAppCluster_4:
   \   000039   7004         JNZ     ??bdb_FindIfAppCluster_5
    817              {
    818                return ( SUCCESS );
   \                     ??bdb_FindIfAppCluster_2:
   \   00003B   7900         MOV     R1,#0x0
   \   00003D   8009         SJMP    ??bdb_FindIfAppCluster_6
    819              }
    820            }
   \                     ??bdb_FindIfAppCluster_5:
   \   00003F   0C           INC     R4
   \   000040   EC           MOV     A,R4
   \   000041   C3           CLR     C
   \   000042   9431         SUBB    A,#0x31
   \   000044   40DF         JC      ??bdb_FindIfAppCluster_3
    821            
    822            // If not found, take it as application cluster it will be filtered
    823            // by simple descriptor at some point
    824            return ( FAILURE );
   \   000046   7901         MOV     R1,#0x1
   \                     ??bdb_FindIfAppCluster_6:
   \   000048   02....       LJMP    ??Subroutine23_0 & 0xFFFF
    825          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   EC           MOV     A,R4
   \   000001                REQUIRE ??Subroutine31_0
   \   000001                ; // Fall through to label ??Subroutine31_0
    826          
    827          
    828          /*********************************************************************
    829           * @fn      bdb_getRespondentRetry
    830           *
    831           * @brief   Get the next Respondant entry to retry
    832           *
    833           * @param   pHead - pointer to a pointer of the list head
    834           *
    835           * @return  respondant entry if found, otherwise NULL
    836           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    837          bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead)
   \                     bdb_getRespondentRetry:
    838          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    839            bdbFindingBindingRespondent_t *pTemp;
    840            
    841            pTemp = pRespondentHead;
   \   000004   800C         SJMP    ??CrossCallReturnLabel_62
    842            
    843            while(pTemp != NULL)
    844            {
    845              if(pTemp->attempts < FINDING_AND_BINDING_MAX_ATTEMPTS)
    846              {
    847                return pTemp;
    848              }
    849              pTemp = pTemp->pNext;
   \                     ??bdb_getRespondentRetry_0:
   \   000006   EA           MOV     A,R2
   \   000007   240D         ADD     A,#0xd
   \   000009   F582         MOV     DPL,A
   \   00000B   E4           CLR     A
   \   00000C   3B           ADDC    A,R3
   \   00000D   F583         MOV     DPH,A
   \   00000F   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000012   EA           MOV     A,R2
   \   000013   4B           ORL     A,R3
   \   000014   600B         JZ      ??bdb_getRespondentRetry_1
   \   000016   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   C3           CLR     C
   \   00001B   9404         SUBB    A,#0x4
   \   00001D   50E7         JNC     ??bdb_getRespondentRetry_0
   \   00001F   8004         SJMP    ??bdb_getRespondentRetry_2
    850            }
    851            return NULL;
   \                     ??bdb_getRespondentRetry_1:
   \   000021   7A00         MOV     R2,#0x0
   \   000023   7B00         MOV     R3,#0x0
   \                     ??bdb_getRespondentRetry_2:
   \   000025   02....       LJMP    ??Subroutine23_0 & 0xFFFF
    852          }
    853          
    854          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    855          bdbFindingBindingRespondent_t* bdb_findRespondentNode(uint8 endpoint, uint16 shortAddress)
   \                     bdb_findRespondentNode:
    856          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    857            bdbFindingBindingRespondent_t* pTemp = pRespondentHead;
   \   000004   90....       MOV     DPTR,#pRespondentHead
   \   000007   8009         SJMP    ??bdb_findRespondentNode_0
    858            
    859            while(pTemp != NULL)  
    860            {
    861              if((pTemp->data.addr.shortAddr == shortAddress) && (pTemp->data.endPoint == endpoint))
    862              {
    863                return pTemp;
    864              }
    865              
    866              pTemp = pTemp->pNext;
   \                     ??bdb_findRespondentNode_1:
   \   000009   EC           MOV     A,R4
   \   00000A   240D         ADD     A,#0xd
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3D           ADDC    A,R5
   \   000010   F583         MOV     DPH,A
   \                     ??bdb_findRespondentNode_0:
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FC           MOV     R4,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FD           MOV     R5,A
   \   000017   EC           MOV     A,R4
   \   000018   4D           ORL     A,R5
   \   000019   6024         JZ      ??bdb_findRespondentNode_2
   \   00001B   8C82         MOV     DPL,R4
   \   00001D   8D83         MOV     DPH,R5
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   6A           XRL     A,R2
   \   000021   7003         JNZ     ??bdb_findRespondentNode_3
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   6B           XRL     A,R3
   \                     ??bdb_findRespondentNode_3:
   \   000026   70E1         JNZ     ??bdb_findRespondentNode_1
   \   000028   8C82         MOV     DPL,R4
   \   00002A   8D83         MOV     DPH,R5
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   69           XRL     A,R1
   \   000037   70D0         JNZ     ??bdb_findRespondentNode_1
   \   000039   EC           MOV     A,R4
   \   00003A   FA           MOV     R2,A
   \   00003B   ED           MOV     A,R5
   \   00003C   FB           MOV     R3,A
   \   00003D   8004         SJMP    ??bdb_findRespondentNode_4
    867            }
    868            
    869            return NULL;
   \                     ??bdb_findRespondentNode_2:
   \   00003F   7A00         MOV     R2,#0x0
   \   000041   7B00         MOV     R3,#0x0
   \                     ??bdb_findRespondentNode_4:
   \   000043   02....       LJMP    ??Subroutine23_0 & 0xFFFF
    870          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for grpName>`:
   \   000000   47           DB 71
   \   000001   72           DB 114
   \   000002   6F           DB 111
   \   000003   75           DB 117
   \   000004   70           DB 112
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for bdbIndentifyActiveEndpoint>`:
   \   000000   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e7:
   \   000000   E7030000     DD 999

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3:
   \   000000   03000000     DD 3

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_SetIdentifyActiveEndpoint::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_SetIdentifyActiveEndpoint

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_setEpDescListToActiveEndpoint::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_setEpDescListToActiveEndpoint

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_BindIfMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_BindIfMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_zclFindingBindingEpType::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_zclFindingBindingEpType

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_zclFindingBindingAddBindEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_zclFindingBindingAddBindEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_exitFindingBindingWStatus::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_exitFindingBindingWStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_zclSimpleDescClusterListClean::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_zclSimpleDescClusterListClean

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RegisterIdentifyTimeChangeCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RegisterIdentifyTimeChangeCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_GetFBInitiatorStatus::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_GetFBInitiatorStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RegisterBindNotificationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RegisterBindNotificationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_SendIdentifyQuery::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_SendIdentifyQuery

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_ZclIdentifyQueryCmdInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_ZclIdentifyQueryCmdInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_SendSimpleDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_SendSimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_FindIfAppCluster::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_FindIfAppCluster

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_getRespondentRetry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_getRespondentRetry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_findRespondentNode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_findRespondentNode
    871          
    872          #endif  
    873          
    874          /*********************************************************************
    875          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     44   bdb_BindIfMatch
        0     39   -> ZDO_ParseSimpleDescBuf
        0     39   -> bdb_exitFindingBindingWStatus
        0     39   -> bdb_findRespondentNode
        0     43   -> bdb_zclFindingBindingAddBindEntry
        0     39   -> bdb_zclSimpleDescClusterListClean
        0     39   -> osal_msg_deallocate
        0     39   -> osal_stop_timerEx
        0     44   -> zclGeneral_SendAddGroupRequest
      2     14   bdb_FindIfAppCluster
      1     20   bdb_GetFBInitiatorStatus
        0     20   -> osal_get_timeoutEx
      2      0   bdb_RegisterBindNotificationCB
      2      0   bdb_RegisterIdentifyTimeChangeCB
      0     33   bdb_SendIdentifyQuery
        0     22   -> bdb_getZCLFrameCounter
        0     26   -> osal_start_timerEx
        0     33   -> zcl_SendCommand
      1     29   bdb_SendSimpleDescReq
        0     26   -> ZDP_SimpleDescReq
        0     25   -> bdb_exitFindingBindingWStatus
        0     25   -> bdb_getRespondentRetry
        0     29   -> osal_start_timerEx
      2      0   bdb_SetIdentifyActiveEndpoint
      1     10   bdb_ZclIdentifyQueryCmdInd
        0     10   -> bdb_AddRespondentNode
        0     10   -> osal_set_event
        0     10   -> osal_stop_timerEx
      0     48   bdb_exitFindingBindingWStatus
        0      9   -> bdb_reportCommissioningState
      2     39   bdb_findRespondentNode
      2     25   bdb_getRespondentRetry
      2      0   bdb_setEpDescListToActiveEndpoint
      0     59   bdb_zclFindingBindingAddBindEntry
        0     16   -> ZDO_AnyClusterMatches
        0     14   -> bdb_FindIfAppCluster
      0     16   bdb_zclFindingBindingEpType
        0     16   -> ZDO_AnyClusterMatches
      0     49   bdb_zclSimpleDescClusterListClean
        0     10   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       9  ?<Constant {{0}}>
       1  ?<Initializer for bdbIndentifyActiveEndpoint>
       6  ?<Initializer for grpName>
      12  ??Subroutine22_0
       7  ??Subroutine23_0
       3  ??Subroutine24_0
       6  ??Subroutine25_0
       4  ??Subroutine26_0
       3  ??Subroutine27_0
       6  ??Subroutine28_0
       2  ??Subroutine29_0
       4  ??Subroutine30_0
       7  ??Subroutine31_0
       5  ?Subroutine0
       5  ?Subroutine1
       4  ?Subroutine10
      14  ?Subroutine11
      11  ?Subroutine12
      22  ?Subroutine13
      10  ?Subroutine14
       4  ?Subroutine15
       1  ?Subroutine16
      10  ?Subroutine17
       6  ?Subroutine18
       9  ?Subroutine19
       8  ?Subroutine2
       6  ?Subroutine20
       1  ?Subroutine21
       6  ?Subroutine3
      29  ?Subroutine4
      29  ?Subroutine5
      12  ?Subroutine6
      20  ?Subroutine7
       8  ?Subroutine8
       7  ?Subroutine9
       4  __Constant_2710
       4  __Constant_3
       4  __Constant_3e7
       4  __Constant_3e8
       1  bdbIndentifyActiveEndpoint
     522  bdb_BindIfMatch
       6  bdb_BindIfMatch::?relay
      75  bdb_FindIfAppCluster
       6  bdb_FindIfAppCluster::?relay
      12  bdb_FindingBindingTargetSimpleDesc
     111  bdb_GetFBInitiatorStatus
       6  bdb_GetFBInitiatorStatus::?relay
      10  bdb_RegisterBindNotificationCB
       6  bdb_RegisterBindNotificationCB::?relay
      10  bdb_RegisterIdentifyTimeChangeCB
       6  bdb_RegisterIdentifyTimeChangeCB::?relay
     160  bdb_SendIdentifyQuery
       6  bdb_SendIdentifyQuery::?relay
     277  bdb_SendSimpleDescReq
       6  bdb_SendSimpleDescReq::?relay
      76  bdb_SetIdentifyActiveEndpoint
       6  bdb_SetIdentifyActiveEndpoint::?relay
     132  bdb_ZclIdentifyQueryCmdInd
       6  bdb_ZclIdentifyQueryCmdInd::?relay
      48  bdb_ZclType1Clusters
      98  bdb_ZclType2Clusters
      22  bdb_exitFindingBindingWStatus
       6  bdb_exitFindingBindingWStatus::?relay
      70  bdb_findRespondentNode
       6  bdb_findRespondentNode::?relay
      40  bdb_getRespondentRetry
       6  bdb_getRespondentRetry::?relay
      79  bdb_setEpDescListToActiveEndpoint
       6  bdb_setEpDescListToActiveEndpoint::?relay
     149  bdb_zclFindingBindingAddBindEntry
       6  bdb_zclFindingBindingAddBindEntry::?relay
     203  bdb_zclFindingBindingEpType
       6  bdb_zclFindingBindingEpType::?relay
      77  bdb_zclSimpleDescClusterListClean
       6  bdb_zclSimpleDescClusterListClean::?relay
       6  grpName
       2  pfnBindNotificationCB
       2  pfnIdentifyTimeChangeCB

 
 2 294 bytes in segment BANKED_CODE
    96 bytes in segment BANK_RELAYS
     7 bytes in segment XDATA_I
     7 bytes in segment XDATA_ID
   171 bytes in segment XDATA_ROM_C
    16 bytes in segment XDATA_Z
 
 2 397 bytes of CODE  memory
   155 bytes of CONST memory (+ 16 bytes shared)
    23 bytes of XDATA memory

Errors: none
Warnings: none
