###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                03/Nov/2017  19:06:22
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack 3.0.0\Components\stack\zdo\ZDProfile.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
#        Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack 3.0.0\Components\stack\zdo\ZDProfile.c"
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        xPOWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
#        xMT_APP_CNF_FUNC -D LEGACY_LCD_DEBUG -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D
#        ZCL_IDENTIFY -D ZCL_SCENES -D ZCL_GROUPS -lC "C:\Texas
#        Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List"
#        -lA "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\" -I
#        "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List\ZDProfile.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\Obj\ZDProfile.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack 3.0.0\Components\stack\zdo\ZDProfile.c
      1          /**************************************************************************************************
      2            Filename:       ZDProfile.c
      3            Revised:        $Date: 2015-10-14 11:48:06 -0700 (Wed, 14 Oct 2015) $
      4            Revision:       $Revision: 44530 $
      5          
      6            Description:    This is the Zigbee Device Profile.
      7          
      8          
      9            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "NLMEDE.h"
     47          #include "nwk_util.h"
     48          #include "APS.h"
     49          
     50          #include "AddrMgr.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDNwkMgr.h"
     55          
     56          #if defined( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #include "nwk_util.h"
     61          
     62          #if defined( MT_ZDO_FUNC )
     63            #include "MT_ZDO.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     71            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     72            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     73            (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \
     74          }
     75          
     76          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     77            afStatus_t stat;                                    \
     78            ZDP_TmpBuf = (BUF)+1;                               \
     79            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     80            osal_mem_free( (BUF) );                             \
     81            ZDP_TmpBuf = ZDP_Buf+1;                             \
     82            return stat;                                        \
     83          }
     84          
     85          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     86            afStatus_t stat;                                    \
     87            ZDP_TxOptions = (TxO);                              \
     88            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     89            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     90            return stat;                                        \
     91          }
     92          
     93          #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \
     94            afStatus_t stat;                                    \
     95            ZDP_TmpBuf = (BUF)+1;                               \
     96            ZDP_TxOptions = (TxO);                              \
     97            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     98            osal_mem_free( (BUF) );                             \
     99            ZDP_TmpBuf = ZDP_Buf+1;                             \
    100            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
    101            return stat;                                        \
    102          }
    103          
    104          /*********************************************************************
    105           * CONSTANTS
    106           */
    107          
    108          #define ZDP_BUF_SZ          80
    109          

   \                                 In  segment CODE_C, align 1
    110          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
    111          
    112          // Routing table options
    113          #define ZP_RTG_RECORD       0x04       // Routing table indication that a route record is needed
    114          #define ZP_MTO_ROUTE_RC     0x08       // Concentrator with routing cache
    115          #define ZP_MTO_ROUTE_NRC    0x10       // Concentrator with limited cache
    116          
    117          
    118          /*********************************************************************
    119           * TYPEDEFS
    120           */
    121          typedef struct
    122          {
    123            void *next;
    124            uint8 taskID;
    125            uint16 clusterID;
    126          } ZDO_MsgCB_t;
    127          
    128          
    129          /*********************************************************************
    130           * GLOBAL VARIABLES
    131           */
    132          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          uint8 childIndex = 0;
   \                     childIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135          
    136          /*********************************************************************
    137           * EXTERNAL VARIABLES
    138           */
    139          
    140          extern endPointDesc_t ZDApp_epDesc;
    141          
    142          /*********************************************************************
    143           * EXTERNAL FUNCTIONS
    144           */
    145          extern void ZDApp_SetParentAnnceTimer( void );
    146          
    147          /*********************************************************************
    148           * LOCAL FUNCTIONS
    149           */
    150          
    151          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
    152          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
    153          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
    154          
    155          /*********************************************************************
    156           * LOCAL VARIABLES
    157           */
    158          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ZDP_Buf:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    160          static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I
    161          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ZDP_TxOptions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    163          ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     zdoMsgCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    164          
    165          /*********************************************************************
    166           * ZDO Message Processing table
    167           */
    168          
    169          typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
    170          
    171          typedef struct
    172          {
    173            uint16                clusterID;
    174            pfnZDPMsgProcessor    pFn;
    175          } zdpMsgProcItem_t;
    176          

   \                                 In  segment CODE_C, align 1
    177          CONST zdpMsgProcItem_t zdpMsgProcs[] =
   \                     zdpMsgProcs:
   \   000000   0100         DW 1
   \   000002   ....         DW `??zdpProcessAddrReq::?relay`
   \   000004   0200         DW 2
   \   000006   ....         DW `??ZDO_ProcessNodeDescReq::?relay`
   \   000008   0280         DW 32770
   \   00000A   ....         DW `??ZDO_ProcessNodeDescRsp::?relay`
   \   00000C   0300         DW 3
   \   00000E   ....         DW `??ZDO_ProcessPowerDescReq::?relay`
   \   000010   0400         DW 4
   \   000012   ....         DW `??ZDO_ProcessSimpleDescReq::?relay`
   \   000014   0480         DW 32772
   \   000016   ....         DW `??ZDO_ProcessSimpleDescRsp::?relay`
   \   000018   0500         DW 5
   \   00001A   ....         DW `??ZDO_ProcessActiveEPReq::?relay`
   \   00001C   0600         DW 6
   \   00001E   ....         DW `??ZDO_ProcessMatchDescReq::?relay`
   \   000020   3100         DW 49
   \   000022   ....         DW `??ZDO_ProcessMgmtLqiReq::?relay`
   \   000024   3300         DW 51
   \   000026   ....         DW `??ZDO_ProcessMgmtBindReq::?relay`
   \   000028   3400         DW 52
   \   00002A   ....         DW `??ZDO_ProcessMgmtLeaveReq::?relay`
   \   00002C   FFFF         DW 65535
   \   00002E   0000         DW 0H
    178          {
    179          #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
    180            // These aren't processed by sleeping end devices.
    181            { NWK_addr_req,           zdpProcessAddrReq },
    182            { Device_annce,           ZDO_ProcessDeviceAnnce },
    183          #endif
    184          #if ( ZG_BUILD_RTR_TYPE )
    185            // These aren't processed by end devices.
    186            { Parent_annce,           ZDO_ProcessParentAnnce },
    187            { Parent_annce_rsp,       ZDO_ProcessParentAnnceRsp },
    188          #endif
    189            { IEEE_addr_req,          zdpProcessAddrReq },
    190            { Node_Desc_req,          ZDO_ProcessNodeDescReq },
    191            { Node_Desc_rsp,          ZDO_ProcessNodeDescRsp },
    192            { Power_Desc_req,         ZDO_ProcessPowerDescReq },
    193            { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
    194            { Simple_Desc_rsp,        ZDO_ProcessSimpleDescRsp },
    195            { Active_EP_req,          ZDO_ProcessActiveEPReq },
    196            { Match_Desc_req,         ZDO_ProcessMatchDescReq },
    197          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
    198            { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
    199          #endif
    200          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE || ZG_BUILD_ENDDEVICE_TYPE )
    201            { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
    202          #endif
    203          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    204            { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
    205          #endif
    206          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
    207            { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
    208          #endif
    209          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    210            { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
    211          #endif
    212          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
    213            { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
    214          #endif
    215          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
    216            { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
    217          #endif
    218          #if defined ( ZDO_USERDESC_RESPONSE )
    219            { User_Desc_req,          ZDO_ProcessUserDescReq },
    220          #endif
    221          #if defined ( ZDO_USERDESCSET_RESPONSE )
    222            { User_Desc_set,          ZDO_ProcessUserDescSet },
    223          #endif
    224          #if defined ( ZDO_SERVERDISC_RESPONSE )
    225            { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
    226          #endif
    227            {0xFFFF, NULL} // Last
    228          };
    229          
    230          /*********************************************************************
    231           * @fn          fillAndSend
    232           *
    233           * @brief       Combined to reduce space
    234           *
    235           * @param
    236           * @param
    237           *
    238           * @return      afStatus_t
    239           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    240          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
   \                     fillAndSend:
    241          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V4,R1
    242            afAddrType_t afAddr;
    243          
    244            osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
   \   000014                ; Setup parameters for call to function osal_memset
   \   000014   7C0C         MOV     R4,#0xc
   \   000016   7D00         MOV     R5,#0x0
   \   000018   7900         MOV     R1,#0x0
   \   00001A   AA..         MOV     R2,?XSP + 0
   \   00001C   AB..         MOV     R3,?XSP + 1
   \   00001E   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    245            ZADDR_TO_AFADDR( addr, afAddr );
   \   000021   7409         MOV     A,#0x9
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E4           CLR     A
   \   000027   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   C0E0         PUSH    A
   \   00002D   7408         MOV     A,#0x8
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   D0E0         POP     A
   \   000034   F0           MOVX    @DPTR,A
   \   000035   8E82         MOV     DPL,R6
   \   000037   8F83         MOV     DPH,R7
   \   000039   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00003C   12....       LCALL   ?Subroutine30 & 0xFFFF
    246          
    247            *(ZDP_TmpBuf-1) = *transSeq;
   \                     ??CrossCallReturnLabel_35:
   \   00003F   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000042   E0           MOVX    A,@DPTR
   \   000043   24FF         ADD     A,#-0x1
   \   000045   F5..         MOV     ?V2,A
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   34FF         ADDC    A,#-0x1
   \   00004B   F5..         MOV     ?V3,A
   \   00004D   85..82       MOV     DPL,?V0
   \   000050   85..83       MOV     DPH,?V1
   \   000053   E0           MOVX    A,@DPTR
   \   000054   85..82       MOV     DPL,?V2
   \   000057   85..83       MOV     DPH,?V3
   \   00005A   F0           MOVX    @DPTR,A
    248          
    249            return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    250                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    251                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
   \   00005B                ; Setup parameters for call to function AF_DataRequest
   \   00005B   75..1E       MOV     ?V5,#0x1e
   \   00005E   78..         MOV     R0,#?V5
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000063   78..         MOV     R0,#?V0
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   78..         MOV     R0,#?V2
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006D   E5..         MOV     A,?V4
   \   00006F   2401         ADD     A,#0x1
   \   000071   F5..         MOV     ?V0,A
   \   000073   E4           CLR     A
   \   000074   3400         ADDC    A,#0x0
   \   000076   F5..         MOV     ?V1,A
   \   000078   78..         MOV     R0,#?V0
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007D   7421         MOV     A,#0x21
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000085   90....       MOV     DPTR,#ZDP_TxOptions
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F9           MOV     R1,A
   \   00008A   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   00008C   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   00008E   7409         MOV     A,#0x9
   \   000090   12....       LCALL   ?XSTACK_DISP101_8
   \   000093   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000096   7409         MOV     A,#0x9
   \   000098   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009B   740C         MOV     A,#0xc
   \   00009D   02....       LJMP    ?Subroutine0 & 0xFFFF
    252          
    253          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine98_0
   \   000003                ; // Fall through to label ??Subroutine98_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine98_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine123_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    254          
    255          /*********************************************************************
    256           * @fn          ZDP_SendData
    257           *
    258           * @brief       This builds and send a request message that has
    259           *              NWKAddrOfInterest as its only parameter.
    260           *
    261           * @param       dstAddr - destination address
    262           * @param       cmd - clusterID
    263           * @param       dataLen - number of bytes of data
    264           * @param       data - pointer to the data
    265           * @param       SecurityEnable - Security Options
    266           *
    267           * @return      afStatus_t
    268           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    269          afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    270                                  byte len, uint8 *buf, byte SecurityEnable )
    271          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
    272            uint8 *pBuf = ZDP_TmpBuf;
   \   000007   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000A   12....       LCALL   ?Subroutine45 & 0xFFFF
    273            byte cnt = len;
   \                     ??CrossCallReturnLabel_63:
   \   00000D   EF           MOV     A,R7
   \   00000E   FE           MOV     R6,A
   \   00000F   740E         MOV     A,#0xe
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000017   801F         SJMP    ??ZDP_SendData_0
    274          
    275            while ( cnt-- )
    276            {
    277              *pBuf++ = *buf++;
   \                     ??ZDP_SendData_1:
   \   000019   8882         MOV     DPL,R0
   \   00001B   8983         MOV     DPH,R1
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   85..82       MOV     DPL,?V2
   \   000021   85..83       MOV     DPH,?V3
   \   000024   12....       LCALL   ??Subroutine120_0 & 0xFFFF
    278            }
   \                     ??CrossCallReturnLabel_230:
   \   000027   A882         MOV     R0,DPL
   \   000029   A983         MOV     R1,DPH
   \   00002B   85..82       MOV     DPL,?V2
   \   00002E   85..83       MOV     DPH,?V3
   \   000031   A3           INC     DPTR
   \   000032   8582..       MOV     ?V2,DPL
   \   000035   8583..       MOV     ?V3,DPH
   \                     ??ZDP_SendData_0:
   \   000038   74FF         MOV     A,#-0x1
   \   00003A   2E           ADD     A,R6
   \   00003B   FE           MOV     R6,A
   \   00003C   04           INC     A
   \   00003D   70DA         JNZ     ??ZDP_SendData_1
    279          
    280            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len, ((SecurityEnable) ? AF_EN_SECURITY : 0) );
   \   00003F   7410         MOV     A,#0x10
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   E0           MOVX    A,@DPTR
   \   000045   90....       MOV     DPTR,#ZDP_TxOptions
   \   000048   6004         JZ      ??ZDP_SendData_2
   \   00004A   7440         MOV     A,#0x40
   \   00004C   8001         SJMP    ??ZDP_SendData_3
   \                     ??ZDP_SendData_2:
   \   00004E   E4           CLR     A
   \                     ??ZDP_SendData_3:
   \   00004F   F0           MOVX    @DPTR,A
   \   000050                ; Setup parameters for call to function fillAndSend
   \   000050   740C         MOV     A,#0xc
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000058   EF           MOV     A,R7
   \   000059   F9           MOV     R1,A
   \   00005A   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00005D   7402         MOV     A,#0x2
   \   00005F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000062   E9           MOV     A,R1
   \   000063   F9           MOV     R1,A
   \   000064   90....       MOV     DPTR,#ZDP_TxOptions
   \   000067   E4           CLR     A
   \   000068   F0           MOVX    @DPTR,A
   \   000069   02....       LJMP    ??Subroutine97_0 & 0xFFFF
    281          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine97_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   000003   22           RET
    282          
    283          /*********************************************************************
    284           * @fn          ZDP_NWKAddrOfInterestReq
    285           *
    286           * @brief       This builds and send a request message that has
    287           *              NWKAddrOfInterest as its only parameter.
    288           *
    289           * @param       dstAddr - destination address
    290           * @param       nwkAddr - 16 bit address
    291           * @param       SecurityEnable - Security Options
    292           *
    293           * @return      afStatus_t
    294           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    295          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_NWKAddrOfInterestReq:
    296                                               byte cmd, byte SecurityEnable )
    297          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    298            (void)SecurityEnable;  // Intentionally unreferenced parameter
    299          
    300            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000007   12....       LCALL   ?Subroutine19 & 0xFFFF
    301            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_16:
   \   00000A   F0           MOVX    @DPTR,A
    302          
    303            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   8E..         MOV     ?V0,R6
   \   00000D   75..00       MOV     ?V1,#0x0
   \   000010   78..         MOV     R0,#?V0
   \   000012   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000015   7902         MOV     R1,#0x2
   \   000017   02....       LJMP    ?Subroutine8 & 0xFFFF
    304          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000003   EC           MOV     A,R4
   \   000004   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000007   ED           MOV     A,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine100_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   EA           MOV     A,R2
   \   000001   FC           MOV     R4,A
   \   000002   EB           MOV     A,R3
   \   000003   FD           MOV     R5,A
   \   000004   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000006   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000008                REQUIRE ??Subroutine103_0
   \   000008                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000003   7402         MOV     A,#0x2
   \   000005   02....       LJMP    ??Subroutine100_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   22           RET
    305          
    306          /*********************************************************************
    307           * Address Requests
    308           */
    309          
    310          /*********************************************************************
    311           * @fn          ZDP_NwkAddrReq
    312           *
    313           * @brief       This builds and send a NWK_addr_req message.  This
    314           *              function sends a broadcast message looking for a 16
    315           *              bit address with a 64 bit address as bait.
    316           *
    317           * @param       IEEEAddress - looking for this device
    318           * @param       SecurityEnable - Security Options
    319           *
    320           * @return      afStatus_t
    321           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    322          afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
   \                     ZDP_NwkAddrReq:
    323                                     byte StartIndex, byte SecurityEnable )
    324          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V2,R1
   \   000010   8C..         MOV     ?V3,R4
    325            uint8 *pBuf = ZDP_TmpBuf;
   \   000012   12....       LCALL   ?Subroutine42 & 0xFFFF
    326            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
    327            zAddrType_t dstAddr;
    328          
    329            (void)SecurityEnable;  // Intentionally unreferenced parameter
    330          
    331            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
   \                     ??CrossCallReturnLabel_164:
   \   000015                ; Setup parameters for call to function sAddrExtCmp
   \   000015   EE           MOV     A,R6
   \   000016   FC           MOV     R4,A
   \   000017   EF           MOV     A,R7
   \   000018   FD           MOV     R5,A
   \   000019   7A..         MOV     R2,#saveExtAddr & 0xff
   \   00001B   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   00001D   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000020   E9           MOV     A,R1
   \   000021   700A         JNZ     ??ZDP_NwkAddrReq_0
    332            {
    333              dstAddr.addrMode = AddrBroadcast;
   \   000023   7408         MOV     A,#0x8
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   12....       LCALL   ?Subroutine83 & 0xFFFF
    334              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    335            }
   \                     ??CrossCallReturnLabel_136:
   \   00002B   8012         SJMP    ??ZDP_NwkAddrReq_1
    336            else
    337            {
    338              dstAddr.addrMode = Addr16Bit;
   \                     ??ZDP_NwkAddrReq_0:
   \   00002D   7408         MOV     A,#0x8
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   7402         MOV     A,#0x2
   \   000034   F0           MOVX    @DPTR,A
    339              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
   \   000035   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000038   12....       LCALL   ?Subroutine51 & 0xFFFF
    340            }
   \                     ??CrossCallReturnLabel_77:
   \   00003B   E8           MOV     A,R0
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   E9           MOV     A,R1
   \                     ??ZDP_NwkAddrReq_1:
   \   00003F   F0           MOVX    @DPTR,A
    341          
    342            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
   \   000040                ; Setup parameters for call to function sAddrExtCpy
   \   000040   EE           MOV     A,R6
   \   000041   FC           MOV     R4,A
   \   000042   EF           MOV     A,R7
   \   000043   FD           MOV     R5,A
   \   000044   AA..         MOV     R2,?V0
   \   000046   AB..         MOV     R3,?V1
   \   000048   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00004B   8A82         MOV     DPL,R2
   \   00004D   8B83         MOV     DPH,R3
    343          
    344            *pBuf++ = ReqType;
   \   00004F   E5..         MOV     A,?V2
   \   000051   F0           MOVX    @DPTR,A
    345            *pBuf++ = StartIndex;
   \   000052   A3           INC     DPTR
   \   000053   E5..         MOV     A,?V3
   \   000055   F0           MOVX    @DPTR,A
    346          
    347            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
   \   000056                ; Setup parameters for call to function fillAndSend
   \   000056   E4           CLR     A
   \   000057   F5..         MOV     ?V0,A
   \   000059   F5..         MOV     ?V1,A
   \   00005B   78..         MOV     R0,#?V0
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000060   790A         MOV     R1,#0xa
   \   000062   7402         MOV     A,#0x2
   \   000064   12....       LCALL   ?XSTACK_DISP102_8
   \   000067                REQUIRE ?Subroutine9
   \   000067                ; // Fall through to label ?Subroutine9
    348          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000002   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000004   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000007   7402         MOV     A,#0x2
   \   000009   12....       LCALL   ?DEALLOC_XSTACK8
   \   00000C   7409         MOV     A,#0x9
   \   00000E   80..         SJMP    ??Subroutine96_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine96_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine97_0
   \   000003                ; // Fall through to label ??Subroutine97_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   740F         MOV     A,#0xf
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   74FD         MOV     A,#-0x3
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   74FF         MOV     A,#-0x1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine105_0
   \   000003                ; // Fall through to label ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   22           RET
    349          
    350          /*********************************************************************
    351           * @fn          ZDP_IEEEAddrReq
    352           *
    353           * @brief       This builds and send a IEEE_addr_req message.  This
    354           *              function sends a unicast message looking for a 64
    355           *              bit IEEE address with a 16 bit address as bait.
    356           *
    357           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    358           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    359           * @param       SecurityEnable - Security Options
    360           *
    361           * @return      afStatus_t
    362           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    363          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
   \                     ZDP_IEEEAddrReq:
    364                                      byte StartIndex, byte SecurityEnable )
    365          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
    366            uint8 *pBuf = ZDP_TmpBuf;
   \   00000E   12....       LCALL   ??Subroutine121_0 & 0xFFFF
    367            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
    368            zAddrType_t dstAddr;
    369          
    370            (void)SecurityEnable;  // Intentionally unreferenced parameter
    371          
    372            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??CrossCallReturnLabel_250:
   \   000011   7408         MOV     A,#0x8
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   7402         MOV     A,#0x2
   \   000018   F0           MOVX    @DPTR,A
    373            dstAddr.addr.shortAddr = shortAddr;
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   EA           MOV     A,R2
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
   \   000022   EB           MOV     A,R3
   \   000023   F0           MOVX    @DPTR,A
    374          
    375            *pBuf++ = LO_UINT16( shortAddr );
   \   000024   EA           MOV     A,R2
   \   000025   8882         MOV     DPL,R0
   \   000027   8983         MOV     DPH,R1
   \   000029   F0           MOVX    @DPTR,A
    376            *pBuf++ = HI_UINT16( shortAddr );
   \   00002A   EB           MOV     A,R3
   \   00002B   12....       LCALL   ?Subroutine37 & 0xFFFF
    377          
    378            *pBuf++ = ReqType;
   \                     ??CrossCallReturnLabel_48:
   \   00002E   F0           MOVX    @DPTR,A
    379            *pBuf++ = StartIndex;
   \   00002F   EF           MOV     A,R7
   \   000030   8882         MOV     DPL,R0
   \   000032   8983         MOV     DPH,R1
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   F0           MOVX    @DPTR,A
    380          
    381            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
   \   000038                ; Setup parameters for call to function fillAndSend
   \   000038   75..01       MOV     ?V0,#0x1
   \   00003B   75..00       MOV     ?V1,#0x0
   \   00003E   78..         MOV     R0,#?V0
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   7904         MOV     R1,#0x4
   \   000045   02....       LJMP    ?Subroutine2 & 0xFFFF
    382          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   A3           INC     DPTR
   \   000001   F0           MOVX    @DPTR,A
   \   000002   EE           MOV     A,R6
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7402         MOV     A,#0x2
   \   000002   12....       LCALL   ?XSTACK_DISP102_8
   \   000005   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000007   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000009   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00000C   7402         MOV     A,#0x2
   \   00000E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000011                REQUIRE ??Subroutine99_0
   \   000011                ; // Fall through to label ??Subroutine99_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine99_0:
   \   000000   7409         MOV     A,#0x9
   \   000002                REQUIRE ??Subroutine100_0
   \   000002                ; // Fall through to label ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine122_0
   \   000003                ; // Fall through to label ??Subroutine122_0
    383          
    384          /*********************************************************************
    385           * @fn          ZDP_MatchDescReq
    386           *
    387           * @brief       This builds and send a Match_Desc_req message.  This
    388           *              function sends a broadcast or unicast message
    389           *              requesting the list of endpoint/interfaces that
    390           *              match profile ID and cluster IDs.
    391           *
    392           * @param       dstAddr - destination address
    393           * @param       nwkAddr - network address of interest
    394           * @param       ProfileID - Profile ID
    395           * @param       NumInClusters - number of input clusters
    396           * @param       InClusterList - input cluster ID list
    397           * @param       NumOutClusters - number of output clusters
    398           * @param       OutClusterList - output cluster ID list
    399           * @param       SecurityEnable - Security Options
    400           *
    401           * @return      afStatus_t
    402           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    403          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    404                                          uint16 ProfileID,
    405                                          byte NumInClusters, cId_t *InClusterList,
    406                                          byte NumOutClusters, cId_t *OutClusterList,
    407                                          byte SecurityEnable )
    408          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine58 & 0xFFFF
    409            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_239:
   \   000008   7412         MOV     A,#0x12
   \   00000A   12....       LCALL   ?XSTACK_DISP0_8
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0,A
    410            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    411            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    412          
    413            (void)SecurityEnable;  // Intentionally unreferenced parameter
    414          
    415            len += (NumInClusters + NumOutClusters) * sizeof(uint16);
   \   000010   EE           MOV     A,R6
   \   000011   25..         ADD     A,?V0
   \   000013   C3           CLR     C
   \   000014   33           RLC     A
   \   000015   2406         ADD     A,#0x6
   \   000017   FF           MOV     R7,A
    416          
    417            if ( len >= ZDP_BUF_SZ-1 )
   \   000018   C3           CLR     C
   \   000019   944F         SUBB    A,#0x4f
   \   00001B   4005         JC      ??ZDP_MatchDescReq_0
    418            {
    419              return afStatus_MEM_FAIL;
   \   00001D   7910         MOV     R1,#0x10
   \   00001F   02....       LJMP    ??ZDP_MatchDescReq_1 & 0xFFFF
    420            }
    421          
    422            // The spec changed in Zigbee 2007 (2.4.3.1.7.1) to not allow sending
    423            // this command to 0xFFFF.  So, here we will filter this and replace
    424            // with 0xFFFD to only send to devices with RX ON.  This includes the
    425            // network address of interest.
    426            if ( ((dstAddr->addrMode == AddrBroadcast) || (dstAddr->addrMode == Addr16Bit))
    427                && (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL) )
   \                     ??ZDP_MatchDescReq_0:
   \   000022   8A82         MOV     DPL,R2
   \   000024   8B83         MOV     DPH,R3
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F5..         MOV     ?V1,A
   \   000031   740F         MOV     A,#0xf
   \   000033   65..         XRL     A,?V1
   \   000035   6006         JZ      ??ZDP_MatchDescReq_2
   \   000037   7402         MOV     A,#0x2
   \   000039   65..         XRL     A,?V1
   \   00003B   7018         JNZ     ??ZDP_MatchDescReq_3
   \                     ??ZDP_MatchDescReq_2:
   \   00003D   8A82         MOV     DPL,R2
   \   00003F   8B83         MOV     DPH,R3
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F4           CPL     A
   \   000043   7003         JNZ     ??ZDP_MatchDescReq_4
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F4           CPL     A
   \                     ??ZDP_MatchDescReq_4:
   \   000048   700B         JNZ     ??ZDP_MatchDescReq_3
    428            {
    429              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   00004A   8A82         MOV     DPL,R2
   \   00004C   8B83         MOV     DPH,R3
   \   00004E   74FD         MOV     A,#-0x3
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   74FF         MOV     A,#-0x1
   \   000054   F0           MOVX    @DPTR,A
    430            }
    431            if ( nwkAddr == NWK_BROADCAST_SHORTADDR_DEVALL )
   \                     ??ZDP_MatchDescReq_3:
   \   000055   74FF         MOV     A,#-0x1
   \   000057   6C           XRL     A,R4
   \   000058   7003         JNZ     ??ZDP_MatchDescReq_5
   \   00005A   74FF         MOV     A,#-0x1
   \   00005C   6D           XRL     A,R5
   \                     ??ZDP_MatchDescReq_5:
   \   00005D   7004         JNZ     ??ZDP_MatchDescReq_6
    432            {
    433              nwkAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   00005F   7CFD         MOV     R4,#-0x3
   \   000061   7DFF         MOV     R5,#-0x1
    434            }
    435          
    436            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_6:
   \   000063   EC           MOV     A,R4
   \   000064   8882         MOV     DPL,R0
   \   000066   8983         MOV     DPH,R1
   \   000068   F0           MOVX    @DPTR,A
    437            *pBuf++ = HI_UINT16( nwkAddr );
   \   000069   ED           MOV     A,R5
   \   00006A   A3           INC     DPTR
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   740E         MOV     A,#0xe
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   12....       LCALL   ?Subroutine60 & 0xFFFF
    438          
    439            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \                     ??CrossCallReturnLabel_93:
   \   000074   EC           MOV     A,R4
   \   000075   8882         MOV     DPL,R0
   \   000077   8983         MOV     DPH,R1
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   F0           MOVX    @DPTR,A
    440            *pBuf++ = HI_UINT16( ProfileID );
   \   00007C   ED           MOV     A,R5
   \   00007D   8882         MOV     DPL,R0
   \   00007F   8983         MOV     DPH,R1
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   12....       LCALL   ?Subroutine37 & 0xFFFF
    441          
    442            *pBuf++ = NumInClusters; // Input cluster list
   \                     ??CrossCallReturnLabel_49:
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   F0           MOVX    @DPTR,A
   \   000089   E8           MOV     A,R0
   \   00008A   2405         ADD     A,#0x5
   \   00008C   F8           MOV     R0,A
   \   00008D   5001         JNC     ??ZDP_MatchDescReq_7
   \   00008F   09           INC     R1
    443            if ( NumInClusters )
   \                     ??ZDP_MatchDescReq_7:
   \   000090   EE           MOV     A,R6
   \   000091   6019         JZ      ??ZDP_MatchDescReq_8
    444            {
    445              for (i=0; i<NumInClusters; ++i)  {
   \   000093   75..00       MOV     ?V1,#0x0
   \   000096   7410         MOV     A,#0x10
   \   000098   12....       LCALL   ?XSTACK_DISP0_8
   \   00009B   12....       LCALL   ?Subroutine59 & 0xFFFF
    446                *pBuf++ = LO_UINT16( InClusterList[i] );
   \                     ??CrossCallReturnLabel_91:
   \   00009E   12....       LCALL   ?Subroutine12 & 0xFFFF
    447                *pBuf++ = HI_UINT16( InClusterList[i] );
    448              }
   \                     ??CrossCallReturnLabel_4:
   \   0000A1   5001         JNC     ??ZDP_MatchDescReq_9
   \   0000A3   09           INC     R1
   \                     ??ZDP_MatchDescReq_9:
   \   0000A4   05..         INC     ?V1
   \   0000A6   E5..         MOV     A,?V1
   \   0000A8   C3           CLR     C
   \   0000A9   9E           SUBB    A,R6
   \   0000AA   40F2         JC      ??CrossCallReturnLabel_91
    449            }
    450          
    451            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_8:
   \   0000AC   8882         MOV     DPL,R0
   \   0000AE   8983         MOV     DPH,R1
   \   0000B0   E5..         MOV     A,?V0
   \   0000B2   F0           MOVX    @DPTR,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   A882         MOV     R0,DPL
   \   0000B6   A983         MOV     R1,DPH
    452            if ( NumOutClusters )
   \   0000B8   601A         JZ      ??ZDP_MatchDescReq_10
    453            {
    454              for (i=0; i<NumOutClusters; ++i)  {
   \   0000BA   75..00       MOV     ?V1,#0x0
   \   0000BD   7413         MOV     A,#0x13
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   12....       LCALL   ?Subroutine59 & 0xFFFF
    455                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \                     ??CrossCallReturnLabel_92:
   \   0000C5   12....       LCALL   ?Subroutine12 & 0xFFFF
    456                *pBuf++ = HI_UINT16( OutClusterList[i] );
    457              }
   \                     ??CrossCallReturnLabel_5:
   \   0000C8   5001         JNC     ??ZDP_MatchDescReq_11
   \   0000CA   09           INC     R1
   \                     ??ZDP_MatchDescReq_11:
   \   0000CB   05..         INC     ?V1
   \   0000CD   E5..         MOV     A,?V1
   \   0000CF   C3           CLR     C
   \   0000D0   95..         SUBB    A,?V0
   \   0000D2   40F1         JC      ??CrossCallReturnLabel_92
    458            }
    459          
    460            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_10:
   \   0000D4                ; Setup parameters for call to function fillAndSend
   \   0000D4   75..06       MOV     ?V0,#0x6
   \   0000D7   75..00       MOV     ?V1,#0x0
   \   0000DA   78..         MOV     R0,#?V0
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DF   EF           MOV     A,R7
   \   0000E0   F9           MOV     R1,A
   \   0000E1   EA           MOV     A,R2
   \   0000E2   FC           MOV     R4,A
   \   0000E3   EB           MOV     A,R3
   \   0000E4   FD           MOV     R5,A
   \   0000E5   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000E7   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000E9   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000EC   7402         MOV     A,#0x2
   \   0000EE   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_1:
   \   0000F1   80..         SJMP    ??Subroutine98_0
    461          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   8C..         MOV     ?V2,R4
   \   000007   8D..         MOV     ?V3,R5
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   AC..         MOV     R4,?V1
   \   000002   EC           MOV     A,R4
   \   000003   2C           ADD     A,R4
   \   000004   FC           MOV     R4,A
   \   000005   E4           CLR     A
   \   000006   33           RLC     A
   \   000007   FD           MOV     R5,A
   \   000008   E5..         MOV     A,?V2
   \   00000A   2C           ADD     A,R4
   \   00000B   FC           MOV     R4,A
   \   00000C   E5..         MOV     A,?V3
   \   00000E   3D           ADDC    A,R5
   \   00000F   FD           MOV     R5,A
   \   000010   8C82         MOV     DPL,R4
   \   000012   8D83         MOV     DPH,R5
   \   000014   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000017   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   00001A   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   00001D   A3           INC     DPTR
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   E8           MOV     A,R0
   \   000020   2402         ADD     A,#0x2
   \   000022   F8           MOV     R0,A
   \   000023   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine116_0
   \   000001                ; // Fall through to label ??Subroutine116_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine116_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   E9           MOV     A,R1
   \   000001   FE           MOV     R6,A
   \   000002                REQUIRE ??Subroutine121_0
   \   000002                ; // Fall through to label ??Subroutine121_0
    462          
    463          /*********************************************************************
    464           * @fn          ZDP_SimpleDescReq
    465           *
    466           * @brief       This builds and send a NWK_Simple_Desc_req
    467           *              message.  This function sends unicast message to the
    468           *              destination device.
    469           *
    470           * @param       dstAddr - destination address
    471           * @param       nwkAddr - 16 bit address
    472           * @param       epIntf - endpoint/interface
    473           * @param       SecurityEnable - Security Options
    474           *
    475           * @return      afStatus_t
    476           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    477          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_SimpleDescReq:
    478                                              byte endPoint, byte SecurityEnable )
    479          
    480          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    481            (void)SecurityEnable;  // Intentionally unreferenced parameter
    482          
    483            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000005   12....       LCALL   ?Subroutine19 & 0xFFFF
    484            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_17:
   \   000008   12....       LCALL   ?Subroutine13 & 0xFFFF
    485            ZDP_TmpBuf[2] = endPoint;
    486          
    487            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
   \                     ??CrossCallReturnLabel_6:
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   75..04       MOV     ?V0,#0x4
   \   00000E   75..00       MOV     ?V1,#0x0
   \   000011   78..         MOV     R0,#?V0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7903         MOV     R1,#0x3
   \   000018   02....       LJMP    ?Subroutine8 & 0xFFFF
    488          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000003   A3           INC     DPTR
   \   000004   E9           MOV     A,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET
    489          
    490          /*********************************************************************
    491           * @fn          ZDP_UserDescSet
    492           *
    493           * @brief       This builds and send a User_Desc_set message to set
    494           *              the user descriptor.  This function sends unicast
    495           *              message to the destination device.
    496           *
    497           * @param       dstAddr - destination address
    498           * @param       nwkAddr - 16 bit address
    499           * @param       UserDescriptor - user descriptor
    500           * @param       SecurityEnable - Security Options
    501           *
    502           * @return      afStatus_t
    503           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    504          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_UserDescSet:
    505                                    UserDescriptorFormat_t *UserDescriptor,
    506                                    byte SecurityEnable )
    507          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine54 & 0xFFFF
    508            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_82:
   \   000008   740F         MOV     A,#0xf
   \   00000A   12....       LCALL   ?XSTACK_DISP0_8
   \   00000D   12....       LCALL   ?Subroutine44 & 0xFFFF
    509            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    510                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
   \                     ??CrossCallReturnLabel_60:
   \   000010   FA           MOV     R2,A
   \   000011   C3           CLR     C
   \   000012   9410         SUBB    A,#0x10
   \   000014   5004         JNC     ??ZDP_UserDescSet_0
   \   000016   8A..         MOV     ?V2,R2
   \   000018   8003         SJMP    ??ZDP_UserDescSet_1
   \                     ??ZDP_UserDescSet_0:
   \   00001A   75..10       MOV     ?V2,#0x10
    511            byte addrLen = 2;
    512          
    513            (void)SecurityEnable;  // Intentionally unreferenced parameter
    514          
    515            *pBuf++ = LO_UINT16( nwkAddr );
   \                     ??ZDP_UserDescSet_1:
   \   00001D   EC           MOV     A,R4
   \   00001E   85..82       MOV     DPL,?V0
   \   000021   85..83       MOV     DPH,?V1
   \   000024   F0           MOVX    @DPTR,A
    516            *pBuf++ = HI_UINT16( nwkAddr );
   \   000025   ED           MOV     A,R5
   \   000026   12....       LCALL   ?Subroutine32 & 0xFFFF
    517          
    518            *pBuf++ = len;
   \                     ??CrossCallReturnLabel_42:
   \   000029   E5..         MOV     A,?V2
   \   00002B   12....       LCALL   ?Subroutine10 & 0xFFFF
    519            addrLen = 3;
    520          
    521            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
   \                     ??CrossCallReturnLabel_0:
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000031   AC..         MOV     R4,?V2
   \   000033   7D00         MOV     R5,#0x0
   \   000035   E5..         MOV     A,?V0
   \   000037   2403         ADD     A,#0x3
   \   000039   FA           MOV     R2,A
   \   00003A   E4           CLR     A
   \   00003B   35..         ADDC    A,?V1
   \   00003D   FB           MOV     R3,A
   \   00003E   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000041   7403         MOV     A,#0x3
   \   000043   12....       LCALL   ?DEALLOC_XSTACK8
    522            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
   \   000046                ; Setup parameters for call to function osal_memset
   \   000046   A8..         MOV     R0,?V2
   \   000048   7410         MOV     A,#0x10
   \   00004A   C3           CLR     C
   \   00004B   98           SUBB    A,R0
   \   00004C   FC           MOV     R4,A
   \   00004D   95E0         SUBB    A,0xE0 /* A   */
   \   00004F   FD           MOV     R5,A
   \   000050   7920         MOV     R1,#0x20
   \   000052   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    523          
    524            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
   \   000055                ; Setup parameters for call to function fillAndSend
   \   000055   75..14       MOV     ?V0,#0x14
   \   000058   75..00       MOV     ?V1,#0x0
   \   00005B   78..         MOV     R0,#?V0
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000060   7913         MOV     R1,#0x13
   \   000062   EE           MOV     A,R6
   \   000063   FC           MOV     R4,A
   \   000064   EF           MOV     A,R7
   \   000065   FD           MOV     R5,A
   \   000066   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000068   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00006A   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00006D   7402         MOV     A,#0x2
   \   00006F                REQUIRE ?Subroutine3
   \   00006F                ; // Fall through to label ?Subroutine3
    525          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F07         MOV     R7,#0x7
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000007   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   00000A   88..         MOV     ?V0,R0
   \   00000C   89..         MOV     ?V1,R1
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000003   A982         MOV     R1,DPL
   \   000005   AA83         MOV     R2,DPH
   \   000007   89..         MOV     ?V4,R1
   \   000009   8A..         MOV     ?V5,R2
   \   00000B   75..00       MOV     ?V6,#0x0
   \   00000E   78..         MOV     R0,#?V4
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   A3           INC     DPTR
   \   000001   F0           MOVX    @DPTR,A
   \   000002   85..82       MOV     DPL,?V0
   \   000005   85..83       MOV     DPH,?V1
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET
    526          
    527          /*********************************************************************
    528           * @fn          ZDP_ServerDiscReq
    529           *
    530           * @brief       Build and send a Server_Discovery_req request message.
    531           *
    532           * @param       serverMask - 16-bit bit-mask of server services being sought.
    533           * @param       SecurityEnable - Security Options
    534           *
    535           * @return      afStatus_t
    536           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    537          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
   \                     ZDP_ServerDiscReq:
    538          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine58 & 0xFFFF
    539            uint8 *pBuf = ZDP_TmpBuf;
    540            zAddrType_t dstAddr;
    541          
    542            dstAddr.addrMode = AddrBroadcast;
   \                     ??CrossCallReturnLabel_240:
   \   00000D   7408         MOV     A,#0x8
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine20 & 0xFFFF
    543            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    544          
    545            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_18:
   \   000015   EA           MOV     A,R2
   \   000016   8882         MOV     DPL,R0
   \   000018   8983         MOV     DPH,R1
   \   00001A   F0           MOVX    @DPTR,A
    546            *pBuf = HI_UINT16( serverMask );
   \   00001B   EB           MOV     A,R3
   \   00001C   A3           INC     DPTR
   \   00001D   F0           MOVX    @DPTR,A
    547          
    548            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    549                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
   \   00001E   EE           MOV     A,R6
   \   00001F   90....       MOV     DPTR,#ZDP_TxOptions
   \   000022   6004         JZ      ??ZDP_ServerDiscReq_0
   \   000024   7440         MOV     A,#0x40
   \   000026   8001         SJMP    ??ZDP_ServerDiscReq_1
   \                     ??ZDP_ServerDiscReq_0:
   \   000028   E4           CLR     A
   \                     ??ZDP_ServerDiscReq_1:
   \   000029   F0           MOVX    @DPTR,A
   \   00002A                ; Setup parameters for call to function fillAndSend
   \   00002A   75..15       MOV     ?V0,#0x15
   \   00002D   75..00       MOV     ?V1,#0x0
   \   000030   78..         MOV     R0,#?V0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7902         MOV     R1,#0x2
   \   000037   E9           MOV     A,R1
   \   000038   12....       LCALL   ?XSTACK_DISP102_8
   \   00003B   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00003D   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00003F   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000042   7402         MOV     A,#0x2
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
   \   000047   E9           MOV     A,R1
   \   000048   F9           MOV     R1,A
   \   000049   90....       MOV     DPTR,#ZDP_TxOptions
   \   00004C   E4           CLR     A
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   02....       LJMP    ??Subroutine99_0 & 0xFFFF
    550          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET
    551          
    552          /*********************************************************************
    553           * @fn          ZDP_DeviceAnnce
    554           *
    555           * @brief       This builds and send a Device_Annce message.  This
    556           *              function sends a broadcast message.
    557           *
    558           * @param       nwkAddr - 16 bit address of the device
    559           * @param       IEEEAddr - 64 bit address of the device
    560           * @param       capabilities - device capabilities.  This field is only
    561           *                 sent for v1.1 networks.
    562           * @param       SecurityEnable - Security Options
    563           *
    564           * @return      afStatus_t
    565           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    566          afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
   \                     ZDP_DeviceAnnce:
    567                                        byte capabilities, byte SecurityEnable )
    568          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    569            zAddrType_t dstAddr;
    570            uint8 len;
    571          
    572            (void)SecurityEnable;  // Intentionally unreferenced parameter
    573          
    574            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00000C   7408         MOV     A,#0x8
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ?Subroutine20 & 0xFFFF
    575            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    576          
    577            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_19:
   \   000014   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000017   EA           MOV     A,R2
   \   000018   12....       LCALL   ?Subroutine23 & 0xFFFF
    578            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_24:
   \   00001B   EB           MOV     A,R3
   \   00001C   F0           MOVX    @DPTR,A
    579            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
   \   00001D                ; Setup parameters for call to function sAddrExtCpy
   \   00001D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000020   E0           MOVX    A,@DPTR
   \   000021   2402         ADD     A,#0x2
   \   000023   FA           MOV     R2,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   3400         ADDC    A,#0x0
   \   000028   FB           MOV     R3,A
   \   000029   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    580            len = 2 + Z_EXTADDR_LEN;
    581          
    582            ZDP_TmpBuf[10] = capabilities;
   \   00002C   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   00002F   C8           XCH     A,R0
   \   000030   240A         ADD     A,#0xa
   \   000032   F582         MOV     DPL,A
   \   000034   E4           CLR     A
   \   000035   38           ADDC    A,R0
   \   000036   F583         MOV     DPH,A
   \   000038   EE           MOV     A,R6
   \   000039   F0           MOVX    @DPTR,A
    583            len++;
    584          
    585            return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
   \   00003A                ; Setup parameters for call to function fillAndSend
   \   00003A   75..13       MOV     ?V0,#0x13
   \   00003D   75..00       MOV     ?V1,#0x0
   \   000040   78..         MOV     R0,#?V0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   790B         MOV     R1,#0xb
   \   000047   02....       LJMP    ?Subroutine2 & 0xFFFF
    586          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   E0           MOVX    A,@DPTR
   \   000004                REQUIRE ??Subroutine109_0
   \   000004                ; // Fall through to label ??Subroutine109_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F583         MOV     DPH,A
   \   000005   8882         MOV     DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine123_0
   \   000003                ; // Fall through to label ??Subroutine123_0
    587          
    588          /*********************************************************************
    589           * @fn          ZDP_ParentAnnce
    590           *
    591           * @brief       This builds and send a Parent_Annce and Parent_Annce_Rsp
    592           *              messages, it will depend on the clusterID parameter.
    593           *
    594           * @param       TransSeq - ZDP Transaction Sequence Number
    595           * @param       dstAddr - destination address
    596           * @param       numberOfChildren - 8 bit number of children
    597           * @param       childInfo - list of children information (ExtAddr and Age)
    598           * @param       clusterID - Parent_annce or Parent_annce_rsp
    599           * @param       SecurityEnable - Security Options
    600           *
    601           * @return      afStatus_t
    602           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    603          afStatus_t ZDP_ParentAnnce( uint8 *TransSeq,
   \                     ZDP_ParentAnnce:
    604                                      zAddrType_t *dstAddr,
    605                                      uint8 numberOfChildren,
    606                                      uint8 *childInfo,
    607                                      cId_t clusterID,
    608                                      uint8 SecurityEnable )
    609          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V4,R2
   \   000007   8B..         MOV     ?V5,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   89..         MOV     ?V8,R1
    610            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   12....       LCALL   ??Subroutine112_0 & 0xFFFF
    611            ZDO_ChildInfo_t *pChildInfo;
    612            uint8 i, len;
    613            uint8 *numOfChild;
    614          
    615            (void)SecurityEnable;  // Intentionally unreferenced parameter
    616          
    617            pChildInfo = (ZDO_ChildInfo_t *)childInfo;
    618          
    619            if ( dstAddr->addrMode == AddrBroadcast )
   \                     ??CrossCallReturnLabel_203:
   \   000012   8E82         MOV     DPL,R6
   \   000014   8F83         MOV     DPH,R7
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   640F         XRL     A,#0xf
   \   000021   700B         JNZ     ??ZDP_ParentAnnce_0
    620            {
    621              // Make sure is sent to 0xFFFC
    622              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   74FC         MOV     A,#-0x4
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   74FF         MOV     A,#-0x1
   \   00002D   F0           MOVX    @DPTR,A
    623            }
    624            len = 1;
   \                     ??ZDP_ParentAnnce_0:
   \   00002E   75..01       MOV     ?V6,#0x1
   \   000031   7418         MOV     A,#0x18
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   12....       LCALL   ?Subroutine45 & 0xFFFF
    625            if ( clusterID == Parent_annce_rsp )
   \                     ??CrossCallReturnLabel_64:
   \   000039   741F         MOV     A,#0x1f
   \   00003B   65..         XRL     A,?V2
   \   00003D   7004         JNZ     ??ZDP_ParentAnnce_1
   \   00003F   7480         MOV     A,#-0x80
   \   000041   65..         XRL     A,?V3
   \                     ??ZDP_ParentAnnce_1:
   \   000043   700B         JNZ     ??CrossCallReturnLabel_151
    626            {
    627              // + Status Byte
    628              len += 1;
   \   000045   75..02       MOV     ?V6,#0x2
    629              // Set the status bit to success
    630              *pBuf++ = 0;
   \   000048   8A82         MOV     DPL,R2
   \   00004A   8B83         MOV     DPH,R3
   \   00004C   E4           CLR     A
   \   00004D   12....       LCALL   ??Subroutine101_0 & 0xFFFF
    631            }
    632            
    633            numOfChild = pBuf;
   \                     ??CrossCallReturnLabel_151:
   \   000050   8A..         MOV     ?V0,R2
   \   000052   8B..         MOV     ?V1,R3
    634            *pBuf++ = numberOfChildren;
   \   000054   8A82         MOV     DPL,R2
   \   000056   8B83         MOV     DPH,R3
   \   000058   E9           MOV     A,R1
   \   000059   12....       LCALL   ??Subroutine101_0 & 0xFFFF
    635          
    636            for ( i = 0; i < MAX_PARENT_ANNCE_CHILD; i++ )
   \                     ??CrossCallReturnLabel_152:
   \   00005C   75..00       MOV     ?V7,#0x0
   \   00005F   7416         MOV     A,#0x16
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F5..         MOV     ?V12,A
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F5..         MOV     ?V13,A
    637            {
    638              pBuf = osal_cpyExtAddr( pBuf, pChildInfo[childIndex].extAddr );
   \                     ??ZDP_ParentAnnce_2:
   \   00006B                ; Setup parameters for call to function sAddrExtCpy
   \   00006B   90....       MOV     DPTR,#childIndex
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   75F00C       MOV     B,#0xc
   \   000072   A4           MUL     AB
   \   000073   F8           MOV     R0,A
   \   000074   A9F0         MOV     R1,B
   \   000076   E5..         MOV     A,?V12
   \   000078   28           ADD     A,R0
   \   000079   FC           MOV     R4,A
   \   00007A   E5..         MOV     A,?V13
   \   00007C   39           ADDC    A,R1
   \   00007D   FD           MOV     R5,A
   \   00007E   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    639              childIndex++;
   \   000081   90....       MOV     DPTR,#childIndex
   \   000084   E0           MOVX    A,@DPTR
   \   000085   04           INC     A
   \   000086   F0           MOVX    @DPTR,A
    640              
    641              len += Z_EXTADDR_LEN;
   \   000087   7408         MOV     A,#0x8
   \   000089   25..         ADD     A,?V6
   \   00008B   F5..         MOV     ?V6,A
    642              
    643              if ( childIndex == numberOfChildren )
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   65..         XRL     A,?V8
   \   000090   7012         JNZ     ??ZDP_ParentAnnce_3
    644              {
    645                pBuf = numOfChild;
    646                *pBuf = i + 1;
   \   000092   7401         MOV     A,#0x1
   \   000094   25..         ADD     A,?V7
   \   000096   85..82       MOV     DPL,?V0
   \   000099   85..83       MOV     DPH,?V1
   \   00009C   F0           MOVX    @DPTR,A
    647                // All childs are taken, restart index and go out
    648                childIndex = 0;
   \   00009D   90....       MOV     DPTR,#childIndex
   \   0000A0   E4           CLR     A
   \   0000A1   F0           MOVX    @DPTR,A
    649                return fillAndSend( TransSeq, dstAddr, clusterID, len );
   \   0000A2                ; Setup parameters for call to function fillAndSend
   \   0000A2   804B         SJMP    ??ZDP_ParentAnnce_4
    650              }
    651            }
   \                     ??ZDP_ParentAnnce_3:
   \   0000A4   05..         INC     ?V7
   \   0000A6   E5..         MOV     A,?V7
   \   0000A8   C3           CLR     C
   \   0000A9   940A         SUBB    A,#0xa
   \   0000AB   40BE         JC      ??ZDP_ParentAnnce_2
    652            
    653            pBuf = numOfChild;
    654            *pBuf = MAX_PARENT_ANNCE_CHILD;
   \   0000AD   85..82       MOV     DPL,?V0
   \   0000B0   85..83       MOV     DPH,?V1
   \   0000B3   740A         MOV     A,#0xa
   \   0000B5   F0           MOVX    @DPTR,A
    655            if ( childIndex < numberOfChildren )
   \   0000B6   90....       MOV     DPTR,#childIndex
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   C3           CLR     C
   \   0000BB   95..         SUBB    A,?V8
   \   0000BD   5030         JNC     ??ZDP_ParentAnnce_4
    656            {
    657              if ( clusterID == Parent_annce )
   \   0000BF   741F         MOV     A,#0x1f
   \   0000C1   65..         XRL     A,?V2
   \   0000C3   45..         ORL     A,?V3
   \   0000C5   7005         JNZ     ??ZDP_ParentAnnce_5
    658              {
    659                ZDApp_SetParentAnnceTimer();
   \   0000C7                ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
   \   0000C7   12....       LCALL   `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
   \   0000CA   8023         SJMP    ??ZDP_ParentAnnce_4
    660              }
    661              if ( clusterID == Parent_annce_rsp )
   \                     ??ZDP_ParentAnnce_5:
   \   0000CC   741F         MOV     A,#0x1f
   \   0000CE   65..         XRL     A,?V2
   \   0000D0   7004         JNZ     ??ZDP_ParentAnnce_6
   \   0000D2   7480         MOV     A,#-0x80
   \   0000D4   65..         XRL     A,?V3
   \                     ??ZDP_ParentAnnce_6:
   \   0000D6   7017         JNZ     ??ZDP_ParentAnnce_4
    662              {
    663                osal_start_timerEx( ZDAppTaskID, ZDO_PARENT_ANNCE_EVT, 10 );
   \   0000D8                ; Setup parameters for call to function osal_start_timerEx
   \   0000D8   90....       MOV     DPTR,#__Constant_a
   \   0000DB   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000DE   7A00         MOV     R2,#0x0
   \   0000E0   7B40         MOV     R3,#0x40
   \   0000E2   90....       MOV     DPTR,#ZDAppTaskID
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   F9           MOV     R1,A
   \   0000E7   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000EA   7404         MOV     A,#0x4
   \   0000EC   12....       LCALL   ?DEALLOC_XSTACK8
    664              }
    665            }
    666          
    667            return fillAndSend( TransSeq, dstAddr, clusterID, len );
   \                     ??ZDP_ParentAnnce_4:
   \   0000EF                ; Setup parameters for call to function fillAndSend
   \   0000EF   78..         MOV     R0,#?V2
   \   0000F1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F4   A9..         MOV     R1,?V6
   \   0000F6   EE           MOV     A,R6
   \   0000F7   FC           MOV     R4,A
   \   0000F8   EF           MOV     A,R7
   \   0000F9   FD           MOV     R5,A
   \   0000FA   AA..         MOV     R2,?V4
   \   0000FC   AB..         MOV     R3,?V5
   \   0000FE   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000101   7402         MOV     A,#0x2
   \   000103   02....       LJMP    ??Subroutine114_0 & 0xFFFF
    668          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AA82         MOV     R2,DPL
   \   000004   AB83         MOV     R3,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine113_0
   \   000003                ; // Fall through to label ??Subroutine113_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine114_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F0E         MOV     R7,#0xe
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    669          
    670          /*********************************************************************
    671           * Address Responses
    672           */
    673          
    674          /*********************************************************************
    675           * @fn      zdpProcessAddrReq
    676           *
    677           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    678           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    679           *
    680           * @param   inMsg - incoming message
    681           *
    682           * @return  none
    683           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    684          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
   \                     zdpProcessAddrReq:
    685          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
    686            associated_devices_t *pAssoc;
    687            uint8 reqType;
    688            uint16 aoi = INVALID_NODE_ADDR;
   \   000009   7EFE         MOV     R6,#-0x2
   \   00000B   7FFF         MOV     R7,#-0x1
    689            uint8 *ieee = NULL;
   \   00000D   75..00       MOV     ?V2,#0x0
   \   000010   75..00       MOV     ?V3,#0x0
    690          
    691            reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   000013   EA           MOV     A,R2
   \   000014   240C         ADD     A,#0xc
   \   000016   F5..         MOV     ?V4,A
   \   000018   E4           CLR     A
   \   000019   35..         ADDC    A,?V1
   \   00001B   F5..         MOV     ?V5,A
   \   00001D   85..82       MOV     DPL,?V4
   \   000020   F583         MOV     DPH,A
   \   000022   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000025   EA           MOV     A,R2
   \   000026   4B           ORL     A,R3
   \   000027   7004         JNZ     ??zdpProcessAddrReq_0
   \   000029   7C08         MOV     R4,#0x8
   \   00002B   8002         SJMP    ??zdpProcessAddrReq_1
   \                     ??zdpProcessAddrReq_0:
   \   00002D   7C02         MOV     R4,#0x2
   \                     ??zdpProcessAddrReq_1:
   \   00002F   E5..         MOV     A,?V0
   \   000031   2413         ADD     A,#0x13
   \   000033   F582         MOV     DPL,A
   \   000035   E4           CLR     A
   \   000036   35..         ADDC    A,?V1
   \   000038   F583         MOV     DPH,A
   \   00003A   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00003D   2C           ADD     A,R4
   \   00003E   F582         MOV     DPL,A
   \   000040   E4           CLR     A
   \   000041   39           ADDC    A,R1
   \   000042   F583         MOV     DPH,A
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F5..         MOV     ?V8,A
    692          
    693            if ( inMsg->clusterID == NWK_addr_req )
   \   000047   E5..         MOV     A,?V0
   \   000049   240B         ADD     A,#0xb
   \   00004B   F5..         MOV     ?V6,A
   \   00004D   E4           CLR     A
   \   00004E   35..         ADDC    A,?V1
   \   000050   F5..         MOV     ?V7,A
   \   000052   EA           MOV     A,R2
   \   000053   4B           ORL     A,R3
   \   000054   7017         JNZ     ??zdpProcessAddrReq_2
    694          
    695            {
    696              ieee = inMsg->asdu;
   \   000056   88..         MOV     ?V2,R0
   \   000058   89..         MOV     ?V3,R1
    697          
    698              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \   00005A                ; Setup parameters for call to function sAddrExtCmp
   \   00005A   AC..         MOV     R4,?V2
   \   00005C   AD..         MOV     R5,?V3
   \   00005E   7A..         MOV     R2,#saveExtAddr & 0xff
   \   000060   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   000062   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000065   E9           MOV     A,R1
   \   000066   6039         JZ      ??zdpProcessAddrReq_3
    699              {
    700                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   000068   12....       LCALL   ?Subroutine49 & 0xFFFF
    701              }
    702              // Handle response for sleeping end devices
    703              else if ( (ZSTACK_ROUTER_BUILD)
    704                && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
    705                       && ((pAssoc->nodeRelation == CHILD_RFD) || (pAssoc->nodeRelation == CHILD_RFD_RX_IDLE)) ) )
    706              {
    707                aoi = pAssoc->shortAddr;
    708                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
    709                  reqType = 0xFF; // Force Invalid
    710              }
    711            }
   \                     ??CrossCallReturnLabel_221:
   \   00006B   8024         SJMP    ??zdpProcessAddrReq_4
    712            else  // if ( inMsg->clusterID == IEEE_addr_req )
    713            {
    714              aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??zdpProcessAddrReq_2:
   \   00006D   8882         MOV     DPL,R0
   \   00006F   8983         MOV     DPH,R1
   \   000071   E0           MOVX    A,@DPTR
   \   000072   FA           MOV     R2,A
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   F8           MOV     R0,A
   \   000076   E4           CLR     A
   \   000077   C8           XCH     A,R0
   \   000078   F9           MOV     R1,A
   \   000079   EA           MOV     A,R2
   \   00007A   28           ADD     A,R0
   \   00007B   FE           MOV     R6,A
   \   00007C   E4           CLR     A
   \   00007D   39           ADDC    A,R1
   \   00007E   FF           MOV     R7,A
    715          
    716              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   00007F   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000082   E0           MOVX    A,@DPTR
   \   000083   6E           XRL     A,R6
   \   000084   7003         JNZ     ??zdpProcessAddrReq_5
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   6F           XRL     A,R7
   \                     ??zdpProcessAddrReq_5:
   \   000089   7016         JNZ     ??zdpProcessAddrReq_3
    717              {
    718                ieee = saveExtAddr;
   \   00008B   75....       MOV     ?V2,#saveExtAddr & 0xff
   \   00008E   75....       MOV     ?V3,#(saveExtAddr >> 8) & 0xff
    719              }
    720              else if ( (ZSTACK_ROUTER_BUILD)
    721                && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
    722                       && (pAssoc->nodeRelation == CHILD_RFD)) )
    723              {
    724                AddrMgrEntry_t addrEntry;
    725                addrEntry.user = ADDRMGR_USER_DEFAULT;
    726                addrEntry.index = pAssoc->addrIdx;
    727                if ( AddrMgrEntryGet( &addrEntry ) )
    728                {
    729                  ieee = addrEntry.extAddr;
    730                }
    731          
    732                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
    733                  reqType = 0xFF; // Force Invalid
    734              }
    735            }
    736          
    737            if ( ((aoi != INVALID_NODE_ADDR) && (ieee != NULL)) || (inMsg->wasBroadcast == FALSE) )
   \                     ??zdpProcessAddrReq_4:
   \   000091   74FE         MOV     A,#-0x2
   \   000093   6E           XRL     A,R6
   \   000094   7003         JNZ     ??zdpProcessAddrReq_6
   \   000096   74FF         MOV     A,#-0x1
   \   000098   6F           XRL     A,R7
   \                     ??zdpProcessAddrReq_6:
   \   000099   6006         JZ      ??zdpProcessAddrReq_3
   \   00009B   E5..         MOV     A,?V2
   \   00009D   45..         ORL     A,?V3
   \   00009F   700C         JNZ     ??zdpProcessAddrReq_7
   \                     ??zdpProcessAddrReq_3:
   \   0000A1   85..82       MOV     DPL,?V6
   \   0000A4   85..83       MOV     DPH,?V7
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   6003         JZ      $+5
   \   0000AA   02....       LJMP    ??zdpProcessAddrReq_8 & 0xFFFF
    738            {
    739              uint8 stat;
    740              uint8 *pBuf = ZDP_TmpBuf;
   \                     ??zdpProcessAddrReq_7:
   \   0000AD   12....       LCALL   ??Subroutine112_0 & 0xFFFF
    741              // Status + IEEE-Addr + Nwk-Addr.
    742              uint8 len = 1 + Z_EXTADDR_LEN + 2;
    743          
    744              // If aoi and iee are both setup, we found results
    745              if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \                     ??CrossCallReturnLabel_204:
   \   0000B0   74FE         MOV     A,#-0x2
   \   0000B2   6E           XRL     A,R6
   \   0000B3   7003         JNZ     ??zdpProcessAddrReq_9
   \   0000B5   74FF         MOV     A,#-0x1
   \   0000B7   6F           XRL     A,R7
   \                     ??zdpProcessAddrReq_9:
   \   0000B8   6023         JZ      ??zdpProcessAddrReq_10
   \   0000BA   E5..         MOV     A,?V2
   \   0000BC   45..         ORL     A,?V3
   \   0000BE   601D         JZ      ??zdpProcessAddrReq_10
    746              {
    747                stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) || (reqType == ZDP_ADDR_REQTYPE_EXTENDED))
    748                              ? ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \   0000C0   E5..         MOV     A,?V8
   \   0000C2   6006         JZ      ??zdpProcessAddrReq_11
   \   0000C4   7401         MOV     A,#0x1
   \   0000C6   65..         XRL     A,?V8
   \   0000C8   7004         JNZ     ??zdpProcessAddrReq_12
   \                     ??zdpProcessAddrReq_11:
   \   0000CA   7800         MOV     R0,#0x0
   \   0000CC   8029         SJMP    ??zdpProcessAddrReq_13
   \                     ??zdpProcessAddrReq_12:
   \   0000CE   7880         MOV     R0,#-0x80
    749                        
    750                if(stat == ZDP_INVALID_REQTYPE)
    751                {
    752                  //R21 Errata update CCB 2111 
    753                  if(inMsg->wasBroadcast == TRUE)
   \   0000D0   85..82       MOV     DPL,?V6
   \   0000D3   85..83       MOV     DPH,?V7
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   6401         XRL     A,#0x1
   \   0000D9   701C         JNZ     ??zdpProcessAddrReq_13
    754                  {
    755                    return;
   \   0000DB   8069         SJMP    ??zdpProcessAddrReq_8
    756                  }
    757                  
    758                  stat = ZDP_INVALID_REQTYPE;
    759                }
    760              }
    761              else
    762              {
    763                // not found and the req was unicast to this device
    764                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??zdpProcessAddrReq_10:
   \   0000DD   7881         MOV     R0,#-0x7f
    765          
    766                // Fill in the missing field with this device's address
    767                if ( inMsg->clusterID == NWK_addr_req )
   \   0000DF   85..82       MOV     DPL,?V4
   \   0000E2   85..83       MOV     DPH,?V5
   \   0000E5   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   0000E8   EC           MOV     A,R4
   \   0000E9   4D           ORL     A,R5
   \   0000EA   7005         JNZ     ??zdpProcessAddrReq_14
    768                {
    769                  aoi = ZDAppNwkAddr.addr.shortAddr;
   \   0000EC   12....       LCALL   ?Subroutine49 & 0xFFFF
    770                }
   \                     ??CrossCallReturnLabel_222:
   \   0000EF   8006         SJMP    ??zdpProcessAddrReq_13
    771                else
    772                {
    773                  ieee = saveExtAddr;
   \                     ??zdpProcessAddrReq_14:
   \   0000F1   75....       MOV     ?V2,#saveExtAddr & 0xff
   \   0000F4   75....       MOV     ?V3,#(saveExtAddr >> 8) & 0xff
    774                }
    775              }
    776          
    777              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_13:
   \   0000F7   E8           MOV     A,R0
   \   0000F8   12....       LCALL   ?Subroutine15 & 0xFFFF
    778          
    779              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \                     ??CrossCallReturnLabel_154:
   \   0000FB                ; Setup parameters for call to function sAddrExtCpy
   \   0000FB   AC..         MOV     R4,?V2
   \   0000FD   AD..         MOV     R5,?V3
   \   0000FF   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000102   8A82         MOV     DPL,R2
   \   000104   8B83         MOV     DPH,R3
    780          
    781              *pBuf++ = LO_UINT16( aoi );
   \   000106   EE           MOV     A,R6
   \   000107   F0           MOVX    @DPTR,A
    782              *pBuf++ = HI_UINT16( aoi );
   \   000108   EF           MOV     A,R7
   \   000109   A3           INC     DPTR
   \   00010A   F0           MOVX    @DPTR,A
    783          
    784              if ( ZSTACK_ROUTER_BUILD )
    785              {
    786                if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) && (aoi == ZDAppNwkAddr.addr.shortAddr)
    787                     && (stat == ZDP_SUCCESS) )
    788                {
    789                  uint8  cnt = 0;
    790                  
    791                  //Updated to only search for ZED devices as per R21 spec (2.4.3.1.1.2)
    792                  uint16 *list = AssocMakeList( &cnt );
    793          
    794                  if ( list != NULL )
    795                  {
    796                    byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
    797                    uint16 *pList = list + idx;
    798          
    799                    // NumAssocDev field is only present on success.
    800                    if ( cnt > idx )
    801                    {
    802                      cnt -= idx;
    803                      len += (cnt * sizeof( uint16 ));
    804                    }
    805                    else
    806                    {
    807                      cnt = 0;
    808                    }
    809                    *pBuf++ = cnt;
    810                    len++;
    811          
    812                    // StartIndex field is only present if NumAssocDev field is non-zero.
    813                    *pBuf++ = idx;
    814                    len++;
    815          
    816                    while ( cnt != 0 )
    817                    {
    818                      *pBuf++ = LO_UINT16( *pList );
    819                      *pBuf++ = HI_UINT16( *pList );
    820                      pList++;
    821                      cnt--;
    822                    }
    823          
    824                    osal_mem_free( (uint8 *)list );
    825                  }
    826                  else
    827                  {
    828                    // NumAssocDev field is only present on success.
    829                    *pBuf++ = 0;
    830                    len++;
    831                  }
    832                }
    833              }
    834          
    835              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   00010B   90....       MOV     DPTR,#ZDP_TxOptions
   \   00010E   7410         MOV     A,#0x10
   \   000110   F0           MOVX    @DPTR,A
    836              fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
   \   000111                ; Setup parameters for call to function fillAndSend
   \   000111   85..82       MOV     DPL,?V4
   \   000114   85..83       MOV     DPH,?V5
   \   000117   E0           MOVX    A,@DPTR
   \   000118   F5..         MOV     ?V2,A
   \   00011A   A3           INC     DPTR
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   4480         ORL     A,#0x80
   \   00011E   F5..         MOV     ?V3,A
   \   000120   78..         MOV     R0,#?V2
   \   000122   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000125   790B         MOV     R1,#0xb
   \   000127   E5..         MOV     A,?V0
   \   000129   2402         ADD     A,#0x2
   \   00012B   FC           MOV     R4,A
   \   00012C   E4           CLR     A
   \   00012D   35..         ADDC    A,?V1
   \   00012F   FD           MOV     R5,A
   \   000130   E5..         MOV     A,?V0
   \   000132   240F         ADD     A,#0xf
   \   000134   FA           MOV     R2,A
   \   000135   E4           CLR     A
   \   000136   35..         ADDC    A,?V1
   \   000138   FB           MOV     R3,A
   \   000139   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00013C   7402         MOV     A,#0x2
   \   00013E   12....       LCALL   ?DEALLOC_XSTACK8
    837              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000141   90....       MOV     DPTR,#ZDP_TxOptions
   \   000144   E4           CLR     A
   \   000145   F0           MOVX    @DPTR,A
    838            }
    839          }
   \                     ??zdpProcessAddrReq_8:
   \   000146   7F09         MOV     R7,#0x9
   \   000148   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine101_0
   \   000004                ; // Fall through to label ??Subroutine101_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000003                REQUIRE ??Subroutine117_0
   \   000003                ; // Fall through to label ??Subroutine117_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine117_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET
    840          
    841          /*********************************************************************
    842           * @fn          ZDP_NodeDescMsg
    843           *
    844           * @brief       Builds and sends a Node Descriptor message, unicast to the
    845           *              specified device.
    846           *
    847           * @param       inMsg - incoming message
    848           * @param       nwkAddr - 16 bit network address for device
    849           * @param       pNodeDesc - pointer to the node descriptor
    850           *
    851           * @return      afStatus_t
    852           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    853          afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_NodeDescMsg:
    854                                     uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
    855          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    856            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FE           MOV     R6,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   12....       LCALL   ?Subroutine21 & 0xFFFF
    857            byte len;
    858          
    859            len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
    860          
    861            *pBuf++ = ZDP_SUCCESS;
    862          
    863            *pBuf++ = LO_UINT16( nwkAddr );
    864            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_20:
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine44 & 0xFFFF
    865          
    866            *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    867                               (pNodeDesc->UserDescAvail << 4) |
    868                               (pNodeDesc->LogicalType & 0x07));
   \                     ??CrossCallReturnLabel_61:
   \   000015   541F         ANL     A,#0x1f
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   12....       LCALL   ?Subroutine29 & 0xFFFF
    869          
    870            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
   \                     ??CrossCallReturnLabel_227:
   \   00001E   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000021   12....       LCALL   ?Subroutine29 & 0xFFFF
    871            *pBuf++ = pNodeDesc->CapabilityFlags;
   \                     ??CrossCallReturnLabel_228:
   \   000024   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000027   12....       LCALL   ?Subroutine28 & 0xFFFF
    872            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \                     ??CrossCallReturnLabel_156:
   \   00002A   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00002D   12....       LCALL   ?Subroutine28 & 0xFFFF
    873            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \                     ??CrossCallReturnLabel_157:
   \   000030   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000033   12....       LCALL   ?Subroutine27 & 0xFFFF
    874            *pBuf++ = pNodeDesc->MaxBufferSize;
   \                     ??CrossCallReturnLabel_33:
   \   000036   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000039   12....       LCALL   ?Subroutine27 & 0xFFFF
    875            *pBuf++ = pNodeDesc->MaxInTransferSize[0];
   \                     ??CrossCallReturnLabel_34:
   \   00003C   A3           INC     DPTR
   \   00003D   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000040   12....       LCALL   ?Subroutine24 & 0xFFFF
    876            *pBuf++ = pNodeDesc->MaxInTransferSize[1];
   \                     ??CrossCallReturnLabel_26:
   \   000043   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000046   A3           INC     DPTR
   \   000047   F0           MOVX    @DPTR,A
    877          
    878            *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \   000048   E8           MOV     A,R0
   \   000049   2408         ADD     A,#0x8
   \   00004B   FC           MOV     R4,A
   \   00004C   E4           CLR     A
   \   00004D   39           ADDC    A,R1
   \   00004E   FD           MOV     R5,A
   \   00004F   8C82         MOV     DPL,R4
   \   000051   8D83         MOV     DPH,R5
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F5..         MOV     ?V0,A
   \   000056   EE           MOV     A,R6
   \   000057   240B         ADD     A,#0xb
   \   000059   F582         MOV     DPL,A
   \   00005B   E4           CLR     A
   \   00005C   3F           ADDC    A,R7
   \   00005D   F583         MOV     DPH,A
   \   00005F   E5..         MOV     A,?V0
   \   000061   12....       LCALL   ??Subroutine106_0 & 0xFFFF
    879            *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
   \                     ??CrossCallReturnLabel_169:
   \   000064   E0           MOVX    A,@DPTR
   \   000065   C0E0         PUSH    A
   \   000067   EE           MOV     A,R6
   \   000068   240C         ADD     A,#0xc
   \   00006A   F582         MOV     DPL,A
   \   00006C   E4           CLR     A
   \   00006D   3F           ADDC    A,R7
   \   00006E   F583         MOV     DPH,A
   \   000070   D0E0         POP     A
   \   000072   12....       LCALL   ?Subroutine24 & 0xFFFF
    880            *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
   \                     ??CrossCallReturnLabel_27:
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   C0E0         PUSH    A
   \   00007B   EE           MOV     A,R6
   \   00007C   240D         ADD     A,#0xd
   \   00007E   F582         MOV     DPL,A
   \   000080   E4           CLR     A
   \   000081   3F           ADDC    A,R7
   \   000082   F583         MOV     DPH,A
   \   000084   D0E0         POP     A
   \   000086   F0           MOVX    @DPTR,A
    881            *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
   \   000087   E8           MOV     A,R0
   \   000088   240B         ADD     A,#0xb
   \   00008A   F582         MOV     DPL,A
   \   00008C   E4           CLR     A
   \   00008D   39           ADDC    A,R1
   \   00008E   F583         MOV     DPH,A
   \   000090   E0           MOVX    A,@DPTR
   \   000091   C0E0         PUSH    A
   \   000093   EE           MOV     A,R6
   \   000094   240E         ADD     A,#0xe
   \   000096   F582         MOV     DPL,A
   \   000098   E4           CLR     A
   \   000099   3F           ADDC    A,R7
   \   00009A   F583         MOV     DPH,A
   \   00009C   D0E0         POP     A
   \   00009E   F0           MOVX    @DPTR,A
    882            *pBuf = pNodeDesc->DescriptorCapability;
   \   00009F   E8           MOV     A,R0
   \   0000A0   240C         ADD     A,#0xc
   \   0000A2   F582         MOV     DPL,A
   \   0000A4   E4           CLR     A
   \   0000A5   39           ADDC    A,R1
   \   0000A6   F583         MOV     DPH,A
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   C0E0         PUSH    A
   \   0000AB   EE           MOV     A,R6
   \   0000AC   240F         ADD     A,#0xf
   \   0000AE   F582         MOV     DPL,A
   \   0000B0   E4           CLR     A
   \   0000B1   3F           ADDC    A,R7
   \   0000B2   F583         MOV     DPH,A
   \   0000B4   D0E0         POP     A
   \   0000B6   F0           MOVX    @DPTR,A
    883          
    884            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
   \   0000B7                ; Setup parameters for call to function fillAndSend
   \   0000B7   75..02       MOV     ?V0,#0x2
   \   0000BA   75..80       MOV     ?V1,#-0x80
   \   0000BD   78..         MOV     R0,#?V0
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C2   7910         MOV     R1,#0x10
   \   0000C4   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   0000C7   5001         JNC     ??ZDP_NodeDescMsg_0
   \   0000C9   0B           INC     R3
   \                     ??ZDP_NodeDescMsg_0:
   \   0000CA   80..         SJMP    ??Subroutine103_0
    885          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005                REQUIRE ??Subroutine102_0
   \   000005                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   EA           MOV     A,R2
   \   000001   2402         ADD     A,#0x2
   \   000003   FC           MOV     R4,A
   \   000004   E4           CLR     A
   \   000005   3B           ADDC    A,R3
   \   000006   FD           MOV     R5,A
   \   000007   EA           MOV     A,R2
   \   000008   240F         ADD     A,#0xf
   \   00000A   FA           MOV     R2,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   FF           MOV     R7,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   E4           CLR     A
   \   000006   F0           MOVX    @DPTR,A
   \   000007   EC           MOV     A,R4
   \   000008   A3           INC     DPTR
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   ED           MOV     A,R5
   \   00000B   8E82         MOV     DPL,R6
   \   00000D   8F83         MOV     DPH,R7
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   F0           MOVX    @DPTR,A
   \   000012   740A         MOV     A,#0xa
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine115_0
   \   000001                ; // Fall through to label ??Subroutine115_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine115_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine119_0
   \   000002                ; // Fall through to label ??Subroutine119_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine120_0
   \   000001                ; // Fall through to label ??Subroutine120_0
    886          
    887          /*********************************************************************
    888           * @fn          ZDP_PowerDescMsg
    889           *
    890           * @brief       Builds and sends a Power Descriptor message, unicast to the
    891           *              specified device.
    892           *
    893           * @param       inMsg - incoming message (request)
    894           * @param       nwkAddr - 16 bit network address for device
    895           * @param       pPowerDesc - pointer to the node descriptor
    896           *
    897           * @return      afStatus_t
    898           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    899          afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_PowerDescMsg:
    900                               uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
    901          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    902            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000008   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00000B   FE           MOV     R6,A
   \   00000C   E9           MOV     A,R1
   \   00000D   12....       LCALL   ?Subroutine21 & 0xFFFF
    903            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
    904          
    905            *pBuf++ = ZDP_SUCCESS;
    906          
    907            *pBuf++ = LO_UINT16( nwkAddr );
    908            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_21:
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   12....       LCALL   ?Subroutine44 & 0xFFFF
    909          
    910            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    911                              | (pPowerDesc->PowerMode & 0x0F));
   \                     ??CrossCallReturnLabel_62:
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   A3           INC     DPTR
   \   00001B   12....       LCALL   ?Subroutine34 & 0xFFFF
    912            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    913                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \                     ??CrossCallReturnLabel_159:
   \   00001E   F5..         MOV     ?V0,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F5..         MOV     ?V1,A
   \   000024   540F         ANL     A,#0xf
   \   000026   F9           MOV     R1,A
   \   000027   740C         MOV     A,#0xc
   \   000029   78..         MOV     R0,#?V0
   \   00002B   12....       LCALL   ?US_SHR
   \   00002E   E5..         MOV     A,?V0
   \   000030   C4           SWAP    A
   \   000031   49           ORL     A,R1
   \   000032   8E82         MOV     DPL,R6
   \   000034   8F83         MOV     DPH,R7
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   F0           MOVX    @DPTR,A
    914          
    915            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
   \   00003B                ; Setup parameters for call to function fillAndSend
   \   00003B   75..03       MOV     ?V0,#0x3
   \   00003E   75..80       MOV     ?V1,#-0x80
   \   000041   78..         MOV     R0,#?V0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   7905         MOV     R1,#0x5
   \   000048   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   00004B   5001         JNC     ??ZDP_PowerDescMsg_0
   \   00004D   0B           INC     R3
   \                     ??ZDP_PowerDescMsg_0:
   \   00004E   80..         SJMP    ??Subroutine103_0
    916          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine104_0
   \   000002                ; // Fall through to label ??Subroutine104_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    917          
    918          /*********************************************************************
    919           * @fn          ZDP_SimpleDescMsg
    920           *
    921           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    922           *              specified device.
    923           *
    924           * @param       inMsg - incoming message (request)
    925           * @param       Status - message status (ZDP_SUCCESS or other)
    926           * @param       pSimpleDesc - pointer to the node descriptor
    927           *
    928           * @return      afStatus_t
    929           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    930          afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
   \                     ZDP_SimpleDescMsg:
    931                                        SimpleDescriptionFormat_t *pSimpleDesc )
    932          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   E9           MOV     A,R1
   \   00000A   FE           MOV     R6,A
    933            uint8 *pBuf = ZDP_TmpBuf;
   \   00000B   12....       LCALL   ?Subroutine42 & 0xFFFF
    934            uint8 i, len;
    935          
    936            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \                     ??CrossCallReturnLabel_165:
   \   00000E   EC           MOV     A,R4
   \   00000F   2409         ADD     A,#0x9
   \   000011   F8           MOV     R0,A
   \   000012   E4           CLR     A
   \   000013   3D           ADDC    A,R5
   \   000014   F9           MOV     R1,A
   \   000015   88..         MOV     ?V4,R0
   \   000017   89..         MOV     ?V5,R1
   \   000019   EC           MOV     A,R4
   \   00001A   2406         ADD     A,#0x6
   \   00001C   F8           MOV     R0,A
   \   00001D   E4           CLR     A
   \   00001E   3D           ADDC    A,R5
   \   00001F   F9           MOV     R1,A
   \   000020   88..         MOV     ?V6,R0
   \   000022   89..         MOV     ?V7,R1
   \   000024   EE           MOV     A,R6
   \   000025   7022         JNZ     ??ZDP_SimpleDescMsg_0
   \   000027   EC           MOV     A,R4
   \   000028   4D           ORL     A,R5
   \   000029   601E         JZ      ??ZDP_SimpleDescMsg_0
    937            {
    938              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    939              len = 1 + 2 + 1 + 8;
    940              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
   \   00002B   85..82       MOV     DPL,?V4
   \   00002E   85..83       MOV     DPH,?V5
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F8           MOV     R0,A
   \   000033   85..82       MOV     DPL,?V6
   \   000036   8983         MOV     DPH,R1
   \   000038   E0           MOVX    A,@DPTR
   \   000039   28           ADD     A,R0
   \   00003A   C3           CLR     C
   \   00003B   33           RLC     A
   \   00003C   240C         ADD     A,#0xc
   \   00003E   FA           MOV     R2,A
    941            }
    942            else
    943            {
    944              len = 1 + 2 + 1; // Status + desc length
    945            }
    946            if ( len >= ZDP_BUF_SZ-1 )
   \   00003F   C3           CLR     C
   \   000040   944F         SUBB    A,#0x4f
   \   000042   4007         JC      ??ZDP_SimpleDescMsg_1
    947            {
    948              return afStatus_MEM_FAIL;
   \   000044   7910         MOV     R1,#0x10
   \   000046   02....       LJMP    ??ZDP_SimpleDescMsg_2 & 0xFFFF
    949            }
   \                     ??ZDP_SimpleDescMsg_0:
   \   000049   7A04         MOV     R2,#0x4
    950          
    951            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_1:
   \   00004B   EE           MOV     A,R6
   \   00004C   85..82       MOV     DPL,?V0
   \   00004F   85..83       MOV     DPH,?V1
   \   000052   F0           MOVX    @DPTR,A
    952          
    953            *pBuf++ = LO_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \   000053   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000056   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000059   F0           MOVX    @DPTR,A
    954            *pBuf++ = HI_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \   00005A   90....       MOV     DPTR,#ZDAppNwkAddr + 1
   \   00005D   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000060   F0           MOVX    @DPTR,A
    955          
    956            if ( len > 4 )
   \   000061   E5..         MOV     A,?V0
   \   000063   2403         ADD     A,#0x3
   \   000065   F582         MOV     DPL,A
   \   000067   E4           CLR     A
   \   000068   35..         ADDC    A,?V1
   \   00006A   F583         MOV     DPH,A
   \   00006C   EA           MOV     A,R2
   \   00006D   C3           CLR     C
   \   00006E   9405         SUBB    A,#0x5
   \   000070   5003         JNC     $+5
   \   000072   02....       LJMP    ??ZDP_SimpleDescMsg_3 & 0xFFFF
    957            {
    958              *pBuf++ = len - 4;   // Simple descriptor length
   \   000075   74FC         MOV     A,#-0x4
   \   000077   2A           ADD     A,R2
   \   000078   12....       LCALL   ?Subroutine86 & 0xFFFF
    959          
    960              *pBuf++ = pSimpleDesc->EndPoint;
   \                     ??CrossCallReturnLabel_171:
   \   00007B   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00007E   12....       LCALL   ?Subroutine33 & 0xFFFF
    961              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_167:
   \   000081   A882         MOV     R0,DPL
   \   000083   A983         MOV     R1,DPH
   \   000085   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000088   12....       LCALL   ?Subroutine11 & 0xFFFF
    962              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_2:
   \   00008B   F0           MOVX    @DPTR,A
    963              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \   00008C   EC           MOV     A,R4
   \   00008D   2403         ADD     A,#0x3
   \   00008F   F8           MOV     R0,A
   \   000090   E4           CLR     A
   \   000091   3D           ADDC    A,R5
   \   000092   F9           MOV     R1,A
   \   000093   8882         MOV     DPL,R0
   \   000095   8983         MOV     DPH,R1
   \   000097   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00009A   12....       LCALL   ?Subroutine11 & 0xFFFF
    964              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
   \                     ??CrossCallReturnLabel_3:
   \   00009D   12....       LCALL   ?Subroutine33 & 0xFFFF
    965          
    966              *pBuf++ = (byte)(pSimpleDesc->AppDevVer & 0x0F);
   \                     ??CrossCallReturnLabel_168:
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   540F         ANL     A,#0xf
   \   0000A7   85..82       MOV     DPL,?V0
   \   0000AA   85..83       MOV     DPH,?V1
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   F0           MOVX    @DPTR,A
    967          
    968              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \   0000B7   85..82       MOV     DPL,?V6
   \   0000BA   85..83       MOV     DPH,?V7
   \   0000BD   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   F0           MOVX    @DPTR,A
   \   0000C9   E5..         MOV     A,?V0
   \   0000CB   240B         ADD     A,#0xb
   \   0000CD   F5..         MOV     ?V0,A
   \   0000CF   5002         JNC     ??ZDP_SimpleDescMsg_4
   \   0000D1   05..         INC     ?V1
    969              if ( pSimpleDesc->AppNumInClusters )
   \                     ??ZDP_SimpleDescMsg_4:
   \   0000D3   85..82       MOV     DPL,?V6
   \   0000D6   85..83       MOV     DPH,?V7
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   603A         JZ      ??ZDP_SimpleDescMsg_5
    970              {
    971                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   0000DC   7B00         MOV     R3,#0x0
   \   0000DE   EC           MOV     A,R4
   \   0000DF   2407         ADD     A,#0x7
   \   0000E1   F8           MOV     R0,A
   \   0000E2   E4           CLR     A
   \   0000E3   3D           ADDC    A,R5
   \   0000E4   F9           MOV     R1,A
   \   0000E5   88..         MOV     ?V8,R0
   \   0000E7   89..         MOV     ?V9,R1
   \   0000E9   801E         SJMP    ??ZDP_SimpleDescMsg_6
    972                {
    973                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??ZDP_SimpleDescMsg_7:
   \   0000EB   EB           MOV     A,R3
   \   0000EC   25E0         ADD     A,0xE0 /* A   */
   \   0000EE   F8           MOV     R0,A
   \   0000EF   E4           CLR     A
   \   0000F0   33           RLC     A
   \   0000F1   F9           MOV     R1,A
   \   0000F2   85..82       MOV     DPL,?V8
   \   0000F5   85..83       MOV     DPH,?V9
   \   0000F8   12....       LCALL   ?Subroutine43 & 0xFFFF
    974                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??CrossCallReturnLabel_58:
   \   0000FB   85..82       MOV     DPL,?V8
   \   0000FE   85..83       MOV     DPH,?V9
   \   000101   12....       LCALL   ?Subroutine16 & 0xFFFF
    975                }
   \                     ??CrossCallReturnLabel_180:
   \   000104   5002         JNC     ??ZDP_SimpleDescMsg_8
   \   000106   05..         INC     ?V1
   \                     ??ZDP_SimpleDescMsg_8:
   \   000108   0B           INC     R3
   \                     ??ZDP_SimpleDescMsg_6:
   \   000109   85..82       MOV     DPL,?V6
   \   00010C   85..83       MOV     DPH,?V7
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   F8           MOV     R0,A
   \   000111   EB           MOV     A,R3
   \   000112   C3           CLR     C
   \   000113   98           SUBB    A,R0
   \   000114   40D5         JC      ??ZDP_SimpleDescMsg_7
    976              }
    977          
    978              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_5:
   \   000116   85..82       MOV     DPL,?V4
   \   000119   85..83       MOV     DPH,?V5
   \   00011C   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00011F   A3           INC     DPTR
   \   000120   8582..       MOV     ?V0,DPL
   \   000123   8583..       MOV     ?V1,DPH
    979              if ( pSimpleDesc->AppNumOutClusters )
   \   000126   85..82       MOV     DPL,?V4
   \   000129   85..83       MOV     DPH,?V5
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   6038         JZ      ??ZDP_SimpleDescMsg_9
    980              {
    981                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   00012F   7B00         MOV     R3,#0x0
   \   000131   EC           MOV     A,R4
   \   000132   240A         ADD     A,#0xa
   \   000134   F8           MOV     R0,A
   \   000135   E4           CLR     A
   \   000136   3D           ADDC    A,R5
   \   000137   F9           MOV     R1,A
   \   000138   E8           MOV     A,R0
   \   000139   FC           MOV     R4,A
   \   00013A   E9           MOV     A,R1
   \   00013B   FD           MOV     R5,A
   \                     ??ZDP_SimpleDescMsg_10:
   \   00013C   85..82       MOV     DPL,?V4
   \   00013F   85..83       MOV     DPH,?V5
   \   000142   E0           MOVX    A,@DPTR
   \   000143   F8           MOV     R0,A
   \   000144   EB           MOV     A,R3
   \   000145   C3           CLR     C
   \   000146   98           SUBB    A,R0
   \   000147   501E         JNC     ??ZDP_SimpleDescMsg_9
    982                {
    983                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   000149   EB           MOV     A,R3
   \   00014A   25E0         ADD     A,0xE0 /* A   */
   \   00014C   F8           MOV     R0,A
   \   00014D   E4           CLR     A
   \   00014E   33           RLC     A
   \   00014F   F9           MOV     R1,A
   \   000150   8C82         MOV     DPL,R4
   \   000152   8D83         MOV     DPH,R5
   \   000154   12....       LCALL   ?Subroutine43 & 0xFFFF
    984                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \                     ??CrossCallReturnLabel_59:
   \   000157   8C82         MOV     DPL,R4
   \   000159   8D83         MOV     DPH,R5
   \   00015B   12....       LCALL   ?Subroutine16 & 0xFFFF
    985                }
   \                     ??CrossCallReturnLabel_181:
   \   00015E   5002         JNC     ??ZDP_SimpleDescMsg_11
   \   000160   05..         INC     ?V1
   \                     ??ZDP_SimpleDescMsg_11:
   \   000162   0B           INC     R3
   \   000163   80D7         SJMP    ??ZDP_SimpleDescMsg_10
    986              }
    987            }
    988          
    989            else
    990            {
    991              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_3:
   \   000165   E4           CLR     A
   \   000166   F0           MOVX    @DPTR,A
    992            }
    993          
    994            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
   \                     ??ZDP_SimpleDescMsg_9:
   \   000167                ; Setup parameters for call to function fillAndSend
   \   000167   75..04       MOV     ?V0,#0x4
   \   00016A   75..80       MOV     ?V1,#-0x80
   \   00016D   78..         MOV     R0,#?V0
   \   00016F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000172   EA           MOV     A,R2
   \   000173   F9           MOV     R1,A
   \   000174   E5..         MOV     A,?V2
   \   000176   2402         ADD     A,#0x2
   \   000178   FC           MOV     R4,A
   \   000179   E4           CLR     A
   \   00017A   35..         ADDC    A,?V3
   \   00017C   FD           MOV     R5,A
   \   00017D   E5..         MOV     A,?V2
   \   00017F   240F         ADD     A,#0xf
   \   000181   FA           MOV     R2,A
   \   000182   E4           CLR     A
   \   000183   35..         ADDC    A,?V3
   \   000185   FB           MOV     R3,A
   \   000186   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000189   7402         MOV     A,#0x2
   \   00018B   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_2:
   \   00018E                REQUIRE ?Subroutine5
   \   00018E                ; // Fall through to label ?Subroutine5
    995          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F0C         MOV     R7,#0xc
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000003   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine106_0
   \   000002                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000003                REQUIRE ??Subroutine107_0
   \   000003                ; // Fall through to label ??Subroutine107_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000004                REQUIRE ??Subroutine108_0
   \   000004                ; // Fall through to label ??Subroutine108_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E5..         MOV     A,?V0
   \   000003   2402         ADD     A,#0x2
   \   000005   F5..         MOV     ?V0,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   FF           MOV     R7,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   39           ADDC    A,R1
   \   000006   8F82         MOV     DPL,R7
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000008   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   A3           INC     DPTR
   \   000008   22           RET
    996          
    997          /*********************************************************************
    998           * @fn          ZDP_EPRsp
    999           *
   1000           * @brief       This builds and send an endpoint list. Used in
   1001           *              Active_EP_rsp and Match_Desc_Rsp
   1002           *              message.  This function sends unicast message to the
   1003           *              requesting device.
   1004           *
   1005           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
   1006           * @param       dstAddr - destination address
   1007           * @param       Status - message status (ZDP_SUCCESS or other)
   1008           * @param       nwkAddr - Device's short address that this response describes
   1009           * @param       Count - number of endpoint/interfaces in list
   1010           * @param       pEPIntfList - Array of Endpoint/Interfaces
   1011           * @param       SecurityEnable - Security Options
   1012           *
   1013           * @return      afStatus_t
   1014           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1015          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
   1016                                  byte Status, uint16 nwkAddr, byte Count,
   1017                                  uint8 *pEPList,
   1018                                  byte SecurityEnable )
   1019          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V2,R2
   \   000014   8B..         MOV     ?V3,R3
   \   000016   EC           MOV     A,R4
   \   000017   FE           MOV     R6,A
   \   000018   ED           MOV     A,R5
   \   000019   FF           MOV     R7,A
   1020            uint8 *pBuf = ZDP_TmpBuf;
   \   00001A   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00001D   12....       LCALL   ?Subroutine55 & 0xFFFF
   1021            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \                     ??CrossCallReturnLabel_84:
   \   000020   75..04       MOV     ?V0,#0x4
   1022            byte txOptions;
   1023          
   1024            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1025          
   1026            if ( MsgType == Match_Desc_rsp )
   \   000023   7406         MOV     A,#0x6
   \   000025   65..         XRL     A,?V2
   \   000027   7004         JNZ     ??ZDP_EPRsp_0
   \   000029   7480         MOV     A,#-0x80
   \   00002B   65..         XRL     A,?V3
   \                     ??ZDP_EPRsp_0:
   \   00002D   7005         JNZ     ??ZDP_EPRsp_1
   1027              txOptions = AF_MSG_ACK_REQUEST;
   \   00002F   75..10       MOV     ?V1,#0x10
   \   000032   8003         SJMP    ??ZDP_EPRsp_2
   1028            else
   1029              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   000034   75..00       MOV     ?V1,#0x0
   1030          
   1031              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   000037   7410         MOV     A,#0x10
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00003F   7411         MOV     A,#0x11
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   12....       LCALL   ?Subroutine17 & 0xFFFF
   1032            *pBuf++ = LO_UINT16( nwkAddr );
   1033            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_10:
   \   000047   7413         MOV     A,#0x13
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   FC           MOV     R4,A
   1034          
   1035            *pBuf++ = Count;   // Endpoint/Interface count
   \   00004E   8A82         MOV     DPL,R2
   \   000050   8B83         MOV     DPH,R3
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   F0           MOVX    @DPTR,A
   1036          
   1037            if ( Count )
   \   000056   6021         JZ      ??ZDP_EPRsp_3
   1038            {
   1039              len += Count;
   \   000058   7404         MOV     A,#0x4
   \   00005A   2C           ADD     A,R4
   \   00005B   F5..         MOV     ?V0,A
   1040              osal_memcpy( pBuf, pEPList, Count );
   \   00005D                ; Setup parameters for call to function osal_memcpy
   \   00005D   7414         MOV     A,#0x14
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   12....       LCALL   ?Subroutine50 & 0xFFFF
   1041            }
   \                     ??CrossCallReturnLabel_74:
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000068   7D00         MOV     R5,#0x0
   \   00006A   EA           MOV     A,R2
   \   00006B   2404         ADD     A,#0x4
   \   00006D   FA           MOV     R2,A
   \   00006E   5001         JNC     ??ZDP_EPRsp_4
   \   000070   0B           INC     R3
   \                     ??ZDP_EPRsp_4:
   \   000071   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000074   7403         MOV     A,#0x3
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
   1042          
   1043            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   000079   E5..         MOV     A,?V1
   \   00007B   90....       MOV     DPTR,#ZDP_TxOptions
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F                ; Setup parameters for call to function fillAndSend
   \   00007F   78..         MOV     R0,#?V2
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000084   A9..         MOV     R1,?V0
   \   000086   EE           MOV     A,R6
   \   000087   FC           MOV     R4,A
   \   000088   EF           MOV     A,R7
   \   000089   FD           MOV     R5,A
   \   00008A   7402         MOV     A,#0x2
   \   00008C   12....       LCALL   ?XSTACK_DISP101_8
   \   00008F   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000092   7402         MOV     A,#0x2
   \   000094   12....       LCALL   ?DEALLOC_XSTACK8
   \   000097   E9           MOV     A,R1
   \   000098   F9           MOV     R1,A
   \   000099   90....       MOV     DPTR,#ZDP_TxOptions
   \   00009C   E4           CLR     A
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   04           INC     A
   \   00009F   02....       LJMP    ?Subroutine3 & 0xFFFF
   1044          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000003   FA           MOV     R2,A
   \   000004   E9           MOV     A,R1
   \   000005   FB           MOV     R3,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000003   A3           INC     DPTR
   \   000004   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V5,A
   \   000007   75..00       MOV     ?V6,#0x0
   \   00000A   78..         MOV     R0,#?V4
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E9           MOV     A,R1
   \   000002   8A82         MOV     DPL,R2
   \   000004   8B83         MOV     DPH,R3
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET
   1045          
   1046          /*********************************************************************
   1047           * @fn          ZDP_UserDescRsp
   1048           *
   1049           * @brief       Build and send the User Decriptor Response.
   1050           *
   1051           *
   1052           * @param       dstAddr - destination address
   1053           * @param       nwkAddrOfInterest -
   1054           * @param       userDesc -
   1055           * @param       SecurityEnable - Security Options
   1056           *
   1057           * @return      ZStatus_t
   1058           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1059          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_UserDescRsp:
   1060                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
   1061                          byte SecurityEnable )
   1062          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   12....       LCALL   ?Subroutine54 & 0xFFFF
   1063            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_83:
   \   000015   7413         MOV     A,#0x13
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   00001D   88..         MOV     ?V8,R0
   \   00001F   89..         MOV     ?V9,R1
   1064            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
   1065          
   1066            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1067          
   1068            len += userDesc->len;
   \   000021   8882         MOV     DPL,R0
   \   000023   F583         MOV     DPH,A
   \   000025   E0           MOVX    A,@DPTR
   \   000026   2404         ADD     A,#0x4
   \   000028   F5..         MOV     ?V2,A
   1069          
   1070            *pBuf++ = ZSUCCESS;
   \   00002A   85..82       MOV     DPL,?V0
   \   00002D   85..83       MOV     DPH,?V1
   \   000030   E4           CLR     A
   \   000031   F0           MOVX    @DPTR,A
   1071          
   1072            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
   \   000032   EC           MOV     A,R4
   \   000033   A3           INC     DPTR
   \   000034   F0           MOVX    @DPTR,A
   1073            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
   \   000035   ED           MOV     A,R5
   \   000036   85..82       MOV     DPL,?V0
   \   000039   85..83       MOV     DPH,?V1
   \   00003C   12....       LCALL   ?Subroutine34 & 0xFFFF
   1074          
   1075            *pBuf++ = userDesc->len;
   \                     ??CrossCallReturnLabel_160:
   \   00003F   85..82       MOV     DPL,?V0
   \   000042   85..83       MOV     DPH,?V1
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   12....       LCALL   ?Subroutine10 & 0xFFFF
   1076            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
   \                     ??CrossCallReturnLabel_1:
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00004E   85..82       MOV     DPL,?V8
   \   000051   85..83       MOV     DPH,?V9
   \   000054   E0           MOVX    A,@DPTR
   \   000055   FC           MOV     R4,A
   \   000056   7D00         MOV     R5,#0x0
   \   000058   E5..         MOV     A,?V0
   \   00005A   2404         ADD     A,#0x4
   \   00005C   FA           MOV     R2,A
   \   00005D   E4           CLR     A
   \   00005E   35..         ADDC    A,?V1
   \   000060   FB           MOV     R3,A
   \   000061   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000064   7403         MOV     A,#0x3
   \   000066   12....       LCALL   ?DEALLOC_XSTACK8
   1077          
   1078            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
   \   000069                ; Setup parameters for call to function fillAndSend
   \   000069   75..11       MOV     ?V0,#0x11
   \   00006C   75..80       MOV     ?V1,#-0x80
   \   00006F   78..         MOV     R0,#?V0
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000074   A9..         MOV     R1,?V2
   \   000076   EE           MOV     A,R6
   \   000077   FC           MOV     R4,A
   \   000078   EF           MOV     A,R7
   \   000079   FD           MOV     R5,A
   \   00007A   7402         MOV     A,#0x2
   \   00007C   12....       LCALL   ?XSTACK_DISP101_8
   \   00007F   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000082   7402         MOV     A,#0x2
   \   000084   12....       LCALL   ?DEALLOC_XSTACK8
   \   000087   02....       LJMP    ?Subroutine6 & 0xFFFF
   1079          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7401         MOV     A,#0x1
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine110_0
   \   000005                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   7F0A         MOV     R7,#0xa
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1080          
   1081          /*********************************************************************
   1082           * @fn          ZDP_ServerDiscRsp
   1083           *
   1084           * @brief       Build and send the Server_Discovery_rsp response.
   1085           *
   1086           * @param       transID - Transaction sequence number of request.
   1087           * @param       dstAddr - Network Destination Address.
   1088           * @param       status - Status of response to request.
   1089           * @param       aoi - Network Address of Interest of request.
   1090           * @param       serverMask - Bit map of service(s) being sought.
   1091           * @param       SecurityEnable - Security Options
   1092           *
   1093           * @return      ZStatus_t
   1094           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1095          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
   \                     ZDP_ServerDiscRsp:
   1096                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
   1097          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EC           MOV     A,R4
   \   000013   FE           MOV     R6,A
   1098            const byte len = 1  + 2;  // status + aoi + mask.
   1099            uint8 *pBuf = ZDP_TmpBuf;
   \   000014   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000017   12....       LCALL   ?Subroutine56 & 0xFFFF
   1100            ZStatus_t stat;
   1101          
   1102            // Intentionally unreferenced parameters
   1103            (void)aoi;
   1104            (void)SecurityEnable;
   1105          
   1106            *pBuf++ = status;
   \                     ??CrossCallReturnLabel_86:
   \   00001A   EE           MOV     A,R6
   \   00001B   8C82         MOV     DPL,R4
   \   00001D   8D83         MOV     DPH,R5
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   740D         MOV     A,#0xd
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   12....       LCALL   ?Subroutine52 & 0xFFFF
   1107          
   1108            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_78:
   \   000028   A3           INC     DPTR
   \   000029   F0           MOVX    @DPTR,A
   1109            *pBuf++ = HI_UINT16( serverMask );
   \   00002A   E9           MOV     A,R1
   \   00002B   8C82         MOV     DPL,R4
   \   00002D   8D83         MOV     DPH,R5
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   F0           MOVX    @DPTR,A
   1110          
   1111            ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   000032   90....       MOV     DPTR,#ZDP_TxOptions
   \   000035   7410         MOV     A,#0x10
   \   000037   F0           MOVX    @DPTR,A
   1112            stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
   \   000038                ; Setup parameters for call to function fillAndSend
   \   000038   75..15       MOV     ?V0,#0x15
   \   00003B   75..80       MOV     ?V1,#-0x80
   \   00003E   78..         MOV     R0,#?V0
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   7903         MOV     R1,#0x3
   \   000045   EA           MOV     A,R2
   \   000046   FC           MOV     R4,A
   \   000047   EB           MOV     A,R3
   \   000048   FD           MOV     R5,A
   \   000049   7402         MOV     A,#0x2
   \   00004B   12....       LCALL   ?XSTACK_DISP101_8
   \   00004E   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000051   7402         MOV     A,#0x2
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
   \   000056   E9           MOV     A,R1
   \   000057   F9           MOV     R1,A
   1113            ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000058   90....       MOV     DPTR,#ZDP_TxOptions
   \   00005B   E4           CLR     A
   \   00005C   F0           MOVX    @DPTR,A
   1114          
   1115            return ( stat );
   \   00005D   04           INC     A
   \   00005E   02....       LJMP    ??Subroutine100_0 & 0xFFFF
   1116          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000003   FC           MOV     R4,A
   \   000004   E9           MOV     A,R1
   \   000005   FD           MOV     R5,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000003   8C82         MOV     DPL,R4
   \   000005   8D83         MOV     DPH,R5
   \   000007   22           RET
   1117          
   1118          /*********************************************************************
   1119           * @fn          ZDP_GenericRsp
   1120           *
   1121           * @brief       Sends a response message with only the parameter status
   1122           *              byte and the addr of interest for data.
   1123           *              This function sends unicast message to the
   1124           *              requesting device.
   1125           *
   1126           * @param       dstAddr - destination address
   1127           * @param       status  - generic status for response
   1128           * @param       aoi     - address of interest
   1129           * @param       dstAddr - destination address
   1130           * @param       rspId   - response cluster ID
   1131           * @param       SecurityEnable - Security Options
   1132           *
   1133           * @return      afStatus_t
   1134           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1135          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
   1136                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
   1137          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   1138            uint8 len;
   1139          
   1140            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1141          
   1142            ZDP_TmpBuf[0] = status;
   \   000012   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000015   EC           MOV     A,R4
   \   000016   F0           MOVX    @DPTR,A
   \   000017   740A         MOV     A,#0xa
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   1143            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \                     ??CrossCallReturnLabel_243:
   \   00001F   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FC           MOV     R4,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F583         MOV     DPH,A
   \   000028   8C82         MOV     DPL,R4
   \   00002A   A3           INC     DPTR
   \   00002B   E8           MOV     A,R0
   \   00002C   12....       LCALL   ?Subroutine13 & 0xFFFF
   1144            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   1145          
   1146            // Length byte
   1147            ZDP_TmpBuf[3] = 0;
   \                     ??CrossCallReturnLabel_7:
   \   00002F   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E4           CLR     A
   \   000036   F0           MOVX    @DPTR,A
   1148            len = 4;
   1149          
   1150            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   740C         MOV     A,#0xc
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00003F   7904         MOV     R1,#0x4
   \   000041   EA           MOV     A,R2
   \   000042   FC           MOV     R4,A
   \   000043   EB           MOV     A,R3
   \   000044   FD           MOV     R5,A
   \   000045   7402         MOV     A,#0x2
   \   000047   12....       LCALL   ?XSTACK_DISP101_8
   \   00004A   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00004D   7402         MOV     A,#0x2
   \   00004F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000052   7401         MOV     A,#0x1
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   \   000057                REQUIRE ?Subroutine7
   \   000057                ; // Fall through to label ?Subroutine7
   1151          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1152          
   1153          /*********************************************************************
   1154           * Binding
   1155           */
   1156          /*********************************************************************
   1157           * @fn          ZDP_EndDeviceBindReq
   1158           *
   1159           * @brief       This builds and sends a End_Device_Bind_req message.
   1160           *              This function sends a unicast message.
   1161           *
   1162           * @param       dstAddr - destination address
   1163           * @param       LocalCoordinator - short address of local coordinator
   1164           * @param       epIntf - Endpoint/Interface of Simple Desc
   1165           * @param       ProfileID - Profile ID
   1166           *
   1167           *   The Input cluster list is the opposite of what you would think.
   1168           *   This is the output cluster list of this device
   1169           * @param       NumInClusters - number of input clusters
   1170           * @param       InClusterList - input cluster ID list
   1171           *
   1172           *   The Output cluster list is the opposite of what you would think.
   1173           *   This is the input cluster list of this device
   1174           * @param       NumOutClusters - number of output clusters
   1175           * @param       OutClusterList - output cluster ID list
   1176           *
   1177           * @param       SecurityEnable - Security Options
   1178           *
   1179           * @return      afStatus_t
   1180           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1181          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
   1182                                           uint16 LocalCoordinator,
   1183                                           byte endPoint,
   1184                                           uint16 ProfileID,
   1185                                           byte NumInClusters, cId_t *InClusterList,
   1186                                           byte NumOutClusters, cId_t *OutClusterList,
   1187                                           byte SecurityEnable )
   1188          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V6,R2
   \   000007   8B..         MOV     ?V7,R3
   \   000009   8C..         MOV     ?V4,R4
   \   00000B   8D..         MOV     ?V5,R5
   \   00000D   89..         MOV     ?V3,R1
   1189            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000012   7414         MOV     A,#0x14
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V2,A
   \   00001A   7417         MOV     A,#0x17
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FF           MOV     R7,A
   1190            uint8 i, len;
   1191            uint8 *ieeeAddr;
   1192          
   1193            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1194          
   1195            // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
   1196            len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   1197            len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
   \   000021   E5..         MOV     A,?V2
   \   000023   2F           ADD     A,R7
   \   000024   C3           CLR     C
   \   000025   33           RLC     A
   \   000026   240F         ADD     A,#0xf
   \   000028   FE           MOV     R6,A
   1198          
   1199            if ( len >= ZDP_BUF_SZ-1 )
   \   000029   C3           CLR     C
   \   00002A   944F         SUBB    A,#0x4f
   \   00002C   4005         JC      ??ZDP_EndDeviceBindReq_0
   1200            {
   1201              return afStatus_MEM_FAIL;
   \   00002E   7910         MOV     R1,#0x10
   \   000030   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1202            }
   1203          
   1204            if ( LocalCoordinator != NLME_GetShortAddr() )
   \                     ??ZDP_EndDeviceBindReq_0:
   \   000033                ; Setup parameters for call to function NLME_GetShortAddr
   \   000033   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000036   EA           MOV     A,R2
   \   000037   65..         XRL     A,?V4
   \   000039   7003         JNZ     ??ZDP_EndDeviceBindReq_2
   \   00003B   EB           MOV     A,R3
   \   00003C   65..         XRL     A,?V5
   \                     ??ZDP_EndDeviceBindReq_2:
   \   00003E   6005         JZ      ??ZDP_EndDeviceBindReq_3
   1205            {
   1206              return afStatus_INVALID_PARAMETER;
   \   000040   7902         MOV     R1,#0x2
   \   000042   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1207            }
   1208          
   1209            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_3:
   \   000045   85..82       MOV     DPL,?V0
   \   000048   85..83       MOV     DPH,?V1
   \   00004B   E5..         MOV     A,?V4
   \   00004D   F0           MOVX    @DPTR,A
   1210            *pBuf++ = HI_UINT16( LocalCoordinator );
   \   00004E   E5..         MOV     A,?V5
   \   000050   A3           INC     DPTR
   \   000051   F0           MOVX    @DPTR,A
   1211          
   1212            ieeeAddr = NLME_GetExtAddr();
   \   000052                ; Setup parameters for call to function NLME_GetExtAddr
   \   000052   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000055   8A..         MOV     ?V4,R2
   \   000057   8B..         MOV     ?V5,R3
   \   000059   AC..         MOV     R4,?V4
   \   00005B   AD..         MOV     R5,?V5
   1213            pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \   00005D                ; Setup parameters for call to function sAddrExtCpy
   \   00005D   E5..         MOV     A,?V0
   \   00005F   2402         ADD     A,#0x2
   \   000061   FA           MOV     R2,A
   \   000062   E4           CLR     A
   \   000063   35..         ADDC    A,?V1
   \   000065   FB           MOV     R3,A
   \   000066   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1214          
   1215            *pBuf++ = endPoint;
   \   000069   8A82         MOV     DPL,R2
   \   00006B   8B83         MOV     DPH,R3
   \   00006D   E5..         MOV     A,?V3
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   7412         MOV     A,#0x12
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   12....       LCALL   ?Subroutine17 & 0xFFFF
   1216          
   1217            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   1218            *pBuf++ = HI_UINT16( ProfileID );
   1219          
   1220            *pBuf++ = NumInClusters; // Input cluster list
   \                     ??CrossCallReturnLabel_11:
   \   000078   8A82         MOV     DPL,R2
   \   00007A   8B83         MOV     DPH,R3
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   E5..         MOV     A,?V2
   \   000081   F0           MOVX    @DPTR,A
   \   000082   EA           MOV     A,R2
   \   000083   2404         ADD     A,#0x4
   \   000085   F5..         MOV     ?V0,A
   \   000087   E4           CLR     A
   \   000088   3B           ADDC    A,R3
   \   000089   F5..         MOV     ?V1,A
   1221            for ( i = 0; i < NumInClusters; ++i )
   \   00008B   75..00       MOV     ?V4,#0x0
   \   00008E   7415         MOV     A,#0x15
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000096   8021         SJMP    ??ZDP_EndDeviceBindReq_4
   1222            {
   1223              *pBuf++ = LO_UINT16(InClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_5:
   \   000098   AA..         MOV     R2,?V4
   \   00009A   EA           MOV     A,R2
   \   00009B   2A           ADD     A,R2
   \   00009C   FA           MOV     R2,A
   \   00009D   E4           CLR     A
   \   00009E   33           RLC     A
   \   00009F   FB           MOV     R3,A
   \   0000A0   EC           MOV     A,R4
   \   0000A1   2A           ADD     A,R2
   \   0000A2   FA           MOV     R2,A
   \   0000A3   ED           MOV     A,R5
   \   0000A4   3B           ADDC    A,R3
   \   0000A5   FB           MOV     R3,A
   \   0000A6   8A82         MOV     DPL,R2
   \   0000A8   8B83         MOV     DPH,R3
   \   0000AA   12....       LCALL   ?Subroutine93 & 0xFFFF
   1224              *pBuf++ = HI_UINT16(InClusterList[i]);
   1225            }
   \                     ??CrossCallReturnLabel_149:
   \   0000AD   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0000B0   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   0000B3   5002         JNC     ??ZDP_EndDeviceBindReq_6
   \   0000B5   05..         INC     ?V1
   \                     ??ZDP_EndDeviceBindReq_6:
   \   0000B7   05..         INC     ?V4
   \                     ??ZDP_EndDeviceBindReq_4:
   \   0000B9   85..82       MOV     DPL,?V0
   \   0000BC   85..83       MOV     DPH,?V1
   \   0000BF   A3           INC     DPTR
   \   0000C0   A882         MOV     R0,DPL
   \   0000C2   A983         MOV     R1,DPH
   \   0000C4   E5..         MOV     A,?V4
   \   0000C6   C3           CLR     C
   \   0000C7   95..         SUBB    A,?V2
   \   0000C9   40CD         JC      ??ZDP_EndDeviceBindReq_5
   1226          
   1227            *pBuf++ = NumOutClusters; // Output cluster list
   \   0000CB   EF           MOV     A,R7
   \   0000CC   85..82       MOV     DPL,?V0
   \   0000CF   85..83       MOV     DPH,?V1
   \   0000D2   F0           MOVX    @DPTR,A
   \   0000D3   88..         MOV     ?V0,R0
   \   0000D5   89..         MOV     ?V1,R1
   1228            for ( i = 0; i < NumOutClusters; ++i )
   \   0000D7   75..00       MOV     ?V4,#0x0
   \   0000DA   7418         MOV     A,#0x18
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0000E2   8022         SJMP    ??ZDP_EndDeviceBindReq_7
   1229            {
   1230              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_8:
   \   0000E4   A8..         MOV     R0,?V4
   \   0000E6   E8           MOV     A,R0
   \   0000E7   28           ADD     A,R0
   \   0000E8   F8           MOV     R0,A
   \   0000E9   E4           CLR     A
   \   0000EA   33           RLC     A
   \   0000EB   F9           MOV     R1,A
   \   0000EC   EA           MOV     A,R2
   \   0000ED   28           ADD     A,R0
   \   0000EE   F8           MOV     R0,A
   \   0000EF   EB           MOV     A,R3
   \   0000F0   39           ADDC    A,R1
   \   0000F1   F9           MOV     R1,A
   \   0000F2   8882         MOV     DPL,R0
   \   0000F4   8983         MOV     DPH,R1
   \   0000F6   12....       LCALL   ?Subroutine64 & 0xFFFF
   1231              *pBuf++ = HI_UINT16(OutClusterList[i]);
   \                     ??CrossCallReturnLabel_105:
   \   0000F9   8882         MOV     DPL,R0
   \   0000FB   8983         MOV     DPH,R1
   \   0000FD   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   1232            }
   \                     ??CrossCallReturnLabel_179:
   \   000100   5002         JNC     ??ZDP_EndDeviceBindReq_9
   \   000102   05..         INC     ?V1
   \                     ??ZDP_EndDeviceBindReq_9:
   \   000104   05..         INC     ?V4
   \                     ??ZDP_EndDeviceBindReq_7:
   \   000106   E5..         MOV     A,?V4
   \   000108   C3           CLR     C
   \   000109   9F           SUBB    A,R7
   \   00010A   40D8         JC      ??ZDP_EndDeviceBindReq_8
   1233          
   1234            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \   00010C                ; Setup parameters for call to function fillAndSend
   \   00010C   75..20       MOV     ?V0,#0x20
   \   00010F   75..00       MOV     ?V1,#0x0
   \   000112   78..         MOV     R0,#?V0
   \   000114   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000117   EE           MOV     A,R6
   \   000118   F9           MOV     R1,A
   \   000119   AC..         MOV     R4,?V6
   \   00011B   AD..         MOV     R5,?V7
   \   00011D   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00011F   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000121   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000124   7402         MOV     A,#0x2
   \   000126   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_1:
   \   000129   80..         SJMP    ??Subroutine110_0
   1235          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000008   22           RET
   1236          
   1237          /*********************************************************************
   1238           * @fn          ZDP_BindUnbindReq
   1239           *
   1240           * @brief       This builds and send a Bind_req or Unbind_req message
   1241           *              Depending on the ClusterID. This function
   1242           *              sends a unicast message to the local coordinator.
   1243           *
   1244           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1245           * @param       dstAddr - destination address of the message
   1246           * @param       SourceAddr - source 64 bit address of the binding
   1247           * @param       SrcEPIntf - Source endpoint/interface
   1248           * @param       ClusterID - Binding cluster ID
   1249           * @param       DestinationAddr - destination 64 bit addr of binding
   1250           * @param       DstEPIntf - destination endpoint/interface
   1251           * @param       SecurityEnable - Security Options
   1252           *
   1253           * @return      afStatus_t
   1254           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1255          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   \                     ZDP_BindUnbindReq:
   1256                                        uint8 *SourceAddr, byte SrcEndPoint,
   1257                                        cId_t ClusterID,
   1258                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1259                                        byte SecurityEnable )
   1260          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V6,R2
   \   000007   8B..         MOV     ?V7,R3
   \   000009   8C..         MOV     ?V4,R4
   \   00000B   8D..         MOV     ?V5,R5
   \   00000D   89..         MOV     ?V3,R1
   1261            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   1262            byte len;
   1263          
   1264            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1265          
   1266            // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1267            len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   \                     ??CrossCallReturnLabel_205:
   \   000012   75..0C       MOV     ?V2,#0xc
   \   000015   7416         MOV     A,#0x16
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   1268            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_217:
   \   00001D   EE           MOV     A,R6
   \   00001E   2408         ADD     A,#0x8
   \   000020   F5..         MOV     ?V0,A
   \   000022   E4           CLR     A
   \   000023   3F           ADDC    A,R7
   \   000024   F5..         MOV     ?V1,A
   \   000026   85..82       MOV     DPL,?V0
   \   000029   F583         MOV     DPH,A
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F8           MOV     R0,A
   \   00002D   7403         MOV     A,#0x3
   \   00002F   68           XRL     A,R0
   \   000030   7005         JNZ     ??ZDP_BindUnbindReq_0
   1269              len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   \   000032   75..15       MOV     ?V2,#0x15
   \   000035   8008         SJMP    ??ZDP_BindUnbindReq_1
   1270            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_0:
   \   000037   7401         MOV     A,#0x1
   \   000039   68           XRL     A,R0
   \   00003A   7003         JNZ     ??ZDP_BindUnbindReq_1
   1271              len += sizeof ( uint16 );
   \   00003C   75..0E       MOV     ?V2,#0xe
   1272          
   1273            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   \                     ??ZDP_BindUnbindReq_1:
   \   00003F                ; Setup parameters for call to function sAddrExtCpy
   \   00003F   7412         MOV     A,#0x12
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000047   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1274            *pBuf++ = SrcEndPoint;
   \   00004A   8A82         MOV     DPL,R2
   \   00004C   8B83         MOV     DPH,R3
   \   00004E   E5..         MOV     A,?V3
   \   000050   F0           MOVX    @DPTR,A
   \   000051   7414         MOV     A,#0x14
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   12....       LCALL   ?Subroutine17 & 0xFFFF
   1275          
   1276            *pBuf++ = LO_UINT16( ClusterID );
   1277          
   1278            *pBuf++ = HI_UINT16( ClusterID );
   1279            *pBuf++ = destinationAddr->addrMode;
   \                     ??CrossCallReturnLabel_12:
   \   000059   85..82       MOV     DPL,?V0
   \   00005C   85..83       MOV     DPH,?V1
   \   00005F   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000062   5001         JNC     ??ZDP_BindUnbindReq_2
   \   000064   0B           INC     R3
   1280            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??ZDP_BindUnbindReq_2:
   \   000065   85..82       MOV     DPL,?V0
   \   000068   85..83       MOV     DPH,?V1
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F8           MOV     R0,A
   \   00006D   7403         MOV     A,#0x3
   \   00006F   68           XRL     A,R0
   \   000070   7017         JNZ     ??ZDP_BindUnbindReq_3
   1281            {
   1282              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   1283              *pBuf = DstEndPoint;
   \   000072   7418         MOV     A,#0x18
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   E0           MOVX    A,@DPTR
   \   000078   C0E0         PUSH    A
   \   00007A                ; Setup parameters for call to function sAddrExtCpy
   \   00007A   EE           MOV     A,R6
   \   00007B   FC           MOV     R4,A
   \   00007C   EF           MOV     A,R7
   \   00007D   FD           MOV     R5,A
   \   00007E   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000081   8A82         MOV     DPL,R2
   \   000083   8B83         MOV     DPH,R3
   \   000085   D0E0         POP     A
   \   000087   8014         SJMP    ??ZDP_BindUnbindReq_4
   1284            }
   1285            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_3:
   \   000089   7401         MOV     A,#0x1
   \   00008B   68           XRL     A,R0
   \   00008C   7010         JNZ     ??ZDP_BindUnbindReq_5
   1286            {
   1287              *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   \   00008E   8E82         MOV     DPL,R6
   \   000090   8F83         MOV     DPH,R7
   \   000092   12....       LCALL   ?Subroutine61 & 0xFFFF
   1288              *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   \                     ??CrossCallReturnLabel_98:
   \   000095   8E82         MOV     DPL,R6
   \   000097   8F83         MOV     DPH,R7
   \   000099   12....       LCALL   ?Subroutine66 & 0xFFFF
   1289            }
   \                     ??CrossCallReturnLabel_190:
   \   00009C   A3           INC     DPTR
   \                     ??ZDP_BindUnbindReq_4:
   \   00009D   F0           MOVX    @DPTR,A
   1290          
   1291            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   \                     ??ZDP_BindUnbindReq_5:
   \   00009E   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000A1   7410         MOV     A,#0x10
   \   0000A3   F0           MOVX    @DPTR,A
   \   0000A4                ; Setup parameters for call to function fillAndSend
   \   0000A4   78..         MOV     R0,#?V6
   \   0000A6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A9   A9..         MOV     R1,?V2
   \   0000AB   AC..         MOV     R4,?V4
   \   0000AD   AD..         MOV     R5,?V5
   \   0000AF   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000B1   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000B3   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000B6   7402         MOV     A,#0x2
   \   0000B8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BB   E9           MOV     A,R1
   \   0000BC   F9           MOV     R1,A
   \   0000BD   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000C0   E4           CLR     A
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2   02....       LJMP    ??Subroutine110_0 & 0xFFFF
   1292          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine111_0
   \   000001                ; // Fall through to label ??Subroutine111_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000003                REQUIRE ??Subroutine118_0
   \   000003                ; // Fall through to label ??Subroutine118_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine118_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EA           MOV     A,R2
   \   000002   2404         ADD     A,#0x4
   \   000004   FA           MOV     R2,A
   \   000005   22           RET
   1293          
   1294          /*********************************************************************
   1295           * Network Management
   1296           */
   1297          
   1298          /*********************************************************************
   1299           * @fn          ZDP_MgmtNwkDiscReq
   1300           *
   1301           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1302           *              function sends a unicast message.
   1303           *
   1304           * @param       dstAddr - destination address of the message
   1305           * @param       ScanChannels - 32 bit address bit map
   1306           * @param       StartIndex - Starting index within the reporting network
   1307           *                           list
   1308           * @param       SecurityEnable - Security Options
   1309           *
   1310           * @return      afStatus_t
   1311           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine95_0:
   \   000000   EE           MOV     A,R6
   \   000001   FC           MOV     R4,A
   \   000002   EF           MOV     A,R7
   \   000003   FD           MOV     R5,A
   \   000004   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000006   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000008   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00000B   7402         MOV     A,#0x2
   \   00000D                REQUIRE ??Subroutine96_0
   \   00000D                ; // Fall through to label ??Subroutine96_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1312          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscReq:
   1313                                         uint32 ScanChannels,
   1314                                         byte ScanDuration,
   1315                                         byte StartIndex,
   1316                                         byte SecurityEnable )
   1317          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
   \   00000B   8C..         MOV     ?V1,R4
   1318            uint8 *pBuf = ZDP_TmpBuf;
   1319            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   1320          
   1321            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1322          
   1323            pBuf = osal_buffer_uint32( pBuf, ScanChannels );
   \   00000D                ; Setup parameters for call to function osal_buffer_uint32
   \   00000D   740C         MOV     A,#0xc
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000015   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000018   12....       LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00001B   7404         MOV     A,#0x4
   \   00001D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   1324          
   1325            *pBuf++ = ScanDuration;
   \   000024   E5..         MOV     A,?V0
   \   000026   F0           MOVX    @DPTR,A
   1326            *pBuf = StartIndex;
   \   000027   A3           INC     DPTR
   \   000028   E5..         MOV     A,?V1
   \   00002A   F0           MOVX    @DPTR,A
   1327          
   1328            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   \   00002B                ; Setup parameters for call to function fillAndSend
   \   00002B   75..30       MOV     ?V2,#0x30
   \   00002E   75..00       MOV     ?V3,#0x0
   \   000031   78..         MOV     R0,#?V2
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   7906         MOV     R1,#0x6
   \   000038   02....       LJMP    ??Subroutine95_0 & 0xFFFF
   1329          }
   1330          
   1331          /*********************************************************************
   1332           * @fn          ZDP_MgmtDirectJoinReq
   1333           *
   1334           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1335           *              function sends a unicast message.
   1336           *
   1337           * @param       dstAddr - destination address of the message
   1338           * @param       deviceAddr - 64 bit IEEE Address
   1339           * @param       SecurityEnable - Security Options
   1340           *
   1341           * @return      afStatus_t
   1342           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   75..00       MOV     ?V3,#0x0
   \   000003   78..         MOV     R0,#?V2
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000008   7909         MOV     R1,#0x9
   \   00000A                REQUIRE ??Subroutine95_0
   \   00000A                ; // Fall through to label ??Subroutine95_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   89..         MOV     ?V0,R1
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006                REQUIRE ??Subroutine112_0
   \   000006                ; // Fall through to label ??Subroutine112_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1343          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtDirectJoinReq:
   1344                                         uint8 *deviceAddr,
   1345                                         byte capInfo,
   1346                                         byte SecurityEnable )
   1347          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine40 & 0xFFFF
   1348            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1349          
   1350            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   \                     ??CrossCallReturnLabel_197:
   \   000008   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1351            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   \   00000B   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   00000E   C8           XCH     A,R0
   \   00000F   2408         ADD     A,#0x8
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   38           ADDC    A,R0
   \   000015   F583         MOV     DPH,A
   \   000017   E5..         MOV     A,?V0
   \   000019   F0           MOVX    @DPTR,A
   1352          
   1353            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   \   00001A                ; Setup parameters for call to function fillAndSend
   \   00001A   75..35       MOV     ?V2,#0x35
   \   00001D   02....       LJMP    ?Subroutine1 & 0xFFFF
   1354          }
   1355          
   1356          /*********************************************************************
   1357           * @fn          ZDP_MgmtPermitJoinReq
   1358           *
   1359           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1360           *
   1361           * @param       dstAddr - destination address of the message
   1362           * @param       duration - Permit duration
   1363           * @param       TcSignificance - Trust Center Significance
   1364           *
   1365           * @return      afStatus_t
   1366           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1367          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   \                     ZDP_MgmtPermitJoinReq:
   1368                                            byte TcSignificance, byte SecurityEnable )
   1369          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1370            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1371          
   1372            // Build buffer
   1373            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   \   00000E   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000011   E9           MOV     A,R1
   \   000012   12....       LCALL   ?Subroutine23 & 0xFFFF
   1374            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   \                     ??CrossCallReturnLabel_25:
   \   000015   EC           MOV     A,R4
   \   000016   F0           MOVX    @DPTR,A
   1375          
   1376            // Check of this is a broadcast message
   1377            if ( (dstAddr) && ((dstAddr->addrMode == Addr16Bit) || (dstAddr->addrMode == AddrBroadcast))
   1378                && ((dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL)
   1379                    || (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR)
   1380                    || (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVRXON)) )
   \   000017   EE           MOV     A,R6
   \   000018   4F           ORL     A,R7
   \   000019   6070         JZ      ??ZDP_MgmtPermitJoinReq_0
   \   00001B   8E82         MOV     DPL,R6
   \   00001D   8F83         MOV     DPH,R7
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   7402         MOV     A,#0x2
   \   00002B   68           XRL     A,R0
   \   00002C   6005         JZ      ??ZDP_MgmtPermitJoinReq_1
   \   00002E   740F         MOV     A,#0xf
   \   000030   68           XRL     A,R0
   \   000031   7058         JNZ     ??ZDP_MgmtPermitJoinReq_0
   \                     ??ZDP_MgmtPermitJoinReq_1:
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   00003A   74FF         MOV     A,#-0x1
   \   00003C   68           XRL     A,R0
   \   00003D   7003         JNZ     ??ZDP_MgmtPermitJoinReq_2
   \   00003F   74FF         MOV     A,#-0x1
   \   000041   69           XRL     A,R1
   \                     ??ZDP_MgmtPermitJoinReq_2:
   \   000042   6014         JZ      ??ZDP_MgmtPermitJoinReq_3
   \   000044   74FC         MOV     A,#-0x4
   \   000046   68           XRL     A,R0
   \   000047   7003         JNZ     ??ZDP_MgmtPermitJoinReq_4
   \   000049   74FF         MOV     A,#-0x1
   \   00004B   69           XRL     A,R1
   \                     ??ZDP_MgmtPermitJoinReq_4:
   \   00004C   600A         JZ      ??ZDP_MgmtPermitJoinReq_3
   \   00004E   74FD         MOV     A,#-0x3
   \   000050   68           XRL     A,R0
   \   000051   7003         JNZ     ??ZDP_MgmtPermitJoinReq_5
   \   000053   74FF         MOV     A,#-0x1
   \   000055   69           XRL     A,R1
   \                     ??ZDP_MgmtPermitJoinReq_5:
   \   000056   7033         JNZ     ??ZDP_MgmtPermitJoinReq_0
   1381            {
   1382              // Send this to our self as well as broadcast to network
   1383              zAddrType_t tmpAddr;
   1384          
   1385              tmpAddr.addrMode = Addr16Bit;
   \                     ??ZDP_MgmtPermitJoinReq_3:
   \   000058   7408         MOV     A,#0x8
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   7402         MOV     A,#0x2
   \   00005F   F0           MOVX    @DPTR,A
   1386              tmpAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000060                ; Setup parameters for call to function NLME_GetShortAddr
   \   000060   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000063   85..82       MOV     DPL,?XSP + 0
   \   000066   85..83       MOV     DPH,?XSP + 1
   \   000069   EA           MOV     A,R2
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   EB           MOV     A,R3
   \   00006D   F0           MOVX    @DPTR,A
   1387          
   1388              fillAndSend( &ZDP_TransID, &tmpAddr, Mgmt_Permit_Join_req,
   1389                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \   00006E                ; Setup parameters for call to function fillAndSend
   \   00006E   75..36       MOV     ?V2,#0x36
   \   000071   75..00       MOV     ?V3,#0x0
   \   000074   78..         MOV     R0,#?V2
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000079   7902         MOV     R1,#0x2
   \   00007B   E9           MOV     A,R1
   \   00007C   12....       LCALL   ?XSTACK_DISP102_8
   \   00007F   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000081   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000083   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000086   7402         MOV     A,#0x2
   \   000088   12....       LCALL   ?DEALLOC_XSTACK8
   1390            }
   1391          
   1392            // Send the message
   1393            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1394                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \                     ??ZDP_MgmtPermitJoinReq_0:
   \   00008B                ; Setup parameters for call to function fillAndSend
   \   00008B   75..36       MOV     ?V2,#0x36
   \   00008E   75..00       MOV     ?V3,#0x0
   \   000091   78..         MOV     R0,#?V2
   \   000093   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000096   7902         MOV     R1,#0x2
   \   000098   EE           MOV     A,R6
   \   000099   FC           MOV     R4,A
   \   00009A   EF           MOV     A,R7
   \   00009B   FD           MOV     R5,A
   \   00009C   02....       LJMP    ?Subroutine9 & 0xFFFF
   1395          }
   1396          
   1397          /*********************************************************************
   1398           * @fn          ZDP_MgmtLeaveReq
   1399           *
   1400           * @brief       This builds and send a Mgmt_Leave_req message.
   1401           *
   1402           * @param       dstAddr - destination address of the message
   1403           *              IEEEAddr - IEEE adddress of device that is removed
   1404           *              RemoveChildren - set to 1 to remove the children of the
   1405           *                                device as well. 0 otherwise.
   1406           *              Rejoin - set to 1 if the removed device should rejoin
   1407                                   afterwards. 0 otherwise.
   1408           *
   1409           * @return      afStatus_t
   1410           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1411          afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
   \                     ZDP_MgmtLeaveReq:
   1412                           uint8 Rejoin, uint8 SecurityEnable )
   1413          
   1414          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine40 & 0xFFFF
   1415            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1416          
   1417            osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
   \                     ??CrossCallReturnLabel_198:
   \   000008   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1418            ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
   \   00000B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   2408         ADD     A,#0x8
   \   000011   F8           MOV     R0,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   3400         ADDC    A,#0x0
   \   000016   F9           MOV     R1,A
   \   000017   8882         MOV     DPL,R0
   \   000019   8983         MOV     DPH,R1
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
   1419          
   1420            if ( RemoveChildren == TRUE )
   \   00001D   04           INC     A
   \   00001E   65..         XRL     A,?V0
   \   000020   7003         JNZ     ??ZDP_MgmtLeaveReq_0
   1421            {
   1422              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
   \   000022   7440         MOV     A,#0x40
   \   000024   F0           MOVX    @DPTR,A
   1423            }
   1424            if ( Rejoin == TRUE )
   \                     ??ZDP_MgmtLeaveReq_0:
   \   000025   740C         MOV     A,#0xc
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6401         XRL     A,#0x1
   \   00002D   7008         JNZ     ??ZDP_MgmtLeaveReq_1
   1425            {
   1426              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
   \   00002F   8882         MOV     DPL,R0
   \   000031   8983         MOV     DPH,R1
   \   000033   E0           MOVX    A,@DPTR
   \   000034   D2E7         SETB    0xE0 /* A   */.7
   \   000036   F0           MOVX    @DPTR,A
   1427            }
   1428          
   1429            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
   \                     ??ZDP_MgmtLeaveReq_1:
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   75..34       MOV     ?V2,#0x34
   \   00003A   02....       LJMP    ?Subroutine1 & 0xFFFF
   1430          }
   1431          
   1432          /*********************************************************************
   1433           * @fn          ZDP_MgmtNwkUpdateReq
   1434           *
   1435           * @brief       This builds and send a Mgmt_NWK_Update_req message. This
   1436           *              function sends a unicast or broadcast message.
   1437           *
   1438           * @param       dstAddr - destination address of the message
   1439           * @param       ChannelMask - 32 bit address bit map
   1440           * @param       ScanDuration - length of time to spend scanning each channel
   1441           * @param       ScanCount - number of energy scans to be conducted
   1442           * @param       NwkUpdateId - NWk Update Id value
   1443           * @param       NwkManagerAddr - NWK address for device with Network Manager
   1444           *                               bit set in its Node Descriptor
   1445           *
   1446           * @return      afStatus_t
   1447           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1448          afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateReq:
   1449                                           uint32 ChannelMask,
   1450                                           uint8 ScanDuration,
   1451                                           uint8 ScanCount,
   1452                                           uint8 NwkUpdateId,
   1453                                           uint16 NwkManagerAddr )
   1454          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   E9           MOV     A,R1
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V2,R4
   \   00000D   8D..         MOV     ?V3,R5
   1455            uint8 *pBuf = ZDP_TmpBuf;
   1456            byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
   \   00000F   7E05         MOV     R6,#0x5
   1457          
   1458            pBuf = osal_buffer_uint32( pBuf, ChannelMask );
   \   000011                ; Setup parameters for call to function osal_buffer_uint32
   \   000011   740E         MOV     A,#0xe
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000019   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   00001C   12....       LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00001F   7404         MOV     A,#0x4
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   1459          
   1460            *pBuf++ = ScanDuration;
   \   000024   EF           MOV     A,R7
   \   000025   8A82         MOV     DPL,R2
   \   000027   8B83         MOV     DPH,R3
   \   000029   F0           MOVX    @DPTR,A
   1461          
   1462            if ( ScanDuration <= 0x05 )
   \   00002A   EA           MOV     A,R2
   \   00002B   2402         ADD     A,#0x2
   \   00002D   FC           MOV     R4,A
   \   00002E   E4           CLR     A
   \   00002F   3B           ADDC    A,R3
   \   000030   FD           MOV     R5,A
   \   000031   A3           INC     DPTR
   \   000032   EF           MOV     A,R7
   \   000033   C3           CLR     C
   \   000034   9406         SUBB    A,#0x6
   \   000036   5007         JNC     ??ZDP_MgmtNwkUpdateReq_0
   1463            {
   1464              // Request is to scan over channelMask
   1465              len += sizeof( uint8 );
   \   000038   7E06         MOV     R6,#0x6
   1466          
   1467              *pBuf++ = ScanCount;
   \   00003A   E5..         MOV     A,?V2
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   8025         SJMP    ??ZDP_MgmtNwkUpdateReq_1
   1468            }
   1469            else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
   \                     ??ZDP_MgmtNwkUpdateReq_0:
   \   00003F   74FE         MOV     A,#-0x2
   \   000041   6F           XRL     A,R7
   \   000042   6005         JZ      ??ZDP_MgmtNwkUpdateReq_2
   \   000044   74FF         MOV     A,#-0x1
   \   000046   6F           XRL     A,R7
   \   000047   701B         JNZ     ??ZDP_MgmtNwkUpdateReq_1
   1470            {
   1471              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   1472              len += sizeof( uint8 );
   \                     ??ZDP_MgmtNwkUpdateReq_2:
   \   000049   7E06         MOV     R6,#0x6
   1473          
   1474              *pBuf++ = NwkUpdateId;
   \   00004B   E5..         MOV     A,?V3
   \   00004D   F0           MOVX    @DPTR,A
   1475          
   1476              if ( ScanDuration == 0xFF )
   \   00004E   74FF         MOV     A,#-0x1
   \   000050   6F           XRL     A,R7
   \   000051   7011         JNZ     ??ZDP_MgmtNwkUpdateReq_1
   1477              {
   1478                len += sizeof( uint16 );
   \   000053   7E08         MOV     R6,#0x8
   \   000055   7412         MOV     A,#0x12
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   12....       LCALL   ?Subroutine52 & 0xFFFF
   1479          
   1480                *pBuf++  = LO_UINT16( NwkManagerAddr );
   1481                *pBuf++  = HI_UINT16( NwkManagerAddr );
   1482              }
   1483            }
   \                     ??CrossCallReturnLabel_79:
   \   00005D   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000060   F0           MOVX    @DPTR,A
   \   000061   EA           MOV     A,R2
   \   000062   2404         ADD     A,#0x4
   1484          
   1485            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
   \                     ??ZDP_MgmtNwkUpdateReq_1:
   \   000064                ; Setup parameters for call to function fillAndSend
   \   000064   75..38       MOV     ?V4,#0x38
   \   000067   75..00       MOV     ?V5,#0x0
   \   00006A   78..         MOV     R0,#?V4
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   EE           MOV     A,R6
   \   000070   F9           MOV     R1,A
   \   000071   AC..         MOV     R4,?V0
   \   000073   AD..         MOV     R5,?V1
   \   000075   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000077   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000079   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00007C   7402         MOV     A,#0x2
   \   00007E   02....       LJMP    ?Subroutine0 & 0xFFFF
   1486          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000003   A3           INC     DPTR
   \   000004   22           RET
   1487          
   1488          
   1489          /*********************************************************************
   1490           * Network Management Responses
   1491           */
   1492          
   1493          /*********************************************************************
   1494           * @fn          ZDP_MgmtNwkDiscRsp
   1495           *
   1496           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1497           *              function sends a unicast message.
   1498           *
   1499           * @param       dstAddr - destination address of the message
   1500           * @param       Status - message status (ZDP_SUCCESS or other)
   1501           * @param       NetworkCount - Total number of networks found
   1502           * @param       StartIndex - Starting index within the reporting network
   1503           *                           list
   1504           * @param       NetworkListCount - number of network lists included
   1505           *                                 in this message
   1506           * @param       NetworkList - List of network descriptors
   1507           * @param       SecurityEnable - Security Options
   1508           *
   1509           * @return      afStatus_t
   1510           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1511          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscRsp:
   1512                                      byte Status,
   1513                                      byte NetworkCount,
   1514                                      byte StartIndex,
   1515                                      byte NetworkListCount,
   1516                                      networkDesc_t *NetworkList,
   1517                                      byte SecurityEnable )
   1518          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V12,R2
   \   000014   8B..         MOV     ?V13,R3
   \   000016   8C..         MOV     ?V10,R4
   \   000018   8D..         MOV     ?V7,R5
   \   00001A   7418         MOV     A,#0x18
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V4,A
   1519            uint8 *buf;
   1520            uint8 *pBuf;
   1521            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   1522            byte idx;
   1523          
   1524            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1525          
   1526            len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
   \   000022   75F00C       MOV     B,#0xc
   \   000025   A4           MUL     AB
   \   000026   2404         ADD     A,#0x4
   \   000028   F5..         MOV     ?V5,A
   1527          
   1528            buf = osal_mem_alloc( len+1 );
   \   00002A                ; Setup parameters for call to function osal_mem_alloc
   \   00002A   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00002D   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000030   8A..         MOV     ?V0,R2
   \   000032   8B..         MOV     ?V1,R3
   1529            if ( buf == NULL )
   \   000034   EA           MOV     A,R2
   \   000035   45..         ORL     A,?V1
   \   000037   7005         JNZ     ??ZDP_MgmtNwkDiscRsp_0
   1530            {
   1531              return afStatus_MEM_FAIL;
   \   000039   7910         MOV     R1,#0x10
   \   00003B   02....       LJMP    ??CrossCallReturnLabel_28 & 0xFFFF
   1532            }
   1533          
   1534            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkDiscRsp_0:
   \   00003E   8A82         MOV     DPL,R2
   \   000040   8B83         MOV     DPH,R3
   \   000042   A3           INC     DPTR
   \   000043   8582..       MOV     ?V8,DPL
   \   000046   8583..       MOV     ?V9,DPH
   \   000049   AE..         MOV     R6,?V8
   \   00004B   AF..         MOV     R7,?V9
   1535          
   1536            *pBuf++ = Status;
   \   00004D   E5..         MOV     A,?V10
   \   00004F   F0           MOVX    @DPTR,A
   1537            *pBuf++ = NetworkCount;
   \   000050   A3           INC     DPTR
   \   000051   E5..         MOV     A,?V7
   \   000053   F0           MOVX    @DPTR,A
   1538            *pBuf++ = StartIndex;
   \   000054   7417         MOV     A,#0x17
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   00005C   A3           INC     DPTR
   \   00005D   12....       LCALL   ?Subroutine87 & 0xFFFF
   1539            *pBuf++ = NetworkListCount;
   \                     ??CrossCallReturnLabel_140:
   \   000060   E5..         MOV     A,?V4
   \   000062   F0           MOVX    @DPTR,A
   \   000063   EE           MOV     A,R6
   \   000064   2404         ADD     A,#0x4
   \   000066   FE           MOV     R6,A
   \   000067   5001         JNC     ??ZDP_MgmtNwkDiscRsp_1
   \   000069   0F           INC     R7
   1540          
   1541            for ( idx = 0; idx < NetworkListCount; idx++ )
   \                     ??ZDP_MgmtNwkDiscRsp_1:
   \   00006A   75..00       MOV     ?V6,#0x0
   \   00006D   7419         MOV     A,#0x19
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000075   8016         SJMP    ??ZDP_MgmtNwkDiscRsp_2
   1542            {
   1543              osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   1544              pBuf += Z_EXTADDR_LEN;
   1545          
   1546              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   1547              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   1548              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   1549              *pBuf    = BEACON_ORDER_NO_BEACONS;                    // Beacon Order
   1550              *pBuf++ |= (uint8)(BEACON_ORDER_NO_BEACONS << 4);      // Superframe Order
   1551          
   1552              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   1553              {
   1554                *pBuf++ = TRUE;                         // Permit Joining
   1555              }
   1556              else
   1557              {
   1558                *pBuf++ = FALSE;
   \                     ??ZDP_MgmtNwkDiscRsp_3:
   \   000077   E4           CLR     A
   \                     ??ZDP_MgmtNwkDiscRsp_4:
   \   000078   F0           MOVX    @DPTR,A
   \   000079   E8           MOV     A,R0
   \   00007A   FE           MOV     R6,A
   \   00007B   E9           MOV     A,R1
   \   00007C   FF           MOV     R7,A
   1559              }
   1560          
   1561              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   \   00007D   E5..         MOV     A,?V2
   \   00007F   2414         ADD     A,#0x14
   \   000081   F582         MOV     DPL,A
   \   000083   E4           CLR     A
   \   000084   35..         ADDC    A,?V3
   \   000086   F583         MOV     DPH,A
   \   000088   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00008B   05..         INC     ?V6
   \                     ??ZDP_MgmtNwkDiscRsp_2:
   \   00008D   E5..         MOV     A,?V6
   \   00008F   C3           CLR     C
   \   000090   95..         SUBB    A,?V4
   \   000092   4003         JC      $+5
   \   000094   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_5 & 0xFFFF
   \   000097                ; Setup parameters for call to function sAddrExtCpy
   \   000097   E5..         MOV     A,?V2
   \   000099   240B         ADD     A,#0xb
   \   00009B   FC           MOV     R4,A
   \   00009C   E4           CLR     A
   \   00009D   35..         ADDC    A,?V3
   \   00009F   FD           MOV     R5,A
   \   0000A0   EE           MOV     A,R6
   \   0000A1   FA           MOV     R2,A
   \   0000A2   EF           MOV     A,R7
   \   0000A3   FB           MOV     R3,A
   \   0000A4   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000A7   85..82       MOV     DPL,?V2
   \   0000AA   85..83       MOV     DPH,?V3
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0000BC   85..82       MOV     DPL,?V2
   \   0000BF   85..83       MOV     DPH,?V3
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   0000CA   F0           MOVX    @DPTR,A
   \   0000CB   85..82       MOV     DPL,?V2
   \   0000CE   85..83       MOV     DPH,?V3
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   C4           SWAP    A
   \   0000D8   54F0         ANL     A,#0xf0
   \   0000DA   FA           MOV     R2,A
   \   0000DB   8882         MOV     DPL,R0
   \   0000DD   8983         MOV     DPH,R1
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   4A           ORL     A,R2
   \   0000E1   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   74FF         MOV     A,#-0x1
   \   0000E8   F0           MOVX    @DPTR,A
   \   0000E9   EE           MOV     A,R6
   \   0000EA   240C         ADD     A,#0xc
   \   0000EC   F8           MOV     R0,A
   \   0000ED   E4           CLR     A
   \   0000EE   3F           ADDC    A,R7
   \   0000EF   F9           MOV     R1,A
   \   0000F0   EE           MOV     A,R6
   \   0000F1   240B         ADD     A,#0xb
   \   0000F3   FA           MOV     R2,A
   \   0000F4   E4           CLR     A
   \   0000F5   3F           ADDC    A,R7
   \   0000F6   FB           MOV     R3,A
   \   0000F7   85..82       MOV     DPL,?V2
   \   0000FA   85..83       MOV     DPH,?V3
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   A3           INC     DPTR
   \   000103   A3           INC     DPTR
   \   000104   E0           MOVX    A,@DPTR
   \   000105   64FE         XRL     A,#0xfe
   \   000107   7003         JNZ     ??ZDP_MgmtNwkDiscRsp_6
   \   000109   A3           INC     DPTR
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   F4           CPL     A
   \                     ??ZDP_MgmtNwkDiscRsp_6:
   \   00010C   8A82         MOV     DPL,R2
   \   00010E   8B83         MOV     DPH,R3
   \   000110   7003         JNZ     $+5
   \   000112   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_3 & 0xFFFF
   \   000115   7401         MOV     A,#0x1
   \   000117   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_4 & 0xFFFF
   1562            }
   1563          
   1564            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   \                     ??ZDP_MgmtNwkDiscRsp_5:
   \   00011A   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00011D   E5..         MOV     A,?V8
   \   00011F   F0           MOVX    @DPTR,A
   \   000120   A3           INC     DPTR
   \   000121   E5..         MOV     A,?V9
   \   000123   F0           MOVX    @DPTR,A
   \   000124                ; Setup parameters for call to function fillAndSend
   \   000124   75..30       MOV     ?V2,#0x30
   \   000127   75..80       MOV     ?V3,#-0x80
   \   00012A   78..         MOV     R0,#?V2
   \   00012C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012F   A9..         MOV     R1,?V5
   \   000131   AC..         MOV     R4,?V12
   \   000133   AD..         MOV     R5,?V13
   \   000135   7402         MOV     A,#0x2
   \   000137   12....       LCALL   ?XSTACK_DISP101_8
   \   00013A   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00013D   7402         MOV     A,#0x2
   \   00013F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000142   E9           MOV     A,R1
   \   000143   FE           MOV     R6,A
   \   000144                ; Setup parameters for call to function osal_mem_free
   \   000144   AA..         MOV     R2,?V0
   \   000146   AB..         MOV     R3,?V1
   \   000148   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00014B   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00014E                REQUIRE ?Subroutine4
   \   00014E                ; // Fall through to label ?Subroutine4
   1565          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7401         MOV     A,#0x1
   \   000002                REQUIRE ??Subroutine114_0
   \   000002                ; // Fall through to label ??Subroutine114_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   EE           MOV     A,R6
   \   00000B   F9           MOV     R1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   2401         ADD     A,#0x1
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   3400         ADDC    A,#0x0
   \   000006   FB           MOV     R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2409         ADD     A,#0x9
   \   000004   F8           MOV     R0,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F9           MOV     R1,A
   \   000008   22           RET
   1566          
   1567          /*********************************************************************
   1568           * @fn          ZDP_MgmtLqiRsp
   1569           *
   1570           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1571           *              function sends a unicast message.
   1572           *
   1573           * @param       dstAddr - destination address of the message
   1574           * @param       Status - message status (ZDP_SUCCESS or other)
   1575           * @param       NeighborLqiEntries - Total number of entries found
   1576           * @param       StartIndex - Starting index within the reporting list
   1577           * @param       NeighborLqiCount - number of lists included
   1578           *                                 in this message
   1579           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1580           *                is the list to be sent, not the entire list
   1581           * @param       SecurityEnable - true if secure
   1582           *
   1583           * @return      ZStatus_t
   1584           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1585          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtLqiRsp:
   1586                                    byte Status,
   1587                                    byte NeighborLqiEntries,
   1588                                    byte StartIndex,
   1589                                    byte NeighborLqiCount,
   1590                                    ZDP_MgmtLqiItem_t* NeighborList,
   1591                                    byte SecurityEnable )
   1592          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000   74EB         MOV     A,#-0x15
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 21
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V10,R2
   \   000014   8B..         MOV     ?V11,R3
   \   000016   8D..         MOV     ?V12,R5
   1593            ZDP_MgmtLqiItem_t* list = NeighborList;
   \   000018   7418         MOV     A,#0x18
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   1594            uint8 *buf, *pBuf;
   1595            byte len, x;
   1596          
   1597            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1598          
   1599            if ( ZSuccess != Status )
   \                     ??CrossCallReturnLabel_218:
   \   000020   EC           MOV     A,R4
   \   000021   6020         JZ      ??ZDP_MgmtLqiRsp_0
   1600            {
   1601              ZDP_TmpBuf[0] = Status;
   \   000023   12....       LCALL   ?Subroutine48 & 0xFFFF
   1602              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   1603            }
   \                     ??CrossCallReturnLabel_187:
   \   000026   EC           MOV     A,R4
   \   000027   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   7901         MOV     R1,#0x1
   \   00002F   AC..         MOV     R4,?V10
   \   000031   AD..         MOV     R5,?V11
   \   000033   7402         MOV     A,#0x2
   \   000035   12....       LCALL   ?XSTACK_DISP101_8
   \   000038   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00003B   7402         MOV     A,#0x2
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000040   02....       LJMP    ??CrossCallReturnLabel_29 & 0xFFFF
   \                     ??ZDP_MgmtLqiRsp_0:
   \   000043   7417         MOV     A,#0x17
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F5..         MOV     ?V5,A
   1604          
   1605            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1606            //  neighbor LQI data.
   1607            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
   \   00004B   75F016       MOV     B,#0x16
   \   00004E   A4           MUL     AB
   \   00004F   2404         ADD     A,#0x4
   \   000051   F5..         MOV     ?V6,A
   1608          
   1609            buf = osal_mem_alloc( len+1 );
   \   000053                ; Setup parameters for call to function osal_mem_alloc
   \   000053   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000056   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000059   8A..         MOV     ?V2,R2
   \   00005B   8B..         MOV     ?V3,R3
   1610            if ( buf == NULL )
   \   00005D   EA           MOV     A,R2
   \   00005E   45..         ORL     A,?V3
   \   000060   7005         JNZ     ??ZDP_MgmtLqiRsp_1
   1611            {
   1612              return afStatus_MEM_FAIL;
   \   000062   7910         MOV     R1,#0x10
   \   000064   02....       LJMP    ??CrossCallReturnLabel_29 & 0xFFFF
   1613            }
   1614          
   1615            pBuf = buf+1;
   \                     ??ZDP_MgmtLqiRsp_1:
   \   000067   8A82         MOV     DPL,R2
   \   000069   8B83         MOV     DPH,R3
   \   00006B   A3           INC     DPTR
   \   00006C   8582..       MOV     ?V8,DPL
   \   00006F   8583..       MOV     ?V9,DPH
   \   000072   85....       MOV     ?V0,?V8
   \   000075   85....       MOV     ?V1,?V9
   1616          
   1617            *pBuf++ = Status;
   \   000078   E4           CLR     A
   \   000079   F0           MOVX    @DPTR,A
   1618            *pBuf++ = NeighborLqiEntries;
   \   00007A   A3           INC     DPTR
   \   00007B   E5..         MOV     A,?V12
   \   00007D   F0           MOVX    @DPTR,A
   1619            *pBuf++ = StartIndex;
   \   00007E   7416         MOV     A,#0x16
   \   000080   12....       LCALL   ?XSTACK_DISP0_8
   \   000083   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000086   12....       LCALL   ?Subroutine32 & 0xFFFF
   1620            *pBuf++ = NeighborLqiCount;
   \                     ??CrossCallReturnLabel_43:
   \   000089   A3           INC     DPTR
   \   00008A   E5..         MOV     A,?V5
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   E5..         MOV     A,?V0
   \   00008F   2404         ADD     A,#0x4
   \   000091   F5..         MOV     ?V0,A
   \   000093   5002         JNC     ??ZDP_MgmtLqiRsp_2
   \   000095   05..         INC     ?V1
   1621          
   1622            for ( x = 0; x < NeighborLqiCount; x++ )
   \                     ??ZDP_MgmtLqiRsp_2:
   \   000097   75..00       MOV     ?V4,#0x0
   \   00009A   02....       LJMP    ??ZDP_MgmtLqiRsp_3 & 0xFFFF
   1623            {
   1624              osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   \                     ??ZDP_MgmtLqiRsp_4:
   \   00009D                ; Setup parameters for call to function sAddrExtCpy
   \   00009D   EE           MOV     A,R6
   \   00009E   2402         ADD     A,#0x2
   \   0000A0   FC           MOV     R4,A
   \   0000A1   E4           CLR     A
   \   0000A2   3F           ADDC    A,R7
   \   0000A3   FD           MOV     R5,A
   \   0000A4   AA..         MOV     R2,?V0
   \   0000A6   AB..         MOV     R3,?V1
   \   0000A8   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1625              pBuf += Z_EXTADDR_LEN;
   1626          
   1627              // EXTADDR
   1628              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   \   0000AB                ; Setup parameters for call to function sAddrExtCpy
   \   0000AB   EE           MOV     A,R6
   \   0000AC   240A         ADD     A,#0xa
   \   0000AE   FC           MOV     R4,A
   \   0000AF   E4           CLR     A
   \   0000B0   3F           ADDC    A,R7
   \   0000B1   FD           MOV     R5,A
   \   0000B2   E5..         MOV     A,?V0
   \   0000B4   2408         ADD     A,#0x8
   \   0000B6   FA           MOV     R2,A
   \   0000B7   E4           CLR     A
   \   0000B8   35..         ADDC    A,?V1
   \   0000BA   FB           MOV     R3,A
   \   0000BB   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000BE   8A..         MOV     ?V0,R2
   \   0000C0   8B..         MOV     ?V1,R3
   \   0000C2   A8..         MOV     R0,?V0
   \   0000C4   A9..         MOV     R1,?V1
   1629          
   1630              // NWKADDR
   1631              *pBuf++ = LO_UINT16( list->nwkAddr );
   \   0000C6   EE           MOV     A,R6
   \   0000C7   2412         ADD     A,#0x12
   \   0000C9   FA           MOV     R2,A
   \   0000CA   E4           CLR     A
   \   0000CB   3F           ADDC    A,R7
   \   0000CC   FB           MOV     R3,A
   \   0000CD   8A82         MOV     DPL,R2
   \   0000CF   8B83         MOV     DPH,R3
   \   0000D1   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   0000D4   12....       LCALL   ?Subroutine26 & 0xFFFF
   1632              *pBuf++ = HI_UINT16( list->nwkAddr );
   \                     ??CrossCallReturnLabel_32:
   \   0000D7   A3           INC     DPTR
   \   0000D8   F0           MOVX    @DPTR,A
   1633          
   1634              // DEVICETYPE
   1635              *pBuf = list->devType;
   \   0000D9   E8           MOV     A,R0
   \   0000DA   2402         ADD     A,#0x2
   \   0000DC   FA           MOV     R2,A
   \   0000DD   E4           CLR     A
   \   0000DE   39           ADDC    A,R1
   \   0000DF   FB           MOV     R3,A
   \   0000E0   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   0000E3   12....       LCALL   ?Subroutine61 & 0xFFFF
   1636          
   1637              // RXONIDLE
   1638              *pBuf |= (uint8)(list->rxOnIdle << 2);
   \                     ??CrossCallReturnLabel_99:
   \   0000E6   EE           MOV     A,R6
   \   0000E7   2415         ADD     A,#0x15
   \   0000E9   F582         MOV     DPL,A
   \   0000EB   E4           CLR     A
   \   0000EC   3F           ADDC    A,R7
   \   0000ED   F583         MOV     DPH,A
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   33           RLC     A
   \   0000F1   33           RLC     A
   \   0000F2   54FC         ANL     A,#0xfc
   \   0000F4   FC           MOV     R4,A
   \   0000F5   8A82         MOV     DPL,R2
   \   0000F7   8B83         MOV     DPH,R3
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   4C           ORL     A,R4
   \   0000FB   F0           MOVX    @DPTR,A
   1639          
   1640              // RELATIONSHIP
   1641              *pBuf++ |= (uint8)(list->relation << 4);
   \   0000FC   EE           MOV     A,R6
   \   0000FD   2416         ADD     A,#0x16
   \   0000FF   F582         MOV     DPL,A
   \   000101   E4           CLR     A
   \   000102   3F           ADDC    A,R7
   \   000103   F583         MOV     DPH,A
   \   000105   E0           MOVX    A,@DPTR
   \   000106   C4           SWAP    A
   \   000107   54F0         ANL     A,#0xf0
   \   000109   FC           MOV     R4,A
   \   00010A   8A82         MOV     DPL,R2
   \   00010C   8B83         MOV     DPH,R3
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   4C           ORL     A,R4
   \   000110   F0           MOVX    @DPTR,A
   1642          
   1643              // PERMITJOINING
   1644              *pBuf++ = (uint8)(list->permit);
   \   000111   EE           MOV     A,R6
   \   000112   2417         ADD     A,#0x17
   \   000114   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000117   F0           MOVX    @DPTR,A
   1645          
   1646              // DEPTH
   1647              *pBuf++ = list->depth;
   \   000118   EE           MOV     A,R6
   \   000119   2418         ADD     A,#0x18
   \   00011B   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00011E   F0           MOVX    @DPTR,A
   1648          
   1649              // LQI
   1650              *pBuf++ = list->lqi;
   \   00011F   EE           MOV     A,R6
   \   000120   2419         ADD     A,#0x19
   \   000122   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000125   A3           INC     DPTR
   \   000126   F0           MOVX    @DPTR,A
   \   000127   E8           MOV     A,R0
   \   000128   2406         ADD     A,#0x6
   \   00012A   F5..         MOV     ?V0,A
   \   00012C   E4           CLR     A
   \   00012D   39           ADDC    A,R1
   \   00012E   F5..         MOV     ?V1,A
   1651          
   1652              list++; // next list entry
   \   000130   EE           MOV     A,R6
   \   000131   241A         ADD     A,#0x1a
   \   000133   FE           MOV     R6,A
   \   000134   5001         JNC     ??ZDP_MgmtLqiRsp_5
   \   000136   0F           INC     R7
   1653            }
   \                     ??ZDP_MgmtLqiRsp_5:
   \   000137   05..         INC     ?V4
   \                     ??ZDP_MgmtLqiRsp_3:
   \   000139   E5..         MOV     A,?V4
   \   00013B   C3           CLR     C
   \   00013C   95..         SUBB    A,?V5
   \   00013E   5003         JNC     $+5
   \   000140   02....       LJMP    ??ZDP_MgmtLqiRsp_4 & 0xFFFF
   1654          
   1655            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   \   000143   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000146   E5..         MOV     A,?V8
   \   000148   F0           MOVX    @DPTR,A
   \   000149   A3           INC     DPTR
   \   00014A   E5..         MOV     A,?V9
   \   00014C   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00014F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000152   A9..         MOV     R1,?V6
   \   000154   AC..         MOV     R4,?V10
   \   000156   AD..         MOV     R5,?V11
   \   000158   7402         MOV     A,#0x2
   \   00015A   12....       LCALL   ?XSTACK_DISP101_8
   \   00015D   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000160   7402         MOV     A,#0x2
   \   000162   12....       LCALL   ?DEALLOC_XSTACK8
   \   000165   E9           MOV     A,R1
   \   000166   FE           MOV     R6,A
   \   000167                ; Setup parameters for call to function osal_mem_free
   \   000167   AA..         MOV     R2,?V2
   \   000169   AB..         MOV     R3,?V3
   \   00016B   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00016E   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000171   7401         MOV     A,#0x1
   \   000173   12....       LCALL   ?DEALLOC_XSTACK8
   \   000176   7F0D         MOV     R7,#0xd
   \   000178   02....       LJMP    ?BANKED_LEAVE_XDATA
   1656          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   8882         MOV     DPL,R0
   \   000009   8983         MOV     DPH,R1
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function fillAndSend
   \   000001                ; Setup parameters for call to function fillAndSend
   \   000001   75..31       MOV     ?V0,#0x31
   \   000004   75..80       MOV     ?V1,#-0x80
   \   000007   78..         MOV     R0,#?V0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET
   1657          
   1658          /*********************************************************************
   1659           * @fn          ZDP_MgmtRtgRsp
   1660           *
   1661           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1662           *              function sends a unicast message.
   1663           *
   1664           * @param       dstAddr - destination address of the message
   1665           * @param       Status - message status (ZDP_SUCCESS or other)
   1666           * @param       RoutingTableEntries - Total number of entries
   1667           * @param       StartIndex - Starting index within the reporting list
   1668           * @param       RoutingTableListCount - number of entries included
   1669           *                                      in this message
   1670           * @param       RoutingTableList - List of Routing Table entries
   1671           * @param       SecurityEnable - true to enable security for this message
   1672           *
   1673           * @return      ZStatus_t
   1674           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1675          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtRtgRsp:
   1676                                      byte Status,
   1677                                      byte RoutingTableEntries,
   1678                                      byte StartIndex,
   1679                                      byte RoutingListCount,
   1680                                      rtgItem_t *RoutingTableList,
   1681                                      byte SecurityEnable )
   1682          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V2,R2
   \   000014   8B..         MOV     ?V3,R3
   \   000016   8C..         MOV     ?V1,R4
   \   000018   8D..         MOV     ?V0,R5
   \   00001A   7416         MOV     A,#0x16
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V5,A
   1683            uint8 *buf;
   1684            uint8 *pBuf;
   1685            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1686            byte len = 1 + 1 + 1 + 1;
   1687            byte x;
   1688          
   1689            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1690          
   1691            // Add an array for Routing List data
   1692            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   \   000022   75F005       MOV     B,#0x5
   \   000025   A4           MUL     AB
   \   000026   2404         ADD     A,#0x4
   \   000028   F5..         MOV     ?V4,A
   1693          
   1694            buf = osal_mem_alloc( (short)(len+1) );
   \   00002A                ; Setup parameters for call to function osal_mem_alloc
   \   00002A   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00002D   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000030   8A..         MOV     ?V6,R2
   \   000032   8B..         MOV     ?V7,R3
   \   000034   AE..         MOV     R6,?V6
   \   000036   AF..         MOV     R7,?V7
   1695            if ( buf == NULL )
   \   000038   EE           MOV     A,R6
   \   000039   4F           ORL     A,R7
   \   00003A   7005         JNZ     ??ZDP_MgmtRtgRsp_0
   1696            {
   1697              return afStatus_MEM_FAIL;
   \   00003C   7910         MOV     R1,#0x10
   \   00003E   02....       LJMP    ??ZDP_MgmtRtgRsp_1 & 0xFFFF
   1698            }
   1699          
   1700            pBuf = buf+1;
   \                     ??ZDP_MgmtRtgRsp_0:
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   A3           INC     DPTR
   \   000046   A882         MOV     R0,DPL
   \   000048   A983         MOV     R1,DPH
   \   00004A   E8           MOV     A,R0
   \   00004B   FA           MOV     R2,A
   \   00004C   E9           MOV     A,R1
   \   00004D   FB           MOV     R3,A
   1701          
   1702            *pBuf++ = Status;
   \   00004E   E5..         MOV     A,?V1
   \   000050   F0           MOVX    @DPTR,A
   1703            *pBuf++ = RoutingTableEntries;
   \   000051   A3           INC     DPTR
   \   000052   E5..         MOV     A,?V0
   \   000054   F0           MOVX    @DPTR,A
   1704            *pBuf++ = StartIndex;
   \   000055   7415         MOV     A,#0x15
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   12....       LCALL   ?Subroutine39 & 0xFFFF
   1705            *pBuf++ = RoutingListCount;
   \                     ??CrossCallReturnLabel_52:
   \   00005D   E5..         MOV     A,?V5
   \   00005F   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000062   5001         JNC     ??ZDP_MgmtRtgRsp_2
   \   000064   0B           INC     R3
   1706          
   1707            for ( x = 0; x < RoutingListCount; x++ )
   \                     ??ZDP_MgmtRtgRsp_2:
   \   000065   75..00       MOV     ?V6,#0x0
   \   000068   7417         MOV     A,#0x17
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000070   02....       LJMP    ??ZDP_MgmtRtgRsp_3 & 0xFFFF
   1708            {
   1709              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   \                     ??ZDP_MgmtRtgRsp_4:
   \   000073   12....       LCALL   ?Subroutine14 & 0xFFFF
   1710              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   1711          
   1712              *pBuf = (RoutingTableList->status & 0x07);
   \                     ??CrossCallReturnLabel_8:
   \   000076   F5..         MOV     ?V8,A
   \   000078   E4           CLR     A
   \   000079   3B           ADDC    A,R3
   \   00007A   F5..         MOV     ?V9,A
   \   00007C   8C82         MOV     DPL,R4
   \   00007E   8D83         MOV     DPH,R5
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   5407         ANL     A,#0x7
   \   000088   85..82       MOV     DPL,?V8
   \   00008B   85..83       MOV     DPH,?V9
   \   00008E   F0           MOVX    @DPTR,A
   1713              if ( RoutingTableList->options & (ZP_MTO_ROUTE_RC | ZP_MTO_ROUTE_NRC) )
   \   00008F   EC           MOV     A,R4
   \   000090   2406         ADD     A,#0x6
   \   000092   F582         MOV     DPL,A
   \   000094   E4           CLR     A
   \   000095   3D           ADDC    A,R5
   \   000096   F583         MOV     DPH,A
   \   000098   E0           MOVX    A,@DPTR
   \   000099   5418         ANL     A,#0x18
   \   00009B   6029         JZ      ??ZDP_MgmtRtgRsp_5
   1714              {
   1715                uint8 options = 0;
   1716                options |= ZDO_MGMT_RTG_ENTRY_MANYTOONE;
   \   00009D   75..02       MOV     ?V7,#0x2
   1717          
   1718                if ( RoutingTableList->options & ZP_RTG_RECORD )
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   A2E2         MOV     C,0xE0 /* A   */.2
   \   0000A3   5003         JNC     ??ZDP_MgmtRtgRsp_6
   1719                {
   1720                  options |= ZDO_MGMT_RTG_ENTRY_ROUTE_RECORD_REQUIRED;
   \   0000A5   75..06       MOV     ?V7,#0x6
   1721                }
   1722          
   1723                if ( RoutingTableList->options & ZP_MTO_ROUTE_NRC )
   \                     ??ZDP_MgmtRtgRsp_6:
   \   0000A8   A2E4         MOV     C,0xE0 /* A   */.4
   \   0000AA   5007         JNC     ??ZDP_MgmtRtgRsp_7
   1724                {
   1725                  options |= ZDO_MGMT_RTG_ENTRY_MEMORY_CONSTRAINED;
   \   0000AC   D3           SETB    C
   \   0000AD   E5..         MOV     A,?V7
   \   0000AF   D2E0         SETB    0xE0 /* A   */.0
   \   0000B1   F5..         MOV     ?V7,A
   1726                }
   1727          
   1728                *pBuf |= (options << 3);
   \                     ??ZDP_MgmtRtgRsp_7:
   \   0000B3   E5..         MOV     A,?V7
   \   0000B5   33           RLC     A
   \   0000B6   33           RLC     A
   \   0000B7   33           RLC     A
   \   0000B8   54F8         ANL     A,#0xf8
   \   0000BA   F5..         MOV     ?V7,A
   \   0000BC   85..82       MOV     DPL,?V8
   \   0000BF   85..83       MOV     DPH,?V9
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   45..         ORL     A,?V7
   \   0000C5   F0           MOVX    @DPTR,A
   1729              }
   1730              pBuf++;
   1731          
   1732              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   \                     ??ZDP_MgmtRtgRsp_5:
   \   0000C6   EC           MOV     A,R4
   \   0000C7   2402         ADD     A,#0x2
   \   0000C9   F5..         MOV     ?V8,A
   \   0000CB   E4           CLR     A
   \   0000CC   3D           ADDC    A,R5
   \   0000CD   F5..         MOV     ?V9,A
   \   0000CF   85..82       MOV     DPL,?V8
   \   0000D2   F583         MOV     DPH,A
   \   0000D4   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   0000D7   F0           MOVX    @DPTR,A
   1733              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   \   0000D8   85..82       MOV     DPL,?V8
   \   0000DB   85..83       MOV     DPH,?V9
   \   0000DE   A3           INC     DPTR
   \   0000DF   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   0000E2   A3           INC     DPTR
   \   0000E3   F0           MOVX    @DPTR,A
   \   0000E4   EA           MOV     A,R2
   \   0000E5   2405         ADD     A,#0x5
   \   0000E7   FA           MOV     R2,A
   \   0000E8   5001         JNC     ??ZDP_MgmtRtgRsp_8
   \   0000EA   0B           INC     R3
   1734              RoutingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtRtgRsp_8:
   \   0000EB   EC           MOV     A,R4
   \   0000EC   2407         ADD     A,#0x7
   \   0000EE   FC           MOV     R4,A
   \   0000EF   5001         JNC     ??ZDP_MgmtRtgRsp_9
   \   0000F1   0D           INC     R5
   1735            }
   \                     ??ZDP_MgmtRtgRsp_9:
   \   0000F2   05..         INC     ?V6
   \                     ??ZDP_MgmtRtgRsp_3:
   \   0000F4   E5..         MOV     A,?V6
   \   0000F6   C3           CLR     C
   \   0000F7   95..         SUBB    A,?V5
   \   0000F9   5003         JNC     $+5
   \   0000FB   02....       LJMP    ??ZDP_MgmtRtgRsp_4 & 0xFFFF
   1736          
   1737            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   \   0000FE   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000101   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000104                ; Setup parameters for call to function fillAndSend
   \   000104   75..32       MOV     ?V6,#0x32
   \   000107   75..80       MOV     ?V7,#-0x80
   \   00010A   78..         MOV     R0,#?V6
   \   00010C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010F   A9..         MOV     R1,?V4
   \   000111   AC..         MOV     R4,?V2
   \   000113   AD..         MOV     R5,?V3
   \   000115   7402         MOV     A,#0x2
   \   000117   12....       LCALL   ?XSTACK_DISP101_8
   \   00011A   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00011D   7402         MOV     A,#0x2
   \   00011F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000122   E9           MOV     A,R1
   \   000123   F5..         MOV     ?V2,A
   \   000125                ; Setup parameters for call to function osal_mem_free
   \   000125   EE           MOV     A,R6
   \   000126   FA           MOV     R2,A
   \   000127   EF           MOV     A,R7
   \   000128   FB           MOV     R3,A
   \   000129   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00012C   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00012F   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   000131   F0           MOVX    @DPTR,A
   \   000132   A3           INC     DPTR
   \   000133   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000135   F0           MOVX    @DPTR,A
   \   000136   A9..         MOV     R1,?V2
   \                     ??ZDP_MgmtRtgRsp_1:
   \   000138   7401         MOV     A,#0x1
   \   00013A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013D   02....       LJMP    ?Subroutine5 & 0xFFFF
   1738          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   8C82         MOV     DPL,R4
   \   000002   8D83         MOV     DPH,R5
   \   000004   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000007   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   00000A   A3           INC     DPTR
   \   00000B   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   00000E   A3           INC     DPTR
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   EA           MOV     A,R2
   \   000011   2402         ADD     A,#0x2
   \   000013   22           RET
   1739          
   1740          /*********************************************************************
   1741           * @fn          ZDP_MgmtBindRsp
   1742           *
   1743           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1744           *              function sends a unicast message.
   1745           *
   1746           * @param       dstAddr - destination address of the message
   1747           * @param       Status - message status (ZDP_SUCCESS or other)
   1748           * @param       BindingTableEntries - Total number of entries
   1749           * @param       StartIndex - Starting index within the reporting list
   1750           * @param       BindingTableListCount - number of entries included
   1751           *                                 in this message
   1752           * @param       BindingTableList - List of Binding Table entries
   1753           * @param       SecurityEnable - Security Options
   1754           *
   1755           * @return      ZStatus_t
   1756           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1757          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtBindRsp:
   1758                                      byte Status,
   1759                                      byte BindingTableEntries,
   1760                                      byte StartIndex,
   1761                                      byte BindingTableListCount,
   1762                                      apsBindingItem_t *BindingTableList,
   1763                                      byte SecurityEnable )
   1764          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V12,R2
   \   000014   8B..         MOV     ?V13,R3
   \   000016   8C..         MOV     ?V10,R4
   \   000018   8D..         MOV     ?V5,R5
   \   00001A   7418         MOV     A,#0x18
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V4,A
   1765            uint8 *buf;
   1766            uint8 *pBuf;
   1767            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1768            uint8 len;    // Actual length varies due to different addrMode
   1769            uint8 x;
   1770            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   1771            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   1772          
   1773            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1774          
   1775            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1776            maxLen = 1 + 1 + 1 + 1;
   1777            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   1778            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   \   000022                ; Setup parameters for call to function osal_mem_alloc
   \   000022   75F015       MOV     B,#0x15
   \   000025   A4           MUL     AB
   \   000026   2404         ADD     A,#0x4
   \   000028   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   00002B   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002E   8A..         MOV     ?V2,R2
   \   000030   8B..         MOV     ?V3,R3
   1779          
   1780            if ( buf == NULL )
   \   000032   EA           MOV     A,R2
   \   000033   45..         ORL     A,?V3
   \   000035   7005         JNZ     ??ZDP_MgmtBindRsp_0
   1781            {
   1782              return afStatus_MEM_FAIL;
   \   000037   7910         MOV     R1,#0x10
   \   000039   02....       LJMP    ??CrossCallReturnLabel_30 & 0xFFFF
   1783            }
   1784          
   1785            pBuf = buf+1;
   \                     ??ZDP_MgmtBindRsp_0:
   \   00003C   8A82         MOV     DPL,R2
   \   00003E   8B83         MOV     DPH,R3
   \   000040   A3           INC     DPTR
   \   000041   8582..       MOV     ?V6,DPL
   \   000044   8583..       MOV     ?V7,DPH
   \   000047   AA..         MOV     R2,?V6
   \   000049   AB..         MOV     R3,?V7
   1786          
   1787            *pBuf++ = Status;
   \   00004B   E5..         MOV     A,?V10
   \   00004D   F0           MOVX    @DPTR,A
   1788            *pBuf++ = BindingTableEntries;
   \   00004E   A3           INC     DPTR
   \   00004F   E5..         MOV     A,?V5
   \   000051   F0           MOVX    @DPTR,A
   1789            *pBuf++ = StartIndex;
   \   000052   7417         MOV     A,#0x17
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   12....       LCALL   ?Subroutine39 & 0xFFFF
   1790            *pBuf++ = BindingTableListCount;
   \                     ??CrossCallReturnLabel_53:
   \   00005A   E5..         MOV     A,?V4
   \   00005C   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   00005F   5001         JNC     ??ZDP_MgmtBindRsp_1
   \   000061   0B           INC     R3
   1791          
   1792            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1793            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1794            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1795            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1796          
   1797            len = 1 + 1 + 1 + 1;
   \                     ??ZDP_MgmtBindRsp_1:
   \   000062   75..04       MOV     ?V0,#0x4
   1798            for ( x = 0; x < BindingTableListCount; x++ )
   \   000065   75..00       MOV     ?V1,#0x0
   \   000068   7419         MOV     A,#0x19
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000070   8016         SJMP    ??ZDP_MgmtBindRsp_2
   1799            {
   1800              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   1801              *pBuf++ = BindingTableList->srcEP;
   1802          
   1803              // Cluster ID
   1804              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   1805              *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   1806          
   1807              *pBuf++ = BindingTableList->dstAddr.addrMode;
   1808              if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   1809              {
   1810                len += extZdpBindEntrySize;
   1811                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   1812                *pBuf++ = BindingTableList->dstEP;
   1813              }
   1814              else
   1815              {
   1816                len += shortZdpBindEntrySize;
   \                     ??ZDP_MgmtBindRsp_3:
   \   000072   740E         MOV     A,#0xe
   \   000074   25..         ADD     A,?V0
   \   000076   F5..         MOV     ?V0,A
   1817                *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   000078   12....       LCALL   ?Subroutine14 & 0xFFFF
   1818                *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   1819              }
   \                     ??CrossCallReturnLabel_9:
   \   00007B   FA           MOV     R2,A
   \   00007C   5001         JNC     ??ZDP_MgmtBindRsp_4
   \   00007E   0B           INC     R3
   1820              BindingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtBindRsp_4:
   \   00007F   EE           MOV     A,R6
   \   000080   2415         ADD     A,#0x15
   \   000082   FE           MOV     R6,A
   \   000083   5001         JNC     ??ZDP_MgmtBindRsp_5
   \   000085   0F           INC     R7
   \                     ??ZDP_MgmtBindRsp_5:
   \   000086   05..         INC     ?V1
   \                     ??ZDP_MgmtBindRsp_2:
   \   000088   E5..         MOV     A,?V1
   \   00008A   C3           CLR     C
   \   00008B   95..         SUBB    A,?V4
   \   00008D   505B         JNC     ??ZDP_MgmtBindRsp_6
   \   00008F                ; Setup parameters for call to function sAddrExtCpy
   \   00008F   EE           MOV     A,R6
   \   000090   FC           MOV     R4,A
   \   000091   EF           MOV     A,R7
   \   000092   FD           MOV     R5,A
   \   000093   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000096   8E82         MOV     DPL,R6
   \   000098   8F83         MOV     DPH,R7
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   0000A4   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0000A7   8882         MOV     DPL,R0
   \   0000A9   8983         MOV     DPH,R1
   \   0000AB   12....       LCALL   ??Subroutine111_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   0000AE   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   0000B1   12....       LCALL   ??Subroutine111_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   F0           MOVX    @DPTR,A
   \   0000B7   EE           MOV     A,R6
   \   0000B8   2413         ADD     A,#0x13
   \   0000BA   F8           MOV     R0,A
   \   0000BB   E4           CLR     A
   \   0000BC   3F           ADDC    A,R7
   \   0000BD   F9           MOV     R1,A
   \   0000BE   8882         MOV     DPL,R0
   \   0000C0   8983         MOV     DPH,R1
   \   0000C2   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   0000C5   5001         JNC     ??ZDP_MgmtBindRsp_7
   \   0000C7   0B           INC     R3
   \                     ??ZDP_MgmtBindRsp_7:
   \   0000C8   EE           MOV     A,R6
   \   0000C9   240B         ADD     A,#0xb
   \   0000CB   FC           MOV     R4,A
   \   0000CC   E4           CLR     A
   \   0000CD   3F           ADDC    A,R7
   \   0000CE   FD           MOV     R5,A
   \   0000CF   8882         MOV     DPL,R0
   \   0000D1   8983         MOV     DPH,R1
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   6403         XRL     A,#0x3
   \   0000D6   709A         JNZ     ??ZDP_MgmtBindRsp_3
   \   0000D8   7415         MOV     A,#0x15
   \   0000DA   25..         ADD     A,?V0
   \   0000DC   F5..         MOV     ?V0,A
   \   0000DE                ; Setup parameters for call to function sAddrExtCpy
   \   0000DE   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000E1   12....       LCALL   ?Subroutine69 & 0xFFFF
   1821            }
   \                     ??CrossCallReturnLabel_116:
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   0000E8   8095         SJMP    ??ZDP_MgmtBindRsp_4
   1822          
   1823            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   \                     ??ZDP_MgmtBindRsp_6:
   \   0000EA   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000ED   E5..         MOV     A,?V6
   \   0000EF   F0           MOVX    @DPTR,A
   \   0000F0   A3           INC     DPTR
   \   0000F1   E5..         MOV     A,?V7
   \   0000F3   F0           MOVX    @DPTR,A
   \   0000F4                ; Setup parameters for call to function fillAndSend
   \   0000F4   75..33       MOV     ?V6,#0x33
   \   0000F7   75..80       MOV     ?V7,#-0x80
   \   0000FA   78..         MOV     R0,#?V6
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FF   A9..         MOV     R1,?V0
   \   000101   AC..         MOV     R4,?V12
   \   000103   AD..         MOV     R5,?V13
   \   000105   7402         MOV     A,#0x2
   \   000107   12....       LCALL   ?XSTACK_DISP101_8
   \   00010A   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00010D   7402         MOV     A,#0x2
   \   00010F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000112   E9           MOV     A,R1
   \   000113   FE           MOV     R6,A
   \   000114                ; Setup parameters for call to function osal_mem_free
   \   000114   AA..         MOV     R2,?V2
   \   000116   AB..         MOV     R3,?V3
   \   000118   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00011B   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00011E   02....       LJMP    ?Subroutine4 & 0xFFFF
   1824          }
   1825          
   1826          /*********************************************************************
   1827           * @fn          ZDP_MgmtNwkUpdateNotify
   1828           *
   1829           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
   1830           *              function sends a unicast message.
   1831           *
   1832           * @param       dstAddr - destination address of the message
   1833           * @param       status - message status (ZDP_SUCCESS or other)
   1834           * @param       scannedChannels - List of channels scanned by the request
   1835           * @param       totalTransmissions - Total transmissions
   1836           * @param       transmissionFailures - Sum of transmission failures
   1837           * @param       listCount - Number of records contained in the energyValues list
   1838           * @param       energyValues - List of descriptors, one for each of ListCount,
   1839           *                             of the enegry detect descriptors
   1840           * @param       txOptions - Transmit options
   1841           * @param       securityEnable - Security options
   1842           *
   1843           * @return      afStatus_t
   1844           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1845          afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateNotify:
   1846                                              uint8 status, uint32 scannedChannels,
   1847                                              uint16 totalTransmissions, uint16 transmissionFailures,
   1848                                              uint8 listCount, uint8 *energyValues, uint8 txOptions,
   1849                                              uint8 securityEnable )
   1850          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V8,R2
   \   000014   8B..         MOV     ?V9,R3
   \   000016   8C..         MOV     ?V7,R4
   \   000018   8D..         MOV     ?V0,R5
   1851            uint8 *buf;
   1852            uint8 *pBuf;
   1853            uint8 len;
   1854          
   1855            (void)securityEnable;  // Intentionally unreferenced parameter
   1856          
   1857            // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
   1858            len = 1 + 4 + 2 + 2 + 1 + listCount;
   \   00001A   740A         MOV     A,#0xa
   \   00001C   2D           ADD     A,R5
   \   00001D   F5..         MOV     ?V1,A
   1859          
   1860            buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000022   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000025   8A..         MOV     ?V2,R2
   \   000027   8B..         MOV     ?V3,R3
   \   000029   AE..         MOV     R6,?V2
   \   00002B   AF..         MOV     R7,?V3
   1861            if ( buf == NULL )
   \   00002D   EE           MOV     A,R6
   \   00002E   4F           ORL     A,R7
   \   00002F   7005         JNZ     ??ZDP_MgmtNwkUpdateNotify_0
   1862            {
   1863              return afStatus_MEM_FAIL;
   \   000031   7910         MOV     R1,#0x10
   \   000033   02....       LJMP    ??ZDP_MgmtNwkUpdateNotify_1 & 0xFFFF
   1864            }
   1865          
   1866            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkUpdateNotify_0:
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   A3           INC     DPTR
   \   00003B   8582..       MOV     ?V2,DPL
   \   00003E   8583..       MOV     ?V3,DPH
   1867          
   1868            *pBuf++ = status;
   \   000041   E5..         MOV     A,?V7
   \   000043   12....       LCALL   ??Subroutine101_0 & 0xFFFF
   1869          
   1870            pBuf = osal_buffer_uint32( pBuf, scannedChannels );
   \                     ??CrossCallReturnLabel_153:
   \   000046                ; Setup parameters for call to function osal_buffer_uint32
   \   000046   7413         MOV     A,#0x13
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00004E   12....       LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000051   7404         MOV     A,#0x4
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
   \   000056   7417         MOV     A,#0x17
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   12....       LCALL   ?Subroutine53 & 0xFFFF
   1871          
   1872            *pBuf++ = LO_UINT16( totalTransmissions );
   \                     ??CrossCallReturnLabel_80:
   \   00005E   F0           MOVX    @DPTR,A
   1873            *pBuf++ = HI_UINT16( totalTransmissions );
   \   00005F   E9           MOV     A,R1
   \   000060   A3           INC     DPTR
   \   000061   F0           MOVX    @DPTR,A
   \   000062   7419         MOV     A,#0x19
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   12....       LCALL   ?Subroutine53 & 0xFFFF
   1874          
   1875            *pBuf++ = LO_UINT16( transmissionFailures );
   \                     ??CrossCallReturnLabel_81:
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   12....       LCALL   ?Subroutine35 & 0xFFFF
   1876            *pBuf++ = HI_UINT16( transmissionFailures );
   \                     ??CrossCallReturnLabel_45:
   \   00006F   12....       LCALL   ?Subroutine18 & 0xFFFF
   1877          
   1878            *pBuf++ = listCount;
   \                     ??CrossCallReturnLabel_13:
   \   000072   E5..         MOV     A,?V0
   \   000074   F0           MOVX    @DPTR,A
   1879          
   1880            if ( listCount > 0 )
   \   000075   601E         JZ      ??ZDP_MgmtNwkUpdateNotify_2
   1881              osal_memcpy( pBuf, energyValues, listCount );
   \   000077                ; Setup parameters for call to function osal_memcpy
   \   000077   741B         MOV     A,#0x1b
   \   000079   12....       LCALL   ?XSTACK_DISP0_8
   \   00007C   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000082   AC..         MOV     R4,?V0
   \   000084   7D00         MOV     R5,#0x0
   \   000086   EA           MOV     A,R2
   \   000087   2405         ADD     A,#0x5
   \   000089   FA           MOV     R2,A
   \   00008A   5001         JNC     ??ZDP_MgmtNwkUpdateNotify_3
   \   00008C   0B           INC     R3
   \                     ??ZDP_MgmtNwkUpdateNotify_3:
   \   00008D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000090   7403         MOV     A,#0x3
   \   000092   12....       LCALL   ?DEALLOC_XSTACK8
   1882          
   1883            FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
   \                     ??ZDP_MgmtNwkUpdateNotify_2:
   \   000095   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000098   E5..         MOV     A,?V2
   \   00009A   F0           MOVX    @DPTR,A
   \   00009B   A3           INC     DPTR
   \   00009C   E5..         MOV     A,?V3
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   741D         MOV     A,#0x1d
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000A8   F0           MOVX    @DPTR,A
   \   0000A9                ; Setup parameters for call to function fillAndSend
   \   0000A9   75..38       MOV     ?V2,#0x38
   \   0000AC   75..80       MOV     ?V3,#-0x80
   \   0000AF   78..         MOV     R0,#?V2
   \   0000B1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B4   A9..         MOV     R1,?V1
   \   0000B6   AC..         MOV     R4,?V8
   \   0000B8   AD..         MOV     R5,?V9
   \   0000BA   7402         MOV     A,#0x2
   \   0000BC   12....       LCALL   ?XSTACK_DISP101_8
   \   0000BF   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000C2   7402         MOV     A,#0x2
   \   0000C4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C7   E9           MOV     A,R1
   \   0000C8   F5..         MOV     ?V1,A
   \   0000CA                ; Setup parameters for call to function osal_mem_free
   \   0000CA   EE           MOV     A,R6
   \   0000CB   FA           MOV     R2,A
   \   0000CC   EF           MOV     A,R7
   \   0000CD   FB           MOV     R3,A
   \   0000CE   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000D1   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000D4   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   0000D6   F0           MOVX    @DPTR,A
   \   0000D7   A3           INC     DPTR
   \   0000D8   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   0000DA   F0           MOVX    @DPTR,A
   \   0000DB   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000DE   E4           CLR     A
   \   0000DF   F0           MOVX    @DPTR,A
   \   0000E0   A9..         MOV     R1,?V1
   \                     ??ZDP_MgmtNwkUpdateNotify_1:
   \   0000E2   02....       LJMP    ?Subroutine6 & 0xFFFF
   1884          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000003   A3           INC     DPTR
   \   000004   22           RET
   1885          
   1886          /*********************************************************************
   1887           * Functions to register for ZDO Over-the-air messages
   1888           */
   1889          
   1890          /*********************************************************************
   1891           * @fn          ZDO_RegisterForZDOMsg
   1892           *
   1893           * @brief       Call this function to register of an incoming over
   1894           *              the air ZDO message - probably a response message
   1895           *              but requests can also be received.
   1896           *              Messages are delivered to the task with ZDO_CB_MSG
   1897           *              as the message ID.
   1898           *
   1899           * @param       taskID - Where you would like the message delivered
   1900           * @param       clusterID - What message?
   1901           *                          ZDO_ALL_MSGS_CLUSTERID - all responses
   1902           *                          and device announce
   1903           *
   1904           * @return      ZSuccess - successful, ZMemError if not
   1905           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1906          ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
   \                     ZDO_RegisterForZDOMsg:
   1907          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   1908            ZDO_MsgCB_t *pList;
   1909            ZDO_MsgCB_t *pLast;
   1910            ZDO_MsgCB_t *pNew;
   1911          
   1912            // Look for duplicate
   1913            pList = pLast = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000011   EE           MOV     A,R6
   \   000012   F8           MOV     R0,A
   \   000013   EF           MOV     A,R7
   \   000014   8028         SJMP    ??CrossCallReturnLabel_255
   1914            while ( pList )
   1915            {
   1916              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   \                     ??ZDO_RegisterForZDOMsg_0:
   \   000016   8882         MOV     DPL,R0
   \   000018   8983         MOV     DPH,R1
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   65..         XRL     A,?V2
   \   00001F   7012         JNZ     ??ZDO_RegisterForZDOMsg_1
   \   000021   8882         MOV     DPL,R0
   \   000023   8983         MOV     DPH,R1
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   65..         XRL     A,?V0
   \   00002B   7004         JNZ     ??ZDO_RegisterForZDOMsg_2
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   65..         XRL     A,?V1
   \                     ??ZDO_RegisterForZDOMsg_2:
   \   000031   6051         JZ      ??CrossCallReturnLabel_37
   1917                return ( ZSuccess );
   1918              pLast = pList;
   \                     ??ZDO_RegisterForZDOMsg_1:
   \   000033   E8           MOV     A,R0
   \   000034   FE           MOV     R6,A
   \   000035   E9           MOV     A,R1
   \   000036   FF           MOV     R7,A
   1919              pList = (ZDO_MsgCB_t *)pList->next;
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   1920            }
   \                     ??CrossCallReturnLabel_255:
   \   00003E   F9           MOV     R1,A
   \   00003F   E8           MOV     A,R0
   \   000040   49           ORL     A,R1
   \   000041   70D3         JNZ     ??ZDO_RegisterForZDOMsg_0
   1921          
   1922            // Add to the list
   1923            pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
   \   000043                ; Setup parameters for call to function osal_mem_alloc
   \   000043   7A05         MOV     R2,#0x5
   \   000045   7B00         MOV     R3,#0x0
   \   000047   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00004A   8A..         MOV     ?V4,R2
   \   00004C   8B..         MOV     ?V5,R3
   \   00004E   A8..         MOV     R0,?V4
   \   000050   A9..         MOV     R1,?V5
   1924            if ( pNew )
   \   000052   E8           MOV     A,R0
   \   000053   49           ORL     A,R1
   \   000054   6032         JZ      ??ZDO_RegisterForZDOMsg_3
   1925            {
   1926              pNew->taskID = taskID;
   \   000056   8882         MOV     DPL,R0
   \   000058   8983         MOV     DPH,R1
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   E5..         MOV     A,?V2
   \   00005E   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   1927              pNew->clusterID = clusterID;
   \                     ??CrossCallReturnLabel_158:
   \   000061   E5..         MOV     A,?V0
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   E5..         MOV     A,?V1
   \   000067   12....       LCALL   ?Subroutine94 & 0xFFFF
   1928              pNew->next = NULL;
   \                     ??CrossCallReturnLabel_238:
   \   00006A   E4           CLR     A
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   F0           MOVX    @DPTR,A
   1929              if ( zdoMsgCBs )
   \   00006E   90....       MOV     DPTR,#zdoMsgCBs
   \   000071   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000074   EA           MOV     A,R2
   \   000075   4B           ORL     A,R3
   \   000076   6006         JZ      ??ZDO_RegisterForZDOMsg_4
   1930              {
   1931                pLast->next = pNew;
   \   000078   8E82         MOV     DPL,R6
   \   00007A   8F83         MOV     DPH,R7
   \   00007C   8003         SJMP    ??ZDO_RegisterForZDOMsg_5
   1932              }
   1933              else
   1934                zdoMsgCBs = pNew;
   \                     ??ZDO_RegisterForZDOMsg_4:
   \   00007E   90....       MOV     DPTR,#zdoMsgCBs
   \                     ??ZDO_RegisterForZDOMsg_5:
   \   000081   12....       LCALL   ?Subroutine30 & 0xFFFF
   1935              return ( ZSuccess );
   \                     ??CrossCallReturnLabel_37:
   \   000084   7900         MOV     R1,#0x0
   \   000086   8002         SJMP    ??ZDO_RegisterForZDOMsg_6
   1936            }
   1937            else
   1938              return ( ZMemError );
   \                     ??ZDO_RegisterForZDOMsg_3:
   \   000088   7910         MOV     R1,#0x10
   \                     ??ZDO_RegisterForZDOMsg_6:
   \   00008A   02....       LJMP    ??Subroutine98_0 & 0xFFFF
   1939          }
   1940          
   1941          /*********************************************************************
   1942           * @fn          ZDO_RemoveRegisteredCB
   1943           *
   1944           * @brief       Call this function if you don't want to receive the
   1945           *              incoming message.
   1946           *
   1947           * @param       taskID - Where the messages are being delivered.
   1948           * @param       clusterID - What message?
   1949           *
   1950           * @return      ZSuccess - successful, ZFailure if not found
   1951           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1952          ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
   \                     ZDO_RemoveRegisteredCB:
   1953          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1954            ZDO_MsgCB_t *pList;
   1955            ZDO_MsgCB_t *pLast = NULL;
   \   000007   7C00         MOV     R4,#0x0
   \   000009   7D00         MOV     R5,#0x0
   1956          
   1957            pList = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   8008         SJMP    ??ZDO_RemoveRegisteredCB_0
   1958            while ( pList )
   1959            {
   1960              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1961              {
   1962                if ( pLast )
   1963                {
   1964                  // remove this one from the linked list
   1965                  pLast->next = pList->next;
   1966                }
   1967                else if ( pList->next )
   1968                {
   1969                  // remove the first one from the linked list
   1970                  zdoMsgCBs = pList->next;
   1971                }
   1972                else
   1973                {
   1974                  // remove the only item from the list
   1975                  zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   1976                }
   1977                osal_mem_free( pList );
   1978                return ( ZSuccess );
   1979              }
   1980              pLast = pList;
   \                     ??ZDO_RemoveRegisteredCB_1:
   \   000010   E8           MOV     A,R0
   \   000011   FC           MOV     R4,A
   \   000012   E9           MOV     A,R1
   \   000013   FD           MOV     R5,A
   1981              pList = pList->next;
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \                     ??ZDO_RemoveRegisteredCB_0:
   \   000018   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00001B   49           ORL     A,R1
   \   00001C   6047         JZ      ??ZDO_RemoveRegisteredCB_2
   \   00001E   8882         MOV     DPL,R0
   \   000020   8983         MOV     DPH,R1
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   6E           XRL     A,R6
   \   000026   70E8         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   000028   8882         MOV     DPL,R0
   \   00002A   8983         MOV     DPH,R1
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6A           XRL     A,R2
   \   000031   7003         JNZ     ??ZDO_RemoveRegisteredCB_3
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6B           XRL     A,R3
   \                     ??ZDO_RemoveRegisteredCB_3:
   \   000036   70D8         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   000038   8882         MOV     DPL,R0
   \   00003A   8983         MOV     DPH,R1
   \   00003C   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   00003F   EC           MOV     A,R4
   \   000040   4D           ORL     A,R5
   \   000041   6006         JZ      ??ZDO_RemoveRegisteredCB_4
   \   000043   8C82         MOV     DPL,R4
   \   000045   8D83         MOV     DPH,R5
   \   000047   8007         SJMP    ??ZDO_RemoveRegisteredCB_5
   \                     ??ZDO_RemoveRegisteredCB_4:
   \   000049   EA           MOV     A,R2
   \   00004A   4B           ORL     A,R3
   \   00004B   90....       MOV     DPTR,#zdoMsgCBs
   \   00004E   6006         JZ      ??ZDO_RemoveRegisteredCB_6
   \                     ??ZDO_RemoveRegisteredCB_5:
   \   000050   EA           MOV     A,R2
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   EB           MOV     A,R3
   \   000054   8003         SJMP    ??ZDO_RemoveRegisteredCB_7
   \                     ??ZDO_RemoveRegisteredCB_6:
   \   000056   E4           CLR     A
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \                     ??ZDO_RemoveRegisteredCB_7:
   \   000059   F0           MOVX    @DPTR,A
   \   00005A                ; Setup parameters for call to function osal_mem_free
   \   00005A   E8           MOV     A,R0
   \   00005B   FA           MOV     R2,A
   \   00005C   E9           MOV     A,R1
   \   00005D   FB           MOV     R3,A
   \   00005E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000061   7900         MOV     R1,#0x0
   \   000063   8002         SJMP    ??ZDO_RemoveRegisteredCB_8
   1982            }
   1983          
   1984            return ( ZFailure );
   \                     ??ZDO_RemoveRegisteredCB_2:
   \   000065   7901         MOV     R1,#0x1
   \                     ??ZDO_RemoveRegisteredCB_8:
   \   000067   02....       LJMP    ?Subroutine7 & 0xFFFF
   1985          }
   1986          
   1987          /*********************************************************************
   1988           * @fn          ZDO_SendMsgCBs
   1989           *
   1990           * @brief       This function sends messages to registered tasks.
   1991           *              Local to ZDO and shouldn't be called outside of ZDO.
   1992           *
   1993           * @param       inMsg - incoming message
   1994           *
   1995           * @return      TRUE if sent to at least 1 task, FALSE if not
   1996           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1997          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDO_SendMsgCBs:
   1998          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   1999            uint8 ret = FALSE;
   \   000009   75..00       MOV     ?V4,#0x0
   2000            ZDO_MsgCB_t *pList = zdoMsgCBs;
   \   00000C   90....       MOV     DPTR,#zdoMsgCBs
   \   00000F   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000012   EA           MOV     A,R2
   \   000013   2410         ADD     A,#0x10
   \   000015   F5..         MOV     ?V8,A
   \   000017   E4           CLR     A
   \   000018   35..         ADDC    A,?V3
   \   00001A   F5..         MOV     ?V9,A
   \   00001C   02....       LJMP    ??CrossCallReturnLabel_163 & 0xFFFF
   2001            while ( pList )
   2002            {
   2003              if ( (pList->clusterID == inMsg->clusterID)
   2004                 || ((pList->clusterID == ZDO_ALL_MSGS_CLUSTERID)
   2005                     && ((inMsg->clusterID & ZDO_RESPONSE_BIT) || (inMsg->clusterID == Device_annce))) )
   \                     ??ZDO_SendMsgCBs_0:
   \   00001F   E5..         MOV     A,?V2
   \   000021   240C         ADD     A,#0xc
   \   000023   F582         MOV     DPL,A
   \   000025   E4           CLR     A
   \   000026   35..         ADDC    A,?V3
   \   000028   F583         MOV     DPH,A
   \   00002A   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   00002D   85..82       MOV     DPL,?V0
   \   000030   85..83       MOV     DPH,?V1
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000039   E8           MOV     A,R0
   \   00003A   6A           XRL     A,R2
   \   00003B   7002         JNZ     ??ZDO_SendMsgCBs_1
   \   00003D   E9           MOV     A,R1
   \   00003E   6B           XRL     A,R3
   \                     ??ZDO_SendMsgCBs_1:
   \   00003F   601B         JZ      ??ZDO_SendMsgCBs_2
   \   000041   74FF         MOV     A,#-0x1
   \   000043   6A           XRL     A,R2
   \   000044   7003         JNZ     ??ZDO_SendMsgCBs_3
   \   000046   74FF         MOV     A,#-0x1
   \   000048   6B           XRL     A,R3
   \                     ??ZDO_SendMsgCBs_3:
   \   000049   6003         JZ      $+5
   \   00004B   02....       LJMP    ??ZDO_SendMsgCBs_4 & 0xFFFF
   \   00004E   E9           MOV     A,R1
   \   00004F   5480         ANL     A,#0x80
   \   000051   7009         JNZ     ??ZDO_SendMsgCBs_2
   \   000053   7413         MOV     A,#0x13
   \   000055   68           XRL     A,R0
   \   000056   49           ORL     A,R1
   \   000057   6003         JZ      $+5
   \   000059   02....       LJMP    ??ZDO_SendMsgCBs_4 & 0xFFFF
   2006              {
   2007                zdoIncomingMsg_t *msgPtr;
   2008          
   2009                // Send the address to the task
   2010                msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
   \                     ??ZDO_SendMsgCBs_2:
   \   00005C                ; Setup parameters for call to function osal_msg_allocate
   \   00005C   85..82       MOV     DPL,?V8
   \   00005F   85..83       MOV     DPH,?V9
   \   000062   E0           MOVX    A,@DPTR
   \   000063   2417         ADD     A,#0x17
   \   000065   FA           MOV     R2,A
   \   000066   E4           CLR     A
   \   000067   3400         ADDC    A,#0x0
   \   000069   FB           MOV     R3,A
   \   00006A   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00006D   8A..         MOV     ?V6,R2
   \   00006F   8B..         MOV     ?V7,R3
   \   000071   AE..         MOV     R6,?V6
   \   000073   AF..         MOV     R7,?V7
   2011                if ( msgPtr )
   \   000075   EE           MOV     A,R6
   \   000076   4F           ORL     A,R7
   \   000077   607C         JZ      ??ZDO_SendMsgCBs_4
   2012                {
   2013                  // copy struct
   2014                  osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
   \   000079                ; Setup parameters for call to function osal_memcpy
   \   000079   85....       MOV     ?V4,?V2
   \   00007C   85....       MOV     ?V5,?V3
   \   00007F   75..00       MOV     ?V6,#0x0
   \   000082   78..         MOV     R0,#?V4
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000087   7C17         MOV     R4,#0x17
   \   000089   7D00         MOV     R5,#0x0
   \   00008B   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00008E   7403         MOV     A,#0x3
   \   000090   12....       LCALL   ?DEALLOC_XSTACK8
   2015          
   2016                  if ( inMsg->asduLen )
   \   000093   85..82       MOV     DPL,?V8
   \   000096   85..83       MOV     DPH,?V9
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   603E         JZ      ??ZDO_SendMsgCBs_5
   2017                  {
   2018                    msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
   \   00009C   EE           MOV     A,R6
   \   00009D   2417         ADD     A,#0x17
   \   00009F   FA           MOV     R2,A
   \   0000A0   E4           CLR     A
   \   0000A1   3F           ADDC    A,R7
   \   0000A2   FB           MOV     R3,A
   \   0000A3   EE           MOV     A,R6
   \   0000A4   2413         ADD     A,#0x13
   \   0000A6   F582         MOV     DPL,A
   \   0000A8   E4           CLR     A
   \   0000A9   3F           ADDC    A,R7
   \   0000AA   F583         MOV     DPH,A
   \   0000AC   EA           MOV     A,R2
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   EB           MOV     A,R3
   \   0000B0   F0           MOVX    @DPTR,A
   2019                    osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
   \   0000B1                ; Setup parameters for call to function osal_memcpy
   \   0000B1   E5..         MOV     A,?V2
   \   0000B3   2413         ADD     A,#0x13
   \   0000B5   F582         MOV     DPL,A
   \   0000B7   E4           CLR     A
   \   0000B8   35..         ADDC    A,?V3
   \   0000BA   F583         MOV     DPH,A
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F5..         MOV     ?V4,A
   \   0000BF   A3           INC     DPTR
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   F5..         MOV     ?V5,A
   \   0000C3   78..         MOV     R0,#?V4
   \   0000C5   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C8   85..82       MOV     DPL,?V8
   \   0000CB   85..83       MOV     DPH,?V9
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   FC           MOV     R4,A
   \   0000D0   7D00         MOV     R5,#0x0
   \   0000D2   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000D5   7403         MOV     A,#0x3
   \   0000D7   12....       LCALL   ?DEALLOC_XSTACK8
   2020                  }
   2021          
   2022                  msgPtr->hdr.event = ZDO_CB_MSG;
   \                     ??ZDO_SendMsgCBs_5:
   \   0000DA   8E82         MOV     DPL,R6
   \   0000DC   8F83         MOV     DPH,R7
   \   0000DE   74D3         MOV     A,#-0x2d
   \   0000E0   F0           MOVX    @DPTR,A
   2023                  osal_msg_send( pList->taskID, (uint8 *)msgPtr );
   \   0000E1                ; Setup parameters for call to function osal_msg_send
   \   0000E1   EE           MOV     A,R6
   \   0000E2   FA           MOV     R2,A
   \   0000E3   EF           MOV     A,R7
   \   0000E4   FB           MOV     R3,A
   \   0000E5   85..82       MOV     DPL,?V0
   \   0000E8   85..83       MOV     DPH,?V1
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   F9           MOV     R1,A
   \   0000EF   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2024                  ret = TRUE;
   \   0000F2   75..01       MOV     ?V4,#0x1
   2025                }
   2026              }
   2027              pList = (ZDO_MsgCB_t *)pList->next;
   \                     ??ZDO_SendMsgCBs_4:
   \   0000F5   85..82       MOV     DPL,?V0
   \   0000F8   85..83       MOV     DPH,?V1
   \   0000FB   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   2028            }
   \                     ??CrossCallReturnLabel_163:
   \   0000FE   E5..         MOV     A,?V0
   \   000100   45..         ORL     A,?V1
   \   000102   6003         JZ      $+5
   \   000104   02....       LJMP    ??ZDO_SendMsgCBs_0 & 0xFFFF
   2029            return ( ret );
   \   000107   A9..         MOV     R1,?V4
   \   000109   02....       LJMP    ??Subroutine110_0 & 0xFFFF
   2030          }
   2031          
   2032          /*********************************************************************
   2033           * Incoming message processor
   2034           */
   2035          
   2036          /*********************************************************************
   2037           * @fn          ZDP_IncomingData
   2038           *
   2039           * @brief       This function indicates the transfer of a data PDU (ASDU)
   2040           *              from the APS sub-layer to the ZDO.
   2041           *
   2042           * @param       pData - Incoming Message
   2043           *
   2044           * @return      none
   2045           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2046          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   2047          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV     A,#-0x17
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2048            uint8 x = 0;
   \   00000A   7E00         MOV     R6,#0x0
   2049            uint8 handled;
   2050            zdoIncomingMsg_t inMsg;
   2051          
   2052            inMsg.srcAddr.addrMode = Addr16Bit;
   \   00000C   740A         MOV     A,#0xa
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   7402         MOV     A,#0x2
   \   000013   12....       LCALL   ?Subroutine18 & 0xFFFF
   2053            inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_14:
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   00001B   7402         MOV     A,#0x2
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ?Subroutine30 & 0xFFFF
   2054            inMsg.wasBroadcast = pData->wasBroadcast;
   \                     ??CrossCallReturnLabel_38:
   \   000023   EA           MOV     A,R2
   \   000024   2415         ADD     A,#0x15
   \   000026   F582         MOV     DPL,A
   \   000028   E4           CLR     A
   \   000029   3B           ADDC    A,R3
   \   00002A   F583         MOV     DPH,A
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   C0E0         PUSH    A
   \   00002F   740B         MOV     A,#0xb
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   D0E0         POP     A
   \   000036   12....       LCALL   ?Subroutine18 & 0xFFFF
   2055            inMsg.clusterID = pData->clusterId;
   \                     ??CrossCallReturnLabel_15:
   \   000039   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   00003C   740C         MOV     A,#0xc
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   12....       LCALL   ?Subroutine30 & 0xFFFF
   2056            inMsg.SecurityUse = pData->SecurityUse;
   \                     ??CrossCallReturnLabel_39:
   \   000044   EA           MOV     A,R2
   \   000045   2419         ADD     A,#0x19
   \   000047   F582         MOV     DPL,A
   \   000049   E4           CLR     A
   \   00004A   3B           ADDC    A,R3
   \   00004B   F583         MOV     DPH,A
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   C0E0         PUSH    A
   \   000050   740E         MOV     A,#0xe
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   D0E0         POP     A
   \   000057   F0           MOVX    @DPTR,A
   2057          
   2058            inMsg.asduLen = pData->cmd.DataLength-1;
   \   000058   EA           MOV     A,R2
   \   000059   2420         ADD     A,#0x20
   \   00005B   F582         MOV     DPL,A
   \   00005D   E4           CLR     A
   \   00005E   3B           ADDC    A,R3
   \   00005F   F583         MOV     DPH,A
   \   000061   E0           MOVX    A,@DPTR
   \   000062   14           DEC     A
   \   000063   C0E0         PUSH    A
   \   000065   7410         MOV     A,#0x10
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   D0E0         POP     A
   \   00006C   F0           MOVX    @DPTR,A
   2059            inMsg.asdu = pData->cmd.Data+1;
   \   00006D   EA           MOV     A,R2
   \   00006E   2422         ADD     A,#0x22
   \   000070   F8           MOV     R0,A
   \   000071   E4           CLR     A
   \   000072   3B           ADDC    A,R3
   \   000073   F9           MOV     R1,A
   \   000074   8882         MOV     DPL,R0
   \   000076   8983         MOV     DPH,R1
   \   000078   E0           MOVX    A,@DPTR
   \   000079   2401         ADD     A,#0x1
   \   00007B   FC           MOV     R4,A
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   3400         ADDC    A,#0x0
   \   000080   FD           MOV     R5,A
   \   000081   7413         MOV     A,#0x13
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   EC           MOV     A,R4
   \   000087   F0           MOVX    @DPTR,A
   \   000088   A3           INC     DPTR
   \   000089   ED           MOV     A,R5
   \   00008A   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   2060            inMsg.TransSeq = pData->cmd.Data[0];
   \                     ??CrossCallReturnLabel_161:
   \   00008D   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000090   E0           MOVX    A,@DPTR
   \   000091   C0E0         PUSH    A
   \   000093   740F         MOV     A,#0xf
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   D0E0         POP     A
   \   00009A   F0           MOVX    @DPTR,A
   2061            inMsg.macDestAddr = pData->macDestAddr;
   \   00009B   EA           MOV     A,R2
   \   00009C   2412         ADD     A,#0x12
   \   00009E   F582         MOV     DPL,A
   \   0000A0   E4           CLR     A
   \   0000A1   3B           ADDC    A,R3
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   0000A7   7411         MOV     A,#0x11
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   12....       LCALL   ?Subroutine30 & 0xFFFF
   2062            inMsg.macSrcAddr = pData->macSrcAddr;
   \                     ??CrossCallReturnLabel_40:
   \   0000AF   EA           MOV     A,R2
   \   0000B0   2424         ADD     A,#0x24
   \   0000B2   F582         MOV     DPL,A
   \   0000B4   E4           CLR     A
   \   0000B5   3B           ADDC    A,R3
   \   0000B6   F583         MOV     DPH,A
   \   0000B8   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   0000BB   7415         MOV     A,#0x15
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   12....       LCALL   ?Subroutine30 & 0xFFFF
   2063          
   2064            handled = ZDO_SendMsgCBs( &inMsg );
   \                     ??CrossCallReturnLabel_41:
   \   0000C3                ; Setup parameters for call to function ZDO_SendMsgCBs
   \   0000C3   AA..         MOV     R2,?XSP + 0
   \   0000C5   AB..         MOV     R3,?XSP + 1
   \   0000C7   12....       LCALL   `??ZDO_SendMsgCBs::?relay`; Banked call to: ZDO_SendMsgCBs
   \   0000CA   E9           MOV     A,R1
   \   0000CB   FC           MOV     R4,A
   \   0000CC   8001         SJMP    ??ZDP_IncomingData_0
   2065          
   2066          #if (defined MT_ZDO_CB_FUNC)
   2067          #if !defined MT_TASK
   2068            if (zgZdoDirectCB)
   2069          #endif
   2070            {
   2071              MT_ZdoDirectCB( pData, &inMsg );
   2072            }
   2073          #endif
   2074          
   2075            while ( zdpMsgProcs[x].clusterID != 0xFFFF )
   2076            {
   2077              if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
   2078              {
   2079                zdpMsgProcs[x].pFn( &inMsg );
   2080                return;
   2081              }
   2082              x++;
   \                     ??ZDP_IncomingData_1:
   \   0000CE   0E           INC     R6
   \                     ??ZDP_IncomingData_0:
   \   0000CF   8E..         MOV     ?V0,R6
   \   0000D1   75..00       MOV     ?V1,#0x0
   \   0000D4   7402         MOV     A,#0x2
   \   0000D6   78..         MOV     R0,#?V0
   \   0000D8   12....       LCALL   ?S_SHL
   \   0000DB   74..         MOV     A,#zdpMsgProcs & 0xff
   \   0000DD   25..         ADD     A,?V0
   \   0000DF   F8           MOV     R0,A
   \   0000E0   74..         MOV     A,#(zdpMsgProcs >> 8) & 0xff
   \   0000E2   35..         ADDC    A,?V1
   \   0000E4   F9           MOV     R1,A
   \   0000E5   8882         MOV     DPL,R0
   \   0000E7   8983         MOV     DPH,R1
   \   0000E9   E4           CLR     A
   \   0000EA   93           MOVC    A,@A+DPTR
   \   0000EB   C0E0         PUSH    A
   \   0000ED   7401         MOV     A,#0x1
   \   0000EF   93           MOVC    A,@A+DPTR
   \   0000F0   F583         MOV     DPH,A
   \   0000F2   D082         POP     DPL
   \   0000F4   AA82         MOV     R2,DPL
   \   0000F6   AB83         MOV     R3,DPH
   \   0000F8   74FF         MOV     A,#-0x1
   \   0000FA   6A           XRL     A,R2
   \   0000FB   7003         JNZ     ??ZDP_IncomingData_2
   \   0000FD   74FF         MOV     A,#-0x1
   \   0000FF   6B           XRL     A,R3
   \                     ??ZDP_IncomingData_2:
   \   000100   6028         JZ      ??ZDP_IncomingData_3
   \   000102   740C         MOV     A,#0xc
   \   000104   12....       LCALL   ?XSTACK_DISP0_8
   \   000107   E0           MOVX    A,@DPTR
   \   000108   6A           XRL     A,R2
   \   000109   7003         JNZ     ??ZDP_IncomingData_4
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   6B           XRL     A,R3
   \                     ??ZDP_IncomingData_4:
   \   00010E   70BE         JNZ     ??ZDP_IncomingData_1
   \   000110                ; Setup parameters for indirect call
   \   000110   AA..         MOV     R2,?XSP + 0
   \   000112   AB..         MOV     R3,?XSP + 1
   \   000114   8882         MOV     DPL,R0
   \   000116   8983         MOV     DPH,R1
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   E4           CLR     A
   \   00011B   93           MOVC    A,@A+DPTR
   \   00011C   C0E0         PUSH    A
   \   00011E   7401         MOV     A,#0x1
   \   000120   93           MOVC    A,@A+DPTR
   \   000121   F583         MOV     DPH,A
   \   000123   D082         POP     DPL
   \   000125   12....       LCALL   ?CALL_IND
   \   000128   800A         SJMP    ??ZDP_IncomingData_5
   2083            }
   2084          
   2085            // Handle unhandled messages
   2086            if ( !handled )
   \                     ??ZDP_IncomingData_3:
   \   00012A   EC           MOV     A,R4
   \   00012B   7007         JNZ     ??ZDP_IncomingData_5
   2087              ZDApp_InMsgCB( &inMsg );
   \   00012D                ; Setup parameters for call to function ZDApp_InMsgCB
   \   00012D   AA..         MOV     R2,?XSP + 0
   \   00012F   AB..         MOV     R3,?XSP + 1
   \   000131   12....       LCALL   `??ZDApp_InMsgCB::?relay`; Banked call to: ZDApp_InMsgCB
   2088          }
   \                     ??ZDP_IncomingData_5:
   \   000134   7417         MOV     A,#0x17
   \   000136   02....       LJMP    ??Subroutine100_0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ZDP_Buf + 1H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_a:
   \   000000   0A000000     DD 10

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??fillAndSend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    fillAndSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SendData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NWKAddrOfInterestReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NWKAddrOfInterestReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NwkAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NwkAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_IEEEAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IEEEAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MatchDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SimpleDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_UserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_ServerDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_DeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_DeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_ParentAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ParentAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zdpProcessAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdpProcessAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NodeDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NodeDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_PowerDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_PowerDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SimpleDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_EPRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EPRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_UserDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_ServerDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_GenericRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_GenericRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_EndDeviceBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_BindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_BindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtDirectJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtPermitJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtLeaveReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkUpdateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtLqiRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtRtgRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkUpdateNotify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RegisterForZDOMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RemoveRegisteredCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SendMsgCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SendMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_IncomingData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IncomingData
   2089          
   2090          /*********************************************************************
   2091          *********************************************************************/
   2092          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     14   ZDO_RegisterForZDOMsg
        0     14   -> osal_mem_alloc
      0      9   ZDO_RemoveRegisteredCB
        0      9   -> osal_mem_free
      0     54   ZDO_SendMsgCBs
        0     21   -> osal_memcpy
        0     18   -> osal_msg_allocate
        0     18   -> osal_msg_send
      1     28   ZDP_BindUnbindReq
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
        1     18   -> sAddrExtCpy
      1     22   ZDP_DeviceAnnce
        0     21   -> fillAndSend
        0     19   -> sAddrExtCpy
      1     26   ZDP_EPRsp
        0     18   -> fillAndSend
        0     19   -> osal_memcpy
      1     29   ZDP_EndDeviceBindReq
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_GetShortAddr
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
      1     16   ZDP_GenericRsp
        0     12   -> fillAndSend
      1     21   ZDP_IEEEAddrReq
        0     21   -> fillAndSend
      1     33   ZDP_IncomingData
        0     33   -> ZDApp_InMsgCB
        0     33   -> ZDO_SendMsgCBs
      1     24   ZDP_MatchDescReq
        0     16   -> fillAndSend
      1     30   ZDP_MgmtBindRsp
        0     25   -> fillAndSend
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     23   -> sAddrExtCpy
      1     15   ZDP_MgmtDirectJoinReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      0     16   ZDP_MgmtLeaveReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      1     29   ZDP_MgmtLqiRsp
        0     24   -> fillAndSend
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     22   -> sAddrExtCpy
      1     20   ZDP_MgmtNwkDiscReq
        0     14   -> fillAndSend
        0     16   -> osal_buffer_uint32
      1     30   ZDP_MgmtNwkDiscRsp
        0     25   -> fillAndSend
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     23   -> sAddrExtCpy
      1     35   ZDP_MgmtNwkUpdateNotify
        0     21   -> fillAndSend
        0     23   -> osal_buffer_uint32
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> osal_memcpy
      1     24   ZDP_MgmtNwkUpdateReq
        0     16   -> fillAndSend
        0     18   -> osal_buffer_uint32
      1     23   ZDP_MgmtPermitJoinReq
        0     21   -> NLME_GetShortAddr
        0     23   -> fillAndSend
      1     28   ZDP_MgmtRtgRsp
        0     23   -> fillAndSend
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
      1     13   ZDP_NWKAddrOfInterestReq
        0     12   -> fillAndSend
      1     14   ZDP_NodeDescMsg
        0     12   -> fillAndSend
      1     23   ZDP_NwkAddrReq
        0     23   -> fillAndSend
        0     21   -> sAddrExtCmp
        0     21   -> sAddrExtCpy
      1     31   ZDP_ParentAnnce
        0     22   -> ZDApp_SetParentAnnceTimer
        0     24   -> fillAndSend
        0     26   -> osal_start_timerEx
        0     22   -> sAddrExtCpy
      1     14   ZDP_PowerDescMsg
        0     12   -> fillAndSend
      1     19   ZDP_SendData
        0     14   -> fillAndSend
      1     21   ZDP_ServerDiscReq
        0     21   -> fillAndSend
      1     17   ZDP_ServerDiscRsp
        0     13   -> fillAndSend
      1     22   ZDP_SimpleDescMsg
        0     22   -> fillAndSend
      1     13   ZDP_SimpleDescReq
        0     12   -> fillAndSend
      1     25   ZDP_UserDescRsp
        0     21   -> fillAndSend
        0     22   -> osal_memcpy
      1     20   ZDP_UserDescSet
        0     17   -> fillAndSend
        0     18   -> osal_memcpy
        0     15   -> osal_memset
      1     60   fillAndSend
        0     35   -> AF_DataRequest
        0     26   -> osal_memset
      1     19   zdpProcessAddrReq
        0     19   -> fillAndSend
        0     17   -> sAddrExtCmp
        0     17   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDP_TmpBuf>
       8  ??Subroutine100_0
       7  ??Subroutine101_0
       6  ??Subroutine102_0
       8  ??Subroutine103_0
       5  ??Subroutine104_0
       8  ??Subroutine105_0
       5  ??Subroutine106_0
       4  ??Subroutine107_0
       8  ??Subroutine108_0
       8  ??Subroutine109_0
       5  ??Subroutine110_0
       4  ??Subroutine111_0
       3  ??Subroutine112_0
       6  ??Subroutine113_0
       8  ??Subroutine114_0
       6  ??Subroutine115_0
       6  ??Subroutine116_0
       6  ??Subroutine117_0
       6  ??Subroutine118_0
       1  ??Subroutine119_0
       4  ??Subroutine120_0
       3  ??Subroutine121_0
       4  ??Subroutine122_0
       5  ??Subroutine123_0
      13  ??Subroutine95_0
       3  ??Subroutine96_0
       5  ??Subroutine97_0
       5  ??Subroutine98_0
       2  ??Subroutine99_0
       3  ?Subroutine0
      10  ?Subroutine1
      17  ?Subroutine10
      16  ?Subroutine11
      36  ?Subroutine12
       7  ?Subroutine13
      20  ?Subroutine14
       4  ?Subroutine15
       3  ?Subroutine16
       9  ?Subroutine17
       5  ?Subroutine18
       9  ?Subroutine19
      17  ?Subroutine2
       5  ?Subroutine20
      21  ?Subroutine21
       9  ?Subroutine22
       4  ?Subroutine23
       6  ?Subroutine24
      13  ?Subroutine25
       9  ?Subroutine26
      11  ?Subroutine27
       5  ?Subroutine28
       2  ?Subroutine29
       8  ?Subroutine3
       6  ?Subroutine30
       3  ?Subroutine31
      11  ?Subroutine32
       2  ?Subroutine33
       2  ?Subroutine34
       5  ?Subroutine35
      10  ?Subroutine36
      10  ?Subroutine37
       9  ?Subroutine38
       9  ?Subroutine39
       2  ?Subroutine4
       6  ?Subroutine40
       4  ?Subroutine41
       3  ?Subroutine42
       7  ?Subroutine43
       9  ?Subroutine44
       8  ?Subroutine45
      13  ?Subroutine46
       5  ?Subroutine47
       4  ?Subroutine48
       3  ?Subroutine49
       5  ?Subroutine5
      13  ?Subroutine50
      10  ?Subroutine51
       8  ?Subroutine52
       4  ?Subroutine53
      15  ?Subroutine54
       7  ?Subroutine55
       7  ?Subroutine56
       4  ?Subroutine57
       2  ?Subroutine58
      10  ?Subroutine59
       5  ?Subroutine6
       6  ?Subroutine60
       5  ?Subroutine61
       5  ?Subroutine62
       4  ?Subroutine63
       4  ?Subroutine64
       4  ?Subroutine65
       1  ?Subroutine66
       8  ?Subroutine67
      12  ?Subroutine68
      10  ?Subroutine69
       5  ?Subroutine7
       6  ?Subroutine70
      10  ?Subroutine71
       6  ?Subroutine72
      11  ?Subroutine73
       5  ?Subroutine74
       1  ?Subroutine75
       5  ?Subroutine76
      15  ?Subroutine77
       1  ?Subroutine78
       5  ?Subroutine79
       8  ?Subroutine8
       4  ?Subroutine80
       9  ?Subroutine81
       6  ?Subroutine82
      16  ?Subroutine83
       9  ?Subroutine84
       5  ?Subroutine85
       6  ?Subroutine86
       9  ?Subroutine87
       9  ?Subroutine88
       9  ?Subroutine89
      16  ?Subroutine9
      12  ?Subroutine90
       3  ?Subroutine91
       9  ?Subroutine92
       8  ?Subroutine93
       6  ?Subroutine94
     141  ZDO_RegisterForZDOMsg
       6  ZDO_RegisterForZDOMsg::?relay
     106  ZDO_RemoveRegisteredCB
       6  ZDO_RemoveRegisteredCB::?relay
     268  ZDO_SendMsgCBs
       6  ZDO_SendMsgCBs::?relay
       1  ZDP_AF_ENDPOINT
     197  ZDP_BindUnbindReq
       6  ZDP_BindUnbindReq::?relay
      80  ZDP_Buf
      74  ZDP_DeviceAnnce
       6  ZDP_DeviceAnnce::?relay
     162  ZDP_EPRsp
       6  ZDP_EPRsp::?relay
     299  ZDP_EndDeviceBindReq
       6  ZDP_EndDeviceBindReq::?relay
      87  ZDP_GenericRsp
       6  ZDP_GenericRsp::?relay
      72  ZDP_IEEEAddrReq
       6  ZDP_IEEEAddrReq::?relay
     313  ZDP_IncomingData
       6  ZDP_IncomingData::?relay
     243  ZDP_MatchDescReq
       6  ZDP_MatchDescReq::?relay
     289  ZDP_MgmtBindRsp
       6  ZDP_MgmtBindRsp::?relay
      32  ZDP_MgmtDirectJoinReq
       6  ZDP_MgmtDirectJoinReq::?relay
      61  ZDP_MgmtLeaveReq
       6  ZDP_MgmtLeaveReq::?relay
     379  ZDP_MgmtLqiRsp
       6  ZDP_MgmtLqiRsp::?relay
      59  ZDP_MgmtNwkDiscReq
       6  ZDP_MgmtNwkDiscReq::?relay
     334  ZDP_MgmtNwkDiscRsp
       6  ZDP_MgmtNwkDiscRsp::?relay
     229  ZDP_MgmtNwkUpdateNotify
       6  ZDP_MgmtNwkUpdateNotify::?relay
     129  ZDP_MgmtNwkUpdateReq
       6  ZDP_MgmtNwkUpdateReq::?relay
     159  ZDP_MgmtPermitJoinReq
       6  ZDP_MgmtPermitJoinReq::?relay
     320  ZDP_MgmtRtgRsp
       6  ZDP_MgmtRtgRsp::?relay
      26  ZDP_NWKAddrOfInterestReq
       6  ZDP_NWKAddrOfInterestReq::?relay
     204  ZDP_NodeDescMsg
       6  ZDP_NodeDescMsg::?relay
     103  ZDP_NwkAddrReq
       6  ZDP_NwkAddrReq::?relay
     262  ZDP_ParentAnnce
       6  ZDP_ParentAnnce::?relay
      80  ZDP_PowerDescMsg
       6  ZDP_PowerDescMsg::?relay
     108  ZDP_SendData
       6  ZDP_SendData::?relay
      81  ZDP_ServerDiscReq
       6  ZDP_ServerDiscReq::?relay
      97  ZDP_ServerDiscRsp
       6  ZDP_ServerDiscRsp::?relay
     398  ZDP_SimpleDescMsg
       6  ZDP_SimpleDescMsg::?relay
      27  ZDP_SimpleDescReq
       6  ZDP_SimpleDescReq::?relay
       2  ZDP_TmpBuf
       1  ZDP_TransID
       1  ZDP_TxOptions
     138  ZDP_UserDescRsp
       6  ZDP_UserDescRsp::?relay
     111  ZDP_UserDescSet
       6  ZDP_UserDescSet::?relay
       4  __Constant_a
       1  childIndex
     160  fillAndSend
       6  fillAndSend::?relay
       2  zdoMsgCBs
      48  zdpMsgProcs
     331  zdpProcessAddrReq
       6  zdpProcessAddrReq::?relay

 
 6 984 bytes in segment BANKED_CODE
   210 bytes in segment BANK_RELAYS
    49 bytes in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
     4 bytes in segment XDATA_ROM_C
    85 bytes in segment XDATA_Z
 
 7 245 bytes of CODE  memory
     0 bytes of CONST memory (+ 4 bytes shared)
    87 bytes of XDATA memory

Errors: none
Warnings: none
