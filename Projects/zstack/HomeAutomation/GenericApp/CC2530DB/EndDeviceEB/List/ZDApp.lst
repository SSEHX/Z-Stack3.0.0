###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                03/Nov/2017  19:06:17
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack 3.0.0\Components\stack\zdo\ZDApp.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
#        Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack 3.0.0\Components\stack\zdo\ZDApp.c" -D
#        SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xPOWER_SAVING
#        -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
#        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LEGACY_LCD_DEBUG -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES -D
#        ZCL_GROUPS -lC "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List"
#        -lA "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\" -I
#        "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List\ZDApp.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\Obj\ZDApp.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack 3.0.0\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2015-10-06 12:04:24 -0700 (Tue, 06 Oct 2015) $
      4            Revision:       $Revision: 44520 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMAC.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66             
     67          //GP_UPDATE
     68          #include "gp_common.h"
     69          
     70             
     71          #include "bdb.h"
     72          #include "bdb_interface.h"
     73          
     74          #include "ssp.h"
     75          
     76          /* HAL */
     77          #include "hal_led.h"
     78          #include "hal_lcd.h"
     79          #include "hal_key.h"
     80          
     81          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     82            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     83          #endif
     84          
     85          /*********************************************************************
     86           * CONSTANTS
     87           */
     88          
     89          #if !defined( NWK_START_DELAY )
     90            #define NWK_START_DELAY             100   // in milliseconds
     91          #endif
     92          
     93          #if !defined( LEAVE_RESET_DELAY )
     94            #define LEAVE_RESET_DELAY           5000  // in milliseconds
     95          #endif
     96          
     97          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     98            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     99          #endif
    100          
    101          #if !defined( BEACON_REQUEST_DELAY )
    102            #define BEACON_REQUEST_DELAY        100   // in milliseconds
    103          #endif
    104          
    105          #if !defined( BEACON_REQ_DELAY_MASK )
    106            #define BEACON_REQ_DELAY_MASK       0x007F
    107          #endif
    108          
    109          #define MAX_RESUME_RETRY            3
    110          
    111          #define MAX_DEVICE_UNAUTH_TIMEOUT   10000  // 10 seconds
    112          
    113          // Beacon Order Settings (see NLMEDE.h)
    114          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    115          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    116          
    117          // Leave control bits
    118          #define ZDAPP_LEAVE_CTRL_INIT 0
    119          #define ZDAPP_LEAVE_CTRL_SET  1
    120          #define ZDAPP_LEAVE_CTRL_RA   2
    121          
    122          // Address Manager Stub Implementation
    123          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    124          
    125          
    126          #if !defined ZDO_NV_SAVE_RFDs
    127          #define ZDO_NV_SAVE_RFDs  TRUE
    128          #endif
    129          
    130          // Delay time before updating NWK NV data to force fewer writes during high activity.
    131          #if ZDO_NV_SAVE_RFDs
    132          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    133          #else
    134          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    135          #endif
    136          
    137          // Timeout value to process New Devices
    138          #define ZDAPP_NEW_DEVICE_TIME     600   // in ms
    139          
    140          
    141          //ZDP_BIND_SKIP_VALIDATION, redefined as ZDP_BIND_VALIDATION
    142          #if defined ( ZDP_BIND_VALIDATION )
    143          #if !defined MAX_PENDING_BIND_REQ
    144          #define MAX_PENDING_BIND_REQ 3
    145          #endif
    146          #endif
    147          
    148          #ifdef LEGACY_ZDO_LEDS
    149          #define zdoHalLedSet HalLedSet
    150          #else
    151          #define zdoHalLedSet(...)
    152          #endif
    153          
    154          /******************************************************************************
    155           * TYPEDEFS
    156           */
    157          typedef struct
    158          {
    159            void   *next;
    160            uint16 shortAddr;
    161            uint16 timeDelta;
    162          } ZDAppNewDevice_t;
    163          
    164          /*********************************************************************
    165           * GLOBAL VARIABLES
    166           */
    167          
    168          #if defined( LCD_SUPPORTED )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169            uint8 MatchRsps = 0;
   \                     MatchRsps:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    170          #endif
    171          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    173          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    177          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    179          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    180          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    181          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    183          
    184          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    186          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    188          
    189          #if defined ( ZDP_BIND_VALIDATION )
    190          ZDO_PendingBindReq_t *ZDAppPendingBindReq = NULL;
    191          #endif
    192          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          uint32 runtimeChannel;
   \                     runtimeChannel:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    194          uint8 FrameCounterUpdated = FALSE;
   \                     FrameCounterUpdated:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    195          /*********************************************************************
    196           * EXTERNAL VARIABLES
    197           */
    198          
    199          extern bool    requestNewTrustCenterLinkKey;
    200          extern uint32  requestLinkKeyTimeout;
    201          extern CONST   uint8 gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES;
    202          /*********************************************************************
    203           * EXTERNAL FUNCTIONS
    204           */
    205          
    206          /*********************************************************************
    207           * LOCAL FUNCTIONS
    208           */
    209          void ZDApp_NetworkStartEvt( void );
    210          void ZDApp_DeviceAuthEvt( void );
    211          void ZDApp_SaveNetworkStateEvt( void );
    212          
    213          uint8 ZDApp_ReadNetworkRestoreState( void );
    214          uint8 ZDApp_RestoreNetworkState( void );
    215          void ZDAppDetermineDeviceType( void );
    216          void ZDApp_InitUserDesc( void );
    217          void ZDAppCheckForHoldKey( void );
    218          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    219          void ZDApp_ProcessNetworkJoin( void );
    220          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    221          uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
    222          networkDesc_t* ZDApp_NwkDescListProcessing(void);
    223          
    224          void ZDApp_SecInit( uint8 state );
    225          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    226          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    227          
    228          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    229          
    230          void ZDApp_ResetTimerStart( uint16 delay );
    231          void ZDApp_ResetTimerCancel( void );
    232          void ZDApp_LeaveCtrlInit( void );
    233          void ZDApp_LeaveCtrlSet( uint8 ra );
    234          uint8 ZDApp_LeaveCtrlBypass( void );
    235          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    236          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr, uint8 removeChildren, uint8 rejoin );
    237          void ZDApp_NodeProfileSync( uint8 stackProfile );
    238          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    239          void ZDApp_RegisterCBs( void );
    240          void ZDApp_InitZdoCBFunc(void);
    241          #if defined ( ZDP_BIND_VALIDATION )
    242          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq );
    243          void ZDApp_InitPendingBind( void );
    244          void ZDApp_ProcessPendingBindReq( uint8 *extAddr );
    245          void ZDApp_AgeOutPendingBindEntry( void );
    246          #endif
    247          
    248          void ZDApp_SetParentAnnceTimer( void );
    249          void ZDApp_StoreNwkSecMaterial(void);
    250          
    251          /*********************************************************************
    252           * LOCAL VARIABLES
    253           */
    254          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    255          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    256          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    257          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    258          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    259          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    260          devStates_t devState = DEV_HOLD;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    261          
    262          // previous rejoin state

   \                                 In  segment XDATA_I, align 1, keep-with-next
    263            devStates_t prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \                     prevDevState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for prevDevState>`
   \   000001                REQUIRE __INIT_XDATA_I
    264          
    265          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    266            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    267            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    268                                  // to parent. Set to make the device do an Orphan scan.
    269          #else
    270            // Set the default to coodinator
    271            devStartModes_t devStartMode = MODE_HARD;
    272          #endif
    273          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    274          uint8 retryCnt = 0;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    275          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    276          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000007                REQUIRE __INIT_XDATA_I
    277          {
    278            ZDO_EP,
    279            0,
    280            &ZDAppTaskID,
    281            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    282            (afNetworkLatencyReq_t)0            // No Network Latency req
    283          };
    284          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    285          uint32 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000004                REQUIRE __INIT_XDATA_I
    286          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    287          ZDAppNewDevice_t *ZDApp_NewDeviceList = NULL;
   \                     ZDApp_NewDeviceList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    288          
    289          /* "Hold Key" status saved during ZDAppCheckForHoldKey() */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    290          static uint8 zdappHoldKeys;
   \                     zdappHoldKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    291          
    292          /*********************************************************************
    293           * @fn      ZDApp_Init
    294           *
    295           * @brief   ZDApp Initialization function.
    296           *
    297           * @param   task_id - ZDApp Task ID
    298           *
    299           * @return  None
    300           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    301          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    302          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    303            // Save the task ID
    304            ZDAppTaskID = task_id;
   \   000006   90....       MOV     DPTR,#ZDAppTaskID
   \   000009   F0           MOVX    @DPTR,A
    305          
    306            // Initialize the ZDO global device short address storage
    307            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000A   90....       MOV     DPTR,#ZDAppNwkAddr + 8
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    308            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000010   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000013   74FE         MOV     A,#-0x2
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   04           INC     A
   \   000018   F0           MOVX    @DPTR,A
    309            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    310          
    311            // Check for manual "Hold Auto Start"
    312            ZDAppCheckForHoldKey();
   \   00001C                ; Setup parameters for call to function ZDAppCheckForHoldKey
   \   00001C   12....       LCALL   `??ZDAppCheckForHoldKey::?relay`; Banked call to: ZDAppCheckForHoldKey
    313          
    314            // Initialize ZDO items and setup the device - type of device to create.
    315            ZDO_Init();
   \   00001F                ; Setup parameters for call to function ZDO_Init
   \   00001F   12....       LCALL   `??ZDO_Init::?relay` ; Banked call to: ZDO_Init
    316          
    317            // Register the endpoint description with the AF
    318            // This task doesn't have a Simple description, but we still need
    319            // to register the endpoint.
    320            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   000022                ; Setup parameters for call to function afRegister
   \   000022   7A..         MOV     R2,#ZDApp_epDesc & 0xff
   \   000024   7B..         MOV     R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000026   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    321          
    322          #if defined( ZDO_USERDESC_RESPONSE )
    323            ZDApp_InitUserDesc();
    324          #endif // ZDO_USERDESC_RESPONSE
    325          
    326            // Initialize the ZDO callback function pointers zdoCBFunc[]
    327            ZDApp_InitZdoCBFunc();
   \   000029                ; Setup parameters for call to function ZDApp_InitZdoCBFunc
   \   000029   12....       LCALL   `??ZDApp_InitZdoCBFunc::?relay`; Banked call to: ZDApp_InitZdoCBFunc
    328          
    329            ZDApp_RegisterCBs();
   \   00002C                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   00002C   12....       LCALL   `??ZDApp_RegisterCBs::?relay`; Banked call to: ZDApp_RegisterCBs
    330          
    331          #if defined ( ZDP_BIND_VALIDATION )
    332          #if defined ( REFLECTOR )
    333            ZDApp_InitPendingBind();
    334          #endif
    335          #endif
    336          } /* ZDApp_Init() */
   \   00002F   02....       LJMP    ??Subroutine34_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    337          
    338          /*********************************************************************
    339           * @fn          ZDApp_SecInit
    340           *
    341           * @brief       ZDApp initialize security.
    342           *
    343           * @param       state - device initialization state
    344           *
    345           * @return      none
    346           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    347          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    348          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
    349            uint8 zgPreConfigKey[SEC_KEY_LEN];
    350          
    351            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    352            {
    353              // Set the Trust Center bit
    354              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
    355            }
    356          
    357            // Initialize ZigBee Device Security Manager
    358            ZDSecMgrInit(state);
   \   00000C                ; Setup parameters for call to function ZDSecMgrInit
   \   00000C   12....       LCALL   `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
    359          
    360            if ( ZG_SECURE_ENABLED )
    361            {
    362              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
   \   00000F   E5..         MOV     A,?V0
   \   000011   603A         JZ      ??ZDApp_SecInit_0
    363              {
    364                if( _NIB.nwkKeyLoaded == FALSE )
   \   000013   90....       MOV     DPTR,#_NIB + 61
   \   000016   E0           MOVX    A,@DPTR
   \   000017   7034         JNZ     ??ZDApp_SecInit_0
    365                {
    366                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    367                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
   \   000019   90....       MOV     DPTR,#zgSecurityMode
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   702C         JNZ     ??ZDApp_SecInit_0
   \   000021   90....       MOV     DPTR,#zgPreConfigKeys
   \   000024   E0           MOVX    A,@DPTR
   \   000025   6026         JZ      ??ZDApp_SecInit_0
    368                  {
    369                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
   \   000027                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   000027   AC..         MOV     R4,?XSP + 0
   \   000029   AD..         MOV     R5,?XSP + 1
   \   00002B   7A62         MOV     R2,#0x62
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   12....       LCALL   `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
    370                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
   \   000032                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   000032   7900         MOV     R1,#0x0
   \   000034   AA..         MOV     R2,?XSP + 0
   \   000036   AB..         MOV     R3,?XSP + 1
   \   000038   12....       LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
    371                      SSP_SwitchNwkKey( 0 );
   \   00003B                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   00003B   7900         MOV     R1,#0x0
   \   00003D   12....       LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
    372          
    373                      // clear local copy of key
    374                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \   000040                ; Setup parameters for call to function osal_memset
   \   000040   7C10         MOV     R4,#0x10
   \   000042   7D00         MOV     R5,#0x0
   \   000044   7900         MOV     R1,#0x0
   \   000046   AA..         MOV     R2,?XSP + 0
   \   000048   AB..         MOV     R3,?XSP + 1
   \   00004A   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    375                  }
    376                }
    377              }
    378          
    379              // clean the new devices list when Security module is initialized
    380              if ( ZDApp_NewDeviceList != NULL )
   \                     ??ZDApp_SecInit_0:
   \   00004D   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000050   6021         JZ      ??ZDApp_SecInit_1
    381              {
    382                ZDAppNewDevice_t *pNewDeviceNext;
    383          
    384                while ( ZDApp_NewDeviceList )
    385                {
    386                  pNewDeviceNext = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \                     ??ZDApp_SecInit_2:
   \   000052   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000055   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000058   FE           MOV     R6,A
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   FF           MOV     R7,A
    387                  osal_mem_free( ZDApp_NewDeviceList );
   \   00005C                ; Setup parameters for call to function osal_mem_free
   \   00005C   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00005F   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000062   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    388                  ZDApp_NewDeviceList = pNewDeviceNext;
   \   000065   EE           MOV     A,R6
   \   000066   F8           MOV     R0,A
   \   000067   EF           MOV     A,R7
   \   000068   F9           MOV     R1,A
   \   000069   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00006C   12....       LCALL   ??Subroutine42_0 & 0xFFFF
    389                }
   \                     ??CrossCallReturnLabel_56:
   \   00006F   E8           MOV     A,R0
   \   000070   49           ORL     A,R1
   \   000071   70DF         JNZ     ??ZDApp_SecInit_2
    390              }
    391            }
    392          }
   \                     ??ZDApp_SecInit_1:
   \   000073   7410         MOV     A,#0x10
   \   000075   02....       LJMP    ??Subroutine33_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine34_0
   \   000003                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine39_0
   \   000001                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine40_0
   \   000002                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000003                REQUIRE ??Subroutine41_0
   \   000003                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    393          
    394          /*********************************************************************
    395           * @fn      ZDApp_event_loop()
    396           *
    397           * @brief   Main event loop for Zigbee device objects task. This function
    398           *          should be called at periodic intervals.
    399           *
    400           * @param   task_id - Task ID
    401           * @param   events  - Bitmap of events
    402           *
    403           * @return  none
    404           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    405          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    406          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    407            uint8 *msg_ptr;
    408          
    409            if ( events & SYS_EVENT_MSG )
   \   00000B   5480         ANL     A,#0x80
   \   00000D   702D         JNZ     ??ZDApp_event_loop_0
    410            {
    411              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    412              {
    413                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    414          
    415                // Release the memory
    416                osal_msg_deallocate( msg_ptr );
    417              }
    418          
    419              // Return unprocessed events
    420              return (events ^ SYS_EVENT_MSG);
    421            }
    422          
    423            if ( events & ZDO_NETWORK_INIT )
   \   00000F   EE           MOV     A,R6
   \   000010   A2E0         MOV     C,0xE0 /* A   */.0
   \   000012   5041         JNC     ??ZDApp_event_loop_1
    424            {
    425              // Initialize apps and start the network
    426              ZDApp_ChangeState( DEV_INIT );
   \   000014                ; Setup parameters for call to function ZDApp_ChangeState
   \   000014   7901         MOV     R1,#0x1
   \   000016   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    427          
    428              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    429                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   000019                ; Setup parameters for call to function ZDO_StartDevice
   \   000019   7C0F         MOV     R4,#0xf
   \   00001B   7B0F         MOV     R3,#0xf
   \   00001D   90....       MOV     DPTR,#devStartMode
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FA           MOV     R2,A
   \   000022   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000025   E0           MOVX    A,@DPTR
   \   000026   5407         ANL     A,#0x7
   \   000028   F9           MOV     R1,A
   \   000029   12....       LCALL   `??ZDO_StartDevice::?relay`; Banked call to: ZDO_StartDevice
    430          
    431              // Return unprocessed events
    432              return (events ^ ZDO_NETWORK_INIT);
   \   00002C   EE           MOV     A,R6
   \   00002D   6401         XRL     A,#0x1
   \   00002F   02....       LJMP    ??ZDApp_event_loop_2 & 0xFFFF
    433            }
   \                     ??ZDApp_event_loop_3:
   \   000032                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   000032   12....       LCALL   `??ZDApp_ProcessOSALMsg::?relay`; Banked call to: ZDApp_ProcessOSALMsg
   \   000035                ; Setup parameters for call to function osal_msg_deallocate
   \   000035   AA..         MOV     R2,?V0
   \   000037   AB..         MOV     R3,?V1
   \   000039   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??ZDApp_event_loop_0:
   \   00003C                ; Setup parameters for call to function osal_msg_receive
   \   00003C   90....       MOV     DPTR,#ZDAppTaskID
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F9           MOV     R1,A
   \   000041   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000044   8A..         MOV     ?V0,R2
   \   000046   8B..         MOV     ?V1,R3
   \   000048   EA           MOV     A,R2
   \   000049   45..         ORL     A,?V1
   \   00004B   70E5         JNZ     ??ZDApp_event_loop_3
   \   00004D   EE           MOV     A,R6
   \   00004E   FA           MOV     R2,A
   \   00004F   EF           MOV     A,R7
   \   000050   6480         XRL     A,#0x80
   \   000052   02....       LJMP    ??ZDApp_event_loop_4 & 0xFFFF
    434          
    435            if ( ZSTACK_ROUTER_BUILD )
    436            {
    437              if ( events & ZDO_NETWORK_START )
    438              {
    439                ZDApp_NetworkStartEvt();
    440          
    441                // Return unprocessed events
    442                return (events ^ ZDO_NETWORK_START);
    443              }
    444          
    445              if ( events & ZDO_ROUTER_START )
    446              {
    447                if ( nwkStatus == ZSuccess )
    448                {
    449                  if ( devState == DEV_END_DEVICE )
    450                  {
    451                    ZDApp_ChangeState( DEV_ROUTER );
    452                  }
    453          
    454                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
    455          
    456                  if ( zgChildAgingEnable == TRUE )
    457                  {
    458                    // Once the device has changed its state to a ROUTER set the timer to send
    459                    // Parent annce
    460                    ZDApp_SetParentAnnceTimer();
    461                  }
    462                }
    463                else
    464                {
    465                  // remain as end device
    466                }
    467                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
    468          
    469                // Return unprocessed events
    470                return (events ^ ZDO_ROUTER_START);
    471              }
    472          
    473              if ( events & ZDO_PARENT_ANNCE_EVT )
    474              {
    475                ZDApp_SendParentAnnce();
    476          
    477                // Return unprocessed events
    478                return (events ^ ZDO_PARENT_ANNCE_EVT);
    479              }
    480            }
    481          
    482            if( events & ZDO_REJOIN_BACKOFF )
   \                     ??ZDApp_event_loop_1:
   \   000055   EF           MOV     A,R7
   \   000056   5420         ANL     A,#0x20
   \   000058   603B         JZ      ??ZDApp_event_loop_5
    483            {
    484              if( devState == DEV_NWK_BACKOFF )
   \   00005A   90....       MOV     DPTR,#devState
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   640C         XRL     A,#0xc
   \   000060   700D         JNZ     ??ZDApp_event_loop_6
    485              {
    486                ZDApp_ChangeState(DEV_NWK_DISC);
   \   000062                ; Setup parameters for call to function ZDApp_ChangeState
   \   000062   7902         MOV     R1,#0x2
   \   000064   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    487                // Restart scan for rejoin
    488                ZDApp_StartJoiningCycle();
   \   000067                ; Setup parameters for call to function ZDApp_StartJoiningCycle
   \   000067   12....       LCALL   `??ZDApp_StartJoiningCycle::?relay`; Banked call to: ZDApp_StartJoiningCycle
    489                osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinScan );
   \   00006A                ; Setup parameters for call to function osal_start_timerEx
   \   00006A   90....       MOV     DPTR,#zgDefaultRejoinScan
   \   00006D   800B         SJMP    ??ZDApp_event_loop_7
    490              }
    491              else
    492              {
    493                // Rejoin backoff, silent period
    494                ZDApp_ChangeState(DEV_NWK_BACKOFF);
   \                     ??ZDApp_event_loop_6:
   \   00006F                ; Setup parameters for call to function ZDApp_ChangeState
   \   00006F   790C         MOV     R1,#0xc
   \   000071   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    495                ZDApp_StopJoiningCycle();
   \   000074                ; Setup parameters for call to function ZDApp_StopJoiningCycle
   \   000074   12....       LCALL   `??ZDApp_StopJoiningCycle::?relay`; Banked call to: ZDApp_StopJoiningCycle
    496                osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinBackoff );
   \   000077                ; Setup parameters for call to function osal_start_timerEx
   \   000077   90....       MOV     DPTR,#zgDefaultRejoinBackoff
   \                     ??ZDApp_event_loop_7:
   \   00007A   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00007D   7A00         MOV     R2,#0x0
   \   00007F   7B20         MOV     R3,#0x20
   \   000081   90....       MOV     DPTR,#ZDAppTaskID
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F9           MOV     R1,A
   \   000086   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000089   7404         MOV     A,#0x4
   \   00008B   12....       LCALL   ?DEALLOC_XSTACK8
    497              }
    498          
    499              return ( events ^ ZDO_REJOIN_BACKOFF);
   \   00008E   EE           MOV     A,R6
   \   00008F   FA           MOV     R2,A
   \   000090   EF           MOV     A,R7
   \   000091   6420         XRL     A,#0x20
   \   000093   805A         SJMP    ??ZDApp_event_loop_4
    500            }
    501          
    502            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_5:
   \   000095   EE           MOV     A,R6
   \   000096   5410         ANL     A,#0x10
   \   000098   602E         JZ      ??ZDApp_event_loop_8
    503            {
    504              ZDO_UpdateNwkStatus( devState );
   \   00009A                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   00009A   90....       MOV     DPTR,#devState
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   F9           MOV     R1,A
   \   00009F   12....       LCALL   `??ZDO_UpdateNwkStatus::?relay`; Banked call to: ZDO_UpdateNwkStatus
    505          
    506              // At start up, do one MTO route discovery if the device is a concentrator
    507              if ( zgConcentratorEnable == TRUE )
   \   0000A2   90....       MOV     DPTR,#zgConcentratorEnable
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   6401         XRL     A,#0x1
   \   0000A8   7017         JNZ     ??ZDApp_event_loop_9
    508              {
    509                // Start next event
    510                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   0000AA                ; Setup parameters for call to function osal_start_timerEx
   \   0000AA   90....       MOV     DPTR,#__Constant_64
   \   0000AD   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000B0   7A00         MOV     R2,#0x0
   \   0000B2   7B08         MOV     R3,#0x8
   \   0000B4   90....       MOV     DPTR,#NWK_TaskID
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   F9           MOV     R1,A
   \   0000B9   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000BC   7404         MOV     A,#0x4
   \   0000BE   12....       LCALL   ?DEALLOC_XSTACK8
    511              }
    512          
    513              // Return unprocessed events
    514              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??ZDApp_event_loop_9:
   \   0000C1   EE           MOV     A,R6
   \   0000C2   6410         XRL     A,#0x10
   \                     ??ZDApp_event_loop_2:
   \   0000C4   FA           MOV     R2,A
   \   0000C5   EF           MOV     A,R7
   \   0000C6   8027         SJMP    ??ZDApp_event_loop_4
    515            }
    516          
    517            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_8:
   \   0000C8   EE           MOV     A,R6
   \   0000C9   5408         ANL     A,#0x8
   \   0000CB   6006         JZ      ??ZDApp_event_loop_10
    518            {
    519              // User defined logic
    520          
    521              // Return unprocessed events
    522              return (events ^ ZDO_COMMAND_CNF);
   \   0000CD   EE           MOV     A,R6
   \   0000CE   6408         XRL     A,#0x8
   \   0000D0   FA           MOV     R2,A
   \   0000D1   8037         SJMP    ??ZDApp_event_loop_11
    523            }
    524          
    525            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_10:
   \   0000D3   EF           MOV     A,R7
   \   0000D4   5401         ANL     A,#0x1
   \   0000D6   601A         JZ      ??ZDApp_event_loop_12
    526            {
    527              // Save only in valid state
    528              if ( _NIB.nwkState == NWK_ROUTER || _NIB.nwkState == NWK_ENDDEVICE )
   \   0000D8   90....       MOV     DPTR,#_NIB + 35
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F8           MOV     R0,A
   \   0000DD   7408         MOV     A,#0x8
   \   0000DF   68           XRL     A,R0
   \   0000E0   6005         JZ      ??ZDApp_event_loop_13
   \   0000E2   7404         MOV     A,#0x4
   \   0000E4   68           XRL     A,R0
   \   0000E5   7003         JNZ     ??ZDApp_event_loop_14
    529              {
    530                ZDApp_SaveNetworkStateEvt();
   \                     ??ZDApp_event_loop_13:
   \   0000E7                ; Setup parameters for call to function ZDApp_SaveNetworkStateEvt
   \   0000E7   12....       LCALL   `??ZDApp_SaveNetworkStateEvt::?relay`; Banked call to: ZDApp_SaveNetworkStateEvt
    531              }
    532          
    533              // Return unprocessed events
    534              return (events ^ ZDO_NWK_UPDATE_NV);
   \                     ??ZDApp_event_loop_14:
   \   0000EA   EE           MOV     A,R6
   \   0000EB   FA           MOV     R2,A
   \   0000EC   EF           MOV     A,R7
   \   0000ED   6401         XRL     A,#0x1
   \                     ??ZDApp_event_loop_4:
   \   0000EF   FB           MOV     R3,A
   \   0000F0   8018         SJMP    ??ZDApp_event_loop_11
    535            }
    536          
    537            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_12:
   \   0000F2   EE           MOV     A,R6
   \   0000F3   5404         ANL     A,#0x4
   \   0000F5   600A         JZ      ??ZDApp_event_loop_15
    538            {
    539          #ifdef ZBA_FALLBACK_NWKKEY
    540              if ( devState == DEV_END_DEVICE_UNAUTH )
    541              {
    542                ZDSecMgrFallbackNwkKey();
    543              }
    544              else
    545          #endif
    546              {
    547                // Set the NV startup option to force a "new" join.
    548                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   0000F7                ; Setup parameters for call to function zgWriteStartupOptions
   \   0000F7   7A02         MOV     R2,#0x2
   \   0000F9   79FF         MOV     R1,#-0x1
   \   0000FB   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    549          
    550                // The device has been in the UNAUTH state, so reset
    551                // Note: there will be no return from this call
    552                SystemResetSoft();
   \   0000FE                ; Setup parameters for call to function Onboard_soft_reset
   \   0000FE   12....       LCALL   Onboard_soft_reset & 0xFFFF
    553              }
    554            }
    555          
    556          #if defined ( ZDP_BIND_VALIDATION )
    557            if ( events & ZDO_PENDING_BIND_REQ_EVT )
    558            {
    559          #if defined ( REFLECTOR )
    560              ZDApp_AgeOutPendingBindEntry();
    561          #endif
    562              // Return unprocessed events
    563              return (events ^ ZDO_PENDING_BIND_REQ_EVT);
    564            }
    565          #endif
    566          
    567            if ( ZG_SECURE_ENABLED )
    568            {
    569              return ( ZDApp_ProcessSecEvent( task_id, events ) );
   \                     ??ZDApp_event_loop_15:
   \   000101                ; Setup parameters for call to function ZDApp_ProcessSecEvent
   \   000101   EE           MOV     A,R6
   \   000102   FA           MOV     R2,A
   \   000103   EF           MOV     A,R7
   \   000104   FB           MOV     R3,A
   \   000105   A9..         MOV     R1,?V2
   \   000107   12....       LCALL   `??ZDApp_ProcessSecEvent::?relay`; Banked call to: ZDApp_ProcessSecEvent
    570            }
   \                     ??ZDApp_event_loop_11:
   \   00010A                REQUIRE ?Subroutine1
   \   00010A                ; // Fall through to label ?Subroutine1
    571            else
    572            {
    573              // Discard or make more handlers
    574              return 0;
    575            }
    576          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    577          
    578          /*********************************************************************
    579           * @fn      ZDApp_ProcessSecEvent()
    580           *
    581           * @brief   Process incoming security events.
    582           *
    583           * @param   task_id - Task ID
    584           * @param   events  - Bitmap of events
    585           *
    586           * @return  none
    587           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    588          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    589          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    590            (void)task_id;  // Intentionally unreferenced parameter
    591          
    592            if ( ZSTACK_ROUTER_BUILD )
    593            {
    594              if ( events & ZDO_NEW_DEVICE )
    595              {
    596                // process the new device event
    597                if ( ZDApp_NewDeviceList )
    598                {
    599                  ZDAppNewDevice_t *pNewDevice;
    600                  uint16 timeDelta;
    601          
    602                  (void) ZDSecMgrNewDeviceEvent( ZDApp_NewDeviceList->shortAddr );
    603          
    604                  pNewDevice = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
    605                  osal_mem_free( ZDApp_NewDeviceList );
    606                  ZDApp_NewDeviceList = pNewDevice;
    607          
    608                  if ( pNewDevice )
    609                  {
    610                    timeDelta = pNewDevice->timeDelta;
    611                    pNewDevice = pNewDevice->next;
    612          
    613                    while ( pNewDevice )
    614                    {
    615                      pNewDevice->timeDelta -= timeDelta;
    616                      pNewDevice = pNewDevice->next;
    617                    }
    618          
    619                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, timeDelta );
    620                  }
    621                }
    622          
    623                // Return unprocessed events
    624                return (events ^ ZDO_NEW_DEVICE);
    625              }
    626            }
    627          
    628            if ( events & ZDO_DEVICE_AUTH )
   \   000009   EE           MOV     A,R6
   \   00000A   5480         ANL     A,#0x80
   \   00000C   6019         JZ      ??ZDApp_ProcessSecEvent_0
    629            {
    630              ZDApp_StoreNwkSecMaterial();
   \   00000E                ; Setup parameters for call to function ZDApp_StoreNwkSecMaterial
   \   00000E   12....       LCALL   `??ZDApp_StoreNwkSecMaterial::?relay`; Banked call to: ZDApp_StoreNwkSecMaterial
    631              
    632              ZDApp_DeviceAuthEvt();
   \   000011                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   000011   12....       LCALL   `??ZDApp_DeviceAuthEvt::?relay`; Banked call to: ZDApp_DeviceAuthEvt
    633          
    634              bdb_setNodeIsOnANetwork(TRUE);
   \   000014                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000014   7901         MOV     R1,#0x1
   \   000016   12....       LCALL   `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
    635              
    636              bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, TRUE);
   \   000019                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000019   7A01         MOV     R2,#0x1
   \   00001B   7903         MOV     R1,#0x3
   \   00001D   12....       LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    637          
    638              // Return unprocessed events
    639              return (events ^ ZDO_DEVICE_AUTH);
   \   000020   EE           MOV     A,R6
   \   000021   6480         XRL     A,#0x80
   \   000023   FA           MOV     R2,A
   \   000024   EF           MOV     A,R7
   \   000025   802B         SJMP    ??ZDApp_ProcessSecEvent_1
    640            }
    641          
    642            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   000027   EF           MOV     A,R7
   \   000028   5402         ANL     A,#0x2
   \   00002A   600A         JZ      ??ZDApp_ProcessSecEvent_2
    643            {
    644              ZDApp_SaveNwkKey();
   \   00002C                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   00002C   12....       LCALL   `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    645          
    646              // Return unprocessed events
    647              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \   00002F   EE           MOV     A,R6
   \   000030   FA           MOV     R2,A
   \   000031   EF           MOV     A,R7
   \   000032   6402         XRL     A,#0x2
   \   000034   801C         SJMP    ??ZDApp_ProcessSecEvent_1
    648            }
    649          
    650            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_2:
   \   000036   EF           MOV     A,R7
   \   000037   5408         ANL     A,#0x8
   \   000039   600A         JZ      ??ZDApp_ProcessSecEvent_3
    651            {
    652          #if defined (NV_RESTORE)
    653              ZDSecMgrSaveApsLinkKey();
   \   00003B                ; Setup parameters for call to function ZDSecMgrSaveApsLinkKey
   \   00003B   12....       LCALL   `??ZDSecMgrSaveApsLinkKey::?relay`; Banked call to: ZDSecMgrSaveApsLinkKey
    654          #endif // (NV_RESTORE)
    655          
    656              // Return unprocessed events
    657              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   00003E   EE           MOV     A,R6
   \   00003F   FA           MOV     R2,A
   \   000040   EF           MOV     A,R7
   \   000041   6408         XRL     A,#0x8
   \   000043   800D         SJMP    ??ZDApp_ProcessSecEvent_1
    658            }
    659          
    660            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_3:
   \   000045   EF           MOV     A,R7
   \   000046   5404         ANL     A,#0x4
   \   000048   600B         JZ      ??ZDApp_ProcessSecEvent_4
    661            {
    662              ZDSecMgrSaveTCLinkKey();
   \   00004A                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   00004A   12....       LCALL   `??ZDSecMgrSaveTCLinkKey::?relay`; Banked call to: ZDSecMgrSaveTCLinkKey
    663          
    664              // Return unprocessed events
    665              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   00004D   EE           MOV     A,R6
   \   00004E   FA           MOV     R2,A
   \   00004F   EF           MOV     A,R7
   \   000050   6404         XRL     A,#0x4
   \                     ??ZDApp_ProcessSecEvent_1:
   \   000052   FB           MOV     R3,A
   \   000053   8004         SJMP    ??ZDApp_ProcessSecEvent_5
    666            }
    667          
    668            // Discard or make more handlers
    669            return 0;
   \                     ??ZDApp_ProcessSecEvent_4:
   \   000055   7A00         MOV     R2,#0x0
   \   000057   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_5:
   \   000059   02....       LJMP    ??Subroutine34_0 & 0xFFFF
    670          }
    671          
    672          /*********************************************************************
    673           * Application Functions
    674           */
    675          
    676          /*********************************************************************
    677           * @fn      ZDOInitDevice
    678           *
    679           * @brief   Start the device in the network.  This function will read
    680           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    681           *   restore the network state of the device.
    682           *
    683           * @param   startDelay - timeDelay to start device (in milliseconds).
    684           *                       There is a jitter added to this delay:
    685           *                       ((NWK_START_DELAY + startDelay)
    686           *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    687           *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
    688           *                       this function will hold the network init. Application
    689           *                       can start the device.
    690           * #@param  mode       - ZDO_INITDEV_CENTRALIZED or ZDO_INITDEV_DISTRIBUTED to specify
    691           *                       which mode should the device start with (only has effect on 
    692           *                       Router devices)
    693           *
    694           * NOTE:    If the application would like to force a "new" join, the
    695           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    696           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    697           *          this function. "new" join means to not restore the network
    698           *          state of the device. Use zgWriteStartupOptions() to set these
    699           *          options.
    700           *
    701           * @return
    702           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    703           *          restored.
    704           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    705           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    706           *          it could mean that there was no network state to restore.
    707           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    708          uint8 ZDOInitDeviceEx( uint16 startDelay, uint8 mode)
   \                     ZDOInitDeviceEx:
    709          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   \   00000E   89..         MOV     ?V1,R1
    710            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000010   75..01       MOV     ?V0,#0x1
    711            uint16 extendedDelay = 0;
   \   000013   7E00         MOV     R6,#0x0
   \   000015   7F00         MOV     R7,#0x0
    712            
    713            if ( devState == DEV_HOLD )
   \   000017   90....       MOV     DPTR,#devState
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   85..82       MOV     DPL,?XSP + 0
   \   00001E   85..83       MOV     DPH,?XSP + 1
   \   000021   7008         JNZ     ??ZDOInitDeviceEx_0
    714            {
    715              byte temp = FALSE;
   \   000023   E4           CLR     A
   \   000024   F0           MOVX    @DPTR,A
    716              // Initialize the RAM items table, in case an NV item has been updated.
    717              zgInitItems( FALSE );
   \   000025                ; Setup parameters for call to function zgInitItems
   \   000025   F9           MOV     R1,A
   \   000026   12....       LCALL   `??zgInitItems::?relay`; Banked call to: zgInitItems
    718              
    719              //Turn off the radio
    720              ZMacSetReq(ZMacRxOnIdle, &temp);
   \   000029                ; Setup parameters for call to function ZMacSetReq
   \   000029   8003         SJMP    ??ZDOInitDeviceEx_1
    721            }
    722            else
    723            {
    724              byte temp = TRUE;
   \                     ??ZDOInitDeviceEx_0:
   \   00002B   7401         MOV     A,#0x1
   \   00002D   F0           MOVX    @DPTR,A
    725              //Turn on the radio
    726              ZMacSetReq(ZMacRxOnIdle, &temp);
   \   00002E                ; Setup parameters for call to function ZMacSetReq
   \                     ??ZDOInitDeviceEx_1:
   \   00002E   AA..         MOV     R2,?XSP + 0
   \   000030   AB..         MOV     R3,?XSP + 1
   \   000032   7952         MOV     R1,#0x52
   \   000034   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    727            }
    728          
    729            ZDConfig_InitDescriptors();
   \   000037                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   000037   12....       LCALL   `??ZDConfig_InitDescriptors::?relay`; Banked call to: ZDConfig_InitDescriptors
    730            //devtag.071807.todo - fix this temporary solution
    731            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   00003A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   90....       MOV     DPTR,#_NIB + 14
   \   000041   F0           MOVX    @DPTR,A
    732          
    733          #if defined ( NV_RESTORE )
    734            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    735            // while booting to skip past NV Restore.
    736            if ( zdappHoldKeys == SW_BYPASS_NV )
   \   000042   90....       MOV     DPTR,#zdappHoldKeys
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6404         XRL     A,#0x4
   \   000048   707D         JNZ     ??ZDOInitDeviceEx_2
    737            {
    738              zdappHoldKeys = 0;   // Only once
   \   00004A   E4           CLR     A
   \   00004B   F0           MOVX    @DPTR,A
    739              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    740            }
    741            else
    742            {
    743          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
    744              if ( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL )
    745              {
    746                networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
    747              }
    748              else
    749              {
    750                // Determine if NV should be restored
    751                networkStateNV = ZDApp_ReadNetworkRestoreState();
    752              }
    753          #else
    754              // Determine if NV should be restored
    755              networkStateNV = ZDApp_ReadNetworkRestoreState();
    756          #endif
    757            }
    758          
    759            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    760            {
    761              networkStateNV = ZDApp_RestoreNetworkState();
    762          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
    763              if ( ( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL ) && ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE ) )
    764              {
    765                networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
    766              }
    767          #endif
    768              runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
    769            }
    770            else
    771            {
    772              // Wipe out the network state in NV
    773              NLME_InitNV();
   \                     ??ZDOInitDeviceEx_3:
   \   00004C                ; Setup parameters for call to function NLME_InitNV
   \   00004C   12....       LCALL   `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
    774              NLME_SetDefaultNV();
   \   00004F                ; Setup parameters for call to function NLME_SetDefaultNV
   \   00004F   12....       LCALL   `??NLME_SetDefaultNV::?relay`; Banked call to: NLME_SetDefaultNV
    775              // clear NWK key values
    776              ZDSecMgrClearNVKeyValues();
   \   000052                ; Setup parameters for call to function ZDSecMgrClearNVKeyValues
   \   000052   12....       LCALL   `??ZDSecMgrClearNVKeyValues::?relay`; Banked call to: ZDSecMgrClearNVKeyValues
    777            }
    778          #endif
    779          
    780            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
   \                     ??ZDOInitDeviceEx_4:
   \   000055   7401         MOV     A,#0x1
   \   000057   65..         XRL     A,?V0
   \   000059   6003         JZ      $+5
   \   00005B   02....       LJMP    ??ZDOInitDeviceEx_5 & 0xFFFF
    781            {
    782              ZDAppDetermineDeviceType();
   \   00005E                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   00005E   12....       LCALL   `??ZDAppDetermineDeviceType::?relay`; Banked call to: ZDAppDetermineDeviceType
    783          
    784              // Only delay if joining network - not restoring network state
    785              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    786                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   000061                ; Setup parameters for call to function osal_rand
   \   000061   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000064   EA           MOV     A,R2
   \   000065   547F         ANL     A,#0x7f
   \   000067   F8           MOV     R0,A
   \   000068   E5..         MOV     A,?V2
   \   00006A   28           ADD     A,R0
   \   00006B   F8           MOV     R0,A
   \   00006C   E4           CLR     A
   \   00006D   35..         ADDC    A,?V3
   \   00006F   F9           MOV     R1,A
   \   000070   E8           MOV     A,R0
   \   000071   2464         ADD     A,#0x64
   \   000073   FE           MOV     R6,A
   \   000074   E4           CLR     A
   \   000075   39           ADDC    A,R1
   \   000076   FF           MOV     R7,A
    787          
    788              runtimeChannel = zgDefaultChannelList;
   \   000077   90....       MOV     DPTR,#zgDefaultChannelList
   \   00007A   12....       LCALL   ?XLOAD_R0123
   \   00007D   90....       MOV     DPTR,#runtimeChannel
   \   000080   12....       LCALL   ?XSTORE_R0123
    789              
    790              // Set the NV startup option to force a "new" join.
    791              zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000083                ; Setup parameters for call to function zgWriteStartupOptions
   \   000083   7A02         MOV     R2,#0x2
   \   000085   79FF         MOV     R1,#-0x1
   \   000087   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    792          //GP_UPDATE    
    793          #if (ZG_BUILD_RTR_TYPE)
    794          #ifndef ZNP_ENABLED
    795              gp_ProxyTblInit( TRUE );
    796          #endif
    797          #endif
    798          
    799              _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   00008A   90....       MOV     DPTR,#_NIB + 20
   \   00008D   74FE         MOV     A,#-0x2
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   A3           INC     DPTR
   \   000091   04           INC     A
   \   000092   F0           MOVX    @DPTR,A
    800              _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
   \   000093   90....       MOV     DPTR,#_NIB + 23
   \   000096   14           DEC     A
   \   000097   F0           MOVX    @DPTR,A
   \   000098   A3           INC     DPTR
   \   000099   04           INC     A
   \   00009A   F0           MOVX    @DPTR,A
    801              _NIB.nwkPanId = 0xFFFF;
   \   00009B   90....       MOV     DPTR,#_NIB + 33
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   A3           INC     DPTR
   \   0000A0   F0           MOVX    @DPTR,A
    802              osal_memset(_NIB.extendedPANID, 0, Z_EXTADDR_LEN);
   \   0000A1                ; Setup parameters for call to function osal_memset
   \   0000A1   7C08         MOV     R4,#0x8
   \   0000A3   7D00         MOV     R5,#0x0
   \   0000A5   7900         MOV     R1,#0x0
   \   0000A7   7A..         MOV     R2,#(_NIB + 53) & 0xff
   \   0000A9   7B..         MOV     R3,#((_NIB + 53) >> 8) & 0xff
   \   0000AB   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    803              NLME_SetUpdateID( 0 );
   \   0000AE                ; Setup parameters for call to function NLME_SetUpdateID
   \   0000AE   7900         MOV     R1,#0x0
   \   0000B0   12....       LCALL   `??NLME_SetUpdateID::?relay`; Banked call to: NLME_SetUpdateID
    804              
    805              if(ZG_DEVICE_RTRONLY_TYPE)
   \   0000B3   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   6401         XRL     A,#0x1
   \   0000B9   705A         JNZ     ??ZDOInitDeviceEx_6
    806              {
    807                if(1 == mode)
   \   0000BB   7401         MOV     A,#0x1
   \   0000BD   65..         XRL     A,?V1
   \   0000BF   703E         JNZ     ??ZDOInitDeviceEx_7
    808                {
    809                  //Update TC address as distributed network (TC none)
    810                  ZDSecMgrUpdateTCAddress(0);
   \   0000C1                ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
   \   0000C1   7A00         MOV     R2,#0x0
   \   0000C3   7B00         MOV     R3,#0x0
   \   0000C5   804B         SJMP    ??ZDOInitDeviceEx_8
    811                }
   \                     ??ZDOInitDeviceEx_2:
   \   0000C7                ; Setup parameters for call to function ZDApp_ReadNetworkRestoreState
   \   0000C7   12....       LCALL   `??ZDApp_ReadNetworkRestoreState::?relay`; Banked call to: ZDApp_ReadNetworkRestoreState
   \   0000CA   E9           MOV     A,R1
   \   0000CB   F5..         MOV     ?V0,A
   \   0000CD   6003         JZ      $+5
   \   0000CF   02....       LJMP    ??ZDOInitDeviceEx_3 & 0xFFFF
   \   0000D2                ; Setup parameters for call to function ZDApp_RestoreNetworkState
   \   0000D2   12....       LCALL   `??ZDApp_RestoreNetworkState::?relay`; Banked call to: ZDApp_RestoreNetworkState
   \   0000D5   E9           MOV     A,R1
   \   0000D6   F5..         MOV     ?V0,A
   \   0000D8   75..01       MOV     ?V4,#0x1
   \   0000DB   8E..         MOV     ?V5,R6
   \   0000DD   8E..         MOV     ?V6,R6
   \   0000DF   8E..         MOV     ?V7,R6
   \   0000E1   90....       MOV     DPTR,#_NIB + 22
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   78..         MOV     R0,#?V4
   \   0000E7   12....       LCALL   ?L_SHL
   \   0000EA   90....       MOV     DPTR,#runtimeChannel
   \   0000ED   E5..         MOV     A,?V4
   \   0000EF   F0           MOVX    @DPTR,A
   \   0000F0   A3           INC     DPTR
   \   0000F1   E5..         MOV     A,?V5
   \   0000F3   F0           MOVX    @DPTR,A
   \   0000F4   A3           INC     DPTR
   \   0000F5   E5..         MOV     A,?V6
   \   0000F7   F0           MOVX    @DPTR,A
   \   0000F8   A3           INC     DPTR
   \   0000F9   E5..         MOV     A,?V7
   \   0000FB   F0           MOVX    @DPTR,A
   \   0000FC   02....       LJMP    ??ZDOInitDeviceEx_4 & 0xFFFF
    812                else
    813                {
    814                  // Centralized mode
    815                  uint8 tmp[Z_EXTADDR_LEN];
    816                  osal_memset(tmp,0x00,Z_EXTADDR_LEN);
   \                     ??ZDOInitDeviceEx_7:
   \   0000FF                ; Setup parameters for call to function osal_memset
   \   0000FF   7C08         MOV     R4,#0x8
   \   000101   7D00         MOV     R5,#0x0
   \   000103   7900         MOV     R1,#0x0
   \   000105   7401         MOV     A,#0x1
   \   000107   12....       LCALL   ?XSTACK_DISP101_8
   \   00010A   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    817                  ZDSecMgrUpdateTCAddress(tmp);
   \   00010D                ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
   \   00010D   7401         MOV     A,#0x1
   \   00010F   12....       LCALL   ?XSTACK_DISP101_8
   \                     ??ZDOInitDeviceEx_8:
   \   000112   12....       LCALL   `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
    818                }
    819              }
    820          
    821              // Update NIB in NV
    822              osal_nv_write( ZCD_NV_NIB, 0, sizeof( nwkIB_t ), &_NIB );
   \                     ??ZDOInitDeviceEx_6:
   \   000115                ; Setup parameters for call to function osal_nv_write
   \   000115   75....       MOV     ?V4,#_NIB & 0xff
   \   000118   75....       MOV     ?V5,#(_NIB >> 8) & 0xff
   \   00011B   78..         MOV     R0,#?V4
   \   00011D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000120   75..6E       MOV     ?V4,#0x6e
   \   000123   75..00       MOV     ?V5,#0x0
   \   000126   78..         MOV     R0,#?V4
   \   000128   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012B   7C00         MOV     R4,#0x0
   \   00012D   7D00         MOV     R5,#0x0
   \   00012F   7A21         MOV     R2,#0x21
   \   000131   7B00         MOV     R3,#0x0
   \   000133   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000136   7404         MOV     A,#0x4
   \   000138   12....       LCALL   ?DEALLOC_XSTACK8
    823          
    824              // Reset the NV startup option to resume from NV by clearing
    825              // the "New" join option.
    826              zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   00013B                ; Setup parameters for call to function zgWriteStartupOptions
   \   00013B   7A02         MOV     R2,#0x2
   \   00013D   7900         MOV     R1,#0x0
   \   00013F   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    827            
    828            }
    829          
    830            // Initialize the security for type of device
    831            ZDApp_SecInit( networkStateNV );
   \                     ??ZDOInitDeviceEx_5:
   \   000142                ; Setup parameters for call to function ZDApp_SecInit
   \   000142   A9..         MOV     R1,?V0
   \   000144   12....       LCALL   `??ZDApp_SecInit::?relay`; Banked call to: ZDApp_SecInit
    832          
    833            if( ZDO_INIT_HOLD_NWK_START != startDelay )
   \   000147   74FF         MOV     A,#-0x1
   \   000149   65..         XRL     A,?V2
   \   00014B   7004         JNZ     ??ZDOInitDeviceEx_9
   \   00014D   74FF         MOV     A,#-0x1
   \   00014F   65..         XRL     A,?V3
   \                     ??ZDOInitDeviceEx_9:
   \   000151   6010         JZ      ??ZDOInitDeviceEx_10
    834            {
    835              devState = DEV_INIT;    // Remove the Hold state
   \   000153   90....       MOV     DPTR,#devState
   \   000156   7401         MOV     A,#0x1
   \   000158   F0           MOVX    @DPTR,A
    836          
    837              // Initialize leave control logic
    838              ZDApp_LeaveCtrlInit();
   \   000159                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   000159   12....       LCALL   `??ZDApp_LeaveCtrlInit::?relay`; Banked call to: ZDApp_LeaveCtrlInit
    839          
    840              // Trigger the network start
    841              ZDApp_NetworkInit( extendedDelay );
   \   00015C                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00015C   EE           MOV     A,R6
   \   00015D   FA           MOV     R2,A
   \   00015E   EF           MOV     A,R7
   \   00015F   FB           MOV     R3,A
   \   000160   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
    842            }
    843          
    844            // set broadcast address mask to support broadcast filtering
    845            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \                     ??ZDOInitDeviceEx_10:
   \   000163                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000163   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000166   E0           MOVX    A,@DPTR
   \   000167   F9           MOV     R1,A
   \   000168   12....       LCALL   `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
    846          
    847            return ( networkStateNV );
   \   00016B   A9..         MOV     R1,?V0
   \   00016D   7409         MOV     A,#0x9
   \   00016F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000172                REQUIRE ?Subroutine2
   \   000172                ; // Fall through to label ?Subroutine2
    848          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    849          
    850          /*********************************************************************
    851           * @fn      ZDApp_ReadNetworkRestoreState
    852           *
    853           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    854           *          or not to restore the network state.
    855           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    856           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    857           *
    858           * @param   none
    859           *
    860           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    861           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    862           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    863           *          ZCD_NV_STARTUP_OPTION
    864           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    865          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    866          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    867            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV     R6,#0x0
    868          
    869            // Look for the New Network State option.
    870            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00000A   E9           MOV     A,R1
   \   00000B   F8           MOV     R0,A
   \   00000C   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000E   5007         JNC     ??ZDApp_ReadNetworkRestoreState_0
    871            {
    872              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000010   7E01         MOV     R6,#0x1
    873              bdb_setNodeIsOnANetwork(FALSE);
   \   000012                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000012   7900         MOV     R1,#0x0
   \   000014   12....       LCALL   `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
    874            }
    875          
    876            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000017   EE           MOV     A,R6
   \   000018   F9           MOV     R1,A
   \   000019   02....       LJMP    ??Subroutine34_0 & 0xFFFF
    877          }
    878          
    879          /*********************************************************************
    880           * @fn      ZDAppDetermineDeviceType()
    881           *
    882           * @brief   Determines the type of device to start.
    883           *
    884           *          Looks at zgDeviceLogicalType and determines what type of
    885           *          device to start.  The types are:
    886           *            ZG_DEVICETYPE_COORDINATOR
    887           *            ZG_DEVICETYPE_ROUTER
    888           *            ZG_DEVICETYPE_ENDDEVICE
    889           *
    890           * @param   none
    891           *
    892           * @return  none
    893           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    894          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    895          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    896            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700E         JNZ     ??ZDAppDetermineDeviceType_0
    897            {
    898              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV     DPTR,#devStartMode
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    899              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX    A,@DPTR
   \   000014   54F8         ANL     A,#0xf8
   \   000016   8035         SJMP    ??ZDAppDetermineDeviceType_1
    900            }
    901            else
    902            {
    903              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   6401         XRL     A,#0x1
   \   00001A   700B         JNZ     ??ZDAppDetermineDeviceType_2
    904                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   00001C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   54F8         ANL     A,#0xf8
   \   000022   F0           MOVX    @DPTR,A
   \   000023   4401         ORL     A,#0x1
   \   000025   800E         SJMP    ??ZDAppDetermineDeviceType_3
    905              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6402         XRL     A,#0x2
   \   00002A   700A         JNZ     ??ZDAppDetermineDeviceType_4
    906                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   00002C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   54F8         ANL     A,#0xf8
   \   000032   F0           MOVX    @DPTR,A
   \   000033   4402         ORL     A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000035   F0           MOVX    @DPTR,A
    907          
    908              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    909              // The device shall do rejoin the network. Otherwise, do normal join
    910              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000036                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000036   7A..         MOV     R2,#AIB_apsUseExtendedPANID & 0xff
   \   000038   7B..         MOV     R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00003A   12....       LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00003D   E9           MOV     A,R1
   \   00003E   90....       MOV     DPTR,#devStartMode
   \   000041   7003         JNZ     ??ZDAppDetermineDeviceType_5
    911              {
    912                devStartMode = MODE_JOIN;     // Assume joining
   \   000043   E4           CLR     A
   \   000044   8007         SJMP    ??ZDAppDetermineDeviceType_1
    913              }
    914              else
    915              {
    916                devStartMode = MODE_REJOIN;
   \                     ??ZDAppDetermineDeviceType_5:
   \   000046   7403         MOV     A,#0x3
   \   000048   F0           MOVX    @DPTR,A
    917                prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \   000049   90....       MOV     DPTR,#prevDevState
   \   00004C   04           INC     A
   \                     ??ZDAppDetermineDeviceType_1:
   \   00004D   F0           MOVX    @DPTR,A
    918              }
    919            }
    920          }
   \   00004E   02....       LJMP    ??Subroutine38_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    921          
    922          /*********************************************************************
    923           * @fn      ZDApp_NetworkStartEvt()
    924           *
    925           * @brief   Process the Network Start Event
    926           *
    927           * @param   none
    928           *
    929           * @return  none
    930           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    931          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    932          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    933            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV     DPTR,#nwkStatus
   \   000007   E0           MOVX    A,@DPTR
   \   000008   704E         JNZ     ??ZDApp_NetworkStartEvt_0
    934            {
    935              // Successfully started a ZigBee network
    936              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6408         XRL     A,#0x8
   \   000010   7033         JNZ     ??ZDApp_NetworkStartEvt_1
    937              {
    938                //save NIB to NV before child joins if NV_RESTORE is defined
    939                ZDApp_NwkWriteNVRequest();
   \   000012                ; Setup parameters for call to function AddrMgrWriteNVRequest
   \   000012   12....       LCALL   `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
    940                ZDApp_ChangeState( DEV_ZB_COORD );
   \   000015                ; Setup parameters for call to function ZDApp_ChangeState
   \   000015   7909         MOV     R1,#0x9
   \   000017   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    941                
    942                if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FORMATION)
   \   00001A   90....       MOV     DPTR,#bdbCommissioningProcedureState
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   6405         XRL     A,#0x5
   \   000020   700A         JNZ     ??ZDApp_NetworkStartEvt_2
    943                {
    944                  bdb_nwkFormationAttempt(TRUE);
   \   000022                ; Setup parameters for call to function bdb_nwkFormationAttempt
   \   000022   7901         MOV     R1,#0x1
   \   000024   12....       LCALL   `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
    945                  ZDApp_StoreNwkSecMaterial();
   \   000027                ; Setup parameters for call to function ZDApp_StoreNwkSecMaterial
   \   000027   12....       LCALL   `??ZDApp_StoreNwkSecMaterial::?relay`; Banked call to: ZDApp_StoreNwkSecMaterial
   \   00002A   800C         SJMP    ??ZDApp_NetworkStartEvt_3
    946                }
    947                else if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_INITIALIZATION)
   \                     ??ZDApp_NetworkStartEvt_2:
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6407         XRL     A,#0x7
   \   00002F   7007         JNZ     ??ZDApp_NetworkStartEvt_3
    948                {
    949                  bdb_reportCommissioningState(BDB_INITIALIZATION,TRUE);
   \   000031                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000031   7A01         MOV     R2,#0x1
   \   000033   7907         MOV     R1,#0x7
   \   000035   12....       LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    950                }
    951          
    952                if ( zgChildAgingEnable == TRUE )
   \                     ??ZDApp_NetworkStartEvt_3:
   \   000038   90....       MOV     DPTR,#zgChildAgingEnable
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   6401         XRL     A,#0x1
   \   00003E   7011         JNZ     ??ZDApp_NetworkStartEvt_4
    953                {
    954                  // Once the device has changed its state to a COORDINATOR set the timer to send
    955                  // Parent annce
    956                  ZDApp_SetParentAnnceTimer();
   \   000040                ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
   \   000040   12....       LCALL   `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
   \   000043   800C         SJMP    ??ZDApp_NetworkStartEvt_4
    957                }
    958              }
    959              else
    960              {
    961                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000045                ; Setup parameters for call to function osal_set_event
   \   000045   7A10         MOV     R2,#0x10
   \   000047   7B00         MOV     R3,#0x0
   \   000049   90....       MOV     DPTR,#ZDAppTaskID
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F9           MOV     R1,A
   \   00004E   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    962              }
    963          
    964              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_NetworkStartEvt_4:
   \   000051                ; Setup parameters for call to function osal_pwrmgr_device
   \   000051   7900         MOV     R1,#0x0
   \   000053   12....       LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   \   000056   8037         SJMP    ??ZDApp_NetworkStartEvt_5
    965            }
    966            else
    967            {
    968              // Try again with a higher energy threshold
    969              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   000058                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000058   12....       LCALL   `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   00005B   E9           MOV     A,R1
   \   00005C   7900         MOV     R1,#0x0
   \   00005E   2410         ADD     A,#0x10
   \   000060   5001         JNC     ??ZDApp_NetworkStartEvt_6
   \   000062   09           INC     R1
   \                     ??ZDApp_NetworkStartEvt_6:
   \   000063   C3           CLR     C
   \   000064   94FF         SUBB    A,#-0x1
   \   000066   E9           MOV     A,R1
   \   000067   9400         SUBB    A,#0x0
   \   000069   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00006B   65D0         XRL     A,PSW
   \   00006D   33           RLC     A
   \   00006E   501A         JNC     ??ZDApp_NetworkStartEvt_7
    970              {
    971                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000070                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000070   12....       LCALL   `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   000073   E9           MOV     A,R1
   \   000074   F8           MOV     R0,A
   \   000075                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   000075   7410         MOV     A,#0x10
   \   000077   29           ADD     A,R1
   \   000078   F9           MOV     R1,A
   \   000079   12....       LCALL   `??NLME_SetEnergyThreshold::?relay`; Banked call to: NLME_SetEnergyThreshold
    972                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   00007C                ; Setup parameters for call to function osal_set_event
   \   00007C   7A01         MOV     R2,#0x1
   \   00007E   7B00         MOV     R3,#0x0
   \   000080   90....       MOV     DPTR,#ZDAppTaskID
   \   000083   E0           MOVX    A,@DPTR
   \   000084   F9           MOV     R1,A
   \   000085   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000088   8005         SJMP    ??ZDApp_NetworkStartEvt_5
    973              }
    974              else
    975              {
    976                bdb_nwkFormationAttempt(FALSE);
   \                     ??ZDApp_NetworkStartEvt_7:
   \   00008A                ; Setup parameters for call to function bdb_nwkFormationAttempt
   \   00008A   7900         MOV     R1,#0x0
   \   00008C   12....       LCALL   `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
    977              }
    978            }
    979          }
   \                     ??ZDApp_NetworkStartEvt_5:
   \   00008F   02....       LJMP    ??Subroutine38_0 & 0xFFFF
    980          
    981          /*********************************************************************
    982           * @fn      ZDApp_DeviceAuthEvt()
    983           *
    984           * @brief   Process the Device Authentic Event
    985           *
    986           * @param   none
    987           *
    988           * @return  none
    989           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    990          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    991          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    992            // received authentication from trust center
    993            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6405         XRL     A,#0x5
   \   00000A   702C         JNZ     ??ZDApp_DeviceAuthEvt_0
    994            {
    995              // Stop the reset timer so it doesn't reset
    996              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL   `??ZDApp_ResetTimerCancel::?relay`; Banked call to: ZDApp_ResetTimerCancel
    997          
    998              ZDApp_ChangeState( DEV_END_DEVICE );
   \   00000F                ; Setup parameters for call to function ZDApp_ChangeState
   \   00000F   7906         MOV     R1,#0x6
   \   000011   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    999          
   1000              // Set the Power Manager Device
   1001          #if defined ( POWER_SAVING )
   1002              osal_pwrmgr_device( PWRMGR_BATTERY );
   1003          #endif
   1004          
   1005              if ( ZSTACK_ROUTER_BUILD )
   1006              {
   1007                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1008                {
   1009                  // NOTE: first two parameters are not used, see NLMEDE.h for details
   1010                  NLME_StartRouterRequest( 0, 0, false );
   1011                }
   1012              }
   1013          
   1014              // Notify to save info into NV
   1015              ZDApp_NVUpdate();
   \   000014                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000014   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1016          
   1017              // Save off the security
   1018              ZDApp_SaveNwkKey();
   \   000017                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000017   12....       LCALL   `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
   1019          
   1020              ZDApp_AnnounceNewAddress();
   \   00001A                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00001A   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1021          
   1022              if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   1023                  || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
   1024                    && (zgChildAgingEnable == TRUE) ) )
   \   00001D   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000020   E0           MOVX    A,@DPTR
   \   000021   A2E3         MOV     C,0xE0 /* A   */.3
   \   000023   5008         JNC     ??ZDApp_DeviceAuthEvt_1
   \   000025   90....       MOV     DPTR,#zgChildAgingEnable
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6401         XRL     A,#0x1
   \   00002B   700E         JNZ     ??ZDApp_DeviceAuthEvt_2
   1025              {
   1026                NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   00002D                ; Setup parameters for call to function NLME_SetPollRate
   \   00002D   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   000030   12....       LCALL   ?XLOAD_R2345
   \   000033   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   000036   8003         SJMP    ??ZDApp_DeviceAuthEvt_2
   1027              }
   1028            }
   1029            else
   1030            {
   1031              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   000038                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000038   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1032            }
   1033          }
   \                     ??ZDApp_DeviceAuthEvt_2:
   \   00003B   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   1034          
   1035          /*********************************************************************
   1036           * @fn      ZDApp_SaveNetworkStateEvt()
   1037           *
   1038           * @brief   Process the Save the Network State Event
   1039           *
   1040           * @param   none
   1041           *
   1042           * @return  none
   1043           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1044          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
   1045          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1046          #if defined ( NV_RESTORE )
   1047           #if defined ( NV_TURN_OFF_RADIO )
   1048            // Turn off the radio's receiver during an NV update
   1049            uint8 RxOnIdle;
   1050            uint8 x = false;
   1051            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
   1052            ZMacSetReq( ZMacRxOnIdle, &x );
   1053           #endif
   1054          
   1055            // Update the Network State in NV
   1056            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
   1057                           NWK_NV_DEVICELIST_ENABLE |
   1058                           NWK_NV_BINDING_ENABLE    |
   1059                           NWK_NV_ADDRMGR_ENABLE );
   \   000004                ; Setup parameters for call to function NLME_UpdateNV
   \   000004   790F         MOV     R1,#0xf
   \   000006   12....       LCALL   `??NLME_UpdateNV::?relay`; Banked call to: NLME_UpdateNV
   1060          
   1061            // Reset the NV startup option to resume from NV by
   1062            // clearing the "New" join option.
   1063            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000009                ; Setup parameters for call to function zgWriteStartupOptions
   \   000009   7A02         MOV     R2,#0x2
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   1064          
   1065           #if defined ( NV_TURN_OFF_RADIO )
   1066            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
   1067           #endif
   1068          #endif // NV_RESTORE
   1069          }
   \   000010   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   1070          
   1071          #if defined ( NV_RESTORE )
   1072          /*********************************************************************
   1073           * @fn      ZDApp_RestoreNetworkState()
   1074           *
   1075           * @brief   This function will restore the network state of the
   1076           *          device if the network state is stored in NV.
   1077           *
   1078           * @param   none
   1079           *
   1080           * @return
   1081           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
   1082           *          restored.
   1083           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
   1084           *          This could mean that zgStartupOption said to not restore, or
   1085           *          it could mean that there was no network state to restore.
   1086           *
   1087           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1088          uint8 ZDApp_RestoreNetworkState( void )
   \                     ZDApp_RestoreNetworkState:
   1089          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1090            uint8 nvStat;
   1091          
   1092            // Initialize NWK NV items
   1093            nvStat = NLME_InitNV();
   \   000005                ; Setup parameters for call to function NLME_InitNV
   \   000005   12....       LCALL   `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
   \   000008   E9           MOV     A,R1
   \   000009   FE           MOV     R6,A
   1094          
   1095            if ( nvStat != NV_OPER_FAILED )
   \   00000A   740A         MOV     A,#0xa
   \   00000C   6E           XRL     A,R6
   \   00000D   6040         JZ      ??ZDApp_RestoreNetworkState_0
   1096            {
   1097              if ( NLME_RestoreFromNV() )
   \   00000F                ; Setup parameters for call to function NLME_RestoreFromNV
   \   00000F   12....       LCALL   `??NLME_RestoreFromNV::?relay`; Banked call to: NLME_RestoreFromNV
   \   000012   E9           MOV     A,R1
   \   000013   602A         JZ      ??ZDApp_RestoreNetworkState_1
   1098              {
   1099                // Are we a coordinator
   1100                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000018   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001B   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   1101                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   \                     ??CrossCallReturnLabel_78:
   \   00001E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000021   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000024   7007         JNZ     ??ZDApp_RestoreNetworkState_2
   1102                {
   1103                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000026   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   54F8         ANL     A,#0xf8
   \   00002C   F0           MOVX    @DPTR,A
   1104                }
   1105                if(ZG_DEVICE_ENDDEVICE_TYPE) 
   1106                {
   1107                  devStartMode = MODE_REJOIN;
   \                     ??ZDApp_RestoreNetworkState_2:
   \   00002D   90....       MOV     DPTR,#devStartMode
   \   000030   7403         MOV     A,#0x3
   \   000032   F0           MOVX    @DPTR,A
   1108                  _NIB.nwkState = NWK_INIT;
   \   000033   90....       MOV     DPTR,#_NIB + 35
   \   000036   E4           CLR     A
   \   000037   12....       LCALL   ?Subroutine12 & 0xFFFF
   1109                }
   1110                else
   1111                {
   1112                  devStartMode = MODE_RESUME;
   1113                }
   1114                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   1115              }
   \                     ??CrossCallReturnLabel_4:
   \   00003A   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00003D   8002         SJMP    ??ZDApp_RestoreNetworkState_3
   1116              else
   1117                nvStat = NV_ITEM_UNINIT;
   \                     ??ZDApp_RestoreNetworkState_1:
   \   00003F   7E09         MOV     R6,#0x9
   1118          
   1119              if ( ZG_SECURE_ENABLED )
   1120              {
   1121                nwkFrameCounterChanges = 0;
   \                     ??ZDApp_RestoreNetworkState_3:
   \   000041   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   000044   E4           CLR     A
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   F0           MOVX    @DPTR,A
   1122          
   1123                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1124                {
   1125                  ZDApp_RestoreNwkKey( TRUE );
   1126                }
   1127              }
   1128          
   1129              // The default for RxOnWhenIdle is true for Routers and false for end devices
   1130              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
   1131              // other than default.
   1132            }
   1133          
   1134            if ( nvStat == ZSUCCESS )
   \   000048   EE           MOV     A,R6
   \   000049   7004         JNZ     ??ZDApp_RestoreNetworkState_0
   1135              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   00004B   7900         MOV     R1,#0x0
   \   00004D   8002         SJMP    ??ZDApp_RestoreNetworkState_4
   1136            else
   1137              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   \                     ??ZDApp_RestoreNetworkState_0:
   \   00004F   7901         MOV     R1,#0x1
   \                     ??ZDApp_RestoreNetworkState_4:
   \   000051   80..         SJMP    ??Subroutine34_0
   1138          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   000003   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   000005   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000007   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
   1139          #endif // NV_RESTORE
   1140          
   1141          /*********************************************************************
   1142           * @fn      ZDApp_InitUserDesc()
   1143           *
   1144           * @brief   Initialize the User Descriptor, the descriptor is read from NV
   1145           *          when needed.  If you want to initialize the User descriptor to
   1146           *          something other than all zero, do it here.
   1147           *
   1148           * @param   none
   1149           *
   1150           * @return  none
   1151           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1152          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
   1153          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1154            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
   1155          
   1156            // Initialize the User Descriptor, the descriptor is read from NV
   1157            // when needed.  If you want to initialize the User descriptor to something
   1158            // other than all zero, do it here.
   1159            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV     R4,#0x11
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1160            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
   1161                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000017                ; Setup parameters for call to function osal_nv_item_init
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   7C11         MOV     R4,#0x11
   \   000026   7D00         MOV     R5,#0x0
   \   000028   7A81         MOV     R2,#-0x7f
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   E9           MOV     A,R1
   \   000035   7033         JNZ     ??ZDApp_InitUserDesc_0
   1162            {
   1163              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
   1164                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000037                ; Setup parameters for call to function osal_nv_read
   \   000037   78..         MOV     R0,#?V0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   75..11       MOV     ?V0,#0x11
   \   00003F   75..00       MOV     ?V1,#0x0
   \   000042   78..         MOV     R0,#?V0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   7C00         MOV     R4,#0x0
   \   000049   7D00         MOV     R5,#0x0
   \   00004B   7A81         MOV     R2,#-0x7f
   \   00004D   7B00         MOV     R3,#0x0
   \   00004F   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000052   7404         MOV     A,#0x4
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   \   000057   E9           MOV     A,R1
   \   000058   7010         JNZ     ??ZDApp_InitUserDesc_0
   1165              {
   1166                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   00005A   85..82       MOV     DPL,?XSP + 0
   \   00005D   85..83       MOV     DPH,?XSP + 1
   \   000060   E0           MOVX    A,@DPTR
   \   000061   6007         JZ      ??ZDApp_InitUserDesc_0
   1167                {
   1168                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   000063   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000066   E0           MOVX    A,@DPTR
   \   000067   D2E4         SETB    0xE0 /* A   */.4
   \   000069   F0           MOVX    @DPTR,A
   1169                }
   1170              }
   1171            }
   1172          }
   \                     ??ZDApp_InitUserDesc_0:
   \   00006A   7411         MOV     A,#0x11
   \   00006C   02....       LJMP    ??Subroutine45_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine46_0
   \   000003                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1173          
   1174          /*********************************************************************
   1175           * @fn      ZDAppCheckForHoldKey()
   1176           *
   1177           * @brief   Check for key to set the device into Hold Auto Start
   1178           *
   1179           * @param   none
   1180           *
   1181           * @return  none
   1182           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1183          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
   1184          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1185          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
   1186          
   1187            // Get Keypad directly to see if a HOLD is needed
   1188            zdappHoldKeys = HalKeyRead();
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   000007   E9           MOV     A,R1
   \   000008   90....       MOV     DPTR,#zdappHoldKeys
   \   00000B   F0           MOVX    @DPTR,A
   1189          
   1190            // Hold down the SW_BYPASS_START key (see OnBoard.h)
   1191            // while booting to avoid starting up the device.
   1192            if ( zdappHoldKeys == SW_BYPASS_START )
   \   00000C   6401         XRL     A,#0x1
   \   00000E   7005         JNZ     ??ZDAppCheckForHoldKey_0
   1193            {
   1194              // Change the device state to HOLD on start up
   1195              devState = DEV_HOLD;
   \   000010   90....       MOV     DPTR,#devState
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
   1196            }
   1197          #endif // HAL_KEY
   1198          }
   \                     ??ZDAppCheckForHoldKey_0:
   \   000015   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   1199          
   1200          /*********************************************************************
   1201           * @fn      ZDApp_ProcessOSALMsg()
   1202           *
   1203           * @brief   Process the incoming task message.
   1204           *
   1205           * @param   msgPtr - message to process
   1206           *
   1207           * @return  none
   1208           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1209          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
   1210          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1211            // Data Confirmation message fields
   1212            uint8 sentEP;       // This should always be 0
   1213            uint8 sentStatus;
   1214            afDataConfirm_t *afDataConfirm;
   1215          
   1216          
   1217            switch ( msgPtr->event )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   14           DEC     A
   \   00000B   601B         JZ      ??ZDApp_ProcessOSALMsg_0
   \   00000D   14           DEC     A
   \   00000E   6053         JZ      ??ZDApp_ProcessOSALMsg_1
   \   000010   24E8         ADD     A,#-0x18
   \   000012   600A         JZ      ??ZDApp_ProcessOSALMsg_2
   \   000014   2447         ADD     A,#0x47
   \   000016   600B         JZ      ??ZDApp_ProcessOSALMsg_3
   \   000018   24D6         ADD     A,#-0x2a
   \   00001A   6070         JZ      ??ZDApp_ProcessOSALMsg_4
   \   00001C   806B         SJMP    ??ZDApp_ProcessOSALMsg_5
   1218            {
   1219              // Incoming ZDO Message
   1220              case AF_INCOMING_MSG_CMD:
   1221                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   00001E                ; Setup parameters for call to function ZDP_IncomingData
   \   00001E   12....       LCALL   `??ZDP_IncomingData::?relay`; Banked call to: ZDP_IncomingData
   1222                break;
   \   000021   8069         SJMP    ??ZDApp_ProcessOSALMsg_4
   1223          
   1224              case ZDO_CB_MSG:
   1225                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   000023                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   000023   12....       LCALL   `??ZDApp_ProcessMsgCBs::?relay`; Banked call to: ZDApp_ProcessMsgCBs
   1226                break;
   \   000026   8064         SJMP    ??ZDApp_ProcessOSALMsg_4
   1227          
   1228              case AF_DATA_CONFIRM_CMD:
   1229                // This message is received as a confirmation of a data packet sent.
   1230                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1231                // The message fields are defined in AF.h
   1232                afDataConfirm = (afDataConfirm_t *)msgPtr;
   1233                sentEP = afDataConfirm->endpoint;
   1234                sentStatus = afDataConfirm->hdr.status;
   1235          
   1236                // Action taken when confirmation is received.
   1237          #if defined ( ZIGBEE_FREQ_AGILITY )
   1238                if ( pZDNwkMgr_ProcessDataConfirm )
   1239                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   1240          #endif
   1241                (void)sentEP;
   1242                (void)sentStatus;
   1243                break;
   1244          
   1245              case ZDO_NWK_DISC_CNF:
   1246                if (devState != DEV_NWK_DISC)
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   000028   90....       MOV     DPTR,#devState
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   6402         XRL     A,#0x2
   \   00002E   705C         JNZ     ??ZDApp_ProcessOSALMsg_4
   1247                {
   1248                  break;
   1249                }
   1250                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \   000030   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000033   E0           MOVX    A,@DPTR
   \   000034   6401         XRL     A,#0x1
   \   000036   6005         JZ      ??ZDApp_ProcessOSALMsg_6
   \   000038   E0           MOVX    A,@DPTR
   \   000039   6402         XRL     A,#0x2
   \   00003B   704F         JNZ     ??ZDApp_ProcessOSALMsg_4
   1251                {
   1252                  //Rejoin or resume
   1253                  if(bdb_isDeviceNonFactoryNew()) 
   \                     ??ZDApp_ProcessOSALMsg_6:
   \   00003D                ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
   \   00003D   12....       LCALL   `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
   \   000040   E9           MOV     A,R1
   \   000041   600B         JZ      ??ZDApp_ProcessOSALMsg_7
   1254                  {
   1255                    if(bdb_rejoinNwk() == ZSuccess)
   \   000043                ; Setup parameters for call to function bdb_rejoinNwk
   \   000043   12....       LCALL   `??bdb_rejoinNwk::?relay`; Banked call to: bdb_rejoinNwk
   \   000046   E9           MOV     A,R1
   \   000047   6043         JZ      ??ZDApp_ProcessOSALMsg_4
   1256                    {
   1257                      return;
   1258                    }
   1259          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1260                    else
   1261                    {
   1262                      if(ZG_DEVICE_ENDDEVICE_TYPE)
   1263                      {
   1264                        bdb_parentLost();
   \   000049                ; Setup parameters for call to function bdb_parentLost
   \   000049   12....       LCALL   `??bdb_parentLost::?relay`; Banked call to: bdb_parentLost
   1265                        return;
   \   00004C   803E         SJMP    ??ZDApp_ProcessOSALMsg_4
   1266                      }
   1267                    }
   1268          #endif
   1269                  }
   1270                  
   1271                  if(nwk_getNwkDescList())
   \                     ??ZDApp_ProcessOSALMsg_7:
   \   00004E                ; Setup parameters for call to function nwk_getNwkDescList
   \   00004E   12....       LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   000051   8B..         MOV     ?V1,R3
   \   000053   EA           MOV     A,R2
   \   000054   45..         ORL     A,?V1
   \   000056   6004         JZ      ??ZDApp_ProcessOSALMsg_8
   1272                  {
   1273                    bdb_nwkDiscoveryAttempt(TRUE);
   \   000058                ; Setup parameters for call to function bdb_nwkDiscoveryAttempt
   \   000058   7901         MOV     R1,#0x1
   \   00005A   8002         SJMP    ??ZDApp_ProcessOSALMsg_9
   1274                  }
   1275                  else
   1276                  {
   1277                    bdb_nwkDiscoveryAttempt(FALSE);
   \                     ??ZDApp_ProcessOSALMsg_8:
   \   00005C                ; Setup parameters for call to function bdb_nwkDiscoveryAttempt
   \   00005C   7900         MOV     R1,#0x0
   \                     ??ZDApp_ProcessOSALMsg_9:
   \   00005E   12....       LCALL   `??bdb_nwkDiscoveryAttempt::?relay`; Banked call to: bdb_nwkDiscoveryAttempt
   \   000061   8029         SJMP    ??ZDApp_ProcessOSALMsg_4
   1278                  }
   1279                }
   1280              break;
   1281          
   1282              case ZDO_NWK_JOIN_IND:
   1283                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   000063   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000066   E0           MOVX    A,@DPTR
   \   000067   6401         XRL     A,#0x1
   \   000069   6005         JZ      ??ZDApp_ProcessOSALMsg_10
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   6402         XRL     A,#0x2
   \   00006E   701C         JNZ     ??ZDApp_ProcessOSALMsg_4
   1284                {
   1285                  if((bdbCommissioningProcedureState.bdbCommissioningState == BDB_INITIALIZATION) || (bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST))
   \                     ??ZDApp_ProcessOSALMsg_10:
   \   000070   90....       MOV     DPTR,#bdbCommissioningProcedureState
   \   000073   E0           MOVX    A,@DPTR
   \   000074   6407         XRL     A,#0x7
   \   000076   6005         JZ      ??ZDApp_ProcessOSALMsg_11
   \   000078   E0           MOVX    A,@DPTR
   \   000079   6408         XRL     A,#0x8
   \   00007B   7007         JNZ     ??ZDApp_ProcessOSALMsg_12
   1286                  {
   1287                    bdb_reportCommissioningState(bdbCommissioningProcedureState.bdbCommissioningState,TRUE);
   \                     ??ZDApp_ProcessOSALMsg_11:
   \   00007D                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00007D   7A01         MOV     R2,#0x1
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F9           MOV     R1,A
   \   000081   12....       LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   1288                  }
   1289                  ZDApp_ProcessNetworkJoin();
   \                     ??ZDApp_ProcessOSALMsg_12:
   \   000084                ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
   \   000084   12....       LCALL   `??ZDApp_ProcessNetworkJoin::?relay`; Banked call to: ZDApp_ProcessNetworkJoin
   \   000087   8003         SJMP    ??ZDApp_ProcessOSALMsg_4
   1290                }
   1291                break;
   1292          
   1293              default:
   1294                if ( ZG_SECURE_ENABLED )
   1295                  ZDApp_ProcessSecMsg( msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_5:
   \   000089                ; Setup parameters for call to function ZDApp_ProcessSecMsg
   \   000089   12....       LCALL   `??ZDApp_ProcessSecMsg::?relay`; Banked call to: ZDApp_ProcessSecMsg
   1296                break;
   1297            }
   1298          
   1299          }
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   00008C   02....       LJMP    ??Subroutine46_0 & 0xFFFF
   1300          
   1301          /*********************************************************************
   1302           * @fn      ZDApp_ProcessMsgCBs()
   1303           *
   1304           * @brief   Process response messages
   1305           *
   1306           * @param   none
   1307           *
   1308           * @return  none
   1309           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1310          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1311          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine24 & 0xFFFF
   1312            switch ( inMsg->clusterID )
   \                     ??CrossCallReturnLabel_29:
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V1,A
   \   000014   78..         MOV     R0,#?V0
   \   000016   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   000019   0200         DW        2
   \   00001B   2100         DW        33
   \   00001D   2200         DW        34
   \   00001F   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   000021   0080         DW        32768
   \   000023   0180         DW        32769
   \   000025   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   000027   0000         DW        0
   \   000029   ....         DW        ??ZDApp_ProcessMsgCBs_2
   1313            {
   1314          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1315              case NWK_addr_rsp:
   1316              case IEEE_addr_rsp:
   1317                {
   1318                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1319          
   1320                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   00002B                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00002B   12....       LCALL   `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   00002E   8A..         MOV     ?V0,R2
   \   000030   8B..         MOV     ?V1,R3
   \   000032   AE..         MOV     R6,?V0
   \   000034   AF..         MOV     R7,?V1
   1321                  if ( pAddrRsp )
   \   000036   EE           MOV     A,R6
   \   000037   4F           ORL     A,R7
   \   000038   6030         JZ      ??ZDApp_ProcessMsgCBs_2
   1322                  {
   1323                    if ( pAddrRsp->status == ZSuccess )
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   700E         JNZ     ??ZDApp_ProcessMsgCBs_3
   1324                    {
   1325                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   000041                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   000041   EE           MOV     A,R6
   \   000042   2403         ADD     A,#0x3
   \   000044   FC           MOV     R4,A
   \   000045   E4           CLR     A
   \   000046   3F           ADDC    A,R7
   \   000047   FD           MOV     R5,A
   \   000048   A3           INC     DPTR
   \   000049   12....       LCALL   ?Subroutine19 & 0xFFFF
   1326                    }
   \                     ??CrossCallReturnLabel_20:
   \   00004C   12....       LCALL   `??ZDO_UpdateAddrManager::?relay`; Banked call to: ZDO_UpdateAddrManager
   1327          
   1328          #if defined ( ZDP_BIND_VALIDATION )
   1329                    // look for pending bind entry for NWK_addr_rsp Only
   1330                    if ( inMsg->clusterID == NWK_addr_rsp )
   1331                    {
   1332          #if defined ( REFLECTOR )
   1333                      ZDApp_ProcessPendingBindReq( pAddrRsp->extAddr );
   1334          #endif
   1335                    }
   1336          #endif
   1337          
   1338                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   00004F                ; Setup parameters for call to function osal_mem_free
   \   00004F   EE           MOV     A,R6
   \   000050   FA           MOV     R2,A
   \   000051   EF           MOV     A,R7
   \   000052   FB           MOV     R3,A
   \   000053   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000056   8012         SJMP    ??ZDApp_ProcessMsgCBs_2
   1339                  }
   1340                }
   1341                break;
   1342          #endif
   1343          
   1344          #if defined ( REFLECTOR )
   1345              case Bind_req:
   1346              case Unbind_req:
   1347                {
   1348                  ZDO_BindUnbindReq_t bindReq;
   1349                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   000058                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   000058   AC..         MOV     R4,?XSP + 0
   \   00005A   AD..         MOV     R5,?XSP + 1
   \   00005C   12....       LCALL   `??ZDO_ParseBindUnbindReq::?relay`; Banked call to: ZDO_ParseBindUnbindReq
   1350                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   00005F                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   00005F   AC..         MOV     R4,?XSP + 0
   \   000061   AD..         MOV     R5,?XSP + 1
   \   000063   EE           MOV     A,R6
   \   000064   FA           MOV     R2,A
   \   000065   EF           MOV     A,R7
   \   000066   FB           MOV     R3,A
   \   000067   12....       LCALL   `??ZDO_ProcessBindUnbindReq::?relay`; Banked call to: ZDO_ProcessBindUnbindReq
   1351                }
   1352                break;
   1353          #endif
   1354          
   1355          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1356              case Bind_rsp:
   1357              case Unbind_rsp:
   1358                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   1359                {
   1360                  ZDMatchSendState(
   1361                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1362                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   1363                }
   1364                break;
   1365          
   1366              case End_Device_Bind_req:
   1367          #ifdef ZDO_ENDDEVICEBIND_RESPONSE
   1368                if (ZG_DEVICE_COORDINATOR_TYPE)
   1369                {
   1370                  ZDEndDeviceBind_t bindReq;
   1371                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   1372                  ZDO_MatchEndDeviceBind( &bindReq );
   1373          
   1374                  // Freeing the cluster lists - if allocated.
   1375                  if ( bindReq.numInClusters )
   1376                    osal_mem_free( bindReq.inClusters );
   1377                  if ( bindReq.numOutClusters )
   1378                    osal_mem_free( bindReq.outClusters );
   1379                }
   1380          #endif
   1381                break;
   1382          #endif
   1383            }
   1384          }
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   00006A                REQUIRE ?Subroutine7
   \   00006A                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7415         MOV     A,#0x15
   \   000002   02....       LJMP    ??Subroutine45_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   EE           MOV     A,R6
   \   000005   240C         ADD     A,#0xc
   \   000007   F582         MOV     DPL,A
   \   000009   E4           CLR     A
   \   00000A   3F           ADDC    A,R7
   \   00000B   F583         MOV     DPH,A
   \   00000D   22           RET
   1385          
   1386          /*********************************************************************
   1387           * @fn      ZDApp_RegisterCBs()
   1388           *
   1389           * @brief   Process response messages
   1390           *
   1391           * @param   none
   1392           *
   1393           * @return  none
   1394           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1395          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1396          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1397          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1398            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV     R2,#0x1
   \   000006   7B80         MOV     R3,#-0x80
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1399          #endif
   1400          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1401            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \   000010                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000010   7A00         MOV     R2,#0x0
   \   000012   7B80         MOV     R3,#-0x80
   \   000014   90....       MOV     DPTR,#ZDAppTaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1402          #endif
   1403          #if ZG_BUILD_COORDINATOR_TYPE
   1404            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   1405            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   1406          #ifdef ZDO_ENDDEVICEBIND_RESPONSE
   1407            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   1408          #endif
   1409          #endif
   1410          #if defined ( REFLECTOR )
   1411            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \   00001C                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001C   7A21         MOV     R2,#0x21
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   90....       MOV     DPTR,#ZDAppTaskID
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1412            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \   000028                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000028   7A22         MOV     R2,#0x22
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   90....       MOV     DPTR,#ZDAppTaskID
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1413          #endif
   1414          }
   \   000034   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   1415          
   1416          /*********************************************************************
   1417           * @fn      ZDApp_ProcessSecMsg()
   1418           *
   1419           * @brief   Process the incoming security message.
   1420           *
   1421           * @param   msgPtr - message to process
   1422           *
   1423           * @return  none
   1424           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1425          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1426          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1427            switch ( msgPtr->event )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   24FC         ADD     A,#-0x4
   \   00000B   6006         JZ      ??ZDApp_ProcessSecMsg_0
   \   00000D   24FC         ADD     A,#-0x4
   \   00000F   6014         JZ      ??ZDApp_ProcessSecMsg_1
   \   000011   8022         SJMP    ??ZDApp_ProcessSecMsg_2
   1428            {
   1429              case ZDO_TRANSPORT_KEY_IND:
   1430                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000013   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6401         XRL     A,#0x1
   \   000019   6005         JZ      ??ZDApp_ProcessSecMsg_3
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   6402         XRL     A,#0x2
   \   00001E   7015         JNZ     ??ZDApp_ProcessSecMsg_2
   1431                {
   1432                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000020                ; Setup parameters for call to function ZDSecMgrTransportKeyInd
   \   000020   12....       LCALL   `??ZDSecMgrTransportKeyInd::?relay`; Banked call to: ZDSecMgrTransportKeyInd
   \   000023   8010         SJMP    ??ZDApp_ProcessSecMsg_2
   1433                }
   1434                break;
   1435          
   1436              case ZDO_UPDATE_DEVICE_IND:
   1437                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1438                {
   1439                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   1440                  
   1441                  // Look at GP proxy table for posible conflict with GPD alias NwkAddr
   1442          #if ZG_BUILD_RTR_TYPE
   1443                  ZDO_DeviceAnnce_t devAnnce;
   1444                  uint8 invalidIEEE[Z_EXTADDR_LEN] = {0xFF};
   1445                  
   1446                  osal_memcpy( devAnnce.extAddr, ((ZDO_UpdateDeviceInd_t*)msgPtr)->devExtAddr, Z_EXTADDR_LEN );
   1447                  devAnnce.nwkAddr = ((ZDO_UpdateDeviceInd_t*)msgPtr)->devAddr;
   1448                  
   1449                  // Check GP proxy table to update the entry if necesary
   1450                  if( osal_memcmp( devAnnce.extAddr, invalidIEEE, Z_EXTADDR_LEN ) )
   1451                  {
   1452                    if( osal_get_timeoutEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT ) )
   1453                    {
   1454                      if ( osal_memcmp( &devAnnce, &GP_aliasConflictAnnce, sizeof( ZDO_DeviceAnnce_t ) ) )
   1455                      {
   1456                        osal_stop_timerEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT );
   1457                      }
   1458                    }
   1459                  }
   1460                  else
   1461                  {
   1462                    if(GP_CheckAnnouncedDeviceGCB != NULL)
   1463                    {
   1464                      GP_CheckAnnouncedDeviceGCB( devAnnce.extAddr, devAnnce.nwkAddr );
   1465                    }          
   1466                  }
   1467          #endif
   1468                }
   1469                break;
   1470          
   1471              case ZDO_REMOVE_DEVICE_IND:
   1472                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1473                {
   1474                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1475                }
   1476                break;
   1477          
   1478              case ZDO_REQUEST_KEY_IND:
   1479                if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
   1480                {
   1481                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1482                  {
   1483                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1484                  }
   1485                }
   1486                break;
   1487              case ZDO_VERIFY_KEY_IND:
   1488          #if (ZG_BUILD_COORDINATOR_TYPE)
   1489                if(ZG_DEVICE_COORDINATOR_TYPE)
   1490                {
   1491                  if( ((ZDO_VerifyKeyInd_t*)msgPtr)->verifyKeyStatus == ZSuccess)
   1492                  {
   1493                    bdb_TCjoiningDeviceComplete( ((ZDO_VerifyKeyInd_t*)msgPtr)->extAddr );
   1494                  }
   1495                }
   1496            
   1497                ZDSecMgrVerifyKeyInd( (ZDO_VerifyKeyInd_t*)msgPtr );
   1498          #endif
   1499                break;
   1500          
   1501              case ZDO_SWITCH_KEY_IND:
   1502                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_1:
   \   000025   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6401         XRL     A,#0x1
   \   00002B   6005         JZ      ??ZDApp_ProcessSecMsg_4
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6402         XRL     A,#0x2
   \   000030   7003         JNZ     ??ZDApp_ProcessSecMsg_2
   1503                {
   1504                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_4:
   \   000032                ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
   \   000032   12....       LCALL   `??ZDSecMgrSwitchKeyInd::?relay`; Banked call to: ZDSecMgrSwitchKeyInd
   1505                }
   1506                break;
   1507          
   1508              default:
   1509                // Unsupported messages
   1510                break;
   1511            }
   1512          }
   \                     ??ZDApp_ProcessSecMsg_2:
   \   000035   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   1513          
   1514          /*********************************************************************
   1515           * @fn      ZDApp_ProcessNetworkJoin()
   1516           *
   1517           * @brief
   1518           *
   1519           *   Save off the Network key information.
   1520           *
   1521           * @param   none
   1522           *
   1523           * @return  none
   1524           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1525          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1526          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   1527            if ( (devState == DEV_NWK_JOINING) ||
   1528                ((devState == DEV_NWK_ORPHAN)  &&
   1529                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   000005   90....       MOV     DPTR,#devState
   \   000008   E0           MOVX    A,@DPTR
   \   000009   6403         XRL     A,#0x3
   \   00000B   600F         JZ      ??ZDApp_ProcessNetworkJoin_0
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   640A         XRL     A,#0xa
   \   000010   705C         JNZ     ??ZDApp_ProcessNetworkJoin_1
   \   000012   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000015   E0           MOVX    A,@DPTR
   \   000016   5407         ANL     A,#0x7
   \   000018   6401         XRL     A,#0x1
   \   00001A   7069         JNZ     ??ZDApp_ProcessNetworkJoin_2
   1530            {
   1531              // Result of a Join attempt by this device.
   1532              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   00001C   90....       MOV     DPTR,#nwkStatus
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   7044         JNZ     ??ZDApp_ProcessNetworkJoin_3
   1533              {
   1534                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000022                ; Setup parameters for call to function osal_set_event
   \   000022   7A10         MOV     R2,#0x10
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#ZDAppTaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1535          
   1536          #if defined ( POWER_SAVING )
   1537                osal_pwrmgr_device( PWRMGR_BATTERY );
   1538          #endif
   1539          
   1540                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
   \   00002E                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   00002E   7901         MOV     R1,#0x1
   \   000030   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   000033   E9           MOV     A,R1
   \   000034   7009         JNZ     ??ZDApp_ProcessNetworkJoin_4
   1541                {
   1542                  // wait for auth from trust center
   1543                  ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
   \   000036                ; Setup parameters for call to function ZDApp_ChangeState
   \   000036   7905         MOV     R1,#0x5
   \   000038   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1544                  
   1545                  bdb_nwkAssocAttemt(TRUE);
   \   00003B                ; Setup parameters for call to function bdb_nwkAssocAttemt
   \   00003B   7901         MOV     R1,#0x1
   \   00003D   8029         SJMP    ??ZDApp_ProcessNetworkJoin_5
   1546                }
   1547                else
   1548                {
   1549                  if ( ZSTACK_ROUTER_BUILD )
   1550                  {
   1551                    if ( devState == DEV_NWK_ORPHAN
   1552                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1553                    {
   1554                      // Change NIB state to router for restore
   1555                      _NIB.nwkState = NWK_ROUTER;
   1556                    }
   1557                  }
   1558          
   1559                  if ( devState == DEV_NWK_JOINING )
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   00003F   90....       MOV     DPTR,#devState
   \   000042   E0           MOVX    A,@DPTR
   \   000043   6403         XRL     A,#0x3
   \   000045   7017         JNZ     ??ZDApp_ProcessNetworkJoin_6
   1560                  {
   1561                    ZDApp_AnnounceNewAddress();
   \   000047                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000047   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1562                    if( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL )
   \   00004A   90....       MOV     DPTR,#bdbCommissioningProcedureState
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   6402         XRL     A,#0x2
   \   000050   700C         JNZ     ??ZDApp_ProcessNetworkJoin_6
   1563                    {
   1564                      bdb_setNodeIsOnANetwork(TRUE);
   \   000052                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000052   7901         MOV     R1,#0x1
   \   000054   12....       LCALL   `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
   1565                      bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, TRUE );
   \   000057                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000057   7A01         MOV     R2,#0x1
   \   000059   7902         MOV     R1,#0x2
   \   00005B   12....       LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   1566                    }
   1567                  }
   1568          
   1569                  ZDApp_ChangeState( DEV_END_DEVICE );
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   00005E                ; Setup parameters for call to function ZDApp_ChangeState
   \   00005E   7906         MOV     R1,#0x6
   \   000060   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1570          
   1571                  if ( ZSTACK_ROUTER_BUILD )
   \   000063   02....       LJMP    ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
   1572                  {
   1573                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1574                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1575                    {
   1576                      NLME_StartRouterRequest( 0, 0, false );
   1577                    }
   1578                  }
   1579                }
   1580              }
   1581              else
   1582              {
   1583          
   1584                bdb_nwkAssocAttemt(FALSE);
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   000066                ; Setup parameters for call to function bdb_nwkAssocAttemt
   \   000066   7900         MOV     R1,#0x0
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   000068   12....       LCALL   `??bdb_nwkAssocAttemt::?relay`; Banked call to: bdb_nwkAssocAttemt
   \   00006B   02....       LJMP    ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
   1585              }
   1586            }
   1587            else if ( devState == DEV_NWK_ORPHAN ||
   1588                      devState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL ||
   1589                      devState == DEV_NWK_TC_REJOIN_CURR_CHANNEL ||
   1590                      devState == DEV_NWK_TC_REJOIN_ALL_CHANNEL ||
   1591                      devState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   6404         XRL     A,#0x4
   \   000071   6012         JZ      ??ZDApp_ProcessNetworkJoin_2
   \   000073   E0           MOVX    A,@DPTR
   \   000074   640E         XRL     A,#0xe
   \   000076   600D         JZ      ??ZDApp_ProcessNetworkJoin_2
   \   000078   E0           MOVX    A,@DPTR
   \   000079   640F         XRL     A,#0xf
   \   00007B   6008         JZ      ??ZDApp_ProcessNetworkJoin_2
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   640D         XRL     A,#0xd
   \   000080   6003         JZ      $+5
   \   000082   02....       LJMP    ??ZDApp_ProcessNetworkJoin_8 & 0xFFFF
   1592            {
   1593              // results of an orphaning attempt by this device
   1594              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   000085   90....       MOV     DPTR,#nwkStatus
   \   000088   E0           MOVX    A,@DPTR
   \   000089   6003         JZ      $+5
   \   00008B   02....       LJMP    ??ZDApp_ProcessNetworkJoin_9 & 0xFFFF
   1595              {
   1596                //When the device has successfully rejoined then reset retryCnt
   1597                retryCnt = 0;
   \   00008E   90....       MOV     DPTR,#retryCnt
   \   000091   E4           CLR     A
   \   000092   F0           MOVX    @DPTR,A
   1598          
   1599                // Verify NWK key is available before sending Device_annce
   1600                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
   \   000093                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000093   7901         MOV     R1,#0x1
   \   000095   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   000098   E9           MOV     A,R1
   \   000099   700F         JNZ     ??ZDApp_ProcessNetworkJoin_10
   1601                {
   1602                  // wait for auth from trust center
   1603                  ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
   \   00009B                ; Setup parameters for call to function ZDApp_ChangeState
   \   00009B   7905         MOV     R1,#0x5
   \   00009D   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1604          
   1605                  // Start the reset timer for MAX UNAUTH time
   1606                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   \   0000A0                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   0000A0   7A10         MOV     R2,#0x10
   \   0000A2   7B27         MOV     R3,#0x27
   \   0000A4   12....       LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   \   0000A7   02....       LJMP    ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
   1607                }
   1608                else
   1609                {
   1610                  ZDApp_ChangeState( DEV_END_DEVICE );
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   0000AA                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000AA   7906         MOV     R1,#0x6
   \   0000AC   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1611          
   1612                  osal_stop_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF );
   \   0000AF                ; Setup parameters for call to function osal_stop_timerEx
   \   0000AF   7A00         MOV     R2,#0x0
   \   0000B1   7B20         MOV     R3,#0x20
   \   0000B3   90....       MOV     DPTR,#ZDAppTaskID
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   F9           MOV     R1,A
   \   0000B8   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1613          
   1614                  // setup Power Manager Device
   1615          #if defined ( POWER_SAVING )
   1616                  osal_pwrmgr_device( PWRMGR_BATTERY );
   1617          #endif
   1618          
   1619                  // The receiver is on, turn network layer polling off.
   1620                  if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   0000BB   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000C1   501D         JNC     ??ZDApp_ProcessNetworkJoin_11
   1621                  {
   1622                    // if Child Table Management process is not enabled
   1623                    if ( zgChildAgingEnable == FALSE )
   \   0000C3   90....       MOV     DPTR,#zgChildAgingEnable
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   7017         JNZ     ??ZDApp_ProcessNetworkJoin_11
   1624                    {
   1625                      NLME_SetPollRate( 0 );
   \   0000C9                ; Setup parameters for call to function NLME_SetPollRate
   \   0000C9   90....       MOV     DPTR,#__Constant_0
   \   0000CC   12....       LCALL   ?XLOAD_R2345
   \   0000CF   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1626                      NLME_SetQueuedPollRate( 0 );
   \   0000D2                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   0000D2   7A00         MOV     R2,#0x0
   \   0000D4   7B00         MOV     R3,#0x0
   \   0000D6   12....       LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1627                      NLME_SetResponseRate( 0 );
   \   0000D9                ; Setup parameters for call to function NLME_SetResponseRate
   \   0000D9   7A00         MOV     R2,#0x0
   \   0000DB   7B00         MOV     R3,#0x0
   \   0000DD   12....       LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   1628                    }
   1629                  }
   1630          
   1631                  if ( ZSTACK_ROUTER_BUILD )
   1632                  {
   1633                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1634                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1635                    {
   1636                      NLME_StartRouterRequest( 0, 0, false );
   1637                    }
   1638                  }
   1639          
   1640                  ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   0000E0                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   0000E0   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1641          
   1642                  if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   1643                      || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
   1644                        && (zgChildAgingEnable == TRUE) ) )
   \   0000E3   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000E9   500B         JNC     ??ZDApp_ProcessNetworkJoin_12
   \   0000EB   90....       MOV     DPTR,#zgChildAgingEnable
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   6401         XRL     A,#0x1
   \   0000F1   6003         JZ      $+5
   \   0000F3   02....       LJMP    ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
   1645                  {
   1646                    if(devStartMode == MODE_REJOIN)
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   0000F6   90....       MOV     DPTR,#devStartMode
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   6403         XRL     A,#0x3
   \   0000FC   7010         JNZ     ??ZDApp_ProcessNetworkJoin_13
   1647                    {
   1648                      NLME_SetPollRate( zgRejoinPollRate );
   \   0000FE                ; Setup parameters for call to function NLME_SetPollRate
   \   0000FE   90....       MOV     DPTR,#zgRejoinPollRate
   \   000101   E0           MOVX    A,@DPTR
   \   000102   F5..         MOV     ?V0,A
   \   000104   A3           INC     DPTR
   \   000105   E0           MOVX    A,@DPTR
   \   000106   AA..         MOV     R2,?V0
   \   000108   FB           MOV     R3,A
   \   000109   E4           CLR     A
   \   00010A   FC           MOV     R4,A
   \   00010B   FD           MOV     R5,A
   \   00010C   8006         SJMP    ??ZDApp_ProcessNetworkJoin_14
   1649                    }
   1650                    else
   1651                    {
   1652                      NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   00010E                ; Setup parameters for call to function NLME_SetPollRate
   \   00010E   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   000111   12....       LCALL   ?XLOAD_R2345
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   000114   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   000117   02....       LJMP    ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
   1653                    }
   1654                  }
   1655                }
   1656              }
   1657              else
   1658              {
   1659                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   00011A   90....       MOV     DPTR,#devStartMode
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   6401         XRL     A,#0x1
   \   000120   7038         JNZ     ??ZDApp_ProcessNetworkJoin_15
   1660                {
   1661                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   000122   90....       MOV     DPTR,#retryCnt
   \   000125   E0           MOVX    A,@DPTR
   \   000126   04           INC     A
   \   000127   F0           MOVX    @DPTR,A
   \   000128   C3           CLR     C
   \   000129   9404         SUBB    A,#0x4
   \   00012B   501F         JNC     ??ZDApp_ProcessNetworkJoin_16
   1662                  {
   1663                    if ( _NIB.nwkPanId == 0xFFFF )
   \   00012D   90....       MOV     DPTR,#_NIB + 33
   \   000130   E0           MOVX    A,@DPTR
   \   000131   F4           CPL     A
   \   000132   7003         JNZ     ??ZDApp_ProcessNetworkJoin_17
   \   000134   A3           INC     DPTR
   \   000135   E0           MOVX    A,@DPTR
   \   000136   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   000137   601B         JZ      ??ZDApp_ProcessNetworkJoin_18
   1664                      devStartMode = MODE_JOIN;
   1665                    else
   1666                    {
   1667                      devStartMode = MODE_REJOIN;
   \   000139   90....       MOV     DPTR,#devStartMode
   \   00013C   7403         MOV     A,#0x3
   \   00013E   F0           MOVX    @DPTR,A
   1668                      _tmpRejoinState = true;
   \   00013F   90....       MOV     DPTR,#_tmpRejoinState
   \   000142   7401         MOV     A,#0x1
   \   000144   F0           MOVX    @DPTR,A
   1669                      prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \   000145   90....       MOV     DPTR,#prevDevState
   \   000148   7404         MOV     A,#0x4
   \   00014A   8068         SJMP    ??ZDApp_ProcessNetworkJoin_19
   1670                    }
   1671                  }
   1672                  // Do a normal join to the network after certain times of rejoin retries
   1673                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   00014C   90....       MOV     DPTR,#AIB_apsUseInsecureJoin
   \   00014F   E0           MOVX    A,@DPTR
   \   000150   6401         XRL     A,#0x1
   \   000152   7061         JNZ     ??ZDApp_ProcessNetworkJoin_20
   1674                  {
   1675                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   000154   90....       MOV     DPTR,#devStartMode
   \   000157   E4           CLR     A
   \   000158   805A         SJMP    ??ZDApp_ProcessNetworkJoin_19
   1676                  }
   1677                }
   1678                else if(devStartMode == MODE_REJOIN)
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   6403         XRL     A,#0x3
   \   00015D   7056         JNZ     ??ZDApp_ProcessNetworkJoin_20
   1679                {
   1680                  if ( ZSTACK_END_DEVICE_BUILD )
   1681                  {
   1682                    devStartMode = MODE_REJOIN;
   1683                    _tmpRejoinState = true;
   \   00015F   90....       MOV     DPTR,#_tmpRejoinState
   \   000162   7401         MOV     A,#0x1
   \   000164   F0           MOVX    @DPTR,A
   1684                    _NIB.nwkState = NWK_INIT;
   \   000165   90....       MOV     DPTR,#_NIB + 35
   \   000168   E4           CLR     A
   \   000169   F0           MOVX    @DPTR,A
   1685          
   1686                    if( prevDevState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL )
   \   00016A   90....       MOV     DPTR,#prevDevState
   \   00016D   E0           MOVX    A,@DPTR
   \   00016E   6404         XRL     A,#0x4
   \   000170   7007         JNZ     ??ZDApp_ProcessNetworkJoin_21
   1687                    {
   1688                      runtimeChannel = MAX_CHANNELS_24GHZ;
   \   000172   12....       LCALL   ?Subroutine9 & 0xFFFF
   1689                      prevDevState = DEV_NWK_SEC_REJOIN_ALL_CHANNEL ;
   1690                    }
   \                     ??CrossCallReturnLabel_0:
   \   000175   740D         MOV     A,#0xd
   \   000177   803B         SJMP    ??ZDApp_ProcessNetworkJoin_19
   1691                    else if ( prevDevState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL)
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   640D         XRL     A,#0xd
   \   00017C   702C         JNZ     ??ZDApp_ProcessNetworkJoin_22
   1692                    {
   1693                      // Set the flag that will ask the device to do trust center network layer rejoin.
   1694                      _NIB.nwkKeyLoaded = FALSE;
   \   00017E   90....       MOV     DPTR,#_NIB + 61
   \   000181   E4           CLR     A
   \   000182   F0           MOVX    @DPTR,A
   1695                      ZDApp_ResetNwkKey(); // Clear up the old network key.
   \   000183                ; Setup parameters for call to function ZDApp_ResetNwkKey
   \   000183   12....       LCALL   `??ZDApp_ResetNwkKey::?relay`; Banked call to: ZDApp_ResetNwkKey
   1696                      runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
   \   000186   75..01       MOV     ?V0,#0x1
   \   000189   75..00       MOV     ?V1,#0x0
   \   00018C   75..00       MOV     ?V2,#0x0
   \   00018F   75..00       MOV     ?V3,#0x0
   \   000192   90....       MOV     DPTR,#_NIB + 22
   \   000195   E0           MOVX    A,@DPTR
   \   000196   78..         MOV     R0,#?V0
   \   000198   12....       LCALL   ?L_SHL
   \   00019B   90....       MOV     DPTR,#runtimeChannel
   \   00019E   78..         MOV     R0,#?V0
   \   0001A0   12....       LCALL   ?L_MOV_TO_X
   1697                      prevDevState = DEV_NWK_TC_REJOIN_CURR_CHANNEL ;
   \   0001A3   90....       MOV     DPTR,#prevDevState
   \   0001A6   740E         MOV     A,#0xe
   \   0001A8   800A         SJMP    ??ZDApp_ProcessNetworkJoin_19
   1698                    }
   1699                    else if ( prevDevState == DEV_NWK_TC_REJOIN_CURR_CHANNEL )
   \                     ??ZDApp_ProcessNetworkJoin_22:
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   640E         XRL     A,#0xe
   \   0001AD   7006         JNZ     ??ZDApp_ProcessNetworkJoin_20
   1700                    {
   1701                      runtimeChannel = MAX_CHANNELS_24GHZ;
   \   0001AF   12....       LCALL   ?Subroutine9 & 0xFFFF
   1702                      prevDevState= DEV_NWK_TC_REJOIN_ALL_CHANNEL ;
   1703                    }
   1704          
   1705                  }
   1706                }
   \                     ??CrossCallReturnLabel_1:
   \   0001B2   740F         MOV     A,#0xf
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   0001B4   F0           MOVX    @DPTR,A
   1707          
   1708                // Clear the neighbor Table and network discovery tables.
   1709                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   0001B5                ; Setup parameters for call to function nwkNeighborInitTable
   \   0001B5   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1710                NLME_NwkDiscTerm();
   \   0001B8                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0001B8   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1711          
   1712                // setup a retry for later...
   1713                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1714                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   \   0001BB                ; Setup parameters for call to function osal_rand
   \   0001BB   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   0001BE                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0001BE   EA           MOV     A,R2
   \   0001BF   547F         ANL     A,#0x7f
   \   0001C1   2464         ADD     A,#0x64
   \   0001C3   FA           MOV     R2,A
   \   0001C4   7B00         MOV     R3,#0x0
   \   0001C6   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   0001C9   8012         SJMP    ??ZDApp_ProcessNetworkJoin_7
   1715              }
   1716            }
   1717          #if defined ( ZIGBEEPRO )
   1718            else if ( devState != DEV_HOLD )
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   0001CB   E0           MOVX    A,@DPTR
   \   0001CC   600F         JZ      ??ZDApp_ProcessNetworkJoin_7
   1719            {
   1720              // Assume from address conflict
   1721          
   1722              // Notify the network
   1723              ZDApp_AnnounceNewAddress();
   \   0001CE                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   0001CE   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1724          
   1725              // Notify apps
   1726              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   0001D1                ; Setup parameters for call to function osal_set_event
   \   0001D1   7A10         MOV     R2,#0x10
   \   0001D3   7B00         MOV     R3,#0x0
   \   0001D5   90....       MOV     DPTR,#ZDAppTaskID
   \   0001D8   E0           MOVX    A,@DPTR
   \   0001D9   F9           MOV     R1,A
   \   0001DA   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1727            }
   1728          #endif
   1729          }
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   0001DD   80..         SJMP    ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   90....       MOV     DPTR,#runtimeChannel
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   74F8         MOV     A,#-0x8
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   74FF         MOV     A,#-0x1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   7407         MOV     A,#0x7
   \   000010   F0           MOVX    @DPTR,A
   \   000011   90....       MOV     DPTR,#prevDevState
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1730          
   1731          /******************************************************************************
   1732           * @fn          ZDApp_StoreNwkSecMaterial
   1733           *
   1734           * @brief       Stores new entries in the NwkSecMaterial
   1735           *
   1736           * @param       none
   1737           *
   1738           * @return      none
   1739           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1740          void ZDApp_StoreNwkSecMaterial(void)
   \                     ZDApp_StoreNwkSecMaterial:
   1741          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1742            nwkSecMaterialDesc_t nwkSecMaterialDesc;
   1743            uint8 i;
   1744            uint8 emptyEntryIndexOffset = gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES;
   1745            
   1746            //Search if we do have security material for this network
   1747            for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
   \   00000A   7E00         MOV     R6,#0x0
   \   00000C   75....       MOV     ?V0,#(_NIB + 53) & 0xff
   \   00000F   75....       MOV     ?V1,#((_NIB + 53) >> 8) & 0xff
   \   000012   8E..         MOV     ?V2,R6
   \   000014   8001         SJMP    ??ZDApp_StoreNwkSecMaterial_0
   \                     ??ZDApp_StoreNwkSecMaterial_1:
   \   000016   0E           INC     R6
   \                     ??ZDApp_StoreNwkSecMaterial_0:
   \   000017   90....       MOV     DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
   \   00001A   E4           CLR     A
   \   00001B   93           MOVC    A,@A+DPTR
   \   00001C   F8           MOV     R0,A
   \   00001D   EE           MOV     A,R6
   \   00001E   C3           CLR     C
   \   00001F   98           SUBB    A,R0
   \   000020   4003         JC      $+5
   \   000022   02....       LJMP    ??ZDApp_StoreNwkSecMaterial_2 & 0xFFFF
   1748            {
   1749              osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   000025                ; Setup parameters for call to function osal_nv_read
   \   000025   A8..         MOV     R0,?XSP + 0
   \   000027   A9..         MOV     R1,?XSP + 1
   \   000029   88..         MOV     ?V4,R0
   \   00002B   89..         MOV     ?V5,R1
   \   00002D   78..         MOV     R0,#?V4
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   75..0C       MOV     ?V4,#0xc
   \   000035   75..00       MOV     ?V5,#0x0
   \   000038   78..         MOV     R0,#?V4
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   7C00         MOV     R4,#0x0
   \   00003F   7D00         MOV     R5,#0x0
   \   000041   EE           MOV     A,R6
   \   000042   2475         ADD     A,#0x75
   \   000044   FA           MOV     R2,A
   \   000045   E4           CLR     A
   \   000046   3400         ADDC    A,#0x0
   \   000048   FB           MOV     R3,A
   \   000049   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   1750              {
   1751                if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
   \   000051                ; Setup parameters for call to function osal_memcmp
   \   000051   7404         MOV     A,#0x4
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   A982         MOV     R1,DPL
   \   000058   AA83         MOV     R2,DPH
   \   00005A   89..         MOV     ?V4,R1
   \   00005C   8A..         MOV     ?V5,R2
   \   00005E   75..00       MOV     ?V6,#0x0
   \   000061   78..         MOV     R0,#?V4
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000066   7C08         MOV     R4,#0x8
   \   000068   7D00         MOV     R5,#0x0
   \   00006A   A9..         MOV     R1,?V0
   \   00006C   AA..         MOV     R2,?V1
   \   00006E   AB..         MOV     R3,?V2
   \   000070   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000073   7403         MOV     A,#0x3
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
   \   000078   E9           MOV     A,R1
   \   000079   7061         JNZ     ??ZDApp_StoreNwkSecMaterial_2
   1752                {
   1753                  break;
   1754                }
   1755                if(osal_isbufset(nwkSecMaterialDesc.extendedPanID,0,Z_EXTADDR_LEN))
   \   00007B                ; Setup parameters for call to function osal_isbufset
   \   00007B   7C08         MOV     R4,#0x8
   \   00007D   7900         MOV     R1,#0x0
   \   00007F   7404         MOV     A,#0x4
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   AA82         MOV     R2,DPL
   \   000086   AB83         MOV     R3,DPH
   \   000088   12....       LCALL   `??osal_isbufset::?relay`; Banked call to: osal_isbufset
   \   00008B   E9           MOV     A,R1
   \   00008C   6088         JZ      ??ZDApp_StoreNwkSecMaterial_1
   1756                {
   1757                  emptyEntryIndexOffset = i;
   \   00008E   EE           MOV     A,R6
   \   00008F   FF           MOV     R7,A
   1758                  break;
   1759                }
   1760              }
   1761            }
   1762            
   1763            //ExtPanID not found and found an empty entry, save the extended PANID
   1764            if(emptyEntryIndexOffset < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES)
   1765            {
   1766              osal_memcpy(nwkSecMaterialDesc.extendedPanID, _NIB.extendedPANID, Z_EXTADDR_LEN);
   \   000090                ; Setup parameters for call to function osal_memcpy
   \   000090   78..         MOV     R0,#?V0
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000095   7C08         MOV     R4,#0x8
   \   000097   7D00         MOV     R5,#0x0
   \   000099   7407         MOV     A,#0x7
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   AA82         MOV     R2,DPL
   \   0000A0   AB83         MOV     R3,DPH
   \   0000A2   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000A5   7403         MOV     A,#0x3
   \   0000A7   12....       LCALL   ?DEALLOC_XSTACK8
   1767              nwkSecMaterialDesc.FrameCounter = 0;
   \   0000AA   85..82       MOV     DPL,?XSP + 0
   \   0000AD   85..83       MOV     DPH,?XSP + 1
   \   0000B0   E4           CLR     A
   \   0000B1   F0           MOVX    @DPTR,A
   \   0000B2   A3           INC     DPTR
   \   0000B3   F0           MOVX    @DPTR,A
   \   0000B4   A3           INC     DPTR
   \   0000B5   F0           MOVX    @DPTR,A
   \   0000B6   A3           INC     DPTR
   \   0000B7   12....       LCALL   ?Subroutine10 & 0xFFFF
   1768              osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + emptyEntryIndexOffset,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   1769            }
   \                     ??CrossCallReturnLabel_2:
   \   0000BA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BD   75..0C       MOV     ?V0,#0xc
   \   0000C0   75..00       MOV     ?V1,#0x0
   \   0000C3   78..         MOV     R0,#?V0
   \   0000C5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C8   7C00         MOV     R4,#0x0
   \   0000CA   7D00         MOV     R5,#0x0
   \   0000CC   EF           MOV     A,R7
   \   0000CD   2475         ADD     A,#0x75
   \   0000CF   FA           MOV     R2,A
   \   0000D0   E4           CLR     A
   \   0000D1   3400         ADDC    A,#0x0
   \   0000D3   FB           MOV     R3,A
   \   0000D4   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000D7   7404         MOV     A,#0x4
   \   0000D9   12....       LCALL   ?DEALLOC_XSTACK8
   1770          
   1771          }
   \                     ??ZDApp_StoreNwkSecMaterial_2:
   \   0000DC   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   740C         MOV     A,#0xc
   \   000002                REQUIRE ??Subroutine37_0
   \   000002                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F07         MOV     R7,#0x7
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_nv_write
   \   000001                ; Setup parameters for call to function osal_nv_read
   \   000001   A8..         MOV     R0,?XSP + 0
   \   000003   A9..         MOV     R1,?XSP + 1
   \   000005   88..         MOV     ?V0,R0
   \   000007   89..         MOV     ?V1,R1
   \   000009   78..         MOV     R0,#?V0
   \   00000B   22           RET
   1772          
   1773          
   1774          /*********************************************************************
   1775           * @fn      ZDApp_SaveNwkKey()
   1776           *
   1777           * @brief   Save off the Network key information.
   1778           *
   1779           * @param   none
   1780           *
   1781           * @return  none
   1782           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1783          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1784          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 33
   \   000005   74DF         MOV     A,#-0x21
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1785            nwkActiveKeyItems keyItems;
   1786            nwkSecMaterialDesc_t nwkSecMaterialDesc;
   1787            uint8 found = 0;
   1788            uint8 i;
   1789            
   1790            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   740C         MOV     A,#0xc
   \   00000C   12....       LCALL   ?XSTACK_DISP101_8
   \   00000F   12....       LCALL   `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
   1791          
   1792            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1793                          (void *)&keyItems );
   \   000012                ; Setup parameters for call to function osal_nv_write
   \   000012   740C         MOV     A,#0xc
   \   000014   12....       LCALL   ?XSTACK_DISP100_8
   \   000017   88..         MOV     ?V0,R0
   \   000019   89..         MOV     ?V1,R1
   \   00001B   78..         MOV     R0,#?V0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000020   75..15       MOV     ?V0,#0x15
   \   000023   75..00       MOV     ?V1,#0x0
   \   000026   78..         MOV     R0,#?V0
   \   000028   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002B   7C00         MOV     R4,#0x0
   \   00002D   7D00         MOV     R5,#0x0
   \   00002F   7A82         MOV     R2,#-0x7e
   \   000031   7B00         MOV     R3,#0x0
   \   000033   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000036   7404         MOV     A,#0x4
   \   000038   12....       LCALL   ?DEALLOC_XSTACK8
   1794            
   1795            //Search for the security material to update its framecounter
   1796            for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
   \   00003B   75..00       MOV     ?V0,#0x0
   \   00003E   8002         SJMP    ??ZDApp_SaveNwkKey_0
   \                     ??ZDApp_SaveNwkKey_1:
   \   000040   05..         INC     ?V0
   \                     ??ZDApp_SaveNwkKey_0:
   \   000042   AE..         MOV     R6,?V0
   \   000044   7F00         MOV     R7,#0x0
   \   000046   90....       MOV     DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
   \   000049   E4           CLR     A
   \   00004A   93           MOVC    A,@A+DPTR
   \   00004B   F8           MOV     R0,A
   \   00004C   EE           MOV     A,R6
   \   00004D   C3           CLR     C
   \   00004E   98           SUBB    A,R0
   \   00004F   4003         JC      $+5
   \   000051   02....       LJMP    ??ZDApp_SaveNwkKey_2 & 0xFFFF
   1797            {
   1798              osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   000054   EE           MOV     A,R6
   \   000055   2475         ADD     A,#0x75
   \   000057   FE           MOV     R6,A
   \   000058   5001         JNC     ??ZDApp_SaveNwkKey_3
   \   00005A   0F           INC     R7
   \                     ??ZDApp_SaveNwkKey_3:
   \   00005B                ; Setup parameters for call to function osal_nv_read
   \   00005B   A8..         MOV     R0,?XSP + 0
   \   00005D   A9..         MOV     R1,?XSP + 1
   \   00005F   88..         MOV     ?V2,R0
   \   000061   89..         MOV     ?V3,R1
   \   000063   78..         MOV     R0,#?V2
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   75..0C       MOV     ?V2,#0xc
   \   00006B   75..00       MOV     ?V3,#0x0
   \   00006E   78..         MOV     R0,#?V2
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   7C00         MOV     R4,#0x0
   \   000075   7D00         MOV     R5,#0x0
   \   000077   EE           MOV     A,R6
   \   000078   FA           MOV     R2,A
   \   000079   EF           MOV     A,R7
   \   00007A   FB           MOV     R3,A
   \   00007B   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00007E   7404         MOV     A,#0x4
   \   000080   12....       LCALL   ?DEALLOC_XSTACK8
   1799              {
   1800                if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
   \   000083                ; Setup parameters for call to function osal_memcmp
   \   000083   7404         MOV     A,#0x4
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   A982         MOV     R1,DPL
   \   00008A   AA83         MOV     R2,DPH
   \   00008C   89..         MOV     ?V4,R1
   \   00008E   8A..         MOV     ?V5,R2
   \   000090   75..00       MOV     ?V6,#0x0
   \   000093   78..         MOV     R0,#?V4
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000098   7C08         MOV     R4,#0x8
   \   00009A   7D00         MOV     R5,#0x0
   \   00009C   79..         MOV     R1,#(_NIB + 53) & 0xff
   \   00009E   7A..         MOV     R2,#((_NIB + 53) >> 8) & 0xff
   \   0000A0   7B00         MOV     R3,#0x0
   \   0000A2   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000A5   7403         MOV     A,#0x3
   \   0000A7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AA   E9           MOV     A,R1
   \   0000AB   6093         JZ      ??ZDApp_SaveNwkKey_1
   1801                {
   1802                  nwkSecMaterialDesc.FrameCounter = keyItems.frameCounter;
   \   0000AD   741D         MOV     A,#0x1d
   \   0000AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B2   12....       LCALL   ?XLOAD_R0123
   \   0000B5   85..82       MOV     DPL,?XSP + 0
   \   0000B8   85..83       MOV     DPH,?XSP + 1
   \   0000BB   12....       LCALL   ?XSTORE_R0123
   1803                  found = TRUE;
   1804                  //update the framecounter associated to this ExtPanID
   1805                  osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   0000BE                ; Setup parameters for call to function osal_nv_write
   \   0000BE   A8..         MOV     R0,?XSP + 0
   \   0000C0   A9..         MOV     R1,?XSP + 1
   \   0000C2   88..         MOV     ?V0,R0
   \   0000C4   89..         MOV     ?V1,R1
   \   0000C6   78..         MOV     R0,#?V0
   \   0000C8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CB   75..0C       MOV     ?V0,#0xc
   \   0000CE   75..00       MOV     ?V1,#0x0
   \   0000D1   78..         MOV     R0,#?V0
   \   0000D3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D6   7C00         MOV     R4,#0x0
   \   0000D8   7D00         MOV     R5,#0x0
   \   0000DA   EE           MOV     A,R6
   \   0000DB   FA           MOV     R2,A
   \   0000DC   EF           MOV     A,R7
   \   0000DD   8045         SJMP    ??ZDApp_SaveNwkKey_4
   1806                  break;
   1807                }
   1808              }
   1809            }
   1810            
   1811            //If not found, then use the generic
   1812            if(!found)
   1813            {
   1814              osal_memset(nwkSecMaterialDesc.extendedPanID,0xFF,Z_EXTADDR_LEN);
   \                     ??ZDApp_SaveNwkKey_2:
   \   0000DF                ; Setup parameters for call to function osal_memset
   \   0000DF   7C08         MOV     R4,#0x8
   \   0000E1   7D00         MOV     R5,#0x0
   \   0000E3   79FF         MOV     R1,#-0x1
   \   0000E5   7404         MOV     A,#0x4
   \   0000E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EA   AA82         MOV     R2,DPL
   \   0000EC   AB83         MOV     R3,DPH
   \   0000EE   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1815              nwkSecMaterialDesc.FrameCounter = keyItems.frameCounter;
   \   0000F1   741D         MOV     A,#0x1d
   \   0000F3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F6   12....       LCALL   ?XLOAD_R0123
   \   0000F9   85..82       MOV     DPL,?XSP + 0
   \   0000FC   85..83       MOV     DPH,?XSP + 1
   \   0000FF   12....       LCALL   ?XSTORE_R0123
   1816              //update the framecounter associated to this ExtPanID
   1817              osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i - 1,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   000102                ; Setup parameters for call to function osal_nv_write
   \   000102   A8..         MOV     R0,?XSP + 0
   \   000104   A9..         MOV     R1,?XSP + 1
   \   000106   88..         MOV     ?V0,R0
   \   000108   89..         MOV     ?V1,R1
   \   00010A   78..         MOV     R0,#?V0
   \   00010C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010F   75..0C       MOV     ?V0,#0xc
   \   000112   8F..         MOV     ?V1,R7
   \   000114   78..         MOV     R0,#?V0
   \   000116   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000119   7C00         MOV     R4,#0x0
   \   00011B   7D00         MOV     R5,#0x0
   \   00011D   EE           MOV     A,R6
   \   00011E   2474         ADD     A,#0x74
   \   000120   FA           MOV     R2,A
   \   000121   E4           CLR     A
   \   000122   3400         ADDC    A,#0x0
   \                     ??ZDApp_SaveNwkKey_4:
   \   000124   FB           MOV     R3,A
   \   000125   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000128   7404         MOV     A,#0x4
   \   00012A   12....       LCALL   ?DEALLOC_XSTACK8
   1818            }
   1819            
   1820            
   1821            nwkFrameCounterChanges = 0;
   \   00012D   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   000130   E4           CLR     A
   \   000131   F0           MOVX    @DPTR,A
   \   000132   A3           INC     DPTR
   \   000133   F0           MOVX    @DPTR,A
   1822            
   1823            // Clear copy in RAM before return.
   1824            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   000134                ; Setup parameters for call to function osal_memset
   \   000134   7C15         MOV     R4,#0x15
   \   000136   FD           MOV     R5,A
   \   000137   F9           MOV     R1,A
   \   000138   740C         MOV     A,#0xc
   \   00013A   12....       LCALL   ?XSTACK_DISP101_8
   \   00013D   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1825          
   1826          }
   \   000140   7421         MOV     A,#0x21
   \   000142   80..         SJMP    ??Subroutine37_0
   1827          
   1828          /*********************************************************************
   1829           * @fn      ZDApp_ForceConcentratorChange()
   1830           *
   1831           * @brief   Force a network concentrator change by resetting
   1832           *          zgConcentratorEnable and zgConcentratorDiscoveryTime
   1833           *          from NV and set nwk event.
   1834           *
   1835           * @param   none
   1836           *
   1837           * @return  none
   1838           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1839          void ZDApp_ForceConcentratorChange( void )
   \                     ZDApp_ForceConcentratorChange:
   1840          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1841            osal_nv_read( ZCD_NV_CONCENTRATOR_ENABLE, 0, sizeof(zgConcentratorEnable), &zgConcentratorEnable );
   \   000005                ; Setup parameters for call to function osal_nv_read
   \   000005   75....       MOV     ?V0,#zgConcentratorEnable & 0xff
   \   000008   75....       MOV     ?V1,#(zgConcentratorEnable >> 8) & 0xff
   \   00000B   78..         MOV     R0,#?V0
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   75..01       MOV     ?V0,#0x1
   \   000013   75..00       MOV     ?V1,#0x0
   \   000016   78..         MOV     R0,#?V0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   7C00         MOV     R4,#0x0
   \   00001D   7D00         MOV     R5,#0x0
   \   00001F   7A32         MOV     R2,#0x32
   \   000021   7B00         MOV     R3,#0x0
   \   000023   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000026   7404         MOV     A,#0x4
   \   000028   12....       LCALL   ?DEALLOC_XSTACK8
   1842            osal_nv_read( ZCD_NV_CONCENTRATOR_DISCOVERY, 0, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime );
   \   00002B                ; Setup parameters for call to function osal_nv_read
   \   00002B   75....       MOV     ?V0,#zgConcentratorDiscoveryTime & 0xff
   \   00002E   75....       MOV     ?V1,#(zgConcentratorDiscoveryTime >> 8) & 0xff
   \   000031   78..         MOV     R0,#?V0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   75..01       MOV     ?V0,#0x1
   \   000039   75..00       MOV     ?V1,#0x0
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   7C00         MOV     R4,#0x0
   \   000043   7D00         MOV     R5,#0x0
   \   000045   7A33         MOV     R2,#0x33
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   1843          
   1844            if ( zgConcentratorEnable == TRUE )
   \   000051   90....       MOV     DPTR,#zgConcentratorEnable
   \   000054   E0           MOVX    A,@DPTR
   \   000055   6401         XRL     A,#0x1
   \   000057   7019         JNZ     ??ZDApp_ForceConcentratorChange_0
   1845            {
   1846              // Start next event
   1847              osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   000059                ; Setup parameters for call to function osal_start_timerEx
   \   000059   90....       MOV     DPTR,#__Constant_64
   \   00005C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00005F   7A00         MOV     R2,#0x0
   \   000061   7B08         MOV     R3,#0x8
   \   000063   90....       MOV     DPTR,#NWK_TaskID
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F9           MOV     R1,A
   \   000068   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00006B   7404         MOV     A,#0x4
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000070   800C         SJMP    ??ZDApp_ForceConcentratorChange_1
   1848            }
   1849            else
   1850            {
   1851              // Stop the next event
   1852              osal_stop_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT );
   \                     ??ZDApp_ForceConcentratorChange_0:
   \   000072                ; Setup parameters for call to function osal_stop_timerEx
   \   000072   7A00         MOV     R2,#0x0
   \   000074   7B08         MOV     R3,#0x8
   \   000076   90....       MOV     DPTR,#NWK_TaskID
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F9           MOV     R1,A
   \   00007B   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1853            }
   1854          }
   \                     ??ZDApp_ForceConcentratorChange_1:
   \   00007E   02....       LJMP    ??Subroutine46_0 & 0xFFFF
   1855          
   1856          /*********************************************************************
   1857           * @fn      ZDApp_ResetNwkKey()
   1858           *
   1859           * @brief   Reset the Network key information in NV.
   1860           *
   1861           * @param   none
   1862           *
   1863           * @return  none
   1864           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1865          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1866          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1867            nwkActiveKeyItems keyItems;
   1868          
   1869            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV     R4,#0x15
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1870            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1871                          (void *)&keyItems );
   \   000017                ; Setup parameters for call to function osal_nv_write
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..15       MOV     ?V0,#0x15
   \   000027   75..00       MOV     ?V1,#0x0
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A82         MOV     R2,#-0x7e
   \   000035   7B00         MOV     R3,#0x0
   \   000037   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   1872          }
   \   00003F   02....       LJMP    ?Subroutine7 & 0xFFFF
   1873          
   1874          /*********************************************************************
   1875           * @fn      ZDApp_RestoreNwkSecMaterial()
   1876           *
   1877           * @brief   Restore the network frame counter associated to this ExtPanID and 
   1878           *          increment it if found. This can only happens once per reset
   1879           *
   1880           * @param   none
   1881           *
   1882           * @return  none
   1883           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1884          void ZDApp_RestoreNwkSecMaterial(void)
   \                     ZDApp_RestoreNwkSecMaterial:
   1885          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1886            uint8 Found = FALSE;
   1887            uint8 i;
   1888            nwkSecMaterialDesc_t nwkSecMaterialDesc;
   1889            uint8 UpdateFrameCounter = FALSE;
   1890          
   1891            //Search if we do have security material for this network
   1892            for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
   \   00000A   75..00       MOV     ?V0,#0x0
   \   00000D   8054         SJMP    ??ZDApp_RestoreNwkSecMaterial_0
   1893            {
   1894              osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \                     ??ZDApp_RestoreNwkSecMaterial_1:
   \   00000F                ; Setup parameters for call to function osal_nv_read
   \   00000F   A8..         MOV     R0,?XSP + 0
   \   000011   A9..         MOV     R1,?XSP + 1
   \   000013   88..         MOV     ?V2,R0
   \   000015   89..         MOV     ?V3,R1
   \   000017   78..         MOV     R0,#?V2
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   75..0C       MOV     ?V2,#0xc
   \   00001F   75..00       MOV     ?V3,#0x0
   \   000022   78..         MOV     R0,#?V2
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV     R4,#0x0
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   EE           MOV     A,R6
   \   00002C   FA           MOV     R2,A
   \   00002D   EF           MOV     A,R7
   \   00002E   FB           MOV     R3,A
   \   00002F   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000032   7404         MOV     A,#0x4
   \   000034   12....       LCALL   ?DEALLOC_XSTACK8
   1895              {
   1896                if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
   \   000037                ; Setup parameters for call to function osal_memcmp
   \   000037   7404         MOV     A,#0x4
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   A982         MOV     R1,DPL
   \   00003E   AA83         MOV     R2,DPH
   \   000040   89..         MOV     ?V4,R1
   \   000042   8A..         MOV     ?V5,R2
   \   000044   75..00       MOV     ?V6,#0x0
   \   000047   78..         MOV     R0,#?V4
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00004C   7C08         MOV     R4,#0x8
   \   00004E   7D00         MOV     R5,#0x0
   \   000050   79..         MOV     R1,#(_NIB + 53) & 0xff
   \   000052   7A..         MOV     R2,#((_NIB + 53) >> 8) & 0xff
   \   000054   7B00         MOV     R3,#0x0
   \   000056   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000059   7403         MOV     A,#0x3
   \   00005B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005E   E9           MOV     A,R1
   \   00005F   7025         JNZ     ??ZDApp_RestoreNwkSecMaterial_2
   1897                {
   1898                  UpdateFrameCounter = TRUE;
   1899                  Found = TRUE;
   1900                  break;
   1901                }
   1902              }
   1903            }    
   \   000061   05..         INC     ?V0
   \                     ??ZDApp_RestoreNwkSecMaterial_0:
   \   000063   E5..         MOV     A,?V0
   \   000065   2475         ADD     A,#0x75
   \   000067   FE           MOV     R6,A
   \   000068   E4           CLR     A
   \   000069   3400         ADDC    A,#0x0
   \   00006B   FF           MOV     R7,A
   \   00006C   90....       MOV     DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
   \   00006F   E4           CLR     A
   \   000070   93           MOVC    A,@A+DPTR
   \   000071   F8           MOV     R0,A
   \   000072   E5..         MOV     A,?V0
   \   000074   98           SUBB    A,R0
   \   000075   4098         JC      ??ZDApp_RestoreNwkSecMaterial_1
   1904            //Check if we do have frame counter stored in the generic
   1905            if(!Found)
   1906            {
   1907              //The last entry readed has the Generic item, thefore, no need to read it again
   1908              if(nwkSecMaterialDesc.FrameCounter)
   \   000077   85..82       MOV     DPL,?XSP + 0
   \   00007A   85..83       MOV     DPH,?XSP + 1
   \   00007D   12....       LCALL   ?XLOAD_R0123
   \   000080   E8           MOV     A,R0
   \   000081   49           ORL     A,R1
   \   000082   4A           ORL     A,R2
   \   000083   4B           ORL     A,R3
   \   000084   605A         JZ      ??ZDApp_RestoreNwkSecMaterial_3
   \                     ??ZDApp_RestoreNwkSecMaterial_2:
   \   000086   90....       MOV     DPTR,#FrameCounterUpdated
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   7054         JNZ     ??ZDApp_RestoreNwkSecMaterial_3
   1909              {
   1910                UpdateFrameCounter = TRUE;
   1911              }
   1912            }  
   1913          
   1914            if(UpdateFrameCounter && (!FrameCounterUpdated))
   1915            {
   1916              FrameCounterUpdated = TRUE;
   \   00008C   7401         MOV     A,#0x1
   \   00008E   F0           MOVX    @DPTR,A
   1917              
   1918              // Increment the frame counter stored in NV
   1919              nwkSecMaterialDesc.FrameCounter += ( MAX_NWK_FRAMECOUNTER_CHANGES +
   1920                                        NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA );
   \   00008F   90....       MOV     DPTR,#__Constant_4e2
   \   000092   78..         MOV     R0,#?V0
   \   000094   12....       LCALL   ?L_MOV_X
   \   000097   85..82       MOV     DPL,?XSP + 0
   \   00009A   85..83       MOV     DPH,?XSP + 1
   \   00009D   78..         MOV     R0,#?V0
   \   00009F   12....       LCALL   ?L_ADD_TO_X
   1921              
   1922              nwkFrameCounter = nwkSecMaterialDesc.FrameCounter;
   \   0000A2   85..82       MOV     DPL,?XSP + 0
   \   0000A5   85..83       MOV     DPH,?XSP + 1
   \   0000A8   12....       LCALL   ?XLOAD_R0123
   \   0000AB   90....       MOV     DPTR,#nwkFrameCounter
   \   0000AE   12....       LCALL   ?XSTORE_R0123
   1923              
   1924              osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   0000B1                ; Setup parameters for call to function osal_nv_write
   \   0000B1   A8..         MOV     R0,?XSP + 0
   \   0000B3   A9..         MOV     R1,?XSP + 1
   \   0000B5   88..         MOV     ?V0,R0
   \   0000B7   89..         MOV     ?V1,R1
   \   0000B9   78..         MOV     R0,#?V0
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BE   75..0C       MOV     ?V0,#0xc
   \   0000C1   75..00       MOV     ?V1,#0x0
   \   0000C4   78..         MOV     R0,#?V0
   \   0000C6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C9   7C00         MOV     R4,#0x0
   \   0000CB   7D00         MOV     R5,#0x0
   \   0000CD   EE           MOV     A,R6
   \   0000CE   FA           MOV     R2,A
   \   0000CF   EF           MOV     A,R7
   \   0000D0   FB           MOV     R3,A
   \   0000D1   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000D4   7404         MOV     A,#0x4
   \   0000D6   12....       LCALL   ?DEALLOC_XSTACK8
   1925              
   1926              nwkFrameCounterChanges = 0;
   \   0000D9   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   0000DC   E4           CLR     A
   \   0000DD   F0           MOVX    @DPTR,A
   \   0000DE   A3           INC     DPTR
   \   0000DF   F0           MOVX    @DPTR,A
   1927            }
   1928            return;
   \                     ??ZDApp_RestoreNwkSecMaterial_3:
   \   0000E0   02....       LJMP    ?Subroutine6 & 0xFFFF
   1929          }
   1930          
   1931          /*********************************************************************
   1932           * @fn      ZDApp_RestoreNwkKey(uint8 incrFrmCnt)
   1933           *
   1934           * @brief
   1935           *
   1936           *   Save off the Network key information.
   1937           *
   1938           * @param   incrFrmCnt - set to true if we want to increment the network
   1939                      frame counter, else set to false
   1940           *
   1941           * @return  true if restored from NV, false if not
   1942           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1943          uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt )
   \                     ZDApp_RestoreNwkKey:
   1944          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1945            nwkActiveKeyItems keyItems;
   1946            uint8 ret = FALSE;
   \   00000A   7E00         MOV     R6,#0x0
   1947          
   1948            ZDApp_RestoreNwkSecMaterial();
   \   00000C                ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
   \   00000C   12....       LCALL   `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
   1949          
   1950            // Restore the key information
   1951            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1952                == ZSUCCESS )
   \   00000F                ; Setup parameters for call to function osal_nv_read
   \   00000F   7410         MOV     A,#0x10
   \   000011   12....       LCALL   ?XSTACK_DISP100_8
   \   000014   88..         MOV     ?V0,R0
   \   000016   89..         MOV     ?V1,R1
   \   000018   78..         MOV     R0,#?V0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   75..15       MOV     ?V0,#0x15
   \   000020   8E..         MOV     ?V1,R6
   \   000022   78..         MOV     R0,#?V0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV     R4,#0x0
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   7A82         MOV     R2,#-0x7e
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000032   7404         MOV     A,#0x4
   \   000034   12....       LCALL   ?DEALLOC_XSTACK8
   \   000037   E9           MOV     A,R1
   \   000038   7046         JNZ     ??ZDApp_RestoreNwkKey_0
   1953            {
   1954              uint8 nullKey[SEC_KEY_LEN];
   1955          
   1956              // initialize default value to compare to
   1957              osal_memset( nullKey, 0x00, SEC_KEY_LEN );
   \   00003A                ; Setup parameters for call to function osal_memset
   \   00003A   7C10         MOV     R4,#0x10
   \   00003C   7D00         MOV     R5,#0x0
   \   00003E   7900         MOV     R1,#0x0
   \   000040   AA..         MOV     R2,?XSP + 0
   \   000042   AB..         MOV     R3,?XSP + 1
   \   000044   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1958          
   1959              // if stored key is different than default value, then a key has been established
   1960              if ( !osal_memcmp( keyItems.active.key, nullKey, SEC_KEY_LEN ) )
   \   000047                ; Setup parameters for call to function osal_memcmp
   \   000047   A8..         MOV     R0,?XSP + 0
   \   000049   A9..         MOV     R1,?XSP + 1
   \   00004B   88..         MOV     ?V0,R0
   \   00004D   89..         MOV     ?V1,R1
   \   00004F   8E..         MOV     ?V2,R6
   \   000051   78..         MOV     R0,#?V0
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000056   7C10         MOV     R4,#0x10
   \   000058   7D00         MOV     R5,#0x0
   \   00005A   7414         MOV     A,#0x14
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   A982         MOV     R1,DPL
   \   000061   AA83         MOV     R2,DPH
   \   000063   7B00         MOV     R3,#0x0
   \   000065   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000068   7403         MOV     A,#0x3
   \   00006A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006D   E9           MOV     A,R1
   \   00006E   7010         JNZ     ??ZDApp_RestoreNwkKey_0
   1961              {
   1962                ret = TRUE;
   \   000070   7E01         MOV     R6,#0x1
   1963          
   1964                // Clear copy in RAM before return.
   1965                osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   000072                ; Setup parameters for call to function osal_memset
   \   000072   7C15         MOV     R4,#0x15
   \   000074   7D00         MOV     R5,#0x0
   \   000076   7900         MOV     R1,#0x0
   \   000078   7410         MOV     A,#0x10
   \   00007A   12....       LCALL   ?XSTACK_DISP101_8
   \   00007D   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1966              }
   1967            }
   1968          
   1969            return ( ret );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   000080   EE           MOV     A,R6
   \   000081   F9           MOV     R1,A
   \   000082   7425         MOV     A,#0x25
   \   000084   12....       LCALL   ?DEALLOC_XSTACK8
   \   000087   7F03         MOV     R7,#0x3
   \   000089   02....       LJMP    ?BANKED_LEAVE_XDATA
   1970          }
   1971          
   1972          /*********************************************************************
   1973           * @fn      ZDApp_ResetTimerStart
   1974           *
   1975           * @brief   Start the reset timer.
   1976           *
   1977           * @param   delay - delay time(ms) before reset
   1978           *
   1979           * @return  none
   1980           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1981          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1982          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   1983            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_DEVICE_RESET ) )
   \   000009                ; Setup parameters for call to function osal_get_timeoutEx
   \   000009   7A04         MOV     R2,#0x4
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   90....       MOV     DPTR,#ZDAppTaskID
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000015   EA           MOV     A,R2
   \   000016   4B           ORL     A,R3
   \   000017   4C           ORL     A,R4
   \   000018   4D           ORL     A,R5
   \   000019   701B         JNZ     ??ZDApp_ResetTimerStart_0
   1984            {
   1985              // Start the rest timer
   1986              osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   00001B                ; Setup parameters for call to function osal_start_timerEx
   \   00001B   E4           CLR     A
   \   00001C   F5..         MOV     ?V2,A
   \   00001E   F5..         MOV     ?V3,A
   \   000020   78..         MOV     R0,#?V0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000025   7A04         MOV     R2,#0x4
   \   000027   7B00         MOV     R3,#0x0
   \   000029   90....       MOV     DPTR,#ZDAppTaskID
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000031   7404         MOV     A,#0x4
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
   1987            }
   1988          }
   \                     ??ZDApp_ResetTimerStart_0:
   \   000036   02....       LJMP    ??Subroutine36_0 & 0xFFFF
   1989          
   1990          /*********************************************************************
   1991           * @fn      ZDApp_ResetTimerCancel
   1992           *
   1993           * @brief   Cancel the reset timer.
   1994           *
   1995           * @param   none
   1996           *
   1997           * @return  none
   1998           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1999          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   2000          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2001            (void)osal_stop_timerEx(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV     R2,#0x4
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   2002            (void)osal_clear_event(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000010                ; Setup parameters for call to function osal_clear_event
   \   000010   7A04         MOV     R2,#0x4
   \   000012   7B00         MOV     R3,#0x0
   \   000014   90....       MOV     DPTR,#ZDAppTaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   `??osal_clear_event::?relay`; Banked call to: osal_clear_event
   2003          }
   \   00001C   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   2004          
   2005          /*********************************************************************
   2006           * @fn      ZDApp_LeaveCtrlInit
   2007           *
   2008           * @brief   Initialize the leave control logic.
   2009           *
   2010           * @param   none
   2011           *
   2012           * @return  none
   2013           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2014          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   2015          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2016            uint8 status;
   2017          
   2018          
   2019            // Initialize control state
   2020            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   2021          
   2022            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   2023                                        sizeof(ZDApp_LeaveCtrl),
   2024                                        &ZDApp_LeaveCtrl );
   2025          
   2026            if ( status == ZSUCCESS )
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00000D   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000010   78..         MOV     R0,#?V0
   \   000012   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000015   7C01         MOV     R4,#0x1
   \   000017   7D00         MOV     R5,#0x0
   \   000019   7A85         MOV     R2,#-0x7b
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?DEALLOC_XSTACK8
   \   000025   E9           MOV     A,R1
   \   000026   7020         JNZ     ??ZDApp_LeaveCtrlInit_0
   2027            {
   2028              // Read saved control
   2029              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   2030                            0,
   2031                            sizeof( uint8 ),
   2032                            &ZDApp_LeaveCtrl);
   \   000028                ; Setup parameters for call to function osal_nv_read
   \   000028   78..         MOV     R0,#?V0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   75..01       MOV     ?V0,#0x1
   \   000030   75..00       MOV     ?V1,#0x0
   \   000033   78..         MOV     R0,#?V0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7C00         MOV     R4,#0x0
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7A85         MOV     R2,#-0x7b
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000043   7404         MOV     A,#0x4
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   2033            }
   2034          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   000048   02....       LJMP    ??Subroutine46_0 & 0xFFFF
   2035          
   2036          /*********************************************************************
   2037           * @fn      ZDApp_LeaveCtrlSet
   2038           *
   2039           * @brief   Set the leave control logic.
   2040           *
   2041           * @param   ra - reassociate flag
   2042           *
   2043           * @return  none
   2044           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2045          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   2046          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2047            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
   2048          
   2049            if ( ra == TRUE )
   \   00000D   6E           XRL     A,R6
   \   00000E   7003         JNZ     ??ZDApp_LeaveCtrlSet_0
   2050            {
   2051              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000010   7403         MOV     A,#0x3
   \   000012   F0           MOVX    @DPTR,A
   2052            }
   2053          
   2054            // Write the leave control
   2055            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   2056                           0,
   2057                           sizeof( uint8 ),
   2058                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000013                ; Setup parameters for call to function osal_nv_write
   \   000013   02....       LJMP    ?Subroutine4 & 0xFFFF
   2059          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   000003   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000006   78..         MOV     R0,#?V0
   \   000008   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000B   75..01       MOV     ?V0,#0x1
   \   00000E   75..00       MOV     ?V1,#0x0
   \   000011   78..         MOV     R0,#?V0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7C00         MOV     R4,#0x0
   \   000018   7D00         MOV     R5,#0x0
   \   00001A   7A85         MOV     R2,#-0x7b
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000021   7404         MOV     A,#0x4
   \   000023                REQUIRE ??Subroutine45_0
   \   000023                ; // Fall through to label ??Subroutine45_0
   2060          
   2061          /*********************************************************************
   2062           * @fn      ZDApp_LeaveCtrlReset
   2063           *
   2064           * @brief   Re-initialize the leave control logic.
   2065           *
   2066           * @param   none
   2067           *
   2068           * @return  none
   2069           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2070          void ZDApp_LeaveCtrlReset( void )
   \                     ZDApp_LeaveCtrlReset:
   2071          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2072            // Set leave control to initialized state
   2073            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   2074          
   2075            // Write initialized control
   2076            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   2077                          0,
   2078                          sizeof( uint8 ),
   2079                          &ZDApp_LeaveCtrl);
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A   02....       LJMP    ?Subroutine4 & 0xFFFF
   2080          }
   2081          
   2082          /*********************************************************************
   2083           * @fn      ZDApp_LeaveCtrlBypass
   2084           *
   2085           * @brief   Check if NV restore should be skipped during a leave reset.
   2086           *
   2087           * @param   none
   2088           *
   2089           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   2090           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2091          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   2092          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2093            uint8 bypass;
   2094          
   2095            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   2096            {
   2097              bypass = TRUE;
   2098            }
   2099            else
   2100            {
   2101              bypass = FALSE;
   2102            }
   2103          
   2104            return bypass;
   \   000004   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000A   E4           CLR     A
   \   00000B   33           RLC     A
   \   00000C   F9           MOV     R1,A
   \   00000D   80..         SJMP    ??Subroutine38_0
   2105          }
   2106          
   2107          /*********************************************************************
   2108           * @fn      ZDApp_LeaveCtrlStartup
   2109           *
   2110           * @brief   Check for startup conditions during a leave reset.
   2111           *
   2112           * @param   state      - devState_t determined by leave control logic
   2113           * @param   startDelay - startup delay
   2114           *
   2115           * @return  none
   2116           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2117          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   2118          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2119            *startDelay = 0;
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   F0           MOVX    @DPTR,A
   2120          
   2121            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000C   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   A2E0         MOV     C,0xE0 /* A   */.0
   \   000012   5019         JNC     ??ZDApp_LeaveCtrlStartup_0
   2122            {
   2123              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000014   A2E1         MOV     C,0xE0 /* A   */.1
   \   000016   500C         JNC     ??ZDApp_LeaveCtrlStartup_1
   2124              {
   2125                *startDelay = LEAVE_RESET_DELAY;
   \   000018   8C82         MOV     DPL,R4
   \   00001A   8D83         MOV     DPH,R5
   \   00001C   7488         MOV     A,#-0x78
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   7413         MOV     A,#0x13
   \   000022   8005         SJMP    ??ZDApp_LeaveCtrlStartup_2
   2126              }
   2127              else
   2128              {
   2129                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   E4           CLR     A
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   000029   F0           MOVX    @DPTR,A
   2130              }
   2131          
   2132              // Reset leave control logic
   2133              ZDApp_LeaveCtrlReset();
   \   00002A                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   00002A   12....       LCALL   `??ZDApp_LeaveCtrlReset::?relay`; Banked call to: ZDApp_LeaveCtrlReset
   2134            }
   2135          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   00002D   80..         SJMP    ??Subroutine38_0
   2136          
   2137          /*********************************************************************
   2138           * @fn      ZDApp_LeaveReset
   2139           *
   2140           * @brief   Setup a device reset due to a leave indication/confirm.
   2141           *
   2142           * @param   ra - reassociate flag
   2143           *
   2144           * @return  none
   2145           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2146          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   2147          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2148            ZDApp_LeaveCtrlSet( ra );
   \   000007                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000007   12....       LCALL   `??ZDApp_LeaveCtrlSet::?relay`; Banked call to: ZDApp_LeaveCtrlSet
   2149          
   2150            APSME_HoldDataRequests( LEAVE_RESET_DELAY);
   \   00000A                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00000A   7A88         MOV     R2,#-0x78
   \   00000C   7B13         MOV     R3,#0x13
   \   00000E   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   2151          
   2152            if ( ZSTACK_ROUTER_BUILD )
   2153            {
   2154              osal_stop_timerEx( NWK_TaskID, NWK_LINK_STATUS_EVT );
   2155              osal_clear_event( NWK_TaskID, NWK_LINK_STATUS_EVT );
   2156            }
   2157          
   2158            if (ZG_DEVICE_ENDDEVICE_TYPE)
   2159            {
   2160              // Save polling values to be restored after rejoin
   2161              if ( ra == TRUE )
   \   000011   7401         MOV     A,#0x1
   \   000013   6E           XRL     A,R6
   \   000014   7024         JNZ     ??CrossCallReturnLabel_58
   2162              {
   2163                 ZDApp_SavedPollRate = zgPollRate;
   \   000016   90....       MOV     DPTR,#zgPollRate
   \   000019   12....       LCALL   ?XLOAD_R0123
   \   00001C   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   00001F   12....       LCALL   ?XSTORE_R0123
   2164                 savedResponseRate = zgResponsePollRate;
   \   000022   90....       MOV     DPTR,#zgResponsePollRate
   \   000025   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000028   90....       MOV     DPTR,#savedResponseRate
   \   00002B   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   2165                 savedQueuedPollRate = zgQueuedPollRate;
   \                     ??CrossCallReturnLabel_57:
   \   00002E   90....       MOV     DPTR,#zgQueuedPollRate
   \   000031   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   2166              }
   \                     ??CrossCallReturnLabel_69:
   \   000034   90....       MOV     DPTR,#savedQueuedPollRate
   \   000037   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   2167          
   2168              // Disable polling
   2169              NLME_SetPollRate(0);
   \                     ??CrossCallReturnLabel_58:
   \   00003A                ; Setup parameters for call to function NLME_SetPollRate
   \   00003A   90....       MOV     DPTR,#__Constant_0
   \   00003D   12....       LCALL   ?XLOAD_R2345
   \   000040   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   2170              NLME_SetResponseRate(0);
   \   000043                ; Setup parameters for call to function NLME_SetResponseRate
   \   000043   7A00         MOV     R2,#0x0
   \   000045   7B00         MOV     R3,#0x0
   \   000047   12....       LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   2171              NLME_SetQueuedPollRate(0);
   \   00004A                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   00004A   7A00         MOV     R2,#0x0
   \   00004C   7B00         MOV     R3,#0x0
   \   00004E   12....       LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   2172            }
   2173          
   2174            if ( ra == TRUE )
   \   000051   7401         MOV     A,#0x1
   \   000053   6E           XRL     A,R6
   \   000054   702F         JNZ     ??ZDApp_LeaveReset_0
   2175            {
   2176              devState = DEV_NWK_DISC;
   \   000056   90....       MOV     DPTR,#devState
   \   000059   7402         MOV     A,#0x2
   \   00005B   F0           MOVX    @DPTR,A
   2177              devStartMode = MODE_REJOIN;
   \   00005C   90....       MOV     DPTR,#devStartMode
   \   00005F   04           INC     A
   \   000060   F0           MOVX    @DPTR,A
   2178              _tmpRejoinState = true;
   \   000061   90....       MOV     DPTR,#_tmpRejoinState
   \   000064   7401         MOV     A,#0x1
   \   000066   12....       LCALL   ?Subroutine12 & 0xFFFF
   2179          
   2180              // For rejoin, specify the extended PANID to look for
   2181              osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \                     ??CrossCallReturnLabel_5:
   \   000069   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2182          
   2183              _NIB.nwkState = NWK_DISC;
   \   00006C   90....       MOV     DPTR,#_NIB + 35
   \   00006F   7402         MOV     A,#0x2
   \   000071   F0           MOVX    @DPTR,A
   2184               NLME_NwkDiscTerm();
   \   000072                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000072   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   2185          
   2186              ZDApp_NetworkInit((uint16)(NWK_START_DELAY + ((uint16) (osal_rand() & EXTENDED_JOINING_RANDOM_MASK ))));
   \   000075                ; Setup parameters for call to function osal_rand
   \   000075   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000078                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000078   EA           MOV     A,R2
   \   000079   547F         ANL     A,#0x7f
   \   00007B   2464         ADD     A,#0x64
   \   00007D   FA           MOV     R2,A
   \   00007E   7B00         MOV     R3,#0x0
   \   000080   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   000083   8007         SJMP    ??ZDApp_LeaveReset_1
   2187            }
   2188            else
   2189            {
   2190              ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
   \                     ??ZDApp_LeaveReset_0:
   \   000085                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000085   7A88         MOV     R2,#-0x78
   \   000087   7B13         MOV     R3,#0x13
   \   000089   12....       LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   2191            }
   2192          }
   \                     ??ZDApp_LeaveReset_1:
   \   00008C   02....       LJMP    ??Subroutine46_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000003   22           RET
   2193          
   2194          /*********************************************************************
   2195           * @fn      ZDApp_LeaveUpdate
   2196           *
   2197           * @brief   Update local device data related to leaving device.
   2198           *
   2199           * @param   nwkAddr        - NWK address of leaving device
   2200           * @param   extAddr        - EXT address of leaving device
   2201           * @param   removeChildren - remove children of leaving device
   2202           * @param   rejoin         - if device will rejoin or not
   2203           *
   2204           * @return  none
   2205           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2206          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   2207                                  uint8 removeChildren, uint8 rejoin )
   2208          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   2209            uint8 TC_ExtAddr[Z_EXTADDR_LEN];
   2210            // Remove Apps Key for leaving device
   2211            ZDSecMgrDeviceRemoveByExtAddr(extAddr);
   \   000012                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000012   EE           MOV     A,R6
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   FB           MOV     R3,A
   \   000016   12....       LCALL   `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
   2212          
   2213            // Clear SECURITY bit from Address Manager
   2214            ZDSecMgrAddrClear( extAddr );
   \   000019                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   000019   EE           MOV     A,R6
   \   00001A   FA           MOV     R2,A
   \   00001B   EF           MOV     A,R7
   \   00001C   FB           MOV     R3,A
   \   00001D   12....       LCALL   `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   2215          
   2216            if ( pbindRemoveDev )
   \   000020   90....       MOV     DPTR,#pbindRemoveDev
   \   000023   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000026   6032         JZ      ??ZDApp_LeaveUpdate_0
   2217            {
   2218              zAddrType_t devAddr;
   2219          
   2220              // Remove bind entry and all related data
   2221              devAddr.addrMode = Addr64Bit;
   \   000028   7408         MOV     A,#0x8
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   7403         MOV     A,#0x3
   \   00002F   F0           MOVX    @DPTR,A
   2222              osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
   \   000030                ; Setup parameters for call to function osal_memcpy
   \   000030   8E..         MOV     ?V4,R6
   \   000032   8F..         MOV     ?V5,R7
   \   000034   75..00       MOV     ?V6,#0x0
   \   000037   78..         MOV     R0,#?V4
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003C   7C08         MOV     R4,#0x8
   \   00003E   7D00         MOV     R5,#0x0
   \   000040   7403         MOV     A,#0x3
   \   000042   12....       LCALL   ?XSTACK_DISP101_8
   \   000045   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000048   7403         MOV     A,#0x3
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
   2223          
   2224              pbindRemoveDev(&devAddr);
   \   00004D                ; Setup parameters for indirect call
   \   00004D   AA..         MOV     R2,?XSP + 0
   \   00004F   AB..         MOV     R3,?XSP + 1
   \   000051   90....       MOV     DPTR,#pbindRemoveDev
   \   000054   12....       LCALL   ?Subroutine30 & 0xFFFF
   2225            }
   \                     ??CrossCallReturnLabel_46:
   \   000057   12....       LCALL   ?CALL_IND
   2226          
   2227            // Remove if child
   2228            if ( ZSTACK_ROUTER_BUILD )
   2229            {
   2230              // Router shall notify the Trust Center that a child End Device or
   2231              // a neighbor Router (within radius=1) has left the network
   2232              APSME_UpdateDeviceReq_t req;
   2233          
   2234              // forward authorization to the Trust Center
   2235              req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   2236              req.devAddr    = nwkAddr;
   2237              req.devExtAddr = extAddr;
   2238              req.status = APSME_UD_DEVICE_LEFT;
   2239          
   2240              if ( rejoin == FALSE )
   2241              {
   2242                if(!APSME_IsDistributedSecurity())
   2243                {
   2244                  if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   2245                  {
   2246                    uint8 found;
   2247                    APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
   2248                    
   2249                    APSME_SearchTCLinkKeyEntry(extAddr,&found,NULL);
   2250                    
   2251                    // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   2252                    // un-encrypted and one APS encrypted, to make sure that it can interoperate
   2253                    // with legacy Coordinator devices which can only handle one or the other.
   2254                    if ( ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY) && ( found == FALSE ) )
   2255                    {
   2256                      req.apsSecure = FALSE;
   2257          
   2258                      // send and APSME_UPDATE_DEVICE request to the trust center
   2259                      APSME_UpdateDeviceReq( &req );
   2260                    }
   2261          
   2262                    // send the message APS encrypted
   2263                    req.apsSecure = TRUE;
   2264          
   2265                    // send and APSME_UPDATE_DEVICE request to the trust center
   2266                    APSME_UpdateDeviceReq( &req );
   2267                  }
   2268                  else
   2269                  {
   2270                    req.apsSecure = FALSE;
   2271          
   2272                    // send and APSME_UPDATE_DEVICE request to the trust center
   2273                    APSME_UpdateDeviceReq( &req );
   2274                  }
   2275                }
   2276              }
   2277          
   2278              NLME_RemoveChild( extAddr, removeChildren );
   2279            }
   2280          
   2281            // Remove Routing table related entry
   2282            RTG_RemoveRtgEntry( nwkAddr, 0 );
   \                     ??ZDApp_LeaveUpdate_0:
   \   00005A                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   00005A   7900         MOV     R1,#0x0
   \   00005C   AA..         MOV     R2,?V0
   \   00005E   AB..         MOV     R3,?V1
   \   000060   12....       LCALL   `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   2283          
   2284            // Remove entry from neighborTable
   2285            nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
   \   000063                ; Setup parameters for call to function nwkNeighborRemove
   \   000063   90....       MOV     DPTR,#_NIB + 33
   \   000066   E0           MOVX    A,@DPTR
   \   000067   FC           MOV     R4,A
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   FD           MOV     R5,A
   \   00006B   AA..         MOV     R2,?V0
   \   00006D   AB..         MOV     R3,?V1
   \   00006F   12....       LCALL   `??nwkNeighborRemove::?relay`; Banked call to: nwkNeighborRemove
   2286          
   2287            // Schedule to save data to NV
   2288            ZDApp_NwkWriteNVRequest();
   \   000072                ; Setup parameters for call to function AddrMgrWriteNVRequest
   \   000072   12....       LCALL   `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
   2289          }
   \   000075   7409         MOV     A,#0x9
   \   000077   02....       LJMP    ??Subroutine37_0 & 0xFFFF
   2290          
   2291          /*********************************************************************
   2292           * @fn      ZDApp_NetworkDiscoveryReq
   2293           *
   2294           * @brief   Request a network discovery.
   2295           *
   2296           * @param  scanChannels -
   2297           * @param  scanDuration -
   2298           *
   2299           * @return  ZStatus_t
   2300           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2301          ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
   \                     ZDApp_NetworkDiscoveryReq:
   2302          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2303            // Setup optional filters - tbd
   2304          
   2305            // Request NLME network discovery
   2306            return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
   \   000005                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000005   12....       LCALL   `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   000008   02....       LJMP    ??Subroutine36_0 & 0xFFFF
   2307          }
   2308          
   2309          /*********************************************************************
   2310           * @fn      ZDApp_JoinReq
   2311           *
   2312           * @brief   Request the device to join a parent in a network.
   2313           *
   2314           * @param   channel -
   2315           * @param   panID -
   2316           *
   2317           * @return  ZStatus_t
   2318           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7404         MOV     A,#0x4
   \   000002                REQUIRE ??Subroutine35_0
   \   000002                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine36_0
   \   000003                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2319          ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
   \                     ZDApp_JoinReq:
   2320                                   uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
   2321          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   2322            // Sync up the node with the stack profile (In the case where a pro device
   2323            // joins a non-pro network, or verse versa)
   2324            ZDApp_NodeProfileSync( stackProfile);
   \   00000F                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00000F   740F         MOV     A,#0xf
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   12....       LCALL   `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   2325          
   2326            // Request NLME Join Request
   2327            return NLME_JoinRequest(extendedPanID, panID,channel,
   2328                                    ZDO_Config_Node_Descriptor.CapabilityFlags,
   2329                                    chosenParent, parentDepth);
   \   000019                ; Setup parameters for call to function NLME_JoinRequest
   \   000019   740E         MOV     A,#0xe
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V3,A
   \   000021   78..         MOV     R0,#?V3
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000026   740D         MOV     A,#0xd
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00002E   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V3,A
   \   000034   78..         MOV     R0,#?V3
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000039   A9..         MOV     R1,?V2
   \   00003B   AC..         MOV     R4,?V0
   \   00003D   AD..         MOV     R5,?V1
   \   00003F   EE           MOV     A,R6
   \   000040   FA           MOV     R2,A
   \   000041   EF           MOV     A,R7
   \   000042   FB           MOV     R3,A
   \   000043   12....       LCALL   `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   000046   02....       LJMP    ?Subroutine5 & 0xFFFF
   2330          
   2331          }
   2332          
   2333          /*********************************************************************
   2334           * @fn      ZDApp_DeviceConfigured
   2335           *
   2336           * @brief   Check to see if the local device is configured (i.e., part
   2337           *          of a network).
   2338           *
   2339           * @param   none
   2340           *
   2341           * @return  TRUE if configured. FALSE, otherwise.
   2342           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2343          uint8 ZDApp_DeviceConfigured( void )
   \                     ZDApp_DeviceConfigured:
   2344          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2345            uint16 nwkAddr = INVALID_NODE_ADDR;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   74FE         MOV     A,#-0x2
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   04           INC     A
   \   000015   12....       LCALL   ?Subroutine10 & 0xFFFF
   2346          
   2347            osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
   2348                          sizeof( uint16), &nwkAddr );
   \                     ??CrossCallReturnLabel_3:
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   75..02       MOV     ?V0,#0x2
   \   00001E   75..00       MOV     ?V1,#0x0
   \   000021   78..         MOV     R0,#?V0
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   7C14         MOV     R4,#0x14
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   7A21         MOV     R2,#0x21
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000031   7404         MOV     A,#0x4
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
   2349          
   2350            // Does the NIB have anything more than default?
   2351            return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
   \   000036   85..82       MOV     DPL,?XSP + 0
   \   000039   85..83       MOV     DPH,?XSP + 1
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   64FE         XRL     A,#0xfe
   \   00003F   7003         JNZ     ??ZDApp_DeviceConfigured_0
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F4           CPL     A
   \                     ??ZDApp_DeviceConfigured_0:
   \   000044   7004         JNZ     ??ZDApp_DeviceConfigured_1
   \   000046   7900         MOV     R1,#0x0
   \   000048   8002         SJMP    ??ZDApp_DeviceConfigured_2
   \                     ??ZDApp_DeviceConfigured_1:
   \   00004A   7901         MOV     R1,#0x1
   \                     ??ZDApp_DeviceConfigured_2:
   \   00004C   7402         MOV     A,#0x2
   \   00004E   02....       LJMP    ??Subroutine45_0 & 0xFFFF
   2352          }
   2353          
   2354          /*********************************************************************
   2355           * CALLBACK FUNCTIONS
   2356           */
   2357          
   2358          
   2359          /*********************************************************************
   2360           * @fn      ZDApp_SendEventMsg()
   2361           *
   2362           * @brief
   2363           *
   2364           *   Sends a Network Join message
   2365           *
   2366           * @param  cmd - command ID
   2367           * @param  len - length (in bytes) of the buf field
   2368           * @param  buf - buffer for the rest of the message.
   2369           *
   2370           * @return  none
   2371           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2372          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   2373          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   2374            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   000008                ; Setup parameters for call to function ZDApp_SendMsg
   \   000008   FB           MOV     R3,A
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   90....       MOV     DPTR,#ZDAppTaskID
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F9           MOV     R1,A
   \   000010   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2375          }
   \   000013   02....       LJMP    ??Subroutine34_0 & 0xFFFF
   2376          
   2377          /*********************************************************************
   2378           * @fn      ZDApp_SendMsg()
   2379           *
   2380           * @brief   Sends a OSAL message
   2381           *
   2382           * @param  taskID - Where to send the message
   2383           * @param  cmd - command ID
   2384           * @param  len - length (in bytes) of the buf field
   2385           * @param  buf - buffer for the rest of the message.
   2386           *
   2387           * @return  none
   2388           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2389          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   2390          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   \   000007   8A..         MOV     ?V6,R2
   \   000009   8B..         MOV     ?V5,R3
   \   00000B   8C..         MOV     ?V2,R4
   \   00000D   8D..         MOV     ?V3,R5
   2391            osal_event_hdr_t *msgPtr;
   2392          
   2393            // Send the address to the task
   2394            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F   AE..         MOV     R6,?V5
   \   000011                ; Setup parameters for call to function osal_msg_allocate
   \   000011   EE           MOV     A,R6
   \   000012   FA           MOV     R2,A
   \   000013   7B00         MOV     R3,#0x0
   \   000015   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000018   8A..         MOV     ?V0,R2
   \   00001A   8B..         MOV     ?V1,R3
   2395            if ( msgPtr )
   \   00001C   EA           MOV     A,R2
   \   00001D   45..         ORL     A,?V1
   \   00001F   6035         JZ      ??ZDApp_SendMsg_0
   2396            {
   2397              if ( (len > 0) && (buf != NULL) )
   \   000021   EE           MOV     A,R6
   \   000022   6020         JZ      ??ZDApp_SendMsg_1
   \   000024   E5..         MOV     A,?V2
   \   000026   45..         ORL     A,?V3
   \   000028   601A         JZ      ??ZDApp_SendMsg_1
   2398                osal_memcpy( msgPtr, buf, len );
   \   00002A                ; Setup parameters for call to function osal_memcpy
   \   00002A   85....       MOV     ?V8,?V2
   \   00002D   85....       MOV     ?V9,?V3
   \   000030   75..00       MOV     ?V10,#0x0
   \   000033   78..         MOV     R0,#?V8
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000038   EE           MOV     A,R6
   \   000039   FC           MOV     R4,A
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00003F   7403         MOV     A,#0x3
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
   2399          
   2400              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   000044   85..82       MOV     DPL,?V0
   \   000047   85..83       MOV     DPH,?V1
   \   00004A   E5..         MOV     A,?V6
   \   00004C   F0           MOVX    @DPTR,A
   2401              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   00004D                ; Setup parameters for call to function osal_msg_send
   \   00004D   AA..         MOV     R2,?V0
   \   00004F   AB..         MOV     R3,?V1
   \   000051   A9..         MOV     R1,?V4
   \   000053   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2402            }
   2403          }
   \                     ??ZDApp_SendMsg_0:
   \   000056   7F0B         MOV     R7,#0xb
   \   000058   02....       LJMP    ?BANKED_LEAVE_XDATA
   2404          
   2405          /*********************************************************************
   2406           * Call Back Functions from NWK  - API
   2407           */
   2408          
   2409          /*********************************************************************
   2410           * @fn          ZDO_NetworkDiscoveryConfirmCB
   2411           *
   2412           * @brief       This function returns a choice of PAN to join.
   2413           *
   2414           * @param       status - return status of the nwk discovery confirm
   2415           *
   2416           * @return      ZStatus_t
   2417           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine38_0
   \   000003                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2418          ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
   \                     ZDO_NetworkDiscoveryConfirmCB:
   2419          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
   2420            osal_event_hdr_t msg;
   2421          
   2422            // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
   2423            // Send ZDO_MGMT_NWK_DISC_RSP back
   2424          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   2425            if ( zdappMgmtNwkDiscReqInProgress )
   2426            {
   2427              zdappMgmtNwkDiscReqInProgress = false;
   2428              ZDO_FinishProcessingMgmtNwkDiscReq();
   2429            }
   2430            else
   2431          #endif
   2432            {
   2433              // Pass the confirm to another task if it registers the callback
   2434              // Otherwise, pass the confirm to ZDApp.
   2435              if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
   \   000011   90....       MOV     DPTR,#zdoCBFunc + 4
   \   000014   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000017   6009         JZ      ??ZDO_NetworkDiscoveryConfirmCB_0
   2436              {
   2437                zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
   \   000019                ; Setup parameters for indirect call
   \   000019   AA..         MOV     R2,?XSP + 0
   \   00001B   AB..         MOV     R3,?XSP + 1
   \   00001D   12....       LCALL   ?CALL_IND
   \   000020   8017         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
   2438              }
   2439              else
   2440              {
   2441                // Otherwise, send scan confirm to ZDApp task to proceed
   2442                msg.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E4           CLR     A
   \   000028   F0           MOVX    @DPTR,A
   2443          
   2444                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
   \   000029                ; Setup parameters for call to function ZDApp_SendMsg
   \   000029   04           INC     A
   \   00002A   12....       LCALL   ?XSTACK_DISP102_8
   \   00002D   7B02         MOV     R3,#0x2
   \   00002F   7A01         MOV     R2,#0x1
   \   000031   90....       MOV     DPTR,#ZDAppTaskID
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2445              }
   2446            }
   2447            return (ZSuccess);
   \                     ??ZDO_NetworkDiscoveryConfirmCB_1:
   \   000039   7900         MOV     R1,#0x0
   \   00003B   7403         MOV     A,#0x3
   \   00003D   02....       LJMP    ?Subroutine3 & 0xFFFF
   2448          }  // ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E582         MOV     A,DPL
   \   000009   4583         ORL     A,DPH
   \   00000B   22           RET
   2449          
   2450          /*********************************************************************
   2451           * @fn          ZDApp_NwkDescListProcessing
   2452           *
   2453           * @brief       This function process the network discovery result and select
   2454           *              a parent device to join itself.
   2455           *
   2456           * @param       none
   2457           *
   2458           * @return      ZStatus_t
   2459           */
   2460          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2461          networkDesc_t* ZDApp_NwkDescListProcessing(void)
   \                     ZDApp_NwkDescListProcessing:
   2462          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2463            networkDesc_t *pNwkDesc;
   2464            uint8 i, ResultCount = 0;
   \   000005   75..00       MOV     ?V1,#0x0
   2465            uint8 stackProfile;
   2466            uint8 stackProfilePro;
   2467            uint8 selected;
   2468          
   2469            // Count the number of nwk descriptors in the list
   2470            pNwkDesc = nwk_getNwkDescList();
   \   000008                ; Setup parameters for call to function nwk_getNwkDescList
   \   000008   12....       LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   00000B   8A..         MOV     ?V2,R2
   \   00000D   8B..         MOV     ?V3,R3
   \   00000F   AE..         MOV     R6,?V2
   \   000011   AF..         MOV     R7,?V3
   \   000013   8005         SJMP    ??CrossCallReturnLabel_65
   2471            while (pNwkDesc)
   2472            {
   2473              ResultCount++;
   \                     ??ZDApp_NwkDescListProcessing_0:
   \   000015   05..         INC     ?V1
   2474              pNwkDesc = pNwkDesc->nextDesc;
   \   000017   12....       LCALL   ?Subroutine21 & 0xFFFF
   2475            }
   \                     ??CrossCallReturnLabel_65:
   \   00001A   EE           MOV     A,R6
   \   00001B   4F           ORL     A,R7
   \   00001C   70F7         JNZ     ??ZDApp_NwkDescListProcessing_0
   2476          
   2477            // process discovery results
   2478            stackProfilePro = FALSE;
   \   00001E   75..00       MOV     ?V0,#0x0
   2479            selected = FALSE;
   2480          
   2481          
   2482            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   000021   75..00       MOV     ?V2,#0x0
   2483            {
   2484              pNwkDesc = nwk_getNwkDescList();
   \                     ??ZDApp_NwkDescListProcessing_1:
   \   000024                ; Setup parameters for call to function nwk_getNwkDescList
   \   000024   12....       LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   000027   8A..         MOV     ?V4,R2
   \   000029   8B..         MOV     ?V5,R3
   \   00002B   AE..         MOV     R6,?V4
   \   00002D   AF..         MOV     R7,?V5
   2485              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00002F   75..00       MOV     ?V3,#0x0
   \   000032   8019         SJMP    ??CrossCallReturnLabel_66
   2486              {
   2487                 if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
   2488                {
   2489                  // If the extended Pan ID is commissioned to a non zero value
   2490                  // Only join the Pan that has match EPID
   2491                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   2492                    continue;
   2493          
   2494                }
   2495                else if ( zgConfigPANID != 0xFFFF )
   2496                {
   2497                  // PAN Id is preconfigured. check if it matches
   2498                  if ( pNwkDesc->panId != zgConfigPANID )
   2499                    continue;
   2500                }
   2501          
   2502                if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
   2503                {
   2504                  // check that network is allowing joining
   2505                  if ( ZSTACK_ROUTER_BUILD )
   2506                  {
   2507                    if ( stackProfilePro == FALSE )
   2508                    {
   2509                      if ( !pNwkDesc->routerCapacity )
   2510                      {
   2511                        continue;
   2512                      }
   2513                    }
   2514                    else
   2515                    {
   2516                      if ( !pNwkDesc->deviceCapacity )
   2517                      {
   2518                        continue;
   2519                      }
   2520                    }
   2521                  }
   2522                  else if ( ZSTACK_END_DEVICE_BUILD )
   2523                  {
   2524                    if ( !pNwkDesc->deviceCapacity )
   2525                    {
   2526                      continue;
   2527                    }
   2528                  }
   2529                }
   2530          
   2531                // check version of zigbee protocol
   2532                if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   2533                  continue;
   2534          
   2535                // check version of stack profile
   2536                if ( pNwkDesc->stackProfile != zgStackProfile  )
   2537                {
   2538                  if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   2539                      || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDApp_NwkDescListProcessing_2:
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6402         XRL     A,#0x2
   \   000037   7008         JNZ     ??ZDApp_NwkDescListProcessing_3
   \   000039   7401         MOV     A,#0x1
   \   00003B   68           XRL     A,R0
   \   00003C   7003         JNZ     ??ZDApp_NwkDescListProcessing_3
   2540                  {
   2541                    stackProfilePro = TRUE;
   \                     ??ZDApp_NwkDescListProcessing_4:
   \   00003E   75..01       MOV     ?V0,#0x1
   2542                  }
   2543          
   2544                  if ( stackProfile == 0 )
   \                     ??ZDApp_NwkDescListProcessing_3:
   \   000041   E5..         MOV     A,?V2
   \   000043   6003         JZ      $+5
   \   000045   02....       LJMP    ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_6:
   \   000048   05..         INC     ?V3
   \   00004A   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00004D   E5..         MOV     A,?V3
   \   00004F   C3           CLR     C
   \   000050   95..         SUBB    A,?V1
   \   000052   4003         JC      $+5
   \   000054   02....       LJMP    ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
   \   000057                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000057   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000059   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00005B   12....       LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00005E   E9           MOV     A,R1
   \   00005F   6401         XRL     A,#0x1
   \   000061   7013         JNZ     ??ZDApp_NwkDescListProcessing_8
   \   000063                ; Setup parameters for call to function sAddrExtCmp
   \   000063   EE           MOV     A,R6
   \   000064   240B         ADD     A,#0xb
   \   000066   FC           MOV     R4,A
   \   000067   E4           CLR     A
   \   000068   3F           ADDC    A,R7
   \   000069   FD           MOV     R5,A
   \   00006A   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   00006C   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00006E   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000071   E9           MOV     A,R1
   \   000072   701D         JNZ     ??ZDApp_NwkDescListProcessing_9
   \   000074   80D2         SJMP    ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_8:
   \   000076   90....       MOV     DPTR,#zgConfigPANID
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F4           CPL     A
   \   00007B   7003         JNZ     ??ZDApp_NwkDescListProcessing_10
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F4           CPL     A
   \                     ??ZDApp_NwkDescListProcessing_10:
   \   000080   600F         JZ      ??ZDApp_NwkDescListProcessing_9
   \   000082   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000085   90....       MOV     DPTR,#zgConfigPANID
   \   000088   E0           MOVX    A,@DPTR
   \   000089   68           XRL     A,R0
   \   00008A   7003         JNZ     ??ZDApp_NwkDescListProcessing_11
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   69           XRL     A,R1
   \                     ??ZDApp_NwkDescListProcessing_11:
   \   00008F   70B7         JNZ     ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_9:
   \   000091   90....       MOV     DPTR,#_NIB + 23
   \   000094   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   68           XRL     A,R0
   \   00009A   7003         JNZ     ??ZDApp_NwkDescListProcessing_12
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   69           XRL     A,R1
   \                     ??ZDApp_NwkDescListProcessing_12:
   \   00009F   700A         JNZ     ??ZDApp_NwkDescListProcessing_13
   \   0000A1   74FE         MOV     A,#-0x2
   \   0000A3   68           XRL     A,R0
   \   0000A4   7003         JNZ     ??ZDApp_NwkDescListProcessing_14
   \   0000A6   74FF         MOV     A,#-0x1
   \   0000A8   69           XRL     A,R1
   \                     ??ZDApp_NwkDescListProcessing_14:
   \   0000A9   700B         JNZ     ??ZDApp_NwkDescListProcessing_15
   \                     ??ZDApp_NwkDescListProcessing_13:
   \   0000AB   8E82         MOV     DPL,R6
   \   0000AD   8F83         MOV     DPH,R7
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   6092         JZ      ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_15:
   \   0000B6   8E82         MOV     DPL,R6
   \   0000B8   8F83         MOV     DPH,R7
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   F8           MOV     R0,A
   \   0000C1   90....       MOV     DPTR,#_NIB + 17
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   68           XRL     A,R0
   \   0000C6   7080         JNZ     ??ZDApp_NwkDescListProcessing_6
   \   0000C8   8E82         MOV     DPL,R6
   \   0000CA   8F83         MOV     DPH,R7
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   F8           MOV     R0,A
   \   0000D4   90....       MOV     DPTR,#zgStackProfile
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   68           XRL     A,R0
   \   0000D9   6032         JZ      ??ZDApp_NwkDescListProcessing_5
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   6401         XRL     A,#0x1
   \   0000DE   6003         JZ      $+5
   \   0000E0   02....       LJMP    ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
   \   0000E3   7402         MOV     A,#0x2
   \   0000E5   68           XRL     A,R0
   \   0000E6   6003         JZ      $+5
   \   0000E8   02....       LJMP    ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
   \   0000EB   02....       LJMP    ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
   2545                  {
   2546                    continue;
   2547                  }
   2548                }
   2549          
   2550                break;
   2551              }
   2552          
   2553              if (i < ResultCount)
   2554              {
   2555               selected = TRUE;
   2556                break;
   2557              }
   2558          
   2559              // break if selected or stack profile pro wasn't found
   2560              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDApp_NwkDescListProcessing_7:
   \   0000EE   E5..         MOV     A,?V0
   \   0000F0   600C         JZ      ??ZDApp_NwkDescListProcessing_16
   2561              {
   2562                break;
   2563              }
   2564            }
   \   0000F2   05..         INC     ?V2
   \   0000F4   E5..         MOV     A,?V2
   \   0000F6   C3           CLR     C
   \   0000F7   9402         SUBB    A,#0x2
   \   0000F9   5003         JNC     $+5
   \   0000FB   02....       LJMP    ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
   2565          
   2566            if ( i == ResultCount )
   \                     ??ZDApp_NwkDescListProcessing_16:
   \   0000FE   E5..         MOV     A,?V1
   \   000100   65..         XRL     A,?V3
   \   000102   7009         JNZ     ??ZDApp_NwkDescListProcessing_5
   2567            {
   2568              nwk_desc_list_free();
   \   000104                ; Setup parameters for call to function nwk_desc_list_free
   \   000104   12....       LCALL   `??nwk_desc_list_free::?relay`; Banked call to: nwk_desc_list_free
   2569              return (NULL);   // couldn't find appropriate PAN to join !
   \   000107   7A00         MOV     R2,#0x0
   \   000109   7B00         MOV     R3,#0x0
   \   00010B   8004         SJMP    ??ZDApp_NwkDescListProcessing_17
   2570            }
   2571            else
   2572            {
   2573              return (pNwkDesc);
   \                     ??ZDApp_NwkDescListProcessing_5:
   \   00010D   EE           MOV     A,R6
   \   00010E   FA           MOV     R2,A
   \   00010F   EF           MOV     A,R7
   \   000110   FB           MOV     R3,A
   2574            }
   \                     ??ZDApp_NwkDescListProcessing_17:
   \   000111   02....       LJMP    ?Subroutine1 & 0xFFFF
   2575          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009                REQUIRE ??Subroutine43_0
   \   000009                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine44_0
   \   000004                ; // Fall through to label ??Subroutine44_0
   2576          
   2577          /*********************************************************************
   2578           * @fn          ZDO_NetworkFormationConfirmCB
   2579           *
   2580           * @brief       This function reports the results of the request to
   2581           *              initialize a coordinator in a network.
   2582           *
   2583           * @param       Status - Result of NLME_NetworkFormationRequest()
   2584           *
   2585           * @return      none
   2586           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2587          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2588          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   2589            nwkStatus = (byte)Status;
   \   00000B   90....       MOV     DPTR,#nwkStatus
   \   00000E   F0           MOVX    @DPTR,A
   2590          
   2591            if ( Status == ZSUCCESS )
   \   00000F   6003         JZ      $+5
   \   000011   02....       LJMP    ??ZDO_NetworkFormationConfirmCB_0 & 0xFFFF
   2592            {
   2593              bdb_setNodeIsOnANetwork(TRUE);
   \   000014                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000014   7901         MOV     R1,#0x1
   \   000016   12....       LCALL   `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
   2594              
   2595              if(ZG_DEVICE_COORDINATOR_TYPE)
   \   000019   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   700B         JNZ     ??ZDO_NetworkFormationConfirmCB_1
   2596              {
   2597                // LED on shows Coordinator started
   2598                zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   2599          
   2600                zdoHalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   2601          
   2602                  #if defined ( ZBIT )
   2603                      SIM_SetColor(0xd0ffd0);
   2604                  #endif
   2605          
   2606                if ( devState == DEV_HOLD )
   \   00001F   90....       MOV     DPTR,#devState
   \   000022   E0           MOVX    A,@DPTR
   \   000023   7012         JNZ     ??ZDO_NetworkFormationConfirmCB_2
   2607                {
   2608                  ZDApp_ChangeState( DEV_COORD_STARTING );
   \   000025                ; Setup parameters for call to function ZDApp_ChangeState
   \   000025   7908         MOV     R1,#0x8
   \   000027   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   2609                }
   2610              }
   2611          
   2612              if(ZG_DEVICE_RTR_TYPE)
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   00002A   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6007         JZ      ??ZDO_NetworkFormationConfirmCB_2
   \   000030   6401         XRL     A,#0x1
   \   000032   6003         JZ      $+5
   \   000034   02....       LJMP    ??ZDO_NetworkFormationConfirmCB_0 & 0xFFFF
   2613              {
   2614                uint8 x;
   2615                uint8 tmpKey[SEC_KEY_LEN] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
   \                     ??ZDO_NetworkFormationConfirmCB_2:
   \   000037   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
   \   00003A   7401         MOV     A,#0x1
   \   00003C   12....       LCALL   ?XSTACK_DISP102_8
   \   00003F   7410         MOV     A,#0x10
   \   000041   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   2616                
   2617                if(APSME_IsDistributedSecurity())
   \   000044                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   000044   12....       LCALL   `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000047   E9           MOV     A,R1
   \   000048   7003         JNZ     $+5
   \   00004A   02....       LJMP    ??ZDO_NetworkFormationConfirmCB_0 & 0xFFFF
   2618                {
   2619                  //Check if we have an extended PANID assigned
   2620                  if(nwk_ExtPANIDValid( _NIB.extendedPANID ) == false)
   \   00004D                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   00004D   7A..         MOV     R2,#(_NIB + 53) & 0xff
   \   00004F   7B..         MOV     R3,#((_NIB + 53) >> 8) & 0xff
   \   000051   12....       LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   000054   E9           MOV     A,R1
   \   000055   700B         JNZ     ??ZDO_NetworkFormationConfirmCB_3
   2621                  {
   2622                    //Set the extended PANID as the extended address
   2623                    osal_cpyExtAddr( _NIB.extendedPANID, aExtendedAddress );
   \   000057                ; Setup parameters for call to function sAddrExtCpy
   \   000057   7C..         MOV     R4,#aExtendedAddress & 0xff
   \   000059   7D..         MOV     R5,#(aExtendedAddress >> 8) & 0xff
   \   00005B   7A..         MOV     R2,#(_NIB + 53) & 0xff
   \   00005D   7B..         MOV     R3,#((_NIB + 53) >> 8) & 0xff
   \   00005F   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2624                  } 
   2625                  
   2626                  ZMacSetReq(MAC_SUPERFRAME_PAN_COORD,0);
   \                     ??ZDO_NetworkFormationConfirmCB_3:
   \   000062                ; Setup parameters for call to function ZMacSetReq
   \   000062   7A00         MOV     R2,#0x0
   \   000064   7B00         MOV     R3,#0x0
   \   000066   79F0         MOV     R1,#-0x10
   \   000068   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   2627                  
   2628                  //Set the MAC address
   2629                  ZMacSetReq( ZMacShortAddress, (uint8 *)&(_NIB.nwkDevAddress) );
   \   00006B                ; Setup parameters for call to function ZMacSetReq
   \   00006B   7A..         MOV     R2,#(_NIB + 20) & 0xff
   \   00006D   7B..         MOV     R3,#((_NIB + 20) >> 8) & 0xff
   \   00006F   7953         MOV     R1,#0x53
   \   000071   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   2630          
   2631                  if ( _NIB.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   2632                    x = true;
   2633                  else
   2634                    x = false;
   \   000074   90....       MOV     DPTR,#_NIB + 14
   \   000077   E0           MOVX    A,@DPTR
   \   000078   A2E3         MOV     C,0xE0 /* A   */.3
   \   00007A   5004         JNC     ??ZDO_NetworkFormationConfirmCB_4
   \   00007C   D2F0         SETB    B.0
   \   00007E   8002         SJMP    ??ZDO_NetworkFormationConfirmCB_5
   \                     ??ZDO_NetworkFormationConfirmCB_4:
   \   000080   C2F0         CLR     B.0
   \                     ??ZDO_NetworkFormationConfirmCB_5:
   \   000082   A2F0         MOV     C,B.0
   \   000084   E4           CLR     A
   \   000085   33           RLC     A
   \   000086   85..82       MOV     DPL,?XSP + 0
   \   000089   85..83       MOV     DPH,?XSP + 1
   \   00008C   F0           MOVX    @DPTR,A
   2635                  ZMacSetReq( ZMacRxOnIdle, &x );
   \   00008D                ; Setup parameters for call to function ZMacSetReq
   \   00008D   AA..         MOV     R2,?XSP + 0
   \   00008F   AB..         MOV     R3,?XSP + 1
   \   000091   7952         MOV     R1,#0x52
   \   000093   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   2636          
   2637                  // Change NIB state to router for restore
   2638                  _NIB.nwkState = NWK_ROUTER;
   \   000096   90....       MOV     DPTR,#_NIB + 35
   \   000099   7408         MOV     A,#0x8
   \   00009B   F0           MOVX    @DPTR,A
   2639                  NLME_SetAssocFlags();
   \   00009C                ; Setup parameters for call to function NLME_SetAssocFlags
   \   00009C   12....       LCALL   `??NLME_SetAssocFlags::?relay`; Banked call to: NLME_SetAssocFlags
   2640          
   2641                  //Restore the nwk security material using the generic index
   2642                  ZDApp_RestoreNwkSecMaterial();
   \   00009F                ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
   \   00009F   12....       LCALL   `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
   2643                  
   2644                  //Be sure to store the nwk FrameCounter if
   2645                  if(nwkFrameCounter == 0)
   \   0000A2   90....       MOV     DPTR,#nwkFrameCounter
   \   0000A5   12....       LCALL   ?XLOAD_R0123
   \   0000A8   E8           MOV     A,R0
   \   0000A9   49           ORL     A,R1
   \   0000AA   4A           ORL     A,R2
   \   0000AB   4B           ORL     A,R3
   \   0000AC   700D         JNZ     ??ZDO_NetworkFormationConfirmCB_6
   2646                  {
   2647                    nwkFrameCounter = 1;
   \   0000AE   90....       MOV     DPTR,#nwkFrameCounter
   \   0000B1   7401         MOV     A,#0x1
   \   0000B3   F0           MOVX    @DPTR,A
   \   0000B4   A3           INC     DPTR
   \   0000B5   E4           CLR     A
   \   0000B6   F0           MOVX    @DPTR,A
   \   0000B7   A3           INC     DPTR
   \   0000B8   F0           MOVX    @DPTR,A
   \   0000B9   A3           INC     DPTR
   \   0000BA   F0           MOVX    @DPTR,A
   2648                  }
   2649                  
   2650                  osal_set_event(ZDAppTaskID, ZDO_NWK_UPDATE_NV | ZDO_FRAMECOUNTER_CHANGE);
   \                     ??ZDO_NetworkFormationConfirmCB_6:
   \   0000BB                ; Setup parameters for call to function osal_set_event
   \   0000BB   7A00         MOV     R2,#0x0
   \   0000BD   7B03         MOV     R3,#0x3
   \   0000BF   90....       MOV     DPTR,#ZDAppTaskID
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   F9           MOV     R1,A
   \   0000C4   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   2651                  
   2652                  ZDSecMgrGenerateRndKey(tmpKey);
   \   0000C7                ; Setup parameters for call to function ZDSecMgrGenerateRndKey
   \   0000C7   7401         MOV     A,#0x1
   \   0000C9   12....       LCALL   ?XSTACK_DISP101_8
   \   0000CC   12....       LCALL   `??ZDSecMgrGenerateRndKey::?relay`; Banked call to: ZDSecMgrGenerateRndKey
   2653                   
   2654                  //Set the nwk key as the default and initialize the keySeqNum
   2655                  SSP_UpdateNwkKey( tmpKey, 0 );
   \   0000CF                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   0000CF   7900         MOV     R1,#0x0
   \   0000D1   7401         MOV     A,#0x1
   \   0000D3   12....       LCALL   ?XSTACK_DISP101_8
   \   0000D6   12....       LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   2656                  if ( !_NIB.nwkKeyLoaded )
   \   0000D9   90....       MOV     DPTR,#_NIB + 61
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   7005         JNZ     ??ZDO_NetworkFormationConfirmCB_7
   2657                  {
   2658                    SSP_SwitchNwkKey( 0 );
   \   0000DF                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   0000DF   7900         MOV     R1,#0x0
   \   0000E1   12....       LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   2659                  }
   2660                  
   2661                  // Clear copy in RAM after use 
   2662                  osal_memset(tmpKey,0,SEC_KEY_LEN);
   \                     ??ZDO_NetworkFormationConfirmCB_7:
   \   0000E4                ; Setup parameters for call to function osal_memset
   \   0000E4   7C10         MOV     R4,#0x10
   \   0000E6   7D00         MOV     R5,#0x0
   \   0000E8   7900         MOV     R1,#0x0
   \   0000EA   7401         MOV     A,#0x1
   \   0000EC   12....       LCALL   ?XSTACK_DISP101_8
   \   0000EF   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2663                  
   2664                  //Success formation of distributed nwk
   2665                  bdb_nwkFormationAttempt(TRUE);
   \   0000F2                ; Setup parameters for call to function bdb_nwkFormationAttempt
   \   0000F2   7901         MOV     R1,#0x1
   \   0000F4   12....       LCALL   `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
   2666                }
   2667              }
   2668            }
   2669          
   2670            else
   2671            {
   2672              #if defined(BLINK_LEDS)
   2673                zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2674              #endif
   2675            }
   2676          
   2677          
   2678            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   0000F7                ; Setup parameters for call to function osal_set_event
   \   0000F7   7A02         MOV     R2,#0x2
   \   0000F9   7B00         MOV     R3,#0x0
   \   0000FB   90....       MOV     DPTR,#ZDAppTaskID
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   F9           MOV     R1,A
   \   000100   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   2679          }
   \   000103   7411         MOV     A,#0x11
   \   000105   02....       LJMP    ??Subroutine33_0 & 0xFFFF
   2680          
   2681          /****************************************************************************
   2682           * @fn          ZDApp_beaconIndProcessing
   2683           *
   2684           * @brief       This function processes the incoming beacon indication.
   2685           *
   2686           *              When another task (MT or App) is registered to process
   2687           *              beacon indication themselves, this function will parse the
   2688           *              beacon payload and pass the beacon descriptor to that task
   2689           *              If no other tasks registered, this function will process
   2690           *              the beacon payload and generate the network descriptor link
   2691           *              list.
   2692           *
   2693           * @param
   2694           *
   2695           * @return      none
   2696           *
   2697           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2698          void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
   \                     ZDO_beaconNotifyIndCB:
   2699          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2700            // Pass the beacon Indication to another task if it registers the callback
   2701            // Otherwise, process the beacon notification here.
   2702            if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
   \   000009   90....       MOV     DPTR,#zdoCBFunc + 6
   \   00000C   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00000F   6006         JZ      ??ZDO_beaconNotifyIndCB_0
   2703            {
   2704              zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
   \   000011                ; Setup parameters for indirect call
   \   000011   12....       LCALL   ?CALL_IND
   \   000014   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2705            }
   2706            else
   2707            {
   2708              networkDesc_t *pNwkDesc;
   2709              networkDesc_t *pLastNwkDesc;
   2710              uint8 found = false;
   2711          
   2712              // Add the network to the Network Descriptor List
   2713              pNwkDesc = NwkDescList;
   \                     ??ZDO_beaconNotifyIndCB_0:
   \   000017   90....       MOV     DPTR,#NwkDescList
   \   00001A   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   2714              pLastNwkDesc = NwkDescList;
   \                     ??CrossCallReturnLabel_62:
   \   00001D   90....       MOV     DPTR,#NwkDescList
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V2,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V3,A
   \   000027   EA           MOV     A,R2
   \   000028   2404         ADD     A,#0x4
   \   00002A   F5..         MOV     ?V6,A
   \   00002C   E4           CLR     A
   \   00002D   35..         ADDC    A,?V1
   \   00002F   F5..         MOV     ?V7,A
   \   000031   EA           MOV     A,R2
   \   000032   2402         ADD     A,#0x2
   \   000034   F5..         MOV     ?V4,A
   \   000036   E4           CLR     A
   \   000037   35..         ADDC    A,?V1
   \   000039   F5..         MOV     ?V5,A
   \   00003B   802B         SJMP    ??CrossCallReturnLabel_67
   2715              while (pNwkDesc)
   2716              {
   2717                if ((pNwkDesc->panId == pBeacon->panID) &&
   2718                    (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
   \                     ??ZDO_beaconNotifyIndCB_2:
   \   00003D   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000040   85..82       MOV     DPL,?V4
   \   000043   85..83       MOV     DPH,?V5
   \   000046   E0           MOVX    A,@DPTR
   \   000047   68           XRL     A,R0
   \   000048   7003         JNZ     ??ZDO_beaconNotifyIndCB_3
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   69           XRL     A,R1
   \                     ??ZDO_beaconNotifyIndCB_3:
   \   00004D   7012         JNZ     ??ZDO_beaconNotifyIndCB_4
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F8           MOV     R0,A
   \   000057   85..82       MOV     DPL,?V6
   \   00005A   85..83       MOV     DPH,?V7
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   68           XRL     A,R0
   \   00005F   6067         JZ      ??ZDO_beaconNotifyIndCB_5
   2719                {
   2720                  found = true;
   2721                  break;
   2722                }
   2723                pLastNwkDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_4:
   \   000061   8E..         MOV     ?V2,R6
   \   000063   8F..         MOV     ?V3,R7
   2724                pNwkDesc = pNwkDesc->nextDesc;
   \   000065   12....       LCALL   ?Subroutine21 & 0xFFFF
   2725              }
   \                     ??CrossCallReturnLabel_67:
   \   000068   EE           MOV     A,R6
   \   000069   4F           ORL     A,R7
   \   00006A   70D1         JNZ     ??ZDO_beaconNotifyIndCB_2
   2726          
   2727              // If no existing descriptor found, make a new one and add to the list
   2728              if (found == false)
   2729              {
   2730                pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
   \   00006C                ; Setup parameters for call to function osal_mem_alloc
   \   00006C   7A16         MOV     R2,#0x16
   \   00006E   7B00         MOV     R3,#0x0
   \   000070   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000073   8A..         MOV     ?V8,R2
   \   000075   8B..         MOV     ?V9,R3
   \   000077   AE..         MOV     R6,?V8
   \   000079   AF..         MOV     R7,?V9
   2731                if ( !pNwkDesc )
   \   00007B   EE           MOV     A,R6
   \   00007C   4F           ORL     A,R7
   \   00007D   7003         JNZ     $+5
   \   00007F   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2732                {
   2733                  // Memory alloc failed, discard this beacon
   2734                  return;
   2735                }
   2736          
   2737                // Clear the network descriptor
   2738                osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
   \   000082                ; Setup parameters for call to function osal_memset
   \   000082   7C16         MOV     R4,#0x16
   \   000084   7D00         MOV     R5,#0x0
   \   000086   7900         MOV     R1,#0x0
   \   000088   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2739          
   2740                // Initialize the descriptor
   2741                pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
   \   00008B   8E82         MOV     DPL,R6
   \   00008D   8F83         MOV     DPH,R7
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   74FE         MOV     A,#-0x2
   \   000098   F0           MOVX    @DPTR,A
   \   000099   A3           INC     DPTR
   \   00009A   04           INC     A
   \   00009B   F0           MOVX    @DPTR,A
   2742                pNwkDesc->chosenRouterDepth = 0xFF;
   \   00009C   8E82         MOV     DPL,R6
   \   00009E   8F83         MOV     DPH,R7
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   F0           MOVX    @DPTR,A
   2743          
   2744                // Save new entry into the descriptor list
   2745                if ( !NwkDescList )
   \   0000AB   90....       MOV     DPTR,#NwkDescList
   \   0000AE   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0000B1   7005         JNZ     ??ZDO_beaconNotifyIndCB_6
   2746                {
   2747                  NwkDescList = pNwkDesc;
   \   0000B3   90....       MOV     DPTR,#NwkDescList
   \   0000B6   800B         SJMP    ??ZDO_beaconNotifyIndCB_7
   2748                }
   2749                else
   2750                {
   2751                  pLastNwkDesc->nextDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_6:
   \   0000B8   E5..         MOV     A,?V2
   \   0000BA   2414         ADD     A,#0x14
   \   0000BC   F582         MOV     DPL,A
   \   0000BE   E4           CLR     A
   \   0000BF   35..         ADDC    A,?V3
   \   0000C1   F583         MOV     DPH,A
   \                     ??ZDO_beaconNotifyIndCB_7:
   \   0000C3   EE           MOV     A,R6
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   EF           MOV     A,R7
   \   0000C7   F0           MOVX    @DPTR,A
   2752                }
   2753              }
   2754          
   2755              // Update the descriptor with the incoming beacon
   2756              pNwkDesc->stackProfile   = pBeacon->stackProfile;
   \                     ??ZDO_beaconNotifyIndCB_5:
   \   0000C8   85..82       MOV     DPL,?V0
   \   0000CB   85..83       MOV     DPH,?V1
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000DA   A3           INC     DPTR
   \   0000DB   F0           MOVX    @DPTR,A
   2757              pNwkDesc->version        = pBeacon->protocolVersion;
   \   0000DC   E5..         MOV     A,?V0
   \   0000DE   2408         ADD     A,#0x8
   \   0000E0   F8           MOV     R0,A
   \   0000E1   E4           CLR     A
   \   0000E2   35..         ADDC    A,?V1
   \   0000E4   F9           MOV     R1,A
   \   0000E5   8882         MOV     DPL,R0
   \   0000E7   8983         MOV     DPH,R1
   \   0000E9   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000EC   F0           MOVX    @DPTR,A
   2758              pNwkDesc->logicalChannel = pBeacon->logicalChannel;
   \   0000ED   85..82       MOV     DPL,?V6
   \   0000F0   85..83       MOV     DPH,?V7
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   8E82         MOV     DPL,R6
   \   0000F6   8F83         MOV     DPH,R7
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   F0           MOVX    @DPTR,A
   2759              pNwkDesc->panId          = pBeacon->panID;
   \   0000FB   85..82       MOV     DPL,?V4
   \   0000FE   85..83       MOV     DPH,?V5
   \   000101   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000104   8E82         MOV     DPL,R6
   \   000106   8F83         MOV     DPH,R7
   \   000108   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   2760              pNwkDesc->updateId       = pBeacon->updateID;
   \                     ??CrossCallReturnLabel_79:
   \   00010B   E5..         MOV     A,?V0
   \   00010D   240C         ADD     A,#0xc
   \   00010F   F582         MOV     DPL,A
   \   000111   E4           CLR     A
   \   000112   35..         ADDC    A,?V1
   \   000114   F583         MOV     DPH,A
   \   000116   E0           MOVX    A,@DPTR
   \   000117   C0E0         PUSH    A
   \   000119   EE           MOV     A,R6
   \   00011A   2413         ADD     A,#0x13
   \   00011C   F582         MOV     DPL,A
   \   00011E   E4           CLR     A
   \   00011F   3F           ADDC    A,R7
   \   000120   F583         MOV     DPH,A
   \   000122   D0E0         POP     A
   \   000124   F0           MOVX    @DPTR,A
   2761          
   2762              // Save the extended PAN ID from the beacon payload only if 1.1 version network
   2763              if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \   000125   EE           MOV     A,R6
   \   000126   240B         ADD     A,#0xb
   \   000128   FA           MOV     R2,A
   \   000129   E4           CLR     A
   \   00012A   3F           ADDC    A,R7
   \   00012B   FB           MOV     R3,A
   \   00012C   8882         MOV     DPL,R0
   \   00012E   8983         MOV     DPH,R1
   \   000130   E0           MOVX    A,@DPTR
   \   000131   6401         XRL     A,#0x1
   \   000133   600E         JZ      ??ZDO_beaconNotifyIndCB_8
   2764              {
   2765                osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
   \   000135                ; Setup parameters for call to function sAddrExtCpy
   \   000135   E5..         MOV     A,?V0
   \   000137   240D         ADD     A,#0xd
   \   000139   FC           MOV     R4,A
   \   00013A   E4           CLR     A
   \   00013B   35..         ADDC    A,?V1
   \   00013D   FD           MOV     R5,A
   \   00013E   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000141   8009         SJMP    ??ZDO_beaconNotifyIndCB_9
   2766              }
   2767              else
   2768              {
   2769                osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_beaconNotifyIndCB_8:
   \   000143                ; Setup parameters for call to function osal_memset
   \   000143   7C08         MOV     R4,#0x8
   \   000145   7D00         MOV     R5,#0x0
   \   000147   79FF         MOV     R1,#-0x1
   \   000149   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2770              }
   2771          
   2772              // check if this device is a better choice to join...
   2773              // ...dont bother checking assocPermit flag is doing a rejoin
   2774              if ( ( pBeacon->LQI > gMIN_TREE_LQI ) &&
   2775                  ( ( pBeacon->permitJoining == TRUE ) || ( bdb_isDeviceNonFactoryNew() ) ) )
   \                     ??ZDO_beaconNotifyIndCB_9:
   \   00014C   E5..         MOV     A,?V0
   \   00014E   240A         ADD     A,#0xa
   \   000150   F8           MOV     R0,A
   \   000151   E4           CLR     A
   \   000152   35..         ADDC    A,?V1
   \   000154   F9           MOV     R1,A
   \   000155   88..         MOV     ?V2,R0
   \   000157   89..         MOV     ?V3,R1
   \   000159   8882         MOV     DPL,R0
   \   00015B   F583         MOV     DPH,A
   \   00015D   E0           MOVX    A,@DPTR
   \   00015E   F8           MOV     R0,A
   \   00015F   90....       MOV     DPTR,#gMIN_TREE_LQI
   \   000162   E0           MOVX    A,@DPTR
   \   000163   C3           CLR     C
   \   000164   98           SUBB    A,R0
   \   000165   4003         JC      $+5
   \   000167   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   \   00016A   85..82       MOV     DPL,?V0
   \   00016D   85..83       MOV     DPH,?V1
   \   000170   A3           INC     DPTR
   \   000171   A3           INC     DPTR
   \   000172   A3           INC     DPTR
   \   000173   A3           INC     DPTR
   \   000174   A3           INC     DPTR
   \   000175   E0           MOVX    A,@DPTR
   \   000176   6401         XRL     A,#0x1
   \   000178   6009         JZ      ??ZDO_beaconNotifyIndCB_10
   \   00017A                ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
   \   00017A   12....       LCALL   `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
   \   00017D   E9           MOV     A,R1
   \   00017E   7003         JNZ     $+5
   \   000180   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2776              {
   2777                uint8 selected = FALSE;
   \                     ??ZDO_beaconNotifyIndCB_10:
   \   000183   75..00       MOV     ?V6,#0x0
   2778                uint8 capacity = FALSE;
   2779          
   2780          #if defined ( ZIGBEEPRO )
   2781                if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
   2782                      (pBeacon->depth < MAX_NODE_DEPTH)) ||
   2783                    ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
   2784                     (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
   \   000186   85..82       MOV     DPL,?V2
   \   000189   85..83       MOV     DPH,?V3
   \   00018C   E0           MOVX    A,@DPTR
   \   00018D   F5..         MOV     ?V4,A
   \   00018F   EE           MOV     A,R6
   \   000190   2409         ADD     A,#0x9
   \   000192   F8           MOV     R0,A
   \   000193   E4           CLR     A
   \   000194   3F           ADDC    A,R7
   \   000195   F9           MOV     R1,A
   \   000196   8882         MOV     DPL,R0
   \   000198   8983         MOV     DPH,R1
   \   00019A   E0           MOVX    A,@DPTR
   \   00019B   F5..         MOV     ?V5,A
   \   00019D   EE           MOV     A,R6
   \   00019E   240A         ADD     A,#0xa
   \   0001A0   FA           MOV     R2,A
   \   0001A1   E4           CLR     A
   \   0001A2   3F           ADDC    A,R7
   \   0001A3   FB           MOV     R3,A
   \   0001A4   E5..         MOV     A,?V0
   \   0001A6   240B         ADD     A,#0xb
   \   0001A8   FC           MOV     R4,A
   \   0001A9   E4           CLR     A
   \   0001AA   35..         ADDC    A,?V1
   \   0001AC   FD           MOV     R5,A
   \   0001AD   E5..         MOV     A,?V5
   \   0001AF   C3           CLR     C
   \   0001B0   95..         SUBB    A,?V4
   \   0001B2   500C         JNC     ??ZDO_beaconNotifyIndCB_11
   \   0001B4   8C82         MOV     DPL,R4
   \   0001B6   8D83         MOV     DPH,R5
   \   0001B8   E0           MOVX    A,@DPTR
   \   0001B9   C3           CLR     C
   \   0001BA   9414         SUBB    A,#0x14
   \   0001BC   4019         JC      ??ZDO_beaconNotifyIndCB_12
   \   0001BE   801A         SJMP    ??ZDO_beaconNotifyIndCB_13
   \                     ??ZDO_beaconNotifyIndCB_11:
   \   0001C0   E5..         MOV     A,?V5
   \   0001C2   65..         XRL     A,?V4
   \   0001C4   7014         JNZ     ??ZDO_beaconNotifyIndCB_13
   \   0001C6   8A82         MOV     DPL,R2
   \   0001C8   8B83         MOV     DPH,R3
   \   0001CA   E0           MOVX    A,@DPTR
   \   0001CB   F5..         MOV     ?V4,A
   \   0001CD   8C82         MOV     DPL,R4
   \   0001CF   8D83         MOV     DPH,R5
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   C3           CLR     C
   \   0001D3   95..         SUBB    A,?V4
   \   0001D5   5003         JNC     ??ZDO_beaconNotifyIndCB_13
   2785                {
   2786                  selected = TRUE;
   \                     ??ZDO_beaconNotifyIndCB_12:
   \   0001D7   75..01       MOV     ?V6,#0x1
   2787                }
   2788          #else
   2789                if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
   2790                {
   2791                  selected = TRUE;
   2792                }
   2793          #endif
   2794          
   2795                if ( ZSTACK_ROUTER_BUILD )
   2796                {
   2797                  capacity = pBeacon->routerCapacity;
   2798                }
   2799                else if ( ZSTACK_END_DEVICE_BUILD )
   2800                {
   2801                  capacity = pBeacon->deviceCapacity;
   2802                }
   2803          
   2804                if ( ( (capacity) || ( pBeacon->sourceAddr == _NIB.nwkCoordAddress ) ) && (selected) )
   \                     ??ZDO_beaconNotifyIndCB_13:
   \   0001DA   E5..         MOV     A,?V0
   \   0001DC   2407         ADD     A,#0x7
   \   0001DE   F5..         MOV     ?V4,A
   \   0001E0   E4           CLR     A
   \   0001E1   35..         ADDC    A,?V1
   \   0001E3   F5..         MOV     ?V5,A
   \   0001E5   85..82       MOV     DPL,?V4
   \   0001E8   F583         MOV     DPH,A
   \   0001EA   E0           MOVX    A,@DPTR
   \   0001EB   701B         JNZ     ??ZDO_beaconNotifyIndCB_14
   \   0001ED   85..82       MOV     DPL,?V0
   \   0001F0   85..83       MOV     DPH,?V1
   \   0001F3   E0           MOVX    A,@DPTR
   \   0001F4   F5..         MOV     ?V8,A
   \   0001F6   A3           INC     DPTR
   \   0001F7   E0           MOVX    A,@DPTR
   \   0001F8   F5..         MOV     ?V9,A
   \   0001FA   90....       MOV     DPTR,#_NIB + 23
   \   0001FD   E0           MOVX    A,@DPTR
   \   0001FE   65..         XRL     A,?V8
   \   000200   7004         JNZ     ??ZDO_beaconNotifyIndCB_15
   \   000202   A3           INC     DPTR
   \   000203   E0           MOVX    A,@DPTR
   \   000204   65..         XRL     A,?V9
   \                     ??ZDO_beaconNotifyIndCB_15:
   \   000206   704A         JNZ     ??ZDO_beaconNotifyIndCB_16
   \                     ??ZDO_beaconNotifyIndCB_14:
   \   000208   E5..         MOV     A,?V6
   \   00020A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00020C   5030         JNC     ??ZDO_beaconNotifyIndCB_17
   2805                {
   2806                  // this is the new chosen router for joining...
   2807                  pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
   \   00020E   85..82       MOV     DPL,?V0
   \   000211   85..83       MOV     DPH,?V1
   \   000214   E0           MOVX    A,@DPTR
   \   000215   F5..         MOV     ?V6,A
   \   000217   A3           INC     DPTR
   \   000218   E0           MOVX    A,@DPTR
   \   000219   F5..         MOV     ?V7,A
   \   00021B   8E82         MOV     DPL,R6
   \   00021D   8F83         MOV     DPH,R7
   \   00021F   A3           INC     DPTR
   \   000220   A3           INC     DPTR
   \   000221   A3           INC     DPTR
   \   000222   A3           INC     DPTR
   \   000223   A3           INC     DPTR
   \   000224   A3           INC     DPTR
   \   000225   A3           INC     DPTR
   \   000226   E5..         MOV     A,?V6
   \   000228   F0           MOVX    @DPTR,A
   \   000229   A3           INC     DPTR
   \   00022A   E5..         MOV     A,?V7
   \   00022C   12....       LCALL   ?Subroutine14 & 0xFFFF
   2808                  pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
   \                     ??CrossCallReturnLabel_6:
   \   00022F   8882         MOV     DPL,R0
   \   000231   8983         MOV     DPH,R1
   \   000233   F0           MOVX    @DPTR,A
   2809                  pNwkDesc->chosenRouterDepth       = pBeacon->depth;
   \   000234   8C82         MOV     DPL,R4
   \   000236   8D83         MOV     DPH,R5
   \   000238   E0           MOVX    A,@DPTR
   \   000239   8A82         MOV     DPL,R2
   \   00023B   8B83         MOV     DPH,R3
   \   00023D   F0           MOVX    @DPTR,A
   2810                }
   2811          
   2812                if ( pBeacon->deviceCapacity )
   \                     ??ZDO_beaconNotifyIndCB_17:
   \   00023E   85..82       MOV     DPL,?V4
   \   000241   85..83       MOV     DPH,?V5
   \   000244   E0           MOVX    A,@DPTR
   \   000245   600B         JZ      ??ZDO_beaconNotifyIndCB_16
   2813                  pNwkDesc->deviceCapacity = 1;
   \   000247   8E82         MOV     DPL,R6
   \   000249   8F83         MOV     DPH,R7
   \   00024B   A3           INC     DPTR
   \   00024C   A3           INC     DPTR
   \   00024D   A3           INC     DPTR
   \   00024E   A3           INC     DPTR
   \   00024F   7401         MOV     A,#0x1
   \   000251   F0           MOVX    @DPTR,A
   2814          
   2815                if ( pBeacon->routerCapacity )
   \                     ??ZDO_beaconNotifyIndCB_16:
   \   000252   85..82       MOV     DPL,?V0
   \   000255   85..83       MOV     DPH,?V1
   \   000258   A3           INC     DPTR
   \   000259   A3           INC     DPTR
   \   00025A   A3           INC     DPTR
   \   00025B   A3           INC     DPTR
   \   00025C   A3           INC     DPTR
   \   00025D   A3           INC     DPTR
   \   00025E   E0           MOVX    A,@DPTR
   \   00025F   600A         JZ      ??ZDO_beaconNotifyIndCB_1
   2816                  pNwkDesc->routerCapacity = 1;
   \   000261   8E82         MOV     DPL,R6
   \   000263   8F83         MOV     DPH,R7
   \   000265   A3           INC     DPTR
   \   000266   A3           INC     DPTR
   \   000267   A3           INC     DPTR
   \   000268   7401         MOV     A,#0x1
   \   00026A   F0           MOVX    @DPTR,A
   2817              }
   2818            }
   2819          }
   \                     ??ZDO_beaconNotifyIndCB_1:
   \   00026B   7F0A         MOV     R7,#0xa
   \   00026D   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001   85..82       MOV     DPL,?V2
   \   000004   85..83       MOV     DPH,?V3
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET
   2820          
   2821          /*********************************************************************
   2822           * @fn          ZDO_StartRouterConfirmCB
   2823           *
   2824           * @brief       This function reports the results of the request to
   2825           *              start functioning as a router in a network.
   2826           *
   2827           * @param       Status - Result of NLME_StartRouterRequest()
   2828           *
   2829           * @return      none
   2830           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2831          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2832          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2833            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2834          
   2835            if ( Status == ZSUCCESS )
   \   00000A   700B         JNZ     ??ZDO_StartRouterConfirmCB_0
   2836            {
   2837              // LED on shows Router started
   2838              zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   2839              zdoHalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   2840              if ( devState == DEV_HOLD )
   \   00000C   90....       MOV     DPTR,#devState
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   7005         JNZ     ??ZDO_StartRouterConfirmCB_0
   2841              {
   2842                ZDApp_ChangeState( DEV_END_DEVICE );
   \   000012                ; Setup parameters for call to function ZDApp_ChangeState
   \   000012   7906         MOV     R1,#0x6
   \   000014   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   2843              }
   2844            }
   2845          #if defined(BLINK_LEDS)
   2846            else
   2847            {
   2848              zdoHalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2849            }
   2850          #endif
   2851          
   2852            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000017                ; Setup parameters for call to function osal_set_event
   \   000017   7A20         MOV     R2,#0x20
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   90....       MOV     DPTR,#ZDAppTaskID
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   2853          }
   \   000023   02....       LJMP    ??Subroutine34_0 & 0xFFFF
   2854          
   2855          /*********************************************************************
   2856           * @fn          ZDO_JoinConfirmCB
   2857           *
   2858           * @brief       This function allows the next higher layer to be notified
   2859           *              of the results of its request to join itself or another
   2860           *              device to a network.
   2861           *
   2862           * @param       Status - Result of NLME_JoinRequest()
   2863           *
   2864           * @return      none
   2865           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2866          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2867          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
   2868            (void)PanId;  // remove if this parameter is used.
   2869          
   2870            nwkStatus = (byte)Status;
   \   00000C   E9           MOV     A,R1
   \   00000D   90....       MOV     DPTR,#nwkStatus
   \   000010   F0           MOVX    @DPTR,A
   2871          
   2872            if ( Status == ZSUCCESS )
   \   000011   7071         JNZ     ??ZDO_JoinConfirmCB_0
   2873            {
   2874              if ( ZSTACK_END_DEVICE_BUILD
   2875                || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   2876              {
   2877                neighborEntry_t *pItem;
   2878          
   2879                // We don't need the neighbor table entries.
   2880                // Clear the neighbor Table to remove beacon information
   2881                nwkNeighborInitTable();
   \   000013                ; Setup parameters for call to function nwkNeighborInitTable
   \   000013   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   2882          
   2883                // Force a neighbor table entry for the parent
   2884                pItem = nwkNeighborFindEmptySlot();
   \   000016                ; Setup parameters for call to function nwkNeighborFindEmptySlot
   \   000016   12....       LCALL   `??nwkNeighborFindEmptySlot::?relay`; Banked call to: nwkNeighborFindEmptySlot
   \   000019   8A..         MOV     ?V2,R2
   \   00001B   8B..         MOV     ?V3,R3
   \   00001D   AE..         MOV     R6,?V2
   \   00001F   AF..         MOV     R7,?V3
   2885                if ( pItem != NULL )
   \   000021   EE           MOV     A,R6
   \   000022   4F           ORL     A,R7
   \   000023   6054         JZ      ??ZDO_JoinConfirmCB_1
   2886                {
   2887                  osal_memset( pItem, 0x00, sizeof ( neighborEntry_t  )  );
   \   000025                ; Setup parameters for call to function osal_memset
   \   000025   7C17         MOV     R4,#0x17
   \   000027   7D00         MOV     R5,#0x0
   \   000029   7900         MOV     R1,#0x0
   \   00002B   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2888                  pItem->neighborAddress = _NIB.nwkCoordAddress;
   \   00002E   90....       MOV     DPTR,#_NIB + 23
   \   000031   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000034   8E82         MOV     DPL,R6
   \   000036   8F83         MOV     DPH,R7
   \   000038   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   2889                  osal_cpyExtAddr( pItem ->neighborExtAddr, _NIB. nwkCoordExtAddress );
   \                     ??CrossCallReturnLabel_59:
   \   00003B                ; Setup parameters for call to function sAddrExtCpy
   \   00003B   7C..         MOV     R4,#(_NIB + 25) & 0xff
   \   00003D   7D..         MOV     R5,#((_NIB + 25) >> 8) & 0xff
   \   00003F   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000042   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2890                  pItem->panId = _NIB. nwkPanId;
   \   000045   90....       MOV     DPTR,#_NIB + 33
   \   000048   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00004B   12....       LCALL   ?Subroutine13 & 0xFFFF
   2891                  pItem->linkInfo.rxLqi = DEF_LQI;
   \                     ??CrossCallReturnLabel_60:
   \   00004E   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000051   74AA         MOV     A,#-0x56
   \   000053   F0           MOVX    @DPTR,A
   2892                  pItem->linkInfo.txCounter = DEF_LINK_COUNTER;
   \   000054   90....       MOV     DPTR,#gLINK_DOWN_TRIGGER
   \   000057   E4           CLR     A
   \   000058   93           MOVC    A,@A+DPTR
   \   000059   7900         MOV     R1,#0x0
   \   00005B   2401         ADD     A,#0x1
   \   00005D   F8           MOV     R0,A
   \   00005E   5001         JNC     ??ZDO_JoinConfirmCB_2
   \   000060   09           INC     R1
   \                     ??ZDO_JoinConfirmCB_2:
   \   000061   7A02         MOV     R2,#0x2
   \   000063   7B00         MOV     R3,#0x0
   \   000065   12....       LCALL   ?S_DIV_MOD
   \   000068   EE           MOV     A,R6
   \   000069   240D         ADD     A,#0xd
   \   00006B   F582         MOV     DPL,A
   \   00006D   E4           CLR     A
   \   00006E   3F           ADDC    A,R7
   \   00006F   F583         MOV     DPH,A
   \   000071   E8           MOV     A,R0
   \   000072   F0           MOVX    @DPTR,A
   2893                  pItem->linkInfo.txCost = DEF_LINK_COST;
   \   000073   12....       LCALL   ?Subroutine28 & 0xFFFF
   2894                }
   2895              }
   \                     ??CrossCallReturnLabel_38:
   \   000076   7401         MOV     A,#0x1
   \   000078   F0           MOVX    @DPTR,A
   2896          
   2897              // LED on shows device joined
   2898              zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   2899              zdoHalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   2900              if ( (devState == DEV_HOLD) )
   \                     ??ZDO_JoinConfirmCB_1:
   \   000079   90....       MOV     DPTR,#devState
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   7005         JNZ     ??ZDO_JoinConfirmCB_0
   2901              {
   2902                ZDApp_ChangeState( DEV_NWK_JOINING );
   \   00007F                ; Setup parameters for call to function ZDApp_ChangeState
   \   00007F   7903         MOV     R1,#0x3
   \   000081   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   2903              }
   2904          
   2905              if ( !ZG_SECURE_ENABLED )
   2906              {
   2907                // Notify to save info into NV
   2908                ZDApp_NVUpdate();
   2909              }
   2910            }
   2911            else
   2912            {
   2913          #if defined(BLINK_LEDS)
   2914              zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2915          #endif
   2916            }
   2917          
   2918            // Pass the join confirm to higher layer if callback registered
   2919            if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
   \                     ??ZDO_JoinConfirmCB_0:
   \   000084   90....       MOV     DPTR,#zdoCBFunc + 8
   \   000087   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00008A   6030         JZ      ??ZDO_JoinConfirmCB_3
   2920            {
   2921              zdoJoinCnf_t joinCnf;
   2922          
   2923              joinCnf.status = Status;
   \   00008C   85..82       MOV     DPL,?XSP + 0
   \   00008F   85..83       MOV     DPH,?XSP + 1
   \   000092   E5..         MOV     A,?V0
   \   000094   F0           MOVX    @DPTR,A
   2924              joinCnf.deviceAddr = _NIB.nwkDevAddress;
   \   000095   90....       MOV     DPTR,#_NIB + 20
   \   000098   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00009B   7401         MOV     A,#0x1
   \   00009D   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A0   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   2925              joinCnf.parentAddr = _NIB.nwkCoordAddress;
   \                     ??CrossCallReturnLabel_80:
   \   0000A3   90....       MOV     DPTR,#_NIB + 23
   \   0000A6   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000A9   7403         MOV     A,#0x3
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   2926          
   2927              zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
   \                     ??CrossCallReturnLabel_81:
   \   0000B1                ; Setup parameters for indirect call
   \   0000B1   AA..         MOV     R2,?XSP + 0
   \   0000B3   AB..         MOV     R3,?XSP + 1
   \   0000B5   8882         MOV     DPL,R0
   \   0000B7   8983         MOV     DPH,R1
   \   0000B9   12....       LCALL   ?CALL_IND
   2928            }
   2929            
   2930            // Notify ZDApp
   2931            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_3:
   \   0000BC                ; Setup parameters for call to function ZDApp_SendMsg
   \   0000BC   7C00         MOV     R4,#0x0
   \   0000BE   7D00         MOV     R5,#0x0
   \   0000C0   7B02         MOV     R3,#0x2
   \   0000C2   7A02         MOV     R2,#0x2
   \   0000C4   90....       MOV     DPTR,#ZDAppTaskID
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   F9           MOV     R1,A
   \   0000C9   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2932          
   2933          }
   \   0000CC   7405         MOV     A,#0x5
   \   0000CE   02....       LJMP    ??Subroutine35_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine42_0
   \   000004                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   EE           MOV     A,R6
   \   000001   240E         ADD     A,#0xe
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   EE           MOV     A,R6
   \   000001   240F         ADD     A,#0xf
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET
   2934          
   2935          /*********************************************************************
   2936           * @fn          ZDO_PermitJoinCB
   2937           *
   2938           * @brief      This function is called when there is a change in the
   2939           *             device's permit join status.
   2940           *
   2941           * @param       duration - the new duration
   2942           *
   2943           * @return      none
   2944           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2945          void ZDO_PermitJoinCB( uint8 duration )
   \                     ZDO_PermitJoinCB:
   2946          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
   2947            // Pass the Permit Join status to higher layer if callback registered
   2948            if (zdoCBFunc[ZDO_PERMIT_JOIN_CBID] != NULL )
   \   000011   90....       MOV     DPTR,#zdoCBFunc + 14
   \   000014   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000017   6007         JZ      ??ZDO_PermitJoinCB_0
   2949            {
   2950              zdoCBFunc[ZDO_PERMIT_JOIN_CBID]( (void*)&duration );
   \   000019                ; Setup parameters for indirect call
   \   000019   AA..         MOV     R2,?XSP + 0
   \   00001B   AB..         MOV     R3,?XSP + 1
   \   00001D   12....       LCALL   ?CALL_IND
   2951            }
   2952          }
   \                     ??ZDO_PermitJoinCB_0:
   \   000020   7401         MOV     A,#0x1
   \   000022   02....       LJMP    ?Subroutine3 & 0xFFFF
   2953          
   2954          /*********************************************************************
   2955           * @fn          ZDO_AddrChangeIndicationCB
   2956           *
   2957           * @brief       This function notifies the application that this
   2958           *              device's address has changed.  Could happen in
   2959           *              a network with stochastic addressing (PRO).
   2960           *
   2961           * @param       newAddr - the new address
   2962           *
   2963           * @return      none
   2964           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2965          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2966          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2967            ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
   2968            epList_t *pItem = epList;
   \   000009   90....       MOV     DPTR,#epList
   \   00000C   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   2969          
   2970            // Notify to save info into NV
   2971            ZDApp_NVUpdate();
   \                     ??CrossCallReturnLabel_63:
   \   00000F                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000F   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   2972          
   2973            // Notify the applications
   2974            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000012                ; Setup parameters for call to function osal_set_event
   \   000012   7A10         MOV     R2,#0x10
   \   000014   7B00         MOV     R3,#0x0
   \   000016   90....       MOV     DPTR,#ZDAppTaskID
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00001E   8044         SJMP    ??CrossCallReturnLabel_64
   2975          
   2976            while (pItem != NULL)
   2977            {
   2978              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_AddrChangeIndicationCB_0:
   \   000020   EE           MOV     A,R6
   \   000021   2402         ADD     A,#0x2
   \   000023   F8           MOV     R0,A
   \   000024   E4           CLR     A
   \   000025   3F           ADDC    A,R7
   \   000026   F9           MOV     R1,A
   \   000027   88..         MOV     ?V2,R0
   \   000029   89..         MOV     ?V3,R1
   \   00002B   8882         MOV     DPL,R0
   \   00002D   F583         MOV     DPH,A
   \   00002F   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000032   6029         JZ      ??ZDO_AddrChangeIndicationCB_1
   2979              {
   2980                pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
   \   000034                ; Setup parameters for call to function osal_msg_allocate
   \   000034   7A04         MOV     R2,#0x4
   \   000036   7B00         MOV     R3,#0x0
   \   000038   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   2981                if (pZDOAddrChangeMsg != NULL)
   \   00003B   EA           MOV     A,R2
   \   00003C   4B           ORL     A,R3
   \   00003D   601E         JZ      ??ZDO_AddrChangeIndicationCB_1
   2982                {
   2983                  pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
   \   00003F   8A82         MOV     DPL,R2
   \   000041   8B83         MOV     DPH,R3
   \   000043   74D6         MOV     A,#-0x2a
   \   000045   F0           MOVX    @DPTR,A
   2984                  pZDOAddrChangeMsg->shortAddr = newAddr;
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   E5..         MOV     A,?V0
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   E5..         MOV     A,?V1
   \   00004E   12....       LCALL   ?Subroutine14 & 0xFFFF
   2985                  osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
   2986                }
   2987              }
   \                     ??CrossCallReturnLabel_7:
   \   000051   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000059   F9           MOV     R1,A
   \   00005A   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2988              pItem = pItem->nextDesc;
   \                     ??ZDO_AddrChangeIndicationCB_1:
   \   00005D   8E82         MOV     DPL,R6
   \   00005F   8F83         MOV     DPH,R7
   \   000061   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   2989            }
   \                     ??CrossCallReturnLabel_64:
   \   000064   EE           MOV     A,R6
   \   000065   4F           ORL     A,R7
   \   000066   70B8         JNZ     ??ZDO_AddrChangeIndicationCB_0
   2990          
   2991            // Send out a device announce
   2992            ZDApp_AnnounceNewAddress();
   \   000068                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000068   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   2993          }
   \   00006B   02....       LJMP    ?Subroutine1 & 0xFFFF
   2994          
   2995          /*********************************************************************
   2996           * @fn          ZDO_JoinIndicationCB
   2997           *
   2998           * @brief       This function allows the next higher layer of a
   2999           *              coordinator to be notified of a remote join request.
   3000           *
   3001           * @param       ShortAddress - 16-bit address
   3002           * @param       ExtendedAddress - IEEE (64-bit) address
   3003           * @param       CapabilityFlags - Association Capability Flags
   3004           * @param       type - of joining -
   3005           *                          NWK_ASSOC_JOIN
   3006           *                          NWK_ASSOC_REJOIN_UNSECURE
   3007           *                          NWK_ASSOC_REJOIN_SECURE
   3008           *
   3009           * @return      ZStatus_t
   3010           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3011          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   3012                                          uint8 CapabilityFlags, uint8 type)
   3013          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   3014            (void)ExtendedAddress;
   3015            //check if the device is leaving before responding to rejoin request
   3016            if( osal_get_timeoutEx( ZDAppTaskID , ZDO_DEVICE_RESET) )
   \   000009                ; Setup parameters for call to function osal_get_timeoutEx
   \   000009   7A04         MOV     R2,#0x4
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   90....       MOV     DPTR,#ZDAppTaskID
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000015   EA           MOV     A,R2
   \   000016   4B           ORL     A,R3
   \   000017   4C           ORL     A,R4
   \   000018   4D           ORL     A,R5
   \   000019   6005         JZ      ??ZDO_JoinIndicationCB_0
   3017            {
   3018              return ZFailure; // device leaving , hence do not allow rejoin
   \   00001B   7901         MOV     R1,#0x1
   \   00001D   02....       LJMP    ??ZDO_JoinIndicationCB_1 & 0xFFFF
   3019            }
   3020          
   3021          #if ZDO_NV_SAVE_RFDs
   3022              (void)CapabilityFlags;
   3023          
   3024          #else  // if !ZDO_NV_SAVE_RFDs
   3025              if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   3026          #endif
   3027              {
   3028                ZDApp_NVUpdate();  // Notify to save info into NV.
   \                     ??ZDO_JoinIndicationCB_0:
   \   000020                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000020   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   000023   7410         MOV     A,#0x10
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   3029              }
   3030          
   3031              if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   3032              {
   3033                if ( type == NWK_ASSOC_JOIN ||
   3034                    type == NWK_ASSOC_REJOIN_UNSECURE ||
   3035                      type == NWK_ASSOC_REJOIN_SECURE )
   \   00002A   600D         JZ      ??ZDO_JoinIndicationCB_2
   \   00002C   7401         MOV     A,#0x1
   \   00002E   68           XRL     A,R0
   \   00002F   6008         JZ      ??ZDO_JoinIndicationCB_2
   \   000031   7402         MOV     A,#0x2
   \   000033   68           XRL     A,R0
   \   000034   6003         JZ      $+5
   \   000036   02....       LJMP    ??ZDO_JoinIndicationCB_3 & 0xFFFF
   3036                {
   3037                  uint16 timeToFire;
   3038                  ZDAppNewDevice_t *pNewDevice, *pDeviceList;
   3039          
   3040                  pNewDevice = (ZDAppNewDevice_t *) osal_mem_alloc( sizeof(ZDAppNewDevice_t) );
   \                     ??ZDO_JoinIndicationCB_2:
   \   000039                ; Setup parameters for call to function osal_mem_alloc
   \   000039   7A06         MOV     R2,#0x6
   \   00003B   7B00         MOV     R3,#0x0
   \   00003D   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000040   8A..         MOV     ?V2,R2
   \   000042   8B..         MOV     ?V3,R3
   \   000044   AE..         MOV     R6,?V2
   \   000046   AF..         MOV     R7,?V3
   3041          
   3042                  if ( pNewDevice == NULL )
   \   000048   EE           MOV     A,R6
   \   000049   4F           ORL     A,R7
   \   00004A   7005         JNZ     ??ZDO_JoinIndicationCB_4
   3043                  {
   3044                    // Memory alloc failed
   3045                    return ZMemError;
   \   00004C   7910         MOV     R1,#0x10
   \   00004E   02....       LJMP    ??ZDO_JoinIndicationCB_1 & 0xFFFF
   3046                  }
   3047          
   3048                  // Add the new device to the New Device List
   3049                  if ( ZDApp_NewDeviceList == NULL )
   \                     ??ZDO_JoinIndicationCB_4:
   \   000051   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000054   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000057   7006         JNZ     ??ZDO_JoinIndicationCB_5
   3050                  {
   3051                    // The list is empty, add the first element
   3052                    ZDApp_NewDeviceList = pNewDevice;
   \   000059   EE           MOV     A,R6
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   A3           INC     DPTR
   \   00005C   EF           MOV     A,R7
   \   00005D   801F         SJMP    ??ZDO_JoinIndicationCB_6
   3053                  }
   3054                  else
   3055                  {
   3056                    pDeviceList = ZDApp_NewDeviceList;
   \                     ??ZDO_JoinIndicationCB_5:
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   8003         SJMP    ??ZDO_JoinIndicationCB_7
   3057          
   3058                    // Walk the list to last element
   3059                    while ( pDeviceList->next )
   3060                    {
   3061                      pDeviceList = (ZDAppNewDevice_t *) pDeviceList->next;
   \                     ??ZDO_JoinIndicationCB_8:
   \   000065   E8           MOV     A,R0
   \   000066   FA           MOV     R2,A
   \   000067   E9           MOV     A,R1
   \                     ??ZDO_JoinIndicationCB_7:
   \   000068   FB           MOV     R3,A
   3062                    }
   \   000069   8A82         MOV     DPL,R2
   \   00006B   8B83         MOV     DPH,R3
   \   00006D   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000070   70F3         JNZ     ??ZDO_JoinIndicationCB_8
   3063          
   3064                    // Add new device at the end
   3065                    pDeviceList->next = pNewDevice;
   \   000072   EE           MOV     A,R6
   \   000073   F8           MOV     R0,A
   \   000074   EF           MOV     A,R7
   \   000075   F9           MOV     R1,A
   \   000076   8A82         MOV     DPL,R2
   \   000078   8B83         MOV     DPH,R3
   \   00007A   E8           MOV     A,R0
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   E9           MOV     A,R1
   \                     ??ZDO_JoinIndicationCB_6:
   \   00007E   F0           MOVX    @DPTR,A
   3066                  }
   3067          
   3068                  // get the remaining time of the timer
   3069                  timeToFire = osal_get_timeoutEx( ZDAppTaskID, ZDO_NEW_DEVICE );
   \   00007F                ; Setup parameters for call to function osal_get_timeoutEx
   \   00007F   7A40         MOV     R2,#0x40
   \   000081   7B00         MOV     R3,#0x0
   \   000083   90....       MOV     DPTR,#ZDAppTaskID
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F9           MOV     R1,A
   \   000088   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   00008B   8A..         MOV     ?V4,R2
   \   00008D   8B..         MOV     ?V5,R3
   3070          
   3071                  pNewDevice->next = NULL;
   \   00008F   8E82         MOV     DPL,R6
   \   000091   8F83         MOV     DPH,R7
   \   000093   E4           CLR     A
   \   000094   F0           MOVX    @DPTR,A
   \   000095   A3           INC     DPTR
   \   000096   F0           MOVX    @DPTR,A
   3072                  pNewDevice->shortAddr = ShortAddress;
   \   000097   8E82         MOV     DPL,R6
   \   000099   8F83         MOV     DPH,R7
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   E5..         MOV     A,?V0
   \   00009F   F0           MOVX    @DPTR,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   E5..         MOV     A,?V1
   \   0000A3   F0           MOVX    @DPTR,A
   3073                  pNewDevice->timeDelta = ZDAPP_NEW_DEVICE_TIME - timeToFire;
   \   0000A4   7458         MOV     A,#0x58
   \   0000A6   C3           CLR     C
   \   0000A7   95..         SUBB    A,?V4
   \   0000A9   F8           MOV     R0,A
   \   0000AA   7402         MOV     A,#0x2
   \   0000AC   95..         SUBB    A,?V5
   \   0000AE   F9           MOV     R1,A
   \   0000AF   8E82         MOV     DPL,R6
   \   0000B1   8F83         MOV     DPH,R7
   \   0000B3   12....       LCALL   ?Subroutine13 & 0xFFFF
   3074          
   3075                  // Start the timer only if there is no pending timer
   3076                  if ( pNewDevice->timeDelta == ZDAPP_NEW_DEVICE_TIME )
   \                     ??CrossCallReturnLabel_61:
   \   0000B6   7458         MOV     A,#0x58
   \   0000B8   68           XRL     A,R0
   \   0000B9   7003         JNZ     ??ZDO_JoinIndicationCB_9
   \   0000BB   7402         MOV     A,#0x2
   \   0000BD   69           XRL     A,R1
   \                     ??ZDO_JoinIndicationCB_9:
   \   0000BE   7017         JNZ     ??ZDO_JoinIndicationCB_3
   3077                  {
   3078                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, ZDAPP_NEW_DEVICE_TIME );
   \   0000C0                ; Setup parameters for call to function osal_start_timerEx
   \   0000C0   90....       MOV     DPTR,#__Constant_258
   \   0000C3   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000C6   7A40         MOV     R2,#0x40
   \   0000C8   7B00         MOV     R3,#0x0
   \   0000CA   90....       MOV     DPTR,#ZDAppTaskID
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   F9           MOV     R1,A
   \   0000CF   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000D2   7404         MOV     A,#0x4
   \   0000D4   12....       LCALL   ?DEALLOC_XSTACK8
   3079                  }
   3080                }
   3081              }
   3082          
   3083              return ZSuccess;
   \                     ??ZDO_JoinIndicationCB_3:
   \   0000D7   7900         MOV     R1,#0x0
   \                     ??ZDO_JoinIndicationCB_1:
   \   0000D9   02....       LJMP    ?Subroutine2 & 0xFFFF
   3084          
   3085          }
   3086          
   3087          /*********************************************************************
   3088           * @fn          ZDO_ConcentratorIndicationCB
   3089           *
   3090           * @brief       This function allows the next higher layer of a
   3091           *              device to be notified of existence of the concentrator.
   3092           *
   3093           * @param       nwkAddr - 16-bit NWK address of the concentrator
   3094           * @param       extAddr - pointer to extended Address
   3095           *                        NULL if not available
   3096           * @param       pktCost - PktCost from RREQ
   3097           *
   3098           * @return      void
   3099           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7405         MOV     A,#0x5
   \   000002                REQUIRE ??Subroutine33_0
   \   000002                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3100          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   3101          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3102            zdoConcentratorInd_t conInd;
   3103          
   3104            conInd.nwkAddr = nwkAddr;
   \   00000A   12....       LCALL   ?Subroutine11 & 0xFFFF
   3105            conInd.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_83:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   EC           MOV     A,R4
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   ED           MOV     A,R5
   \   000016   F0           MOVX    @DPTR,A
   3106            conInd.pktCost = pktCost;
   \   000017   7404         MOV     A,#0x4
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E9           MOV     A,R1
   \   00001D   F0           MOVX    @DPTR,A
   3107          
   3108            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc + 2
   \   000021   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000024   6007         JZ      ??ZDO_ConcentratorIndicationCB_0
   3109            {
   3110              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   000026                ; Setup parameters for indirect call
   \   000026   AA..         MOV     R2,?XSP + 0
   \   000028   AB..         MOV     R3,?XSP + 1
   \   00002A   12....       LCALL   ?CALL_IND
   3111            }
   3112          }
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   00002D   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine47_0
   \   000006                ; // Fall through to label ??Subroutine47_0
   3113          
   3114          /*********************************************************************
   3115           * @fn          ZDO_LeaveCnf
   3116           *
   3117           * @brief       This function allows the next higher layer to be
   3118           *              notified of the results of its request for this or
   3119           *              a child device to leave the network.
   3120           *
   3121           * @param       cnf - NLME_LeaveCnf_t
   3122           *
   3123           * @return      none
   3124           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3125          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   3126          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3127            // Check for this device
   3128            if ( osal_ExtAddrEqual( cnf->extAddr,
   3129                                    NLME_GetExtAddr() ) == TRUE )
   \   000009                ; Setup parameters for call to function NLME_GetExtAddr
   \   000009   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   \   000010   AC..         MOV     R4,?V0
   \   000012   AD..         MOV     R5,?V1
   \   000014                ; Setup parameters for call to function sAddrExtCmp
   \   000014   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000017   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00001A   E9           MOV     A,R1
   \   00001B   6401         XRL     A,#0x1
   \   00001D   701C         JNZ     ??ZDO_LeaveCnf_0
   3130            {
   3131              // Pass the leave confirm to higher layer if callback registered
   3132              if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
   3133                   ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
   \   00001F   90....       MOV     DPTR,#zdoCBFunc + 10
   \   000022   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000025   600E         JZ      ??ZDO_LeaveCnf_1
   \   000027                ; Setup parameters for indirect call
   \   000027   EE           MOV     A,R6
   \   000028   FA           MOV     R2,A
   \   000029   EF           MOV     A,R7
   \   00002A   FB           MOV     R3,A
   \   00002B   12....       LCALL   ?CALL_IND
   \   00002E   8B..         MOV     ?V1,R3
   \   000030   EA           MOV     A,R2
   \   000031   45..         ORL     A,?V1
   \   000033   7006         JNZ     ??ZDO_LeaveCnf_0
   3134              {
   3135                // Prepare to leave with reset
   3136                ZDApp_LeaveReset( cnf->rejoin );
   \                     ??ZDO_LeaveCnf_1:
   \   000035                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000035   12....       LCALL   ?Subroutine25 & 0xFFFF
   3137              }
   3138            }
   \                     ??CrossCallReturnLabel_31:
   \   000038   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   3139            else if ( ZSTACK_ROUTER_BUILD )
   3140            {
   3141              // Remove device address(optionally descendents) from data
   3142              ZDApp_LeaveUpdate( cnf->dstAddr,
   3143                                 cnf->extAddr,
   3144                                 cnf->removeChildren,
   3145                                 cnf->rejoin );
   3146            }
   3147          }
   \                     ??ZDO_LeaveCnf_0:
   \   00003B   02....       LJMP    ??Subroutine46_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET
   3148          
   3149          /*********************************************************************
   3150           * @fn          ZDO_LeaveInd
   3151           *
   3152           * @brief       This function allows the next higher layer of a
   3153           *              device to be notified of a remote leave request or
   3154           *              indication.
   3155           *
   3156           * @param       ind - NLME_LeaveInd_t
   3157           *
   3158           * @return      none
   3159           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3160          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   3161          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   3162            uint8 leave;
   3163          
   3164            // NWK layer filters out illegal requests
   3165            if ( ind->request == TRUE )
   \   00000E   EE           MOV     A,R6
   \   00000F   240C         ADD     A,#0xc
   \   000011   F8           MOV     R0,A
   \   000012   E4           CLR     A
   \   000013   3F           ADDC    A,R7
   \   000014   F9           MOV     R1,A
   \   000015   88..         MOV     ?V0,R0
   \   000017   89..         MOV     ?V1,R1
   \   000019   8E82         MOV     DPL,R6
   \   00001B   8F83         MOV     DPH,R7
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6401         XRL     A,#0x1
   \   00002A   7053         JNZ     ??ZDO_LeaveInd_0
   3166            {
   3167              byte temp = FALSE;
   \   00002C   7402         MOV     A,#0x2
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   E4           CLR     A
   \   000032   F0           MOVX    @DPTR,A
   3168              
   3169              // Only respond if we are not rejoining the network
   3170              if ( ind->rejoin == FALSE )
   \   000033   8882         MOV     DPL,R0
   \   000035   8983         MOV     DPH,R1
   \   000037   E0           MOVX    A,@DPTR
   \   000038   7025         JNZ     ??ZDO_LeaveInd_1
   3171              {
   3172                // Notify network of leave
   3173                NLME_LeaveRsp_t rsp;
   3174                rsp.rejoin = ind->rejoin;
   \   00003A   7401         MOV     A,#0x1
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   E4           CLR     A
   \   000040   F0           MOVX    @DPTR,A
   3175          
   3176                if ( ZSTACK_ROUTER_BUILD )
   3177                {
   3178                  rsp.removeChildren = ind->removeChildren;
   3179                }
   3180                else if ( ZSTACK_END_DEVICE_BUILD )
   3181                {
   3182                  NLME_SetResponseRate(0);
   \   000041                ; Setup parameters for call to function NLME_SetResponseRate
   \   000041   FA           MOV     R2,A
   \   000042   FB           MOV     R3,A
   \   000043   12....       LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   3183                  NLME_SetQueuedPollRate(0);
   \   000046                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000046   7A00         MOV     R2,#0x0
   \   000048   7B00         MOV     R3,#0x0
   \   00004A   12....       LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   3184                  rsp.removeChildren = 0;
   \   00004D   85..82       MOV     DPL,?XSP + 0
   \   000050   85..83       MOV     DPH,?XSP + 1
   \   000053   E4           CLR     A
   \   000054   F0           MOVX    @DPTR,A
   3185                }
   3186                
   3187                bdb_setFN();
   \   000055                ; Setup parameters for call to function bdb_setFN
   \   000055   12....       LCALL   `??bdb_setFN::?relay`; Banked call to: bdb_setFN
   3188                 
   3189                NLME_LeaveRsp( &rsp );
   \   000058                ; Setup parameters for call to function NLME_LeaveRsp
   \   000058   AA..         MOV     R2,?XSP + 0
   \   00005A   AB..         MOV     R3,?XSP + 1
   \   00005C   12....       LCALL   `??NLME_LeaveRsp::?relay`; Banked call to: NLME_LeaveRsp
   3190              }
   3191          
   3192              if ( ZSTACK_END_DEVICE_BUILD )
   3193              {
   3194                // Stop polling and get ready to reset
   3195                NLME_SetPollRate( 0 );
   \                     ??ZDO_LeaveInd_1:
   \   00005F                ; Setup parameters for call to function NLME_SetPollRate
   \   00005F   90....       MOV     DPTR,#__Constant_0
   \   000062   12....       LCALL   ?XLOAD_R2345
   \   000065   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   3196              }
   3197          
   3198              // Prepare to leave with reset
   3199              ZDApp_LeaveReset( ind->rejoin );
   \   000068                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000068   85..82       MOV     DPL,?V0
   \   00006B   85..83       MOV     DPH,?V1
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F9           MOV     R1,A
   \   000070   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   3200              
   3201              //Turn on the radio to avoid sending packets after sending the leave    
   3202              ZMacSetReq(ZMacRxOnIdle, &temp);
   \   000073                ; Setup parameters for call to function ZMacSetReq
   \   000073   7402         MOV     A,#0x2
   \   000075   12....       LCALL   ?XSTACK_DISP101_8
   \   000078   7952         MOV     R1,#0x52
   \   00007A   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   00007D   805D         SJMP    ??ZDO_LeaveInd_2
   3203            }
   3204            else
   3205            {
   3206              leave = FALSE;
   3207          
   3208              // Check if this device needs to leave as a child or descendent
   3209              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \                     ??ZDO_LeaveInd_0:
   \   00007F                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00007F   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   000082   8A..         MOV     ?V2,R2
   \   000084   8B..         MOV     ?V3,R3
   \   000086   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000089   8E82         MOV     DPL,R6
   \   00008B   8F83         MOV     DPH,R7
   \   00008D   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000090   E5..         MOV     A,?V2
   \   000092   6A           XRL     A,R2
   \   000093   7003         JNZ     ??ZDO_LeaveInd_3
   \   000095   E5..         MOV     A,?V3
   \   000097   6B           XRL     A,R3
   \                     ??ZDO_LeaveInd_3:
   \   000098   7025         JNZ     ??ZDO_LeaveInd_4
   3210              {
   3211                if ( ( ind->removeChildren == TRUE )   )
   \   00009A   7401         MOV     A,#0x1
   \   00009C   69           XRL     A,R1
   \   00009D   6013         JZ      ??ZDO_LeaveInd_5
   3212                {
   3213                  leave = TRUE;
   3214                }
   3215                else if ( ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_DEVICE)
   \   00009F   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   5407         ANL     A,#0x7
   \   0000A5   6402         XRL     A,#0x2
   \   0000A7   7016         JNZ     ??ZDO_LeaveInd_4
   3216                {
   3217                  // old parents is leaving the network, child needs to search for a new parent
   3218                  ind->rejoin = TRUE;
   \   0000A9   85..82       MOV     DPL,?V0
   \   0000AC   85..83       MOV     DPH,?V1
   \   0000AF   7401         MOV     A,#0x1
   \   0000B1   F0           MOVX    @DPTR,A
   3219                  leave = TRUE;
   3220                }
   3221          
   3222              }
   3223              else if ( ind->removeChildren == TRUE )
   3224              {
   3225                // Check NWK address allocation algorithm
   3226                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   3227              }
   3228          
   3229              if ( leave == TRUE )
   3230              {
   3231                // Prepare to leave with reset
   3232                ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_5:
   \   0000B2                ; Setup parameters for call to function ZDApp_LeaveReset
   \   0000B2   85..82       MOV     DPL,?V0
   \   0000B5   85..83       MOV     DPH,?V1
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   F9           MOV     R1,A
   \   0000BA   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   \   0000BD   801D         SJMP    ??ZDO_LeaveInd_2
   3233              }
   3234              else
   3235              {
   3236                // Remove device address(optionally descendents) from data
   3237                ZDApp_LeaveUpdate( ind->srcAddr,
   3238                                   ind->extAddr,
   3239                                   ind->removeChildren,
   3240                                   ind->rejoin );
   \                     ??ZDO_LeaveInd_4:
   \   0000BF                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   0000BF   85..82       MOV     DPL,?V0
   \   0000C2   85..83       MOV     DPH,?V1
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   F5..         MOV     ?V0,A
   \   0000C8   78..         MOV     R0,#?V0
   \   0000CA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CD   EE           MOV     A,R6
   \   0000CE   2402         ADD     A,#0x2
   \   0000D0   FC           MOV     R4,A
   \   0000D1   E4           CLR     A
   \   0000D2   3F           ADDC    A,R7
   \   0000D3   FD           MOV     R5,A
   \   0000D4   12....       LCALL   `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   \   0000D7   7401         MOV     A,#0x1
   \   0000D9   12....       LCALL   ?DEALLOC_XSTACK8
   3241              }
   3242            }
   3243          
   3244            // Pass the leave indication to higher layer if callback registered.
   3245            if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
   \                     ??ZDO_LeaveInd_2:
   \   0000DC   90....       MOV     DPTR,#zdoCBFunc + 12
   \   0000DF   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000E2   6007         JZ      ??ZDO_LeaveInd_6
   3246            {
   3247              (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
   \   0000E4                ; Setup parameters for indirect call
   \   0000E4   EE           MOV     A,R6
   \   0000E5   FA           MOV     R2,A
   \   0000E6   EF           MOV     A,R7
   \   0000E7   FB           MOV     R3,A
   \   0000E8   12....       LCALL   ?CALL_IND
   3248            }
   3249          }
   \                     ??ZDO_LeaveInd_6:
   \   0000EB   7403         MOV     A,#0x3
   \   0000ED   02....       LJMP    ??Subroutine35_0 & 0xFFFF
   3250          
   3251          /*********************************************************************
   3252           * @fn          ZDO_SyncIndicationCB
   3253           *
   3254           * @brief       This function allows the next higher layer of a
   3255           *              coordinator to be notified of a loss of synchronization
   3256           *                          with the parent/child device.
   3257           *
   3258           * @param       type: 0 - child; 1 - parent
   3259           *
   3260           *
   3261           * @return      none
   3262           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3263          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   3264          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   3265            (void)shortAddr;  // Remove this line if this parameter is used.
   3266          
   3267            if ( ZSTACK_END_DEVICE_BUILD
   3268              || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   3269            {
   3270              if ( type == 1 && retryCnt == 0 )
   \   000007   7401         MOV     A,#0x1
   \   000009   6E           XRL     A,R6
   \   00000A   7019         JNZ     ??ZDO_SyncIndicationCB_0
   \   00000C   90....       MOV     DPTR,#retryCnt
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   7013         JNZ     ??ZDO_SyncIndicationCB_0
   3271              {
   3272                // We lost contact with our parent.  Clear the neighbor Table.
   3273                nwkNeighborInitTable();
   \   000012                ; Setup parameters for call to function nwkNeighborInitTable
   \   000012   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   3274                
   3275                //If we are Factory new, then report fail on association
   3276                if(!bdb_isDeviceNonFactoryNew())
   \   000015                ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
   \   000015   12....       LCALL   `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
   \   000018   E9           MOV     A,R1
   \   000019   7007         JNZ     ??ZDO_SyncIndicationCB_1
   3277                {
   3278                  bdb_nwkAssocAttemt(FALSE);
   \   00001B                ; Setup parameters for call to function bdb_nwkAssocAttemt
   \   00001B   7900         MOV     R1,#0x0
   \   00001D   12....       LCALL   `??bdb_nwkAssocAttemt::?relay`; Banked call to: bdb_nwkAssocAttemt
   \   000020   8003         SJMP    ??ZDO_SyncIndicationCB_0
   3279                }
   3280          #if (ZG_BUILD_ENDDEVICE_TYPE)
   3281                else
   3282                {
   3283                  //We lost our parent
   3284                  bdb_parentLost();
   \                     ??ZDO_SyncIndicationCB_1:
   \   000022                ; Setup parameters for call to function bdb_parentLost
   \   000022   12....       LCALL   `??bdb_parentLost::?relay`; Banked call to: bdb_parentLost
   3285                }
   3286          #endif
   3287              }
   3288            }
   3289          }
   \                     ??ZDO_SyncIndicationCB_0:
   \   000025   02....       LJMP    ??Subroutine34_0 & 0xFFFF
   3290          
   3291          /*********************************************************************
   3292           * @fn          ZDO_ManytoOneFailureIndicationCB
   3293           *
   3294           * @brief       This function allows the next higher layer of a
   3295           *              concentrator to be notified of a many-to-one route
   3296           *              failure.
   3297           *
   3298           * @param       none
   3299           *
   3300           *
   3301           * @return      none
   3302           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3303          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   3304          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3305            // By default, the concentrator automatically redo many-to-one route
   3306            // discovery to update all many-to-one routes in the network
   3307            // If you want anything processing other than the default,
   3308            // please replace the following code.
   3309          
   3310            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL   `??RTG_MTORouteReq::?relay`; Banked call to: RTG_MTORouteReq
   3311          }
   \   000007   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   3312          
   3313          /*********************************************************************
   3314           * @fn          ZDO_PollConfirmCB
   3315           *
   3316           * @brief       This function allows the next higher layer to be
   3317           *              notified of a Poll Confirm.
   3318           *
   3319           * @param       none
   3320           *
   3321           * @return      none
   3322           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3323          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   3324          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3325            (void)status;  // Remove this line if this parameter is used.
   3326            return;
   \   000000   02....       LJMP    ?BRET
   3327          }
   3328          
   3329          /*********************************************************************
   3330           * @fn          ZDO_NetworkStatusCB
   3331           *
   3332           * @brief       Network Status Callback function
   3333           *
   3334           * @param       nwkDstAddr - message's destination address- used to determine
   3335           *                           if the message was intended for this device or
   3336           *                           a sleeping end device.
   3337           * @param       statusCode - message's status code (ie. NWKSTAT_NONTREE_LINK_FAILURE)
   3338           * @param       dstAddr - the destination address related to the status code
   3339           *
   3340           * @return      none
   3341           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3342          void ZDO_NetworkStatusCB( uint16 nwkDstAddr, uint8 statusCode, uint16 dstAddr )
   \                     ZDO_NetworkStatusCB:
   3343          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3344            (void)dstAddr;     // Remove this line if this parameter is used.
   3345          
   3346            if ( (nwkDstAddr == NLME_GetShortAddr())
   3347                && (statusCode == NWKSTAT_NONTREE_LINK_FAILURE) )
   \   000004                ; Setup parameters for call to function NLME_GetShortAddr
   \   000004   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   3348            {
   3349              // Routing error for dstAddr, this is informational and a Route
   3350              // Request should happen automatically.
   3351            }
   3352          }
   \   000007   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   3353          
   3354          /******************************************************************************
   3355           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   3356           *
   3357           * @brief       Stub routine implemented by NHLE. NHLE should call
   3358           *              <AddrMgrWriteNV> when appropriate.
   3359           *
   3360           * @param       none
   3361           *
   3362           * @return      none
   3363           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3364          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   3365          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3366          #if defined ( NV_RESTORE )
   3367            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B01         MOV     R3,#0x1
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   4C           ORL     A,R4
   \   000013   4D           ORL     A,R5
   \   000014   7003         JNZ     ??AddrMgrWriteNVRequest_0
   3368            {
   3369              // Trigger to save info into NV
   3370              ZDApp_NVUpdate();
   \   000016                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000016   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3371            }
   3372          #endif
   3373          }
   \                     ??AddrMgrWriteNVRequest_0:
   \   000019   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   3374          
   3375          /*********************************************************************
   3376           * Call Back Functions from Security  - API
   3377           */
   3378          
   3379           /*********************************************************************
   3380           * @fn          ZDO_UpdateDeviceIndication
   3381           *
   3382           * @brief       This function notifies the "Trust Center" of a
   3383           *              network when a device joins or leaves the network.
   3384           *
   3385           * @param       extAddr - pointer to 64 bit address of new device
   3386           * @param       status  - 0 if a new device joined securely
   3387           *                      - 1 if a new device joined un-securely
   3388           *                      - 2 if a device left the network
   3389           *
   3390           * @return      true if newly joined device should be allowed to
   3391           *                                              remain on network
   3392           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3393          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   3394          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3395            // can implement a network access policy based on the
   3396            // IEEE address of newly joining devices...
   3397            (void)extAddr;
   3398            (void)status;
   3399          
   3400            return ZSuccess;
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
   3401          }
   3402          
   3403          /*********************************************************************
   3404           * @fn          ZDApp_InMsgCB
   3405           *
   3406           * @brief       This function is called to pass up any message that is
   3407           *              not yet supported.  This allows for the developer to
   3408           *              support features themselves..
   3409           *
   3410           * @return      none
   3411           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3412          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   3413          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine24 & 0xFFFF
   3414            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \                     ??CrossCallReturnLabel_30:
   \   000008   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00000B   5480         ANL     A,#0x80
   \   00000D   703B         JNZ     ??ZDApp_InMsgCB_0
   3415            {
   3416              // Handle the response message
   3417            }
   3418            else
   3419            {
   3420              // Handle the request message by sending a generic "not supported".
   3421              // Device Announce doesn't have a response.
   3422              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   00000F   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000012   7036         JNZ     ??ZDApp_InMsgCB_0
   \   000014   7413         MOV     A,#0x13
   \   000016   68           XRL     A,R0
   \   000017   7001         JNZ     ??ZDApp_InMsgCB_1
   \   000019   E9           MOV     A,R1
   \                     ??ZDApp_InMsgCB_1:
   \   00001A   602E         JZ      ??ZDApp_InMsgCB_0
   3423              {
   3424                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   3425                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   00001C                ; Setup parameters for call to function ZDP_GenericRsp
   \   00001C   E8           MOV     A,R0
   \   00001D   F5..         MOV     ?V0,A
   \   00001F   E9           MOV     A,R1
   \   000020   4480         ORL     A,#0x80
   \   000022   F5..         MOV     ?V1,A
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   E4           CLR     A
   \   00002A   F5..         MOV     ?V0,A
   \   00002C   F5..         MOV     ?V1,A
   \   00002E   78..         MOV     R0,#?V0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   12....       LCALL   ?Subroutine28 & 0xFFFF
   3426              }
   3427            }
   \                     ??CrossCallReturnLabel_39:
   \   000036   E0           MOVX    A,@DPTR
   \   000037   FD           MOV     R5,A
   \   000038   7C84         MOV     R4,#-0x7c
   \   00003A   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00003D   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000045   7404         MOV     A,#0x4
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
   3428          }
   \                     ??ZDApp_InMsgCB_0:
   \   00004A   02....       LJMP    ??Subroutine46_0 & 0xFFFF
   3429          
   3430          
   3431          /*********************************************************************
   3432           * @fn      ZDApp_ChangeMatchDescRespPermission()
   3433           *
   3434           * @brief   Changes the Match Descriptor Response permission.
   3435           *
   3436           * @param   endpoint - endpoint to allow responses
   3437           * @param   action - true to allow responses, false to not
   3438           *
   3439           * @return  none
   3440           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3441          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   3442          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3443            // Store the action
   3444            afSetMatch( endpoint, action );
   \   000005                ; Setup parameters for call to function afSetMatch
   \   000005   12....       LCALL   `??afSetMatch::?relay`; Banked call to: afSetMatch
   3445          }
   \   000008   02....       LJMP    ??Subroutine34_0 & 0xFFFF
   3446          
   3447          /*********************************************************************
   3448           * @fn      ZDApp_NetworkInit()
   3449           *
   3450           * @brief   Used to start the network joining process
   3451           *
   3452           * @param   delay - mSec delay to wait before starting
   3453           *
   3454           * @return  none
   3455           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3456          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   3457          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3458            if ( delay )
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   6021         JZ      ??ZDApp_NetworkInit_0
   3459            {
   3460              // Wait awhile before starting the device
   3461              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   000009                ; Setup parameters for call to function osal_start_timerEx
   \   000009   8A..         MOV     ?V0,R2
   \   00000B   8B..         MOV     ?V1,R3
   \   00000D   E4           CLR     A
   \   00000E   F5..         MOV     ?V2,A
   \   000010   F5..         MOV     ?V3,A
   \   000012   78..         MOV     R0,#?V0
   \   000014   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   90....       MOV     DPTR,#ZDAppTaskID
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000023   7404         MOV     A,#0x4
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
   \   000028   800C         SJMP    ??ZDApp_NetworkInit_1
   3462            }
   3463            else
   3464            {
   3465              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   00002A                ; Setup parameters for call to function osal_set_event
   \   00002A   7A01         MOV     R2,#0x1
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   90....       MOV     DPTR,#ZDAppTaskID
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   3466            }
   3467          }
   \                     ??ZDApp_NetworkInit_1:
   \   000036   02....       LJMP    ??Subroutine36_0 & 0xFFFF
   3468          
   3469          /*********************************************************************
   3470           * @fn      ZDApp_NwkStateUpdateCB()
   3471           *
   3472           * @brief   This function notifies that this device's network
   3473           *          state info has been changed.
   3474           *
   3475           * @param   none
   3476           *
   3477           * @return  none
   3478           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3479          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   3480          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3481            // Notify to save info into NV
   3482            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B01         MOV     R3,#0x1
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   4C           ORL     A,R4
   \   000013   4D           ORL     A,R5
   \   000014   7003         JNZ     ??ZDApp_NwkStateUpdateCB_0
   3483            {
   3484              // Trigger to save info into NV
   3485              ZDApp_NVUpdate();
   \   000016                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000016   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3486            }
   3487          }
   \                     ??ZDApp_NwkStateUpdateCB_0:
   \   000019   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   3488          
   3489          /*********************************************************************
   3490           * @fn      ZDApp_NodeProfileSync()
   3491           *
   3492           * @brief   Sync node with stack profile.
   3493           *
   3494           * @param   stackProfile - stack profile of the network to join
   3495           *
   3496           * @return  none
   3497           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3498          void ZDApp_NodeProfileSync( uint8 stackProfile )
   \                     ZDApp_NodeProfileSync:
   3499          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   3500            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000007   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   501B         JNC     ??ZDApp_NodeProfileSync_0
   3501            {
   3502              if ( stackProfile != zgStackProfile )
   \   00000F   90....       MOV     DPTR,#zgStackProfile
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6E           XRL     A,R6
   \   000014   6014         JZ      ??ZDApp_NodeProfileSync_0
   3503              {
   3504                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000016   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   54F8         ANL     A,#0xf8
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   4402         ORL     A,#0x2
   \   00001F   F0           MOVX    @DPTR,A
   3505                ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   000020   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000023   740C         MOV     A,#0xc
   \   000025   F0           MOVX    @DPTR,A
   3506                NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000026                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000026   F9           MOV     R1,A
   \   000027   12....       LCALL   `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
   3507              }
   3508            }
   3509          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   00002A   02....       LJMP    ??Subroutine34_0 & 0xFFFF
   3510          
   3511          /*********************************************************************
   3512           * @fn      ZDApp_StartJoiningCycle()
   3513           *
   3514           * @brief   Starts the joining cycle of a device.  This will only
   3515           *          continue an already started (or stopped) joining cycle.
   3516           *
   3517           * @param   none
   3518           *
   3519           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3520           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3521          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   3522          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3523            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StartJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7011         JNZ     ??ZDApp_StartJoiningCycle_1
   3524            {
   3525              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000011   90....       MOV     DPTR,#continueJoining
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
   3526              ZDApp_NetworkInit( 0 );
   \   000017                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   3527          
   3528              return ( TRUE );
   \   00001E   7901         MOV     R1,#0x1
   \   000020   8002         SJMP    ??ZDApp_StartJoiningCycle_2
   3529            }
   3530            else
   3531              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000022   7900         MOV     R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000024   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   3532          }
   3533          
   3534          /*********************************************************************
   3535           * @fn      ZDApp_StopJoiningCycle()
   3536           *
   3537           * @brief   Stops the joining or rejoining process of a device.
   3538           *
   3539           * @param   none
   3540           *
   3541           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3542           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3543          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   3544          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3545            if ( devState == DEV_INIT || devState == DEV_NWK_DISC || devState == DEV_NWK_BACKOFF )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   600A         JZ      ??ZDApp_StopJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   6005         JZ      ??ZDApp_StopJoiningCycle_0
   \   000011   E0           MOVX    A,@DPTR
   \   000012   640C         XRL     A,#0xc
   \   000014   7009         JNZ     ??ZDApp_StopJoiningCycle_1
   3546            {
   3547              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000016   90....       MOV     DPTR,#continueJoining
   \   000019   E4           CLR     A
   \   00001A   F0           MOVX    @DPTR,A
   3548              return ( TRUE );
   \   00001B   7901         MOV     R1,#0x1
   \   00001D   8002         SJMP    ??ZDApp_StopJoiningCycle_2
   3549            }
   3550            else
   3551              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001F   7900         MOV     R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   000021   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   3552          }
   3553          
   3554          /*********************************************************************
   3555           * @fn      ZDApp_AnnounceNewAddress()
   3556           *
   3557           * @brief   Send Device Announce and hold all transmissions for
   3558           *          new address timeout.
   3559           *
   3560           * @param   none
   3561           *
   3562           * @return  none
   3563           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3564          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   3565          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3566          #if defined ( ZIGBEEPRO )
   3567            // Turn off data request hold
   3568            APSME_HoldDataRequests( 0 );
   \   00000A                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00000A   7A00         MOV     R2,#0x0
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3569          #endif
   3570          
   3571            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   3572                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   000011                ; Setup parameters for call to function NLME_GetExtAddr
   \   000011   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000014   8A..         MOV     ?V0,R2
   \   000016   8B..         MOV     ?V1,R3
   \   000018   AE..         MOV     R6,?V0
   \   00001A                ; Setup parameters for call to function NLME_GetShortAddr
   \   00001A   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00001D                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   00001D   75..00       MOV     ?V0,#0x0
   \   000020   78..         MOV     R0,#?V0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000025   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F9           MOV     R1,A
   \   00002A   EE           MOV     A,R6
   \   00002B   FC           MOV     R4,A
   \   00002C   AD..         MOV     R5,?V1
   \   00002E   12....       LCALL   `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   000031   7401         MOV     A,#0x1
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
   3573          
   3574          #if defined ( ZIGBEEPRO )
   3575            // Setup the timeout
   3576            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   000036                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000036   7A00         MOV     R2,#0x0
   \   000038   7B00         MOV     R3,#0x0
   \   00003A   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3577          #endif
   3578          
   3579            if ( ZSTACK_END_DEVICE_BUILD )
   3580            {
   3581              if ( zgChildAgingEnable == TRUE )
   \   00003D   90....       MOV     DPTR,#zgChildAgingEnable
   \   000040   E0           MOVX    A,@DPTR
   \   000041   6401         XRL     A,#0x1
   \   000043   7027         JNZ     ??ZDApp_AnnounceNewAddress_0
   3582              {
   3583                uint8 coordExtAddr[Z_EXTADDR_LEN];
   3584          
   3585                // Send the message to parent
   3586                NLME_GetCoordExtAddr( coordExtAddr );
   \   000045                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   000045   AA..         MOV     R2,?XSP + 0
   \   000047   AB..         MOV     R3,?XSP + 1
   \   000049   12....       LCALL   `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   3587                NLME_SendEndDevTimeoutReq( NLME_GetCoordShortAddr(), coordExtAddr,
   3588                                           zgEndDeviceTimeoutValue,
   3589                                           zgEndDeviceConfiguration );
   \   00004C                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00004C   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   00004F                ; Setup parameters for call to function NLME_SendEndDevTimeoutReq
   \   00004F   90....       MOV     DPTR,#zgEndDeviceConfiguration
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F5..         MOV     ?V0,A
   \   000055   78..         MOV     R0,#?V0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005A   90....       MOV     DPTR,#zgEndDeviceTimeoutValue
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F9           MOV     R1,A
   \   00005F   7401         MOV     A,#0x1
   \   000061   12....       LCALL   ?XSTACK_DISP102_8
   \   000064   12....       LCALL   `??NLME_SendEndDevTimeoutReq::?relay`; Banked call to: NLME_SendEndDevTimeoutReq
   \   000067   7401         MOV     A,#0x1
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
   3590              }
   3591            }
   3592          }
   \                     ??ZDApp_AnnounceNewAddress_0:
   \   00006C   7408         MOV     A,#0x8
   \   00006E   80..         SJMP    ??Subroutine45_0
   3593          
   3594          /*********************************************************************
   3595           * @fn      ZDApp_SendParentAnnce()
   3596           *
   3597           * @brief   Send Parent Announce message.
   3598           *
   3599           * @param   none
   3600           *
   3601           * @return  none
   3602           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3603          void ZDApp_SendParentAnnce( void )
   \                     ZDApp_SendParentAnnce:
   3604          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3605            uint8 count;
   3606            uint8 *childInfo;
   3607          
   3608            childInfo = AssocMakeListOfRfdChild( &count );
   \   00000A                ; Setup parameters for call to function AssocMakeListOfRfdChild
   \   00000A   AA..         MOV     R2,?XSP + 0
   \   00000C   AB..         MOV     R3,?XSP + 1
   \   00000E   12....       LCALL   `??AssocMakeListOfRfdChild::?relay`; Banked call to: AssocMakeListOfRfdChild
   \   000011   8A..         MOV     ?V0,R2
   \   000013   8B..         MOV     ?V1,R3
   3609          
   3610            if ( childInfo != NULL )
   \   000015   EA           MOV     A,R2
   \   000016   45..         ORL     A,?V1
   \   000018   6054         JZ      ??ZDApp_SendParentAnnce_0
   3611            {
   3612              if ( count > 0 )
   \   00001A   85..82       MOV     DPL,?XSP + 0
   \   00001D   85..83       MOV     DPH,?XSP + 1
   \   000020   E0           MOVX    A,@DPTR
   \   000021   6044         JZ      ??ZDApp_SendParentAnnce_1
   3613              {
   3614                zAddrType_t dstAddr;
   3615          
   3616                dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000023   7409         MOV     A,#0x9
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   740F         MOV     A,#0xf
   \   00002A   F0           MOVX    @DPTR,A
   3617                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   \   00002B   7401         MOV     A,#0x1
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   74FC         MOV     A,#-0x4
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   74FF         MOV     A,#-0x1
   \   000036   F0           MOVX    @DPTR,A
   3618          
   3619                ZDP_ParentAnnceReq( dstAddr, count, childInfo, 0 );
   \   000037                ; Setup parameters for call to function ZDP_ParentAnnce
   \   000037   75..00       MOV     ?V2,#0x0
   \   00003A   78..         MOV     R0,#?V2
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003F   75..1F       MOV     ?V2,#0x1f
   \   000042   75..00       MOV     ?V3,#0x0
   \   000045   78..         MOV     R0,#?V2
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   78..         MOV     R0,#?V0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   7405         MOV     A,#0x5
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F9           MOV     R1,A
   \   000056   7406         MOV     A,#0x6
   \   000058   12....       LCALL   ?XSTACK_DISP102_8
   \   00005B   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00005D   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00005F   12....       LCALL   `??ZDP_ParentAnnce::?relay`; Banked call to: ZDP_ParentAnnce
   \   000062   7405         MOV     A,#0x5
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
   3620              }
   3621          
   3622              // Free the list after the message has been sent
   3623              osal_mem_free( childInfo );
   \                     ??ZDApp_SendParentAnnce_1:
   \   000067                ; Setup parameters for call to function osal_mem_free
   \   000067   AA..         MOV     R2,?V0
   \   000069   AB..         MOV     R3,?V1
   \   00006B   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3624            }
   3625          }
   \                     ??ZDApp_SendParentAnnce_0:
   \   00006E   740A         MOV     A,#0xa
   \   000070   02....       LJMP    ??Subroutine35_0 & 0xFFFF
   3626          
   3627          /*********************************************************************
   3628           * @fn          ZDApp_NVUpdate
   3629           *
   3630           * @brief       Set the NV Update Timer.
   3631           *
   3632           * @param       none
   3633           *
   3634           * @return      none
   3635           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3636          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   3637          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3638          #if defined ( NV_RESTORE )
   3639            if ( (ZSTACK_END_DEVICE_BUILD)
   3640                 || (ZSTACK_ROUTER_BUILD
   3641                     && (_NIB.CapabilityFlags & CAPINFO_DEVICETYPE_FFD) == 0) )
   3642            {
   3643              // No need to wait, set the event to save the state
   3644              osal_set_event(ZDAppTaskID, ZDO_NWK_UPDATE_NV);
   \   000004                ; Setup parameters for call to function osal_set_event
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B01         MOV     R3,#0x1
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   3645            }
   3646            else
   3647            {
   3648              // To allow for more changes to the network state before saving
   3649              osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   3650            }
   3651          #endif
   3652          }
   \   000010   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   3653          
   3654          /*********************************************************************
   3655           * @fn      ZDApp_CoordStartPANIDConflictCB()
   3656           *
   3657           * @brief   Returns a PAN ID for the network layer to use during
   3658           *          a coordinator start and there is another network with
   3659           *          the intended PANID.
   3660           *
   3661           * @param   panid - the intended PAN ID
   3662           *
   3663           * @return  PANID to try
   3664           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3665          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   3666          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3667            return ( panid + 1 );
   \   000000   EA           MOV     A,R2
   \   000001   2401         ADD     A,#0x1
   \   000003   0A           INC     R2
   \   000004   5001         JNC     ??ZDApp_CoordStartPANIDConflictCB_0
   \   000006   0B           INC     R3
   \                     ??ZDApp_CoordStartPANIDConflictCB_0:
   \   000007   02....       LJMP    ?BRET
   3668          }
   3669          
   3670          /*********************************************************************
   3671           * @fn          ZDO_SrcRtgIndCB
   3672           *
   3673           * @brief       This function notifies the ZDO available src route record received.
   3674           *
   3675           * @param       srcAddr - source address of the source route
   3676           * @param       relayCnt - number of devices in the relay list
   3677           * @param       relayList - relay list of the source route
   3678           *
   3679           * @return      none
   3680           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3681          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   3682          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3683            zdoSrcRtg_t srcRtg;
   3684          
   3685            srcRtg.srcAddr = srcAddr;
   \   00000A   12....       LCALL   ?Subroutine11 & 0xFFFF
   3686            srcRtg.relayCnt = relayCnt;
   \                     ??CrossCallReturnLabel_84:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E9           MOV     A,R1
   \   000013   F0           MOVX    @DPTR,A
   3687            srcRtg.pRelayList = pRelayList;
   \   000014   7403         MOV     A,#0x3
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   ED           MOV     A,R5
   \   00001D   F0           MOVX    @DPTR,A
   3688          
   3689            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc
   \   000021   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000024   600A         JZ      ??ZDO_SrcRtgIndCB_0
   3690            {
   3691              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000026                ; Setup parameters for indirect call
   \   000026   AA..         MOV     R2,?XSP + 0
   \   000028   AB..         MOV     R3,?XSP + 1
   \   00002A   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   3692            }
   \                     ??CrossCallReturnLabel_44:
   \   00002D   12....       LCALL   ?CALL_IND
   3693          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   000030   02....       LJMP    ?Subroutine0 & 0xFFFF
   3694          
   3695          /*********************************************************************
   3696           * @fn          ZDApp_InitZdoCBFunc
   3697           *
   3698           * @brief       Call this function to initialize zdoCBFunc[]
   3699           *
   3700           * @param       none
   3701           *
   3702           * @return      none
   3703           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3704          void ZDApp_InitZdoCBFunc( void )
   \                     ZDApp_InitZdoCBFunc:
   3705          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3706            uint8 i;
   3707          
   3708            for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
   \   000004   7A00         MOV     R2,#0x0
   3709            {
   3710              zdoCBFunc[i] = NULL;
   \                     ??ZDApp_InitZdoCBFunc_0:
   \   000006   EA           MOV     A,R2
   \   000007   25E0         ADD     A,0xE0 /* A   */
   \   000009   12....       LCALL   ?Subroutine31 & 0xFFFF
   3711            }
   \                     ??CrossCallReturnLabel_40:
   \   00000C   E4           CLR     A
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   0A           INC     R2
   \   000011   EA           MOV     A,R2
   \   000012   C3           CLR     C
   \   000013   9409         SUBB    A,#0x9
   \   000015   40EF         JC      ??ZDApp_InitZdoCBFunc_0
   3712          }
   \   000017   02....       LJMP    ??Subroutine38_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   33           RLC     A
   \   000003   F9           MOV     R1,A
   \   000004   74..         MOV     A,#zdoCBFunc & 0xff
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   74..         MOV     A,#(zdoCBFunc >> 8) & 0xff
   \   00000B   39           ADDC    A,R1
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET
   3713          
   3714          /*********************************************************************
   3715           * @fn          ZDO_RegisterForZdoCB
   3716           *
   3717           * @brief       Call this function to register the higher layer (for
   3718           *              example, the Application layer or MT layer) with ZDO
   3719           *              callbacks to get notified of some ZDO indication like
   3720           *              existence of a concentrator or receipt of a source
   3721           *              route record.
   3722           *
   3723           * @param       indID - ZDO Indication ID
   3724           * @param       pFn   - Callback function pointer
   3725           *
   3726           * @return      ZSuccess - successful, ZInvalidParameter if not
   3727           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3728          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   3729          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
   3730            // Check the range of the indication ID
   3731            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9409         SUBB    A,#0x9
   \   000009   500B         JNC     ??ZDO_RegisterForZdoCB_0
   3732            {
   3733              zdoCBFunc[indID] = pFn;
   \   00000B   EC           MOV     A,R4
   \   00000C   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00000F   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   3734              return ZSuccess;
   \                     ??CrossCallReturnLabel_82:
   \   000012   7900         MOV     R1,#0x0
   \   000014   8002         SJMP    ??ZDO_RegisterForZdoCB_1
   3735            }
   3736          
   3737            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000016   7902         MOV     R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   000018   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   3738          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   29           ADD     A,R1
   \   000001   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000004   22           RET
   3739          
   3740          /*********************************************************************
   3741           * @fn          ZDO_DeregisterForZdoCB
   3742           *
   3743           * @brief       Call this function to de-register the higher layer (for
   3744           *              example, the Application layer or MT layer) with ZDO
   3745           *              callbacks to get notified of some ZDO indication like
   3746           *              existence of a concentrator or receipt of a source
   3747           *              route record.
   3748           *
   3749           * @param       indID - ZDO Indication ID
   3750           *
   3751           * @return      ZSuccess - successful, ZInvalidParameter if not
   3752           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3753          ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
   \                     ZDO_DeregisterForZdoCB:
   3754          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FA           MOV     R2,A
   3755            // Check the range of the indication ID
   3756            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9409         SUBB    A,#0x9
   \   000009   500B         JNC     ??ZDO_DeregisterForZdoCB_0
   3757            {
   3758              zdoCBFunc[indID] = NULL;
   \   00000B   EA           MOV     A,R2
   \   00000C   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   F0           MOVX    @DPTR,A
   3759              return ZSuccess;
   \   000013   F9           MOV     R1,A
   \   000014   8002         SJMP    ??ZDO_DeregisterForZdoCB_1
   3760            }
   3761          
   3762            return ZInvalidParameter;
   \                     ??ZDO_DeregisterForZdoCB_0:
   \   000016   7902         MOV     R1,#0x2
   \                     ??ZDO_DeregisterForZdoCB_1:
   \   000018   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   3763          }
   3764          
   3765          #if defined ( ZDP_BIND_VALIDATION )
   3766          #if defined ( REFLECTOR )
   3767          /*********************************************************************
   3768           * @fn          ZDApp_SetPendingBindDefault
   3769           *
   3770           * @brief       This function initializes a specific entry of pending
   3771           *              Bind Request.
   3772           *
   3773           * @param       pendBindReq - pointer to the entry in the table
   3774           *
   3775           * @return      none
   3776           */
   3777          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq )
   3778          {
   3779            // Set it to an initial value
   3780            osal_memset( pendBindReq, 0xFF, sizeof( ZDO_PendingBindReq_t ) );
   3781          
   3782            // We are checking for age 0 for aged-out records
   3783            pendBindReq->age = 0;
   3784          }
   3785          
   3786          /*********************************************************************
   3787           * @fn          ZDApp_InitPendingBind
   3788           *
   3789           * @brief       This function initializes the buffer that holds
   3790           *              pending Bind Request messages if no valid NWK address
   3791           *              exists in Address Manager and a Network Address Req
   3792           *              has been sent out.
   3793           *
   3794           * @param       none
   3795           *
   3796           * @return      none
   3797           */
   3798          void ZDApp_InitPendingBind( void )
   3799          {
   3800            if ( ZDAppPendingBindReq == NULL )
   3801            {
   3802              if ( ( ZDAppPendingBindReq = osal_mem_alloc( sizeof(ZDO_PendingBindReq_t) * MAX_PENDING_BIND_REQ ) ) != NULL )
   3803              {
   3804                uint8 i;
   3805          
   3806                for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   3807                {
   3808                  // Set to default values
   3809                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   3810                }
   3811              }
   3812            }
   3813          }
   3814          
   3815          /*********************************************************************
   3816           * @fn          ZDApp_GetEmptyPendingBindReq
   3817           *
   3818           * @brief       This function looks for an empty entry.
   3819           *
   3820           * @param       none
   3821           *
   3822           * @return      Pointer to entry
   3823           */
   3824          ZDO_PendingBindReq_t *ZDApp_GetEmptyPendingBindReq( void )
   3825          {
   3826            uint8 i;
   3827          
   3828            if ( ZDAppPendingBindReq != NULL )
   3829            {
   3830              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   3831              {
   3832                if ( ZDAppPendingBindReq[i].age == 0 )
   3833                {
   3834                  return ( &ZDAppPendingBindReq[i] );
   3835                }
   3836              }
   3837            }
   3838          
   3839            // No empty entry was found
   3840            return NULL;
   3841          }
   3842          
   3843          /*********************************************************************
   3844           * @fn          ZDApp_ProcessPendingBindReq
   3845           *
   3846           * @brief       Process pending entry based on EXT address.
   3847           *
   3848           * @param       extAddr - of device to look up
   3849           *
   3850           * @return      none
   3851           */
   3852          void ZDApp_ProcessPendingBindReq( uint8 *extAddr )
   3853          {
   3854            uint8 i;
   3855          
   3856            // Loop through all the pending entries for that Ext Address
   3857            // to create Bind Entries and send Bind Rsp
   3858            if ( ZDAppPendingBindReq != NULL )
   3859            {
   3860              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   3861              {
   3862                if ( osal_memcmp( ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr,
   3863                                  extAddr, Z_EXTADDR_LEN ) == TRUE )
   3864                {
   3865                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   3866          
   3867                  // Add Bind entry
   3868                  if ( APSME_BindRequest( ZDAppPendingBindReq[i].bindReq.srcEndpoint,
   3869                                          ZDAppPendingBindReq[i].bindReq.clusterID,
   3870                                          &(ZDAppPendingBindReq[i].bindReq.dstAddress),
   3871                                          ZDAppPendingBindReq[i].bindReq.dstEndpoint ) == ZSuccess )
   3872                  {
   3873                    // valid entry
   3874                    bindStat = ZDP_SUCCESS;
   3875          
   3876                    // Notify to save info into NV
   3877                    ZDApp_NVUpdate();
   3878                  }
   3879          
   3880                  // Send back a response message
   3881                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq, &(ZDAppPendingBindReq[i].srcAddr),
   3882                               bindStat, ZDAppPendingBindReq[i].securityUse );
   3883          
   3884                  // Set the pending request entry to default values
   3885                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   3886                }
   3887              }
   3888            }
   3889          }
   3890          
   3891          /*********************************************************************
   3892           * @fn          ZDApp_AgeOutPendingBindEntry
   3893           *
   3894           * @brief       Age out pending Bind Req entries.
   3895           *
   3896           * @param       none
   3897           *
   3898           * @return      none
   3899           */
   3900          void ZDApp_AgeOutPendingBindEntry( void )
   3901          {
   3902            uint8 i;
   3903            bool entryFound = FALSE;
   3904          
   3905            if ( ZDAppPendingBindReq != NULL )
   3906            {
   3907              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   3908              {
   3909                if ( ZDAppPendingBindReq[i].age > 1 )
   3910                {
   3911                  ZDAppPendingBindReq[i].age--;
   3912          
   3913                  entryFound = TRUE;
   3914                }
   3915                else if ( ZDAppPendingBindReq[i].age == 1 )
   3916                {
   3917                  // The record has aged out and has valid data
   3918                  AddrMgrEntry_t entry;
   3919                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   3920          
   3921                  entry.user = ADDRMGR_USER_BINDING;
   3922          
   3923                  // Remove the entry in address manager so we do not keep entries
   3924                  // with invalid addresses
   3925                  AddrMgrExtAddrSet( entry.extAddr, ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr );
   3926          
   3927                  if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   3928                  {
   3929                    if ( entry.nwkAddr == INVALID_NODE_ADDR )
   3930                    {
   3931                      // Release the entry that contains an invalid NWK address
   3932                      AddrMgrEntryRelease( &entry );
   3933                    }
   3934                  }
   3935          
   3936                  // Send the Bind Response with failure status
   3937                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq,
   3938                               &(ZDAppPendingBindReq[i].srcAddr),
   3939                               bindStat, ZDAppPendingBindReq[i].securityUse );
   3940          
   3941                  // Clear the record and set to default values
   3942                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   3943                }
   3944              }
   3945            }
   3946          
   3947            if ( entryFound == FALSE )
   3948            {
   3949              osal_stop_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT );
   3950            }
   3951            else
   3952            {
   3953              osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   3954                                  AGE_OUT_PEND_BIND_REQ_DELAY );
   3955            }
   3956          }
   3957          #endif
   3958          #endif
   3959          
   3960          /*********************************************************************
   3961           * @fn          ZDO_ChangeState
   3962           *
   3963           * @brief       Chance the device state
   3964           *
   3965           * @param       state - new state
   3966           *
   3967           * @return      none
   3968           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3969          void ZDApp_ChangeState( devStates_t state )
   \                     ZDApp_ChangeState:
   3970          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   3971            if ( devState != state )
   \   000007   90....       MOV     DPTR,#devState
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6E           XRL     A,R6
   \   00000C   600E         JZ      ??ZDApp_ChangeState_0
   3972            {
   3973              devState = state;
   \   00000E   EE           MOV     A,R6
   \   00000F   F0           MOVX    @DPTR,A
   3974              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000010                ; Setup parameters for call to function osal_set_event
   \   000010   7A10         MOV     R2,#0x10
   \   000012   7B00         MOV     R3,#0x0
   \   000014   90....       MOV     DPTR,#ZDAppTaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   3975            }
   3976          }
   \                     ??ZDApp_ChangeState_0:
   \   00001C   02....       LJMP    ??Subroutine34_0 & 0xFFFF
   3977          
   3978          /*********************************************************************
   3979           * @fn      ZDApp_SetRejoinScanDuration()
   3980           *
   3981           * @brief   Sets scan duration for rejoin for an end device
   3982           *
   3983           * @param   rejoinScanDuration - milliseconds
   3984           *
   3985           * @return  none
   3986           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3987          void ZDApp_SetRejoinScanDuration( uint32 rejoinScanDuration )
   \                     ZDApp_SetRejoinScanDuration:
   3988          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   3989            zgDefaultRejoinScan = rejoinScanDuration;
   \   00000D   90....       MOV     DPTR,#zgDefaultRejoinScan
   \   000010                REQUIRE ?Subroutine8
   \   000010                ; // Fall through to label ?Subroutine8
   3990          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   78..         MOV     R0,#?V0
   \   000002   12....       LCALL   ?L_MOV_TO_X
   \   000005   02....       LJMP    ??Subroutine36_0 & 0xFFFF
   3991          
   3992          /*********************************************************************
   3993           * @fn      ZDApp_SetRejoinBackoffDuration()
   3994           *
   3995           * @brief   Sets rejoin backoff duration for rejoin for an end device
   3996           *
   3997           * @param   rejoinBackoffDuration - milliseconds
   3998           *
   3999           * @return  none
   4000           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4001          void ZDApp_SetRejoinBackoffDuration( uint32 rejoinBackoffDuration )
   \                     ZDApp_SetRejoinBackoffDuration:
   4002          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   4003            zgDefaultRejoinBackoff = rejoinBackoffDuration;
   \   00000D   90....       MOV     DPTR,#zgDefaultRejoinBackoff
   \   000010   80..         SJMP    ?Subroutine8
   4004          }
   4005          
   4006          /*********************************************************************
   4007           * @fn          ZDApp_SetParentAnnceTimer
   4008           *
   4009           * @brief       This function sets up the link status timer.
   4010           *
   4011           * @param       none
   4012           *
   4013           * @return      none
   4014           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4015          void ZDApp_SetParentAnnceTimer( void )
   \                     ZDApp_SetParentAnnceTimer:
   4016          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   4017            // Parent Announce shall be sent no earlier than 10 seconds
   4018            uint32 timeout = 10000;
   4019          
   4020            // Add with jitter of up to 10 seconds
   4021            timeout += (osal_rand() & 0x2710);
   \   000005                ; Setup parameters for call to function osal_rand
   \   000005   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   4022          
   4023            // Set timer to send the message
   4024            osal_start_timerEx( ZDAppTaskID, ZDO_PARENT_ANNCE_EVT, timeout );
   \   000008                ; Setup parameters for call to function osal_start_timerEx
   \   000008   EA           MOV     A,R2
   \   000009   5410         ANL     A,#0x10
   \   00000B   F5..         MOV     ?V0,A
   \   00000D   EB           MOV     A,R3
   \   00000E   5427         ANL     A,#0x27
   \   000010   F5..         MOV     ?V1,A
   \   000012   E4           CLR     A
   \   000013   F5..         MOV     ?V2,A
   \   000015   F5..         MOV     ?V3,A
   \   000017   90....       MOV     DPTR,#__Constant_2710
   \   00001A   78..         MOV     R0,#?V0
   \   00001C   12....       LCALL   ?L_ADD_X
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000024   7A00         MOV     R2,#0x0
   \   000026   7B40         MOV     R3,#0x40
   \   000028   90....       MOV     DPTR,#ZDAppTaskID
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000030   02....       LJMP    ?Subroutine5 & 0xFFFF
   4025          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for prevDevState>`:
   \   000000   04           DB 4

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   ....         DW ZDAppTaskID
   \   000004   0000         DW 0H
   \   000006   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SecInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SecInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDOInitDeviceEx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDOInitDeviceEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ReadNetworkRestoreState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ReadNetworkRestoreState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppDetermineDeviceType::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppDetermineDeviceType

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkStartEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkStartEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_DeviceAuthEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceAuthEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNetworkStateEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNetworkStateEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RestoreNetworkState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNetworkState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitUserDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitUserDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppCheckForHoldKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppCheckForHoldKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessOSALMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessOSALMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessMsgCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RegisterCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RegisterCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessNetworkJoin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessNetworkJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StoreNwkSecMaterial::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StoreNwkSecMaterial

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ForceConcentratorChange::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ForceConcentratorChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RestoreNwkSecMaterial::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkSecMaterial

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RestoreNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerStart::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerCancel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerCancel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlBypass::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlBypass

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlStartup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlStartup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkDiscoveryReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_JoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_JoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_DeviceConfigured::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceConfigured

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendEventMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendEventMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkDiscoveryConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NwkDescListProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkDescListProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkFormationConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkFormationConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_beaconNotifyIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_beaconNotifyIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartRouterConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartRouterConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_PermitJoinCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PermitJoinCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AddrChangeIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AddrChangeIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConcentratorIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConcentratorIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveCnf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SyncIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SyncIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ManytoOneFailureIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ManytoOneFailureIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_PollConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PollConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkStatusCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkStatusCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AddrMgrWriteNVRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AddrMgrWriteNVRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateDeviceIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateDeviceIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InMsgCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ChangeMatchDescRespPermission::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeMatchDescRespPermission

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NwkStateUpdateCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkStateUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NodeProfileSync::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NodeProfileSync

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StartJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StartJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StopJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StopJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_AnnounceNewAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AnnounceNewAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendParentAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendParentAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NVUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NVUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_CoordStartPANIDConflictCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_CoordStartPANIDConflictCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SrcRtgIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SrcRtgIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitZdoCBFunc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitZdoCBFunc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RegisterForZdoCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_DeregisterForZdoCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_DeregisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ChangeState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SetRejoinScanDuration::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetRejoinScanDuration

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SetRejoinBackoffDuration::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetRejoinBackoffDuration

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SetParentAnnceTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetParentAnnceTimer

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4e2:
   \   000000   E2040000     DD 1250

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_258:
   \   000000   58020000     DD 600

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000
   4026          
   4027          /*********************************************************************
   4028          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     24   AddrMgrWriteNVRequest
        2      0   -> ZDApp_NVUpdate
        2      0   -> osal_get_timeoutEx
      2      9   ZDAppCheckForHoldKey
        2      0   -> HalKeyRead
      2     25   ZDAppDetermineDeviceType
        2      0   -> nwk_ExtPANIDValid
      0     33   ZDApp_AnnounceNewAddress
        0     18   -> APSME_HoldDataRequests
        0     18   -> NLME_GetCoordExtAddr
        0     18   -> NLME_GetCoordShortAddr
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_GetShortAddr
        0     19   -> NLME_SendEndDevTimeoutReq
        0     19   -> ZDP_DeviceAnnce
      0      9   ZDApp_ChangeMatchDescRespPermission
        0      9   -> afSetMatch
      0     35   ZDApp_ChangeState
        0      9   -> osal_set_event
      0      0   ZDApp_CoordStartPANIDConflictCB
      2      9   ZDApp_DeviceAuthEvt
        2      0   -> NLME_SetPollRate
        2      0   -> ZDApp_AnnounceNewAddress
        2      0   -> ZDApp_ChangeState
        2      0   -> ZDApp_NVUpdate
        2      0   -> ZDApp_ResetTimerCancel
        2      0   -> ZDApp_SaveNwkKey
      0     16   ZDApp_DeviceConfigured
        0     16   -> osal_nv_read
      0     14   ZDApp_ForceConcentratorChange
        0     14   -> osal_nv_read
        0     14   -> osal_start_timerEx
        0     10   -> osal_stop_timerEx
      0     14   ZDApp_InMsgCB
        0     14   -> ZDP_GenericRsp
      0      9   ZDApp_Init
        0      9   -> NLME_GetExtAddr
        0      9   -> ZDAppCheckForHoldKey
        0      9   -> ZDApp_InitZdoCBFunc
        0      9   -> ZDApp_RegisterCBs
        0      9   -> ZDO_Init
        0      9   -> afRegister
      0     31   ZDApp_InitUserDesc
        0     27   -> osal_memset
        0     29   -> osal_nv_item_init
        0     31   -> osal_nv_read
      2      9   ZDApp_InitZdoCBFunc
      0     20   ZDApp_JoinReq
        0     16   -> NLME_JoinRequest
        0     12   -> ZDApp_NodeProfileSync
      2      0   ZDApp_LeaveCtrlBypass
      0     39   ZDApp_LeaveCtrlInit
        0     12   -> osal_nv_item_init
        0     14   -> osal_nv_read
      0     14   ZDApp_LeaveCtrlReset
        0     14   -> osal_nv_write
      0     24   ZDApp_LeaveCtrlSet
        0     14   -> osal_nv_write
      2      0   ZDApp_LeaveCtrlStartup
        2      0   -> ZDApp_LeaveCtrlReset
      0     25   ZDApp_LeaveReset
        0     10   -> APSME_HoldDataRequests
        0     10   -> NLME_NwkDiscTerm
        0     10   -> NLME_SetPollRate
        0     10   -> NLME_SetQueuedPollRate
        0     10   -> NLME_SetResponseRate
        0     10   -> ZDApp_LeaveCtrlSet
        0     10   -> ZDApp_NetworkInit
        0     10   -> ZDApp_ResetTimerStart
        0     10   -> osal_rand
        0     10   -> sAddrExtCpy
      0     43   ZDApp_LeaveUpdate
        0     24   -> AddrMgrWriteNVRequest
        0     24   -> RTG_RemoveRtgEntry
        0     24   -> ZDSecMgrAddrClear
        0     24   -> ZDSecMgrDeviceRemoveByExtAddr
        0     24   -> nwkNeighborRemove
        0     27   -> osal_memcpy
      2     16   ZDApp_NVUpdate
        2      0   -> osal_set_event
      0     12   ZDApp_NetworkDiscoveryReq
        0     12   -> NLME_NetworkDiscoveryRequest
      0     41   ZDApp_NetworkInit
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
      2      0   ZDApp_NetworkStartEvt
        2      0   -> AddrMgrWriteNVRequest
        2      0   -> NLME_GetEnergyThreshold
        2      0   -> NLME_SetEnergyThreshold
        2      0   -> ZDApp_ChangeState
        2      0   -> ZDApp_SetParentAnnceTimer
        2      0   -> ZDApp_StoreNwkSecMaterial
        2      0   -> bdb_nwkFormationAttempt
        2      0   -> bdb_reportCommissioningState
        2      0   -> osal_pwrmgr_device
        2      0   -> osal_set_event
      0     21   ZDApp_NodeProfileSync
        0      9   -> NLME_SetBroadcastFilter
      0     14   ZDApp_NwkDescListProcessing
        0     14   -> nwk_ExtPANIDValid
        0     14   -> nwk_desc_list_free
        0     14   -> nwk_getNwkDescList
        0     14   -> sAddrExtCmp
      2      0   ZDApp_NwkStateUpdateCB
        2      0   -> ZDApp_NVUpdate
        2      0   -> osal_get_timeoutEx
      0     41   ZDApp_ProcessMsgCBs
        0     31   -> ZDO_ParseAddrRsp
        0     31   -> ZDO_ParseBindUnbindReq
        0     31   -> ZDO_ProcessBindUnbindReq
        0     31   -> ZDO_UpdateAddrManager
        0     31   -> osal_mem_free
      0     22   ZDApp_ProcessNetworkJoin
        0     12   -> NLME_NwkDiscTerm
        0     12   -> NLME_SetPollRate
        0     12   -> NLME_SetQueuedPollRate
        0     12   -> NLME_SetResponseRate
        0     12   -> ZDApp_AnnounceNewAddress
        0     12   -> ZDApp_ChangeState
        0     12   -> ZDApp_NetworkInit
        0     12   -> ZDApp_ResetNwkKey
        0     12   -> ZDApp_ResetTimerStart
        0     12   -> ZDApp_RestoreNwkKey
        0     12   -> bdb_nwkAssocAttemt
        0     12   -> bdb_reportCommissioningState
        0     12   -> bdb_setNodeIsOnANetwork
        0     12   -> nwkNeighborInitTable
        0     12   -> osal_rand
        0     12   -> osal_set_event
        0     12   -> osal_stop_timerEx
      0     24   ZDApp_ProcessOSALMsg
        0     10   -> ZDApp_ProcessMsgCBs
        0     10   -> ZDApp_ProcessNetworkJoin
        0     10   -> ZDApp_ProcessSecMsg
        0     10   -> ZDP_IncomingData
        0     10   -> bdb_isDeviceNonFactoryNew
        0     10   -> bdb_nwkDiscoveryAttempt
        0     10   -> bdb_parentLost
        0     10   -> bdb_rejoinNwk
        0     10   -> bdb_reportCommissioningState
        0     10   -> nwk_getNwkDescList
      0     23   ZDApp_ProcessSecEvent
        0      9   -> ZDApp_DeviceAuthEvt
        0      9   -> ZDApp_SaveNwkKey
        0      9   -> ZDApp_StoreNwkSecMaterial
        0      9   -> ZDSecMgrSaveApsLinkKey
        0      9   -> ZDSecMgrSaveTCLinkKey
        0      9   -> bdb_reportCommissioningState
        0      9   -> bdb_setNodeIsOnANetwork
      2     10   ZDApp_ProcessSecMsg
        2      0   -> ZDSecMgrSwitchKeyInd
        2      0   -> ZDSecMgrTransportKeyInd
      0     34   ZDApp_ReadNetworkRestoreState
        0      9   -> bdb_setNodeIsOnANetwork
        0      9   -> zgReadStartupOptions
      2      9   ZDApp_RegisterCBs
        2      0   -> ZDO_RegisterForZDOMsg
      0     47   ZDApp_ResetNwkKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      2      0   ZDApp_ResetTimerCancel
        2      0   -> osal_clear_event
        2      0   -> osal_stop_timerEx
      0     28   ZDApp_ResetTimerStart
        0     12   -> osal_get_timeoutEx
        0     16   -> osal_start_timerEx
      0     34   ZDApp_RestoreNetworkState
        0      9   -> NLME_GetShortAddr
        0      9   -> NLME_InitNV
        0      9   -> NLME_RestoreFromNV
        0      9   -> sAddrExtCpy
      0     64   ZDApp_RestoreNwkKey
        0     48   -> ZDApp_RestoreNwkSecMaterial
        0     51   -> osal_memcmp
        0     48   -> osal_memset
        0     52   -> osal_nv_read
      0     79   ZDApp_RestoreNwkSecMaterial
        0     30   -> osal_memcmp
        0     31   -> osal_nv_read
        0     31   -> osal_nv_write
      2     14   ZDApp_SaveNetworkStateEvt
        2      0   -> NLME_UpdateNV
        2      0   -> zgWriteStartupOptions
      0     61   ZDApp_SaveNwkKey
        0     48   -> SSP_ReadNwkActiveKey
        0     51   -> osal_memcmp
        0     48   -> osal_memset
        0     52   -> osal_nv_read
        0     52   -> osal_nv_write
      0     50   ZDApp_SecInit
        0     25   -> SSP_SwitchNwkKey
        0     25   -> SSP_UpdateNwkKey
        0     25   -> ZDSecMgrInit
        0     25   -> ZDSecMgrReadKeyFromNv
        0     25   -> osal_mem_free
        0     25   -> osal_memset
      0      9   ZDApp_SendEventMsg
        0      9   -> ZDApp_SendMsg
      1     39   ZDApp_SendMsg
        0     22   -> osal_memcpy
        0     19   -> osal_msg_allocate
        0     19   -> osal_msg_send
      0     27   ZDApp_SendParentAnnce
        0     22   -> AssocMakeListOfRfdChild
        0     27   -> ZDP_ParentAnnce
        0     22   -> osal_mem_free
      0     16   ZDApp_SetParentAnnceTimer
        0     12   -> osal_rand
        0     16   -> osal_start_timerEx
      0     12   ZDApp_SetRejoinBackoffDuration
      0     12   ZDApp_SetRejoinScanDuration
      2     14   ZDApp_StartJoiningCycle
        2      0   -> ZDApp_NetworkInit
      2     14   ZDApp_StopJoiningCycle
      0     40   ZDApp_StoreNwkSecMaterial
        0     27   -> osal_isbufset
        0     30   -> osal_memcmp
        0     30   -> osal_memcpy
        0     31   -> osal_nv_read
        0     31   -> osal_nv_write
      0     18   ZDApp_event_loop
        0     14   -> Onboard_soft_reset
        0     14   -> ZDApp_ChangeState
        0     14   -> ZDApp_ProcessOSALMsg
        0     14   -> ZDApp_ProcessSecEvent
        0     14   -> ZDApp_SaveNetworkStateEvt
        0     14   -> ZDApp_StartJoiningCycle
        0     14   -> ZDApp_StopJoiningCycle
        0     14   -> ZDO_StartDevice
        0     14   -> ZDO_UpdateNwkStatus
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
        0     18   -> osal_start_timerEx
        0     14   -> zgWriteStartupOptions
      0     29   ZDOInitDeviceEx
        0     25   -> NLME_InitNV
        0     25   -> NLME_SetBroadcastFilter
        0     25   -> NLME_SetDefaultNV
        0     25   -> NLME_SetUpdateID
        0     25   -> ZDAppDetermineDeviceType
        0     25   -> ZDApp_LeaveCtrlInit
        0     25   -> ZDApp_NetworkInit
        0     25   -> ZDApp_ReadNetworkRestoreState
        0     25   -> ZDApp_RestoreNetworkState
        0     25   -> ZDApp_SecInit
        0     25   -> ZDConfig_InitDescriptors
        0     25   -> ZDSecMgrClearNVKeyValues
        0     25   -> ZDSecMgrUpdateTCAddress
        0     25   -> ZMacSetReq
        0     25   -> osal_memset
        0     29   -> osal_nv_write
        0     25   -> osal_rand
        0     25   -> zgInitItems
        0     25   -> zgWriteStartupOptions
      0     14   ZDO_AddrChangeIndicationCB
        0     14   -> ZDApp_AnnounceNewAddress
        0     14   -> ZDApp_NVUpdate
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
        0     14   -> osal_set_event
      1     14   ZDO_ConcentratorIndicationCB
      2      0   ZDO_DeregisterForZdoCB
      1     17   ZDO_JoinConfirmCB
        0     17   -> ZDApp_ChangeState
        0     17   -> ZDApp_SendMsg
        0     17   -> nwkNeighborFindEmptySlot
        0     17   -> nwkNeighborInitTable
        0     17   -> osal_memset
        0     17   -> sAddrExtCpy
      0     21   ZDO_JoinIndicationCB
        0     16   -> ZDApp_NVUpdate
        0     16   -> osal_get_timeoutEx
        0     16   -> osal_mem_alloc
        0     20   -> osal_start_timerEx
      0     10   ZDO_LeaveCnf
        0     10   -> NLME_GetExtAddr
        0     10   -> ZDApp_LeaveReset
        0     10   -> sAddrExtCmp
      0     16   ZDO_LeaveInd
        0     15   -> NLME_GetCoordShortAddr
        0     15   -> NLME_LeaveRsp
        0     15   -> NLME_SetPollRate
        0     15   -> NLME_SetQueuedPollRate
        0     15   -> NLME_SetResponseRate
        0     15   -> ZDApp_LeaveReset
        0     16   -> ZDApp_LeaveUpdate
        0     15   -> ZMacSetReq
        0     15   -> bdb_setFN
      2      0   ZDO_ManytoOneFailureIndicationCB
        2      0   -> RTG_MTORouteReq
      3      3   ZDO_NetworkDiscoveryConfirmCB
        2      3   -> ZDApp_SendMsg
      1     26   ZDO_NetworkFormationConfirmCB
        0     26   -> APSME_IsDistributedSecurity
        0     26   -> NLME_SetAssocFlags
        0     26   -> SSP_SwitchNwkKey
        0     26   -> SSP_UpdateNwkKey
        0     26   -> ZDApp_ChangeState
        0     26   -> ZDApp_RestoreNwkSecMaterial
        0     26   -> ZDSecMgrGenerateRndKey
        0     26   -> ZMacSetReq
        0     26   -> bdb_nwkFormationAttempt
        0     26   -> bdb_setNodeIsOnANetwork
        0     26   -> nwk_ExtPANIDValid
        0     26   -> osal_memset
        0     26   -> osal_set_event
        0     26   -> sAddrExtCpy
      2      0   ZDO_NetworkStatusCB
        2      0   -> NLME_GetShortAddr
      3      1   ZDO_PermitJoinCB
      0      0   ZDO_PollConfirmCB
      2      0   ZDO_RegisterForZdoCB
      1     14   ZDO_SrcRtgIndCB
      0      9   ZDO_StartRouterConfirmCB
        0      9   -> ZDApp_ChangeState
        0      9   -> osal_set_event
      0      9   ZDO_SyncIndicationCB
        0      9   -> bdb_isDeviceNonFactoryNew
        0      9   -> bdb_nwkAssocAttemt
        0      9   -> bdb_parentLost
        0      9   -> nwkNeighborInitTable
      0      0   ZDO_UpdateDeviceIndication
      1     18   ZDO_beaconNotifyIndCB
        0     18   -> bdb_isDeviceNonFactoryNew
        0     18   -> osal_mem_alloc
        0     18   -> osal_memset
        0     18   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
       4  ?<Initializer for ZDApp_SavedPollRate>
       7  ?<Initializer for ZDApp_epDesc>
       1  ?<Initializer for continueJoining>
       1  ?<Initializer for prevDevState>
       3  ??Subroutine33_0
       5  ??Subroutine34_0
       3  ??Subroutine35_0
       5  ??Subroutine36_0
       8  ??Subroutine37_0
       7  ??Subroutine38_0
       2  ??Subroutine39_0
       6  ??Subroutine40_0
       6  ??Subroutine41_0
       6  ??Subroutine42_0
       6  ??Subroutine43_0
       4  ??Subroutine44_0
       3  ??Subroutine45_0
       5  ??Subroutine46_0
       6  ??Subroutine47_0
       2  ?Subroutine0
       5  ?Subroutine1
      12  ?Subroutine10
       6  ?Subroutine11
      10  ?Subroutine12
       4  ?Subroutine13
       9  ?Subroutine14
      12  ?Subroutine15
       3  ?Subroutine16
       5  ?Subroutine17
      14  ?Subroutine18
       6  ?Subroutine19
       5  ?Subroutine2
       4  ?Subroutine20
       9  ?Subroutine21
      11  ?Subroutine22
       5  ?Subroutine23
      14  ?Subroutine24
       5  ?Subroutine25
       8  ?Subroutine26
      10  ?Subroutine27
      10  ?Subroutine28
       6  ?Subroutine29
       3  ?Subroutine3
       1  ?Subroutine30
      15  ?Subroutine31
      11  ?Subroutine32
      35  ?Subroutine4
       2  ?Subroutine5
       2  ?Subroutine6
       5  ?Subroutine7
       8  ?Subroutine8
      21  ?Subroutine9
      28  AddrMgrWriteNVRequest
       6  AddrMgrWriteNVRequest::?relay
       1  FrameCounterUpdated
       1  MatchRsps
      24  ZDAppCheckForHoldKey
       6  ZDAppCheckForHoldKey::?relay
      81  ZDAppDetermineDeviceType
       6  ZDAppDetermineDeviceType::?relay
       9  ZDAppNwkAddr
       1  ZDAppTaskID
     112  ZDApp_AnnounceNewAddress
       6  ZDApp_AnnounceNewAddress::?relay
       2  ZDApp_AutoFindMode_epDesc
      11  ZDApp_ChangeMatchDescRespPermission
       6  ZDApp_ChangeMatchDescRespPermission::?relay
      31  ZDApp_ChangeState
       6  ZDApp_ChangeState::?relay
      10  ZDApp_CoordStartPANIDConflictCB
       6  ZDApp_CoordStartPANIDConflictCB::?relay
      62  ZDApp_DeviceAuthEvt
       6  ZDApp_DeviceAuthEvt::?relay
      81  ZDApp_DeviceConfigured
       6  ZDApp_DeviceConfigured::?relay
     129  ZDApp_ForceConcentratorChange
       6  ZDApp_ForceConcentratorChange::?relay
      77  ZDApp_InMsgCB
       6  ZDApp_InMsgCB::?relay
      50  ZDApp_Init
       6  ZDApp_Init::?relay
     111  ZDApp_InitUserDesc
       6  ZDApp_InitUserDesc::?relay
      26  ZDApp_InitZdoCBFunc
       6  ZDApp_InitZdoCBFunc::?relay
      73  ZDApp_JoinReq
       6  ZDApp_JoinReq::?relay
       1  ZDApp_LeaveCtrl
      15  ZDApp_LeaveCtrlBypass
       6  ZDApp_LeaveCtrlBypass::?relay
      75  ZDApp_LeaveCtrlInit
       6  ZDApp_LeaveCtrlInit::?relay
      13  ZDApp_LeaveCtrlReset
       6  ZDApp_LeaveCtrlReset::?relay
      22  ZDApp_LeaveCtrlSet
       6  ZDApp_LeaveCtrlSet::?relay
      47  ZDApp_LeaveCtrlStartup
       6  ZDApp_LeaveCtrlStartup::?relay
     143  ZDApp_LeaveReset
       6  ZDApp_LeaveReset::?relay
     122  ZDApp_LeaveUpdate
       6  ZDApp_LeaveUpdate::?relay
      19  ZDApp_NVUpdate
       6  ZDApp_NVUpdate::?relay
      11  ZDApp_NetworkDiscoveryReq
       6  ZDApp_NetworkDiscoveryReq::?relay
      57  ZDApp_NetworkInit
       6  ZDApp_NetworkInit::?relay
     146  ZDApp_NetworkStartEvt
       6  ZDApp_NetworkStartEvt::?relay
       2  ZDApp_NewDeviceList
      45  ZDApp_NodeProfileSync
       6  ZDApp_NodeProfileSync::?relay
     276  ZDApp_NwkDescListProcessing
       6  ZDApp_NwkDescListProcessing::?relay
      28  ZDApp_NwkStateUpdateCB
       6  ZDApp_NwkStateUpdateCB::?relay
     106  ZDApp_ProcessMsgCBs
       6  ZDApp_ProcessMsgCBs::?relay
     479  ZDApp_ProcessNetworkJoin
       6  ZDApp_ProcessNetworkJoin::?relay
     143  ZDApp_ProcessOSALMsg
       6  ZDApp_ProcessOSALMsg::?relay
      92  ZDApp_ProcessSecEvent
       6  ZDApp_ProcessSecEvent::?relay
      56  ZDApp_ProcessSecMsg
       6  ZDApp_ProcessSecMsg::?relay
      28  ZDApp_ReadNetworkRestoreState
       6  ZDApp_ReadNetworkRestoreState::?relay
      55  ZDApp_RegisterCBs
       6  ZDApp_RegisterCBs::?relay
      66  ZDApp_ResetNwkKey
       6  ZDApp_ResetNwkKey::?relay
      31  ZDApp_ResetTimerCancel
       6  ZDApp_ResetTimerCancel::?relay
      57  ZDApp_ResetTimerStart
       6  ZDApp_ResetTimerStart::?relay
      83  ZDApp_RestoreNetworkState
       6  ZDApp_RestoreNetworkState::?relay
     140  ZDApp_RestoreNwkKey
       6  ZDApp_RestoreNwkKey::?relay
     227  ZDApp_RestoreNwkSecMaterial
       6  ZDApp_RestoreNwkSecMaterial::?relay
      19  ZDApp_SaveNetworkStateEvt
       6  ZDApp_SaveNetworkStateEvt::?relay
     324  ZDApp_SaveNwkKey
       6  ZDApp_SaveNwkKey::?relay
       4  ZDApp_SavedPollRate
     120  ZDApp_SecInit
       6  ZDApp_SecInit::?relay
      22  ZDApp_SendEventMsg
       6  ZDApp_SendEventMsg::?relay
      91  ZDApp_SendMsg
       6  ZDApp_SendMsg::?relay
     115  ZDApp_SendParentAnnce
       6  ZDApp_SendParentAnnce::?relay
      51  ZDApp_SetParentAnnceTimer
       6  ZDApp_SetParentAnnceTimer::?relay
      18  ZDApp_SetRejoinBackoffDuration
       6  ZDApp_SetRejoinBackoffDuration::?relay
      16  ZDApp_SetRejoinScanDuration
       6  ZDApp_SetRejoinScanDuration::?relay
      39  ZDApp_StartJoiningCycle
       6  ZDApp_StartJoiningCycle::?relay
      36  ZDApp_StopJoiningCycle
       6  ZDApp_StopJoiningCycle::?relay
     223  ZDApp_StoreNwkSecMaterial
       6  ZDApp_StoreNwkSecMaterial::?relay
       7  ZDApp_epDesc
     266  ZDApp_event_loop
       6  ZDApp_event_loop::?relay
     370  ZDOInitDeviceEx
       6  ZDOInitDeviceEx::?relay
     110  ZDO_AddrChangeIndicationCB
       6  ZDO_AddrChangeIndicationCB::?relay
      48  ZDO_ConcentratorIndicationCB
       6  ZDO_ConcentratorIndicationCB::?relay
      27  ZDO_DeregisterForZdoCB
       6  ZDO_DeregisterForZdoCB::?relay
     209  ZDO_JoinConfirmCB
       6  ZDO_JoinConfirmCB::?relay
     220  ZDO_JoinIndicationCB
       6  ZDO_JoinIndicationCB::?relay
      62  ZDO_LeaveCnf
       6  ZDO_LeaveCnf::?relay
     240  ZDO_LeaveInd
       6  ZDO_LeaveInd::?relay
      10  ZDO_ManytoOneFailureIndicationCB
       6  ZDO_ManytoOneFailureIndicationCB::?relay
      64  ZDO_NetworkDiscoveryConfirmCB
       6  ZDO_NetworkDiscoveryConfirmCB::?relay
     264  ZDO_NetworkFormationConfirmCB
       6  ZDO_NetworkFormationConfirmCB::?relay
      10  ZDO_NetworkStatusCB
       6  ZDO_NetworkStatusCB::?relay
      37  ZDO_PermitJoinCB
       6  ZDO_PermitJoinCB::?relay
       3  ZDO_PollConfirmCB
       6  ZDO_PollConfirmCB::?relay
      27  ZDO_RegisterForZdoCB
       6  ZDO_RegisterForZdoCB::?relay
      51  ZDO_SrcRtgIndCB
       6  ZDO_SrcRtgIndCB::?relay
      38  ZDO_StartRouterConfirmCB
       6  ZDO_StartRouterConfirmCB::?relay
      40  ZDO_SyncIndicationCB
       6  ZDO_SyncIndicationCB::?relay
       5  ZDO_UpdateDeviceIndication
       6  ZDO_UpdateDeviceIndication::?relay
       8  ZDO_UseExtendedPANID
     624  ZDO_beaconNotifyIndCB
       6  ZDO_beaconNotifyIndCB::?relay
       4  __Constant_0
       4  __Constant_258
       4  __Constant_2710
       4  __Constant_4e2
       4  __Constant_64
       1  _tmpRejoinState
       1  continueJoining
       1  devStartMode
       1  devState
       1  nwkStatus
       1  prevDevState
       1  retryCnt
       4  runtimeChannel
       1  zdappHoldKeys
       1  zdappMgmtNwkDiscReqInProgress
       9  zdappMgmtNwkDiscRspAddr
       1  zdappMgmtNwkDiscRspTransSeq
       1  zdappMgmtNwkDiscStartIndex
       1  zdappMgmtSavedNwkState
      18  zdoCBFunc

 
 7 640 bytes in segment BANKED_CODE
   450 bytes in segment BANK_RELAYS
    13 bytes in segment XDATA_I
    13 bytes in segment XDATA_ID
    36 bytes in segment XDATA_ROM_C
    66 bytes in segment XDATA_Z
 
 8 103 bytes of CODE  memory
    16 bytes of CONST memory (+ 20 bytes shared)
    79 bytes of XDATA memory

Errors: none
Warnings: none
