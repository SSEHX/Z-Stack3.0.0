///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               03/Nov/2017  19:05:51
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack 3.0.0\Components\stack\bdb\bdb.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
//        Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        "C:\Texas Instruments\Z-Stack 3.0.0\Components\stack\bdb\bdb.c" -D
//        SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xPOWER_SAVING
//        -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
//        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
//        LEGACY_LCD_DEBUG -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
//        ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES -D
//        ZCL_GROUPS -lC "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List"
//        -lA "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
//        Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\" -I
//        "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List\bdb.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME bdb

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?UL_GT
        EXTERN ?XLOAD_R0123
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN ?XSTORE_R0123
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??bdb_AddRespondentNode::?relay`
        FUNCTION `??bdb_AddRespondentNode::?relay`,0203H
        PUBLIC `??bdb_CBKETCLinkKeyExchangeAttempt::?relay`
        FUNCTION `??bdb_CBKETCLinkKeyExchangeAttempt::?relay`,0203H
        PUBLIC `??bdb_ClearNetworkParams::?relay`
        FUNCTION `??bdb_ClearNetworkParams::?relay`,0203H
        PUBLIC `??bdb_CreateRespondentList::?relay`
        FUNCTION `??bdb_CreateRespondentList::?relay`,0203H
        PUBLIC `??bdb_GenerateInstallCodeCRC::?relay`
        FUNCTION `??bdb_GenerateInstallCodeCRC::?relay`,0203H
        PUBLIC `??bdb_Init::?relay`
        FUNCTION `??bdb_Init::?relay`,0203H
        PUBLIC `??bdb_NetworkRestoredResumeState::?relay`
        FUNCTION `??bdb_NetworkRestoredResumeState::?relay`,0203H
        PUBLIC `??bdb_NotifyCommissioningModeStart::?relay`
        FUNCTION `??bdb_NotifyCommissioningModeStart::?relay`,0203H
        FUNCTION `??bdb_ProcessOSALMsg::?relay`,0203H
        PUBLIC `??bdb_RegisterCBKETCLinkKeyExchangeCB::?relay`
        FUNCTION `??bdb_RegisterCBKETCLinkKeyExchangeCB::?relay`,0203H
        PUBLIC `??bdb_RegisterCommissioningStatusCB::?relay`
        FUNCTION `??bdb_RegisterCommissioningStatusCB::?relay`,0203H
        PUBLIC `??bdb_RegisterForFilterNwkDescCB::?relay`
        FUNCTION `??bdb_RegisterForFilterNwkDescCB::?relay`,0203H
        PUBLIC `??bdb_RegisterSimpleDescriptor::?relay`
        FUNCTION `??bdb_RegisterSimpleDescriptor::?relay`,0203H
        PUBLIC `??bdb_SendMsg::?relay`
        FUNCTION `??bdb_SendMsg::?relay`,0203H
        PUBLIC `??bdb_StartCommissioning::?relay`
        FUNCTION `??bdb_StartCommissioning::?relay`,0203H
        PUBLIC `??bdb_ZclIdentifyCmdInd::?relay`
        FUNCTION `??bdb_ZclIdentifyCmdInd::?relay`,0203H
        PUBLIC `??bdb_ZedAttemptRecoverNwk::?relay`
        FUNCTION `??bdb_ZedAttemptRecoverNwk::?relay`,0203H
        PUBLIC `??bdb_addInstallCode::?relay`
        FUNCTION `??bdb_addInstallCode::?relay`,0203H
        PUBLIC `??bdb_calculateCCITT_CRC::?relay`
        FUNCTION `??bdb_calculateCCITT_CRC::?relay`,0203H
        PUBLIC `??bdb_crcBitByBitFast::?relay`
        FUNCTION `??bdb_crcBitByBitFast::?relay`,0203H
        PUBLIC `??bdb_crcInit::?relay`
        FUNCTION `??bdb_crcInit::?relay`,0203H
        PUBLIC `??bdb_crcReflect::?relay`
        FUNCTION `??bdb_crcReflect::?relay`,0203H
        PUBLIC `??bdb_event_loop::?relay`
        FUNCTION `??bdb_event_loop::?relay`,0203H
        PUBLIC `??bdb_filterNwkDisc::?relay`
        FUNCTION `??bdb_filterNwkDisc::?relay`,0203H
        PUBLIC `??bdb_getZCLFrameCounter::?relay`
        FUNCTION `??bdb_getZCLFrameCounter::?relay`,0203H
        PUBLIC `??bdb_isDeviceNonFactoryNew::?relay`
        FUNCTION `??bdb_isDeviceNonFactoryNew::?relay`,0203H
        PUBLIC `??bdb_joinProcess::?relay`
        FUNCTION `??bdb_joinProcess::?relay`,0203H
        PUBLIC `??bdb_nwkAssocAttemt::?relay`
        FUNCTION `??bdb_nwkAssocAttemt::?relay`,0203H
        PUBLIC `??bdb_nwkDescFree::?relay`
        FUNCTION `??bdb_nwkDescFree::?relay`,0203H
        PUBLIC `??bdb_nwkDiscoveryAttempt::?relay`
        FUNCTION `??bdb_nwkDiscoveryAttempt::?relay`,0203H
        PUBLIC `??bdb_nwkFormationAttempt::?relay`
        FUNCTION `??bdb_nwkFormationAttempt::?relay`,0203H
        FUNCTION `??bdb_nwkJoiningFormation::?relay`,0203H
        FUNCTION `??bdb_nwkSteeringDeviceOnNwk::?relay`,0203H
        PUBLIC `??bdb_parentLost::?relay`
        FUNCTION `??bdb_parentLost::?relay`,0203H
        PUBLIC `??bdb_rejoinNwk::?relay`
        FUNCTION `??bdb_rejoinNwk::?relay`,0203H
        PUBLIC `??bdb_reportCommissioningState::?relay`
        FUNCTION `??bdb_reportCommissioningState::?relay`,0203H
        PUBLIC `??bdb_resetLocalAction::?relay`
        FUNCTION `??bdb_resetLocalAction::?relay`,0203H
        PUBLIC `??bdb_setActiveCentralizedLinkKey::?relay`
        FUNCTION `??bdb_setActiveCentralizedLinkKey::?relay`,0203H
        PUBLIC `??bdb_setChannel::?relay`
        FUNCTION `??bdb_setChannel::?relay`,0203H
        PUBLIC `??bdb_setChannelAttribute::?relay`
        FUNCTION `??bdb_setChannelAttribute::?relay`,0203H
        PUBLIC `??bdb_setCommissioningGroupID::?relay`
        FUNCTION `??bdb_setCommissioningGroupID::?relay`,0203H
        PUBLIC `??bdb_setFN::?relay`
        FUNCTION `??bdb_setFN::?relay`,0203H
        PUBLIC `??bdb_setNodeIsOnANetwork::?relay`
        FUNCTION `??bdb_setNodeIsOnANetwork::?relay`,0203H
        PUBLIC `??bdb_setNodeJoinLinkKeyType::?relay`
        FUNCTION `??bdb_setNodeJoinLinkKeyType::?relay`,0203H
        FUNCTION `??bdb_startResumeCommissioningProcess::?relay`,0203H
        PUBLIC `??bdb_tcLinkKeyExchangeAttempt::?relay`
        FUNCTION `??bdb_tcLinkKeyExchangeAttempt::?relay`,0203H
        PUBLIC `??bdb_touchlinkSendFNReset::?relay`
        FUNCTION `??bdb_touchlinkSendFNReset::?relay`,0203H
        FUNCTION `??bdb_tryNwkAssoc::?relay`,0203H
        PUBLIC `??bdb_zclRespondentListClean::?relay`
        FUNCTION `??bdb_zclRespondentListClean::?relay`,0203H
        PUBWEAK __Constant_0
        PUBWEAK __Constant_10
        PUBWEAK __Constant_1388
        PUBWEAK __Constant_32
        PUBWEAK __Constant_3a98
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_bb8
        PUBWEAK __Constant_c8
        PUBLIC bdbAttributes
        PUBLIC bdbCommissioningProcedureState
        PUBLIC bdb_AddRespondentNode
        FUNCTION bdb_AddRespondentNode,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bdb_CBKETCLinkKeyExchangeAttempt
        FUNCTION bdb_CBKETCLinkKeyExchangeAttempt,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bdb_ClearNetworkParams
        FUNCTION bdb_ClearNetworkParams,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC bdb_CreateRespondentList
        FUNCTION bdb_CreateRespondentList,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bdb_CurrEpDescriptorList
        PUBLIC bdb_FB_InitiatorCurrentCyclesNumber
        PUBLIC bdb_GenerateInstallCodeCRC
        FUNCTION bdb_GenerateInstallCodeCRC,021203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 6, STACK
        PUBLIC bdb_HeadEpDescriptorList
        PUBLIC bdb_Init
        FUNCTION bdb_Init,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_NetworkRestoredResumeState
        FUNCTION bdb_NetworkRestoredResumeState,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        PUBLIC bdb_NotifyCommissioningModeStart
        FUNCTION bdb_NotifyCommissioningModeStart,0a1203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        FUNCTION bdb_ProcessOSALMsg,0a1203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 40, STACK
        PUBLIC bdb_RegisterCBKETCLinkKeyExchangeCB
        FUNCTION bdb_RegisterCBKETCLinkKeyExchangeCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_RegisterCommissioningStatusCB
        FUNCTION bdb_RegisterCommissioningStatusCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_RegisterForFilterNwkDescCB
        FUNCTION bdb_RegisterForFilterNwkDescCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_RegisterSimpleDescriptor
        FUNCTION bdb_RegisterSimpleDescriptor,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bdb_SendMsg
        FUNCTION bdb_SendMsg,0a1203H
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC bdb_StartCommissioning
        FUNCTION bdb_StartCommissioning,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        PUBLIC bdb_TaskID
        PUBLIC bdb_ZclIdentifyCmdInd
        FUNCTION bdb_ZclIdentifyCmdInd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC bdb_ZclTransactionSequenceNumber
        PUBLIC bdb_ZedAttemptRecoverNwk
        FUNCTION bdb_ZedAttemptRecoverNwk,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_addInstallCode
        FUNCTION bdb_addInstallCode,0a1203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 34, STACK
        PUBLIC bdb_calculateCCITT_CRC
        FUNCTION bdb_calculateCCITT_CRC,0a1203H
        ARGFRAME XSTACK, 6, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC bdb_crcBitByBitFast
        FUNCTION bdb_crcBitByBitFast,0a1203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        PUBLIC bdb_crcInit
        FUNCTION bdb_crcInit,0203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bdb_crcReflect
        FUNCTION bdb_crcReflect,080203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bdb_event_loop
        FUNCTION bdb_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC bdb_filterNwkDisc
        FUNCTION bdb_filterNwkDisc,0a1203H
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC bdb_getZCLFrameCounter
        FUNCTION bdb_getZCLFrameCounter,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_initialization
        PUBLIC bdb_isDeviceNonFactoryNew
        FUNCTION bdb_isDeviceNonFactoryNew,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_joinProcess
        FUNCTION bdb_joinProcess,0a1203H
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bdb_nwkAssocAttemt
        FUNCTION bdb_nwkAssocAttemt,0a1203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bdb_nwkDescFree
        FUNCTION bdb_nwkDescFree,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_nwkDiscoveryAttempt
        FUNCTION bdb_nwkDiscoveryAttempt,0a1203H
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bdb_nwkFormationAttempt
        FUNCTION bdb_nwkFormationAttempt,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION bdb_nwkJoiningFormation,0a1203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        FUNCTION bdb_nwkSteeringDeviceOnNwk,021203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bdb_parentLost
        FUNCTION bdb_parentLost,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_rejoinNwk
        FUNCTION bdb_rejoinNwk,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bdb_reportCommissioningState
        FUNCTION bdb_reportCommissioningState,0a1203H
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC bdb_resetLocalAction
        FUNCTION bdb_resetLocalAction,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 5, STACK
        PUBLIC bdb_setActiveCentralizedLinkKey
        FUNCTION bdb_setActiveCentralizedLinkKey,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC bdb_setChannel
        FUNCTION bdb_setChannel,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC bdb_setChannelAttribute
        FUNCTION bdb_setChannelAttribute,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bdb_setCommissioningGroupID
        FUNCTION bdb_setCommissioningGroupID,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_setFN
        FUNCTION bdb_setFN,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_setNodeIsOnANetwork
        FUNCTION bdb_setNodeIsOnANetwork,0a1203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bdb_setNodeJoinLinkKeyType
        FUNCTION bdb_setNodeJoinLinkKeyType,0203H
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION bdb_startResumeCommissioningProcess,0a1203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 25, STACK
        PUBLIC bdb_tcLinkKeyExchangeAttempt
        FUNCTION bdb_tcLinkKeyExchangeAttempt,0a1203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC bdb_touchlinkSendFNReset
        FUNCTION bdb_touchlinkSendFNReset,0203H
        ARGFRAME XSTACK, 0, STACK
        FUNCTION bdb_tryNwkAssoc,0a1203H
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bdb_zclRespondentListClean
        FUNCTION bdb_zclRespondentListClean,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC pRespondentCurr
        PUBLIC pRespondentHead
        PUBLIC pRespondentNext
        PUBLIC touchLinkTargetEnabled
        PUBLIC vDoPrimaryScan
        PUBLIC zgBdbInstallCodeCRC
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
APSME_AddTCLinkKey  SYMBOL "APSME_AddTCLinkKey"
`??APSME_AddTCLinkKey::?relay` SYMBOL "?relay", APSME_AddTCLinkKey
APSME_GetRequest    SYMBOL "APSME_GetRequest"
`??APSME_GetRequest::?relay` SYMBOL "?relay", APSME_GetRequest
APSME_IsDistributedSecurity SYMBOL "APSME_IsDistributedSecurity"
`??APSME_IsDistributedSecurity::?relay` SYMBOL "?relay", APSME_IsDistributedSecurity
APSME_RequestKeyReq SYMBOL "APSME_RequestKeyReq"
`??APSME_RequestKeyReq::?relay` SYMBOL "?relay", APSME_RequestKeyReq
APSME_VerifyKeyReq  SYMBOL "APSME_VerifyKeyReq"
`??APSME_VerifyKeyReq::?relay` SYMBOL "?relay", APSME_VerifyKeyReq
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_JoinRequest    SYMBOL "NLME_JoinRequest"
`??NLME_JoinRequest::?relay` SYMBOL "?relay", NLME_JoinRequest
NLME_LeaveReq       SYMBOL "NLME_LeaveReq"
`??NLME_LeaveReq::?relay` SYMBOL "?relay", NLME_LeaveReq
NLME_NwkDiscTerm    SYMBOL "NLME_NwkDiscTerm"
`??NLME_NwkDiscTerm::?relay` SYMBOL "?relay", NLME_NwkDiscTerm
NLME_OrphanStateSet SYMBOL "NLME_OrphanStateSet"
`??NLME_OrphanStateSet::?relay` SYMBOL "?relay", NLME_OrphanStateSet
NLME_ReJoinRequest  SYMBOL "NLME_ReJoinRequest"
`??NLME_ReJoinRequest::?relay` SYMBOL "?relay", NLME_ReJoinRequest
NLME_ReJoinRequestUnsecure SYMBOL "NLME_ReJoinRequestUnsecure"
`??NLME_ReJoinRequestUnsecure::?relay` SYMBOL "?relay", NLME_ReJoinRequestUnsecure
NLME_ResetRequest   SYMBOL "NLME_ResetRequest"
`??NLME_ResetRequest::?relay` SYMBOL "?relay", NLME_ResetRequest
NLME_SetPollRate    SYMBOL "NLME_SetPollRate"
`??NLME_SetPollRate::?relay` SYMBOL "?relay", NLME_SetPollRate
NLME_SetQueuedPollRate SYMBOL "NLME_SetQueuedPollRate"
`??NLME_SetQueuedPollRate::?relay` SYMBOL "?relay", NLME_SetQueuedPollRate
NLME_SetResponseRate SYMBOL "NLME_SetResponseRate"
`??NLME_SetResponseRate::?relay` SYMBOL "?relay", NLME_SetResponseRate
ZDApp_ChangeState   SYMBOL "ZDApp_ChangeState"
`??ZDApp_ChangeState::?relay` SYMBOL "?relay", ZDApp_ChangeState
ZDApp_NetworkInit   SYMBOL "ZDApp_NetworkInit"
`??ZDApp_NetworkInit::?relay` SYMBOL "?relay", ZDApp_NetworkInit
ZDApp_NodeProfileSync SYMBOL "ZDApp_NodeProfileSync"
`??ZDApp_NodeProfileSync::?relay` SYMBOL "?relay", ZDApp_NodeProfileSync
ZDApp_ResetTimerStart SYMBOL "ZDApp_ResetTimerStart"
`??ZDApp_ResetTimerStart::?relay` SYMBOL "?relay", ZDApp_ResetTimerStart
ZDApp_RestoreNwkKey SYMBOL "ZDApp_RestoreNwkKey"
`??ZDApp_RestoreNwkKey::?relay` SYMBOL "?relay", ZDApp_RestoreNwkKey
ZDApp_RestoreNwkSecMaterial SYMBOL "ZDApp_RestoreNwkSecMaterial"
`??ZDApp_RestoreNwkSecMaterial::?relay` SYMBOL "?relay", ZDApp_RestoreNwkSecMaterial
ZDOInitDeviceEx     SYMBOL "ZDOInitDeviceEx"
`??ZDOInitDeviceEx::?relay` SYMBOL "?relay", ZDOInitDeviceEx
ZDP_MgmtPermitJoinReq SYMBOL "ZDP_MgmtPermitJoinReq"
`??ZDP_MgmtPermitJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtPermitJoinReq
ZDP_NWKAddrOfInterestReq SYMBOL "ZDP_NWKAddrOfInterestReq"
`??ZDP_NWKAddrOfInterestReq::?relay` SYMBOL "?relay", ZDP_NWKAddrOfInterestReq
ZMacSetReq          SYMBOL "ZMacSetReq"
`??ZMacSetReq::?relay` SYMBOL "?relay", ZMacSetReq
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
bdb_BindIfMatch     SYMBOL "bdb_BindIfMatch"
`??bdb_BindIfMatch::?relay` SYMBOL "?relay", bdb_BindIfMatch
bdb_SendIdentifyQuery SYMBOL "bdb_SendIdentifyQuery"
`??bdb_SendIdentifyQuery::?relay` SYMBOL "?relay", bdb_SendIdentifyQuery
bdb_SendSimpleDescReq SYMBOL "bdb_SendSimpleDescReq"
`??bdb_SendSimpleDescReq::?relay` SYMBOL "?relay", bdb_SendSimpleDescReq
bdb_exitFindingBindingWStatus SYMBOL "bdb_exitFindingBindingWStatus"
`??bdb_exitFindingBindingWStatus::?relay` SYMBOL "?relay", bdb_exitFindingBindingWStatus
bdb_getRespondentRetry SYMBOL "bdb_getRespondentRetry"
`??bdb_getRespondentRetry::?relay` SYMBOL "?relay", bdb_getRespondentRetry
bdb_setEpDescListToActiveEndpoint SYMBOL "bdb_setEpDescListToActiveEndpoint"
`??bdb_setEpDescListToActiveEndpoint::?relay` SYMBOL "?relay", bdb_setEpDescListToActiveEndpoint
nwkNeighborInitTable SYMBOL "nwkNeighborInitTable"
`??nwkNeighborInitTable::?relay` SYMBOL "?relay", nwkNeighborInitTable
nwk_ExtPANIDValid   SYMBOL "nwk_ExtPANIDValid"
`??nwk_ExtPANIDValid::?relay` SYMBOL "?relay", nwk_ExtPANIDValid
nwk_desc_list_free  SYMBOL "nwk_desc_list_free"
`??nwk_desc_list_free::?relay` SYMBOL "?relay", nwk_desc_list_free
nwk_desc_list_release SYMBOL "nwk_desc_list_release"
`??nwk_desc_list_release::?relay` SYMBOL "?relay", nwk_desc_list_release
nwk_getNwkDescList  SYMBOL "nwk_getNwkDescList"
`??nwk_getNwkDescList::?relay` SYMBOL "?relay", nwk_getNwkDescList
nwk_setStateIdle    SYMBOL "nwk_setStateIdle"
`??nwk_setStateIdle::?relay` SYMBOL "?relay", nwk_setStateIdle
osal_build_uint16   SYMBOL "osal_build_uint16"
`??osal_build_uint16::?relay` SYMBOL "?relay", osal_build_uint16
osal_get_timeoutEx  SYMBOL "osal_get_timeoutEx"
`??osal_get_timeoutEx::?relay` SYMBOL "?relay", osal_get_timeoutEx
osal_isbufset       SYMBOL "osal_isbufset"
`??osal_isbufset::?relay` SYMBOL "?relay", osal_isbufset
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
sAddrExtCmp         SYMBOL "sAddrExtCmp"
`??sAddrExtCmp::?relay` SYMBOL "?relay", sAddrExtCmp
sspMMOHash          SYMBOL "sspMMOHash"
`??sspMMOHash::?relay` SYMBOL "?relay", sspMMOHash
zclFindAttrRec      SYMBOL "zclFindAttrRec"
`??zclFindAttrRec::?relay` SYMBOL "?relay", zclFindAttrRec
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
bdb_AddRespondentNode SYMBOL "bdb_AddRespondentNode"
`??bdb_AddRespondentNode::?relay` SYMBOL "?relay", bdb_AddRespondentNode
bdb_CBKETCLinkKeyExchangeAttempt SYMBOL "bdb_CBKETCLinkKeyExchangeAttempt"
`??bdb_CBKETCLinkKeyExchangeAttempt::?relay` SYMBOL "?relay", bdb_CBKETCLinkKeyExchangeAttempt
bdb_ClearNetworkParams SYMBOL "bdb_ClearNetworkParams"
`??bdb_ClearNetworkParams::?relay` SYMBOL "?relay", bdb_ClearNetworkParams
bdb_CreateRespondentList SYMBOL "bdb_CreateRespondentList"
`??bdb_CreateRespondentList::?relay` SYMBOL "?relay", bdb_CreateRespondentList
bdb_GenerateInstallCodeCRC SYMBOL "bdb_GenerateInstallCodeCRC"
`??bdb_GenerateInstallCodeCRC::?relay` SYMBOL "?relay", bdb_GenerateInstallCodeCRC
bdb_Init            SYMBOL "bdb_Init"
`??bdb_Init::?relay` SYMBOL "?relay", bdb_Init
bdb_NetworkRestoredResumeState SYMBOL "bdb_NetworkRestoredResumeState"
`??bdb_NetworkRestoredResumeState::?relay` SYMBOL "?relay", bdb_NetworkRestoredResumeState
bdb_NotifyCommissioningModeStart SYMBOL "bdb_NotifyCommissioningModeStart"
`??bdb_NotifyCommissioningModeStart::?relay` SYMBOL "?relay", bdb_NotifyCommissioningModeStart
bdb_RegisterCBKETCLinkKeyExchangeCB SYMBOL "bdb_RegisterCBKETCLinkKeyExchangeCB"
`??bdb_RegisterCBKETCLinkKeyExchangeCB::?relay` SYMBOL "?relay", bdb_RegisterCBKETCLinkKeyExchangeCB
bdb_RegisterCommissioningStatusCB SYMBOL "bdb_RegisterCommissioningStatusCB"
`??bdb_RegisterCommissioningStatusCB::?relay` SYMBOL "?relay", bdb_RegisterCommissioningStatusCB
bdb_RegisterForFilterNwkDescCB SYMBOL "bdb_RegisterForFilterNwkDescCB"
`??bdb_RegisterForFilterNwkDescCB::?relay` SYMBOL "?relay", bdb_RegisterForFilterNwkDescCB
bdb_RegisterSimpleDescriptor SYMBOL "bdb_RegisterSimpleDescriptor"
`??bdb_RegisterSimpleDescriptor::?relay` SYMBOL "?relay", bdb_RegisterSimpleDescriptor
bdb_SendMsg         SYMBOL "bdb_SendMsg"
`??bdb_SendMsg::?relay` SYMBOL "?relay", bdb_SendMsg
bdb_StartCommissioning SYMBOL "bdb_StartCommissioning"
`??bdb_StartCommissioning::?relay` SYMBOL "?relay", bdb_StartCommissioning
bdb_ZclIdentifyCmdInd SYMBOL "bdb_ZclIdentifyCmdInd"
`??bdb_ZclIdentifyCmdInd::?relay` SYMBOL "?relay", bdb_ZclIdentifyCmdInd
bdb_ZedAttemptRecoverNwk SYMBOL "bdb_ZedAttemptRecoverNwk"
`??bdb_ZedAttemptRecoverNwk::?relay` SYMBOL "?relay", bdb_ZedAttemptRecoverNwk
bdb_addInstallCode  SYMBOL "bdb_addInstallCode"
`??bdb_addInstallCode::?relay` SYMBOL "?relay", bdb_addInstallCode
bdb_calculateCCITT_CRC SYMBOL "bdb_calculateCCITT_CRC"
`??bdb_calculateCCITT_CRC::?relay` SYMBOL "?relay", bdb_calculateCCITT_CRC
bdb_crcBitByBitFast SYMBOL "bdb_crcBitByBitFast"
`??bdb_crcBitByBitFast::?relay` SYMBOL "?relay", bdb_crcBitByBitFast
bdb_crcInit         SYMBOL "bdb_crcInit"
`??bdb_crcInit::?relay` SYMBOL "?relay", bdb_crcInit
bdb_crcReflect      SYMBOL "bdb_crcReflect"
`??bdb_crcReflect::?relay` SYMBOL "?relay", bdb_crcReflect
bdb_event_loop      SYMBOL "bdb_event_loop"
`??bdb_event_loop::?relay` SYMBOL "?relay", bdb_event_loop
bdb_filterNwkDisc   SYMBOL "bdb_filterNwkDisc"
`??bdb_filterNwkDisc::?relay` SYMBOL "?relay", bdb_filterNwkDisc
bdb_getZCLFrameCounter SYMBOL "bdb_getZCLFrameCounter"
`??bdb_getZCLFrameCounter::?relay` SYMBOL "?relay", bdb_getZCLFrameCounter
bdb_isDeviceNonFactoryNew SYMBOL "bdb_isDeviceNonFactoryNew"
`??bdb_isDeviceNonFactoryNew::?relay` SYMBOL "?relay", bdb_isDeviceNonFactoryNew
bdb_joinProcess     SYMBOL "bdb_joinProcess"
`??bdb_joinProcess::?relay` SYMBOL "?relay", bdb_joinProcess
bdb_nwkAssocAttemt  SYMBOL "bdb_nwkAssocAttemt"
`??bdb_nwkAssocAttemt::?relay` SYMBOL "?relay", bdb_nwkAssocAttemt
bdb_nwkDescFree     SYMBOL "bdb_nwkDescFree"
`??bdb_nwkDescFree::?relay` SYMBOL "?relay", bdb_nwkDescFree
bdb_nwkDiscoveryAttempt SYMBOL "bdb_nwkDiscoveryAttempt"
`??bdb_nwkDiscoveryAttempt::?relay` SYMBOL "?relay", bdb_nwkDiscoveryAttempt
bdb_nwkFormationAttempt SYMBOL "bdb_nwkFormationAttempt"
`??bdb_nwkFormationAttempt::?relay` SYMBOL "?relay", bdb_nwkFormationAttempt
bdb_parentLost      SYMBOL "bdb_parentLost"
`??bdb_parentLost::?relay` SYMBOL "?relay", bdb_parentLost
bdb_rejoinNwk       SYMBOL "bdb_rejoinNwk"
`??bdb_rejoinNwk::?relay` SYMBOL "?relay", bdb_rejoinNwk
bdb_reportCommissioningState SYMBOL "bdb_reportCommissioningState"
`??bdb_reportCommissioningState::?relay` SYMBOL "?relay", bdb_reportCommissioningState
bdb_resetLocalAction SYMBOL "bdb_resetLocalAction"
`??bdb_resetLocalAction::?relay` SYMBOL "?relay", bdb_resetLocalAction
bdb_setActiveCentralizedLinkKey SYMBOL "bdb_setActiveCentralizedLinkKey"
`??bdb_setActiveCentralizedLinkKey::?relay` SYMBOL "?relay", bdb_setActiveCentralizedLinkKey
bdb_setChannel      SYMBOL "bdb_setChannel"
`??bdb_setChannel::?relay` SYMBOL "?relay", bdb_setChannel
bdb_setChannelAttribute SYMBOL "bdb_setChannelAttribute"
`??bdb_setChannelAttribute::?relay` SYMBOL "?relay", bdb_setChannelAttribute
bdb_setCommissioningGroupID SYMBOL "bdb_setCommissioningGroupID"
`??bdb_setCommissioningGroupID::?relay` SYMBOL "?relay", bdb_setCommissioningGroupID
bdb_setFN           SYMBOL "bdb_setFN"
`??bdb_setFN::?relay` SYMBOL "?relay", bdb_setFN
bdb_setNodeIsOnANetwork SYMBOL "bdb_setNodeIsOnANetwork"
`??bdb_setNodeIsOnANetwork::?relay` SYMBOL "?relay", bdb_setNodeIsOnANetwork
bdb_setNodeJoinLinkKeyType SYMBOL "bdb_setNodeJoinLinkKeyType"
`??bdb_setNodeJoinLinkKeyType::?relay` SYMBOL "?relay", bdb_setNodeJoinLinkKeyType
bdb_tcLinkKeyExchangeAttempt SYMBOL "bdb_tcLinkKeyExchangeAttempt"
`??bdb_tcLinkKeyExchangeAttempt::?relay` SYMBOL "?relay", bdb_tcLinkKeyExchangeAttempt
bdb_touchlinkSendFNReset SYMBOL "bdb_touchlinkSendFNReset"
`??bdb_touchlinkSendFNReset::?relay` SYMBOL "?relay", bdb_touchlinkSendFNReset
bdb_zclRespondentListClean SYMBOL "bdb_zclRespondentListClean"
`??bdb_zclRespondentListClean::?relay` SYMBOL "?relay", bdb_zclRespondentListClean

        EXTERN `??APSME_AddTCLinkKey::?relay`
        FUNCTION `??APSME_AddTCLinkKey::?relay`,00H
        EXTERN `??APSME_GetRequest::?relay`
        FUNCTION `??APSME_GetRequest::?relay`,00H
        EXTERN `??APSME_IsDistributedSecurity::?relay`
        FUNCTION `??APSME_IsDistributedSecurity::?relay`,00H
        EXTERN `??APSME_RequestKeyReq::?relay`
        FUNCTION `??APSME_RequestKeyReq::?relay`,00H
        EXTERN `??APSME_VerifyKeyReq::?relay`
        FUNCTION `??APSME_VerifyKeyReq::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_JoinRequest::?relay`
        FUNCTION `??NLME_JoinRequest::?relay`,00H
        EXTERN `??NLME_LeaveReq::?relay`
        FUNCTION `??NLME_LeaveReq::?relay`,00H
        EXTERN `??NLME_NwkDiscTerm::?relay`
        FUNCTION `??NLME_NwkDiscTerm::?relay`,00H
        EXTERN `??NLME_OrphanStateSet::?relay`
        FUNCTION `??NLME_OrphanStateSet::?relay`,00H
        EXTERN `??NLME_ReJoinRequest::?relay`
        FUNCTION `??NLME_ReJoinRequest::?relay`,00H
        EXTERN `??NLME_ReJoinRequestUnsecure::?relay`
        FUNCTION `??NLME_ReJoinRequestUnsecure::?relay`,00H
        EXTERN `??NLME_ResetRequest::?relay`
        FUNCTION `??NLME_ResetRequest::?relay`,00H
        EXTERN `??NLME_SetPollRate::?relay`
        FUNCTION `??NLME_SetPollRate::?relay`,00H
        EXTERN `??NLME_SetQueuedPollRate::?relay`
        FUNCTION `??NLME_SetQueuedPollRate::?relay`,00H
        EXTERN `??NLME_SetResponseRate::?relay`
        FUNCTION `??NLME_SetResponseRate::?relay`,00H
        EXTERN `??ZDApp_ChangeState::?relay`
        FUNCTION `??ZDApp_ChangeState::?relay`,00H
        EXTERN `??ZDApp_NetworkInit::?relay`
        FUNCTION `??ZDApp_NetworkInit::?relay`,00H
        EXTERN `??ZDApp_NodeProfileSync::?relay`
        FUNCTION `??ZDApp_NodeProfileSync::?relay`,00H
        EXTERN `??ZDApp_ResetTimerStart::?relay`
        FUNCTION `??ZDApp_ResetTimerStart::?relay`,00H
        EXTERN `??ZDApp_RestoreNwkKey::?relay`
        FUNCTION `??ZDApp_RestoreNwkKey::?relay`,00H
        EXTERN `??ZDApp_RestoreNwkSecMaterial::?relay`
        FUNCTION `??ZDApp_RestoreNwkSecMaterial::?relay`,00H
        EXTERN `??ZDOInitDeviceEx::?relay`
        FUNCTION `??ZDOInitDeviceEx::?relay`,00H
        EXTERN `??ZDP_MgmtPermitJoinReq::?relay`
        FUNCTION `??ZDP_MgmtPermitJoinReq::?relay`,00H
        EXTERN `??ZDP_NWKAddrOfInterestReq::?relay`
        FUNCTION `??ZDP_NWKAddrOfInterestReq::?relay`,00H
        EXTERN `??ZMacSetReq::?relay`
        FUNCTION `??ZMacSetReq::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??bdb_BindIfMatch::?relay`
        FUNCTION `??bdb_BindIfMatch::?relay`,00H
        EXTERN `??bdb_SendIdentifyQuery::?relay`
        FUNCTION `??bdb_SendIdentifyQuery::?relay`,00H
        EXTERN `??bdb_SendSimpleDescReq::?relay`
        FUNCTION `??bdb_SendSimpleDescReq::?relay`,00H
        EXTERN `??bdb_exitFindingBindingWStatus::?relay`
        FUNCTION `??bdb_exitFindingBindingWStatus::?relay`,00H
        EXTERN `??bdb_getRespondentRetry::?relay`
        FUNCTION `??bdb_getRespondentRetry::?relay`,00H
        EXTERN `??bdb_setEpDescListToActiveEndpoint::?relay`
        FUNCTION `??bdb_setEpDescListToActiveEndpoint::?relay`,00H
        EXTERN `??nwkNeighborInitTable::?relay`
        FUNCTION `??nwkNeighborInitTable::?relay`,00H
        EXTERN `??nwk_ExtPANIDValid::?relay`
        FUNCTION `??nwk_ExtPANIDValid::?relay`,00H
        EXTERN `??nwk_desc_list_free::?relay`
        FUNCTION `??nwk_desc_list_free::?relay`,00H
        EXTERN `??nwk_desc_list_release::?relay`
        FUNCTION `??nwk_desc_list_release::?relay`,00H
        EXTERN `??nwk_getNwkDescList::?relay`
        FUNCTION `??nwk_getNwkDescList::?relay`,00H
        EXTERN `??nwk_setStateIdle::?relay`
        FUNCTION `??nwk_setStateIdle::?relay`,00H
        EXTERN `??osal_build_uint16::?relay`
        FUNCTION `??osal_build_uint16::?relay`,00H
        EXTERN `??osal_get_timeoutEx::?relay`
        FUNCTION `??osal_get_timeoutEx::?relay`,00H
        EXTERN `??osal_isbufset::?relay`
        FUNCTION `??osal_isbufset::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??sAddrExtCmp::?relay`
        FUNCTION `??sAddrExtCmp::?relay`,00H
        EXTERN `??sspMMOHash::?relay`
        FUNCTION `??sspMMOHash::?relay`,00H
        EXTERN `??zclFindAttrRec::?relay`
        FUNCTION `??zclFindAttrRec::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN AIB_apsTrustCenterAddress
        EXTERN APSME_AddTCLinkKey
        FUNCTION APSME_AddTCLinkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_GetRequest
        FUNCTION APSME_GetRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_IsDistributedSecurity
        FUNCTION APSME_IsDistributedSecurity,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_RequestKeyReq
        FUNCTION APSME_RequestKeyReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_VerifyKeyReq
        FUNCTION APSME_VerifyKeyReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_JoinRequest
        FUNCTION NLME_JoinRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveReq
        FUNCTION NLME_LeaveReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_NwkDiscTerm
        FUNCTION NLME_NwkDiscTerm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_OrphanStateSet
        FUNCTION NLME_OrphanStateSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ReJoinRequest
        FUNCTION NLME_ReJoinRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ReJoinRequestUnsecure
        FUNCTION NLME_ReJoinRequestUnsecure,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ResetRequest
        FUNCTION NLME_ResetRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetPollRate
        FUNCTION NLME_SetPollRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetQueuedPollRate
        FUNCTION NLME_SetQueuedPollRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetResponseRate
        FUNCTION NLME_SetResponseRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN TCLinkKeyFrmCntr
        EXTERN ZDApp_ChangeState
        FUNCTION ZDApp_ChangeState,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_NetworkInit
        FUNCTION ZDApp_NetworkInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_NodeProfileSync
        FUNCTION ZDApp_NodeProfileSync,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_ResetTimerStart
        FUNCTION ZDApp_ResetTimerStart,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_RestoreNwkKey
        FUNCTION ZDApp_RestoreNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_RestoreNwkSecMaterial
        FUNCTION ZDApp_RestoreNwkSecMaterial,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_SavedPollRate
        EXTERN ZDOInitDeviceEx
        FUNCTION ZDOInitDeviceEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_Config_Node_Descriptor
        EXTERN ZDO_UseExtendedPANID
        EXTERN ZDP_MgmtPermitJoinReq
        FUNCTION ZDP_MgmtPermitJoinReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NWKAddrOfInterestReq
        FUNCTION ZDP_NWKAddrOfInterestReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdbIndentifyActiveEndpoint
        EXTERN bdb_BindIfMatch
        FUNCTION bdb_BindIfMatch,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_SendIdentifyQuery
        FUNCTION bdb_SendIdentifyQuery,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_SendSimpleDescReq
        FUNCTION bdb_SendSimpleDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_exitFindingBindingWStatus
        FUNCTION bdb_exitFindingBindingWStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_getRespondentRetry
        FUNCTION bdb_getRespondentRetry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_setEpDescListToActiveEndpoint
        FUNCTION bdb_setEpDescListToActiveEndpoint,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN defaultTCLinkKey
        EXTERN devStartMode
        EXTERN nwkNeighborInitTable
        FUNCTION nwkNeighborInitTable,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_ExtPANIDValid
        FUNCTION nwk_ExtPANIDValid,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_desc_list_free
        FUNCTION nwk_desc_list_free,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_desc_list_release
        FUNCTION nwk_desc_list_release,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_getNwkDescList
        FUNCTION nwk_getNwkDescList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_setStateIdle
        FUNCTION nwk_setStateIdle,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint16
        FUNCTION osal_build_uint16,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_isbufset
        FUNCTION osal_isbufset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN pfnIdentifyTimeChangeCB
        EXTERN requestLinkKeyTimeout
        EXTERN requestNewTrustCenterLinkKey
        EXTERN runtimeChannel
        EXTERN sAddrExtCmp
        FUNCTION sAddrExtCmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sspMMOHash
        FUNCTION sspMMOHash,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclFindAttrRec
        FUNCTION zclFindAttrRec,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_TaskID
        EXTERN zgChildAgingEnable
        EXTERN zgConfigPANID
        EXTERN zgDefaultChannelList
        EXTERN zgDeviceLogicalType
        EXTERN zgPollRate
        EXTERN zgRejoinPollRate
        EXTERN zgStackProfile
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack 3.0.0\Components\stack\bdb\bdb.c
//    1 /**************************************************************************************************
//    2   Filename:       bdb.c
//    3   Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
//    4   Revision:       $Revision: - $
//    5 
//    6   Description:    This file contains the Base Device Behavior functions and attributes.
//    7 
//    8 
//    9   Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "bdb.h"
//   45 #include "ZDApp.h"
//   46 #include "OSAL.h"
//   47 #include "ZDConfig.h"
//   48 #include "hal_led.h"
//   49 #include "ZDObject.h"
//   50 #include "OSAL_Nv.h"
//   51 #include "AddrMgr.h"
//   52 #include "ZDSecMgr.h"
//   53 #include "nwk.h"
//   54 #include "nwk_util.h"
//   55 #include "ssp_hash.h"
//   56 #ifdef BDB_REPORTING
//   57 #include "bdb_Reporting.h"
//   58 #endif 
//   59 
//   60 //GP_UPDATE
//   61 #include "gp_interface.h"
//   62 #include "gp_common.h"
//   63 #include "bdb_interface.h"
//   64 #include "dgp_stub.h"
//   65 
//   66 #if defined ( INTER_PAN ) 
//   67 #if defined ( BDB_TL_INITIATOR )  
//   68 #include "bdb_touchlink_initiator.h"
//   69 #endif
//   70 #if defined ( BDB_TL_TARGET )  
//   71 #include "bdb_touchlink_target.h"
//   72 #endif
//   73 #endif
//   74    
//   75 #if defined ( INTER_PAN ) && ( defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET ) )
//   76   #include "bdb_touchlink.h"
//   77 #endif
//   78  
//   79 #ifdef MT_APP_CNF_FUNC
//   80 #include "MT_APP_CONFIG.h"
//   81 #endif
//   82    
//   83  /*********************************************************************
//   84  * MACROS
//   85  */
//   86 //This is actually the channels used
//   87 #define vScanChannels  zgDefaultChannelList
//   88    
//   89  /*********************************************************************
//   90  * CONSTANTS
//   91  */
//   92 
//   93 #define NUMBER_OF_CHANNELS     16
//   94 
//   95 #define CHANNEL_11_MASK_POS    11
//   96 #define CHANNEL_26_MASK_POS    26
//   97    

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   98 uint8 bdb_FB_InitiatorCurrentCyclesNumber = 0; //last cycle is #1 (i.e. cycles-left = (bdb_FB_InitiatorCurrentCyclesNumber - 1))
bdb_FB_InitiatorCurrentCyclesNumber:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   99 
//  100 /*********************************************************************
//  101  * TYPEDEFS
//  102  */
//  103  
//  104  
//  105  /*********************************************************************
//  106  * GLOBAL VARIABLES
//  107  */
//  108 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  109 byte bdb_TaskID;
bdb_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  110 bdbAttributes_t bdbAttributes = BDB_ATTRIBUTES_DEFAULT_CONFIG;
bdbAttributes:
        DATA8
        DS 19
        REQUIRE `?<Initializer for bdbAttributes>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  111 epList_t *bdb_HeadEpDescriptorList = NULL;
bdb_HeadEpDescriptorList:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  112 epList_t *bdb_CurrEpDescriptorList = NULL;
bdb_CurrEpDescriptorList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  113 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  114 bdbFindingBindingRespondent_t *pRespondentHead = NULL;
pRespondentHead:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  115 bdbFindingBindingRespondent_t *pRespondentCurr = NULL;
pRespondentCurr:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  116 bdbFindingBindingRespondent_t *pRespondentNext = NULL;
pRespondentNext:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  117 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  118 bdbCommissioningProcedureState_t bdbCommissioningProcedureState; 
bdbCommissioningProcedureState:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  119 bool bdb_initialization = FALSE;  //Variable to tell if the initialization process has been started
bdb_initialization:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  120 
//  121 //Nwk formation and nwk steering for nodes not in nwk

        RSEG XDATA_I:XDATA:NOROOT(0)
//  122 bool vDoPrimaryScan = TRUE;
vDoPrimaryScan:
        DATA8
        DS 1
        REQUIRE `?<Initializer for vDoPrimaryScan>`
        REQUIRE __INIT_XDATA_I
//  123 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  124 uint8 zgBdbInstallCodeCRC[INSTALL_CODE_LEN + INSTALL_CODE_CRC_LEN] = {0x83,0xFE,0xD3,0x40,0x7A,0x93,0x97,0x23,0xA5,0xC6,0x39,0xB2,0x69,0x16,0xD5,0x05,0xC3,0xB5};
zgBdbInstallCodeCRC:
        DATA8
        DS 18
        REQUIRE `?<Initializer for zgBdbInstallCodeCRC>`
        REQUIRE __INIT_XDATA_I
//  125 
//  126 //Pointer of the nwk being tried in association process
//  127 #if (ZG_BUILD_JOINING_TYPE)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  128 static networkDesc_t *pBDBListNwk = NULL;
pBDBListNwk:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  129 #endif
//  130 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  131 uint8 bdb_ZclTransactionSequenceNumber=0x00;
bdb_ZclTransactionSequenceNumber:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  132 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  133 bool touchLinkTargetEnabled = FALSE;
touchLinkTargetEnabled:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  134 
//  135  /*********************************************************************
//  136  * EXTERNAL VARIABLES
//  137  */
//  138 
//  139 extern devStartModes_t devStartMode;
//  140 extern bool  requestNewTrustCenterLinkKey;
//  141 extern uint32 requestLinkKeyTimeout;
//  142 extern uint32 ZDApp_SavedPollRate;
//  143 
//  144 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
//  145 extern bdbGCB_IdentifyTimeChange_t pfnIdentifyTimeChangeCB;
//  146 extern uint8 bdbIndentifyActiveEndpoint;
//  147 #endif
//  148 
//  149 extern bdbFindingBindingRespondent_t *pRespondentNext;
//  150 
//  151 #ifndef ZNP_ENABLED
//  152 extern ZDO_DeviceAnnce_t aliasConflictAnnce;
//  153 #endif
//  154 
//  155 /*********************************************************************
//  156  * EXTERNAL FUNCTIONS
//  157  */
//  158 
//  159 extern void ZDApp_ResetTimerStart( uint16 delay );
//  160 extern void ZDApp_NodeProfileSync( uint8 stackProfile );
//  161 extern uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
//  162 extern uint8 ZDApp_ReadNetworkRestoreState( void );
//  163 
//  164 extern bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead);
//  165 
//  166 /*********************************************************************
//  167  * LOCAL VARIABLES
//  168  */
//  169 #if (ZG_BUILD_JOINING_TYPE)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  170   static uint8 bdb_nwkAssocRetriesCount = 0;
bdb_nwkAssocRetriesCount:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  171 #endif
//  172 #if (ZG_BUILD_COORDINATOR_TYPE)
//  173   static bdb_joiningDeviceList_t *bdb_joiningDeviceList = NULL;
//  174 #endif
//  175   
//  176 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
//  177 //Latch to save the status success of any attempt in the periodic F&B process  

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  178 static uint8 bdb_FBStateSuccessLatch = FALSE;
bdb_FBStateSuccessLatch:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  179 #endif
//  180  /*********************************************************************
//  181  * LOCAL FUNCTIONS
//  182  */
//  183 static void bdb_ProcessOSALMsg(bdbInMsg_t *msgPtr);
//  184 void bdb_NotifyCommissioningModeStart(uint8 commissioningMode);
//  185 
//  186 #if (ZG_BUILD_JOINING_TYPE)
//  187 static void bdb_requestTCStackVersion(void);
//  188 static void bdb_requestTCLinkKey(void);
//  189 static void bdb_requestVerifyTCLinkKey(void);
//  190 static void bdb_tryNwkAssoc(void);
//  191 #endif
//  192 
//  193 
//  194 static void bdb_processTimeout(void);
//  195 static void bdb_startResumeCommissioningProcess(void);
//  196 static void bdb_nwkSteeringDeviceOnNwk(void);
//  197 static void bdb_nwkJoiningFormation(bool isJoining);
//  198 
//  199 //GP_UPDATE
//  200 #if (ZG_BUILD_RTR_TYPE)
//  201 #ifndef ZNP_ENABLED
//  202 static uint8 gp_ChangeChannelReq(void);
//  203 static void gp_CBInit(void);
//  204 #endif
//  205 #endif
//  206 
//  207 #if (ZG_BUILD_COORDINATOR_TYPE)
//  208 static void bdb_TCProcessJoiningList(void);
//  209 static ZStatus_t bdb_TCJoiningDeviceFree(bdb_joiningDeviceList_t* JoiningDeviceToRemove);
//  210 #endif
//  211 #if (ZG_BUILD_COORDINATOR_TYPE)
//  212 static bdbGCB_TCLinkKeyExchangeProcess_t  pfnTCLinkKeyExchangeProcessCB = NULL;
//  213 #endif

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  214 static bdbGCB_CommissioningStatus_t       pfnCommissioningStatusCB = NULL; 
pfnCommissioningStatusCB:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  215 #if (ZG_BUILD_JOINING_TYPE)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  216 static bdbGCB_CBKETCLinkKeyExchange_t     pfnCBKETCLinkKeyExchange = NULL;
pfnCBKETCLinkKeyExchange:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  217 static bdbGCB_FilterNwkDesc_t             pfnFilterNwkDesc = NULL;   
pfnFilterNwkDesc:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  218 #endif
//  219 
//  220 
//  221 
//  222 void bdb_calculateCCITT_CRC (uint8 *Mb, uint32 msglen, uint16 *crc);
//  223 void bdb_crcInit(uint16 *crc, uint16 *crcinit_direct, uint16 *crcinit_nondirect);
//  224 uint16 bdb_crcReflect (uint16 crc, uint16 bitnum);
//  225 uint16 bdb_crcBitByBitFast(uint8 * p, uint32 len, uint16 crcinit_direct, uint16 crcinit_nondirect);
//  226 
//  227 
//  228 /*********************************************************************
//  229  * PUBLIC FUNCTIONS
//  230  *********************************************************************/
//  231 void bdb_filterNwkDisc(void);
//  232 ZStatus_t bdb_joinProcess(networkDesc_t *pChosenNwk);
//  233 
//  234 ZStatus_t bdb_TCAddJoiningDevice(uint16 parentAddr, uint8* JoiningExtAddr);
//  235 void bdb_TCjoiningDeviceComplete(uint8* JoiningExtAddr);
//  236 
//  237  /*********************************************************************
//  238  * @fn          bdb_Init
//  239  *
//  240  * @brief       Initialization function for the Base Device Behavior.
//  241  *
//  242  * @param       task_id - bdb_TaskID Task ID
//  243  *
//  244  * @return      none
//  245  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  246 void bdb_Init( byte task_id )
bdb_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function bdb_Init
        CODE
//  247 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  248   bdb_TaskID = task_id;
        MOV     A,R1
        MOV     DPTR,#bdb_TaskID
        LJMP    ??Subroutine33_0 & 0xFFFF
//  249     
//  250 #if (ZG_BUILD_COORDINATOR_TYPE)
//  251   if(ZG_DEVICE_COORDINATOR_TYPE)
//  252   {
//  253     if(bdbAttributes.bdbJoinUsesInstallCodeKey)
//  254     {
//  255       zgAllowInstallCodes = ZG_IC_MUST_USED;
//  256     }
//  257   }
//  258 #endif
//  259   
//  260 #if defined ( INTER_PAN ) && defined ( BDB_TL_INITIATOR )  
//  261   touchLinkInitiator_InitDevice( );
//  262 #endif
//  263 
//  264 #if (BDB_REPORTING)
//  265   bdb_RepInit();
//  266 #endif  
//  267   
//  268 //GP_UPDATE
//  269 #if (ZG_BUILD_RTR_TYPE)
//  270 #ifndef ZNP_ENABLED
//  271   gp_RegisterGPChangeChannelReqForBDBCB(gp_ChangeChannelReq);
//  272   gp_CBInit();
//  273 #endif
//  274 #endif
//  275 }
          CFI EndBlock cfiBlock0
//  276 
//  277 /*********************************************************************
//  278  * @fn      bdb_RegisterSimpleDescriptor
//  279  *
//  280  * @brief   Register the Simple descriptor. This function also registers 
//  281  *          the profile's cluster conversion table.
//  282  *
//  283  * @param   simpleDesc - a pointer to a valid SimpleDescriptionFormat_t, must not be NULL.
//  284  *
//  285  * @return  none
//  286  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  287 void bdb_RegisterSimpleDescriptor( SimpleDescriptionFormat_t *simpleDesc )
bdb_RegisterSimpleDescriptor:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function bdb_RegisterSimpleDescriptor
        CODE
//  288 {
        FUNCALL bdb_RegisterSimpleDescriptor, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RegisterSimpleDescriptor, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  289   endPointDesc_t *epDesc;
//  290 
//  291   // Register the application's endpoint descriptor
//  292   //  - This memory is allocated and never freed.
//  293   epDesc = osal_mem_alloc( sizeof ( endPointDesc_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x7
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
//  294   if ( epDesc )
        MOV     A,R2
        ORL     A,R3
        JZ      ??bdb_RegisterSimpleDescriptor_0
//  295   {
//  296     // Fill out the endpoint description.
//  297     epDesc->endPoint = simpleDesc->EndPoint;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
//  298     epDesc->task_id = &zcl_TaskID;   // all messages get sent to ZCL first
        INC     DPTR
        INC     DPTR
        MOV     A,#zcl_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(zcl_TaskID >> 8) & 0xff
        LCALL   ?Subroutine18 & 0xFFFF
//  299     epDesc->simpleDesc = simpleDesc;
??CrossCallReturnLabel_29:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ?Subroutine18 & 0xFFFF
//  300     epDesc->latencyReq = noLatencyReqs;
??CrossCallReturnLabel_30:
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  301 
//  302     // Register the endpoint description with the AF
//  303     afRegister( epDesc );
        ; Setup parameters for call to function afRegister
        LCALL   `??afRegister::?relay`; Banked call to: afRegister
//  304   }
//  305 }
??bdb_RegisterSimpleDescriptor_0:
        LJMP    ??Subroutine41_0 & 0xFFFF
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function bdb_RegisterSimpleDescriptor
          CFI Conditional ??CrossCallReturnLabel_29
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function bdb_RegisterSimpleDescriptor
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4
//  306 
//  307 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
//  308 /*********************************************************************
//  309  * @fn      bdb_ZclIdentifyCmdInd
//  310  *
//  311  * @brief   Callback from the ZCL General Cluster Library when
//  312  *          it received an Identity Command for this application.
//  313  *
//  314  * @param   srcAddr - source address and endpoint of the response message
//  315  * @param   identifyTime - the number of seconds to identify yourself
//  316  * @param   endpoint - destination endpoint
//  317  *
//  318  * @return  none
//  319  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  320 void bdb_ZclIdentifyCmdInd( zclIdentify_t *pCmd, uint8 endpoint )
bdb_ZclIdentifyCmdInd:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function bdb_ZclIdentifyCmdInd
        CODE
//  321 {
        FUNCALL bdb_ZclIdentifyCmdInd, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ZclIdentifyCmdInd, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R1
//  322   zclAttrRec_t identifyAttrRec;
//  323   
//  324   if ( zclFindAttrRec( endpoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  325                       ATTRID_IDENTIFY_TIME, &identifyAttrRec ) )
        ; Setup parameters for call to function zclFindAttrRec
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3
        MOV     R3,#0x0
        MOV     R1,?V0
        LCALL   `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R1
        JZ      ??bdb_ZclIdentifyCmdInd_0
//  326   {
//  327     if ( pCmd->identifyTime > 0 )
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     DPL,R0
        MOV     DPH,R1
        JZ      ??bdb_ZclIdentifyCmdInd_1
//  328     {
//  329       *((uint16*)identifyAttrRec.attr.dataPtr) += pCmd->identifyTime;
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     R3,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        SJMP    ??bdb_ZclIdentifyCmdInd_2
//  330     }
//  331     else if ( pCmd->identifyTime <= 0 )
//  332     {
//  333       *((uint16*)identifyAttrRec.attr.dataPtr) = 0;
??bdb_ZclIdentifyCmdInd_1:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
??bdb_ZclIdentifyCmdInd_2:
        MOVX    @DPTR,A
//  334     }
//  335     osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R2,#0x0
        MOV     R3,#0x20
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  336     
//  337     if(pfnIdentifyTimeChangeCB != NULL)
        MOV     DPTR,#pfnIdentifyTimeChangeCB
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_72:
        JZ      ??bdb_ZclIdentifyCmdInd_0
//  338     {
//  339       pfnIdentifyTimeChangeCB(pCmd->srcAddr->endPoint);
        ; Setup parameters for indirect call
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x9
        MOV     DPL,A
        CLR     A
        ADDC    A,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#pfnIdentifyTimeChangeCB
        LCALL   ?Subroutine10 & 0xFFFF
//  340     }
//  341   }
??CrossCallReturnLabel_92:
        LCALL   ?CALL_IND
//  342 }
??bdb_ZclIdentifyCmdInd_0:
        MOV     A,#0x8
        LJMP    ??Subroutine35_0 & 0xFFFF
          CFI EndBlock cfiBlock5
//  343 #endif
//  344 
//  345 
//  346 #if (ZG_BUILD_JOINING_TYPE) 
//  347  /*********************************************************************
//  348  * @fn          bdb_setActiveCentralizedLinkKey
//  349  *
//  350  * @brief       Set the active centralized key to be used, Global or IC derived.
//  351  *
//  352  * @param       useGlobal - If TRUE, then use default TC link key, if FALSE use 
//  353  *                          pBuf as source for IC key derived input
//  354  * @param       pBuf - The expected format and length of the IC is defined by 
//  355  *                     BDB_INSTALL_CODE_USE
//  356  *
//  357  * @return      ZStatus_t - ZFailure when no valid BDB_INSTALL_CODE_USE is used
//  358  *                          ZInvalidParameter when IC buffer is null
//  359  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  360 ZStatus_t bdb_setActiveCentralizedLinkKey(bool useGlobal, uint8* pBuf)
bdb_setActiveCentralizedLinkKey:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function bdb_setActiveCentralizedLinkKey
        CODE
//  361 {
        FUNCALL bdb_setActiveCentralizedLinkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_setActiveCentralizedLinkKey, APSME_AddTCLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_setActiveCentralizedLinkKey, bdb_addInstallCode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V1,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  362   uint8 extAddr[Z_EXTADDR_LEN];
//  363   osal_memset(extAddr,0x00,Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  364   ZStatus_t Status = ZSuccess;
        MOV     ?V0,#0x0
//  365 
//  366   if(useGlobal)
        MOV     A,?V1
        JZ      ??bdb_setActiveCentralizedLinkKey_0
//  367   {
//  368     APSME_AddTCLinkKey((uint8*)defaultTCLinkKey,extAddr);
        ; Setup parameters for call to function APSME_AddTCLinkKey
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R2,#defaultTCLinkKey & 0xff
        MOV     R3,#(defaultTCLinkKey >> 8) & 0xff
        LCALL   `??APSME_AddTCLinkKey::?relay`; Banked call to: APSME_AddTCLinkKey
//  369     Status = ZSuccess;
        SJMP    ??bdb_setActiveCentralizedLinkKey_1
//  370   } 
//  371   else
//  372   {
//  373     if(pBuf != NULL)
??bdb_setActiveCentralizedLinkKey_0:
        MOV     A,R6
        ORL     A,R7
        JZ      ??bdb_setActiveCentralizedLinkKey_2
//  374     {
//  375   #if (BDB_INSTALL_CODE_USE==BDB_INSTALL_CODE_USE_IC_CRC)
//  376       //Set the install code as default key
//  377       Status = bdb_addInstallCode(pBuf,extAddr);
        ; Setup parameters for call to function bdb_addInstallCode
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??bdb_addInstallCode::?relay`; Banked call to: bdb_addInstallCode
        MOV     A,R1
        MOV     ?V0,A
        SJMP    ??bdb_setActiveCentralizedLinkKey_1
//  378     
//  379   #elif (BDB_INSTALL_CODE_USE==BDB_INSTALL_CODE_USE_KEY)
//  380 
//  381       //Set the key as global default
//  382       APSME_AddTCLinkKey(pBuf,extAddr);
//  383   #else
//  384     
//  385       //BDB_INSTALL_CODE_USE not supported
//  386       Status = ZFailure;
//  387   #endif
//  388     }
//  389     else
//  390     {
//  391       Status = ZInvalidParameter;
??bdb_setActiveCentralizedLinkKey_2:
        MOV     ?V0,#0x2
//  392     }
//  393   }
//  394   return Status;
??bdb_setActiveCentralizedLinkKey_1:
        MOV     R1,?V0
        MOV     A,#0x8
        LJMP    ??Subroutine40_0 & 0xFFFF
//  395 }
          CFI EndBlock cfiBlock6
//  396 #endif
//  397 
//  398 
//  399     
//  400   
//  401 /******************************************************************************
//  402  * @fn          bdb_addInstallCode
//  403  *
//  404  * @brief       Interface to add an install codes and adds a APS TC Link key.
//  405  *
//  406  * @param       pInstallCode - [in] Install Code with CRC (buffer size of 18 bytes).
//  407  *              pExt - [in] Extended address of the node.
//  408  *
//  409  * @return      ZStatus_t
//  410  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  411 ZStatus_t bdb_addInstallCode(uint8* pInstallCode, uint8* pExt)
bdb_addInstallCode:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function bdb_addInstallCode
        CODE
//  412 {
        FUNCALL bdb_addInstallCode, bdb_GenerateInstallCodeCRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_addInstallCode, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_addInstallCode, sspMMOHash
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_addInstallCode, APSME_AddTCLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R4
        MOV     ?V1,R5
//  413   uint8  hashOutput[16];
//  414   uint16 CRC;
//  415   
//  416 #if (ZG_BUILD_COORDINATOR_TYPE)
//  417   if(ZG_DEVICE_COORDINATOR_TYPE)
//  418   {
//  419     if(zgAllowInstallCodes == ZG_IC_NOT_SUPPORTED)
//  420     {
//  421       return ZFailure;
//  422     }
//  423   }
//  424 #endif
//  425        
//  426   if((pInstallCode == NULL) || (pExt == NULL))
        MOV     A,R6
        ORL     A,R7
        JZ      ??bdb_addInstallCode_0
        MOV     A,R4
        ORL     A,?V1
        JZ      ??bdb_addInstallCode_0
//  427   {
//  428     return ZInvalidParameter;
//  429   }
//  430   
//  431   CRC = bdb_GenerateInstallCodeCRC(pInstallCode);
        ; Setup parameters for call to function bdb_GenerateInstallCodeCRC
        LCALL   `??bdb_GenerateInstallCodeCRC::?relay`; Banked call to: bdb_GenerateInstallCodeCRC
        MOV     ?V2,R2
        MOV     ?V3,R3
//  432   //Validate CRC
//  433   if(CRC != osal_build_uint16(&pInstallCode[INSTALL_CODE_LEN]))
        ; Setup parameters for call to function osal_build_uint16
        MOV     A,R6
        ADD     A,#0x10
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV     A,R2
        XRL     A,?V2
        JNZ     ??bdb_addInstallCode_1
        MOV     A,R3
        XRL     A,?V3
??bdb_addInstallCode_1:
        JZ      ??bdb_addInstallCode_2
//  434   {
//  435     return ZInvalidParameter;
??bdb_addInstallCode_0:
        MOV     R1,#0x2
        SJMP    ??bdb_addInstallCode_3
//  436   }
//  437 
//  438   sspMMOHash (NULL, 0, pInstallCode,(INSTALL_CODE_LEN + INSTALL_CODE_CRC_LEN) * BITS_PER_BYTE, hashOutput);
??bdb_addInstallCode_2:
        ; Setup parameters for call to function sspMMOHash
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V2,#-0x70
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R1,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??sspMMOHash::?relay`; Banked call to: sspMMOHash
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
//  439 
//  440   return APSME_AddTCLinkKey(hashOutput,pExt);
        ; Setup parameters for call to function APSME_AddTCLinkKey
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??APSME_AddTCLinkKey::?relay`; Banked call to: APSME_AddTCLinkKey
??bdb_addInstallCode_3:
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
//  441 }    
          CFI EndBlock cfiBlock7
//  442     
//  443 
//  444 #if (ZG_BUILD_COORDINATOR_TYPE)
//  445  /*********************************************************************
//  446  * @fn      bdb_RegisterTCLinkKeyExchangeProcessCB
//  447  *
//  448  * @brief   Register a callback to receive notifications on the joining devices 
//  449  *          and its status on TC link key exchange
//  450  *
//  451  * @param   bdbGCB_TCLinkKeyExchangeProcess - application callback 
//  452  *          (extended address of device, status: 0 = Joining, 1 = TC link key exchange success, 2 = TC link key exchange failed)
//  453  *
//  454  * @return  none
//  455  */
//  456 void bdb_RegisterTCLinkKeyExchangeProcessCB(bdbGCB_TCLinkKeyExchangeProcess_t bdbGCB_TCLinkKeyExchangeProcess)
//  457 {
//  458   if(bdbGCB_TCLinkKeyExchangeProcess != NULL)
//  459   {
//  460     pfnTCLinkKeyExchangeProcessCB = bdbGCB_TCLinkKeyExchangeProcess;
//  461   }
//  462 }
//  463 
//  464 
//  465 
//  466  /*********************************************************************
//  467  * @fn          bdb_setTCRequireKeyExchange
//  468  *
//  469  * @brief       Set the bdb_setTCRequireKeyExchange attribute
//  470  *
//  471  * @param       isKeyExchangeRequired - True if TC will remove devices that do 
//  472  *              not perform key exchange after bdbTrustCenterNodeJoinTimeout, 
//  473  *              False to not remove devices.
//  474  *
//  475  * @return      none
//  476  */
//  477 void bdb_setTCRequireKeyExchange(bool isKeyExchangeRequired)
//  478 {
//  479   bdbAttributes.bdbTrustCenterRequireKeyExchange = isKeyExchangeRequired;
//  480 }
//  481 
//  482 
//  483 
//  484  /*********************************************************************
//  485  * @fn          bdb_TCAddJoiningDevice
//  486  *
//  487  * @brief       Add a joining device to the list of devices that must request a 
//  488  *              key before bdbTrustCenterNodeJoinTimeout.
//  489  *
//  490  * @param       parentAddr - Address of the parent device
//  491  * @param       JoiningExtAddr - IEEE address of the joining device
//  492  *
//  493  * @return      ZStatus_t - ZFailure No memory to allocate the device in the list
//  494  *                          ZInvalidParameter
//  495  */
//  496 ZStatus_t bdb_TCAddJoiningDevice(uint16 parentAddr, uint8* JoiningExtAddr)
//  497 {
//  498   bdb_joiningDeviceList_t* tempJoiningDescNode;
//  499   
//  500   if((parentAddr == INVALID_NODE_ADDR) || (JoiningExtAddr == NULL))
//  501   {
//  502     return ZInvalidParameter;
//  503   }
//  504   
//  505   //If the list was empty and element was allocated, then start the timer
//  506   if(bdb_joiningDeviceList == NULL)
//  507   {
//  508     bdb_joiningDeviceList = osal_mem_alloc(sizeof(bdb_joiningDeviceList_t));
//  509     if(bdb_joiningDeviceList == NULL)
//  510     {
//  511       return ZFailure;
//  512     }
//  513    
//  514     osal_start_reload_timer(bdb_TaskID,BDB_TC_JOIN_TIMEOUT,1000);
//  515     tempJoiningDescNode = bdb_joiningDeviceList;
//  516   }
//  517   //if the list was not empty then add the entry at the end of the list
//  518   else
//  519   {
//  520     tempJoiningDescNode = bdb_joiningDeviceList;
//  521     
//  522     //Validate that this is not already in the list... somehow
//  523     if(osal_memcmp(JoiningExtAddr,tempJoiningDescNode->bdbJoiningNodeEui64,Z_EXTADDR_LEN))
//  524     {
//  525       //The device added is already in the list, refresh its time and do nothing else
//  526       tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
//  527       return ZSuccess;
//  528     }
//  529     
//  530     while(tempJoiningDescNode->nextDev != NULL)
//  531     {
//  532       tempJoiningDescNode = tempJoiningDescNode->nextDev;
//  533       
//  534       //Validate that this is not already in the list... somehow
//  535       if(osal_memcmp(JoiningExtAddr,tempJoiningDescNode->bdbJoiningNodeEui64,Z_EXTADDR_LEN))
//  536       {
//  537         //The device added is already in the list, refresh its time and do nothing else
//  538         tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
//  539         return ZSuccess;
//  540       }
//  541     }
//  542     
//  543     tempJoiningDescNode->nextDev = osal_mem_alloc(sizeof(bdb_joiningDeviceList_t));
//  544     if(tempJoiningDescNode->nextDev == NULL)
//  545     {
//  546       return ZFailure;
//  547     }
//  548     
//  549     tempJoiningDescNode = tempJoiningDescNode->nextDev;
//  550   }
//  551   
//  552   if(pfnTCLinkKeyExchangeProcessCB)
//  553   {
//  554     bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
//  555     osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
//  556     bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_JOINING;
//  557     
//  558     bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
//  559   }
//  560   
//  561   tempJoiningDescNode->nextDev = NULL;
//  562   tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
//  563   tempJoiningDescNode->parentAddr = parentAddr;
//  564   osal_memcpy(tempJoiningDescNode->bdbJoiningNodeEui64, JoiningExtAddr, Z_EXTADDR_LEN);
//  565   
//  566   return ZSuccess;
//  567 }
//  568 
//  569 /****************************************************************************
//  570  * @fn          bdb_TCProcessJoiningList
//  571  *
//  572  * @brief       Process the timer to handle the joining devices if the TC link 
//  573  *              key is mandatory for all devices
//  574  *
//  575  * @param       none
//  576  *
//  577  * @return      none
//  578  */
//  579 void bdb_TCProcessJoiningList(void)
//  580 {
//  581   bdb_joiningDeviceList_t* tempJoiningDescNode;
//  582   
//  583   if(bdb_joiningDeviceList)
//  584   {
//  585     tempJoiningDescNode = bdb_joiningDeviceList;
//  586   
//  587     while(tempJoiningDescNode)
//  588     {
//  589       if(tempJoiningDescNode->NodeJoinTimeout)
//  590       {
//  591         tempJoiningDescNode->NodeJoinTimeout--;
//  592       }
//  593       
//  594       if(tempJoiningDescNode->NodeJoinTimeout == 0)
//  595       {
//  596         //Check if the key exchange is required 
//  597         if(bdbAttributes.bdbTrustCenterRequireKeyExchange)
//  598         {
//  599             AddrMgrEntry_t entry;
//  600             
//  601             entry.user = ADDRMGR_USER_DEFAULT;
//  602             osal_memcpy(entry.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
//  603             
//  604             if(AddrMgrEntryLookupExt(&entry))
//  605             {
//  606               ZDSecMgrAPSRemove(entry.nwkAddr,entry.extAddr,tempJoiningDescNode->parentAddr);
//  607             }
//  608         }
//  609         
//  610         //Expired device either is legacy device not using the TCLK entry or got 
//  611         //removed from the network because of timeout, eitherway it is not using
//  612         //TCLK entry neither the Security user in the address manager, so free the entry
//  613         //in both tables.
//  614         
//  615         uint16 keyNvIndex;
//  616         APSME_TCLKDevEntry_t TCLKDevEntry;
//  617         uint8 found, index;
//  618         
//  619         //Remove the entry in address manager
//  620         ZDSecMgrAddrClear(tempJoiningDescNode->bdbJoiningNodeEui64);
//  621         
//  622         //search for the entry in the TCLK table
//  623         keyNvIndex = APSME_SearchTCLinkKeyEntry(tempJoiningDescNode->bdbJoiningNodeEui64,&found, NULL);
//  624         
//  625         //If found, erase it.
//  626         if(found == TRUE)
//  627         {
//  628           osal_memset(&TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
//  629           TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
//  630           
//  631           //Increase the shift by one. Validate the maximum shift of the seed which is 15
//  632           index = keyNvIndex - ZCD_NV_TCLK_TABLE_START;
//  633           
//  634           TCLinkKeyFrmCntr[index].rxFrmCntr = 0;
//  635           TCLinkKeyFrmCntr[index].txFrmCntr = 0;
//  636           
//  637           //Update the entry
//  638           osal_nv_write(keyNvIndex,0,sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
//  639         }
//  640         
//  641         if(pfnTCLinkKeyExchangeProcessCB)
//  642         {
//  643           bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
//  644           osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
//  645           bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_EXCH_FAIL;
//  646           
//  647           bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
//  648         }
//  649        
//  650         //Free the device from the list
//  651         bdb_TCJoiningDeviceFree(tempJoiningDescNode);
//  652       }
//  653       tempJoiningDescNode = tempJoiningDescNode->nextDev;
//  654     }
//  655   }
//  656 
//  657   //we are done with the list
//  658   if(bdb_joiningDeviceList == NULL)
//  659   {
//  660     osal_stop_timerEx(bdb_TaskID,BDB_TC_JOIN_TIMEOUT);
//  661   }
//  662 }
//  663 
//  664 
//  665 
//  666 /****************************************************************************
//  667  * @fn          bdb_TCjoiningDeviceComplete
//  668  *
//  669  * @brief       This function frees a joining device from the list that has 
//  670  *              finished TC link key exchange process
//  671  *
//  672  * @param       JoiningExtAddr - Extended address of the device
//  673  *
//  674  * @return      none
//  675  */
//  676 void bdb_TCjoiningDeviceComplete(uint8* JoiningExtAddr)
//  677 {
//  678   bdb_joiningDeviceList_t* tempJoiningDescNode;
//  679   
//  680   if((bdb_joiningDeviceList != NULL) && (JoiningExtAddr != NULL))
//  681   {
//  682     tempJoiningDescNode = bdb_joiningDeviceList;
//  683     
//  684     while(tempJoiningDescNode != NULL)
//  685     {
//  686       if(osal_memcmp(tempJoiningDescNode->bdbJoiningNodeEui64,JoiningExtAddr,Z_EXTADDR_LEN))
//  687       {
//  688         if(pfnTCLinkKeyExchangeProcessCB)
//  689         {
//  690           bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
//  691           osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
//  692           bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_EXCH_SUCCESS;
//  693           
//  694           bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
//  695         }        
//  696         
//  697         bdb_TCJoiningDeviceFree(tempJoiningDescNode);
//  698         break;
//  699       }
//  700       tempJoiningDescNode = tempJoiningDescNode->nextDev;
//  701     }
//  702    
//  703     if(bdb_joiningDeviceList == NULL)
//  704     {
//  705       osal_stop_timerEx(bdb_TaskID,BDB_TC_JOIN_TIMEOUT);
//  706     }
//  707   }
//  708 }
//  709 
//  710 
//  711 
//  712 /****************************************************************************
//  713  * @fn          bdb_TCJoiningDeviceFree
//  714  *
//  715  * @brief       This function frees a joining device from the list.
//  716  *
//  717  * @param       ZSuccess - If the device was found and erased
//  718  * @param       ZInvalidParameter - Not found
//  719  *
//  720  * @return      none
//  721  */
//  722 ZStatus_t bdb_TCJoiningDeviceFree(bdb_joiningDeviceList_t* JoiningDeviceToRemove)
//  723 {
//  724   bdb_joiningDeviceList_t* descCurrent;
//  725   bdb_joiningDeviceList_t* descPrev;
//  726   
//  727   //validate empty list?
//  728   
//  729   //Is it the first?
//  730   if(osal_memcmp(bdb_joiningDeviceList->bdbJoiningNodeEui64, JoiningDeviceToRemove->bdbJoiningNodeEui64, Z_EXTADDR_LEN))
//  731   {
//  732     descCurrent = bdb_joiningDeviceList;
//  733     bdb_joiningDeviceList = bdb_joiningDeviceList->nextDev;
//  734     osal_mem_free( descCurrent );
//  735     return ZSuccess;
//  736   }
//  737   
//  738   descPrev = NULL;
//  739   descCurrent = bdb_joiningDeviceList;
//  740   
//  741   while(descCurrent != NULL)
//  742   {
//  743     if(osal_memcmp(descCurrent->nextDev->bdbJoiningNodeEui64, JoiningDeviceToRemove->bdbJoiningNodeEui64, Z_EXTADDR_LEN))
//  744     {
//  745       descPrev = descCurrent;
//  746       break;
//  747     }
//  748     descCurrent = descCurrent->nextDev;
//  749   }
//  750   if(descPrev == NULL)
//  751   {
//  752     //Not found
//  753     return ZInvalidParameter;
//  754   }
//  755   
//  756   descPrev->nextDev = descPrev->nextDev->nextDev;
//  757     
//  758   osal_mem_free( JoiningDeviceToRemove );
//  759   return ZSuccess;
//  760 
//  761 }
//  762 
//  763  /*********************************************************************
//  764  * @fn          bdb_setJoinUsesInstallCodeKey
//  765  *
//  766  * @brief       Set BDB attribute bdbJoinUsesInstallCodeKey.
//  767  *
//  768  * @param       set - If TRUE only devices with IC register in TC can join the 
//  769  *              nwk, otherwise devices may or not have a IC register
//  770  *
//  771  * @return      none
//  772  */
//  773 void bdb_setJoinUsesInstallCodeKey(bool set)
//  774 {
//  775   bdbAttributes.bdbJoinUsesInstallCodeKey = set;
//  776   if(set)
//  777   {
//  778     zgAllowInstallCodes = ZG_IC_MUST_USED;
//  779   }
//  780   else
//  781   {
//  782     zgAllowInstallCodes = ZG_IC_SUPPORTED_NOT_REQUIRED;
//  783   }
//  784 }
//  785 #endif
//  786 
//  787  /*********************************************************************
//  788  * @fn          bdb_StartCommissioning
//  789  *
//  790  * @brief       Start the commissioning process setting the commissioning mode given.
//  791  *
//  792  * @param       mode - refer to bdbCommissioningMode
//  793  *
//  794  * @return      none
//  795  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  796 void bdb_StartCommissioning(uint8 mode)
bdb_StartCommissioning:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function bdb_StartCommissioning
        CODE
//  797 {
        FUNCALL bdb_StartCommissioning, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_nwkSteeringDeviceOnNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_isbufset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, ZDOInitDeviceEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0,R1
//  798   //Application cannot request to set the device in initialization mode or parent lost
//  799   mode &= ~(BDB_COMMISSIONING_MODE_INITIALIZATION | BDB_COMMISSIONING_MODE_PARENT_LOST);
//  800     
//  801 #ifdef BDB_TL_INITIATOR
//  802   if ( touchlinkFNReset == TRUE )
//  803   {
//  804     return;
//  805   }
//  806 #else
//  807   //Commissioning mode used only for initiator
//  808   mode &= ~BDB_COMMISSIONING_MODE_INITIATOR_TL;
        ANL     ?V0,#0xce
//  809 #endif
//  810   
//  811 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==0)    
//  812   //Commissioning mode used only for devices with F&B
//  813   mode &= ~BDB_COMMISSIONING_MODE_FINDING_BINDING;
//  814 #endif
//  815  
//  816   //If we have running process or the machine state is triggered, then just append and it will be excecuted
//  817   if((bdbAttributes.bdbCommissioningMode) || (osal_get_timeoutEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE)))
        MOV     DPTR,#bdbAttributes + 11
        MOVX    A,@DPTR
        JNZ     ??bdb_StartCommissioning_0
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV     A,R2
        ORL     A,R3
        ORL     A,R4
        ORL     A,R5
        JZ      ??bdb_StartCommissioning_1
//  818   {
//  819 #if ZG_BUILD_ENDDEVICE_TYPE
//  820     if(ZG_DEVICE_ENDDEVICE_TYPE)
//  821     {
//  822       //Devices with parent lost are not allowed to perform actions
//  823       if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)
??bdb_StartCommissioning_0:
        MOV     DPTR,#bdbAttributes + 11
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.5
        JNC     $+5
        LJMP    ??bdb_StartCommissioning_2 & 0xFFFF
//  824       {
//  825         return;
//  826       }
//  827     }
//  828 #endif
//  829     
//  830     //If we are on the network and got requested to do nwk steering, we do not need to wait other process, 
//  831     // just send permit joining and report the application
//  832     if((bdbAttributes.bdbNodeIsOnANetwork) && (mode & BDB_COMMISSIONING_MODE_NWK_STEERING))
        MOV     DPTR,#bdbAttributes + 14
        MOVX    A,@DPTR
        JZ      ??bdb_StartCommissioning_3
        MOV     A,?V0
        MOV     C,0xE0 /* A   */.1
        JNC     ??bdb_StartCommissioning_3
//  833     {
//  834       bdb_nwkSteeringDeviceOnNwk();
        ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
        LCALL   `??bdb_nwkSteeringDeviceOnNwk::?relay`; Banked call to: bdb_nwkSteeringDeviceOnNwk
//  835       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV     R2,#0x1
        MOV     R1,#0x4
        LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
//  836       
//  837       //Clean nwk steering
//  838       mode ^= BDB_COMMISSIONING_MODE_NWK_STEERING; 
        XRL     ?V0,#0x2
//  839     }
//  840     
//  841     //add the remaining valid commissioning modes requested, those will be process when bdb finish its current process
//  842     bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
??bdb_StartCommissioning_3:
        MOV     A,#0x3f
        ANL     A,?V0
        MOV     R0,A
        MOV     DPTR,#bdbAttributes + 11
        MOVX    A,@DPTR
        ORL     A,R0
        MOVX    @DPTR,A
//  843     return;      
        LJMP    ??bdb_StartCommissioning_2 & 0xFFFF
//  844   }
//  845 
//  846   //Save the commissioning modes valid requested
//  847   bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
??bdb_StartCommissioning_1:
        MOV     A,#0x3f
        ANL     A,?V0
        MOV     R6,A
        MOV     DPTR,#bdbAttributes + 11
        MOVX    A,@DPTR
        ORL     A,R6
        MOVX    @DPTR,A
//  848   
//  849   
//  850   //Start processing the initialization, once per power cycle.
//  851   if(!bdb_initialization)
        MOV     DPTR,#bdb_initialization
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??bdb_StartCommissioning_4 & 0xFFFF
//  852   {
//  853     bdb_initialization = TRUE;
        MOV     A,#0x1
        LCALL   ?Subroutine19 & 0xFFFF
//  854     
//  855 #ifdef BDB_REPORTING
//  856     //Delete NV data if startup was with factory reset
//  857     if(ZDO_INITDEV_NEW_NETWORK_STATE == ZDApp_ReadNetworkRestoreState())
//  858     {
//  859       //Factory reset bdb reporting NV data
//  860       uint16 attrRepNvLen = osal_nv_item_len( ZCD_NV_BDBREPORTINGCONFIG );
//  861       if ( attrRepNvLen > 0 )
//  862       {
//  863         osal_nv_delete( ZCD_NV_BDBREPORTINGCONFIG, attrRepNvLen );
//  864       }
//  865     }
//  866 
//  867     //Construct the Endpoint-cluster array
//  868     bdb_RepConstructReportingData();
//  869 #endif //BDB_REPORTING
//  870 
//  871     osal_nv_read(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
??CrossCallReturnLabel_31:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V2,#0x1
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x55
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  872     
//  873     //Are we on a network
//  874     if(bdbAttributes.bdbNodeIsOnANetwork == TRUE)
        MOV     DPTR,#bdbAttributes + 14
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??bdb_StartCommissioning_4 & 0xFFFF
//  875     {
//  876 #ifdef ZG_BUILD_JOINING_TYPE
//  877       //Only for joining devices validate the joining procedure
//  878       if(ZG_DEVICE_JOINING_TYPE)
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??bdb_StartCommissioning_5
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??bdb_StartCommissioning_6 & 0xFFFF
//  879       {
//  880         //If we got into a network
//  881         if(!osal_isbufset( AIB_apsTrustCenterAddress, 0x00, Z_EXTADDR_LEN ))
??bdb_StartCommissioning_5:
        ; Setup parameters for call to function osal_isbufset
        MOV     R4,#0x8
        MOV     R1,#0x0
        MOV     DPTR,#AIB_apsTrustCenterAddress
        LCALL   ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_96:
        LCALL   `??osal_isbufset::?relay`; Banked call to: osal_isbufset
        MOV     A,R1
        JZ      $+5
        LJMP    ??bdb_StartCommissioning_6 & 0xFFFF
//  882         {
//  883           //Which is not distributed
//  884           if(!APSME_IsDistributedSecurity())
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL   `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV     A,R1
        JZ      $+5
        LJMP    ??bdb_StartCommissioning_6 & 0xFFFF
//  885           {
//  886             uint8 keyAttributes;
//  887             osal_nv_read(ZCD_NV_TCLK_TABLE_START, osal_offsetof(APSME_TCLKDevEntry_t,keyAttributes), sizeof(uint8), &keyAttributes);
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V2,#0x1
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R2,#0x11
        MOV     R3,#0x1
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  888             //And the TCLK procedure got not complete, then reset the device parameters to FN
//  889             if((keyAttributes != ZG_NON_R21_NWK_JOINED) && (keyAttributes != ZG_VERIFIED_KEY))
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0xfd
        JNZ     $+5
        LJMP    ??bdb_StartCommissioning_6 & 0xFFFF
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??bdb_StartCommissioning_6
//  890             {
//  891               //Force to initialize the entry
//  892               APSME_TCLKDevEntry_t APSME_TCLKDevEntry;
//  893               
//  894               osal_memset(&APSME_TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x13
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  895               APSME_TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  896               osal_nv_write(ZCD_NV_TCLK_TABLE_START, 0, sizeof(APSME_TCLKDevEntry_t), &APSME_TCLKDevEntry);
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V2,#0x13
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x11
        MOV     R3,#0x1
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  897               TCLinkKeyFrmCntr[0].txFrmCntr = 0;
        MOV     DPTR,#TCLinkKeyFrmCntr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  898               TCLinkKeyFrmCntr[0].rxFrmCntr = 0;
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  899               
//  900               
//  901               //reset the device parameters to FN
//  902               bdbAttributes.bdbNodeIsOnANetwork = FALSE;
        MOV     DPTR,#bdbAttributes + 14
        LCALL   ?Subroutine19 & 0xFFFF
//  903               osal_nv_write(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
??CrossCallReturnLabel_32:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V2,#0x1
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x55
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  904               zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x3
        MOV     R1,#-0x1
        LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  905               
//  906               //Then start the commissioning process requested
//  907               bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
        SJMP    ??bdb_StartCommissioning_4
//  908               osal_set_event( bdb_TaskID, BDB_CHANGE_COMMISSIONING_STATE );
//  909               return;
//  910             }
//  911           }
//  912         }
//  913       }
//  914 #endif //ZG_BUILD_JOINING_TYPE
//  915 
//  916       //Set the initialization
//  917       bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_INITIALIZATION;
//  918       bdbCommissioningProcedureState.bdbCommissioningState = BDB_INITIALIZATION;
??bdb_StartCommissioning_6:
        MOV     DPTR,#bdbCommissioningProcedureState
        MOV     A,#0x7
        MOVX    @DPTR,A
//  919       bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
        MOV     A,#0x10
        ORL     A,R6
        MOV     R0,A
        MOV     DPTR,#bdbAttributes + 11
        MOVX    A,@DPTR
        ORL     A,R0
        MOVX    @DPTR,A
//  920       
//  921       if(ZDOInitDevice(0) == ZDO_INITDEV_RESTORED_NETWORK_STATE)
        ; Setup parameters for call to function ZDOInitDeviceEx
        MOV     R1,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
        MOV     A,R1
        JZ      ??bdb_StartCommissioning_2
//  922       {
//  923 #ifdef BDB_REPORTING
//  924         //Mark the clusterEndpoint entries that have binding, starts reporting if at least one entry was marked
//  925         bdb_RepUpdateMarkBindings();
//  926 #endif
//  927         return;
//  928       }
//  929       bdb_setNodeIsOnANetwork(FALSE);  
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV     R1,#0x0
        LCALL   `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
//  930       //Not in the network
//  931       bdb_reportCommissioningState(BDB_INITIALIZATION,FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV     R2,#0x0
        MOV     R1,#0x7
        LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
//  932       return;
        SJMP    ??bdb_StartCommissioning_2
//  933     }
//  934   }
//  935   
//  936   //Start the commissioning process
//  937   bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
??bdb_StartCommissioning_4:
        MOV     DPTR,#bdbCommissioningProcedureState
        CLR     A
        MOVX    @DPTR,A
//  938   osal_set_event( bdb_TaskID, BDB_CHANGE_COMMISSIONING_STATE );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x4
        MOV     R3,A
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
//  939 }
??bdb_StartCommissioning_2:
        MOV     A,#0x14
        LJMP    ??Subroutine35_0 & 0xFFFF
          CFI EndBlock cfiBlock8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function bdb_StartCommissioning
          CFI Conditional ??CrossCallReturnLabel_31
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function bdb_StartCommissioning
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker11 Using cfiCommon1
          CFI (cfiPicker11) NoFunction
          CFI (cfiPicker11) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_nv_read
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V2,#(bdbAttributes + 14) & 0xff
        MOV     ?V3,#((bdbAttributes + 14) >> 8) & 0xff
        MOV     R0,#?V2
        RET
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiPicker11
//  940 
//  941 
//  942  /*********************************************************************
//  943  * @fn          bdb_NotifyCommissioningModeStart
//  944  *
//  945  * @brief       Notify the user about a commissioning method just started
//  946  *
//  947  * @param       commissioningMode
//  948  *
//  949  * @return      none
//  950  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  951 void bdb_NotifyCommissioningModeStart(uint8 commissioningMode)
bdb_NotifyCommissioningModeStart:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function bdb_NotifyCommissioningModeStart
        CODE
//  952 {
        FUNCALL bdb_NotifyCommissioningModeStart, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  953   bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
//  954 
//  955   bdbCommissioningModeMsg.bdbCommissioningMode = commissioningMode;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        LCALL   ?Subroutine20 & 0xFFFF
//  956   bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_IN_PROGRESS;
??CrossCallReturnLabel_33:
        LCALL   ?Subroutine17 & 0xFFFF
//  957   //Remaining commissioning modes are set just before the call to the application to avoid race conditions
//  958 
//  959   bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
??CrossCallReturnLabel_25:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x3
        MOV     R3,#0x0
        MOV     R2,#0xa
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  960 }
        MOV     A,#0x3
        LJMP    ??Subroutine40_0 & 0xFFFF
          CFI EndBlock cfiBlock12
//  961 
//  962 
//  963 
//  964 #if (ZG_BUILD_JOINING_TYPE)
//  965  /*********************************************************************
//  966  * @fn          bdb_setNodeJoinLinkKeyType
//  967  *
//  968  * @brief       Set the key type in use in the network joined. Global centralized key is used by default
//  969  *
//  970  * @param       none
//  971  *
//  972  * @return      none
//  973  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  974 void bdb_setNodeJoinLinkKeyType(uint8 KeyType)
bdb_setNodeJoinLinkKeyType:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function bdb_setNodeJoinLinkKeyType
        CODE
//  975 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  976   bdbAttributes.bdbNodeJoinLinkKeyType = KeyType;
        MOV     A,R1
        MOV     DPTR,#bdbAttributes + 15
        LJMP    ??Subroutine33_0 & 0xFFFF
//  977 }
          CFI EndBlock cfiBlock13
//  978 #endif
//  979 
//  980  /*********************************************************************
//  981  * @fn          bdb_setFN
//  982  *
//  983  * @brief       Set configuration for FN. This FN configuration will be perfome 
//  984  *              upon call to ZDOInitDevice
//  985  *
//  986  * @param       none
//  987  *
//  988  * @return      none
//  989  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  990 void bdb_setFN(void)
bdb_setFN:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function bdb_setFN
        CODE
//  991 {
        FUNCALL bdb_setFN, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_setFN, zgWriteStartupOptions
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  992   bdb_setNodeIsOnANetwork(FALSE);
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV     R1,#0x0
        LCALL   `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
//  993 
//  994 #if defined ( INTER_PAN ) && defined ( BDB_TL_INITIATOR )
//  995     touchLink_InitFreeRanges( TRUE );
//  996     touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
//  997 #endif
//  998 #if defined ( INTER_PAN ) && defined ( BDB_TL_TARGET ) 
//  999     touchLink_InitFreeRanges( FALSE );
// 1000     touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
// 1001 #endif
// 1002 
// 1003   //Set the device as factory new
// 1004   zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x3
        MOV     R1,#-0x1
        LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
// 1005 }
        LJMP    ??Subroutine34_0 & 0xFFFF
          CFI EndBlock cfiBlock14
// 1006 
// 1007  /*********************************************************************
// 1008  * @fn          bdb_resetLocalAction
// 1009  *
// 1010  * @brief       Application interface to perform BDB Reset to FN.
// 1011  *
// 1012  * @param       none
// 1013  *
// 1014  * @return      none
// 1015  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1016 void bdb_resetLocalAction(void)
bdb_resetLocalAction:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function bdb_resetLocalAction
        CODE
// 1017 {
        FUNCALL bdb_resetLocalAction, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_resetLocalAction, bdb_setFN
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_resetLocalAction, NLME_LeaveReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_resetLocalAction, bdb_setFN
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_resetLocalAction, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 5)
// 1018   //Process reset as nwk leave if the device is on the network and is able to process it
// 1019   if((ZG_BUILD_JOINING_TYPE) && (bdbAttributes.bdbNodeIsOnANetwork) && (!(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)))
        MOV     DPTR,#bdbAttributes + 14
        MOVX    A,@DPTR
        JZ      ??bdb_resetLocalAction_0
        MOV     DPTR,#bdbAttributes + 11
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.5
        JC      ??bdb_resetLocalAction_0
// 1020   {
// 1021     NLME_LeaveReq_t leaveReq;
// 1022     // Set every field to 0
// 1023     osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1024     
// 1025     bdb_setFN();
        ; Setup parameters for call to function bdb_setFN
        LCALL   `??bdb_setFN::?relay`; Banked call to: bdb_setFN
// 1026       
// 1027     NLME_LeaveReq( &leaveReq );
        ; Setup parameters for call to function NLME_LeaveReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
// 1028     
// 1029     return;
        SJMP    ??bdb_resetLocalAction_1
// 1030   }
// 1031   else
// 1032   {
// 1033     bdb_setFN();
??bdb_resetLocalAction_0:
        ; Setup parameters for call to function bdb_setFN
        LCALL   `??bdb_setFN::?relay`; Banked call to: bdb_setFN
// 1034     
// 1035     ZDApp_ResetTimerStart( 500 );
        ; Setup parameters for call to function ZDApp_ResetTimerStart
        MOV     R2,#-0xc
        MOV     R3,#0x1
        LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
// 1036   }
// 1037 }
??bdb_resetLocalAction_1:
        MOV     A,#0x5
          CFI EndBlock cfiBlock15
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 5)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
          CFI Valid
        LJMP    ??Subroutine34_0 & 0xFFFF
          CFI EndBlock cfiBlock16
// 1038 
// 1039 
// 1040  /*********************************************************************
// 1041  * @fn          bdb_parentLost
// 1042  *
// 1043  * @brief       Notify bdb that connection with parent is lost
// 1044  *
// 1045  * @return      none
// 1046  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1047 void bdb_parentLost(void)
bdb_parentLost:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function bdb_parentLost
        CODE
// 1048 {
        FUNCALL bdb_parentLost, bdb_nwkDescFree
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_parentLost, nwk_desc_list_free
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_parentLost, bdb_reportCommissioningState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_parentLost, NLME_OrphanStateSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_parentLost, ZDApp_ChangeState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_parentLost, bdb_reportCommissioningState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1049 #if ZG_BUILD_ENDDEVICE_TYPE
// 1050   if(ZG_DEVICE_ENDDEVICE_TYPE)
        SJMP    ??bdb_parentLost_0
// 1051   {
// 1052     while(pBDBListNwk)
// 1053     {
// 1054       bdb_nwkDescFree(pBDBListNwk);
??bdb_parentLost_1:
        ; Setup parameters for call to function bdb_nwkDescFree
        LCALL   ??Subroutine43_0 & 0xFFFF
// 1055     }
??CrossCallReturnLabel_103:
        LCALL   `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
??bdb_parentLost_0:
        MOV     DPTR,#pBDBListNwk
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_73:
        JNZ     ??bdb_parentLost_1
// 1056     
// 1057     nwk_desc_list_free();  
        ; Setup parameters for call to function nwk_desc_list_free
        LCALL   `??nwk_desc_list_free::?relay`; Banked call to: nwk_desc_list_free
// 1058     if(bdbCommissioningProcedureState.bdbCommissioningState != BDB_PARENT_LOST)
        MOV     DPTR,#bdbCommissioningProcedureState
        MOVX    A,@DPTR
        XRL     A,#0x8
        JZ      ??bdb_parentLost_2
// 1059     {
// 1060       //If parent lost during TCLK exchange, then report TCLK exchange fail
// 1061       if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE)
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bdb_parentLost_3
// 1062       {
// 1063         bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV     R2,#0x0
        MOV     R1,#0x1
        SJMP    ??bdb_parentLost_4
// 1064         return;
// 1065       }
// 1066       bdbCommissioningProcedureState.bdb_ParentLostSavedState = bdbCommissioningProcedureState.bdbCommissioningState;
??bdb_parentLost_3:
        MOVX    A,@DPTR
        MOV     DPTR,#bdbCommissioningProcedureState + 3
        MOVX    @DPTR,A
// 1067       
// 1068     }
// 1069     bdbCommissioningProcedureState.bdbCommissioningState = BDB_PARENT_LOST;
??bdb_parentLost_2:
        MOV     DPTR,#bdbCommissioningProcedureState
        MOV     A,#0x8
        MOVX    @DPTR,A
// 1070     NLME_OrphanStateSet();
        ; Setup parameters for call to function NLME_OrphanStateSet
        LCALL   `??NLME_OrphanStateSet::?relay`; Banked call to: NLME_OrphanStateSet
// 1071     ZDApp_ChangeState( DEV_NWK_ORPHAN );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV     R1,#0xa
        LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1072     bdb_reportCommissioningState(BDB_PARENT_LOST,FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV     R2,#0x0
        MOV     R1,#0x8
??bdb_parentLost_4:
        LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 1073   }
// 1074 #endif
// 1075 }
        SJMP    ??Subroutine34_0
          CFI EndBlock cfiBlock17
// 1076 
// 1077 
// 1078 
// 1079 
// 1080 
// 1081  /*********************************************************************
// 1082  * @fn          bdb_NetworkRestoredResumeState
// 1083  *
// 1084  * @brief       Restore the state of child device after parent lost
// 1085  *
// 1086  * @return      none
// 1087  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1088 void bdb_NetworkRestoredResumeState(void)
bdb_NetworkRestoredResumeState:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function bdb_NetworkRestoredResumeState
        CODE
// 1089 {
        FUNCALL bdb_NetworkRestoredResumeState, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1090 #if ZG_BUILD_ENDDEVICE_TYPE
// 1091   if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1092   {
// 1093     uint8 restoreSimpleDesc = FALSE;
        MOV     R2,#0x0
// 1094     //If restored when F&B still enabled, then restore the simple descriptors attempts
// 1095     if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
        MOV     DPTR,#bdbCommissioningProcedureState
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??bdb_NetworkRestoredResumeState_0
// 1096     {
// 1097       bdbFindingBindingRespondent_t  *pRespondentTemp = NULL;
// 1098       
// 1099       pRespondentTemp = pRespondentHead;
        MOV     DPTR,#pRespondentHead
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        SJMP    ??bdb_NetworkRestoredResumeState_1
// 1100       
// 1101       while(pRespondentTemp != NULL)
// 1102       {
// 1103         if(pRespondentTemp->attempts == BDB_SIMPLE_DESC_PENDING_PARENT_LOST)
??bdb_NetworkRestoredResumeState_2:
        MOV     A,R0
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??bdb_NetworkRestoredResumeState_3
// 1104         {
// 1105           pRespondentTemp->attempts = 0;
        CLR     A
        MOVX    @DPTR,A
// 1106           restoreSimpleDesc = TRUE;
        MOV     R2,#0x1
// 1107         }
// 1108         pRespondentTemp = pRespondentTemp->pNext;
??bdb_NetworkRestoredResumeState_3:
        LCALL   ?Subroutine30 & 0xFFFF
// 1109       }
??CrossCallReturnLabel_56:
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
??bdb_NetworkRestoredResumeState_1:
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??bdb_NetworkRestoredResumeState_2
// 1110     }
// 1111     if(restoreSimpleDesc)
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        JNC     ??bdb_NetworkRestoredResumeState_0
// 1112     {
// 1113       //Restore the simple Descriptor sending after 1 second of restoring the network
// 1114       osal_start_timerEx(bdb_TaskID,BDB_RESPONDENT_SIMPLEDESC_TIMEOUT, 1000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 4)
        MOV     R2,#0x0
        MOV     R3,#0x40
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
// 1115     }
// 1116   }
// 1117 #endif
// 1118 }
??bdb_NetworkRestoredResumeState_0:
        SJMP    ??Subroutine34_0
          CFI EndBlock cfiBlock18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
          CFI EndBlock cfiBlock19
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine33_0:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOVX    @DPTR,A
          CFI EndBlock cfiBlock20
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine34_0:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock21
// 1119 
// 1120 #if ZG_BUILD_ENDDEVICE_TYPE
// 1121  /*********************************************************************
// 1122  * @fn          bdb_ZedAttemptRecoverNwk
// 1123  *
// 1124  * @brief       Instruct the ZED to try to rejoin its previews network
// 1125  *
// 1126  * @return      success if the attempt is being excecuted
// 1127  *              False if device do not have nwk parameters to perform this action
// 1128  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1129 uint8 bdb_ZedAttemptRecoverNwk(void)
bdb_ZedAttemptRecoverNwk:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function bdb_ZedAttemptRecoverNwk
        CODE
// 1130 {
        FUNCALL bdb_ZedAttemptRecoverNwk, ZDOInitDeviceEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1131   if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1132   {
// 1133     if(bdbAttributes.bdbNodeIsOnANetwork)
        MOV     DPTR,#bdbAttributes + 14
        MOVX    A,@DPTR
        JZ      ??bdb_ZedAttemptRecoverNwk_0
// 1134     {
// 1135       if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST)
        MOV     DPTR,#bdbCommissioningProcedureState
        MOVX    A,@DPTR
        XRL     A,#0x8
        JNZ     ??bdb_ZedAttemptRecoverNwk_0
// 1136       {
// 1137         if(ZDOInitDevice(0) == ZDO_INITDEV_RESTORED_NETWORK_STATE)
        ; Setup parameters for call to function ZDOInitDeviceEx
        MOV     R1,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
        MOV     A,R1
        JNZ     ??bdb_ZedAttemptRecoverNwk_0
// 1138         {
// 1139           return ZSuccess;
        MOV     R1,#0x0
        SJMP    ??bdb_ZedAttemptRecoverNwk_1
// 1140         }
// 1141       }
// 1142     }
// 1143   }
// 1144   return ZFailure;
??bdb_ZedAttemptRecoverNwk_0:
        MOV     R1,#0x1
??bdb_ZedAttemptRecoverNwk_1:
        SJMP    ??Subroutine34_0
// 1145 }
          CFI EndBlock cfiBlock22
// 1146 
// 1147 #endif
// 1148 
// 1149  /*********************************************************************
// 1150  * @fn          bdb_reportCommissioningState
// 1151  *
// 1152  * @brief       Process the result of a BDB main state attempt.
// 1153  *
// 1154  * @param       bdbCommissioningState - MainState that is issuing fail
// 1155  * @param       didSuccess - TRUE if the main state were success, FALSE otherwise
// 1156  *
// 1157  * @return      none
// 1158  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1159 void bdb_reportCommissioningState(uint8 bdbCommissioningState,bool didSuccess)
bdb_reportCommissioningState:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function bdb_reportCommissioningState
        CODE
// 1160 {
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_nwkDescFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_setFN
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, NLME_ResetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_nwkDescFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_getRespondentRetry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_zclRespondentListClean
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, nwk_setStateIdle
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_RestoreNwkSecMaterial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_NetworkRestoredResumeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
// 1161   bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
// 1162   //Process only if we are in that state, or if we are on parent lost and processing F&B
// 1163   if((bdbCommissioningProcedureState.bdbCommissioningState == bdbCommissioningState)
// 1164      || ((bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST) && (bdbCommissioningProcedureState.bdb_ParentLostSavedState == BDB_COMMISSIONING_STATE_FINDING_BINDING)))
        MOV     DPTR,#bdbCommissioningProcedureState
        MOVX    A,@DPTR
        XRL     A,R6
        JZ      ??bdb_reportCommissioningState_0
        MOVX    A,@DPTR
        XRL     A,#0x8
        JZ      $+5
        LJMP    ??bdb_reportCommissioningState_1 & 0xFFFF
        MOV     DPTR,#bdbCommissioningProcedureState + 3
        MOVX    A,@DPTR
        XRL     A,#0x6
        JZ      $+5
        LJMP    ??bdb_reportCommissioningState_1 & 0xFFFF
// 1165   {
// 1166     switch(bdbCommissioningState)
??bdb_reportCommissioningState_0:
        MOV     A,R6
        DEC     A
        JNZ     $+5
        LJMP    ??bdb_reportCommissioningState_2 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??bdb_reportCommissioningState_3 & 0xFFFF
        DEC     A
        JZ      ??bdb_reportCommissioningState_4
        DEC     A
        JNZ     $+5
        LJMP    ??bdb_reportCommissioningState_5 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??bdb_reportCommissioningState_6 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??bdb_reportCommissioningState_7 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??bdb_reportCommissioningState_8 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??bdb_reportCommissioningState_9 & 0xFFFF
        LJMP    ??bdb_reportCommissioningState_10 & 0xFFFF
// 1167     {
// 1168 #if (ZG_BUILD_JOINING_TYPE)
// 1169       case BDB_COMMISSIONING_STATE_JOINING:
// 1170         if(ZG_DEVICE_JOINING_TYPE)
??bdb_reportCommissioningState_4:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??bdb_reportCommissioningState_11
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??bdb_reportCommissioningState_10 & 0xFFFF
// 1171         {
// 1172           //Prepare for the next state or commissioning mode to be excecuted
// 1173           osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
??bdb_reportCommissioningState_11:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_32
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 1174 
// 1175           if(didSuccess)
        MOV     A,R7
        JZ      ??bdb_reportCommissioningState_12
// 1176           {
// 1177             //Next state is TC link key exchange
// 1178             bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE;
        MOV     DPTR,#bdbCommissioningProcedureState
        MOV     A,#0x1
        MOVX    @DPTR,A
        SJMP    ??bdb_reportCommissioningState_13
// 1179             //Free the list of nwk discovered
// 1180             while(pBDBListNwk)
// 1181             {
// 1182               bdb_nwkDescFree(pBDBListNwk);
??bdb_reportCommissioningState_14:
        ; Setup parameters for call to function bdb_nwkDescFree
        LCALL   ??Subroutine43_0 & 0xFFFF
// 1183             }
??CrossCallReturnLabel_104:
        LCALL   `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
??bdb_reportCommissioningState_13:
        MOV     DPTR,#pBDBListNwk
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_74:
        JNZ     ??bdb_reportCommissioningState_14
// 1184             
// 1185             //Set the poll rate of the ZED joining device to 1 second to allow TCLK 
// 1186             //exchange be perfomed successfully in cases in which application has a 
// 1187             //slow pollrate
// 1188             NLME_SetPollRate(TCLK_POLL_RATE);
        ; Setup parameters for call to function NLME_SetPollRate
        MOV     DPTR,#__Constant_3e8
        LCALL   ?XLOAD_R2345
        LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1189             
// 1190             //No notification in this step
// 1191             return;
        LJMP    ??bdb_reportCommissioningState_1 & 0xFFFF
// 1192           } 
// 1193           else
// 1194           {
// 1195             uint8 temp = FALSE;
??bdb_reportCommissioningState_12:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1196             //If fail, then restore poll rate
// 1197             NLME_SetPollRate(POLL_RATE);
        ; Setup parameters for call to function NLME_SetPollRate
        MOV     DPTR,#__Constant_3e8
        LCALL   ?XLOAD_R2345
        LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1198             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
        MOV     DPTR,#bdbAttributes + 10
        MOV     A,#0x2
        MOVX    @DPTR,A
// 1199             bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
        DEC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        LCALL   ?Subroutine22 & 0xFFFF
// 1200             bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
// 1201             bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_STEERING;
??CrossCallReturnLabel_35:
        MOV     DPTR,#bdbAttributes + 11
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.1
        MOVX    @DPTR,A
// 1202             
// 1203             //Turn off the radio
// 1204             ZMacSetReq(ZMacRxOnIdle, &temp);
        ; Setup parameters for call to function ZMacSetReq
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP101_8
        MOV     R1,#0x52
        LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
// 1205             //Set the device to FN, to start as new for subsequent attempts
// 1206             bdb_setFN();
        ; Setup parameters for call to function bdb_setFN
        LCALL   `??bdb_setFN::?relay`; Banked call to: bdb_setFN
// 1207             NLME_ResetRequest();
        ; Setup parameters for call to function NLME_ResetRequest
        LCALL   `??NLME_ResetRequest::?relay`; Banked call to: NLME_ResetRequest
// 1208             ZDApp_ChangeState( DEV_HOLD );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV     R1,#0x0
        LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1209             
// 1210             //Free the list of nwk discovered
// 1211             while(pBDBListNwk)
??bdb_reportCommissioningState_15:
        MOV     DPTR,#pBDBListNwk
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_75:
        JNZ     $+5
        LJMP    ??bdb_reportCommissioningState_10 & 0xFFFF
// 1212             {
// 1213               bdb_nwkDescFree(pBDBListNwk);
        ; Setup parameters for call to function bdb_nwkDescFree
        LCALL   ??Subroutine43_0 & 0xFFFF
// 1214             }
// 1215           }
// 1216         }
??CrossCallReturnLabel_105:
        LCALL   `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
        SJMP    ??bdb_reportCommissioningState_15
// 1217       break;
// 1218 
// 1219       case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
// 1220         if(ZG_DEVICE_JOINING_TYPE)
??bdb_reportCommissioningState_2:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??bdb_reportCommissioningState_16
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??bdb_reportCommissioningState_10 & 0xFFFF
// 1221         {
// 1222           if(didSuccess)
??bdb_reportCommissioningState_16:
        MOV     A,R7
        JZ      ??bdb_reportCommissioningState_17
// 1223           {
// 1224             //Next state is nwk steering on the nwk (permit joining)
// 1225             bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_STEERING_ON_NWK;
        MOV     DPTR,#bdbCommissioningProcedureState
        MOV     A,#0x4
        MOVX    @DPTR,A
// 1226             osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE, 50);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_32
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 1227             
// 1228             //Set the poll rate to the application default after TCLK success
// 1229             NLME_SetPollRate(POLL_RATE);
        ; Setup parameters for call to function NLME_SetPollRate
        MOV     DPTR,#__Constant_3e8
        LCALL   ?XLOAD_R2345
        LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1230 
// 1231             osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x0
        MOV     R3,#0x10
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 1232             //No notification to the user is needed
// 1233             return;
        LJMP    ??bdb_reportCommissioningState_1 & 0xFFFF
// 1234           }
// 1235           else
// 1236           {
// 1237             bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
??bdb_reportCommissioningState_17:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1238             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_TCLK_EX_FAILURE;
        MOV     DPTR,#bdbAttributes + 10
        MOV     A,#0x7
        MOVX    @DPTR,A
// 1239             
// 1240             osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x0
        MOV     R3,#0x10
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 1241            
// 1242             //No process shall be attempted after this fail
// 1243             bdbAttributes.bdbCommissioningMode = 0;
        MOV     DPTR,#bdbAttributes + 11
        CLR     A
        MOVX    @DPTR,A
// 1244             
// 1245             //Fill the context for the user notification
// 1246             osal_start_timerEx(bdb_TaskID,BDB_TC_LINK_KEY_EXCHANGE_FAIL,BDB_TC_LINK_KEY_EXCHANGE_FAIL_LEAVE_TIMEOUT);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_1388
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        LJMP    ??bdb_reportCommissioningState_10 & 0xFFFF
// 1247           }
// 1248         }
// 1249       break;
// 1250 #endif
// 1251       
// 1252       case BDB_COMMISSIONING_STATE_STEERING_ON_NWK:
// 1253         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
??bdb_reportCommissioningState_5:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1254         if(didSuccess)
        MOV     A,R7
        JZ      ??bdb_reportCommissioningState_18
// 1255         {
// 1256           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
        MOV     DPTR,#bdbAttributes + 10
        CLR     A
        MOVX    @DPTR,A
// 1257           
// 1258 #if (ZG_BUILD_RTR_TYPE)          
// 1259           //Update ZDApp state
// 1260           if(ZG_DEVICE_RTRONLY_TYPE)
// 1261           {          
// 1262             ZDApp_ChangeState( DEV_ROUTER );
// 1263           }
// 1264 #endif
// 1265 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 1266           if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1267           {
// 1268             ZDApp_ChangeState( DEV_END_DEVICE );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV     R1,#0x6
        LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1269           }
// 1270 #endif
// 1271         }
// 1272 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1273         else
// 1274         {
// 1275           if(ZG_DEVICE_COORDINATOR_TYPE)
// 1276           {
// 1277             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
// 1278           }
// 1279         }
// 1280 #endif
// 1281         
// 1282         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
??bdb_reportCommissioningState_18:
        MOV     DPTR,#bdbCommissioningProcedureState
        CLR     A
        MOVX    @DPTR,A
// 1283         osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_32
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 1284         bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_STEERING;
        MOV     DPTR,#bdbAttributes + 11
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.1
        LJMP    ??CrossCallReturnLabel_22 & 0xFFFF
// 1285       break;
// 1286       
// 1287       case BDB_COMMISSIONING_STATE_FORMATION:
// 1288         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FORMATION;
??bdb_reportCommissioningState_6:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 1289 
// 1290         if(didSuccess)
        MOV     A,R7
        MOV     DPTR,#bdbAttributes + 10
        JZ      ??bdb_reportCommissioningState_19
// 1291         {
// 1292           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
        CLR     A
        SJMP    ??bdb_reportCommissioningState_20
// 1293 
// 1294            //Update ZDApp State
// 1295 #if (ZG_BUILD_RTR_TYPE)
// 1296           if(ZG_DEVICE_RTRONLY_TYPE)
// 1297           {          
// 1298             ZDApp_ChangeState( DEV_ROUTER );
// 1299           }
// 1300 #endif    
// 1301 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1302           if(ZG_DEVICE_COORDINATOR_TYPE)
// 1303           {          
// 1304             ZDApp_ChangeState( DEV_ZB_COORD );
// 1305           }     
// 1306 #endif
// 1307         }
// 1308         else
// 1309         {
// 1310           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_FORMATION_FAILURE;
??bdb_reportCommissioningState_19:
        MOV     A,#0x8
// 1311           //If not on the nwk, then restart the nwk parameters
// 1312 #if (ZG_BUILD_RTR_TYPE)
// 1313           if(ZG_DEVICE_RTR_TYPE)
// 1314           {           
// 1315             if(!bdbAttributes.bdbNodeIsOnANetwork)
// 1316             {
// 1317               uint8 temp = FALSE;
// 1318               //Turn off the radio
// 1319               ZMacSetReq(ZMacRxOnIdle, &temp);
// 1320               //Set the device to FN, to start as new for subsequent attempts
// 1321               bdb_setFN();
// 1322               NLME_ResetRequest();
// 1323               ZDApp_ChangeState( DEV_HOLD );
// 1324             }
// 1325           }
// 1326 #endif
// 1327         }
??bdb_reportCommissioningState_20:
        LCALL   ?Subroutine22 & 0xFFFF
// 1328         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
// 1329         osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
??CrossCallReturnLabel_36:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_32
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 1330         bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_FORMATION;
        MOV     DPTR,#bdbAttributes + 11
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.2
        LJMP    ??CrossCallReturnLabel_22 & 0xFFFF
// 1331       break;  
// 1332       
// 1333 
// 1334       case BDB_COMMISSIONING_STATE_FINDING_BINDING:
// 1335 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
// 1336         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
??bdb_reportCommissioningState_7:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1337 
// 1338         //Do not notify the status if we have another identify to send
// 1339         if(bdbAttributes.bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
        MOV     DPTR,#bdbAttributes + 10
        MOVX    A,@DPTR
        JNZ     ??bdb_reportCommissioningState_21
// 1340         {
// 1341           //Success at least once during F&B as initiator, mark it
// 1342           bdb_FBStateSuccessLatch = TRUE;
        MOV     DPTR,#bdb_FBStateSuccessLatch
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1343         }        
// 1344         
// 1345         //Will we process another indentify?
// 1346         if(((FINDING_AND_BINDING_PERIODIC_ENABLE == FALSE) || (bdb_FB_InitiatorCurrentCyclesNumber == 0)) && (bdb_getRespondentRetry(pRespondentHead) == NULL) && (osal_get_timeoutEx( bdb_TaskID, BDB_RESPONDENT_SIMPLEDESC_TIMEOUT) == 0))
??bdb_reportCommissioningState_21:
        MOV     DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??bdb_reportCommissioningState_1 & 0xFFFF
        ; Setup parameters for call to function bdb_getRespondentRetry
        MOV     DPTR,#pRespondentHead
        LCALL   ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_97:
        LCALL   `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      $+5
        LJMP    ??bdb_reportCommissioningState_1 & 0xFFFF
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV     R2,#0x0
        MOV     R3,#0x40
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV     A,R2
        ORL     A,R3
        ORL     A,R4
        ORL     A,R5
        JZ      $+5
        LJMP    ??bdb_reportCommissioningState_1 & 0xFFFF
// 1347         {
// 1348           // Dealocate respondent list and clean all the F&B process
// 1349           pRespondentCurr = NULL;
        MOV     DPTR,#pRespondentCurr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1350           pRespondentNext = NULL;
        MOV     DPTR,#pRespondentNext
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1351           bdb_zclRespondentListClean( &pRespondentHead );
        ; Setup parameters for call to function bdb_zclRespondentListClean
        MOV     R2,#pRespondentHead & 0xff
        MOV     R3,#(pRespondentHead >> 8) & 0xff
        LCALL   `??bdb_zclRespondentListClean::?relay`; Banked call to: bdb_zclRespondentListClean
// 1352           osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_SIMPLEDESC_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x0
        MOV     R3,#0x40
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 1353           
// 1354           //Report success if in any of the attempts we got success, regardless that we did receive no rsp on the last attempt
// 1355           if(bdb_FBStateSuccessLatch && (bdbAttributes.bdbCommissioningStatus == BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE))
        MOV     DPTR,#bdb_FBStateSuccessLatch
        MOVX    A,@DPTR
        JZ      ??bdb_reportCommissioningState_22
        MOV     DPTR,#bdbAttributes + 10
        MOVX    A,@DPTR
        XRL     A,#0xb
        JNZ     ??bdb_reportCommissioningState_22
// 1356           {
// 1357             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
        CLR     A
        MOVX    @DPTR,A
// 1358           }
// 1359           
// 1360           //Set default state
// 1361           bdb_FBStateSuccessLatch = FALSE;
??bdb_reportCommissioningState_22:
        MOV     DPTR,#bdb_FBStateSuccessLatch
        CLR     A
        MOVX    @DPTR,A
// 1362           
// 1363           //Resume BDB machine state only if we were in F&B, if we were on parent lost, only clean the commissioning mode and remove from bdb_ParentLostSavedState
// 1364           if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
        MOV     DPTR,#bdbCommissioningProcedureState
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??bdb_reportCommissioningState_23
// 1365           {
// 1366             bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
        CLR     A
        MOVX    @DPTR,A
// 1367             osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50); 
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_32
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        SJMP    ??bdb_reportCommissioningState_24
// 1368           }
// 1369           else if(bdbCommissioningProcedureState.bdb_ParentLostSavedState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
??bdb_reportCommissioningState_23:
        MOV     DPTR,#bdbCommissioningProcedureState + 3
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??bdb_reportCommissioningState_24
// 1370           {
// 1371             bdbCommissioningProcedureState.bdb_ParentLostSavedState = BDB_COMMISSIONING_STATE_START_RESUME;
        CLR     A
        MOVX    @DPTR,A
// 1372           }
// 1373           
// 1374           bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_FINDING_BINDING;
??bdb_reportCommissioningState_24:
        MOV     DPTR,#bdbAttributes + 11
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.3
        LJMP    ??CrossCallReturnLabel_22 & 0xFFFF
// 1375         }
// 1376         else
// 1377         {
// 1378           return;
// 1379         }
// 1380 
// 1381 #endif
// 1382       break;     
// 1383       case BDB_COMMISSIONING_STATE_TL:
// 1384         // Set NWK task to run
// 1385         nwk_setStateIdle( FALSE );
??bdb_reportCommissioningState_3:
        ; Setup parameters for call to function nwk_setStateIdle
        MOV     R1,#0x0
        LCALL   `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
// 1386         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_TOUCHLINK;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
// 1387         if(didSuccess)
        MOV     A,R7
        JZ      ??bdb_reportCommissioningState_25
// 1388         {
// 1389           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
        MOV     DPTR,#bdbAttributes + 10
        CLR     A
        MOVX    @DPTR,A
// 1390           bdbAttributes.bdbCommissioningMode = BDB_COMMISSIONING_MODE_IDDLE;
        INC     DPTR
        MOVX    @DPTR,A
// 1391           
// 1392           //Update ZDApp state
// 1393 #if (ZG_BUILD_RTR_TYPE)
// 1394           if(ZG_DEVICE_RTRONLY_TYPE)
// 1395           {          
// 1396             ZDApp_ChangeState( DEV_ROUTER );
// 1397           }
// 1398 #endif
// 1399 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 1400           if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1401           {
// 1402             ZDApp_ChangeState( DEV_END_DEVICE );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV     R1,#0x6
        LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1403           }
// 1404 #endif          
// 1405         }
// 1406         //The fail status is already set from the calling function to report commissioning process
// 1407         
// 1408         // The commissioning FAIL status is set before calling the bdb_reportCommissioningState
// 1409         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
??bdb_reportCommissioningState_25:
        MOV     DPTR,#bdbCommissioningProcedureState
        CLR     A
        MOVX    @DPTR,A
// 1410         osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50); 
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_32
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 1411         //Clear the event
// 1412         bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_INITIATOR_TL;
        MOV     DPTR,#bdbAttributes + 11
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.0
        LJMP    ??CrossCallReturnLabel_22 & 0xFFFF
// 1413         
// 1414       break;
// 1415       
// 1416       case BDB_INITIALIZATION:
// 1417         //Notify user about successfull initialization
// 1418         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_INITIALIZATION;
??bdb_reportCommissioningState_8:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1419         if(didSuccess)
        MOV     A,R7
        JZ      ??bdb_reportCommissioningState_26
// 1420         {
// 1421           //Update ZDApp state
// 1422 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1423           if(ZG_DEVICE_COORDINATOR_TYPE)
// 1424           {          
// 1425             ZDApp_ChangeState( DEV_ZB_COORD );
// 1426           }
// 1427 #endif          
// 1428 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 1429           if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1430           {
// 1431             uint32 pollrate = POLL_RATE;
// 1432             NLME_SetPollRate(pollrate);
        ; Setup parameters for call to function NLME_SetPollRate
        MOV     DPTR,#__Constant_3e8
        LCALL   ?XLOAD_R2345
        LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1433             ZDApp_ChangeState( DEV_END_DEVICE );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV     R1,#0x6
        LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1434             
// 1435           }
// 1436 #endif          
// 1437           ZDApp_RestoreNwkSecMaterial();
        ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
        LCALL   `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
// 1438           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NETWORK_RESTORED;
        MOV     DPTR,#bdbAttributes + 10
        MOV     A,#0xd
        LCALL   ?Subroutine22 & 0xFFFF
// 1439           bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
// 1440           osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,200);
??CrossCallReturnLabel_37:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_c8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        SJMP    ??bdb_reportCommissioningState_27
// 1441         }
// 1442 #if (ZG_BUILD_ENDDEVICE_TYPE)         
// 1443         //Notify the user about losing parent
// 1444         else
// 1445         {
// 1446           if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1447           {
// 1448             bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_PARENT_LOST;
??bdb_reportCommissioningState_26:
        MOV     A,#0x5
        MOVX    @DPTR,A
// 1449             bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_PARENT_LOST;
        LCALL   ?Subroutine15 & 0xFFFF
// 1450             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
??CrossCallReturnLabel_21:
        MOVX    @DPTR,A
// 1451             
// 1452             //Update ZDApp state
// 1453             ZDApp_ChangeState( DEV_NWK_ORPHAN );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV     R1,#0xa
        LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1454           }
// 1455         }
// 1456 #endif
// 1457         //Clear the commissioning mode
// 1458         bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_INITIALIZATION;
??bdb_reportCommissioningState_27:
        MOV     DPTR,#bdbAttributes + 11
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.4
        SJMP    ??CrossCallReturnLabel_22
// 1459         
// 1460       break;
// 1461 #if (ZG_BUILD_ENDDEVICE_TYPE)     
// 1462       case BDB_PARENT_LOST:
// 1463         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_PARENT_LOST;
??bdb_reportCommissioningState_9:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x5
        MOVX    @DPTR,A
// 1464         if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1465         {
// 1466           if(didSuccess)
        MOV     A,R7
        JZ      ??bdb_reportCommissioningState_28
// 1467           {
// 1468             uint32 pollrate = POLL_RATE;
// 1469             bdbCommissioningProcedureState.bdbCommissioningState = bdbCommissioningProcedureState.bdb_ParentLostSavedState;  
        MOV     DPTR,#bdbCommissioningProcedureState + 3
        MOVX    A,@DPTR
        MOV     DPTR,#bdbCommissioningProcedureState
        MOVX    @DPTR,A
// 1470             bdbCommissioningProcedureState.bdb_ParentLostSavedState = 0;
        MOV     DPTR,#bdbCommissioningProcedureState + 3
        CLR     A
        MOVX    @DPTR,A
// 1471             NLME_SetPollRate(pollrate);
        ; Setup parameters for call to function NLME_SetPollRate
        MOV     DPTR,#__Constant_3e8
        LCALL   ?XLOAD_R2345
        LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1472             bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_PARENT_LOST;
        MOV     DPTR,#bdbAttributes + 11
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.5
        MOVX    @DPTR,A
// 1473             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NETWORK_RESTORED;
        MOV     DPTR,#bdbAttributes + 10
        MOV     A,#0xd
        MOVX    @DPTR,A
// 1474             //Update ZDApp state
// 1475             ZDApp_ChangeState( DEV_END_DEVICE );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV     R1,#0x6
        LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1476             
// 1477             bdb_NetworkRestoredResumeState();
        ; Setup parameters for call to function bdb_NetworkRestoredResumeState
        LCALL   `??bdb_NetworkRestoredResumeState::?relay`; Banked call to: bdb_NetworkRestoredResumeState
        SJMP    ??bdb_reportCommissioningState_10
// 1478           }
// 1479           else
// 1480           {
// 1481             bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_PARENT_LOST;
??bdb_reportCommissioningState_28:
        LCALL   ?Subroutine15 & 0xFFFF
// 1482             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
// 1483           }
// 1484         }
// 1485       break;
// 1486 #endif
// 1487     }
??CrossCallReturnLabel_22:
        MOVX    @DPTR,A
// 1488 #ifdef MT_APP_CNF_FUNC
// 1489     //Notify the user about the status, the main state which has failed
// 1490     bdbCommissioningModeMsg.bdbCommissioningStatus = bdbAttributes.bdbCommissioningStatus;
// 1491     
// 1492     bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
// 1493 #else
// 1494     if(pfnCommissioningStatusCB)
??bdb_reportCommissioningState_10:
        MOV     DPTR,#pfnCommissioningStatusCB
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_76:
        JZ      ??bdb_reportCommissioningState_1
// 1495     {
// 1496       //Notify the user about the status, the main state which has failed
// 1497       bdbCommissioningModeMsg.bdbCommissioningStatus = bdbAttributes.bdbCommissioningStatus;
        MOV     DPTR,#bdbAttributes + 10
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine17 & 0xFFFF
// 1498       
// 1499       bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
// 1500     }
// 1501 #endif
// 1502   }  
??CrossCallReturnLabel_26:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x3
        MOV     R3,#0x0
        MOV     R2,#0xa
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 1503 }
??bdb_reportCommissioningState_1:
        MOV     A,#0x4
        LJMP    ??Subroutine40_0 & 0xFFFF
          CFI EndBlock cfiBlock23

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond24 Using cfiCommon0
          CFI Function bdb_reportCommissioningState
          CFI Conditional ??CrossCallReturnLabel_35
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function bdb_reportCommissioningState
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function bdb_reportCommissioningState
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker27 Using cfiCommon1
          CFI (cfiPicker27) NoFunction
          CFI (cfiPicker27) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#bdbCommissioningProcedureState
        CLR     A
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond28 Using cfiCommon0
          CFI Function bdb_NotifyCommissioningModeStart
          CFI Conditional ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function bdb_reportCommissioningState
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker32 Using cfiCommon1
          CFI (cfiPicker32) NoFunction
          CFI (cfiPicker32) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function bdb_SendMsg
        ; Setup parameters for call to function bdb_SendMsg
        ; Setup parameters for call to function bdb_SendMsg
        ; Setup parameters for call to function bdb_SendMsg
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiPicker32

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond33 Using cfiCommon0
          CFI Function bdb_reportCommissioningState
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function bdb_reportCommissioningState
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker35 Using cfiCommon1
          CFI (cfiPicker35) NoFunction
          CFI (cfiPicker35) Picker
        MOV     DPTR,#bdbAttributes + 11
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.5
        MOVX    @DPTR,A
        MOV     DPTR,#bdbAttributes + 10
        MOV     A,#0x2
        RET
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiPicker35
// 1504 
// 1505 
// 1506  /*********************************************************************
// 1507  * @fn          bdb_nwkFormationAttempt
// 1508  *
// 1509  * @brief       Process a nwk formation attempt.
// 1510  *
// 1511  * @param       didSuccess - TRUE if the nwk formation was success, FALSE 
// 1512  *                         otherwise and try secondary channel
// 1513  *
// 1514  * @return      none
// 1515  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1516 void bdb_nwkFormationAttempt(bool didSuccess)
bdb_nwkFormationAttempt:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function bdb_nwkFormationAttempt
        CODE
// 1517 {
        FUNCALL bdb_nwkFormationAttempt, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkFormationAttempt, bdb_nwkJoiningFormation
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkFormationAttempt, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
// 1518   if(didSuccess)
        JZ      ??bdb_nwkFormationAttempt_0
// 1519   {
// 1520     bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION,TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV     R2,#0x1
        SJMP    ??bdb_nwkFormationAttempt_1
// 1521   }
// 1522   else
// 1523   {
// 1524     //Can we try the secondary channel set?
// 1525     if((vDoPrimaryScan) && (bdbAttributes.bdbSecondaryChannelSet))
??bdb_nwkFormationAttempt_0:
        MOV     DPTR,#vDoPrimaryScan
        MOVX    A,@DPTR
        JZ      ??bdb_nwkFormationAttempt_2
        MOV     DPTR,#bdbAttributes
        LCALL   ?XLOAD_R0123
        MOV     A,R0
        ORL     A,R1
        ORL     A,R2
        ORL     A,R3
        JZ      ??bdb_nwkFormationAttempt_2
// 1526     {
// 1527       vDoPrimaryScan = FALSE;
        MOV     DPTR,#vDoPrimaryScan
        CLR     A
        MOVX    @DPTR,A
// 1528       bdb_nwkJoiningFormation(FALSE);
        ; Setup parameters for call to function bdb_nwkJoiningFormation
        MOV     R1,A
        LCALL   `??bdb_nwkJoiningFormation::?relay`; Banked call to: bdb_nwkJoiningFormation
        SJMP    ??bdb_nwkFormationAttempt_3
// 1529     }
// 1530     else
// 1531     {
// 1532       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
??bdb_nwkFormationAttempt_2:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV     R2,#0x0
??bdb_nwkFormationAttempt_1:
        MOV     R1,#0x5
        LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 1533     }
// 1534   }
// 1535 }
??bdb_nwkFormationAttempt_3:
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock36
// 1536 
// 1537 
// 1538 
// 1539 /*********************************************************************
// 1540  * @fn          bdb_isDeviceNonFactoryNew
// 1541  *
// 1542  * @brief       Returns the state of bdbNodeIsOnANetwork attribute
// 1543  * 
// 1544  * @param       none
// 1545  *
// 1546  * @return      bdbNodeIsOnANetwork
// 1547  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1548 bool bdb_isDeviceNonFactoryNew(void)
bdb_isDeviceNonFactoryNew:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function bdb_isDeviceNonFactoryNew
        CODE
// 1549 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1550   return bdbAttributes.bdbNodeIsOnANetwork;
        MOV     DPTR,#bdbAttributes + 14
        MOVX    A,@DPTR
        MOV     R1,A
        LJMP    ??Subroutine34_0 & 0xFFFF
// 1551 }
          CFI EndBlock cfiBlock37
// 1552 
// 1553 
// 1554 /*********************************************************************
// 1555  * @fn      bdb_rejoinNwk
// 1556  *
// 1557  * @brief   Attempt to rejoin/resume a nwk from nv parameters
// 1558  *
// 1559  * @param   none
// 1560  *
// 1561  * @return  ZStatus_t
// 1562  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1563 ZStatus_t bdb_rejoinNwk(void)
bdb_rejoinNwk:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function bdb_rejoinNwk
        CODE
// 1564 {
        FUNCALL bdb_rejoinNwk, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, NLME_ReJoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, NLME_ReJoinRequestUnsecure
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1565   ZStatus_t rejoinStatus = ZSuccess;
        MOV     R6,#0x0
// 1566   
// 1567   // Transition state machine to correct rejoin state based on nwk key
// 1568   if ( ZDApp_RestoreNwkKey( FALSE )== TRUE )
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        MOV     R1,#0x0
        LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??bdb_rejoinNwk_0
// 1569   {
// 1570     ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV     R1,#0x4
        SJMP    ??bdb_rejoinNwk_1
// 1571   }
// 1572   else
// 1573   {
// 1574     ZDApp_ChangeState( DEV_NWK_TC_REJOIN_CURR_CHANNEL );
??bdb_rejoinNwk_0:
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV     R1,#0xe
??bdb_rejoinNwk_1:
        LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1575   }
// 1576 
// 1577   // Before trying to do rejoin, check if the device has a valid short address
// 1578   // If not, generate a random short address for itself
// 1579   if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
        MOV     DPTR,#_NIB + 20
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??bdb_rejoinNwk_2
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??bdb_rejoinNwk_2:
        JNZ     ??bdb_rejoinNwk_3
// 1580   {
// 1581     rejoinStatus = ZFailure;
        MOV     R6,#0x1
// 1582   }
// 1583 
// 1584   // Check if the device has a valid PanID, if not, set it to the discovered Pan
// 1585   if ( _NIB.nwkPanId == 0xFFFF )
??bdb_rejoinNwk_3:
        MOV     DPTR,#_NIB + 33
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??bdb_rejoinNwk_4
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??bdb_rejoinNwk_4:
        JNZ     ??bdb_rejoinNwk_5
// 1586   {
// 1587     rejoinStatus = ZFailure;
        MOV     R6,#0x1
        SJMP    ??bdb_rejoinNwk_6
// 1588   }
// 1589 
// 1590   if(rejoinStatus == ZSuccess)
??bdb_rejoinNwk_5:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JC      ??bdb_rejoinNwk_6
// 1591   {
// 1592     uint8 tmp = true;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1593     ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x52
        LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
// 1594         
// 1595     // Perform Secure or Unsecure Rejoin depending on available configuration
// 1596     if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == TRUE ) )
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        MOV     R1,#0x1
        LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
        MOV     A,R1
        XRL     A,#0x1
        MOV     DPTR,#_NIB + 22
        JNZ     ??bdb_rejoinNwk_7
// 1597     {
// 1598       rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, _NIB.nwkLogicalChannel);
        ; Setup parameters for call to function NLME_ReJoinRequest
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,#ZDO_UseExtendedPANID & 0xff
        MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL   `??NLME_ReJoinRequest::?relay`; Banked call to: NLME_ReJoinRequest
        SJMP    ??bdb_rejoinNwk_8
// 1599     }
// 1600     else
// 1601     {
// 1602       rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, _NIB.nwkLogicalChannel);
??bdb_rejoinNwk_7:
        ; Setup parameters for call to function NLME_ReJoinRequestUnsecure
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,#ZDO_UseExtendedPANID & 0xff
        MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL   `??NLME_ReJoinRequestUnsecure::?relay`; Banked call to: NLME_ReJoinRequestUnsecure
??bdb_rejoinNwk_8:
        MOV     A,R1
        MOV     R6,A
// 1603     }
// 1604   }
// 1605   
// 1606   return rejoinStatus;
??bdb_rejoinNwk_6:
        MOV     A,R6
        MOV     R1,A
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        LJMP    ?Subroutine3 & 0xFFFF
// 1607 }
          CFI EndBlock cfiBlock38
// 1608 
// 1609 #if (ZG_BUILD_JOINING_TYPE)
// 1610  /*********************************************************************
// 1611  * @fn          bdb_nwkDiscoveryAttempt
// 1612  *
// 1613  * @brief       Process a nwk discovery attempt
// 1614  *
// 1615  * @param       didSuccess - TRUE we found nwk in the scanned channels, FALSE if 
// 1616  *                           no suitable nwks were found, try secondary channel
// 1617  *
// 1618  * @return      none
// 1619  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1620 void bdb_nwkDiscoveryAttempt(bool didSuccess)
bdb_nwkDiscoveryAttempt:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI Function bdb_nwkDiscoveryAttempt
        CODE
// 1621 {
        FUNCALL bdb_nwkDiscoveryAttempt, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkDiscoveryAttempt, bdb_setChannel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkDiscoveryAttempt, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkDiscoveryAttempt, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     R6,A
// 1622   uint8 bdbJoinEvent = BDB_JOIN_EVENT_NWK_DISCOVERY;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
// 1623   
// 1624   if(didSuccess)
        MOV     A,R6
        JZ      ??bdb_nwkDiscoveryAttempt_0
// 1625   {
// 1626     bdb_SendMsg(bdb_TaskID, BDB_COMMISSIONING_STATE_JOINING, BDB_MSG_EVENT_SUCCESS,sizeof(bdbJoinEvent),(uint8*)&bdbJoinEvent);
        ; Setup parameters for call to function bdb_SendMsg
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     R4,#0x1
        MOV     R3,#0x0
        MOV     R2,#0x3
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        SJMP    ??bdb_nwkDiscoveryAttempt_1
// 1627   }
// 1628   else
// 1629   {
// 1630     //Can we try the secondary channel set?
// 1631     if((vDoPrimaryScan) && (bdbAttributes.bdbSecondaryChannelSet))
??bdb_nwkDiscoveryAttempt_0:
        MOV     DPTR,#vDoPrimaryScan
        MOVX    A,@DPTR
        JZ      ??bdb_nwkDiscoveryAttempt_2
        MOV     DPTR,#bdbAttributes
        LCALL   ?XLOAD_R0123
        MOV     A,R0
        ORL     A,R1
        ORL     A,R2
        ORL     A,R3
        JZ      ??bdb_nwkDiscoveryAttempt_2
// 1632     {
// 1633       vDoPrimaryScan = FALSE;
        MOV     DPTR,#vDoPrimaryScan
        CLR     A
        MOVX    @DPTR,A
// 1634       bdb_setChannel(bdbAttributes.bdbSecondaryChannelSet);
        ; Setup parameters for call to function bdb_setChannel
        MOV     DPTR,#bdbAttributes
        LCALL   ?XLOAD_R2345
        LCALL   `??bdb_setChannel::?relay`; Banked call to: bdb_setChannel
// 1635       
// 1636       ZDApp_NetworkInit( 50 );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV     R2,#0x32
        MOV     R3,#0x0
        LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
        SJMP    ??bdb_nwkDiscoveryAttempt_1
// 1637     }
// 1638     else
// 1639     {
// 1640       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, FALSE);
??bdb_nwkDiscoveryAttempt_2:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV     R2,#0x0
        MOV     R1,#0x3
        LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 1641     }
// 1642   }
// 1643 }
??bdb_nwkDiscoveryAttempt_1:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock39
// 1644 
// 1645  /*********************************************************************
// 1646  * @fn          bdb_filterNwkDisc
// 1647  *
// 1648  * @brief       Filter the nwks found and attempt to join the suitable nwks
// 1649  *              Here the application can include nwk filters 
// 1650  *
// 1651  * @param       none
// 1652  *
// 1653  * @return      none
// 1654  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1655 void bdb_filterNwkDisc(void)
bdb_filterNwkDisc:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function bdb_filterNwkDisc
        CODE
// 1656 {
        FUNCALL bdb_filterNwkDisc, nwk_getNwkDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_filterNwkDisc, nwk_desc_list_release
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_filterNwkDisc, bdb_nwkDescFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_filterNwkDisc, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_filterNwkDisc, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
// 1657   networkDesc_t* pNwkDesc;
// 1658   uint8 i = 0;
// 1659   uint8 ResultCount = 0;
        MOV     ?V0,#0x0
// 1660   uint8 stackProfile = 0;
        MOV     ?V1,#0x0
// 1661   uint8 stackProfilePro = 0;
// 1662   
// 1663   pBDBListNwk  = nwk_getNwkDescList();
        ; Setup parameters for call to function nwk_getNwkDescList
        LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
        MOV     DPTR,#pBDBListNwk
        LCALL   ?Subroutine23 & 0xFFFF
// 1664   nwk_desc_list_release();
??CrossCallReturnLabel_38:
        ; Setup parameters for call to function nwk_desc_list_release
        LCALL   `??nwk_desc_list_release::?relay`; Banked call to: nwk_desc_list_release
// 1665   
// 1666   pNwkDesc = pBDBListNwk;
        MOV     DPTR,#pBDBListNwk
        SJMP    ??CrossCallReturnLabel_46
// 1667   while (pNwkDesc)
// 1668   {
// 1669     ResultCount++;
??bdb_filterNwkDisc_0:
        INC     ?V0
// 1670     pNwkDesc = pNwkDesc->nextDesc;
        LCALL   ?Subroutine25 & 0xFFFF
// 1671   }
??CrossCallReturnLabel_46:
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_52:
        MOV     A,R6
        ORL     A,R7
        JNZ     ??bdb_filterNwkDisc_0
// 1672   
// 1673   if(pBDBListNwk)
        MOV     DPTR,#pBDBListNwk
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_77:
        JNZ     $+5
        LJMP    ??bdb_filterNwkDisc_1 & 0xFFFF
// 1674   {
// 1675     if(pfnFilterNwkDesc)
        MOV     DPTR,#pfnFilterNwkDesc
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_78:
        JZ      ??bdb_filterNwkDisc_2
// 1676     {
// 1677       pfnFilterNwkDesc(pBDBListNwk, ResultCount);
        ; Setup parameters for indirect call
        MOV     R1,?V0
        LCALL   ??Subroutine43_0 & 0xFFFF
// 1678     }
??CrossCallReturnLabel_106:
        MOV     DPTR,#pfnFilterNwkDesc + 1
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_88:
        LCALL   ?CALL_IND
// 1679     
// 1680     for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
// 1681     {
// 1682       pNwkDesc = pBDBListNwk;
??bdb_filterNwkDisc_2:
        MOV     DPTR,#pBDBListNwk
        LCALL   ?Subroutine29 & 0xFFFF
// 1683       
// 1684       if(pNwkDesc)
??CrossCallReturnLabel_53:
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??bdb_filterNwkDisc_3 & 0xFFFF
// 1685       {
// 1686         for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
        MOV     ?V2,#0x0
        LJMP    ??CrossCallReturnLabel_54 & 0xFFFF
// 1687         {
// 1688           if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
// 1689           {
// 1690             // If the extended Pan ID is commissioned to a non zero value
// 1691             // Only join the Pan that has match EPID
// 1692             if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
// 1693             {
// 1694               //Remove from the list
// 1695               bdb_nwkDescFree(pNwkDesc);
// 1696               continue;
// 1697             }
// 1698           }
// 1699           else if ( zgConfigPANID != 0xFFFF )
??bdb_filterNwkDisc_4:
        MOV     DPTR,#zgConfigPANID
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??bdb_filterNwkDisc_5
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??bdb_filterNwkDisc_5:
        JZ      ??bdb_filterNwkDisc_6
// 1700           {
// 1701             // PAN Id is preconfigured. check if it matches
// 1702             if ( pNwkDesc->panId != zgConfigPANID )
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine13 & 0xFFFF
// 1703             {
// 1704               //Remove from the list
// 1705               bdb_nwkDescFree(pNwkDesc);
// 1706               continue;
// 1707             }
// 1708           }
??CrossCallReturnLabel_13:
        MOV     DPTR,#zgConfigPANID
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??bdb_filterNwkDisc_7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??bdb_filterNwkDisc_7:
        JNZ     ??bdb_filterNwkDisc_8
// 1709 
// 1710           if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
??bdb_filterNwkDisc_6:
        MOV     DPTR,#_NIB + 23
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_10:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??bdb_filterNwkDisc_9
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??bdb_filterNwkDisc_9:
        JNZ     ??bdb_filterNwkDisc_10
        MOV     A,#-0x2
        XRL     A,R0
        JNZ     ??bdb_filterNwkDisc_11
        MOV     A,#-0x1
        XRL     A,R1
??bdb_filterNwkDisc_11:
        JNZ     ??bdb_filterNwkDisc_12
// 1711           {
// 1712             // check that network is allowing joining
// 1713             if ( ZSTACK_ROUTER_BUILD )
// 1714             {
// 1715               if ( stackProfilePro == FALSE )
// 1716               {
// 1717                 if ( !pNwkDesc->routerCapacity )
// 1718                 {
// 1719                   //Remove from the list
// 1720                   bdb_nwkDescFree(pNwkDesc);
// 1721                   continue;
// 1722                 }
// 1723               }
// 1724               else
// 1725               {
// 1726                 if ( !pNwkDesc->deviceCapacity )
// 1727                 {
// 1728                   //Remove from the list
// 1729                   bdb_nwkDescFree(pNwkDesc);
// 1730                   continue;
// 1731                 }
// 1732               }
// 1733             }
// 1734             else if ( ZSTACK_END_DEVICE_BUILD )
// 1735             {
// 1736               if ( !pNwkDesc->deviceCapacity )
??bdb_filterNwkDisc_10:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??bdb_filterNwkDisc_8
// 1737               {
// 1738                 //Remove from the list
// 1739                 bdb_nwkDescFree(pNwkDesc);
// 1740                 continue;
// 1741               }
// 1742             }
// 1743           }
// 1744 
// 1745           // check version of zigbee protocol
// 1746           if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
??bdb_filterNwkDisc_12:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#_NIB + 17
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??bdb_filterNwkDisc_13
// 1747             continue;
// 1748 
// 1749           // check version of stack profile
// 1750           if ( pNwkDesc->stackProfile != zgStackProfile  )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#zgStackProfile
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      ??bdb_filterNwkDisc_13
// 1751           {
// 1752             if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
// 1753                 || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
// 1754             {
// 1755               stackProfilePro = TRUE;
// 1756             }
// 1757 
// 1758             if ( stackProfile == 0 )
        MOV     A,?V1
        JNZ     ??bdb_filterNwkDisc_13
// 1759             {
// 1760               //Remove from the list
// 1761               bdb_nwkDescFree(pNwkDesc);
??bdb_filterNwkDisc_8:
        ; Setup parameters for call to function bdb_nwkDescFree
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
// 1762               continue;
// 1763             }
// 1764           }
??bdb_filterNwkDisc_13:
        INC     ?V2
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_47:
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_54:
        MOV     A,?V2
        CLR     C
        SUBB    A,?V0
        JNC     ??bdb_filterNwkDisc_3
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV     R2,#ZDO_UseExtendedPANID & 0xff
        MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
        MOV     A,R1
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??bdb_filterNwkDisc_4 & 0xFFFF
        ; Setup parameters for call to function sAddrExtCmp
        MOV     A,R6
        ADD     A,#0xb
        MOV     R4,A
        CLR     A
        ADDC    A,R7
        MOV     R5,A
        MOV     R2,#ZDO_UseExtendedPANID & 0xff
        MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV     A,R1
        JZ      $+5
        LJMP    ??bdb_filterNwkDisc_6 & 0xFFFF
        SJMP    ??bdb_filterNwkDisc_8
// 1765         }
// 1766       }
// 1767     }
??bdb_filterNwkDisc_3:
        INC     ?V1
        MOV     A,?V1
        CLR     C
        SUBB    A,#0x2
        JNC     $+5
        LJMP    ??bdb_filterNwkDisc_2 & 0xFFFF
// 1768   }
// 1769 }
??bdb_filterNwkDisc_1:
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock40

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond41 Using cfiCommon0
          CFI Function bdb_filterNwkDisc
          CFI Conditional ??CrossCallReturnLabel_46
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function bdb_filterNwkDisc
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-2
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker43 Using cfiCommon1
          CFI (cfiPicker43) NoFunction
          CFI (cfiPicker43) Picker
        MOV     A,R6
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_60:
        ADDC    A,R7
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiPicker43

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond44 Using cfiCommon0
          CFI Function bdb_ZclIdentifyCmdInd
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function bdb_filterNwkDisc
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker46 Using cfiCommon1
          CFI (cfiPicker46) NoFunction
          CFI (cfiPicker46) Picker
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_84:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiPicker46
// 1770       
// 1771  /*********************************************************************
// 1772  * @fn          bdb_tryNwkAssoc
// 1773  *
// 1774  * @brief       Try to associate to the first network in the network descriptor list
// 1775  *
// 1776  * @param       none
// 1777  *
// 1778  * @return      none
// 1779  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1780 static void bdb_tryNwkAssoc(void)
bdb_tryNwkAssoc:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI Function bdb_tryNwkAssoc
        CODE
// 1781 {
        FUNCALL bdb_tryNwkAssoc, bdb_joinProcess
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_tryNwkAssoc, bdb_nwkDescFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_tryNwkAssoc, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_tryNwkAssoc, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 1782   if(pBDBListNwk)
        MOV     DPTR,#pBDBListNwk
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_79:
        MOV     DPTR,#bdbCommissioningProcedureState + 2
        JZ      ??bdb_tryNwkAssoc_0
// 1783   {
// 1784     bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_ASSOC;
        LCALL   ?Subroutine9 & 0xFFFF
// 1785     
// 1786     //Try the first in the list after the filtering
// 1787     if(ZSuccess != bdb_joinProcess(pBDBListNwk))
??CrossCallReturnLabel_94:
        LCALL   `??bdb_joinProcess::?relay`; Banked call to: bdb_joinProcess
        MOV     A,R1
        JZ      ??bdb_tryNwkAssoc_1
// 1788     {
// 1789       //If fail, free the first in the list and prepare for futher processing, either next nwk or discover again
// 1790       uint8 bdbJoinEvent = BDB_JOIN_EVENT_ASSOCIATION;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine9 & 0xFFFF
// 1791       bdb_nwkDescFree(pBDBListNwk);
??CrossCallReturnLabel_95:
        LCALL   `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
// 1792       bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,BDB_MSG_EVENT_FAIL,sizeof(uint8),&bdbJoinEvent);
        ; Setup parameters for call to function bdb_SendMsg
        SJMP    ??bdb_tryNwkAssoc_2
// 1793     }
// 1794   }
// 1795   else
// 1796   {
// 1797     bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_NWK_DISC;
??bdb_tryNwkAssoc_0:
        CLR     A
        LCALL   ??Subroutine37_0 & 0xFFFF
// 1798     uint8 bdbJoinEvent = BDB_JOIN_EVENT_NWK_DISCOVERY;
??CrossCallReturnLabel_66:
        MOVX    @DPTR,A
// 1799     
// 1800     bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,BDB_MSG_EVENT_FAIL,sizeof(uint8),&bdbJoinEvent);
        ; Setup parameters for call to function bdb_SendMsg
??bdb_tryNwkAssoc_2:
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     R4,#0x1
        MOV     R3,#0x1
        MOV     R2,#0x3
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 1801   }
// 1802 }
??bdb_tryNwkAssoc_1:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock47
// 1803 
// 1804 
// 1805 
// 1806  /*********************************************************************
// 1807  * @fn          bdb_nwkAssocAttemt
// 1808  *
// 1809  * @brief       Process the result of an attempt to associate to a network 
// 1810  *
// 1811  * @param       didSuccess - bool
// 1812  *
// 1813  * @return      none
// 1814  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1815 void bdb_nwkAssocAttemt(bool didSuccess)
bdb_nwkAssocAttemt:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function bdb_nwkAssocAttemt
        CODE
// 1816 {
        FUNCALL bdb_nwkAssocAttemt, bdb_nwkDescFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkAssocAttemt, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     R6,A
// 1817   bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_STATE_JOINING;
        MOV     DPTR,#bdbAttributes + 10
        MOV     A,#0x3
        LCALL   ?Subroutine20 & 0xFFFF
// 1818   uint8 bdbJoinEvent = BDB_JOIN_EVENT_ASSOCIATION;
??CrossCallReturnLabel_34:
        MOVX    @DPTR,A
// 1819   uint8 status;
// 1820   
// 1821   if(didSuccess)
        MOV     A,R6
        JZ      ??bdb_nwkAssocAttemt_0
// 1822   {
// 1823     status = BDB_MSG_EVENT_SUCCESS;
        MOV     R3,#0x0
        SJMP    ??bdb_nwkAssocAttemt_1
// 1824   }
// 1825   else
// 1826   {
// 1827     if(bdb_nwkAssocRetriesCount < BDBC_REC_SAME_NETWORK_RETRY_ATTEMPS)
??bdb_nwkAssocAttemt_0:
        MOV     DPTR,#bdb_nwkAssocRetriesCount
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x3
        JNC     ??bdb_nwkAssocAttemt_2
// 1828     {
// 1829       bdb_nwkAssocRetriesCount++;
        MOVX    A,@DPTR
        INC     A
        SJMP    ??bdb_nwkAssocAttemt_3
// 1830     }
// 1831     else
// 1832     {
// 1833       //Free the first in the list and prepare for futher processing
// 1834       bdb_nwkDescFree(pBDBListNwk);
??bdb_nwkAssocAttemt_2:
        ; Setup parameters for call to function bdb_nwkDescFree
        LCALL   ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_107:
        LCALL   `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
// 1835       bdb_nwkAssocRetriesCount = 0;
        MOV     DPTR,#bdb_nwkAssocRetriesCount
        CLR     A
??bdb_nwkAssocAttemt_3:
        MOVX    @DPTR,A
// 1836     }
// 1837     status = BDB_MSG_EVENT_FAIL;
        MOV     R3,#0x1
// 1838   }
// 1839   bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,status,sizeof(uint8),&bdbJoinEvent);
??bdb_nwkAssocAttemt_1:
        ; Setup parameters for call to function bdb_SendMsg
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     R4,#0x1
        MOV     R2,#0x3
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 1840 }
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock48

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond49 Using cfiCommon0
          CFI Function bdb_NotifyCommissioningModeStart
          CFI Conditional ??CrossCallReturnLabel_33
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function bdb_nwkAssocAttemt
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker51 Using cfiCommon1
          CFI (cfiPicker51) NoFunction
          CFI (cfiPicker51) Picker
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        RET
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiPicker51
// 1841                        
// 1842 
// 1843 /****************************************************************************
// 1844  * @fn          bdb_nwkDescFree
// 1845  *
// 1846  * @brief       This function frees one network discovery data.
// 1847  *
// 1848  * @param       ZSuccess - If the device was found and erased
// 1849  * @param       ZInvalidParameter - Not found
// 1850  *
// 1851  * @return      none
// 1852  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1853 ZStatus_t bdb_nwkDescFree(networkDesc_t* nodeDescToRemove)
bdb_nwkDescFree:
          CFI Block cfiBlock52 Using cfiCommon0
          CFI Function bdb_nwkDescFree
        CODE
// 1854 {
        FUNCALL bdb_nwkDescFree, osal_mem_free
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1855   networkDesc_t* current_desc;
// 1856   networkDesc_t* prev_desc;
// 1857   
// 1858   current_desc = pBDBListNwk;
        MOV     DPTR,#pBDBListNwk
        SJMP    ??CrossCallReturnLabel_48
// 1859 
// 1860   while(current_desc != NULL)
// 1861   {  
// 1862     if(current_desc == nodeDescToRemove)
// 1863     {
// 1864       if (current_desc == pBDBListNwk)
// 1865       {
// 1866         pBDBListNwk = pBDBListNwk->nextDesc;
// 1867       }
// 1868       else
// 1869       {
// 1870         prev_desc->nextDesc = current_desc->nextDesc;
// 1871       }
// 1872       
// 1873       osal_mem_free( current_desc );
// 1874       
// 1875       return ZSuccess;
// 1876     }
// 1877 
// 1878     prev_desc = current_desc;
??bdb_nwkDescFree_0:
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
// 1879     current_desc = current_desc->nextDesc;
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_48:
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_71:
        JZ      ??bdb_nwkDescFree_1
        MOV     A,R2
        XRL     A,R0
        JNZ     ??bdb_nwkDescFree_2
        MOV     A,R3
        XRL     A,R1
??bdb_nwkDescFree_2:
        JNZ     ??bdb_nwkDescFree_0
        LCALL   ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_108:
        MOV     A,R0
        XRL     A,R2
        JNZ     ??bdb_nwkDescFree_3
        MOV     A,R1
        XRL     A,R3
??bdb_nwkDescFree_3:
        JNZ     ??bdb_nwkDescFree_4
        MOVX    A,@DPTR
        XCH     A,R2
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_58:
        ADDC    A,R2
        MOV     DPH,A
        LCALL   ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_98:
        MOV     DPTR,#pBDBListNwk
        SJMP    ??bdb_nwkDescFree_5
??bdb_nwkDescFree_4:
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_49:
        LCALL   ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_99:
        MOV     A,R4
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_59:
        ADDC    A,R5
        MOV     DPH,A
??bdb_nwkDescFree_5:
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_39:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        MOV     R1,#0x0
        SJMP    ??bdb_nwkDescFree_6
// 1880   }
// 1881   
// 1882   return ZInvalidParameter;
??bdb_nwkDescFree_1:
        MOV     R1,#0x2
??bdb_nwkDescFree_6:
        LJMP    ??Subroutine34_0 & 0xFFFF
// 1883 }
          CFI EndBlock cfiBlock52

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond53 Using cfiCommon0
          CFI Function bdb_filterNwkDisc
          CFI Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_46
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function bdb_filterNwkDisc
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_47
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-4
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function bdb_nwkDescFree
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond55) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond55) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond55) CFA_SP SP+-7
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function bdb_nwkDescFree
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond56) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond56) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond56) CFA_SP SP+-7
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function bdb_nwkDescFree
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_48
          CFI (cfiCond57) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond57) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond57) CFA_SP SP+-9
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function bdb_nwkDescFree
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_49
          CFI (cfiCond58) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond58) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond58) CFA_SP SP+-9
          CFI Block cfiPicker59 Using cfiCommon1
          CFI (cfiPicker59) NoFunction
          CFI (cfiPicker59) Picker
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        RET
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiPicker59

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond60 Using cfiCommon0
          CFI Function bdb_nwkDescFree
          CFI Conditional ??CrossCallReturnLabel_48
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function bdb_nwkDescFree
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond61) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond61) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond61) CFA_SP SP+-7
          CFI Block cfiPicker62 Using cfiCommon1
          CFI (cfiPicker62) NoFunction
          CFI (cfiPicker62) Picker
        MOV     A,R0
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_61:
        ADDC    A,R1
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiPicker62
// 1884 
// 1885 /*********************************************************************
// 1886 * @fn          bdb_joinProcess
// 1887 *
// 1888 * @brief       Start the joining process for the selected nwk
// 1889 *
// 1890 * @return      ZStatus_t
// 1891 */  

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1892 ZStatus_t bdb_joinProcess(networkDesc_t *pChosenNwk)
bdb_joinProcess:
          CFI Block cfiBlock63 Using cfiCommon0
          CFI Function bdb_joinProcess
        CODE
// 1893 {
        FUNCALL bdb_joinProcess, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_joinProcess, ZDApp_NodeProfileSync
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_joinProcess, NLME_JoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_joinProcess, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_joinProcess, NLME_SetQueuedPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_joinProcess, NLME_SetResponseRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_joinProcess, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1894   ZStatus_t status;
// 1895  
// 1896   ZDApp_ChangeState( DEV_NWK_JOINING );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV     R1,#0x3
        LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1897   ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
        ; Setup parameters for call to function ZDApp_NodeProfileSync
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
// 1898 
// 1899   status =  NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
// 1900                         pChosenNwk->logicalChannel,
// 1901                         ZDO_Config_Node_Descriptor.CapabilityFlags,
// 1902                         pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth );
        ; Setup parameters for call to function NLME_JoinRequest
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV     A,R6
        ADD     A,#0xb
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        MOV     R6,A
// 1903   
// 1904   if(status == ZSuccess)
        JNZ     ??bdb_joinProcess_0
// 1905   {
// 1906     // The receiver is on, turn network layer polling off.
// 1907     if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JNC     ??bdb_joinProcess_1
// 1908     {
// 1909       // for an End Device with NO Child Table Management process or for a Router
// 1910       if ( ( ZG_DEVICE_RTR_TYPE )  ||
// 1911            ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??bdb_joinProcess_2
        XRL     A,#0x1
        JZ      ??bdb_joinProcess_2
        MOV     DPTR,#zgChildAgingEnable
        MOVX    A,@DPTR
        JNZ     ??bdb_joinProcess_0
// 1912       {
// 1913         NLME_SetPollRate( 0 );
??bdb_joinProcess_2:
        ; Setup parameters for call to function NLME_SetPollRate
        MOV     DPTR,#__Constant_0
        LCALL   ?XLOAD_R2345
        LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1914         NLME_SetQueuedPollRate( 0 );
        ; Setup parameters for call to function NLME_SetQueuedPollRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
// 1915         NLME_SetResponseRate( 0 );
        ; Setup parameters for call to function NLME_SetResponseRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
        SJMP    ??bdb_joinProcess_0
// 1916       }
// 1917     }
// 1918     else
// 1919     {
// 1920       if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
??bdb_joinProcess_1:
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        JNZ     ??bdb_joinProcess_0
// 1921       {
// 1922         ZDApp_SavedPollRate = zgPollRate;
        MOV     DPTR,#zgPollRate
        LCALL   ?XLOAD_R0123
        MOV     DPTR,#ZDApp_SavedPollRate
        LCALL   ?XSTORE_R0123
// 1923         NLME_SetPollRate( zgRejoinPollRate );
        ; Setup parameters for call to function NLME_SetPollRate
        MOV     DPTR,#zgRejoinPollRate
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,?V0
        MOV     R3,A
        CLR     A
        MOV     R4,A
        MOV     R5,A
        LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1924       }
// 1925     }
// 1926   }
// 1927   return status;
??bdb_joinProcess_0:
        MOV     A,R6
        MOV     R1,A
        LJMP    ??Subroutine41_0 & 0xFFFF
// 1928 }
          CFI EndBlock cfiBlock63
// 1929 #endif
// 1930 
// 1931 
// 1932  /*********************************************************************
// 1933  * @fn          bdb_setChannelAttribute
// 1934  *
// 1935  * @brief       Set the primary or seconday channel for discovery or formation procedure
// 1936  *
// 1937  * @param       isPrimaryChannel - True if channel to set is primary,  
// 1938  *                                 False if the channel to set is secondary
// 1939  *
// 1940  * @param       channel - Channel mask
// 1941  *
// 1942  * @return      none
// 1943  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1944 void bdb_setChannelAttribute(bool isPrimaryChannel, uint32 channel)
bdb_setChannelAttribute:
          CFI Block cfiBlock64 Using cfiCommon0
          CFI Function bdb_setChannelAttribute
        CODE
// 1945 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R4
        MOV     ?V3,R5
// 1946   if(isPrimaryChannel)
        MOV     A,R1
        JZ      ??bdb_setChannelAttribute_0
// 1947   {
// 1948     bdbAttributes.bdbPrimaryChannelSet = channel;
        MOV     DPTR,#bdbAttributes + 4
        SJMP    ??bdb_setChannelAttribute_1
// 1949   }
// 1950   else
// 1951   {
// 1952     bdbAttributes.bdbSecondaryChannelSet = channel;
??bdb_setChannelAttribute_0:
        MOV     DPTR,#bdbAttributes
??bdb_setChannelAttribute_1:
        MOV     R0,#?V0
        LCALL   ?L_MOV_TO_X
// 1953   }
// 1954 }
        LJMP    ??Subroutine36_0 & 0xFFFF
          CFI EndBlock cfiBlock64
// 1955 
// 1956  /*********************************************************************
// 1957  * @fn          bdb_setChannel
// 1958  *
// 1959  * @brief       Set channel and save it in Nv for joining/formation operations
// 1960  *
// 1961  * @param       channel - Channel mask
// 1962  *
// 1963  * @return      none
// 1964  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1965 void bdb_setChannel(uint32 channel)
bdb_setChannel:
          CFI Block cfiBlock65 Using cfiCommon0
          CFI Function bdb_setChannel
        CODE
// 1966 {
        FUNCALL bdb_setChannel, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R4
        MOV     ?V3,R5
// 1967   //Assign the channel and save it into nv
// 1968   vScanChannels = channel;
        MOV     DPTR,#zgDefaultChannelList
        MOV     R0,#?V0
        LCALL   ?L_MOV_TO_X
// 1969   runtimeChannel = channel;
        MOV     DPTR,#runtimeChannel
        MOV     R0,#?V0
        LCALL   ?L_MOV_TO_X
// 1970     
// 1971   osal_nv_write(ZCD_NV_CHANLIST,0,sizeof(uint32),&vScanChannels);
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0,#zgDefaultChannelList & 0xff
        MOV     ?V1,#(zgDefaultChannelList >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0,#0x4
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7c
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        LJMP    ?Subroutine2 & 0xFFFF
// 1972 }
          CFI EndBlock cfiBlock65
// 1973 
// 1974 
// 1975  /*********************************************************************
// 1976  * @fn          bdb_nwkJoiningFormation   
// 1977  *
// 1978  * @brief       Performs Joining/Formation operation on primary or secondary channel
// 1979  *
// 1980  * @param       isJoining - TRUE if the device is performing joining, FALSE is performing Formation
// 1981  *
// 1982  * @return      none
// 1983  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1984 void bdb_nwkJoiningFormation(bool isJoining)
bdb_nwkJoiningFormation:
          CFI Block cfiBlock66 Using cfiCommon0
          CFI Function bdb_nwkJoiningFormation
        CODE
// 1985 {
        FUNCALL bdb_nwkJoiningFormation, bdb_setChannel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, bdb_setChannel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, ZDOInitDeviceEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, ZDOInitDeviceEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 1986   
// 1987   if((vDoPrimaryScan) && (bdbAttributes.bdbPrimaryChannelSet))
        MOV     DPTR,#vDoPrimaryScan
        MOVX    A,@DPTR
        JZ      ??bdb_nwkJoiningFormation_0
        MOV     DPTR,#bdbAttributes + 4
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     A,?V0
        ORL     A,?V1
        ORL     A,?V2
        ORL     A,?V3
        JZ      ??bdb_nwkJoiningFormation_0
// 1988   {
// 1989     bdb_setChannel(bdbAttributes.bdbPrimaryChannelSet);
        ; Setup parameters for call to function bdb_setChannel
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R4,?V2
        MOV     R5,?V3
        SJMP    ??bdb_nwkJoiningFormation_1
// 1990   }
// 1991   else
// 1992   {
// 1993     vDoPrimaryScan = FALSE;
??bdb_nwkJoiningFormation_0:
        MOV     DPTR,#vDoPrimaryScan
        CLR     A
        MOVX    @DPTR,A
// 1994     bdb_setChannel(bdbAttributes.bdbSecondaryChannelSet);
        ; Setup parameters for call to function bdb_setChannel
        MOV     DPTR,#bdbAttributes
        LCALL   ?XLOAD_R2345
??bdb_nwkJoiningFormation_1:
        LCALL   `??bdb_setChannel::?relay`; Banked call to: bdb_setChannel
// 1995   }
// 1996 
// 1997   if(vScanChannels)
        MOV     DPTR,#zgDefaultChannelList
        LCALL   ?XLOAD_R0123
        MOV     A,R0
        ORL     A,R1
        ORL     A,R2
        ORL     A,R3
        JZ      ??bdb_nwkJoiningFormation_2
// 1998   {
// 1999     if(ZG_DEVICE_RTRONLY_TYPE)
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bdb_nwkJoiningFormation_3
// 2000     {
// 2001       if(isJoining)
        MOV     A,R6
        JNZ     ??bdb_nwkJoiningFormation_3
// 2002       {
// 2003         ZDOInitDeviceEx(100,0);
// 2004       }
// 2005       else
// 2006       {
// 2007         ZDOInitDeviceEx(100,1);
        ; Setup parameters for call to function ZDOInitDeviceEx
        MOV     R1,#0x1
        SJMP    ??bdb_nwkJoiningFormation_4
// 2008       }
// 2009     }
// 2010     //ZED can only join, and ZC can only create
// 2011     else
// 2012     {
// 2013       ZDOInitDeviceEx(100,0);
??bdb_nwkJoiningFormation_3:
        ; Setup parameters for call to function ZDOInitDeviceEx
        MOV     R1,#0x0
??bdb_nwkJoiningFormation_4:
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
        SJMP    ??bdb_nwkJoiningFormation_5
// 2014     }
// 2015   }
// 2016   else
// 2017   {
// 2018     if(isJoining)
??bdb_nwkJoiningFormation_2:
        MOV     A,R6
        MOV     R2,#0x0
        JZ      ??bdb_nwkJoiningFormation_6
// 2019     {
// 2020       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV     R1,#0x3
        SJMP    ??bdb_nwkJoiningFormation_7
// 2021     }
// 2022     else
// 2023     {
// 2024       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
??bdb_nwkJoiningFormation_6:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV     R1,#0x5
??bdb_nwkJoiningFormation_7:
        LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2025     }
// 2026   }
// 2027 }
??bdb_nwkJoiningFormation_5:
        SJMP    ??Subroutine36_0
          CFI EndBlock cfiBlock66
// 2028 
// 2029 #if (ZG_BUILD_JOINING_TYPE)
// 2030  /*********************************************************************
// 2031  * @fn          bdb_tcLinkKeyExchangeAttempt
// 2032  *
// 2033  * @brief       Generic send msg for TC link key exchange process attempts
// 2034  *
// 2035  * @param       didSuccess - FALSE if the step failed/timeout, TRUE otherwise
// 2036  * @param       bdbTCExchangeState - Step in which the attemp was done
// 2037  *
// 2038  * @return      none
// 2039  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2040 void bdb_tcLinkKeyExchangeAttempt(bool didSuccess, uint8 bdbTCExchangeState)
bdb_tcLinkKeyExchangeAttempt:
          CFI Block cfiBlock67 Using cfiCommon0
          CFI Function bdb_tcLinkKeyExchangeAttempt
        CODE
// 2041 {
        FUNCALL bdb_tcLinkKeyExchangeAttempt, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_tcLinkKeyExchangeAttempt, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R1
        MOV     R7,A
// 2042   bool bdbEventStatus = BDB_MSG_EVENT_SUCCESS;
        MOV     R6,#0x0
// 2043   uint8 dummy;
// 2044   bdbCommissioningProcedureState.bdbTCExchangeState = bdbTCExchangeState;
        MOV     A,R2
        MOV     DPTR,#bdbCommissioningProcedureState + 1
        MOVX    @DPTR,A
// 2045   if(didSuccess)
        MOV     A,R7
        JZ      ??bdb_tcLinkKeyExchangeAttempt_0
// 2046   {
// 2047     //Allow try since we are performing a new step.
// 2048     osal_stop_timerEx(bdb_TaskID, BDB_PROCESS_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x0
        MOV     R3,#0x10
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 2049     bdbAttributes.bdbTCLinkKeyExchangeAttempts = 0;
        MOV     DPTR,#bdbAttributes + 16
        CLR     A
        MOVX    @DPTR,A
        SJMP    ??bdb_tcLinkKeyExchangeAttempt_1
// 2050   }
// 2051   else
// 2052   {
// 2053     bdbEventStatus = BDB_MSG_EVENT_FAIL;
??bdb_tcLinkKeyExchangeAttempt_0:
        MOV     R6,#0x1
// 2054   }
// 2055   bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE,bdbEventStatus,1, &dummy);
??bdb_tcLinkKeyExchangeAttempt_1:
        ; Setup parameters for call to function bdb_SendMsg
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x1
        MOV     A,R6
        MOV     R3,A
        MOV     R2,#0x1
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
// 2056 }
        MOV     A,#0x1
        SJMP    ??Subroutine35_0
          CFI EndBlock cfiBlock67

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock68 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x4
          CFI EndBlock cfiBlock68
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine35_0:
          CFI Block cfiBlock69 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock69
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine36_0:
          CFI Block cfiBlock70 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock70
// 2057 
// 2058 
// 2059  /*********************************************************************
// 2060  * @fn          bdb_requestVerifyTCLinkKey
// 2061  *
// 2062  * @brief       Attempt to verify the TC link key by sending Verify Key Request
// 2063  *
// 2064  * @param       none
// 2065  *
// 2066  * @return      none
// 2067  */
// 2068 void bdb_requestVerifyTCLinkKey(void)
// 2069 {
// 2070     uint8 TC_ExtAddr[Z_EXTADDR_LEN];
// 2071     APSME_VerifyKeyReq_t vKey;
// 2072     
// 2073     APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
// 2074     
// 2075     vKey.tcExtAddr = TC_ExtAddr;
// 2076     vKey.keyType = KEY_TYPE_TC_LINK;
// 2077     
// 2078     APSME_VerifyKeyReq( &vKey );
// 2079     
// 2080     osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
// 2081     osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT,BDBC_TC_LINK_KEY_EXANGE_TIMEOUT);
// 2082     
// 2083 }
// 2084 
// 2085 /*********************************************************************
// 2086  * @fn          bdb_requestTCLinkKey
// 2087  *
// 2088  * @brief       Attempt to request a TC link key
// 2089  *
// 2090  * @param       none
// 2091  *
// 2092  * @return      none
// 2093  */
// 2094 void bdb_requestTCLinkKey(void)
// 2095 {
// 2096   zAddrType_t destAddr;
// 2097   APSME_RequestKeyReq_t req;
// 2098 
// 2099   destAddr.addrMode = Addr16Bit;
// 2100   destAddr.addr.shortAddr = 0x0000;
// 2101   
// 2102   req.dstAddr = destAddr.addr.shortAddr;
// 2103   req.keyType = KEY_TYPE_TC_LINK;
// 2104   
// 2105   APSME_RequestKeyReq(&req);
// 2106   
// 2107   osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
// 2108   
// 2109   osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT,(uint32)requestLinkKeyTimeout);
// 2110 } 
// 2111 
// 2112 
// 2113 /*********************************************************************
// 2114  * @fn          bdb_requestTCStackVersion
// 2115  *
// 2116  * @brief       Attempt to request the TC stack version using ZDP Node desc if 
// 2117  *              join a Centralized nwk
// 2118  *
// 2119  * @param       none
// 2120  *
// 2121  * @return      none
// 2122  */
// 2123 void bdb_requestTCStackVersion(void)
// 2124 {
// 2125   if(requestNewTrustCenterLinkKey)
// 2126   {
// 2127     if(!APSME_IsDistributedSecurity())
// 2128     {
// 2129       if(bdbAttributes.bdbTCLinkKeyExchangeMethod == BDB_TC_LINK_KEY_EXCHANGE_APS_KEY)
// 2130       {
// 2131         zAddrType_t destAddr;
// 2132        
// 2133         destAddr.addrMode = Addr16Bit;
// 2134         destAddr.addr.shortAddr = 0x0000;
// 2135        
// 2136         ZDP_NodeDescReq( &destAddr, destAddr.addr.shortAddr, 0);  
// 2137         
// 2138         osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
// 2139         osal_start_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT, BDBC_TC_LINK_KEY_EXANGE_TIMEOUT );
// 2140         return;
// 2141       }
// 2142       else
// 2143       {
// 2144         if(pfnCBKETCLinkKeyExchange)
// 2145         {
// 2146           pfnCBKETCLinkKeyExchange();
// 2147         }
// 2148         return;
// 2149       }
// 2150     }
// 2151     else
// 2152     {
// 2153       bdb_setNodeJoinLinkKeyType(BDB_DISTRIBUTED_SECURITY_GLOBAL_LINK_KEY);
// 2154     }
// 2155   }
// 2156   else
// 2157   {
// 2158     //Key not required, set default which is global
// 2159     bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
// 2160   }
// 2161 
// 2162 
// 2163   //TC link key not required or join distributed nwk
// 2164   bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE,TRUE);
// 2165 }
// 2166 #endif
// 2167 
// 2168 
// 2169 /*********************************************************************
// 2170  * @fn          bdb_nwkSteeringDeviceOnNwk
// 2171  *
// 2172  * @brief       Send ZDP mgmt permit joining
// 2173  *
// 2174  * @param       none
// 2175  *
// 2176  * @return      none
// 2177  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2178 void bdb_nwkSteeringDeviceOnNwk(void)
bdb_nwkSteeringDeviceOnNwk:
          CFI Block cfiBlock71 Using cfiCommon0
          CFI Function bdb_nwkSteeringDeviceOnNwk
        CODE
// 2179 {
        FUNCALL bdb_nwkSteeringDeviceOnNwk, ZDP_MgmtPermitJoinReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
// 2180   zAddrType_t dstAddr;
// 2181   dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
// 2182   dstAddr.addrMode = AddrBroadcast;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        MOVX    @DPTR,A
// 2183   // Trust Center significance is always true
// 2184   ZDP_MgmtPermitJoinReq( &dstAddr, BDBC_MIN_COMMISSIONING_TIME, TRUE, FALSE );
        ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
        MOV     R5,#0x0
        MOV     R4,#0x1
        MOV     R1,#-0x4c
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
// 2185 }
        MOV     A,#0x9
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock71
// 2186 
// 2187 
// 2188 /*********************************************************************
// 2189  * @fn          bdb_startResumeCommissioningProcess
// 2190  *
// 2191  * @brief       Starts or resume the commissioning operations sets in the 
// 2192  *              commissioningMode attribute
// 2193  *
// 2194  * @param       none
// 2195  *
// 2196  * @return      none
// 2197  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2198 void bdb_startResumeCommissioningProcess(void)
bdb_startResumeCommissioningProcess:
          CFI Block cfiBlock72 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
        CODE
// 2199 {
        FUNCALL bdb_startResumeCommissioningProcess, bdb_nwkSteeringDeviceOnNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_nwkJoiningFormation
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_NotifyCommissioningModeStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_setEpDescListToActiveEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_SendIdentifyQuery
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 11
        MOV     A,#-0xb
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
// 2200 
// 2201 #if ( defined ( BDB_TL_INITIATOR ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) ) 
// 2202   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_INITIATOR_TL)
// 2203   {
// 2204     uint16 nwkAddr;
// 2205 
// 2206     //Does the device supports this commissioning mode?
// 2207     if(bdbAttributes.bdbNodeCommissioningCapability & BDB_TOUCHLINK_CAPABILITY)
// 2208     {
// 2209       //Clear previous state and substates
// 2210       osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState));
// 2211       bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_TL;
// 2212       
// 2213       // Get our short address
// 2214       ZMacGetReq( ZMacShortAddress, (byte*)&nwkAddr );
// 2215       if ( nwkAddr == INVALID_NODE_ADDR )
// 2216       {
// 2217         initiatorSelectNwkParams();
// 2218       }
// 2219       
// 2220       touchLinkInitiator_StartDevDisc( );  
// 2221       
// 2222       bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_TOUCHLINK);
// 2223     }
// 2224     else
// 2225     {
// 2226       //Process the next commissioning mode
// 2227       bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );
// 2228     }
// 2229     return;
// 2230   }
// 2231 #endif // BDB_TOUCHLINK_CAPABILITY_ENABLED  
// 2232   
// 2233 #if ZG_BUILD_ENDDEVICE_TYPE
// 2234   if(ZG_DEVICE_ENDDEVICE_TYPE)
// 2235   {
// 2236     if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)
        MOV     DPTR,#bdbAttributes + 11
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.5
        JNC     $+5
        LJMP    ??bdb_startResumeCommissioningProcess_0 & 0xFFFF
// 2237     {
// 2238       //No commissioning process can be performed if the ZED has lost its parent
// 2239       return;
// 2240     }
// 2241   }
// 2242 #endif
// 2243   
// 2244   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_NWK_STEERING)
        MOV     C,0xE0 /* A   */.1
        JNC     ??bdb_startResumeCommissioningProcess_1
// 2245   {
// 2246     bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_STEERING_ON_NWK;
        MOV     DPTR,#bdbCommissioningProcedureState
        MOV     A,#0x4
        MOVX    @DPTR,A
// 2247     
// 2248     if(bdbAttributes.bdbNodeCommissioningCapability & BDB_NETWORK_STEERING_CAPABILITY)
        MOV     DPTR,#bdbAttributes + 12
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??bdb_startResumeCommissioningProcess_2
// 2249     {
// 2250 #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
// 2251       bdb_ClearNetworkParams();
// 2252 #endif
// 2253       if(bdbAttributes.bdbNodeIsOnANetwork)
        MOV     DPTR,#bdbAttributes + 14
        MOVX    A,@DPTR
        JZ      ??bdb_startResumeCommissioningProcess_3
// 2254       {
// 2255         bdb_nwkSteeringDeviceOnNwk();
        ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
        LCALL   `??bdb_nwkSteeringDeviceOnNwk::?relay`; Banked call to: bdb_nwkSteeringDeviceOnNwk
// 2256         bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV     R2,#0x1
        MOV     R1,#0x4
        LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
        SJMP    ??bdb_startResumeCommissioningProcess_2
// 2257       }
// 2258 #if (ZG_BUILD_JOINING_TYPE)
// 2259       else
// 2260       {
// 2261         if(ZG_DEVICE_JOINING_TYPE)
??bdb_startResumeCommissioningProcess_3:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??bdb_startResumeCommissioningProcess_4
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??bdb_startResumeCommissioningProcess_2
// 2262         {
// 2263           vDoPrimaryScan = TRUE;
??bdb_startResumeCommissioningProcess_4:
        MOV     DPTR,#vDoPrimaryScan
        MOV     A,#0x1
        MOVX    @DPTR,A
// 2264           
// 2265           //Initialize the commissioning procedure state, bdbJoinState to nwk discovery and TCLinkKeyExchange to not active
// 2266           osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState_t));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,#bdbCommissioningProcedureState & 0xff
        MOV     R3,#(bdbCommissioningProcedureState >> 8) & 0xff
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2267           bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_JOINING;
        MOV     DPTR,#bdbCommissioningProcedureState
        MOV     A,#0x3
        MOVX    @DPTR,A
// 2268           bdb_nwkJoiningFormation(TRUE);
        ; Setup parameters for call to function bdb_nwkJoiningFormation
        MOV     R1,#0x1
        LCALL   `??bdb_nwkJoiningFormation::?relay`; Banked call to: bdb_nwkJoiningFormation
// 2269           bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_NWK_STEERING);
        ; Setup parameters for call to function bdb_NotifyCommissioningModeStart
        MOV     R1,#0x1
        LCALL   `??bdb_NotifyCommissioningModeStart::?relay`; Banked call to: bdb_NotifyCommissioningModeStart
// 2270         }
// 2271       }
// 2272 #endif
// 2273 #if (ZG_BUILD_COORDINATOR_TYPE)
// 2274       if(ZG_DEVICE_COORDINATOR_TYPE)
// 2275       {
// 2276         bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, FALSE);
// 2277       }
// 2278 #endif
// 2279     }
// 2280     return;
??bdb_startResumeCommissioningProcess_2:
        LJMP    ??bdb_startResumeCommissioningProcess_0 & 0xFFFF
// 2281   }
// 2282   
// 2283   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_NWK_FORMATION)
??bdb_startResumeCommissioningProcess_1:
        MOV     C,0xE0 /* A   */.2
        JNC     ??bdb_startResumeCommissioningProcess_5
// 2284   {
// 2285     bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FORMATION;
        MOV     DPTR,#bdbCommissioningProcedureState
        MOV     A,#0x5
        MOVX    @DPTR,A
// 2286     
// 2287     if(bdbAttributes.bdbNodeCommissioningCapability & BDB_NETWORK_FORMATION_CAPABILITY)
// 2288     {
// 2289       if(!bdbAttributes.bdbNodeIsOnANetwork)
// 2290       {
// 2291 #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
// 2292       bdb_ClearNetworkParams();
// 2293 #endif
// 2294         vDoPrimaryScan = TRUE;
// 2295         
// 2296         osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState));
// 2297         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FORMATION;
// 2298 
// 2299         bdb_nwkJoiningFormation(FALSE);
// 2300         bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_FORMATION);
// 2301         return;
// 2302       }
// 2303     }
// 2304     bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV     R2,#0x0
        MOV     R1,A
        LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2305     return;
        LJMP    ??bdb_startResumeCommissioningProcess_0 & 0xFFFF
// 2306   }
// 2307 
// 2308 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)    
// 2309   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_FINDING_BINDING)
??bdb_startResumeCommissioningProcess_5:
        MOV     C,0xE0 /* A   */.3
        JC      $+5
        LJMP    ??bdb_startResumeCommissioningProcess_0 & 0xFFFF
// 2310   {
// 2311     bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FINDING_BINDING;
        MOV     DPTR,#bdbCommissioningProcedureState
        MOV     A,#0x6
        MOVX    @DPTR,A
// 2312     
// 2313     //Is the device on a network?
// 2314     if(bdb_isDeviceNonFactoryNew())
        MOV     DPTR,#bdbAttributes + 14
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??bdb_startResumeCommissioningProcess_6 & 0xFFFF
// 2315     {
// 2316       zclAttrRec_t attrRec;
// 2317 
// 2318       endPointDesc_t *bdb_CurrEpDescriptor = NULL;
// 2319 
// 2320       bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint();
        ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
        LCALL   `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
// 2321       
// 2322       //If not found endpoint with Identify cluster is found, then report fail
// 2323       if(bdb_CurrEpDescriptor == NULL)
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??bdb_startResumeCommissioningProcess_6 & 0xFFFF
// 2324       {
// 2325         bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
// 2326         return;
// 2327       }
// 2328       
// 2329       if( bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_TARGET)  //F&B as Target
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_3:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JC      $+5
        LJMP    ??bdb_startResumeCommissioningProcess_7 & 0xFFFF
// 2330       {
// 2331         if (zclFindAttrRec( bdb_CurrEpDescriptor->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
// 2332                   ATTRID_IDENTIFY_TIME, &attrRec ) )
        ; Setup parameters for call to function zclFindAttrRec
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3
        MOV     R3,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,R1
        JNZ     $+5
        LJMP    ??bdb_startResumeCommissioningProcess_8 & 0xFFFF
// 2333         {
// 2334           //Set it to at less 180 
// 2335           if ( *((uint16*)attrRec.attr.dataPtr) <= BDBC_MIN_COMMISSIONING_TIME )
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_11:
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#-0x4b
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        JNC     ??bdb_startResumeCommissioningProcess_9
// 2336           {
// 2337             *((uint16*)attrRec.attr.dataPtr) = BDBC_MIN_COMMISSIONING_TIME;
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,#-0x4c
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
// 2338              osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R2,#0x0
        MOV     R3,#0x20
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
// 2339 
// 2340             if(pfnIdentifyTimeChangeCB != NULL)
        MOV     DPTR,#pfnIdentifyTimeChangeCB
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_80:
        JZ      ??bdb_startResumeCommissioningProcess_9
// 2341             {
// 2342               if(bdbIndentifyActiveEndpoint == 0xFF)
        MOV     DPTR,#bdbIndentifyActiveEndpoint
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??bdb_startResumeCommissioningProcess_10
// 2343               {
// 2344                 pfnIdentifyTimeChangeCB(bdbIndentifyActiveEndpoint);  
        ; Setup parameters for indirect call
        MOV     R1,#-0x1
        SJMP    ??bdb_startResumeCommissioningProcess_11
// 2345               }
// 2346               else
// 2347               {
// 2348                 pfnIdentifyTimeChangeCB(bdb_CurrEpDescriptor->endPoint);
??bdb_startResumeCommissioningProcess_10:
        ; Setup parameters for indirect call
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
??bdb_startResumeCommissioningProcess_11:
        MOV     DPTR,#pfnIdentifyTimeChangeCB + 1
// 2349               }
// 2350             }
// 2351           }
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_89:
        LCALL   ?CALL_IND
// 2352           //Attribute found and set, report success
// 2353           if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR))
??bdb_startResumeCommissioningProcess_9:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_0:
        JC      ??bdb_startResumeCommissioningProcess_12
// 2354           {
// 2355             bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FB_TARGET_IN_PROGRESS);
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV     R1,#0x9
        SJMP    ??bdb_startResumeCommissioningProcess_13
// 2356           }
// 2357           else
// 2358           {
// 2359             bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
// 2360 
// 2361             bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
??bdb_startResumeCommissioningProcess_12:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
// 2362             bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_FB_TARGET_IN_PROGRESS;
// 2363 
// 2364             bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
// 2365           }
// 2366         }
??CrossCallReturnLabel_64:
        MOV     A,#0x9
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x3
        MOV     R3,#0x0
        MOV     R2,#0xa
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        SJMP    ??bdb_startResumeCommissioningProcess_7
// 2367         else
// 2368         {
// 2369           //Attribute not found and no initiator process, report fail
// 2370           if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR))
??bdb_startResumeCommissioningProcess_8:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_1:
        JC      ??bdb_startResumeCommissioningProcess_7
// 2371           {
// 2372             bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV     R1,#0xe
??bdb_startResumeCommissioningProcess_13:
        LCALL   `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
// 2373             
// 2374           }
// 2375         }
// 2376       }  //F&B Target
// 2377       
// 2378       if( bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR)  //F&B as Initiator
??bdb_startResumeCommissioningProcess_7:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_2:
        JNC     ??bdb_startResumeCommissioningProcess_0
// 2379       {
// 2380         bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
// 2381         
// 2382         //Send identify query with the endpoint requested
// 2383         if(bdb_SendIdentifyQuery(bdb_CurrEpDescriptor->endPoint) != ZSuccess)
        ; Setup parameters for call to function bdb_SendIdentifyQuery
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??bdb_SendIdentifyQuery::?relay`; Banked call to: bdb_SendIdentifyQuery
        MOV     A,R1
        JZ      ??bdb_startResumeCommissioningProcess_14
// 2384         {
// 2385           bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV     R1,#0xe
        LCALL   `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
// 2386         }
// 2387 
// 2388         //If periodic F&B is enabled
// 2389         if ( FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE )
// 2390         {
// 2391           // total F&B time will be at least BDBC_MIN_COMMISSIONING_TIME, and at most (BDBC_MIN_COMMISSIONING_TIME + FINDING_AND_BINDING_PERIODIC_TIME - 1)
// 2392           bdb_FB_InitiatorCurrentCyclesNumber = (BDBC_MIN_COMMISSIONING_TIME + (FINDING_AND_BINDING_PERIODIC_TIME - 1)) / FINDING_AND_BINDING_PERIODIC_TIME;
??bdb_startResumeCommissioningProcess_14:
        MOV     DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOV     A,#0xc
        MOVX    @DPTR,A
// 2393           
// 2394           osal_start_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT, FINDING_AND_BINDING_PERIODIC_TIME * 1000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3a98
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R2,#0x40
        MOV     R3,#0x0
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
// 2395         }
// 2396 
// 2397         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
// 2398         bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_FB_INITITATOR_IN_PROGRESS;
// 2399 
// 2400         bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
// 2401       } //F&B Initiator
// 2402     }
??CrossCallReturnLabel_65:
        MOV     A,#0xa
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x3
        MOV     R3,#0x0
        MOV     R2,#0xa
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        SJMP    ??bdb_startResumeCommissioningProcess_0
// 2403     //Not in the network
// 2404     else
// 2405     {
// 2406       bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
??bdb_startResumeCommissioningProcess_6:
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV     R1,#0xe
        LCALL   `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
// 2407     }
// 2408     
// 2409     return;
// 2410   }
// 2411 #endif
// 2412   
// 2413 }
??bdb_startResumeCommissioningProcess_0:
        MOV     A,#0xb
        SJMP    ??Subroutine40_0
          CFI EndBlock cfiBlock72

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond73 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
          CFI Conditional ??CrossCallReturnLabel_64
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-2
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker75 Using cfiCommon1
          CFI (cfiPicker75) NoFunction
          CFI (cfiPicker75) Picker
        MOV     A,#0x3
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiPicker75
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine37_0:
          CFI Block cfiCond76 Using cfiCommon0
          CFI Function bdb_tryNwkAssoc
          CFI Conditional ??CrossCallReturnLabel_66
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-2
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-2
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker79 Using cfiCommon1
          CFI (cfiPicker79) NoFunction
          CFI (cfiPicker79) Picker
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiPicker79

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond80 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-2
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-2
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker83 Using cfiCommon1
          CFI (cfiPicker83) NoFunction
          CFI (cfiPicker83) Picker
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_50:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        RET
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiPicker83

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond84 Using cfiCommon0
          CFI Function bdb_CreateRespondentList
          CFI Conditional ??CrossCallReturnLabel_67
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function bdb_AddRespondentNode
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-2
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function bdb_zclRespondentListClean
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker87 Using cfiCommon1
          CFI (cfiPicker87) NoFunction
          CFI (cfiPicker87) Picker
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiPicker87
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine38_0:
          CFI Block cfiCond88 Using cfiCommon0
          CFI Function bdb_AddRespondentNode
          CFI Conditional ??CrossCallReturnLabel_70
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function bdb_CreateRespondentList
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function bdb_AddRespondentNode
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-2
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function bdb_zclRespondentListClean
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-2
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker92 Using cfiCommon1
          CFI (cfiPicker92) NoFunction
          CFI (cfiPicker92) Picker
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiPicker92
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine39_0:
          CFI Block cfiCond93 Using cfiCommon0
          CFI Function bdb_ZclIdentifyCmdInd
          CFI Conditional ??CrossCallReturnLabel_72
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function bdb_parentLost
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond94) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond94) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond94) CFA_SP SP+-7
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function bdb_reportCommissioningState
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-2
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function bdb_reportCommissioningState
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-2
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function bdb_reportCommissioningState
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-2
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function bdb_filterNwkDisc
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-2
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function bdb_filterNwkDisc
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-2
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function bdb_tryNwkAssoc
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-2
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function bdb_nwkDescFree
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond101) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond101) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond101) CFA_SP SP+-7
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-2
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function bdb_event_loop
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function bdb_event_loop
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-2
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function bdb_ProcessOSALMsg
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-2
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function bdb_AddRespondentNode
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function bdb_CreateRespondentList
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-2
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function bdb_AddRespondentNode
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-2
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function bdb_zclRespondentListClean
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-2
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker110 Using cfiCommon1
          CFI (cfiPicker110) NoFunction
          CFI (cfiPicker110) Picker
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_87:
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiPicker110

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock111 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x1
          CFI EndBlock cfiBlock111
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine40_0:
          CFI Block cfiBlock112 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock112
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine41_0:
          CFI Block cfiBlock113 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock113
// 2414 
// 2415 /*********************************************************************
// 2416  * @fn          bdb_event_loop
// 2417  *
// 2418  * @brief       Main event loop bdb tasks.
// 2419  *
// 2420  * @param       task_id - task id
// 2421  * @param       events - event bitmap
// 2422  *
// 2423  * @return      unprocessed events
// 2424  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2425 UINT16 bdb_event_loop(byte task_id, UINT16 events)
bdb_event_loop:
          CFI Block cfiBlock114 Using cfiCommon0
          CFI Function bdb_event_loop
        CODE
// 2426 {
        FUNCALL bdb_event_loop, bdb_startResumeCommissioningProcess
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_tcLinkKeyExchangeAttempt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_nwkSteeringDeviceOnNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_nwkAssocAttemt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_ProcessOSALMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_tcLinkKeyExchangeAttempt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, NLME_LeaveReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_setEpDescListToActiveEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_getRespondentRetry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_SendIdentifyQuery
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_SendSimpleDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2427   (void)task_id;  // Intentionally unreferenced parameter
// 2428   
// 2429 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
// 2430   endPointDesc_t * bdb_CurrEpDescriptor;
// 2431 #endif
// 2432   
// 2433   if(events & BDB_CHANGE_COMMISSIONING_STATE)
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??bdb_event_loop_0
// 2434   {
// 2435     switch(bdbCommissioningProcedureState.bdbCommissioningState)
        MOV     DPTR,#bdbCommissioningProcedureState
        MOVX    A,@DPTR
        JZ      ??bdb_event_loop_1
        DEC     A
        JZ      ??bdb_event_loop_2
        ADD     A,#-0x3
        JZ      ??bdb_event_loop_3
        ADD     A,#-0x2
        JZ      ??bdb_event_loop_4
        SJMP    ??bdb_event_loop_5
// 2436     {
// 2437 
// 2438       case BDB_COMMISSIONING_STATE_START_RESUME:
// 2439         bdb_startResumeCommissioningProcess();
??bdb_event_loop_1:
        ; Setup parameters for call to function bdb_startResumeCommissioningProcess
        LCALL   `??bdb_startResumeCommissioningProcess::?relay`; Banked call to: bdb_startResumeCommissioningProcess
// 2440       break;
        SJMP    ??bdb_event_loop_5
// 2441       
// 2442       case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
// 2443         if (ZG_BUILD_JOINING_TYPE)
// 2444         {
// 2445           bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_STACK_VERSION);
??bdb_event_loop_2:
        ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
// 2446         }
// 2447       break;
        SJMP    ??bdb_event_loop_5
// 2448       
// 2449       case BDB_COMMISSIONING_STATE_STEERING_ON_NWK:
// 2450         bdb_nwkSteeringDeviceOnNwk();
??bdb_event_loop_3:
        ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
        LCALL   `??bdb_nwkSteeringDeviceOnNwk::?relay`; Banked call to: bdb_nwkSteeringDeviceOnNwk
// 2451         
// 2452         bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV     R2,#0x1
        MOV     R1,#0x4
        LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2453       break;
        SJMP    ??bdb_event_loop_5
// 2454       
// 2455       case BDB_COMMISSIONING_STATE_FINDING_BINDING:
// 2456         bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
??bdb_event_loop_4:
        MOV     DPTR,#bdbAttributes + 10
        CLR     A
        MOVX    @DPTR,A
// 2457         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
        MOV     DPTR,#bdbCommissioningProcedureState
        MOVX    @DPTR,A
// 2458         osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_32
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
// 2459       break;
// 2460       
// 2461     }
// 2462     return (events ^ BDB_CHANGE_COMMISSIONING_STATE);
??bdb_event_loop_5:
        MOV     A,R6
        XRL     A,#0x4
        LJMP    ??bdb_event_loop_6 & 0xFFFF
// 2463   }
// 2464 
// 2465   if ( events & SYS_EVENT_MSG )
??bdb_event_loop_0:
        MOV     A,R7
        ANL     A,#0x80
        JNZ     ??bdb_event_loop_7
// 2466   {
// 2467     uint8 *msg_ptr;
// 2468     
// 2469     while ( (msg_ptr = osal_msg_receive( bdb_TaskID )) )
// 2470     {
// 2471       //Validate the is receive on the right process
// 2472       if(((bdbInMsg_t*)msg_ptr)->hdr.event == bdbCommissioningProcedureState.bdbCommissioningState)
// 2473       {
// 2474         bdb_ProcessOSALMsg( (bdbInMsg_t *)msg_ptr );
// 2475       }
// 2476       //Notify the user
// 2477       else if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_NOTIFY_USER)
// 2478       {
// 2479         if(pfnCommissioningStatusCB)
// 2480         {
// 2481           ((bdbCommissioningModeMsg_t*) ((bdbInMsg_t*)msg_ptr)->buf)->bdbRemainingCommissioningModes = bdbAttributes.bdbCommissioningMode;
// 2482           pfnCommissioningStatusCB((bdbCommissioningModeMsg_t*) (((bdbInMsg_t*)msg_ptr)->buf));
// 2483         }
// 2484         
// 2485 #ifdef MT_APP_CNF_FUNC
// 2486         //Notify the host processor about the event
// 2487         MT_AppCnfCommissioningNotification((bdbCommissioningModeMsg_t*) (((bdbInMsg_t*)msg_ptr)->buf));
// 2488 #endif
// 2489         
// 2490       }
// 2491 #if (ZG_BUILD_COORDINATOR_TYPE)
// 2492       else
// 2493       {
// 2494         if(ZG_DEVICE_COORDINATOR_TYPE)
// 2495         {
// 2496           //Notify the status 
// 2497           if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_TC_LINK_KEY_EXCHANGE_PROCESS)
// 2498           {
// 2499             pfnTCLinkKeyExchangeProcessCB( (bdb_TCLinkKeyExchProcess_t*) ((bdbInMsg_t*)msg_ptr)->buf);
// 2500           }
// 2501         }
// 2502       }
// 2503 #endif
// 2504       
// 2505       
// 2506       // Release the memory
// 2507       osal_msg_deallocate( msg_ptr );
// 2508     }
// 2509 
// 2510     // Return unprocessed events
// 2511     return (events ^ SYS_EVENT_MSG);
// 2512   }
// 2513   
// 2514 
// 2515   if(events & BDB_PROCESS_TIMEOUT)
        MOV     A,R7
        ANL     A,#0x10
        JNZ     $+5
        LJMP    ??bdb_event_loop_8 & 0xFFFF
// 2516   {
// 2517     bdb_processTimeout();
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??bdb_event_loop_9
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??bdb_event_loop_10 & 0xFFFF
??bdb_event_loop_9:
        MOV     DPTR,#bdbCommissioningProcedureState
        MOVX    A,@DPTR
        DEC     A
        JZ      ??bdb_event_loop_11
        ADD     A,#-0x2
        JNZ     ??bdb_event_loop_10
        MOV     DPTR,#bdbCommissioningProcedureState + 2
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??bdb_event_loop_10
        MOV     A,#0x1
        MOVX    @DPTR,A
        ; Setup parameters for call to function bdb_nwkAssocAttemt
        MOV     R1,#0x0
        LCALL   `??bdb_nwkAssocAttemt::?relay`; Banked call to: bdb_nwkAssocAttemt
        SJMP    ??bdb_event_loop_10
??bdb_event_loop_12:
        MOV     A,#0xa
        XRL     A,R0
        JNZ     ??bdb_event_loop_13
        MOV     DPTR,#pfnCommissioningStatusCB
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_81:
        JZ      ??bdb_event_loop_13
        MOV     DPTR,#bdbAttributes + 11
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for indirect call
        MOV     A,R2
        ADD     A,#0x2
        MOV     R2,A
        CLR     A
        ADDC    A,?V1
        MOV     R3,A
        MOV     DPTR,#pfnCommissioningStatusCB
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_93:
        LCALL   ?CALL_IND
??bdb_event_loop_13:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??bdb_event_loop_7:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??bdb_event_loop_14
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#bdbCommissioningProcedureState
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??bdb_event_loop_12
        ; Setup parameters for call to function bdb_ProcessOSALMsg
        LCALL   `??bdb_ProcessOSALMsg::?relay`; Banked call to: bdb_ProcessOSALMsg
        SJMP    ??bdb_event_loop_13
??bdb_event_loop_14:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        LJMP    ??bdb_event_loop_15 & 0xFFFF
??bdb_event_loop_11:
        ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,#0x0
        LCALL   `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
// 2518     // Return unprocessed events
// 2519     return (events ^ BDB_PROCESS_TIMEOUT);
??bdb_event_loop_10:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x10
        LJMP    ??bdb_event_loop_15 & 0xFFFF
// 2520   }
// 2521   
// 2522   if(events &  BDB_REPORT_TIMEOUT){
??bdb_event_loop_8:
        MOV     A,R6
        ANL     A,#0x80
        JZ      ??bdb_event_loop_16
// 2523 #ifdef BDB_REPORTING    
// 2524     bdb_RepProcessEvent();
// 2525 #endif
// 2526     // Return unprocessed events
// 2527     return (events ^ BDB_REPORT_TIMEOUT);
        MOV     A,R6
        XRL     A,#0x80
        MOV     R2,A
        LJMP    ??bdb_event_loop_17 & 0xFFFF
// 2528   }
// 2529   
// 2530 #if (ZG_BUILD_JOINING_TYPE)
// 2531   if(events & BDB_TC_LINK_KEY_EXCHANGE_FAIL)
??bdb_event_loop_16:
        MOV     A,R6
        ANL     A,#0x2
        JZ      ??bdb_event_loop_18
// 2532   {
// 2533     if(ZG_DEVICE_JOINING_TYPE)
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??bdb_event_loop_19
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??bdb_event_loop_20
// 2534     {
// 2535       NLME_LeaveReq_t leaveReq;
// 2536       // Set every field to 0
// 2537       osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
??bdb_event_loop_19:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2538       
// 2539       bdb_setNodeIsOnANetwork(FALSE);
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV     R1,#0x0
        LCALL   `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
// 2540 
// 2541       if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
        ; Setup parameters for call to function NLME_LeaveReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
        MOV     A,R1
        JZ      ??bdb_event_loop_20
// 2542       {
// 2543         osal_set_event( bdb_TaskID,BDB_TC_LINK_KEY_EXCHANGE_FAIL);
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
// 2544       }
// 2545     }
// 2546     // Return unprocessed events
// 2547     return (events ^ BDB_TC_LINK_KEY_EXCHANGE_FAIL);
??bdb_event_loop_20:
        MOV     A,R6
        XRL     A,#0x2
        SJMP    ??bdb_event_loop_6
// 2548   }
// 2549 #endif
// 2550   
// 2551   
// 2552   if(events & BDB_TC_JOIN_TIMEOUT)
??bdb_event_loop_18:
        MOV     A,R7
        ANL     A,#0x8
        JZ      ??bdb_event_loop_21
// 2553   {     
// 2554 #if (ZG_BUILD_COORDINATOR_TYPE)
// 2555     if(ZG_DEVICE_COORDINATOR_TYPE)
// 2556     {
// 2557       bdb_TCProcessJoiningList();
// 2558     }
// 2559 #endif    
// 2560     return (events ^ BDB_TC_JOIN_TIMEOUT);
        MOV     A,R7
        XRL     A,#0x8
        LJMP    ??bdb_event_loop_15 & 0xFFFF
// 2561   }
// 2562 
// 2563 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
// 2564   
// 2565   if(events & BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT)
??bdb_event_loop_21:
        MOV     A,R6
        ANL     A,#0x40
        JZ      ??bdb_event_loop_22
// 2566   {
// 2567     if ( FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE )
// 2568     {
// 2569       bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint();
        ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
        LCALL   `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
        MOV     ?V0,R2
        MOV     ?V1,R3
// 2570       
// 2571       //If we have endpoint from which to send the identify command, then proceed, otherwise finish
// 2572       if(bdb_CurrEpDescriptor != NULL) //just a safty check. The fact that we got to this functuon at all means that this cannot be NULL
        MOV     A,R2
        ORL     A,?V1
        JZ      ??bdb_event_loop_23
// 2573       {
// 2574         //Substract an attempt
// 2575         bdb_FB_InitiatorCurrentCyclesNumber--;
// 2576         
// 2577         if(bdb_FB_InitiatorCurrentCyclesNumber > 0)
        MOV     DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
        JZ      ??bdb_event_loop_24
// 2578         {
// 2579           //Only send Identify Query if there is no pending responses from a previous identify query
// 2580           if ((osal_get_timeoutEx(bdb_TaskID, BDB_RESPONDENT_SIMPLEDESC_TIMEOUT) == 0) && (bdb_getRespondentRetry(pRespondentHead) == NULL))
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV     R2,#0x0
        MOV     R3,#0x40
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV     A,R2
        ORL     A,R3
        ORL     A,R4
        ORL     A,R5
        JNZ     ??bdb_event_loop_25
        ; Setup parameters for call to function bdb_getRespondentRetry
        MOV     DPTR,#pRespondentHead
        LCALL   ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_100:
        LCALL   `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
        MOV     ?V3,R3
        MOV     A,R2
        ORL     A,?V3
        JNZ     ??bdb_event_loop_25
// 2581           {
// 2582             //Send identify query with the endpoint requested
// 2583             bdb_SendIdentifyQuery(bdb_CurrEpDescriptor->endPoint);
        ; Setup parameters for call to function bdb_SendIdentifyQuery
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??bdb_SendIdentifyQuery::?relay`; Banked call to: bdb_SendIdentifyQuery
// 2584           }
// 2585 
// 2586           osal_start_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT, FINDING_AND_BINDING_PERIODIC_TIME * 1000);
??bdb_event_loop_25:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3a98
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     R2,#0x40
        MOV     R3,#0x0
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
// 2587         }
// 2588       }
// 2589     }
// 2590 
// 2591     if (bdb_FB_InitiatorCurrentCyclesNumber == 0)
??bdb_event_loop_23:
        MOV     DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX    A,@DPTR
        JNZ     ??bdb_event_loop_26
// 2592     {
// 2593       bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE );
??bdb_event_loop_24:
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV     R1,#0xb
        LCALL   `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
// 2594     }
// 2595     
// 2596     return (events ^ BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
??bdb_event_loop_26:
        MOV     A,R6
        XRL     A,#0x40
??bdb_event_loop_6:
        MOV     R2,A
        MOV     A,R7
        LJMP    ??bdb_event_loop_15 & 0xFFFF
// 2597   }
// 2598   
// 2599   
// 2600   
// 2601   if(events & BDB_IDENTIFY_TIMEOUT)
??bdb_event_loop_22:
        MOV     A,R7
        ANL     A,#0x20
        JNZ     $+5
        LJMP    ??bdb_event_loop_27 & 0xFFFF
// 2602   {
// 2603     zclAttrRec_t identifyAttrRec;
// 2604     epList_t *bdb_CurrEpDescriptorNextInList = NULL;
// 2605     bdb_CurrEpDescriptorNextInList = bdb_HeadEpDescriptorList;
        MOV     DPTR,#bdb_HeadEpDescriptorList
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV     ?V0,R0
        MOV     ?V1,R1
// 2606     
// 2607     bool KeepIdentifyTimerRunning = FALSE;
        MOV     ?V4,#0x0
        SJMP    ??bdb_event_loop_28
// 2608     
// 2609     while(bdb_CurrEpDescriptorNextInList != NULL )
// 2610     {
// 2611       endPointDesc_t *bdb_EpDescriptor = NULL;
// 2612       bdb_EpDescriptor = bdb_CurrEpDescriptorNextInList->epDesc;
// 2613     
// 2614       //Do not check ZDO or Zigbee reserved endpoints
// 2615       if((bdb_CurrEpDescriptorList->epDesc->endPoint == 0) || (bdb_CurrEpDescriptorList->epDesc->endPoint >= BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
// 2616       {
// 2617         bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
// 2618         continue;
// 2619       }
// 2620       
// 2621       if ( zclFindAttrRec( bdb_EpDescriptor->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
// 2622                         ATTRID_IDENTIFY_TIME, &identifyAttrRec ) )
// 2623       {
// 2624         if(*((uint16*)identifyAttrRec.attr.dataPtr) > 0)
// 2625         {
// 2626           (uint16)(*((uint16*)identifyAttrRec.attr.dataPtr))--;
// 2627           KeepIdentifyTimerRunning = TRUE;
// 2628         }
// 2629         else
// 2630         {
// 2631           // Use bdb success main state
// 2632           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
??bdb_event_loop_29:
        MOV     DPTR,#bdbAttributes + 10
        CLR     A
        MOVX    @DPTR,A
// 2633           if(pfnIdentifyTimeChangeCB != NULL)
        MOV     DPTR,#pfnIdentifyTimeChangeCB
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_82:
        JZ      ??bdb_event_loop_30
// 2634           {
// 2635             pfnIdentifyTimeChangeCB(bdb_EpDescriptor->endPoint);
        ; Setup parameters for indirect call
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#pfnIdentifyTimeChangeCB + 1
        LCALL   ??Subroutine42_0 & 0xFFFF
// 2636           }
// 2637         }
??CrossCallReturnLabel_90:
        LCALL   ?CALL_IND
// 2638       }
// 2639       bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
??bdb_event_loop_30:
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
??bdb_event_loop_28:
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??bdb_event_loop_31
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV     ?V2,R0
        MOV     ?V3,R1
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_4:
        MOVX    A,@DPTR
        JZ      ??bdb_event_loop_30
        CLR     C
        SUBB    A,#-0xf
        JNC     ??bdb_event_loop_30
        ; Setup parameters for call to function zclFindAttrRec
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V6,R0
        MOV     ?V7,R1
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3
        MOV     R3,#0x0
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     A,R1
        JZ      ??bdb_event_loop_30
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_7:
        JNZ     $+5
        LJMP    ??bdb_event_loop_29 & 0xFFFF
        MOV     A,R2
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV     ?V4,#0x1
        SJMP    ??bdb_event_loop_30
// 2640     }
// 2641     
// 2642     //If any endpoint has identify running, keep the timer on
// 2643     if(KeepIdentifyTimerRunning)
??bdb_event_loop_31:
        MOV     A,?V4
        JZ      ??bdb_event_loop_32
// 2644     {
// 2645       osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     R2,#0x0
        MOV     R3,#0x20
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
        SJMP    ??bdb_event_loop_33
// 2646     }
// 2647     else
// 2648     {
// 2649       osal_stop_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT );
??bdb_event_loop_32:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x0
        MOV     R3,#0x20
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 2650     }
// 2651     
// 2652     // Return unprocessed events
// 2653     return (events ^ BDB_IDENTIFY_TIMEOUT);
??bdb_event_loop_33:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x20
        SJMP    ??bdb_event_loop_15
// 2654   }
// 2655   
// 2656   if(events & BDB_RESPONDENT_SIMPLEDESC_TIMEOUT)
??bdb_event_loop_27:
        MOV     A,R7
        ANL     A,#0x40
        JZ      ??bdb_event_loop_34
// 2657   {
// 2658     // Send Simple Descriptor request to a respondent node
// 2659     bdb_SendSimpleDescReq();
        ; Setup parameters for call to function bdb_SendSimpleDescReq
        LCALL   `??bdb_SendSimpleDescReq::?relay`; Banked call to: bdb_SendSimpleDescReq
// 2660 
// 2661     return (events ^ BDB_RESPONDENT_SIMPLEDESC_TIMEOUT);
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x40
??bdb_event_loop_15:
        MOV     R3,A
        SJMP    ??bdb_event_loop_17
// 2662   }
// 2663 #endif
// 2664   
// 2665   return 0;
??bdb_event_loop_34:
        MOV     R2,#0x0
        MOV     R3,#0x0
??bdb_event_loop_17:
        MOV     A,#0xd
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
// 2666 }
          CFI EndBlock cfiBlock114

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond115 Using cfiCommon0
          CFI Function bdb_filterNwkDisc
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function bdb_event_loop
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-2
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function bdb_event_loop
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-2
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function bdb_crcInit
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-2
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker119 Using cfiCommon1
          CFI (cfiPicker119) NoFunction
          CFI (cfiPicker119) Picker
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_86:
        RET
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiPicker119

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond120 Using cfiCommon0
          CFI Function bdb_ZclIdentifyCmdInd
          CFI Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function bdb_filterNwkDisc
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_10
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-4
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function bdb_CreateRespondentList
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_67
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-4
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function bdb_AddRespondentNode
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_68
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-4
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function bdb_zclRespondentListClean
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_69
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-4
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function bdb_AddRespondentNode
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_70
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-4
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function bdb_ZclIdentifyCmdInd
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_72
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-4
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function bdb_parentLost
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_73
          CFI (cfiCond127) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond127) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond127) CFA_SP SP+-9
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function bdb_reportCommissioningState
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_74
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-4
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function bdb_reportCommissioningState
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_75
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-4
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function bdb_reportCommissioningState
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_76
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-4
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function bdb_filterNwkDisc
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_77
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-4
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function bdb_filterNwkDisc
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_78
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-4
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function bdb_tryNwkAssoc
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_79
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-4
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function bdb_nwkDescFree
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_71
          CFI (cfiCond134) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond134) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond134) CFA_SP SP+-9
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_80
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-4
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function bdb_event_loop
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_81
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-4
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function bdb_event_loop
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_82
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-4
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function bdb_ProcessOSALMsg
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_83
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-4
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function bdb_filterNwkDisc
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_13
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-4
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function bdb_event_loop
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_14
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-4
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function bdb_event_loop
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_15
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-4
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function bdb_crcInit
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_16
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-4
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_11
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-4
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function bdb_event_loop
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_12
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-4
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker145 Using cfiCommon1
          CFI (cfiPicker145) NoFunction
          CFI (cfiPicker145) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiPicker145

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond146 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function bdb_event_loop
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+-2
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker148 Using cfiCommon1
          CFI (cfiPicker148) NoFunction
          CFI (cfiPicker148) Picker
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_85:
        MOV     DPL,R0
        MOV     DPH,R1
        RET
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiPicker148

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond149 Using cfiCommon0
          CFI Function bdb_ZclIdentifyCmdInd
          CFI Conditional ??CrossCallReturnLabel_92
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function bdb_event_loop
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-2
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker151 Using cfiCommon1
          CFI (cfiPicker151) NoFunction
          CFI (cfiPicker151) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiPicker151
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine42_0:
          CFI Block cfiCond152 Using cfiCommon0
          CFI Function bdb_filterNwkDisc
          CFI Conditional ??CrossCallReturnLabel_88
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+-2
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function bdb_event_loop
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-2
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function bdb_ProcessOSALMsg
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-2
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function bdb_ZclIdentifyCmdInd
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-2
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function bdb_event_loop
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond157) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond157) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond157) CFA_SP SP+-2
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker158 Using cfiCommon1
          CFI (cfiPicker158) NoFunction
          CFI (cfiPicker158) Picker
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiPicker158

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond159 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function bdb_event_loop
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-2
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker161 Using cfiCommon1
          CFI (cfiPicker161) NoFunction
          CFI (cfiPicker161) Picker
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_51:
        RET
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiPicker161

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond162 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
          CFI Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_1
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-4
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_2
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-4
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_3
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-4
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function bdb_event_loop
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_4
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-4
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker167 Using cfiCommon1
          CFI (cfiPicker167) NoFunction
          CFI (cfiPicker167) Picker
        MOV     DPTR,#bdb_CurrEpDescriptorList
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_62:
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_63:
        RET
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiPicker167

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond168 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
          CFI Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_1
          CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond169) CFA_SP SP+-6
          CFI (cfiCond169) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_2
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+-6
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_3
          CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond171) CFA_SP SP+-6
          CFI (cfiCond171) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function bdb_event_loop
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_4
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-6
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_0
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+-6
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_1
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-6
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_2
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+-6
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_3
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-6
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function bdb_event_loop
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_4
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond177) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond177) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-6
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker178 Using cfiCommon1
          CFI (cfiPicker178) NoFunction
          CFI (cfiPicker178) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiPicker178
// 2667 
// 2668 
// 2669 /*********************************************************************
// 2670  * @fn          bdb_touchlinkSendFNReset
// 2671  *
// 2672  * @brief       Starts the Factory New Procedure for Initiator
// 2673  *
// 2674  * @param       isOnANetwork - TRUE if the devices is not FN, FALSE otherwise
// 2675  *
// 2676  * @return      none
// 2677  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2678 void bdb_touchlinkSendFNReset( void )
bdb_touchlinkSendFNReset:
          CFI Block cfiBlock179 Using cfiCommon0
          CFI Function bdb_touchlinkSendFNReset
        CODE
// 2679 {
        ; Saved register size: 0
        ; Auto size: 0
// 2680 #ifdef BDB_TL_INITIATOR
// 2681   touchLinkInitiator_ResetToFNProcedure( );
// 2682 #endif
// 2683 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock179
// 2684 
// 2685 
// 2686 /*********************************************************************
// 2687  * @fn          bdb_setNodeIsOnANetwork
// 2688  *
// 2689  * @brief       Sets and saves in Nv bdbNodeIsOnANetwork attribute
// 2690  *
// 2691  * @param       isOnANetwork - TRUE if the devices is not FN, FALSE otherwise
// 2692  *
// 2693  * @return      none
// 2694  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2695 void bdb_setNodeIsOnANetwork(bool isOnANetwork)
bdb_setNodeIsOnANetwork:
          CFI Block cfiBlock180 Using cfiCommon0
          CFI Function bdb_setNodeIsOnANetwork
        CODE
// 2696 {
        FUNCALL bdb_setNodeIsOnANetwork, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 2697   if((bdbAttributes.bdbNodeIsOnANetwork != isOnANetwork) || (!bdb_initialization))
        MOV     DPTR,#bdbAttributes + 14
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??bdb_setNodeIsOnANetwork_0
        MOV     DPTR,#bdb_initialization
        MOVX    A,@DPTR
        JNZ     ??bdb_setNodeIsOnANetwork_1
// 2698   {
// 2699     //We lose our network
// 2700     if(!isOnANetwork)
??bdb_setNodeIsOnANetwork_0:
        MOV     A,R6
        JNZ     ??bdb_setNodeIsOnANetwork_2
// 2701     {
// 2702       bdbAttributes.bdbCommissioningMode = 0;
        MOV     DPTR,#bdbAttributes + 11
        CLR     A
        MOVX    @DPTR,A
// 2703     }
// 2704     
// 2705     bdbAttributes.bdbNodeIsOnANetwork = isOnANetwork;
??bdb_setNodeIsOnANetwork_2:
        MOV     A,R6
        MOV     DPTR,#bdbAttributes + 14
        MOVX    @DPTR,A
// 2706     
// 2707     osal_nv_write(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0,#(bdbAttributes + 14) & 0xff
        MOV     ?V1,#((bdbAttributes + 14) >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x55
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 2708   }
// 2709 }
??bdb_setNodeIsOnANetwork_1:
        LJMP    ??Subroutine41_0 & 0xFFFF
          CFI EndBlock cfiBlock180
// 2710 
// 2711 /*********************************************************************
// 2712  * @fn          bdb_setCommissioningGroupID
// 2713  *
// 2714  * @brief       Sets the commissioning groupd ID
// 2715  *
// 2716  * @param       groupID
// 2717  *
// 2718  * @return      none
// 2719  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2720 void bdb_setCommissioningGroupID(uint16 groupID)
bdb_setCommissioningGroupID:
          CFI Block cfiBlock181 Using cfiCommon0
          CFI Function bdb_setCommissioningGroupID
        CODE
// 2721 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2722   bdbAttributes.bdbCommissioningGroupID = groupID;
        MOV     DPTR,#bdbAttributes + 8
        LJMP    ?Subroutine0 & 0xFFFF
// 2723 }
          CFI EndBlock cfiBlock181
// 2724 
// 2725 /*********************************************************************
// 2726  * @fn      bdb_CreateRespondentList
// 2727  *
// 2728  * @brief   Create respondent list for finding and binding if empty
// 2729  *
// 2730  * @param   pHead - pointer to a pointer of the list head
// 2731  *
// 2732  * @return  none
// 2733  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2734 void bdb_CreateRespondentList( bdbFindingBindingRespondent_t **pHead )
bdb_CreateRespondentList:
          CFI Block cfiBlock182 Using cfiCommon0
          CFI Function bdb_CreateRespondentList
        CODE
// 2735 {
        FUNCALL bdb_CreateRespondentList, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        LCALL   ?Subroutine5 & 0xFFFF
// 2736 
// 2737   // Create the list if empty
// 2738   if ( *pHead == NULL )
??CrossCallReturnLabel_67:
        JNZ     ??CrossCallReturnLabel_44
// 2739   {
// 2740     *pHead = ( bdbFindingBindingRespondent_t* )osal_mem_alloc( sizeof( bdbFindingBindingRespondent_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0xf
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2741     
// 2742     if ( *pHead != NULL )
        MOV     A,R0
        ORL     A,R1
        JZ      ??CrossCallReturnLabel_44
// 2743     {
// 2744       (*pHead)->pNext = NULL;
        LCALL   ?Subroutine24 & 0xFFFF
// 2745     }
// 2746   }
// 2747   return;
??CrossCallReturnLabel_44:
        LJMP    ??Subroutine41_0 & 0xFFFF
// 2748 }
          CFI EndBlock cfiBlock182
// 2749 
// 2750 /*********************************************************************
// 2751  * @fn      bdb_AddRespondentNode
// 2752  *
// 2753  * @brief   Add node to respondent list for finding and binding
// 2754  *
// 2755  * @param   pHead - pointer to a pointer of the list head
// 2756  *
// 2757  * @return  pointer to new node
// 2758  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2759 bdbFindingBindingRespondent_t* bdb_AddRespondentNode( bdbFindingBindingRespondent_t **pHead, zclIdentifyQueryRsp_t *pCmd )
bdb_AddRespondentNode:
          CFI Block cfiBlock183 Using cfiCommon0
          CFI Function bdb_AddRespondentNode
        CODE
// 2760 {
        FUNCALL bdb_AddRespondentNode, bdb_CreateRespondentList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_AddRespondentNode, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        LCALL   ?Subroutine5 & 0xFFFF
// 2761   bdbFindingBindingRespondent_t **pCurr;
// 2762   bdbFindingBindingRespondent_t *temp;
// 2763   
// 2764     // Create respondent list if empty
// 2765   if ( *pHead == NULL )
??CrossCallReturnLabel_68:
        JNZ     ??bdb_AddRespondentNode_0
// 2766   {
// 2767     bdb_CreateRespondentList( pHead );
        ; Setup parameters for call to function bdb_CreateRespondentList
        LCALL   `??bdb_CreateRespondentList::?relay`; Banked call to: bdb_CreateRespondentList
// 2768     return *pHead;
        LJMP    ??CrossCallReturnLabel_45 & 0xFFFF
// 2769   }
// 2770   else
// 2771   {
// 2772     // if pCmd is equal to NULL, don't look for duplucates
// 2773     if( pCmd != NULL )
??bdb_AddRespondentNode_0:
        MOV     A,R4
        ORL     A,R5
        JZ      ??bdb_AddRespondentNode_1
// 2774     {
// 2775       //Find if any duplicate in the list
// 2776       temp = *pHead;
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine14 & 0xFFFF
// 2777       
// 2778       while(temp != NULL)
// 2779       {
// 2780         if((temp->data.endPoint == pCmd->srcAddr->endPoint) && (temp->data.panId == pCmd->srcAddr->panId))
??CrossCallReturnLabel_19:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??bdb_AddRespondentNode_2
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_23:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??bdb_AddRespondentNode_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??bdb_AddRespondentNode_3:
        JNZ     ??bdb_AddRespondentNode_2
// 2781         {
// 2782           //Duplicate
// 2783           if(temp->data.addr.shortAddr == pCmd->srcAddr->addr.shortAddr)
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine16 & 0xFFFF
// 2784           {
// 2785             return NULL;
// 2786           }
// 2787         }
??CrossCallReturnLabel_24:
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??bdb_AddRespondentNode_4
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??bdb_AddRespondentNode_4:
        JZ      ??bdb_AddRespondentNode_5
// 2788         temp = temp->pNext;
??bdb_AddRespondentNode_2:
        MOV     A,R2
        ADD     A,#0xd
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        LCALL   ?Subroutine8 & 0xFFFF
// 2789       }
// 2790     }
??CrossCallReturnLabel_5:
        JNZ     ??CrossCallReturnLabel_19
// 2791     
// 2792     pCurr = &((*pHead)->pNext);
// 2793     
// 2794     while ( *pCurr != NULL )
// 2795     {
// 2796       pCurr = &((*pCurr)->pNext);
??bdb_AddRespondentNode_1:
        MOV     A,R0
        ADD     A,#0xd
        MOV     R6,A
        CLR     A
        ADDC    A,R1
        LCALL   ??Subroutine38_0 & 0xFFFF
// 2797     }
??CrossCallReturnLabel_70:
        JNZ     ??bdb_AddRespondentNode_1
// 2798 
// 2799     *pCurr = ( bdbFindingBindingRespondent_t* )osal_mem_alloc( sizeof( bdbFindingBindingRespondent_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0xf
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2800     
// 2801     if(*pCurr == NULL)
        MOV     A,R0
        ORL     A,R1
        JNZ     ??bdb_AddRespondentNode_6
// 2802     {
// 2803       //No memory
// 2804       return NULL;
??bdb_AddRespondentNode_5:
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??CrossCallReturnLabel_101
// 2805     }
// 2806     
// 2807     (*pCurr)->pNext = NULL;
??bdb_AddRespondentNode_6:
        LCALL   ?Subroutine24 & 0xFFFF
// 2808   }
// 2809   
// 2810   return *pCurr;
??CrossCallReturnLabel_45:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_101:
        LJMP    ??Subroutine41_0 & 0xFFFF
// 2811 }
          CFI EndBlock cfiBlock183

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond184 Using cfiCommon0
          CFI Function bdb_CreateRespondentList
          CFI Conditional ??CrossCallReturnLabel_44
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond185 Using cfiCommon0
          CFI (cfiCond185) Function bdb_AddRespondentNode
          CFI (cfiCond185) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond185) CFA_SP SP+-2
          CFI (cfiCond185) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker186 Using cfiCommon1
          CFI (cfiPicker186) NoFunction
          CFI (cfiPicker186) Picker
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_57:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond184
          CFI EndBlock cfiCond185
          CFI EndBlock cfiPicker186

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond187 Using cfiCommon0
          CFI Function bdb_NetworkRestoredResumeState
          CFI Conditional ??CrossCallReturnLabel_56
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond188 Using cfiCommon0
          CFI (cfiCond188) Function bdb_CreateRespondentList
          CFI (cfiCond188) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_44
          CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond188) CFA_SP SP+-4
          CFI (cfiCond188) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function bdb_AddRespondentNode
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_45
          CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond189) CFA_SP SP+-4
          CFI (cfiCond189) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker190 Using cfiCommon1
          CFI (cfiPicker190) NoFunction
          CFI (cfiPicker190) Picker
        MOV     A,R0
        ADD     A,#0xd
        MOV     DPL,A
        CLR     A
        ADDC    A,R1
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond187
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiPicker190

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond191 Using cfiCommon0
          CFI Function bdb_AddRespondentNode
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function bdb_AddRespondentNode
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+-2
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker193 Using cfiCommon1
          CFI (cfiPicker193) NoFunction
          CFI (cfiPicker193) Picker
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_55:
        MOV     DPL,R4
        MOV     DPH,R5
        RET
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiPicker193

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond194 Using cfiCommon0
          CFI Function bdb_filterNwkDisc
          CFI Conditional ??CrossCallReturnLabel_52
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function bdb_filterNwkDisc
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond195) CFA_SP SP+-2
          CFI (cfiCond195) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function bdb_filterNwkDisc
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond196) CFA_SP SP+-2
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond197 Using cfiCommon0
          CFI (cfiCond197) Function bdb_AddRespondentNode
          CFI (cfiCond197) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_23
          CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond197) CFA_SP SP+-4
          CFI (cfiCond197) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond198 Using cfiCommon0
          CFI (cfiCond198) Function bdb_AddRespondentNode
          CFI (cfiCond198) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_24
          CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond198) CFA_SP SP+-4
          CFI (cfiCond198) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker199 Using cfiCommon1
          CFI (cfiPicker199) NoFunction
          CFI (cfiPicker199) Picker
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        RET
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiCond197
          CFI EndBlock cfiCond198
          CFI EndBlock cfiPicker199

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond200 Using cfiCommon0
          CFI Function bdb_NetworkRestoredResumeState
          CFI Conditional ??CrossCallReturnLabel_17
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond201 Using cfiCommon0
          CFI (cfiCond201) Function bdb_joinProcess
          CFI (cfiCond201) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond201) CFA_SP SP+-2
          CFI (cfiCond201) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function bdb_AddRespondentNode
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-2
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function bdb_calculateCCITT_CRC
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-2
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker204 Using cfiCommon1
          CFI (cfiPicker204) NoFunction
          CFI (cfiPicker204) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
          CFI EndBlock cfiCond200
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiPicker204

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond205 Using cfiCommon0
          CFI Function bdb_ZclIdentifyCmdInd
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond206 Using cfiCommon0
          CFI (cfiCond206) Function bdb_event_loop
          CFI (cfiCond206) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond206) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond206) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond206) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond206) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond206) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond206) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond206) CFA_SP SP+-2
          CFI (cfiCond206) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function bdb_AddRespondentNode
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond207) CFA_SP SP+-2
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond208 Using cfiCommon0
          CFI (cfiCond208) Function bdb_zclRespondentListClean
          CFI (cfiCond208) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond208) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond208) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond208) CFA_SP SP+-2
          CFI (cfiCond208) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker209 Using cfiCommon1
          CFI (cfiPicker209) NoFunction
          CFI (cfiPicker209) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        RET
          CFI EndBlock cfiCond205
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiCond208
          CFI EndBlock cfiPicker209
// 2812 
// 2813 /*********************************************************************
// 2814  * @fn      bdb_zclRespondentListClean
// 2815  *
// 2816  * @brief   This function free reserved memory for respondent list
// 2817  *
// 2818  * @param   pHead - begin of the respondent list
// 2819  *
// 2820  * @return  status
// 2821  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2822 void bdb_zclRespondentListClean( bdbFindingBindingRespondent_t **pHead )
bdb_zclRespondentListClean:
          CFI Block cfiBlock210 Using cfiCommon0
          CFI Function bdb_zclRespondentListClean
        CODE
// 2823 {
        FUNCALL bdb_zclRespondentListClean, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        LCALL   ?Subroutine5 & 0xFFFF
// 2824   bdbFindingBindingRespondent_t **pCurr;
// 2825   bdbFindingBindingRespondent_t **pNext;
// 2826   
// 2827   if ( *pHead == NULL )
??CrossCallReturnLabel_69:
        JZ      ??bdb_zclRespondentListClean_0
// 2828   {
// 2829     return;
// 2830   }
// 2831   
// 2832   pCurr = pHead;
        MOV     ?V0,R6
        MOV     ?V1,R7
        SJMP    ??bdb_zclRespondentListClean_1
// 2833   
// 2834   while( *pCurr != NULL )
// 2835   {
// 2836     pNext = &((*pCurr)->pNext);
??bdb_zclRespondentListClean_2:
        MOV     A,R2
        ADD     A,#0xd
        MOV     ?V2,A
        CLR     A
        ADDC    A,R3
        MOV     ?V3,A
// 2837     osal_mem_free( *pCurr );
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2838     *pCurr = ( bdbFindingBindingRespondent_t* )NULL;
        MOV     DPL,?V0
        MOV     DPH,?V1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 2839     pCurr = pNext;
        MOV     ?V0,?V2
        MOV     ?V1,?V3
// 2840   }
??bdb_zclRespondentListClean_1:
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_8:
        JNZ     ??bdb_zclRespondentListClean_2
// 2841   *pHead = NULL;
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 2842 }
??bdb_zclRespondentListClean_0:
        LJMP    ??Subroutine36_0 & 0xFFFF
          CFI EndBlock cfiBlock210
// 2843 
// 2844  /*********************************************************************
// 2845  * PRIVATE FUNCTIONS
// 2846  *********************************************************************/
// 2847 
// 2848 /*********************************************************************
// 2849  * @fn      bdb_ProcessOSALMsg
// 2850  *
// 2851  * @brief   Process the incoming task message.
// 2852  *
// 2853  * @param   msgPtr - message to process
// 2854  *
// 2855  * @return  none
// 2856  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2857 void bdb_ProcessOSALMsg( bdbInMsg_t *msgPtr )
bdb_ProcessOSALMsg:
          CFI Block cfiBlock211 Using cfiCommon0
          CFI Function bdb_ProcessOSALMsg
        CODE
// 2858 {
        FUNCALL bdb_ProcessOSALMsg, bdb_filterNwkDisc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, bdb_tryNwkAssoc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, bdb_nwkDiscoveryAttempt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, nwkNeighborInitTable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, NLME_NwkDiscTerm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, bdb_tryNwkAssoc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, bdb_setNodeJoinLinkKeyType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, bdb_setNodeJoinLinkKeyType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, APSME_RequestKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, APSME_GetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, APSME_VerifyKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, bdb_BindIfMatch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 26
        MOV     A,#-0x1a
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
// 2859   
// 2860   switch(msgPtr->hdr.event)
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        DEC     A
        JNZ     $+5
        LJMP    ??bdb_ProcessOSALMsg_0 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??bdb_ProcessOSALMsg_1 & 0xFFFF
        DEC     A
        JZ      ??bdb_ProcessOSALMsg_2
        ADD     A,#-0x3
        JNZ     $+5
        LJMP    ??bdb_ProcessOSALMsg_1 & 0xFFFF
        LJMP    ??bdb_ProcessOSALMsg_3 & 0xFFFF
// 2861   {
// 2862 #if (ZG_BUILD_JOINING_TYPE)
// 2863     case BDB_COMMISSIONING_STATE_JOINING:
// 2864       if(ZG_DEVICE_JOINING_TYPE)
??bdb_ProcessOSALMsg_2:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??bdb_ProcessOSALMsg_4
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??bdb_ProcessOSALMsg_3 & 0xFFFF
// 2865       {
// 2866         switch(msgPtr->buf[0])
??bdb_ProcessOSALMsg_4:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??bdb_ProcessOSALMsg_5
        DEC     A
        JZ      ??bdb_ProcessOSALMsg_6
        LJMP    ??bdb_ProcessOSALMsg_3 & 0xFFFF
// 2867         {
// 2868           case BDB_JOIN_EVENT_NWK_DISCOVERY:
// 2869             if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
??bdb_ProcessOSALMsg_5:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??bdb_ProcessOSALMsg_7
// 2870             {
// 2871               bdb_filterNwkDisc();
        ; Setup parameters for call to function bdb_filterNwkDisc
        LCALL   `??bdb_filterNwkDisc::?relay`; Banked call to: bdb_filterNwkDisc
// 2872               bdb_tryNwkAssoc();
        ; Setup parameters for call to function bdb_tryNwkAssoc
        SJMP    ??bdb_ProcessOSALMsg_8
// 2873             }
// 2874             else
// 2875             {
// 2876               bdb_nwkDiscoveryAttempt(FALSE);
??bdb_ProcessOSALMsg_7:
        ; Setup parameters for call to function bdb_nwkDiscoveryAttempt
        MOV     R1,#0x0
        LCALL   `??bdb_nwkDiscoveryAttempt::?relay`; Banked call to: bdb_nwkDiscoveryAttempt
        LJMP    ??bdb_ProcessOSALMsg_3 & 0xFFFF
// 2877             }
// 2878           break;
// 2879           
// 2880           case BDB_JOIN_EVENT_ASSOCIATION:
// 2881             if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
??bdb_ProcessOSALMsg_6:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??bdb_ProcessOSALMsg_9
// 2882             {
// 2883               bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_WAITING_NWK_KEY;
        MOV     DPTR,#bdbCommissioningProcedureState + 2
        MOV     A,#0x2
        MOVX    @DPTR,A
// 2884               //Nwk key timeout get right timing
// 2885               osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT, BDB_DEFAULT_DEVICE_UNAUTH_TIMEOUT);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_bb8
        LJMP    ??bdb_ProcessOSALMsg_10 & 0xFFFF
// 2886             }
// 2887             else
// 2888             {
// 2889               if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
// 2890                    (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
??bdb_ProcessOSALMsg_9:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,#-0x2
        XRL     A,?V0
        JNZ     ??bdb_ProcessOSALMsg_11
        MOV     A,#-0x1
        XRL     A,?V1
??bdb_ProcessOSALMsg_11:
        JNZ     ??bdb_ProcessOSALMsg_12
        MOV     DPTR,#_NIB + 20
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??bdb_ProcessOSALMsg_13
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??bdb_ProcessOSALMsg_13:
        JZ      ??bdb_ProcessOSALMsg_14
// 2891               {
// 2892                 uint16 addr = INVALID_NODE_ADDR;
??bdb_ProcessOSALMsg_12:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
// 2893                 // Invalidate nwk addr so end device does not use in its data reqs.
// 2894                 _NIB.nwkDevAddress = INVALID_NODE_ADDR;
        MOV     DPTR,#_NIB + 20
        DEC     A
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
// 2895                 ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
        ; Setup parameters for call to function ZMacSetReq
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP101_8
        MOV     R1,#0x53
        LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
// 2896               }
// 2897 
// 2898               //Clear the neighbor Table and network discovery tables.
// 2899               nwkNeighborInitTable();
??bdb_ProcessOSALMsg_14:
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
// 2900               NLME_NwkDiscTerm();
        ; Setup parameters for call to function NLME_NwkDiscTerm
        LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
// 2901               _NIB.nwkState = NWK_INIT;
        MOV     DPTR,#_NIB + 35
        CLR     A
        MOVX    @DPTR,A
// 2902               
// 2903               bdb_tryNwkAssoc();
        ; Setup parameters for call to function bdb_tryNwkAssoc
??bdb_ProcessOSALMsg_8:
        LCALL   `??bdb_tryNwkAssoc::?relay`; Banked call to: bdb_tryNwkAssoc
        LJMP    ??bdb_ProcessOSALMsg_3 & 0xFFFF
// 2904             }
// 2905           break;
// 2906         }
// 2907       }
// 2908     break;
// 2909     
// 2910     case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
// 2911       if(ZG_DEVICE_JOINING_TYPE)
??bdb_ProcessOSALMsg_0:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??bdb_ProcessOSALMsg_15
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??bdb_ProcessOSALMsg_3 & 0xFFFF
// 2912       {
// 2913         if(msgPtr->hdr.status != BDB_MSG_EVENT_SUCCESS)
??bdb_ProcessOSALMsg_15:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??bdb_ProcessOSALMsg_16
// 2914         {
// 2915           bdbAttributes.bdbTCLinkKeyExchangeAttempts++;
        MOV     DPTR,#bdbAttributes + 16
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
// 2916           if(bdbAttributes.bdbTCLinkKeyExchangeAttempts > bdbAttributes.bdbTCLinkKeyExchangeAttemptsMax)
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        JNC     ??bdb_ProcessOSALMsg_16
// 2917           {
// 2918             //TCLK process fail due to many attempts fails
// 2919             bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV     R2,#0x0
        SJMP    ??bdb_ProcessOSALMsg_17
// 2920             return;
// 2921           }
// 2922         }
// 2923         switch(bdbCommissioningProcedureState.bdbTCExchangeState)
??bdb_ProcessOSALMsg_16:
        MOV     DPTR,#bdbCommissioningProcedureState + 1
        MOVX    A,@DPTR
        DEC     A
        JZ      ??bdb_ProcessOSALMsg_18
        DEC     A
        JZ      ??bdb_ProcessOSALMsg_19
        DEC     A
        JNZ     $+5
        LJMP    ??bdb_ProcessOSALMsg_20 & 0xFFFF
        LJMP    ??bdb_ProcessOSALMsg_3 & 0xFFFF
// 2924         {
// 2925           case BDB_REQ_TC_STACK_VERSION:
// 2926             bdb_requestTCStackVersion();
??bdb_ProcessOSALMsg_18:
        MOV     DPTR,#requestNewTrustCenterLinkKey
        MOVX    A,@DPTR
        JZ      ??bdb_ProcessOSALMsg_21
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL   `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV     A,R1
        JNZ     ??bdb_ProcessOSALMsg_22
        MOV     DPTR,#bdbAttributes + 18
        MOVX    A,@DPTR
        JNZ     ??bdb_ProcessOSALMsg_23
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     R1,#0x2
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        ; Setup parameters for call to function osal_stop_timerEx
        SJMP    ??bdb_ProcessOSALMsg_24
??bdb_ProcessOSALMsg_23:
        MOV     DPTR,#pfnCBKETCLinkKeyExchange
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_83:
        JNZ     $+5
        LJMP    ??bdb_ProcessOSALMsg_3 & 0xFFFF
        ; Setup parameters for indirect call
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_91:
        LCALL   ?CALL_IND
        LJMP    ??bdb_ProcessOSALMsg_3 & 0xFFFF
??bdb_ProcessOSALMsg_22:
        ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
        MOV     R1,#0x1
        SJMP    ??bdb_ProcessOSALMsg_25
??bdb_ProcessOSALMsg_21:
        ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
        MOV     R1,#0x0
??bdb_ProcessOSALMsg_25:
        LCALL   `??bdb_setNodeJoinLinkKeyType::?relay`; Banked call to: bdb_setNodeJoinLinkKeyType
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV     R2,#0x1
??bdb_ProcessOSALMsg_17:
        MOV     R1,#0x1
        LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
        LJMP    ??bdb_ProcessOSALMsg_3 & 0xFFFF
// 2927           break;
// 2928           case BDB_REQ_TC_LINK_KEY:
// 2929             bdb_requestTCLinkKey();
??bdb_ProcessOSALMsg_19:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
        ; Setup parameters for call to function APSME_RequestKeyReq
        DEC     A
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??APSME_RequestKeyReq::?relay`; Banked call to: APSME_RequestKeyReq
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x0
        MOV     R3,#0x10
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#requestLinkKeyTimeout
        SJMP    ??bdb_ProcessOSALMsg_10
// 2930           break;
// 2931           case BDB_REQ_VERIFY_TC_LINK_KEY:
// 2932             bdb_requestVerifyTCLinkKey();
??bdb_ProcessOSALMsg_20:
        ; Setup parameters for call to function APSME_GetRequest
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP102_8
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#-0x55
        LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP100_8
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
        ; Setup parameters for call to function APSME_VerifyKeyReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??APSME_VerifyKeyReq::?relay`; Banked call to: APSME_VerifyKeyReq
        ; Setup parameters for call to function osal_stop_timerEx
??bdb_ProcessOSALMsg_24:
        MOV     R2,#0x0
        MOV     R3,#0x10
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_1388
??bdb_ProcessOSALMsg_10:
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 40)
        MOV     R2,#0x0
        MOV     R3,#0x10
        MOV     DPTR,#bdb_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
// 2933           break;
// 2934         }
// 2935       }
// 2936    break;
// 2937 #endif
// 2938 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
// 2939     case BDB_COMMISSIONING_STATE_TL:
// 2940     case BDB_COMMISSIONING_STATE_FINDING_BINDING:
// 2941       
// 2942       if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
// 2943       {
// 2944         bdb_BindIfMatch( msgPtr );
// 2945       }
// 2946     break;
// 2947 #endif
// 2948    }
        SJMP    ??bdb_ProcessOSALMsg_3
??bdb_ProcessOSALMsg_1:
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??bdb_ProcessOSALMsg_3
        ; Setup parameters for call to function bdb_BindIfMatch
        LCALL   `??bdb_BindIfMatch::?relay`; Banked call to: bdb_BindIfMatch
// 2949 }
??bdb_ProcessOSALMsg_3:
        MOV     A,#0x1a
        LJMP    ??Subroutine40_0 & 0xFFFF
          CFI EndBlock cfiBlock211
// 2950 
// 2951 
// 2952 /*********************************************************************
// 2953  * @fn      bdb_processTimeout
// 2954  *
// 2955  * @brief   Handles timeout of the bdb process
// 2956  *
// 2957  * @param   msgPtr - message to process
// 2958  *
// 2959  * @return  none
// 2960  */
// 2961 void bdb_processTimeout(void)
// 2962 {
// 2963 #if (ZG_BUILD_JOINING_TYPE)
// 2964   if(ZG_DEVICE_JOINING_TYPE)
// 2965   {
// 2966     switch(bdbCommissioningProcedureState.bdbCommissioningState)
// 2967     {
// 2968       case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
// 2969         
// 2970         bdb_tcLinkKeyExchangeAttempt(FALSE,bdbCommissioningProcedureState.bdbTCExchangeState);
// 2971       break;
// 2972       case BDB_COMMISSIONING_STATE_JOINING:
// 2973         if(bdbCommissioningProcedureState.bdbJoinState == BDB_JOIN_STATE_WAITING_NWK_KEY)
// 2974         {
// 2975           //If nwk key fails, then try association again
// 2976           bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_ASSOC;
// 2977           bdb_nwkAssocAttemt(FALSE);
// 2978         }
// 2979       break;
// 2980     }
// 2981   }
// 2982 #endif
// 2983   
// 2984 }
// 2985 
// 2986 
// 2987 /*********************************************************************
// 2988  * @fn      bdb_SendMsg
// 2989  *
// 2990  * @brief   Send messages to bdb processing with the expected format
// 2991  *
// 2992  * @param   msgPtr - message to process
// 2993  *
// 2994  * @return  none
// 2995  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2996 void bdb_SendMsg(uint8 taskID, uint8 toCommissioningState,uint8 status, uint8 len, uint8 *buf)
bdb_SendMsg:
          CFI Block cfiBlock212 Using cfiCommon0
          CFI Function bdb_SendMsg
        CODE
// 2997 {
        FUNCALL bdb_SendMsg, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_SendMsg, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_SendMsg, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        MOV     A,#-0x11
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
        ; Saved register size: 17
        ; Auto size: 0
        MOV     ?V2,R1
        MOV     ?V7,R2
        MOV     ?V8,R3
        MOV     ?V3,R4
// 2998   bdbInMsg_t *msgPtr = NULL;
// 2999 
// 3000   if ( (len > 0) && (buf != NULL) )
        MOV     A,R4
        JZ      ??bdb_SendMsg_0
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??bdb_SendMsg_0
// 3001   {
// 3002     uint8 tmpLength;
// 3003     tmpLength = len;
// 3004     tmpLength += sizeof(osal_event_hdr_t);
// 3005     
// 3006     msgPtr = (bdbInMsg_t *)osal_msg_allocate( tmpLength );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     A,#0x2
        ADD     A,R4
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R6,?V4
        MOV     R7,?V5
// 3007     
// 3008     if ( msgPtr )
        MOV     A,R6
        ORL     A,R7
        JZ      ??bdb_SendMsg_0
// 3009     {
// 3010       osal_memcpy( msgPtr->buf, buf, len );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,?V0
        MOV     ?V5,?V1
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,?V3
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
// 3011     
// 3012       msgPtr->hdr.event = toCommissioningState;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,?V7
        MOVX    @DPTR,A
// 3013       msgPtr->hdr.status = status;
        INC     DPTR
        MOV     A,?V8
        MOVX    @DPTR,A
// 3014       osal_msg_send( taskID, (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V2
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
// 3015     }
// 3016   }
// 3017 }
??bdb_SendMsg_0:
        MOV     R7,#0x9
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock212
// 3018 
// 3019 
// 3020 /*********************************************************************
// 3021  * @fn      bdb_RegisterCommissioningStatusCB
// 3022  *
// 3023  * @brief   Register a callback in which the status of the procedures done in
// 3024  *          BDB commissioning process will be reported
// 3025  *
// 3026  * @param   bdbGCB_CommissioningStatus - application callback
// 3027  *
// 3028  * @return  none
// 3029  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3030 void bdb_RegisterCommissioningStatusCB(bdbGCB_CommissioningStatus_t bdbGCB_CommissioningStatus)
bdb_RegisterCommissioningStatusCB:
          CFI Block cfiBlock213 Using cfiCommon0
          CFI Function bdb_RegisterCommissioningStatusCB
        CODE
// 3031 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3032   pfnCommissioningStatusCB = bdbGCB_CommissioningStatus;
        MOV     DPTR,#pfnCommissioningStatusCB
        LJMP    ?Subroutine0 & 0xFFFF
// 3033 }
          CFI EndBlock cfiBlock213
// 3034 
// 3035 /*********************************************************************
// 3036  * @fn      bdb_ClearNetworkParams
// 3037  *
// 3038  * @brief   Restore nwk parameters to invalid if the device is not on a network
// 3039  *
// 3040  * @param   void
// 3041  *
// 3042  * @return  void
// 3043  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3044 void bdb_ClearNetworkParams(void)
bdb_ClearNetworkParams:
          CFI Block cfiBlock214 Using cfiCommon0
          CFI Function bdb_ClearNetworkParams
        CODE
// 3045 {
        ; Saved register size: 0
        ; Auto size: 0
// 3046 #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
// 3047   if ( bdbAttributes.bdbNodeIsOnANetwork == FALSE )
// 3048   {
// 3049     //Clear the event
// 3050     _NIB.nwkPanId = INVALID_NODE_ADDR;
// 3051     _NIB.nwkLogicalChannel = 0;
// 3052     _NIB.nwkDevAddress = INVALID_NODE_ADDR;
// 3053     touchLink_SetMacNwkParams( _NIB.nwkDevAddress, _NIB.nwkPanId, _NIB.nwkLogicalChannel );
// 3054   }
// 3055 #endif
// 3056 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock214
// 3057 
// 3058 /*********************************************************************
// 3059  * @fn      bdb_getZCLFrameCounter
// 3060  *
// 3061  * @brief   Get the next ZCL Frame Counter for packet sequence number
// 3062  *
// 3063  * @param   none
// 3064  *
// 3065  * @return  next ZCL frame counter
// 3066  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3067 uint8 bdb_getZCLFrameCounter(void)
bdb_getZCLFrameCounter:
          CFI Block cfiBlock215 Using cfiCommon0
          CFI Function bdb_getZCLFrameCounter
        CODE
// 3068 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3069   bdb_ZclTransactionSequenceNumber++;
        MOV     DPTR,#bdb_ZclTransactionSequenceNumber
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
// 3070   return bdb_ZclTransactionSequenceNumber;
        MOV     R1,A
        LJMP    ??Subroutine34_0 & 0xFFFF
// 3071 
// 3072 }
          CFI EndBlock cfiBlock215
// 3073 
// 3074 
// 3075 #if (ZG_BUILD_JOINING_TYPE)
// 3076 /*********************************************************************
// 3077  * @fn      bdb_RegisterCBKETCLinkKeyExchangeCB
// 3078  *
// 3079  * @brief   Register a callback in which the TC link key exchange procedure will 
// 3080  *          be performed by application.
// 3081  *          Upon fail or success bdb must be notified, see bdb_CBKETCLinkKeyExchangeAttempt
// 3082  *
// 3083  * @param   bdbGCB_TCLinkKeyExchangeMethod - application callback
// 3084  *
// 3085  * @return  none
// 3086  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3087 void bdb_RegisterCBKETCLinkKeyExchangeCB(bdbGCB_CBKETCLinkKeyExchange_t bdbGCB_CBKETCLinkKeyExchange)
bdb_RegisterCBKETCLinkKeyExchangeCB:
          CFI Block cfiBlock216 Using cfiCommon0
          CFI Function bdb_RegisterCBKETCLinkKeyExchangeCB
        CODE
// 3088 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3089   if(bdbGCB_CBKETCLinkKeyExchange)
        MOV     A,R2
        ORL     A,R3
        MOV     DPTR,#pfnCBKETCLinkKeyExchange
        JZ      ??bdb_RegisterCBKETCLinkKeyExchangeCB_0
// 3090   {
// 3091     pfnCBKETCLinkKeyExchange = bdbGCB_CBKETCLinkKeyExchange;
        LCALL   ?Subroutine23 & 0xFFFF
// 3092     bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_CBKE;
??CrossCallReturnLabel_41:
        MOV     DPTR,#bdbAttributes + 18
        MOV     A,#0x1
        SJMP    ??bdb_RegisterCBKETCLinkKeyExchangeCB_1
// 3093   }
// 3094   else
// 3095   {
// 3096     pfnCBKETCLinkKeyExchange = NULL;
??bdb_RegisterCBKETCLinkKeyExchangeCB_0:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 3097     bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_APS_KEY;
        MOV     DPTR,#bdbAttributes + 18
// 3098   }
??bdb_RegisterCBKETCLinkKeyExchangeCB_1:
        LJMP    ??Subroutine33_0 & 0xFFFF
// 3099 }
          CFI EndBlock cfiBlock216

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond217 Using cfiCommon0
          CFI Function bdb_filterNwkDisc
          CFI Conditional ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond218 Using cfiCommon0
          CFI (cfiCond218) Function bdb_nwkDescFree
          CFI (cfiCond218) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond218) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond218) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond218) CFA_SP SP+-7
          CFI Block cfiCond219 Using cfiCommon0
          CFI (cfiCond219) Function bdb_event_loop
          CFI (cfiCond219) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond219) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond219) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond219) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond219) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond219) CFA_SP SP+-2
          CFI (cfiCond219) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function bdb_RegisterCBKETCLinkKeyExchangeCB
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond220) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond220) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond220) CFA_SP SP+-7
          CFI Block cfiCond221 Using cfiCommon0
          CFI (cfiCond221) Function bdb_RegisterForFilterNwkDescCB
          CFI (cfiCond221) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond221) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond221) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond221) CFA_SP SP+-7
          CFI Block cfiCond222 Using cfiCommon0
          CFI (cfiCond222) Function bdb_calculateCCITT_CRC
          CFI (cfiCond222) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond222) CFA_SP SP+-2
          CFI (cfiCond222) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker223 Using cfiCommon1
          CFI (cfiPicker223) NoFunction
          CFI (cfiPicker223) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond217
          CFI EndBlock cfiCond218
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiCond221
          CFI EndBlock cfiCond222
          CFI EndBlock cfiPicker223
// 3100 
// 3101 /*********************************************************************
// 3102  * @fn      bdb_RegisterForFilterNwkDescCB
// 3103  *
// 3104  * @brief   Register a callback in which the application gets the list of network
// 3105  *          descriptors got from active scan.
// 3106  *          Use bdb_nwkDescFree to release the network descriptors that are not 
// 3107  *          of interest and leave those which are to be attempted.
// 3108  *
// 3109  * @param   bdbGCB_FilterNwkDesc - application callback
// 3110  *
// 3111  * @return  none
// 3112  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3113 void bdb_RegisterForFilterNwkDescCB(bdbGCB_FilterNwkDesc_t bdbGCB_FilterNwkDesc)
bdb_RegisterForFilterNwkDescCB:
          CFI Block cfiBlock224 Using cfiCommon0
          CFI Function bdb_RegisterForFilterNwkDescCB
        CODE
// 3114 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3115   if(bdbGCB_FilterNwkDesc)
        MOV     A,R2
        ORL     A,R3
        JZ      ??CrossCallReturnLabel_42
// 3116   {
// 3117     pfnFilterNwkDesc = bdbGCB_FilterNwkDesc;
        MOV     DPTR,#pfnFilterNwkDesc
        LCALL   ?Subroutine23 & 0xFFFF
// 3118   }
// 3119 }
??CrossCallReturnLabel_42:
        LJMP    ??Subroutine34_0 & 0xFFFF
          CFI EndBlock cfiBlock224
// 3120 
// 3121 
// 3122 /*********************************************************************
// 3123  * @fn          bdb_CBKETCLinkKeyExchangeAttempt
// 3124  *
// 3125  * @brief       Tell BDB module the result of the TC link key exchange, to try
// 3126  *              the default process or to keep going with the joining process.
// 3127  *
// 3128  * @param       didSuccess - TRUE if the process was succes, False otherwise
// 3129  *
// 3130  * @return      unprocessed events
// 3131  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3132 void bdb_CBKETCLinkKeyExchangeAttempt(bool didSuccess)
bdb_CBKETCLinkKeyExchangeAttempt:
          CFI Block cfiBlock225 Using cfiCommon0
          CFI Function bdb_CBKETCLinkKeyExchangeAttempt
        CODE
// 3133 {
        FUNCALL bdb_CBKETCLinkKeyExchangeAttempt, bdb_setNodeJoinLinkKeyType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_CBKETCLinkKeyExchangeAttempt, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_CBKETCLinkKeyExchangeAttempt, bdb_tcLinkKeyExchangeAttempt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
// 3134   if(didSuccess)
        JZ      ??bdb_CBKETCLinkKeyExchangeAttempt_0
// 3135   {
// 3136     bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
        ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
        MOV     R1,#0x0
        LCALL   `??bdb_setNodeJoinLinkKeyType::?relay`; Banked call to: bdb_setNodeJoinLinkKeyType
// 3137     bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
        SJMP    ??bdb_CBKETCLinkKeyExchangeAttempt_1
// 3138   }
// 3139   else
// 3140   {
// 3141     bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_APS_KEY;
??bdb_CBKETCLinkKeyExchangeAttempt_0:
        MOV     DPTR,#bdbAttributes + 18
        CLR     A
        MOVX    @DPTR,A
// 3142     //We are going back one state to try it again
// 3143     bdbCommissioningProcedureState.bdbTCExchangeState -= BDB_TC_EXCHANGE_NEXT_STATE;
        MOV     DPTR,#bdbCommissioningProcedureState + 1
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
// 3144     bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_STACK_VERSION);
        ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
// 3145   }
// 3146 
// 3147 }
??bdb_CBKETCLinkKeyExchangeAttempt_1:
          CFI EndBlock cfiBlock225
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock226 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock226
// 3148 #endif
// 3149 
// 3150 //GP_UPDATE
// 3151 #if (ZG_BUILD_RTR_TYPE)
// 3152 #ifndef ZNP_ENABLED
// 3153 /*********************************************************************
// 3154  * @fn      gp_ChangeChannelReq
// 3155  *
// 3156  * @brief   Callback function to notify the BDB about a GP commissioning 
// 3157  * request that will change the current channel for at most 
// 3158  * gpBirectionalCommissioningChangeChannelTimeout ms
// 3159  *
// 3160  * @param   channel - Channel in which the commissioning will take place
// 3161  *
// 3162  * @return  TRUE to allow change channel, FALSE to do not allow
// 3163  */
// 3164 static uint8 gp_ChangeChannelReq(void)
// 3165 {
// 3166   uint8 allowChangeChannel = TRUE;
// 3167   
// 3168   //Do not allow changes of channel if any process is in place
// 3169   if(bdbAttributes.bdbCommissioningMode)
// 3170   {
// 3171     allowChangeChannel = FALSE;
// 3172   }
// 3173   
// 3174   //Check application state to decide if allow change channel or not
// 3175   
// 3176   return allowChangeChannel;
// 3177 }
// 3178 
// 3179 
// 3180 /*********************************************************************
// 3181  * @fn          gp_CBInit
// 3182  *
// 3183  * @brief       Register the callbacks for GP endpoint
// 3184  *
// 3185  * @param       none
// 3186  *
// 3187  * @return      none
// 3188  */
// 3189 void gp_CBInit(void)
// 3190 {
// 3191   GP_DataCnfGCB = GP_DataCnf;
// 3192   GP_endpointInitGCB = gp_endpointInit;  
// 3193   GP_expireDuplicateFilteringGCB = gp_expireDuplicateFiltering;
// 3194   GP_stopCommissioningModeGCB = gp_stopCommissioningMode;
// 3195   GP_returnOperationalChannelGCB = gp_returnOperationalChannel;
// 3196   GP_DataIndGCB = GP_DataInd;
// 3197   GP_SecReqGCB = GP_SecReq;   
// 3198   GP_CheckAnnouncedDeviceGCB = gp_CheckAnnouncedDevice;
// 3199     
// 3200   GP_aliasConflictAnnce = &aliasConflictAnnce;
// 3201   
// 3202   GP_endpointInitGCB();
// 3203 }
// 3204 
// 3205 #endif
// 3206 #endif
// 3207 
// 3208 
// 3209 /*********************************************************************
// 3210 *********************************************************************/
// 3211 
// 3212 
// 3213 /******************************************************************************
// 3214  * @fn          bdb_GenerateInstallCodeCRC
// 3215  *
// 3216  * @brief       Creates a CRC for the install code passed.
// 3217  *
// 3218  * @param       installCode - install code from which CRC will be generated
// 3219  *
// 3220  * @return      CRC
// 3221  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3222 uint16 bdb_GenerateInstallCodeCRC(uint8 *installCode)
bdb_GenerateInstallCodeCRC:
          CFI Block cfiBlock227 Using cfiCommon0
          CFI Function bdb_GenerateInstallCodeCRC
        CODE
// 3223 {
        FUNCALL bdb_GenerateInstallCodeCRC, bdb_calculateCCITT_CRC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 6, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 6, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
// 3224   uint16 CRC;
// 3225   
// 3226   bdb_calculateCCITT_CRC(installCode, INSTALL_CODE_LEN, &CRC);
        ; Setup parameters for call to function bdb_calculateCCITT_CRC
        MOV     DPTR,#__Constant_10
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 6)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP102_8
        LCALL   `??bdb_calculateCCITT_CRC::?relay`; Banked call to: bdb_calculateCCITT_CRC
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
// 3227 
// 3228   return CRC;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_102:
        MOV     A,#0x2
        LJMP    ?Subroutine4 & 0xFFFF
// 3229 }
          CFI EndBlock cfiBlock227

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond228 Using cfiCommon0
          CFI Function bdb_tryNwkAssoc
          CFI Conditional ??CrossCallReturnLabel_94
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond229 Using cfiCommon0
          CFI (cfiCond229) Function bdb_tryNwkAssoc
          CFI (cfiCond229) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond229) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond229) CFA_SP SP+-2
          CFI (cfiCond229) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker230 Using cfiCommon1
          CFI (cfiPicker230) NoFunction
          CFI (cfiPicker230) Picker
        MOV     A,#0x1
        MOVX    @DPTR,A
          CFI EndBlock cfiCond228
          CFI EndBlock cfiCond229
          CFI EndBlock cfiPicker230
        ; Setup parameters for call to function bdb_joinProcess
        ; Setup parameters for call to function bdb_nwkDescFree
        REQUIRE ??Subroutine43_0
        ; // Fall through to label ??Subroutine43_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine43_0:
          CFI Block cfiCond231 Using cfiCommon0
          CFI Function bdb_parentLost
          CFI Conditional ??CrossCallReturnLabel_103
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond232 Using cfiCommon0
          CFI (cfiCond232) Function bdb_reportCommissioningState
          CFI (cfiCond232) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond232) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond232) CFA_SP SP+-2
          CFI (cfiCond232) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond233 Using cfiCommon0
          CFI (cfiCond233) Function bdb_reportCommissioningState
          CFI (cfiCond233) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond233) CFA_SP SP+-2
          CFI (cfiCond233) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond234 Using cfiCommon0
          CFI (cfiCond234) Function bdb_filterNwkDisc
          CFI (cfiCond234) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond234) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond234) CFA_SP SP+-2
          CFI (cfiCond234) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond235 Using cfiCommon0
          CFI (cfiCond235) Function bdb_nwkAssocAttemt
          CFI (cfiCond235) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond235) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond235) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond235) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond235) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond235) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond235) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond235) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond235) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond235) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond235) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond235) CFA_SP SP+-2
          CFI (cfiCond235) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond236 Using cfiCommon0
          CFI (cfiCond236) Function bdb_nwkDescFree
          CFI (cfiCond236) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond236) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond236) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond236) CFA_SP SP+-7
          CFI Block cfiCond237 Using cfiCommon0
          CFI (cfiCond237) Function bdb_tryNwkAssoc
          CFI (cfiCond237) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond237) CFA_SP SP+-2
          CFI (cfiCond237) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond238 Using cfiCommon0
          CFI (cfiCond238) Function bdb_tryNwkAssoc
          CFI (cfiCond238) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond238) CFA_SP SP+-2
          CFI (cfiCond238) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker239 Using cfiCommon1
          CFI (cfiPicker239) NoFunction
          CFI (cfiPicker239) Picker
        MOV     DPTR,#pBDBListNwk
          CFI EndBlock cfiCond231
          CFI EndBlock cfiCond232
          CFI EndBlock cfiCond233
          CFI EndBlock cfiCond234
          CFI EndBlock cfiCond235
          CFI EndBlock cfiCond236
          CFI EndBlock cfiCond237
          CFI EndBlock cfiCond238
          CFI EndBlock cfiPicker239
        REQUIRE ??Subroutine44_0
        ; // Fall through to label ??Subroutine44_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine44_0:
          CFI Block cfiCond240 Using cfiCommon0
          CFI Function bdb_StartCommissioning
          CFI Conditional ??CrossCallReturnLabel_96
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond241 Using cfiCommon0
          CFI (cfiCond241) Function bdb_reportCommissioningState
          CFI (cfiCond241) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond241) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond241) CFA_SP SP+-2
          CFI (cfiCond241) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond242 Using cfiCommon0
          CFI (cfiCond242) Function bdb_nwkDescFree
          CFI (cfiCond242) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond242) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond242) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond242) CFA_SP SP+-7
          CFI Block cfiCond243 Using cfiCommon0
          CFI (cfiCond243) Function bdb_nwkDescFree
          CFI (cfiCond243) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond243) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond243) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond243) CFA_SP SP+-7
          CFI Block cfiCond244 Using cfiCommon0
          CFI (cfiCond244) Function bdb_event_loop
          CFI (cfiCond244) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond244) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond244) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond244) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond244) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond244) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond244) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond244) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond244) CFA_SP SP+-2
          CFI (cfiCond244) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond245 Using cfiCommon0
          CFI (cfiCond245) Function bdb_AddRespondentNode
          CFI (cfiCond245) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond245) CFA_SP SP+-2
          CFI (cfiCond245) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond246 Using cfiCommon0
          CFI (cfiCond246) Function bdb_GenerateInstallCodeCRC
          CFI (cfiCond246) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond246) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond246) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond246) CFA_SP SP+-7
          CFI (cfiCond246) CFA_XSP16 add(XSP16, 2)
          CFI Block cfiCond247 Using cfiCommon0
          CFI (cfiCond247) Function bdb_parentLost
          CFI (cfiCond247) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond247) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond247) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond247) CFA_SP SP+-7
          CFI Block cfiCond248 Using cfiCommon0
          CFI (cfiCond248) Function bdb_reportCommissioningState
          CFI (cfiCond248) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond248) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond248) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond248) CFA_SP SP+-2
          CFI (cfiCond248) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond249 Using cfiCommon0
          CFI (cfiCond249) Function bdb_reportCommissioningState
          CFI (cfiCond249) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond249) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond249) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond249) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond249) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond249) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond249) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond249) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond249) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond249) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond249) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond249) CFA_SP SP+-2
          CFI (cfiCond249) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond250 Using cfiCommon0
          CFI (cfiCond250) Function bdb_filterNwkDisc
          CFI (cfiCond250) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond250) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond250) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond250) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond250) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond250) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond250) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond250) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond250) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond250) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond250) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond250) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond250) CFA_SP SP+-2
          CFI (cfiCond250) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond251 Using cfiCommon0
          CFI (cfiCond251) Function bdb_nwkAssocAttemt
          CFI (cfiCond251) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond251) CFA_SP SP+-2
          CFI (cfiCond251) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond252 Using cfiCommon0
          CFI (cfiCond252) Function bdb_nwkDescFree
          CFI (cfiCond252) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond252) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond252) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond252) CFA_SP SP+-7
          CFI Block cfiCond253 Using cfiCommon0
          CFI (cfiCond253) Function bdb_tryNwkAssoc
          CFI (cfiCond253) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond253) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond253) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond253) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond253) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond253) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond253) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond253) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond253) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond253) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond253) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond253) CFA_SP SP+-2
          CFI (cfiCond253) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond254 Using cfiCommon0
          CFI (cfiCond254) Function bdb_tryNwkAssoc
          CFI (cfiCond254) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond254) CFA_SP SP+-2
          CFI (cfiCond254) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker255 Using cfiCommon1
          CFI (cfiPicker255) NoFunction
          CFI (cfiPicker255) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond240
          CFI EndBlock cfiCond241
          CFI EndBlock cfiCond242
          CFI EndBlock cfiCond243
          CFI EndBlock cfiCond244
          CFI EndBlock cfiCond245
          CFI EndBlock cfiCond246
          CFI EndBlock cfiCond247
          CFI EndBlock cfiCond248
          CFI EndBlock cfiCond249
          CFI EndBlock cfiCond250
          CFI EndBlock cfiCond251
          CFI EndBlock cfiCond252
          CFI EndBlock cfiCond253
          CFI EndBlock cfiCond254
          CFI EndBlock cfiPicker255
// 3230 
// 3231 /******************************************************************************
// 3232  * @fn          bdb_calculateCCITT_CRC
// 3233  *
// 3234  * @brief       Creates a CRC for the install code passed.
// 3235  *
// 3236  * @param       Mb - install code from which CRC will be generated
// 3237  * @param       msglen - install code length
// 3238  * @param       crc - 
// 3239  *
// 3240  * @return      none
// 3241  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3242 void bdb_calculateCCITT_CRC (uint8 *Mb, uint32 msglen, uint16 *crc)
bdb_calculateCCITT_CRC:
          CFI Block cfiBlock256 Using cfiCommon0
          CFI Function bdb_calculateCCITT_CRC
        CODE
// 3243 {
        FUNCALL bdb_calculateCCITT_CRC, bdb_crcInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_calculateCCITT_CRC, bdb_crcBitByBitFast
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R4
        MOV     ?V1,R5
// 3244   uint16 crcinit_direct; 
// 3245   uint16 crcinit_nondirect;
// 3246   bdb_crcInit(crc, &crcinit_direct, &crcinit_nondirect);
        ; Setup parameters for call to function bdb_crcInit
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP102_8
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??bdb_crcInit::?relay`; Banked call to: bdb_crcInit
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 3247   *crc = bdb_crcBitByBitFast(Mb, msglen, crcinit_direct, crcinit_nondirect);
        ; Setup parameters for call to function bdb_crcBitByBitFast
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??bdb_crcBitByBitFast::?relay`; Banked call to: bdb_crcBitByBitFast
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ?Subroutine23 & 0xFFFF
// 3248 }
??CrossCallReturnLabel_43:
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock256
// 3249 
// 3250 
// 3251 /******************************************************************************
// 3252  * @fn          bdb_crcInit
// 3253  *
// 3254  * @brief       Initialize CRC calculation
// 3255  *
// 3256  * @param       crc - 
// 3257  * @param       crcinit_direct -
// 3258  * @param       crcinit_nondirect - 
// 3259  *
// 3260  * @return      none
// 3261  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3262 void bdb_crcInit(uint16 *crc, uint16 *crcinit_direct, uint16 *crcinit_nondirect)
bdb_crcInit:
          CFI Block cfiBlock257 Using cfiCommon0
          CFI Function bdb_crcInit
        CODE
// 3263 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 3264 
// 3265   uint16 i;
// 3266   uint16 bit;
// 3267 
// 3268   *crcinit_direct = CRC_INIT;
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 3269   *crc = CRC_INIT;
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 3270   for (i=0; i<CRC_ORDER; i++) 
        MOV     R6,#0x10
// 3271   {
// 3272     bit = *crc & 1;
??bdb_crcInit_0:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ANL     A,#0x1
        MOV     R0,A
// 3273     if (bit) *crc^= CRC_POLYNOM;
        MOV     C,0xE0 /* A   */.0
        JNC     ??bdb_crcInit_1
        MOVX    A,@DPTR
        XRL     A,#0x21
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x10
        MOVX    @DPTR,A
// 3274     *crc >>= 1;
??bdb_crcInit_1:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        RRC     A
        MOV     R5,A
        MOV     A,R4
        RRC     A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 3275     if (bit) *crc|= CRC_HIGHBIT;
        MOV     A,R0
        MOV     C,0xE0 /* A   */.0
        JNC     ??bdb_crcInit_2
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,#0x80
        MOVX    @DPTR,A
// 3276   }	
??bdb_crcInit_2:
        DEC     R6
        MOV     A,R6
        JNZ     ??bdb_crcInit_0
// 3277   *crcinit_nondirect = *crc;
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 3278 
// 3279 }
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock257
// 3280 
// 3281 
// 3282 /******************************************************************************
// 3283  * @fn          bdb_crcReflect
// 3284  *
// 3285  * @brief       
// 3286  *
// 3287  * @param       crc - 
// 3288  * @param       bitnum -
// 3289  *
// 3290  * @return      none
// 3291  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3292 uint16 bdb_crcReflect (uint16 crc, uint16 bitnum)
bdb_crcReflect:
          CFI Block cfiBlock258 Using cfiCommon0
          CFI Function bdb_crcReflect
        CODE
// 3293 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 3294 
// 3295   // reflects the lower 'bitnum' bits of 'crc'
// 3296 
// 3297   uint16 i, j=1, crcout=0;
        MOV     R6,#0x1
        MOV     R7,#0x0
        MOV     ?V0,R7
        MOV     ?V1,R7
// 3298 
// 3299   for (i=(uint16)1<<(bitnum-1); i; i>>=1) {
        MOV     ?V2,R6
        MOV     ?V3,R7
        MOV     A,R4
        DEC     A
        MOV     R0,#?V2
        LCALL   ?S_SHL
        MOV     R0,?V2
        MOV     R1,?V3
        SJMP    ??bdb_crcReflect_0
// 3300     if (crc & i) crcout|=j;
??bdb_crcReflect_1:
        MOV     A,R2
        ANL     A,R0
        MOV     R4,A
        MOV     A,R3
        ANL     A,R1
        MOV     R5,A
        MOV     A,R4
        ORL     A,R5
        JZ      ??bdb_crcReflect_2
        MOV     A,R6
        ORL     A,?V0
        MOV     ?V0,A
        MOV     A,R7
        ORL     A,?V1
        MOV     ?V1,A
// 3301     j<<= 1;
??bdb_crcReflect_2:
        MOV     A,R6
        ADD     A,0xE0 /* A   */
        MOV     R6,A
        MOV     A,R7
        RLC     A
        MOV     R7,A
// 3302   }
        MOV     A,R1
        CLR     C
        RRC     A
        MOV     R1,A
        MOV     A,R0
        RRC     A
        MOV     R0,A
??bdb_crcReflect_0:
        MOV     A,R0
        ORL     A,R1
        JNZ     ??bdb_crcReflect_1
// 3303   return (crcout);
        MOV     R2,?V0
        MOV     R3,?V1
        LJMP    ??Subroutine36_0 & 0xFFFF
// 3304 }
          CFI EndBlock cfiBlock258
// 3305 
// 3306 
// 3307 /******************************************************************************
// 3308  * @fn          bdb_crcBitByBitFast
// 3309  *
// 3310  * @brief       
// 3311  *
// 3312  * @param       p - 
// 3313  * @param       len -
// 3314  * @param       crcinit_direct - 
// 3315  * @param       crcinit_nondirect -
// 3316  *
// 3317  * @return      crc
// 3318  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3319 uint16 bdb_crcBitByBitFast(uint8 * p, uint32 len, uint16 crcinit_direct, uint16 crcinit_nondirect) 
bdb_crcBitByBitFast:
          CFI Block cfiBlock259 Using cfiCommon0
          CFI Function bdb_crcBitByBitFast
        CODE
// 3320 {
        FUNCALL bdb_crcBitByBitFast, bdb_crcReflect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_crcBitByBitFast, bdb_crcReflect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     ?V2,R2
        MOV     ?V3,R3
// 3321   // fast bit by bit algorithm without augmented zero bytes.
// 3322   // does not use lookup table, suited for polynom orders between 1...32.
// 3323 
// 3324   uint16 i, j, c, bit;
// 3325   uint16 crc = crcinit_direct;
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 3326 
// 3327   for (i=0; i<len; i++) {
        MOV     ?V0,#0x0
        MOV     ?V1,#0x0
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V8
        LCALL   ?L_MOV_X
        SJMP    ??bdb_crcBitByBitFast_0
// 3328 
// 3329     c = (uint16)*p++;
??bdb_crcBitByBitFast_1:
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        INC     DPTR
        MOV     ?V2,DPL
        MOV     ?V3,DPH
// 3330     c = bdb_crcReflect(c, 8);
        ; Setup parameters for call to function bdb_crcReflect
        MOV     R4,#0x8
        MOV     R5,#0x0
        LCALL   `??bdb_crcReflect::?relay`; Banked call to: bdb_crcReflect
// 3331 
// 3332     for (j=0x80; j; j>>=1) {
        MOV     R0,#-0x80
// 3333 
// 3334       bit = crc & CRC_HIGHBIT;
??bdb_crcBitByBitFast_2:
        MOV     A,R7
        ANL     A,#0x80
        MOV     R5,A
// 3335       crc<<= 1;
        MOV     A,R6
        ADD     A,0xE0 /* A   */
        MOV     R6,A
        MOV     A,R7
        RLC     A
        MOV     R7,A
// 3336       if (c & j) bit^= CRC_HIGHBIT;
        MOV     A,R2
        ANL     A,R0
        JZ      ??bdb_crcBitByBitFast_3
        MOV     A,#-0x80
        XRL     A,R5
        MOV     R5,A
// 3337       if (bit) crc^= CRC_POLYNOM;
??bdb_crcBitByBitFast_3:
        MOV     A,R5
        JZ      ??bdb_crcBitByBitFast_4
        MOV     A,#0x21
        XRL     A,R6
        MOV     R6,A
        MOV     A,#0x10
        XRL     A,R7
        MOV     R7,A
// 3338     }
??bdb_crcBitByBitFast_4:
        CLR     C
        MOV     A,R0
        RRC     A
        MOV     R0,A
        JNZ     ??bdb_crcBitByBitFast_2
// 3339   }	
        INC     ?V0
        MOV     A,?V0
        JNZ     ??bdb_crcBitByBitFast_0
        INC     ?V1
??bdb_crcBitByBitFast_0:
        MOV     ?V4,?V0
        MOV     ?V5,?V1
        CLR     A
        MOV     ?V6,A
        MOV     ?V7,A
        MOV     R0,#?V8
        MOV     R1,#?V4
        LCALL   ?UL_GT
        JC      ??bdb_crcBitByBitFast_1
// 3340 
// 3341   crc=bdb_crcReflect(crc, CRC_ORDER);
// 3342   crc^= CRC_XOR;
// 3343 
// 3344   return(crc);
        ; Setup parameters for call to function bdb_crcReflect
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??bdb_crcReflect::?relay`; Banked call to: bdb_crcReflect
        MOV     A,R2
        CPL     A
        MOV     R2,A
        MOV     A,R3
        CPL     A
        MOV     R3,A
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
// 3345 }
          CFI EndBlock cfiBlock259

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for bdbAttributes>`:
        DATA32
        DD 134213632
        DD 2048
        DATA16
        DW 65535
        DATA8
        DB 0
        DB 0
        DB 5
        DB 4
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for vDoPrimaryScan>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgBdbInstallCodeCRC>`:
        DATA8
        DB 131
        DB 254
        DB 211
        DB 64
        DB 122
        DB 147
        DB 151
        DB 35
        DB 165
        DB 198
        DB 57
        DB 178
        DB 105
        DB 22
        DB 213
        DB 5
        DB 195
        DB 181

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_32:
        DD 50

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1388:
        DD 5000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_c8:
        DD 200

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3a98:
        DD 15000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_bb8:
        DD 3000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_10:
        DD 16

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterSimpleDescriptor::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterSimpleDescriptor

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ZclIdentifyCmdInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ZclIdentifyCmdInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setActiveCentralizedLinkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setActiveCentralizedLinkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_addInstallCode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_addInstallCode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_StartCommissioning::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_StartCommissioning

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_NotifyCommissioningModeStart::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_NotifyCommissioningModeStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setNodeJoinLinkKeyType::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setNodeJoinLinkKeyType

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setFN::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setFN

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_resetLocalAction::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_resetLocalAction

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_parentLost::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_parentLost

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_NetworkRestoredResumeState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_NetworkRestoredResumeState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ZedAttemptRecoverNwk::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ZedAttemptRecoverNwk

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_reportCommissioningState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_reportCommissioningState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkFormationAttempt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkFormationAttempt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_isDeviceNonFactoryNew::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_isDeviceNonFactoryNew

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_rejoinNwk::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_rejoinNwk

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkDiscoveryAttempt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkDiscoveryAttempt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_filterNwkDisc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_filterNwkDisc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_tryNwkAssoc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_tryNwkAssoc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkAssocAttemt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkAssocAttemt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkDescFree::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkDescFree

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_joinProcess::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_joinProcess

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setChannelAttribute::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setChannelAttribute

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setChannel::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setChannel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkJoiningFormation::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkJoiningFormation

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_tcLinkKeyExchangeAttempt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_tcLinkKeyExchangeAttempt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkSteeringDeviceOnNwk::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkSteeringDeviceOnNwk

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_startResumeCommissioningProcess::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_startResumeCommissioningProcess

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_touchlinkSendFNReset::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_touchlinkSendFNReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setNodeIsOnANetwork::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setNodeIsOnANetwork

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setCommissioningGroupID::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setCommissioningGroupID

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_CreateRespondentList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_CreateRespondentList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_AddRespondentNode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_AddRespondentNode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_zclRespondentListClean::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_zclRespondentListClean

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ProcessOSALMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ProcessOSALMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_SendMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_SendMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterCommissioningStatusCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterCommissioningStatusCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ClearNetworkParams::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ClearNetworkParams

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_getZCLFrameCounter::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_getZCLFrameCounter

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterCBKETCLinkKeyExchangeCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterCBKETCLinkKeyExchangeCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterForFilterNwkDescCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterForFilterNwkDescCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_CBKETCLinkKeyExchangeAttempt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_CBKETCLinkKeyExchangeAttempt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_GenerateInstallCodeCRC::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_GenerateInstallCodeCRC

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_calculateCCITT_CRC::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_calculateCCITT_CRC

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_crcInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_crcInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_crcReflect::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_crcReflect

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_crcBitByBitFast::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_crcBitByBitFast

        END
// 3346 
// 3347 
// 
// 6 516 bytes in segment BANKED_CODE
//   294 bytes in segment BANK_RELAYS
//    38 bytes in segment XDATA_I
//    38 bytes in segment XDATA_ID
//    32 bytes in segment XDATA_ROM_C
//    29 bytes in segment XDATA_Z
// 
// 6 848 bytes of CODE  memory
//     0 bytes of CONST memory (+ 32 bytes shared)
//    67 bytes of XDATA memory
//
//Errors: none
//Warnings: none
