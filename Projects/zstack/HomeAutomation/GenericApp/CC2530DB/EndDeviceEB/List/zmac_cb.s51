///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               03/Nov/2017  19:06:25
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack 3.0.0\Components\zmac\f8w\zmac_cb.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
//        Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        "C:\Texas Instruments\Z-Stack 3.0.0\Components\zmac\f8w\zmac_cb.c" -D
//        SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xPOWER_SAVING
//        -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
//        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
//        LEGACY_LCD_DEBUG -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
//        ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES -D
//        ZCL_GROUPS -lC "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List"
//        -lA "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
//        Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\" -I
//        "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List\zmac_cb.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zmac_cb

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?US_DIV_MOD
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_Z

        PUBLIC `??MAC_CbackCheckPending::?relay`
        FUNCTION `??MAC_CbackCheckPending::?relay`,0203H
        PUBLIC `??MAC_CbackEvent::?relay`
        FUNCTION `??MAC_CbackEvent::?relay`,0203H
        PUBLIC `??MAC_CbackQueryRetransmit::?relay`
        FUNCTION `??MAC_CbackQueryRetransmit::?relay`,0203H
        FUNCTION `??ZMacLqiAdjust::?relay`,0203H
        PUBLIC `??ZMacLqiAdjustMode::?relay`
        FUNCTION `??ZMacLqiAdjustMode::?relay`,0203H
        PUBLIC MAC_CbackCheckPending
        FUNCTION MAC_CbackCheckPending,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC MAC_CbackEvent
        FUNCTION MAC_CbackEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC MAC_CbackQueryRetransmit
        FUNCTION MAC_CbackQueryRetransmit,0203H
        ARGFRAME XSTACK, 0, STACK
        FUNCTION ZMacLqiAdjust,080203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZMacLqiAdjustMode
        FUNCTION ZMacLqiAdjustMode,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK _A_IEN0
        PUBLIC pZMac_AppCallback
        PUBLIC zmacCBSizeTable
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
MAC_MlmeGetReq      SYMBOL "MAC_MlmeGetReq"
`??MAC_MlmeGetReq::?relay` SYMBOL "?relay", MAC_MlmeGetReq
mac_msg_deallocate  SYMBOL "mac_msg_deallocate"
`??mac_msg_deallocate::?relay` SYMBOL "?relay", mac_msg_deallocate
nwk_broadcastSend   SYMBOL "nwk_broadcastSend"
`??nwk_broadcastSend::?relay` SYMBOL "?relay", nwk_broadcastSend
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
MAC_CbackCheckPending SYMBOL "MAC_CbackCheckPending"
`??MAC_CbackCheckPending::?relay` SYMBOL "?relay", MAC_CbackCheckPending
MAC_CbackEvent      SYMBOL "MAC_CbackEvent"
`??MAC_CbackEvent::?relay` SYMBOL "?relay", MAC_CbackEvent
MAC_CbackQueryRetransmit SYMBOL "MAC_CbackQueryRetransmit"
`??MAC_CbackQueryRetransmit::?relay` SYMBOL "?relay", MAC_CbackQueryRetransmit
ZMacLqiAdjustMode   SYMBOL "ZMacLqiAdjustMode"
`??ZMacLqiAdjustMode::?relay` SYMBOL "?relay", ZMacLqiAdjustMode

        EXTERN `??MAC_MlmeGetReq::?relay`
        FUNCTION `??MAC_MlmeGetReq::?relay`,00H
        EXTERN `??mac_msg_deallocate::?relay`
        FUNCTION `??mac_msg_deallocate::?relay`,00H
        EXTERN `??nwk_broadcastSend::?relay`
        FUNCTION `??nwk_broadcastSend::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN MAC_MlmeGetReq
        FUNCTION MAC_MlmeGetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NWK_TaskID
        EXTERN ZMac_ScanBuf
        EXTERN _NIB
        EXTERN mac_msg_deallocate
        FUNCTION mac_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_broadcastSend
        FUNCTION nwk_broadcastSend,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack 3.0.0\Components\zmac\f8w\zmac_cb.c
//    1 /**************************************************************************************************
//    2   Filename:       zmac_cb.c
//    3   Revised:        $Date: 2014-12-03 16:04:46 -0800 (Wed, 03 Dec 2014) $
//    4   Revision:       $Revision: 41329 $
//    5 
//    6   Description:    This file contains the NWK functions that the ZMAC calls
//    7 
//    8 
//    9   Copyright 2005-2014 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /********************************************************************************************************
//   41  *                                               INCLUDES
//   42  ********************************************************************************************************/
//   43 
//   44 #include "ZComDef.h"
//   45 #include "OSAL.h"
//   46 #include "ZMAC.h"
//   47 #include "MT_MAC.h"
//   48 #include "hal_mcu.h"

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1
//   49 #include "cGP_stub.h"
//   50 
//   51 #if !defined NONWK
//   52 #include "nwk.h"
//   53 #include "nwk_bufs.h"
//   54 #include "ZGlobals.h"
//   55 #endif
//   56 
//   57 #if defined( MACSIM )
//   58   #include "mac_sim.h"
//   59 #endif
//   60 
//   61 #include "mac_security.h"
//   62 
//   63 #include "mac_main.h"
//   64 #ifdef FEATURE_DUAL_MAC
//   65 #include "dmmgr.h"
//   66 #endif /* FEATURE_DUAL_MAC */
//   67 extern void *ZMac_ScanBuf;
//   68 
//   69 //GP_UPDATE
//   70 #if (ZG_BUILD_RTR_TYPE) 
//   71 extern uint32 gpTimeTempBackoff;
//   72 extern uint16 gpTimeTempTimer;
//   73 extern bool   gpLockTimestamp;
//   74 #endif
//   75 /********************************************************************************************************
//   76  *                                               CONSTANTS
//   77  ********************************************************************************************************/
//   78 
//   79 #if !defined NONWK
//   80 /* Lookup table for size of structures. Must match with the order of MAC callback events */

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//   81 const uint8 CODE zmacCBSizeTable [] = {
zmacCBSizeTable:
        DB 0
        DB 22
        DB 15
        DB 0
        DB 0
        DB 11
        DB 21
        DB 11
        DB 2
        DB 0
        DB 2
        DB 34
        DB 15
        DB 51
        DB 0
        DB 0
        DB 14
        DB 15
//   82   0,
//   83   sizeof(ZMacAssociateInd_t),       // MAC_MLME_ASSOCIATE_IND      1   Associate indication
//   84   sizeof(ZMacAssociateCnf_t),       // MAC_MLME_ASSOCIATE_CNF      2   Associate confirm
//   85   0,                                // MAC_MLME_DISASSOCIATE_IND   3   Disassociate indication
//   86   0,                                // MAC_MLME_DISASSOCIATE_CNF   4   Disassociate confirm
//   87   sizeof(macMlmeBeaconNotifyInd_t), // MAC_MLME_BEACON_NOTIFY_IND  5   con notify indication
//   88   sizeof(ZMacOrphanInd_t),          // MAC_MLME_ORPHAN_IND         6   Orphan indication
//   89   sizeof(ZMacScanCnf_t),            // MAC_MLME_SCAN_CNF           7   Scan confirm
//   90   sizeof(ZMacStartCnf_t),           // MAC_MLME_START_CNF          8   Start confirm
//   91   0,                                // MAC_MLME_SYNC_LOSS_IND      9   Sync loss indication
//   92   sizeof(ZMacPollCnf_t),            // MAC_MLME_POLL_CNF           10  Poll confirm
//   93   sizeof(ZMacCommStatusInd_t),      // MAC_MLME_COMM_STATUS_IND    11  Comm status indication
//   94   sizeof(ZMacDataCnf_t),            // MAC_MCPS_DATA_CNF           12  Data confirm
//   95   sizeof(macMcpsDataInd_t),         // MAC_MCPS_DATA_IND           13  Data indication
//   96   0,                                // MAC_MCPS_PURGE_CNF          14  Purge confirm
//   97   0,                                // MAC_PWR_ON_CNF              15  Power on confirm
//   98   sizeof(ZMacPollInd_t),            // MAC_MLME_POLL_IND           16  Poll indication
//   99   sizeof(ZMacDataCnf_t)            // MAC_MCPS_GREEN_PWR_DATA_CNF 17  Data confirm for Green Power
//  100 };
//  101 #endif /* !defined NONWK */
//  102 
//  103 /********************************************************************************************************
//  104  *                                               LOCALS
//  105  ********************************************************************************************************/
//  106 
//  107 /* LQI Adjustment Mode */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  108 static ZMacLqiAdjust_t lqiAdjMode = LQI_ADJ_OFF;
lqiAdjMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  109 
//  110 #if !defined NONWK
//  111 /* LQI Adjustment Function */
//  112 static void ZMacLqiAdjust( uint8 corr, uint8* lqi );
//  113 #endif
//  114 
//  115 /*********************************************************************
//  116  * ZMAC Function Pointers
//  117  */
//  118 
//  119 /*
//  120  * ZMac Application callback function. This function will be called
//  121  * for every MAC message that is received over-the-air or generated
//  122  * locally by MAC for the application.
//  123  *
//  124  * The callback function should return TRUE if it has handled the
//  125  * MAC message and no further action should be taken with it. It
//  126  * should return FALSE if it has not handled the MAC message and
//  127  * normal processing should take place.
//  128  *
//  129  * NOTE: The processing in this function should be kept to the
//  130  *       minimum.
//  131  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  132 uint8 (*pZMac_AppCallback)( uint8 *msgPtr ) = (void*)NULL;
pZMac_AppCallback:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  133 
//  134 
//  135 /*********************************************************************
//  136  * ZMAC Functions
//  137  */
//  138 
//  139 /**************************************************************************************************
//  140  * @fn       MAC_CbackEvent()
//  141  *
//  142  * @brief    convert MAC data confirm and indication to ZMac and send to NWK
//  143  *
//  144  * @param    pData - pointer to macCbackEvent_t
//  145  *
//  146  * @return   none
//  147  *************************************************************************************************/
//  148 #ifdef FEATURE_DUAL_MAC
//  149 void ZMacCbackEventHdlr(macCbackEvent_t *pData)
//  150 #else

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  151 void MAC_CbackEvent(macCbackEvent_t *pData)
MAC_CbackEvent:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function MAC_CbackEvent
        CODE
//  152 #endif /* FEATURE_DUAL_MAC */
//  153 #ifndef MT_MAC_CB_FUNC
//  154 {
        FUNCALL MAC_CbackEvent, MAC_MlmeGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, mac_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, mac_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, ZMacLqiAdjust
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, nwk_broadcastSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, mac_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, ZMacLqiAdjust
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_CbackEvent, mac_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV     A,#-0x16
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  155 #if !defined NONWK
//  156   uint8 event = pData->hdr.event;
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_11:
        MOVX    A,@DPTR
        MOV     ?V2,A
//  157   uint16 tmp = zmacCBSizeTable[event];
        MOV     R0,A
        MOV     A,#zmacCBSizeTable & 0xff
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,#(zmacCBSizeTable >> 8) & 0xff
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V0,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  158   macCbackEvent_t *msgPtr;
//  159 
//  160   /* If the Network layer will handle a new MAC callback, a non-zero value must be entered in the
//  161    * corresponding location in the zmacCBSizeTable[] - thus the table acts as "should handle"?
//  162    */
//  163   if (tmp == 0)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??MAC_CbackEvent_0 & 0xFFFF
//  164   {
//  165     return;
//  166   }
//  167 
//  168   // MAC_MCPS_DATA_IND is very special - it is the only event where the MAC does not free *pData.
//  169   if ( event == MAC_MCPS_DATA_IND )
        MOV     A,#0xd
        XRL     A,?V2
        JNZ     ??MAC_CbackEvent_1
//  170   {
//  171 #if defined ( ZMAC_MAX_DATA_IND ) && ( ZMAC_MAX_DATA_IND >= 1 )
//  172     // This feature limits the number of unprocessed MAC Data Indications that can be queued
//  173     // into the Network Task's OSAL message queue. To enable ZMAC_MAX_DATA_IND filtering, the
//  174     // command-line option specifies the threshold setting where MAC_MCPS_DATD_IND callback
//  175     // messages will be dropped. For example, adding ZMAC_MAX_DATA_IND=5 to the commnad-line
//  176     // options allows up to five messages to be passed up and queued in the NWK layer buffer.
//  177     uint8 diCount = osal_msg_count( NWK_TaskID, MAC_MCPS_DATA_IND );
//  178 #endif // ZMAC_MAX_DATA_IND
//  179     MAC_MlmeGetReq( MAC_SHORT_ADDRESS, &tmp );
        ; Setup parameters for call to function MAC_MlmeGetReq
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        MOV     R1,#0x53
        LCALL   `??MAC_MlmeGetReq::?relay`; Banked call to: MAC_MlmeGetReq
//  180     if ( (tmp == INVALID_NODE_ADDR) ||
//  181          (tmp == NWK_BROADCAST_SHORTADDR_DEVALL) ||
//  182 #if defined ( ZMAC_MAX_DATA_IND ) && ( ZMAC_MAX_DATA_IND >= 1 )
//  183          (diCount > ZMAC_MAX_DATA_IND) ||
//  184 #endif // ZMAC_MAX_DATA_IND
//  185          (pData->dataInd.msdu.len == 0) )
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??MAC_CbackEvent_2
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??MAC_CbackEvent_2:
        JNZ     $+5
        LJMP    ??MAC_CbackEvent_3 & 0xFFFF
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??MAC_CbackEvent_4
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??MAC_CbackEvent_4:
        JNZ     $+5
        LJMP    ??MAC_CbackEvent_3 & 0xFFFF
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_9:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??MAC_CbackEvent_3 & 0xFFFF
//  186     {
//  187       mac_msg_deallocate( (uint8 **)&pData );
//  188       return;
//  189     }
//  190     msgPtr = pData;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        LJMP    ??MAC_CbackEvent_5 & 0xFFFF
//  191   }
//  192   else
//  193   {
//  194     if (event == MAC_MLME_BEACON_NOTIFY_IND )
??MAC_CbackEvent_1:
        MOV     A,#0x5
        XRL     A,?V2
        JNZ     ??MAC_CbackEvent_6
//  195     {
//  196       tmp += sizeof(macPanDesc_t) + pData->beaconNotifyInd.sduLength;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        LCALL   ?Subroutine4 & 0xFFFF
//  197     }
??CrossCallReturnLabel_7:
        MOV     R1,#0x0
        ADD     A,#0x21
        MOV     R0,A
        JNC     ??MAC_CbackEvent_7
        INC     R1
        SJMP    ??MAC_CbackEvent_7
//  198     else if (event == MAC_MLME_SCAN_CNF)
??MAC_CbackEvent_6:
        MOV     A,#0x7
        XRL     A,?V2
        JNZ     ??MAC_CbackEvent_8
//  199     {
//  200       if (pData->scanCnf.scanType == ZMAC_ED_SCAN)
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_10:
        MOVX    A,@DPTR
        JNZ     ??MAC_CbackEvent_9
//  201       {
//  202         tmp += ZMAC_ED_SCAN_MAXCHANNELS;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x1b
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        SJMP    ??MAC_CbackEvent_10
//  203       }
//  204       else
//  205       {
//  206         tmp += sizeof( ZMacPanDesc_t ) * pData->scanCnf.resultListSize;
??MAC_CbackEvent_9:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine4 & 0xFFFF
//  207       }
//  208     }
??CrossCallReturnLabel_8:
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     R1,B
??MAC_CbackEvent_7:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
??MAC_CbackEvent_10:
        MOVX    @DPTR,A
//  209 
//  210     if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
??MAC_CbackEvent_8:
        ; Setup parameters for call to function osal_msg_allocate
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R6,?V4
        MOV     R7,?V5
        MOV     A,R6
        ORL     A,R7
        JNZ     ??MAC_CbackEvent_11
//  211     {
//  212       // Not enough memory. If data confirm - try again
//  213       if ((event == MAC_MCPS_DATA_CNF) && (pData->dataCnf.pDataReq != NULL))
        MOV     A,#0xc
        XRL     A,?V2
        JZ      $+5
        LJMP    ??MAC_CbackEvent_0 & 0xFFFF
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        JNZ     $+5
        LJMP    ??MAC_CbackEvent_0 & 0xFFFF
//  214       {
//  215         halIntState_t intState;
//  216 
//  217         // This is not normally deallocated here because the pZMac_AppCallback()
//  218         // application may need it.
//  219         HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     ?V4,A
        CLR     0xa8.7
//  220 
//  221         mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
        ; Setup parameters for call to function mac_msg_deallocate
        LCALL   `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
//  222         if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
        ; Setup parameters for call to function osal_msg_allocate
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     R6,?V6
        MOV     R7,?V7
        MOV     A,R6
        ORL     A,R7
        JNZ     ??MAC_CbackEvent_12
//  223         {
//  224           // Still no allocation, something is wrong
//  225           HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
        MOV     A,?V4
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  226           return;
        LJMP    ??MAC_CbackEvent_0 & 0xFFFF
//  227         }
//  228         HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
??MAC_CbackEvent_12:
        MOV     A,?V4
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  229       }
//  230       else
//  231       {
//  232         // This message is dropped
//  233         return;
//  234       }
//  235     }
//  236     osal_memcpy(msgPtr, pData, zmacCBSizeTable[event]);
??MAC_CbackEvent_11:
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     R4,?V0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
//  237   }
//  238 
//  239   if ( event == MAC_MLME_BEACON_NOTIFY_IND )
        MOV     A,R6
        ADD     A,#0x9
        MOV     ?V8,A
        CLR     A
        ADDC    A,R7
        MOV     ?V9,A
        MOV     A,R6
        ADD     A,#0x8
        MOV     ?V12,A
        CLR     A
        ADDC    A,R7
        MOV     ?V13,A
        MOV     A,#0x5
        XRL     A,?V2
        JNZ     ??MAC_CbackEvent_13
//  240   {
//  241     macMlmeBeaconNotifyInd_t *pBeacon = (macMlmeBeaconNotifyInd_t*)msgPtr;
//  242 
//  243     osal_memcpy(pBeacon+1, pBeacon->pPanDesc, sizeof(macPanDesc_t));
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV     A,R6
        ADD     A,#0x3
        MOV     ?V10,A
        CLR     A
        ADDC    A,R7
        MOV     ?V11,A
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?V10
        MOV     DPH,A
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     R4,#0x21
        MOV     R5,#0x0
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
//  244     pBeacon->pPanDesc = (macPanDesc_t *)(pBeacon+1);
        MOV     DPL,?V10
        MOV     DPH,?V11
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
//  245     osal_memcpy(pBeacon->pPanDesc+1, pBeacon->pSdu, pBeacon->sduLength);
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?V8
        MOV     DPH,?V9
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     DPL,?V12
        MOV     DPH,?V13
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,?V0
        ADD     A,#0x21
        MOV     R2,A
        CLR     A
        ADDC    A,?V1
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
//  246     pBeacon->pSdu = (uint8 *)(pBeacon->pPanDesc+1);
        MOV     DPL,?V10
        MOV     DPH,?V11
        MOVX    A,@DPTR
        ADD     A,#0x21
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,?V8
        MOV     DPH,?V9
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        SJMP    ??MAC_CbackEvent_5
//  247   }
//  248   else if (event == MAC_MLME_SCAN_CNF)
??MAC_CbackEvent_13:
        MOV     A,#0x7
        XRL     A,?V2
        JNZ     ??MAC_CbackEvent_5
//  249   {
//  250     macMlmeScanCnf_t *pScan = (macMlmeScanCnf_t*)msgPtr;
//  251 
//  252     if (ZMac_ScanBuf != NULL)
        MOV     DPTR,#ZMac_ScanBuf
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_4:
        JZ      ??MAC_CbackEvent_5
//  253     {
//  254       void *pTmp = ZMac_ScanBuf;
        MOV     DPTR,#ZMac_ScanBuf
        MOVX    A,@DPTR
        MOV     ?V10,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V11,A
//  255       ZMac_ScanBuf = NULL;
        MOV     DPTR,#ZMac_ScanBuf
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  256 
//  257       if (pScan->scanType == ZMAC_ED_SCAN)
        MOV     ?V4,R0
        MOV     ?V5,R1
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,?V8
        MOV     DPH,?V9
        JNZ     ??MAC_CbackEvent_14
//  258       {
//  259         pScan->result.pEnergyDetect = (uint8*) (pScan + 1);
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
//  260         osal_memcpy(pScan->result.pEnergyDetect, pTmp, ZMAC_ED_SCAN_MAXCHANNELS);
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     R4,#0x1b
        MOV     R5,#0x0
        SJMP    ??MAC_CbackEvent_15
          CFI CFA_XSP16 add(XSP16, 26)
//  261       }
//  262       else
//  263       {
//  264         pScan->result.pPanDescriptor = (macPanDesc_t*) (pScan + 1);
??MAC_CbackEvent_14:
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
//  265         osal_memcpy(pScan + 1, pTmp, sizeof( ZMacPanDesc_t ) * pScan->resultListSize);
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     DPL,?V12
        MOV     DPH,?V13
        MOVX    A,@DPTR
        MOV     B,#0x21
        MUL     AB
        MOV     R4,A
        MOV     R5,B
??MAC_CbackEvent_15:
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
//  266       }
//  267 
//  268       osal_mem_free(pTmp);
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V10
        MOV     R3,?V11
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  269     }
//  270   }
//  271 
//  272   if ( ( pZMac_AppCallback == NULL ) || ( pZMac_AppCallback( (uint8 *)msgPtr ) == FALSE ) )
??MAC_CbackEvent_5:
        MOV     DPTR,#pZMac_AppCallback
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_5:
        JZ      ??MAC_CbackEvent_16
        ; Setup parameters for indirect call
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     A,R1
        JZ      $+5
        LJMP    ??MAC_CbackEvent_17 & 0xFFFF
//  273   {
//  274     // Filter out non-zigbee packets
//  275     if ( event == MAC_MCPS_DATA_IND )
??MAC_CbackEvent_16:
        MOV     A,#0xd
        XRL     A,?V2
        JZ      $+5
        LJMP    ??MAC_CbackEvent_18 & 0xFFFF
//  276     {
//  277       uint8 fcFrameType = (pData->dataInd.msdu.p[0] & 0x03);
//  278       uint8 fcProtoVer = ((pData->dataInd.msdu.p[0] >> 2) & 0x0F);
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        RRC     A
        RRC     A
        ANL     A,#0x3f
        ANL     A,#0xf
        MOV     R1,A
//  279       uint8 fcReserve = (pData->dataInd.msdu.p[1] & 0xC0);
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0xc0
        MOV     R0,A
//  280       if ( (fcFrameType > 0x01) || (fcProtoVer != _NIB.nwkProtocolVersion) || (fcReserve != 0)
//  281           || (pData->dataInd.mac.srcAddr.addrMode != SADDR_MODE_SHORT) )
        MOV     A,#0x3
        ANL     A,R2
        CLR     C
        SUBB    A,#0x2
        JNC     ??MAC_CbackEvent_19
        MOV     DPTR,#_NIB + 17
        MOVX    A,@DPTR
        XRL     A,R1
        JNZ     ??MAC_CbackEvent_19
        MOV     A,R0
        JNZ     ??MAC_CbackEvent_19
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_23:
        XCH     A,R0
        ADD     A,#0x1b
        MOV     DPL,A
        CLR     A
        ADDC    A,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??MAC_CbackEvent_20
//  282       {
//  283         //Is this for GP
//  284         if(fcProtoVer == GP_ZIGBEE_PROTOCOL_VER)
??MAC_CbackEvent_19:
        MOV     A,#0x3
        XRL     A,R1
        JNZ     ??MAC_CbackEvent_3
//  285         {
//  286           pData->hdr.event = GP_MAC_MCPS_DATA_IND;
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV     A,#0x1
        MOVX    @DPTR,A
//  287           
//  288 #if (ZG_BUILD_RTR_TYPE)           
//  289           // Application hasn't already processed this message. Send it to NWK task.
//  290           osal_msg_send( gp_TaskID, (uint8 *)pData );
//  291 #endif
//  292           return;
        LJMP    ??MAC_CbackEvent_0 & 0xFFFF
//  293         }
//  294         else
//  295         {
//  296 #if (ZG_BUILD_RTR_TYPE)           
//  297           gpLockTimestamp = FALSE;
//  298           gpTimeTempBackoff = 0;
//  299           gpTimeTempTimer = 0;
//  300 #endif
//  301         }
//  302 
//  303       
//  304         // Drop the message
//  305         mac_msg_deallocate( (uint8 **)&pData );
??MAC_CbackEvent_3:
        ; Setup parameters for call to function mac_msg_deallocate
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LJMP    ??MAC_CbackEvent_21 & 0xFFFF
//  306         return;
//  307       }
//  308       else
//  309       {
//  310         macDataInd_t *pInd = &msgPtr->dataInd.mac;
??MAC_CbackEvent_20:
        MOV     A,R6
        ADD     A,#0x13
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
//  311         // See if LQI needs adjustment due to frame correlation
//  312         ZMacLqiAdjust( pInd->correlation, &pInd->mpduLinkQuality );
        ; Setup parameters for call to function ZMacLqiAdjust
        MOV     A,R0
        ADD     A,#0x1c
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        MOV     A,R0
        ADD     A,#0x1d
        MOV     DPL,A
        CLR     A
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZMacLqiAdjust::?relay`; Banked call to: ZMacLqiAdjust
//  313 
//  314         // Look for broadcast message that has a radius of greater 1
//  315         if ( (pData->dataInd.mac.dstAddr.addr.shortAddr == 0xFFFF)
//  316                && (pData->dataInd.msdu.p[6] > 1) )
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_24:
        XCH     A,R0
        ADD     A,#0x1c
        MOV     DPL,A
        CLR     A
        ADDC    A,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??MAC_CbackEvent_22
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??MAC_CbackEvent_22:
        JNZ     ??MAC_CbackEvent_23
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_3:
        XCH     A,R0
        ADD     A,#0x6
        MOV     DPL,A
        CLR     A
        ADDC    A,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x2
        JC      ??MAC_CbackEvent_23
//  317         {
//  318           // Send the messsage to a special broadcast queue
//  319           if ( nwk_broadcastSend( (uint8 *)msgPtr ) != SUCCESS )
        ; Setup parameters for call to function nwk_broadcastSend
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??nwk_broadcastSend::?relay`; Banked call to: nwk_broadcastSend
        MOV     A,R1
        JZ      ??MAC_CbackEvent_0
//  320           {
//  321             // Drop the message, too many broadcast messages to process
//  322             mac_msg_deallocate( (uint8 **)&pData );
        ; Setup parameters for call to function mac_msg_deallocate
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
//  323           }
//  324           return;
??MAC_CbackEvent_24:
        SJMP    ??MAC_CbackEvent_0
//  325         }
//  326       }
//  327     }
//  328     else if ((event == MAC_MCPS_DATA_CNF) && (pData->hdr.status != MAC_NO_RESOURCES))
??MAC_CbackEvent_18:
        MOV     A,#0xc
        XRL     A,?V2
        JNZ     ??MAC_CbackEvent_25
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_13:
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1a
        JZ      ??MAC_CbackEvent_23
//  329     {
//  330       macMcpsDataCnf_t *pCnf = &msgPtr->dataCnf;
//  331 
//  332       if ( pCnf->pDataReq && (pCnf->pDataReq->internal.txOptions & MAC_TXOPTION_ACK) )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_6:
        JZ      ??MAC_CbackEvent_23
        MOV     A,R0
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??MAC_CbackEvent_23
//  333       {
//  334         // See if LQI needs adjustment due to frame correlation
//  335         ZMacLqiAdjust( pCnf->correlation, &pCnf->mpduLinkQuality );
        ; Setup parameters for call to function ZMacLqiAdjust
        MOV     A,R6
        ADD     A,#0xc
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        MOV     A,R6
        ADD     A,#0xd
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZMacLqiAdjust::?relay`; Banked call to: ZMacLqiAdjust
//  336       }
//  337     }
//  338 //ifdef FEATURE_GREEN_POWER
//  339 //GP_UPDATE 
//  340     if(event == MAC_MCPS_GREEN_PWR_DATA_CNF)
//  341     {
//  342       msgPtr->dataCnf.hdr.event = GP_MAC_MCPS_DATA_CNF;
//  343 #if (ZG_BUILD_RTR_TYPE)       
//  344       osal_msg_send( gp_TaskID, (uint8 *)msgPtr);
//  345 #endif
//  346     }
//  347     else
//  348     {
//  349       osal_msg_send( NWK_TaskID, (uint8 *)msgPtr );
??MAC_CbackEvent_23:
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPTR,#NWK_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
//  350     }
//  351 
//  352 //endif
//  353   }
//  354   
//  355 //ifdef FEATURE_GREEN_POWER
//  356 //GP_UPDATE   
//  357   if ((event == MAC_MCPS_DATA_CNF || event == MAC_MCPS_GREEN_PWR_DATA_CNF) && (pData->dataCnf.pDataReq != NULL))
??MAC_CbackEvent_17:
        MOV     A,#0xc
        XRL     A,?V2
        JZ      ??MAC_CbackEvent_26
        MOV     A,#0x11
        XRL     A,?V2
        JNZ     ??MAC_CbackEvent_0
??MAC_CbackEvent_26:
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_1:
        JZ      ??MAC_CbackEvent_0
//  358 //endif
//  359   {
//  360     // If the application needs 'pDataReq' then we cannot free it here.
//  361     // The application must free it after using it. Note that 'pDataReq'
//  362     // is of macMcpsDataReq_t (and not ZMacDataReq_t) type.
//  363 
//  364     mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
        ; Setup parameters for call to function mac_msg_deallocate
??MAC_CbackEvent_21:
        LCALL   `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
//  365   }
//  366 #endif
//  367 }
??MAC_CbackEvent_0:
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R7,#0xe
        LJMP    ?BANKED_LEAVE_XDATA
          CFI CFA_XSP16 add(XSP16, 26)
??MAC_CbackEvent_25:
        MOV     A,#0x11
        XRL     A,?V2
        JNZ     ??MAC_CbackEvent_23
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        SJMP    ??MAC_CbackEvent_26
          CFI EndBlock cfiBlock0
        REQUIRE _A_IEN0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond1 Using cfiCommon0
          CFI Function MAC_CbackEvent
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond2 Using cfiCommon0
          CFI (cfiCond2) Function MAC_CbackEvent
          CFI (cfiCond2) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond2) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond2) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond2) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond2) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond2) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond2) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond2) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond2) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond2) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond2) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond2) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond2) CFA_SP SP+-2
          CFI (cfiCond2) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker3 Using cfiCommon1
          CFI (cfiPicker3) NoFunction
          CFI (cfiPicker3) Picker
        MOV     A,R6
        ADD     A,#0xb
        MOV     ?V0,A
        CLR     A
        ADDC    A,R7
        MOV     ?V1,A
        RET
          CFI EndBlock cfiCond1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiPicker3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function MAC_CbackEvent
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function MAC_CbackEvent
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond5) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond5) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond5) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond5) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+-2
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker6 Using cfiCommon1
          CFI (cfiPicker6) NoFunction
          CFI (cfiPicker6) Picker
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     R0,#?V4
        RET
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiPicker6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond7 Using cfiCommon0
          CFI Function MAC_CbackEvent
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function MAC_CbackEvent
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond8) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function MAC_CbackEvent
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond9) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond9) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond9) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-2
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker10 Using cfiCommon1
          CFI (cfiPicker10) NoFunction
          CFI (cfiPicker10) Picker
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiPicker10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond11 Using cfiCommon0
          CFI Function MAC_CbackEvent
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function MAC_CbackEvent
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond12) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker13 Using cfiCommon1
          CFI (cfiPicker13) NoFunction
          CFI (cfiPicker13) Picker
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_19:
        RET
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiPicker13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond14 Using cfiCommon0
          CFI Function MAC_CbackEvent
          CFI Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function MAC_CbackEvent
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_10
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond15) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-4
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function MAC_CbackEvent
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_2
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond16) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-4
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function MAC_CbackEvent
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_3
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-4
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond19 Using cfiCommon0
          CFI Function MAC_CbackEvent
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function MAC_CbackEvent
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond20) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker21 Using cfiCommon1
          CFI (cfiPicker21) NoFunction
          CFI (cfiPicker21) Picker
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x8
        MOV     DPL,A
        CLR     A
        ADDC    A,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiPicker21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond22 Using cfiCommon0
          CFI Function MAC_CbackEvent
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function MAC_CbackEvent
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond23) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function MAC_CbackEvent
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond24) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-2
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker25 Using cfiCommon1
          CFI (cfiPicker25) NoFunction
          CFI (cfiPicker25) Picker
        LCALL   ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiPicker25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond26 Using cfiCommon0
          CFI Function MAC_CbackEvent
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function MAC_CbackEvent
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond27) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker28 Using cfiCommon1
          CFI (cfiPicker28) NoFunction
          CFI (cfiPicker28) Picker
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL   ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_21:
        RET
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiPicker28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiCond29 Using cfiCommon0
          CFI Function MAC_CbackEvent
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function MAC_CbackEvent
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond30) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker31 Using cfiCommon1
          CFI (cfiPicker31) NoFunction
          CFI (cfiPicker31) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x3
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiPicker31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond32 Using cfiCommon0
          CFI Function MAC_CbackEvent
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function MAC_CbackEvent
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function MAC_CbackEvent
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_11
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-4
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function MAC_CbackEvent
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_12
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond35) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-4
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function MAC_CbackEvent
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_13
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-4
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker37 Using cfiCommon1
          CFI (cfiPicker37) NoFunction
          CFI (cfiPicker37) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiPicker37
        REQUIRE ??Subroutine11_0
        ; // Fall through to label ??Subroutine11_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine11_0:
          CFI Block cfiCond38 Using cfiCommon0
          CFI Function MAC_CbackEvent
          CFI Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function MAC_CbackEvent
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_5
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-4
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function MAC_CbackEvent
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_6
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-4
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function MAC_CbackEvent
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_2
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond41) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-4
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function MAC_CbackEvent
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_3
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond42) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond42) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-4
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function MAC_CbackEvent
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_0
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-4
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function MAC_CbackEvent
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_1
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond44) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-4
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function MAC_CbackEvent
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond45) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function MAC_CbackEvent
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond46) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-2
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function MAC_CbackEvent
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_11
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond47) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-4
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function MAC_CbackEvent
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_12
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-4
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function MAC_CbackEvent
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_13
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond49) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-4
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker50 Using cfiCommon1
          CFI (cfiPicker50) NoFunction
          CFI (cfiPicker50) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiPicker50
//  368 #else  // ifdef MT_MAC_CB_FUNC
//  369 {
//  370   /* Check if MT has subscribed for this callback If so, pass it as an event to MonitorTest */
//  371   switch (pData->hdr.event)
//  372   {
//  373     case MAC_MLME_ASSOCIATE_IND:
//  374       if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_IND )
//  375         nwk_MTCallbackSubNwkAssociateInd ( (ZMacAssociateInd_t *)pData );
//  376       break;
//  377 
//  378     case MAC_MLME_ASSOCIATE_CNF:
//  379       if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_CNF )
//  380       {
//  381         nwk_MTCallbackSubNwkAssociateCnf ( (ZMacAssociateCnf_t *)pData );
//  382 #ifdef FEATURE_DUAL_MAC
//  383         DMMGR_ResetActivityFlag( ASSOC_ACTIVITY );
//  384 #endif /* FEATURE_DUAL_MAC */
//  385       }
//  386       break;
//  387 
//  388     case MAC_MLME_DISASSOCIATE_IND:
//  389       if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_IND )
//  390         nwk_MTCallbackSubNwkDisassociateInd ( (ZMacDisassociateInd_t *)pData );
//  391       break;
//  392 
//  393     case MAC_MLME_DISASSOCIATE_CNF:
//  394       if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_CNF )
//  395       {
//  396         nwk_MTCallbackSubNwkDisassociateCnf ( (ZMacDisassociateCnf_t *)pData );
//  397 #ifdef FEATURE_DUAL_MAC
//  398         DMMGR_ResetActivityFlag( DISASSOC_ACTIVITY );
//  399 #endif /* FEATURE_DUAL_MAC */
//  400       }
//  401       break;
//  402 
//  403     case MAC_MLME_BEACON_NOTIFY_IND:
//  404       if ( _macCallbackSub & CB_ID_NWK_BEACON_NOTIFY_IND )
//  405         nwk_MTCallbackSubNwkBeaconNotifyInd( (ZMacBeaconNotifyInd_t *)pData );
//  406       break;
//  407 
//  408     case MAC_MLME_ORPHAN_IND:
//  409       if ( _macCallbackSub & CB_ID_NWK_ORPHAN_IND )
//  410         nwk_MTCallbackSubNwkOrphanInd( (ZMacOrphanInd_t *) pData );
//  411       break;
//  412 
//  413     case MAC_MLME_SCAN_CNF:
//  414       if ( _macCallbackSub & CB_ID_NWK_SCAN_CNF )
//  415       {
//  416         pData->scanCnf.result.pEnergyDetect = ZMac_ScanBuf;
//  417         nwk_MTCallbackSubNwkScanCnf ( (ZMacScanCnf_t *) pData );
//  418 #ifdef FEATURE_DUAL_MAC
//  419         DMMGR_ResetActivityFlag( SCAN_ACTIVITY );
//  420 #endif /* FEATURE_DUAL_MAC */
//  421       }
//  422 
//  423       if (ZMac_ScanBuf != NULL)
//  424       {
//  425         void *pTmp = ZMac_ScanBuf;
//  426         ZMac_ScanBuf = NULL;
//  427         osal_mem_free(pTmp);
//  428       }
//  429       break;
//  430 
//  431     case MAC_MLME_START_CNF:
//  432       if ( _macCallbackSub & CB_ID_NWK_START_CNF )
//  433       {
//  434         nwk_MTCallbackSubNwkStartCnf ( pData->hdr.status );
//  435 #ifdef FEATURE_DUAL_MAC
//  436         DMMGR_ResetActivityFlag( START_ACTIVITY );
//  437 #endif /* FEATURE_DUAL_MAC */
//  438       }
//  439       break;
//  440 
//  441     case MAC_MLME_SYNC_LOSS_IND:
//  442       if ( _macCallbackSub & CB_ID_NWK_SYNC_LOSS_IND )
//  443        nwk_MTCallbackSubNwkSyncLossInd( (ZMacSyncLossInd_t *) pData );
//  444       break;
//  445 
//  446     case MAC_MLME_POLL_CNF:
//  447       if ( _macCallbackSub & CB_ID_NWK_POLL_CNF )
//  448       {
//  449         nwk_MTCallbackSubNwkPollCnf( pData->hdr.status );
//  450 #ifdef FEATURE_DUAL_MAC
//  451         DMMGR_ResetActivityFlag( DATA_POLL_ACTIVITY );
//  452 #endif /* FEATURE_DUAL_MAC */
//  453       }
//  454       break;
//  455 
//  456     case MAC_MLME_COMM_STATUS_IND:
//  457       if ( _macCallbackSub & CB_ID_NWK_COMM_STATUS_IND )
//  458       {
//  459         nwk_MTCallbackSubCommStatusInd ( (ZMacCommStatusInd_t *) pData );
//  460 #ifdef FEATURE_DUAL_MAC
//  461         /**
//  462          * Reset the activity flags if we receive the comm status 
//  463          * indication. The association response and orphan response msg 
//  464          * receives the comm-status indication message as a response. 
//  465          */
//  466         switch ( ((ZMacCommStatusInd_t *) pData)->hdr.Status )
//  467         {
//  468           case ZMAC_SUCCESS:
//  469           case ZMAC_TRANSACTION_OVERFLOW:
//  470           case ZMAC_TRANSACTION_EXPIRED:
//  471           case ZMAC_CHANNEL_ACCESS_FAILURE:
//  472           case ZMAC_NO_RESOURCES:          
//  473           case ZMAC_NO_ACK:
//  474           case ZMAC_COUNTER_ERROR:    
//  475           case ZMAC_INVALID_PARAMETER:
//  476             DMMGR_ResetActivityFlag( ALL_ACTIVITY );
//  477             break;
//  478           default:
//  479             /**
//  480              * If the activity flag is not reset, we need to re-evaluate the
//  481              * and add more case statement above. Note, MAC security is not
//  482              * used by zstack and not supported by dual mac.
//  483              */
//  484             break;
//  485         }
//  486 #endif /* FEATURE_DUAL_MAC */
//  487       }
//  488       break;
//  489 
//  490     case MAC_MCPS_DATA_CNF:
//  491     {
//  492 #ifdef FEATURE_DUAL_MAC
//  493       if ( pData->dataCnf.pDataReq != NULL )
//  494       {
//  495         if ( DMMGR_IsDefaultMac() )
//  496         {
//  497           DMMGR_ProcessMacDataCnf((macMcpsDataCnf_t *)pData);
//  498         }
//  499         
//  500         mac_msg_deallocate((uint8 **)&pData->dataCnf.pDataReq); 
//  501       }
//  502       
//  503       if ( _macCallbackSub & CB_ID_NWK_DATA_CNF )
//  504       {
//  505         nwk_MTCallbackSubNwkDataCnf( (ZMacDataCnf_t *) pData );
//  506       }
//  507 
//  508       DMMGR_ResetActivityFlag( DATA_ACTIVITY );
//  509 #else
//  510       if (pData->dataCnf.pDataReq != NULL)
//  511       {
//  512         mac_msg_deallocate((uint8**)&pData->dataCnf.pDataReq);
//  513       }
//  514 
//  515       if ( _macCallbackSub & CB_ID_NWK_DATA_CNF )
//  516       {
//  517         nwk_MTCallbackSubNwkDataCnf( (ZMacDataCnf_t *) pData );
//  518       }
//  519 
//  520 #endif /* FEATURE_DUAL_MAC */
//  521     }
//  522     break;
//  523 
//  524     case MAC_MCPS_DATA_IND:
//  525       {
//  526         /*
//  527            Data Ind is unconventional: to save an alloc/copy, reuse the MAC
//  528            buffer and re-organize the contents into ZMAC format.
//  529         */
//  530         ZMacDataInd_t *pDataInd = (ZMacDataInd_t *) pData;
//  531         uint8 event, status, len, *msdu;
//  532 
//  533         /* Store parameters */
//  534         event = pData->hdr.event;
//  535         status = pData->hdr.status;
//  536         len = pData->dataInd.msdu.len;
//  537         msdu = pData->dataInd.msdu.p;
//  538 
//  539         /* Copy security fields */
//  540         osal_memcpy(&pDataInd->Sec, &pData->dataInd.sec, sizeof(ZMacSec_t));
//  541 
//  542         /* Copy mac fields one by one since the two buffers overlap. */
//  543         osal_memcpy(&pDataInd->SrcAddr, &pData->dataInd.mac.srcAddr, sizeof(zAddrType_t));
//  544         osal_memcpy(&pDataInd->DstAddr, &pData->dataInd.mac.dstAddr, sizeof(zAddrType_t));
//  545         pDataInd->Timestamp = pData->dataInd.mac.timestamp;
//  546         pDataInd->Timestamp2 = pData->dataInd.mac.timestamp2;
//  547         pDataInd->SrcPANId = pData->dataInd.mac.srcPanId;
//  548         pDataInd->DstPANId = pData->dataInd.mac.dstPanId;
//  549         pDataInd->mpduLinkQuality = pData->dataInd.mac.mpduLinkQuality;
//  550         pDataInd->Correlation = pData->dataInd.mac.correlation;
//  551         pDataInd->Rssi = pData->dataInd.mac.rssi;
//  552         pDataInd->Dsn = pData->dataInd.mac.dsn;
//  553 
//  554         /* Restore parameters */
//  555         pDataInd->hdr.Status = status;
//  556         pDataInd->hdr.Event = event;
//  557         pDataInd->msduLength = len;
//  558 
//  559         if (len)
//  560           pDataInd->msdu = msdu;
//  561         else
//  562           pDataInd->msdu = NULL;
//  563 
//  564         if ( _macCallbackSub & CB_ID_NWK_DATA_IND )
//  565           nwk_MTCallbackSubNwkDataInd ( pDataInd );
//  566       }
//  567 
//  568       /* free buffer */
//  569       mac_msg_deallocate( (uint8 **)&pData );
//  570       break;
//  571 
//  572     case MAC_MCPS_PURGE_CNF:
//  573       if ( _macCallbackSub & CB_ID_NWK_PURGE_CNF )
//  574       {
//  575         nwk_MTCallbackSubNwkPurgeCnf( (ZMacPurgeCnf_t *) pData);
//  576 #ifdef FEATURE_DUAL_MAC
//  577         DMMGR_ResetActivityFlag( DATA_PURGE_ACTIVITY );
//  578 #endif /* FEATURE_DUAL_MAC */
//  579 
//  580       }
//  581       break;
//  582 
//  583     case MAC_MLME_POLL_IND:
//  584         if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_IND )
//  585         {
//  586           nwk_MTCallbackSubNwkPollInd( (ZMacPollInd_t *)pData );
//  587         }
//  588       break;
//  589 
//  590     default:
//  591       break;
//  592   }
//  593 }
//  594 #endif
//  595 
//  596 /********************************************************************************************************
//  597  * @fn      MAC_CbackCheckPending
//  598  *
//  599  * @brief   Return number of pending indirect msg
//  600  *
//  601  * @param   None
//  602  *
//  603  * @return  Number of indirect msg holding
//  604  ********************************************************************************************************/
//  605 #ifdef FEATURE_DUAL_MAC
//  606 uint8 ZMacCbackCheckPending(void)
//  607 #else

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  608 uint8 MAC_CbackCheckPending(void)
MAC_CbackCheckPending:
        CODE
//  609 #endif 
//  610 {
        ; Saved register size: 0
        ; Auto size: 0
//  611 #if !defined (NONWK)
//  612   if ( ZSTACK_ROUTER_BUILD )
//  613   {
//  614     return (nwkDB_ReturnIndirectHoldingCnt());
//  615   }
//  616   else
//  617   {
//  618     return (0);
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock51 Using cfiCommon0
          CFI NoFunction
        MOV     R1,#0x0
        LJMP    ?BRET
          CFI EndBlock cfiBlock51
//  619   }
//  620 #else
//  621   return (0);
//  622 #endif
//  623 }
//  624 
//  625 /**************************************************************************************************
//  626  * @fn          MAC_CbackQueryRetransmit
//  627  *
//  628  * @brief       This function callback function returns whether or not to continue MAC
//  629  *              retransmission.
//  630  *              A return value '0x00' will indicate no continuation of retry and a return value
//  631  *              '0x01' will indicate to continue retransmission. This callback function shall be
//  632  *              used to stop continuing retransmission for RF4CE.
//  633  *              MAC shall call this callback function whenever it finishes transmitting a packet
//  634  *              for macMaxFrameRetries times.
//  635  *
//  636  * input parameters
//  637  *
//  638  * None.
//  639  *
//  640  * output parameters
//  641  *
//  642  * None.
//  643  *
//  644  * @return      0x00 to stop retransmission, 0x01 to continue retransmission.
//  645  **************************************************************************************************
//  646 */
//  647 #ifdef FEATURE_DUAL_MAC
//  648 uint8 ZMacCbackQueryRetransmit(void)
//  649 #else

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  650 uint8 MAC_CbackQueryRetransmit(void)
MAC_CbackQueryRetransmit:
          CFI Block cfiBlock52 Using cfiCommon0
          CFI Function MAC_CbackQueryRetransmit
        CODE
//  651 #endif /* FEATURE_DUAL_MAC */
//  652 {
        ; Saved register size: 0
        ; Auto size: 0
//  653   return(0);
        SJMP    ?Subroutine0
//  654 }
          CFI EndBlock cfiBlock52
//  655 
//  656 /********************************************************************************************************
//  657  * @fn      ZMacLqiAdjustMode
//  658  *
//  659  * @brief   Sets/return LQI adjust mode
//  660  *
//  661  * @param   mode - LQI_ADJ_GET = return current mode only
//  662  *                 LQI_ADJ_OFF = disable LQI adjusts
//  663  *                 LQI_ADJ_MODEx = set to LQI adjust MODEx
//  664  *
//  665  * @return  current LQI adjust mode
//  666  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  667 ZMacLqiAdjust_t ZMacLqiAdjustMode( ZMacLqiAdjust_t mode )
ZMacLqiAdjustMode:
          CFI Block cfiBlock53 Using cfiCommon0
          CFI Function ZMacLqiAdjustMode
        CODE
//  668 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R0,A
//  669   if ( mode != LQI_ADJ_GET )
        MOV     A,#-0x1
        XRL     A,R0
        JZ      ??ZMacLqiAdjustMode_0
//  670   {
//  671     lqiAdjMode = mode;
        MOV     A,R0
        MOV     DPTR,#lqiAdjMode
        MOVX    @DPTR,A
//  672   }
//  673   return ( lqiAdjMode );
??ZMacLqiAdjustMode_0:
        MOV     DPTR,#lqiAdjMode
        MOVX    A,@DPTR
        MOV     R1,A
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
//  674 }
          CFI EndBlock cfiBlock53
//  675 
//  676 #if !defined NONWK
//  677 /********************************************************************************************************
//  678  * @fn      ZMacLqiAdjust
//  679  *
//  680  * @brief   Adjust LQI according to correlation value
//  681  *
//  682  * @notes - the IEEE 802.15.4 specification provides some general statements on
//  683  *          the subject of LQI. Section 6.7.8: "The minimum and maximum LQI values
//  684  *          (0x00 and 0xFF) should be associated with the lowest and highest IEEE
//  685  *          802.15.4 signals detectable by the receiver, and LQ values should be
//  686  *          uniformly distributed between these two limits." Section E.2.3: "The
//  687  *          LQI (see 6.7.8) measures the received energy and/or SNR for each
//  688  *          received packet. When energy level and SNR information are combined,
//  689  *          they can indicate whether a corrupt packet resulted from low signal
//  690  *          strength or from high signal strength plus interference."
//  691  *        - LQI Adjustment Mode1 provided below is a simple algorithm to use the
//  692  *          packet correlation value (related to SNR) to scale incoming LQI value
//  693  *          (related to signal strength) to 'derate' noisy packets.
//  694  *        - LQI Adjustment Mode2 provided below is a location for a developer to
//  695  *          implement their own proprietary LQI adjustment algorithm.
//  696  *
//  697  * @param   corr - packet correlation value
//  698  * @param   lqi  - ptr to link quality (scaled rssi)
//  699  *
//  700  * @return  *lqi - adjusted link quality
//  701  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  702 static void ZMacLqiAdjust( uint8 corr, uint8 *lqi )
ZMacLqiAdjust:
          CFI Block cfiBlock54 Using cfiCommon0
          CFI Function ZMacLqiAdjust
        CODE
//  703 {
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
//  704   if ( lqiAdjMode != LQI_ADJ_OFF )
        MOV     DPTR,#lqiAdjMode
        MOVX    A,@DPTR
        JZ      ??ZMacLqiAdjust_0
//  705   {
//  706     uint16 adjLqi = *lqi;
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
//  707 
//  708     // Keep correlation within theoretical limits
//  709     if ( corr < LQI_CORR_MIN )
        MOV     A,R6
        CLR     C
        SUBB    A,#0x32
        JNC     ??ZMacLqiAdjust_1
//  710     {
//  711        corr = LQI_CORR_MIN;
        MOV     R6,#0x32
        SJMP    ??ZMacLqiAdjust_2
//  712     }
//  713     else if ( corr > LQI_CORR_MAX )
??ZMacLqiAdjust_1:
        MOV     A,R6
        CLR     C
        SUBB    A,#0x6f
        JC      ??ZMacLqiAdjust_2
//  714     {
//  715        corr = LQI_CORR_MAX;
        MOV     R6,#0x6e
//  716     }
//  717 
//  718     if ( lqiAdjMode == LQI_ADJ_MODE1 )
??ZMacLqiAdjust_2:
        MOV     DPTR,#lqiAdjMode
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZMacLqiAdjust_3
//  719     {
//  720       /* MODE1 - linear scaling of incoming LQI with a "correlation percentage"
//  721                  which is computed from the incoming correlation value between
//  722                  theorectical minimum/maximum values. This is a very simple way
//  723                  of 'derating' the incoming LQI as correlation value drops. */
//  724       adjLqi = (adjLqi * (corr - LQI_CORR_MIN)) / (LQI_CORR_MAX - LQI_CORR_MIN);
        MOV     A,R6
        ADD     A,#-0x32
        MOV     ?V0,A
        CLR     A
        ADDC    A,#-0x1
        MOV     ?V1,A
        MOV     A,R0
        MOV     B,?V0
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,?V1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     R2,#0x3c
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
//  725     }
//  726     else if ( lqiAdjMode == LQI_ADJ_MODE2 )
//  727     {
//  728       /* MODE2 - location for developer to implement a proprietary algorithm */
//  729     }
//  730 
//  731     // Replace incoming LQI with scaled value
//  732     *lqi = (adjLqi > 255) ? 255 : (uint8)adjLqi;
??ZMacLqiAdjust_3:
        CLR     C
        MOV     A,R1
        SUBB    A,#0x1
        JC      ??ZMacLqiAdjust_4
        MOV     A,#-0x1
        SJMP    ??ZMacLqiAdjust_5
??ZMacLqiAdjust_4:
        MOV     A,R0
??ZMacLqiAdjust_5:
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    @DPTR,A
//  733   }
//  734 }
??ZMacLqiAdjust_0:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock54

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MAC_CbackEvent::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MAC_CbackEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MAC_CbackCheckPending::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MAC_CbackCheckPending

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MAC_CbackQueryRetransmit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MAC_CbackQueryRetransmit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacLqiAdjustMode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacLqiAdjustMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZMacLqiAdjust::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacLqiAdjust

        END
//  735 #endif
// 
// 1 179 bytes in segment BANKED_CODE
//    30 bytes in segment BANK_RELAYS
//    18 bytes in segment CODE_C
//     1 byte  in segment SFR_AN
//     3 bytes in segment XDATA_Z
// 
// 1 227 bytes of CODE  memory
//     0 bytes of DATA  memory (+ 1 byte shared)
//     3 bytes of XDATA memory
//
//Errors: none
//Warnings: none
