###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                05/Nov/2017  14:38:56
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Components\stack\GP\gp_proxyTbl.c
#    Command line       =  
#        -f
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Components\stack\GP\gp_proxyTbl.c
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        xPOWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
#        xMT_APP_CNF_FUNC -D LEGACY_LCD_DEBUG -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D
#        ZCL_IDENTIFY -D ZCL_SCENES -D ZCL_GROUPS -lC
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List
#        -lA
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\Source\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\Source\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List\gp_proxyTbl.lst
#    Object file        =  
#        C:\Users\admin\Desktop\github\z-stack3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\Obj\gp_proxyTbl.r51
#
###############################################################################

C:\Users\admin\Desktop\github\z-stack3.0.0\Components\stack\GP\gp_proxyTbl.c
      1          /**************************************************************************************************
      2            Filename:       gp_proxyTbl.c
      3            Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
      4            Revision:       $Revision: - $
      5          
      6            Description:    This file contains the implementation of the cGP stub.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          
     41          
     42          /*********************************************************************
     43           * INCLUDES
     44           */
     45             
     46          #include "ZGlobals.h"
     47          #include "ZDObject.h"
     48          #include "nwk_util.h"
     49          //GP_UPDATE   
     50          #include "ZComDef.h"
     51          #include "cGP_stub.h"
     52          #include "gp_common.h"
     53          #include "gp_interface.h"
     54          #include "zcl_green_power.h"
     55          #include "OSAL.h"
     56          
     57           /*********************************************************************
     58           * MACROS
     59           */ 
     60          
     61           /*********************************************************************
     62           * CONSTANTS
     63           */
     64          
     65          /*********************************************************************
     66           * TYPEDEFS
     67           */
     68             
     69           /*********************************************************************
     70           * GLOBAL VARIABLES
     71           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     72          ZDO_DeviceAnnce_t aliasConflictAnnce;
   \                     aliasConflictAnnce:
   \   000000                DS 11
   \   00000B                REQUIRE __INIT_XDATA_Z
     73          
     74           /*********************************************************************
     75           * EXTERNAL VARIABLES
     76           */
     77          
     78          /*********************************************************************
     79           * EXTERNAL FUNCTIONS
     80           */
     81          
     82          /*********************************************************************
     83           * LOCAL VARIABLES
     84           */
     85          
     86           /*********************************************************************
     87           * LOCAL FUNCTIONS
     88           */
     89          static void gp_PopulateProxyTblEntry( uint8* pData, uint8 size, uint8* pTblEntryVector, uint8* vectorLen );
     90          static uint8 pt_updateAlias( uint8* pNew );
     91          static uint8 pt_updateSecurity( uint8* pNew );
     92          static uint8 pt_updateSecFrameCounter( uint8* pNew );
     93          static uint8 pt_updateLightweightUnicastSink( uint8* pNew, uint8* pCurr, uint8 addSink );
     94          static uint8 pt_addSinkGroup( uint8* pNew, uint8* pCurr );
     95          static uint8 pt_lookForGpd( uint16 currProxyEntryId, uint8* pNew );
     96          
     97          /*********************************************************************
     98           * PUBLIC FUNCTIONS
     99           *********************************************************************/
    100          
    101          /*********************************************************************
    102           * @fn          pt_ZclReadGetProxyEntry
    103           *
    104           * @brief       Populate the given item data
    105           *
    106           * @param       nvId - NV entry to read
    107           *              pData - Pointer to OTA message payload
    108           *              len - Lenght of the payload
    109           *
    110           * @return
    111           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    112          uint8 pt_ZclReadGetProxyEntry( uint16 nvId, uint8* pData, uint8* len )
   \                     pt_ZclReadGetProxyEntry:
    113          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 144
   \   000005   7470         MOV     A,#0x70
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8C..         MOV     ?V14,R4
   \   00000C   8D..         MOV     ?V15,R5
    114            uint8  freeSinkEntry[LSINK_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000E   90....       MOV     DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   000011   7486         MOV     A,#-0x7a
   \   000013   12....       LCALL   ?XSTACK_DISP102_8
   \   000016   740A         MOV     A,#0xa
   \   000018   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    115            uint8  currEntry[PROXY_TBL_ENTRY_LEN] = {0};
   \   00001B   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
   \   00001E   7406         MOV     A,#0x6
   \   000020   12....       LCALL   ?XSTACK_DISP102_8
   \   000023   7440         MOV     A,#0x40
   \   000025   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    116            uint8  gpdEntry[PROXY_TBL_ENTRY_LEN] = {0};
   \   000028   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`
   \   00002B   7440         MOV     A,#0x40
   \   00002D   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    117            uint8  gpdEntryLen = 0;
   \   000030   85..82       MOV     DPL,?XSP + 0
   \   000033   85..83       MOV     DPH,?XSP + 1
   \   000036   F0           MOVX    @DPTR,A
    118            uint8  status;
    119            uint16 options;
    120          
    121            status = gp_getProxyTableByIndex( nvId, currEntry );
   \   000037                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   000037   7406         MOV     A,#0x6
   \   000039   12....       LCALL   ?XSTACK_DISP102_8
   \   00003C   12....       LCALL   `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   00003F   E9           MOV     A,R1
   \   000040   FE           MOV     R6,A
    122          
    123            // if FAIL or Empty
    124            if ( ( status == NV_OPER_FAILED ) || ( status == NV_INVALID_DATA ) )
   \   000041   740A         MOV     A,#0xa
   \   000043   6E           XRL     A,R6
   \   000044   6005         JZ      ??pt_ZclReadGetProxyEntry_0
   \   000046   740D         MOV     A,#0xd
   \   000048   6E           XRL     A,R6
   \   000049   7003         JNZ     ??pt_ZclReadGetProxyEntry_1
    125            {
    126              // FAIL
    127              return status;
   \                     ??pt_ZclReadGetProxyEntry_0:
   \   00004B   02....       LJMP    ??pt_ZclReadGetProxyEntry_2 & 0xFFFF
    128            }
    129          
    130            osal_memcpy( &gpdEntry[gpdEntryLen], &currEntry[PROXY_TBL_ENTRY_OPT], sizeof ( uint16 ) );
   \                     ??pt_ZclReadGetProxyEntry_1:
   \   00004E   7406         MOV     A,#0x6
   \   000050   12....       LCALL   ?XSTACK_DISP100_8
   \   000053   88..         MOV     ?V0,R0
   \   000055   89..         MOV     ?V1,R1
   \   000057   75..00       MOV     ?V2,#0x0
   \   00005A                ; Setup parameters for call to function osal_memcpy
   \   00005A   78..         MOV     R0,#?V0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005F   7C02         MOV     R4,#0x2
   \   000061   7D00         MOV     R5,#0x0
   \   000063   7403         MOV     A,#0x3
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F8           MOV     R0,A
   \   00006A   7449         MOV     A,#0x49
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000072   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000075   7403         MOV     A,#0x3
   \   000077   12....       LCALL   ?DEALLOC_XSTACK8
    131            osal_memcpy( &options, &currEntry[PROXY_TBL_ENTRY_OPT], sizeof ( uint16 ) );
   \   00007A                ; Setup parameters for call to function osal_memcpy
   \   00007A   78..         MOV     R0,#?V0
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00007F   7C02         MOV     R4,#0x2
   \   000081   7D00         MOV     R5,#0x0
   \   000083   7407         MOV     A,#0x7
   \   000085   12....       LCALL   ?XSTACK_DISP101_8
   \   000088   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00008B   7403         MOV     A,#0x3
   \   00008D   12....       LCALL   ?DEALLOC_XSTACK8
    132            gpdEntryLen += sizeof ( uint16 );
   \   000090   85..82       MOV     DPL,?XSP + 0
   \   000093   85..83       MOV     DPH,?XSP + 1
   \   000096   E0           MOVX    A,@DPTR
   \   000097   2402         ADD     A,#0x2
   \   000099   F0           MOVX    @DPTR,A
    133            
    134            // Options bitfield
    135            // If Application Id bitfield is 0b000
    136            if( GP_IS_APPLICATION_ID_GPD( options ) )
   \   00009A   7404         MOV     A,#0x4
   \   00009C   12....       LCALL   ?XSTACK_DISP0_8
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   5407         ANL     A,#0x7
   \   0000A2   F8           MOV     R0,A
   \   0000A3   7018         JNZ     ??pt_ZclReadGetProxyEntry_3
    137            {        
    138              // Populate GPD ID
    139              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_ID + 4], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \   0000A5                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000A5   A8..         MOV     R0,?XSP + 0
   \   0000A7   A9..         MOV     R1,?XSP + 1
   \   0000A9   88..         MOV     ?V0,R0
   \   0000AB   89..         MOV     ?V1,R1
   \   0000AD   78..         MOV     R0,#?V0
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B2   7448         MOV     A,#0x48
   \   0000B4   12....       LCALL   ?XSTACK_DISP102_8
   \   0000B7   7904         MOV     R1,#0x4
   \   0000B9   740E         MOV     A,#0xe
   \   0000BB   8038         SJMP    ??pt_ZclReadGetProxyEntry_4
    140            }
    141            // If Application Id bitfield is 0b010
    142            else if( GP_IS_APPLICATION_ID_IEEE( options ) )
   \                     ??pt_ZclReadGetProxyEntry_3:
   \   0000BD   7402         MOV     A,#0x2
   \   0000BF   68           XRL     A,R0
   \   0000C0   7042         JNZ     ??pt_ZclReadGetProxyEntry_5
    143            {   
    144              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN, gpdEntry, &gpdEntryLen );
   \   0000C2                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000C2   A8..         MOV     R0,?XSP + 0
   \   0000C4   A9..         MOV     R1,?XSP + 1
   \   0000C6   88..         MOV     ?V0,R0
   \   0000C8   89..         MOV     ?V1,R1
   \   0000CA   78..         MOV     R0,#?V0
   \   0000CC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CF   7448         MOV     A,#0x48
   \   0000D1   12....       LCALL   ?XSTACK_DISP102_8
   \   0000D4   7908         MOV     R1,#0x8
   \   0000D6   740A         MOV     A,#0xa
   \   0000D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DB   AA82         MOV     R2,DPL
   \   0000DD   AB83         MOV     R3,DPH
   \   0000DF   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0000E2   7402         MOV     A,#0x2
   \   0000E4   12....       LCALL   ?DEALLOC_XSTACK8
    145              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_EP], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \   0000E7                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000E7   78..         MOV     R0,#?V0
   \   0000E9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EC   7448         MOV     A,#0x48
   \   0000EE   12....       LCALL   ?XSTACK_DISP102_8
   \   0000F1   7901         MOV     R1,#0x1
   \   0000F3   7412         MOV     A,#0x12
   \                     ??pt_ZclReadGetProxyEntry_4:
   \   0000F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F8   AA82         MOV     R2,DPL
   \   0000FA   AB83         MOV     R3,DPH
   \   0000FC   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0000FF   7402         MOV     A,#0x2
   \   000101   12....       LCALL   ?DEALLOC_XSTACK8
    146            }
    147            
    148            if ( PROXY_TBL_GET_ASSIGNED_ALIAS( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_5:
   \   000104   7407         MOV     A,#0x7
   \   000106   12....       LCALL   ?XSTACK_DISP0_8
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   A2E5         MOV     C,0xE0 /* A   */.5
   \   00010C   5025         JNC     ??pt_ZclReadGetProxyEntry_6
    149            {
    150              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_ALIAS], sizeof ( uint16 ), gpdEntry, &gpdEntryLen );
   \   00010E                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00010E   A8..         MOV     R0,?XSP + 0
   \   000110   A9..         MOV     R1,?XSP + 1
   \   000112   88..         MOV     ?V0,R0
   \   000114   89..         MOV     ?V1,R1
   \   000116   78..         MOV     R0,#?V0
   \   000118   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011B   7448         MOV     A,#0x48
   \   00011D   12....       LCALL   ?XSTACK_DISP102_8
   \   000120   7902         MOV     R1,#0x2
   \   000122   7413         MOV     A,#0x13
   \   000124   12....       LCALL   ?XSTACK_DISP0_8
   \   000127   AA82         MOV     R2,DPL
   \   000129   AB83         MOV     R3,DPH
   \   00012B   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   00012E   7402         MOV     A,#0x2
   \   000130   12....       LCALL   ?DEALLOC_XSTACK8
    151            }
    152            
    153            if ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_6:
   \   000133   7407         MOV     A,#0x7
   \   000135   12....       LCALL   ?XSTACK_DISP0_8
   \   000138   E0           MOVX    A,@DPTR
   \   000139   A2E6         MOV     C,0xE0 /* A   */.6
   \   00013B   502F         JNC     ??pt_ZclReadGetProxyEntry_7
    154            {
    155              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEC_OPT], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \   00013D                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00013D   A8..         MOV     R0,?XSP + 0
   \   00013F   A9..         MOV     R1,?XSP + 1
   \   000141   88..         MOV     ?V0,R0
   \   000143   89..         MOV     ?V1,R1
   \   000145   78..         MOV     R0,#?V0
   \   000147   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014A   7448         MOV     A,#0x48
   \   00014C   12....       LCALL   ?XSTACK_DISP102_8
   \   00014F   7901         MOV     R1,#0x1
   \   000151   7415         MOV     A,#0x15
   \   000153   12....       LCALL   ?XSTACK_DISP0_8
   \   000156   AA82         MOV     R2,DPL
   \   000158   AB83         MOV     R3,DPH
   \   00015A   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   00015D   7402         MOV     A,#0x2
   \   00015F   12....       LCALL   ?DEALLOC_XSTACK8
    156            }
    157            
    158            if ( ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) || ( PROXY_TBL_GET_SEC_CAP( currEntry[PROXY_TBL_ENTRY_OPT] ) ) ) )
   \   000162   7407         MOV     A,#0x7
   \   000164   12....       LCALL   ?XSTACK_DISP0_8
   \   000167   E0           MOVX    A,@DPTR
   \   000168   A2E6         MOV     C,0xE0 /* A   */.6
   \   00016A   400A         JC      ??pt_ZclReadGetProxyEntry_8
   \                     ??pt_ZclReadGetProxyEntry_7:
   \   00016C   7406         MOV     A,#0x6
   \   00016E   12....       LCALL   ?XSTACK_DISP0_8
   \   000171   E0           MOVX    A,@DPTR
   \   000172   A2E5         MOV     C,0xE0 /* A   */.5
   \   000174   5025         JNC     ??pt_ZclReadGetProxyEntry_9
    159            {
    160              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEC_FRAME], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \                     ??pt_ZclReadGetProxyEntry_8:
   \   000176                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000176   A8..         MOV     R0,?XSP + 0
   \   000178   A9..         MOV     R1,?XSP + 1
   \   00017A   88..         MOV     ?V0,R0
   \   00017C   89..         MOV     ?V1,R1
   \   00017E   78..         MOV     R0,#?V0
   \   000180   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000183   7448         MOV     A,#0x48
   \   000185   12....       LCALL   ?XSTACK_DISP102_8
   \   000188   7904         MOV     R1,#0x4
   \   00018A   7416         MOV     A,#0x16
   \   00018C   12....       LCALL   ?XSTACK_DISP0_8
   \   00018F   AA82         MOV     R2,DPL
   \   000191   AB83         MOV     R3,DPH
   \   000193   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000196   7402         MOV     A,#0x2
   \   000198   12....       LCALL   ?DEALLOC_XSTACK8
    161            }
    162            
    163            if ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_9:
   \   00019B   7407         MOV     A,#0x7
   \   00019D   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A0   E0           MOVX    A,@DPTR
   \   0001A1   A2E6         MOV     C,0xE0 /* A   */.6
   \   0001A3   5025         JNC     ??pt_ZclReadGetProxyEntry_10
    164            {
    165              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_KEY], SEC_KEY_LEN, gpdEntry, &gpdEntryLen );
   \   0001A5                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0001A5   A8..         MOV     R0,?XSP + 0
   \   0001A7   A9..         MOV     R1,?XSP + 1
   \   0001A9   88..         MOV     ?V0,R0
   \   0001AB   89..         MOV     ?V1,R1
   \   0001AD   78..         MOV     R0,#?V0
   \   0001AF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B2   7448         MOV     A,#0x48
   \   0001B4   12....       LCALL   ?XSTACK_DISP102_8
   \   0001B7   7910         MOV     R1,#0x10
   \   0001B9   741A         MOV     A,#0x1a
   \   0001BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BE   AA82         MOV     R2,DPL
   \   0001C0   AB83         MOV     R3,DPH
   \   0001C2   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0001C5   7402         MOV     A,#0x2
   \   0001C7   12....       LCALL   ?DEALLOC_XSTACK8
    166            }
    167            
    168            if ( PROXY_TBL_GET_LIGHTWIGHT_UNICAST( currEntry[PROXY_TBL_ENTRY_OPT] ) )
   \                     ??pt_ZclReadGetProxyEntry_10:
   \   0001CA   7486         MOV     A,#-0x7a
   \   0001CC   12....       LCALL   ?XSTACK_DISP100_8
   \   0001CF   88..         MOV     ?V0,R0
   \   0001D1   89..         MOV     ?V1,R1
   \   0001D3   7406         MOV     A,#0x6
   \   0001D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D8   E0           MOVX    A,@DPTR
   \   0001D9   A2E6         MOV     C,0xE0 /* A   */.6
   \   0001DB   4003         JC      $+5
   \   0001DD   02....       LJMP    ??pt_ZclReadGetProxyEntry_11 & 0xFFFF
    169            {
    170              uint8 sinkCount = 0;
   \   0001E0   7401         MOV     A,#0x1
   \   0001E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E5   12....       LCALL   ?Subroutine3 & 0xFFFF
    171              uint8 sinkCountByte = gpdEntryLen;
    172              
    173              gpdEntryLen += sizeof ( sinkCountByte );
   \                     ??CrossCallReturnLabel_3:
   \   0001E8   04           INC     A
   \   0001E9   F0           MOVX    @DPTR,A
    174              
    175              if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \   0001EA   7446         MOV     A,#0x46
   \   0001EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EF   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0001F2   12....       LCALL   ?XSTACK_DISP100_8
   \   0001F5   88..         MOV     ?V4,R0
   \   0001F7   89..         MOV     ?V5,R1
   \   0001F9   75..00       MOV     ?V6,#0x0
   \   0001FC                ; Setup parameters for call to function osal_memcmp
   \   0001FC   7428         MOV     A,#0x28
   \   0001FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000201   A982         MOV     R1,DPL
   \   000203   AA83         MOV     R2,DPH
   \   000205   89..         MOV     ?V8,R1
   \   000207   8A..         MOV     ?V9,R2
   \   000209   75..00       MOV     ?V10,#0x0
   \   00020C   78..         MOV     R0,#?V8
   \   00020E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000211   7C0A         MOV     R4,#0xa
   \   000213   7D00         MOV     R5,#0x0
   \   000215   A9..         MOV     R1,?V0
   \   000217   AA..         MOV     R2,?V1
   \   000219   AB..         MOV     R3,?V2
   \   00021B   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00021E   7403         MOV     A,#0x3
   \   000220   12....       LCALL   ?DEALLOC_XSTACK8
   \   000223   E9           MOV     A,R1
   \   000224   7040         JNZ     ??pt_ZclReadGetProxyEntry_12
    176              {
    177                sinkCount += 1;
   \   000226   7401         MOV     A,#0x1
   \   000228   12....       LCALL   ?XSTACK_DISP0_8
   \   00022B   12....       LCALL   ?Subroutine5 & 0xFFFF
    178                osal_memcpy( &gpdEntry[sinkCountByte], &sinkCount, sizeof ( uint8 ) );
   \                     ??CrossCallReturnLabel_7:
   \   00022E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000231   7C01         MOV     R4,#0x1
   \   000233   7D00         MOV     R5,#0x0
   \   000235   AA..         MOV     R2,?V12
   \   000237   AB..         MOV     R3,?V13
   \   000239   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00023C   7403         MOV     A,#0x3
   \   00023E   12....       LCALL   ?DEALLOC_XSTACK8
    179                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN, gpdEntry, &gpdEntryLen );
   \   000241                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000241   A8..         MOV     R0,?XSP + 0
   \   000243   A9..         MOV     R1,?XSP + 1
   \   000245   88..         MOV     ?V8,R0
   \   000247   89..         MOV     ?V9,R1
   \   000249   78..         MOV     R0,#?V8
   \   00024B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00024E   7448         MOV     A,#0x48
   \   000250   12....       LCALL   ?XSTACK_DISP102_8
   \   000253   790A         MOV     R1,#0xa
   \   000255   742A         MOV     A,#0x2a
   \   000257   12....       LCALL   ?XSTACK_DISP0_8
   \   00025A   AA82         MOV     R2,DPL
   \   00025C   AB83         MOV     R3,DPH
   \   00025E   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000261   7402         MOV     A,#0x2
   \   000263   12....       LCALL   ?DEALLOC_XSTACK8
    180              }
    181              if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \                     ??pt_ZclReadGetProxyEntry_12:
   \   000266                ; Setup parameters for call to function osal_memcmp
   \   000266   7432         MOV     A,#0x32
   \   000268   12....       LCALL   ?XSTACK_DISP0_8
   \   00026B   A982         MOV     R1,DPL
   \   00026D   AA83         MOV     R2,DPH
   \   00026F   89..         MOV     ?V8,R1
   \   000271   8A..         MOV     ?V9,R2
   \   000273   78..         MOV     R0,#?V8
   \   000275   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000278   7C0A         MOV     R4,#0xa
   \   00027A   7D00         MOV     R5,#0x0
   \   00027C   A9..         MOV     R1,?V0
   \   00027E   AA..         MOV     R2,?V1
   \   000280   AB..         MOV     R3,?V2
   \   000282   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000285   7403         MOV     A,#0x3
   \   000287   12....       LCALL   ?DEALLOC_XSTACK8
   \   00028A   E9           MOV     A,R1
   \   00028B   7040         JNZ     ??pt_ZclReadGetProxyEntry_11
    182              {
    183                sinkCount += 1;
   \   00028D   7401         MOV     A,#0x1
   \   00028F   12....       LCALL   ?XSTACK_DISP0_8
   \   000292   12....       LCALL   ?Subroutine5 & 0xFFFF
    184                osal_memcpy( &gpdEntry[sinkCountByte], &sinkCount, sizeof ( uint8 ) );
   \                     ??CrossCallReturnLabel_8:
   \   000295   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000298   7C01         MOV     R4,#0x1
   \   00029A   7D00         MOV     R5,#0x0
   \   00029C   AA..         MOV     R2,?V12
   \   00029E   AB..         MOV     R3,?V13
   \   0002A0   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0002A3   7403         MOV     A,#0x3
   \   0002A5   12....       LCALL   ?DEALLOC_XSTACK8
    185                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN, gpdEntry, &gpdEntryLen );
   \   0002A8                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0002A8   A8..         MOV     R0,?XSP + 0
   \   0002AA   A9..         MOV     R1,?XSP + 1
   \   0002AC   88..         MOV     ?V4,R0
   \   0002AE   89..         MOV     ?V5,R1
   \   0002B0   78..         MOV     R0,#?V4
   \   0002B2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002B5   7448         MOV     A,#0x48
   \   0002B7   12....       LCALL   ?XSTACK_DISP102_8
   \   0002BA   790A         MOV     R1,#0xa
   \   0002BC   7434         MOV     A,#0x34
   \   0002BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C1   AA82         MOV     R2,DPL
   \   0002C3   AB83         MOV     R3,DPH
   \   0002C5   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0002C8   7402         MOV     A,#0x2
   \   0002CA   12....       LCALL   ?DEALLOC_XSTACK8
    186              }
    187            }
    188               
    189            if ( PROXY_TBL_GET_CGROUP( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_11:
   \   0002CD   7407         MOV     A,#0x7
   \   0002CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D2   E0           MOVX    A,@DPTR
   \   0002D3   A2E0         MOV     C,0xE0 /* A   */.0
   \   0002D5   4003         JC      $+5
   \   0002D7   02....       LJMP    ??pt_ZclReadGetProxyEntry_13 & 0xFFFF
    190            {
    191              uint8 groupCount = 0;
   \   0002DA   7401         MOV     A,#0x1
   \   0002DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0002DF   12....       LCALL   ?Subroutine3 & 0xFFFF
    192              uint8 groupCountByte = gpdEntryLen;
    193              if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint16 ) ) )
   \                     ??CrossCallReturnLabel_4:
   \   0002E2   7446         MOV     A,#0x46
   \   0002E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E7   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0002EA   12....       LCALL   ?XSTACK_DISP100_8
   \   0002ED   88..         MOV     ?V4,R0
   \   0002EF   89..         MOV     ?V5,R1
   \   0002F1   75..00       MOV     ?V6,#0x0
   \   0002F4                ; Setup parameters for call to function osal_memcmp
   \   0002F4   743C         MOV     A,#0x3c
   \   0002F6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F9   A982         MOV     R1,DPL
   \   0002FB   AA83         MOV     R2,DPH
   \   0002FD   89..         MOV     ?V8,R1
   \   0002FF   8A..         MOV     ?V9,R2
   \   000301   75..00       MOV     ?V10,#0x0
   \   000304   78..         MOV     R0,#?V8
   \   000306   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000309   7C02         MOV     R4,#0x2
   \   00030B   7D00         MOV     R5,#0x0
   \   00030D   A9..         MOV     R1,?V0
   \   00030F   AA..         MOV     R2,?V1
   \   000311   AB..         MOV     R3,?V2
   \   000313   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000316   7403         MOV     A,#0x3
   \   000318   12....       LCALL   ?DEALLOC_XSTACK8
   \   00031B   E9           MOV     A,R1
   \   00031C   7040         JNZ     ??pt_ZclReadGetProxyEntry_14
    194              {
    195                groupCount += 1;
   \   00031E   7401         MOV     A,#0x1
   \   000320   12....       LCALL   ?XSTACK_DISP0_8
   \   000323   12....       LCALL   ?Subroutine5 & 0xFFFF
    196                osal_memcpy( &gpdEntry[groupCountByte], &groupCount, sizeof ( uint8 ) );
   \                     ??CrossCallReturnLabel_9:
   \   000326   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000329   7C01         MOV     R4,#0x1
   \   00032B   7D00         MOV     R5,#0x0
   \   00032D   AA..         MOV     R2,?V12
   \   00032F   AB..         MOV     R3,?V13
   \   000331   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000334   7403         MOV     A,#0x3
   \   000336   12....       LCALL   ?DEALLOC_XSTACK8
    197                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \   000339                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000339   A8..         MOV     R0,?XSP + 0
   \   00033B   A9..         MOV     R1,?XSP + 1
   \   00033D   88..         MOV     ?V8,R0
   \   00033F   89..         MOV     ?V9,R1
   \   000341   78..         MOV     R0,#?V8
   \   000343   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000346   7448         MOV     A,#0x48
   \   000348   12....       LCALL   ?XSTACK_DISP102_8
   \   00034B   7904         MOV     R1,#0x4
   \   00034D   743E         MOV     A,#0x3e
   \   00034F   12....       LCALL   ?XSTACK_DISP0_8
   \   000352   AA82         MOV     R2,DPL
   \   000354   AB83         MOV     R3,DPH
   \   000356   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000359   7402         MOV     A,#0x2
   \   00035B   12....       LCALL   ?DEALLOC_XSTACK8
    198              }
    199              if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof ( uint16 ) ) )
   \                     ??pt_ZclReadGetProxyEntry_14:
   \   00035E                ; Setup parameters for call to function osal_memcmp
   \   00035E   7440         MOV     A,#0x40
   \   000360   12....       LCALL   ?XSTACK_DISP0_8
   \   000363   A982         MOV     R1,DPL
   \   000365   AA83         MOV     R2,DPH
   \   000367   89..         MOV     ?V8,R1
   \   000369   8A..         MOV     ?V9,R2
   \   00036B   78..         MOV     R0,#?V8
   \   00036D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000370   7C02         MOV     R4,#0x2
   \   000372   7D00         MOV     R5,#0x0
   \   000374   A9..         MOV     R1,?V0
   \   000376   AA..         MOV     R2,?V1
   \   000378   AB..         MOV     R3,?V2
   \   00037A   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00037D   7403         MOV     A,#0x3
   \   00037F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000382   E9           MOV     A,R1
   \   000383   7040         JNZ     ??pt_ZclReadGetProxyEntry_13
    200              {
    201                groupCount += 1;
   \   000385   7401         MOV     A,#0x1
   \   000387   12....       LCALL   ?XSTACK_DISP0_8
   \   00038A   12....       LCALL   ?Subroutine5 & 0xFFFF
    202                osal_memcpy( &gpdEntry[groupCountByte], &groupCount, sizeof( uint8 ) );
   \                     ??CrossCallReturnLabel_10:
   \   00038D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000390   7C01         MOV     R4,#0x1
   \   000392   7D00         MOV     R5,#0x0
   \   000394   AA..         MOV     R2,?V12
   \   000396   AB..         MOV     R3,?V13
   \   000398   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00039B   7403         MOV     A,#0x3
   \   00039D   12....       LCALL   ?DEALLOC_XSTACK8
    203                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \   0003A0                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0003A0   A8..         MOV     R0,?XSP + 0
   \   0003A2   A9..         MOV     R1,?XSP + 1
   \   0003A4   88..         MOV     ?V0,R0
   \   0003A6   89..         MOV     ?V1,R1
   \   0003A8   78..         MOV     R0,#?V0
   \   0003AA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003AD   7448         MOV     A,#0x48
   \   0003AF   12....       LCALL   ?XSTACK_DISP102_8
   \   0003B2   7904         MOV     R1,#0x4
   \   0003B4   7442         MOV     A,#0x42
   \   0003B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0003B9   AA82         MOV     R2,DPL
   \   0003BB   AB83         MOV     R3,DPH
   \   0003BD   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0003C0   7402         MOV     A,#0x2
   \   0003C2   12....       LCALL   ?DEALLOC_XSTACK8
    204              }
    205            }
    206            
    207            gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GRP_RAD], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \                     ??pt_ZclReadGetProxyEntry_13:
   \   0003C5                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0003C5   A8..         MOV     R0,?XSP + 0
   \   0003C7   A9..         MOV     R1,?XSP + 1
   \   0003C9   88..         MOV     ?V0,R0
   \   0003CB   89..         MOV     ?V1,R1
   \   0003CD   78..         MOV     R0,#?V0
   \   0003CF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003D2   7448         MOV     A,#0x48
   \   0003D4   12....       LCALL   ?XSTACK_DISP102_8
   \   0003D7   7901         MOV     R1,#0x1
   \   0003D9   7446         MOV     A,#0x46
   \   0003DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0003DE   AA82         MOV     R2,DPL
   \   0003E0   AB83         MOV     R3,DPH
   \   0003E2   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0003E5   7402         MOV     A,#0x2
   \   0003E7   12....       LCALL   ?DEALLOC_XSTACK8
    208            
    209            if ( ( PROXY_TBL_GET_ENTRY_ACTIVE( currEntry[PROXY_TBL_ENTRY_OPT] ) == 0 ) || ( PROXY_TBL_GET_ENTRY_VALID( currEntry[PROXY_TBL_ENTRY_OPT] ) == 0 ) )
   \   0003EA   7406         MOV     A,#0x6
   \   0003EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0003EF   E0           MOVX    A,@DPTR
   \   0003F0   5418         ANL     A,#0x18
   \   0003F2   6418         XRL     A,#0x18
   \   0003F4   601D         JZ      ??pt_ZclReadGetProxyEntry_15
    210            {
    211              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \   0003F6                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0003F6   78..         MOV     R0,#?V0
   \   0003F8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003FB   7448         MOV     A,#0x48
   \   0003FD   12....       LCALL   ?XSTACK_DISP102_8
   \   000400   7901         MOV     R1,#0x1
   \   000402   7447         MOV     A,#0x47
   \   000404   12....       LCALL   ?XSTACK_DISP0_8
   \   000407   AA82         MOV     R2,DPL
   \   000409   AB83         MOV     R3,DPH
   \   00040B   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   00040E   7402         MOV     A,#0x2
   \   000410   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??pt_ZclReadGetProxyEntry_15:
   \   000413   74A8         MOV     A,#-0x58
   \   000415   12....       LCALL   ?XSTACK_DISP0_8
   \   000418   E0           MOVX    A,@DPTR
   \   000419   F5..         MOV     ?V0,A
   \   00041B   A3           INC     DPTR
   \   00041C   E0           MOVX    A,@DPTR
   \   00041D   F5..         MOV     ?V1,A
    212            }
    213            
    214            if ( pData != NULL )
   \   00041F   85..82       MOV     DPL,?V0
   \   000422   F583         MOV     DPH,A
   \   000424   E0           MOVX    A,@DPTR
   \   000425   F8           MOV     R0,A
   \   000426   E5..         MOV     A,?V14
   \   000428   45..         ORL     A,?V15
   \   00042A   7003         JNZ     $+5
   \   00042C   02....       LJMP    ??pt_ZclReadGetProxyEntry_16 & 0xFFFF
    215            {
    216              uint8 sinkEntryLen;
    217              uint16 totalLen;
    218              
    219              sinkEntryLen = gpdEntryLen;
   \   00042F   85..82       MOV     DPL,?XSP + 0
   \   000432   85..83       MOV     DPH,?XSP + 1
   \   000435   E0           MOVX    A,@DPTR
   \   000436   FF           MOV     R7,A
    220              if ( *len != 0 )
   \   000437   E8           MOV     A,R0
   \   000438   6004         JZ      ??pt_ZclReadGetProxyEntry_17
    221              {
    222              gpdEntryLen -= sizeof ( uint16 );
   \   00043A   E0           MOVX    A,@DPTR
   \   00043B   24FE         ADD     A,#-0x2
   \   00043D   F0           MOVX    @DPTR,A
    223              }
    224              totalLen = gpdEntryLen;
   \                     ??pt_ZclReadGetProxyEntry_17:
   \   00043E   E0           MOVX    A,@DPTR
   \   00043F   F8           MOV     R0,A
   \   000440   7402         MOV     A,#0x2
   \   000442   12....       LCALL   ?XSTACK_DISP0_8
   \   000445   E8           MOV     A,R0
   \   000446   F0           MOVX    @DPTR,A
   \   000447   A3           INC     DPTR
   \   000448   E4           CLR     A
   \   000449   F0           MOVX    @DPTR,A
    225              totalLen += *len;
   \   00044A   85..82       MOV     DPL,?V0
   \   00044D   85..83       MOV     DPH,?V1
   \   000450   E0           MOVX    A,@DPTR
   \   000451   F8           MOV     R0,A
   \   000452   7402         MOV     A,#0x2
   \   000454   12....       LCALL   ?XSTACK_DISP0_8
   \   000457   E0           MOVX    A,@DPTR
   \   000458   28           ADD     A,R0
   \   000459   F0           MOVX    @DPTR,A
   \   00045A   A3           INC     DPTR
   \   00045B   E0           MOVX    A,@DPTR
   \   00045C   3400         ADDC    A,#0x0
   \   00045E   F0           MOVX    @DPTR,A
    226              osal_memcpy( pData, &totalLen, sizeof ( uint16 ) );
   \   00045F                ; Setup parameters for call to function osal_memcpy
   \   00045F   7402         MOV     A,#0x2
   \   000461   12....       LCALL   ?XSTACK_DISP100_8
   \   000464   88..         MOV     ?V4,R0
   \   000466   89..         MOV     ?V5,R1
   \   000468   75..00       MOV     ?V6,#0x0
   \   00046B   78..         MOV     R0,#?V4
   \   00046D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000470   7C02         MOV     R4,#0x2
   \   000472   7D00         MOV     R5,#0x0
   \   000474   AA..         MOV     R2,?V14
   \   000476   AB..         MOV     R3,?V15
   \   000478   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00047B   7403         MOV     A,#0x3
   \   00047D   12....       LCALL   ?DEALLOC_XSTACK8
    227              if ( *len == 0 )
   \   000480   85..82       MOV     DPL,?V0
   \   000483   85..83       MOV     DPH,?V1
   \   000486   E0           MOVX    A,@DPTR
   \   000487   700A         JNZ     ??pt_ZclReadGetProxyEntry_18
    228              {
    229                pData += sizeof ( uint16 );
   \   000489   E5..         MOV     A,?V14
   \   00048B   2402         ADD     A,#0x2
   \   00048D   F5..         MOV     ?V14,A
   \   00048F   5002         JNC     ??pt_ZclReadGetProxyEntry_18
   \   000491   05..         INC     ?V15
    230              }
    231              gpdEntryLen += sizeof ( uint16 );
   \                     ??pt_ZclReadGetProxyEntry_18:
   \   000493   85..82       MOV     DPL,?XSP + 0
   \   000496   85..83       MOV     DPH,?XSP + 1
   \   000499   E0           MOVX    A,@DPTR
   \   00049A   2402         ADD     A,#0x2
   \   00049C   F0           MOVX    @DPTR,A
    232              
    233              pData += *len;
    234              osal_memcpy( pData, gpdEntry, sinkEntryLen );
   \   00049D                ; Setup parameters for call to function osal_memcpy
   \   00049D   7446         MOV     A,#0x46
   \   00049F   12....       LCALL   ?XSTACK_DISP100_8
   \   0004A2   88..         MOV     ?V4,R0
   \   0004A4   89..         MOV     ?V5,R1
   \   0004A6   78..         MOV     R0,#?V4
   \   0004A8   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0004AB   EF           MOV     A,R7
   \   0004AC   FC           MOV     R4,A
   \   0004AD   7D00         MOV     R5,#0x0
   \   0004AF   85..82       MOV     DPL,?V0
   \   0004B2   85..83       MOV     DPH,?V1
   \   0004B5   E0           MOVX    A,@DPTR
   \   0004B6   F8           MOV     R0,A
   \   0004B7   E5..         MOV     A,?V14
   \   0004B9   28           ADD     A,R0
   \   0004BA   FA           MOV     R2,A
   \   0004BB   E4           CLR     A
   \   0004BC   35..         ADDC    A,?V15
   \   0004BE   FB           MOV     R3,A
   \   0004BF   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0004C2   7403         MOV     A,#0x3
   \   0004C4   12....       LCALL   ?DEALLOC_XSTACK8
    235              if ( *len != 0 )
   \   0004C7   85..82       MOV     DPL,?V0
   \   0004CA   85..83       MOV     DPH,?V1
   \   0004CD   E0           MOVX    A,@DPTR
   \   0004CE   601B         JZ      ??pt_ZclReadGetProxyEntry_19
    236              {
    237                *len = totalLen;
   \   0004D0   7402         MOV     A,#0x2
   \   0004D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0004D5   E0           MOVX    A,@DPTR
   \   0004D6   85..82       MOV     DPL,?V0
   \   0004D9   85..83       MOV     DPH,?V1
   \   0004DC   801D         SJMP    ??pt_ZclReadGetProxyEntry_20
    238                return status;
    239              }
    240              *len += gpdEntryLen;
    241              return status;
    242            }
    243            else
    244            {
    245              if ( *len == 0 )
   \                     ??pt_ZclReadGetProxyEntry_16:
   \   0004DE   E8           MOV     A,R0
   \   0004DF   700A         JNZ     ??pt_ZclReadGetProxyEntry_19
    246              {
    247                gpdEntryLen += sizeof ( uint16 );
   \   0004E1   85..82       MOV     DPL,?XSP + 0
   \   0004E4   85..83       MOV     DPH,?XSP + 1
   \   0004E7   E0           MOVX    A,@DPTR
   \   0004E8   2402         ADD     A,#0x2
   \   0004EA   F0           MOVX    @DPTR,A
    248              }
    249              *len += gpdEntryLen;
   \                     ??pt_ZclReadGetProxyEntry_19:
   \   0004EB   85..82       MOV     DPL,?XSP + 0
   \   0004EE   85..83       MOV     DPH,?XSP + 1
   \   0004F1   E0           MOVX    A,@DPTR
   \   0004F2   F8           MOV     R0,A
   \   0004F3   85..82       MOV     DPL,?V0
   \   0004F6   85..83       MOV     DPH,?V1
   \   0004F9   E0           MOVX    A,@DPTR
   \   0004FA   28           ADD     A,R0
   \                     ??pt_ZclReadGetProxyEntry_20:
   \   0004FB   F0           MOVX    @DPTR,A
    250              return status;
   \   0004FC   EE           MOV     A,R6
   \   0004FD   F9           MOV     R1,A
   \                     ??pt_ZclReadGetProxyEntry_2:
   \   0004FE   7490         MOV     A,#-0x70
   \   000500   12....       LCALL   ?DEALLOC_XSTACK8
   \   000503   7F10         MOV     R7,#0x10
   \   000505   02....       LJMP    ?BANKED_LEAVE_XDATA
    251            }
    252          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   04           INC     A
   \   000002   F0           MOVX    @DPTR,A
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003   78..         MOV     R0,#?V4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F5..         MOV     ?V12,A
   \   000005   E4           CLR     A
   \   000006   3583         ADDC    A,DPH
   \   000008   F5..         MOV     ?V13,A
   \   00000A   7401         MOV     A,#0x1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E4           CLR     A
   \   000001   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000004   F8           MOV     R0,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3583         ADDC    A,DPH
   \   000007   FB           MOV     R3,A
   \   000008   22           RET
    253          
    254          /*********************************************************************
    255           * @fn      zclGpp_ReadWriteAttrCB
    256           *
    257           * @brief   Handle Diagnostics attributes.
    258           *
    259           * @param   clusterId - cluster that attribute belongs to
    260           * @param   attrId - attribute to be read or written
    261           * @param   oper - ZCL_OPER_LEN, ZCL_OPER_READ, or ZCL_OPER_WRITE
    262           * @param   pValue - pointer to attribute value, OTA endian
    263           * @param   pLen - length of attribute value read, native endian
    264           *
    265           * @return  status
    266           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    267          ZStatus_t zclGpp_ReadWriteAttrCB( uint16 clusterId, uint16 attrId, uint8 oper,
   \                     zclGpp_ReadWriteAttrCB:
    268                                                   uint8 *pValue, uint16 *pLen )
    269          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V1,R1
    270            ZStatus_t status = ZSuccess;
   \   000007   7900         MOV     R1,#0x0
    271            uint16 proxyTableIndex;
    272            uint8 i;
    273          
    274            switch ( oper )
   \   000009   E5..         MOV     A,?V1
   \   00000B   6008         JZ      ??zclGpp_ReadWriteAttrCB_0
   \   00000D   14           DEC     A
   \   00000E   6005         JZ      ??zclGpp_ReadWriteAttrCB_0
   \   000010   14           DEC     A
   \   000011   604A         JZ      ??zclGpp_ReadWriteAttrCB_1
   \   000013   804A         SJMP    ??zclGpp_ReadWriteAttrCB_2
    275            {
    276              case ZCL_OPER_LEN:
    277              case ZCL_OPER_READ:
    278                if ( attrId == ATTRID_GP_PROXY_TABLE )
   \                     ??zclGpp_ReadWriteAttrCB_0:
   \   000015   7411         MOV     A,#0x11
   \   000017   6C           XRL     A,R4
   \   000018   4D           ORL     A,R5
   \   000019   7044         JNZ     ??zclGpp_ReadWriteAttrCB_2
    279                { 
    280                  for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   00001B   75..00       MOV     ?V0,#0x0
   \   00001E   740C         MOV     A,#0xc
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FE           MOV     R6,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FF           MOV     R7,A
   \   000028   740E         MOV     A,#0xe
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V2,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V3,A
    281                  {
    282                    proxyTableIndex = ZCD_NV_PROXY_TABLE_START + i;
    283                    
    284                    status = pt_ZclReadGetProxyEntry ( proxyTableIndex, pValue, (uint8*)pLen );
   \                     ??zclGpp_ReadWriteAttrCB_3:
   \   000034                ; Setup parameters for call to function pt_ZclReadGetProxyEntry
   \   000034   78..         MOV     R0,#?V2
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   EE           MOV     A,R6
   \   00003A   FC           MOV     R4,A
   \   00003B   EF           MOV     A,R7
   \   00003C   FD           MOV     R5,A
   \   00003D   E5..         MOV     A,?V0
   \   00003F   2410         ADD     A,#0x10
   \   000041   FA           MOV     R2,A
   \   000042   E4           CLR     A
   \   000043   3403         ADDC    A,#0x3
   \   000045   FB           MOV     R3,A
   \   000046   12....       LCALL   `??pt_ZclReadGetProxyEntry::?relay`; Banked call to: pt_ZclReadGetProxyEntry
   \   000049   7402         MOV     A,#0x2
   \   00004B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004E   E9           MOV     A,R1
   \   00004F   F9           MOV     R1,A
    285                    if ( status != ZSuccess )
   \   000050   700B         JNZ     ??zclGpp_ReadWriteAttrCB_1
    286                    {
    287                      status = ZFailure;
    288                      break;
    289                    }
    290                  }
   \   000052   05..         INC     ?V0
   \   000054   E5..         MOV     A,?V0
   \   000056   C3           CLR     C
   \   000057   9406         SUBB    A,#0x6
   \   000059   5004         JNC     ??zclGpp_ReadWriteAttrCB_2
   \   00005B   80D7         SJMP    ??zclGpp_ReadWriteAttrCB_3
    291                  
    292                }
    293                break;
    294          
    295              case ZCL_OPER_WRITE:
    296                status = ZFailure;
   \                     ??zclGpp_ReadWriteAttrCB_1:
   \   00005D   7901         MOV     R1,#0x1
    297                break;
    298            }
    299          
    300            return ( status );
   \                     ??zclGpp_ReadWriteAttrCB_2:
   \   00005F   7F04         MOV     R7,#0x4
   \   000061   02....       LJMP    ?BANKED_LEAVE_XDATA
    301          }
    302          
    303           /*********************************************************************
    304           * @fn          gp_pairingSetProxyTblOptions
    305           *
    306           * @brief       Function to fill the options pramenter in a Proxy Table entry
    307           *              from a GP Pairing Command
    308           *
    309           * @param       pBitField - pointer to the bit field.
    310           *              bit       - position of the bit to set in the given bitfield.
    311           *
    312           * @return      
    313           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    314          static uint16 gp_pairingSetProxyTblOptions ( uint32 pairingOpt )
   \                     gp_pairingSetProxyTblOptions:
    315          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   \   00000E   8C..         MOV     ?V6,R4
   \   000010   8D..         MOV     ?V7,R5
    316            uint8  proxyOpt[2] = {0x00, 0x00};
   \   000012   90....       MOV     DPTR,#`?<Constant {0, 0}>`
   \   000015   AC..         MOV     R4,?XSP + 0
   \   000017   AD..         MOV     R5,?XSP + 1
   \   000019   7402         MOV     A,#0x2
   \   00001B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    317            uint16 opt = 0; 
    318            
    319            PAIRING_PROXY_TBL_SET_APPLICATION_ID(( uint8* )&proxyOpt[0], pairingOpt);
    320            PROXY_TBL_SET_ENTRY_ACTIVE( &proxyOpt[0] );
    321            PROXY_TBL_SET_ENTRY_VALID( &proxyOpt[0] );
   \   00001E   8A..         MOV     ?V0,R2
   \   000020   EA           MOV     A,R2
   \   000021   5407         ANL     A,#0x7
   \   000023   F8           MOV     R0,A
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   54F8         ANL     A,#0xf8
   \   00002D   48           ORL     A,R0
   \   00002E   4418         ORL     A,#0x18
   \   000030   F0           MOVX    @DPTR,A
    322            PAIRING_PROXY_TBL_SET_MAC_SEQ_CAP(( uint16* )&proxyOpt, pairingOpt);
   \   000031   54DF         ANL     A,#0xdf
   \   000033   FA           MOV     R2,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   FB           MOV     R3,A
   \   000037   85....       MOV     ?V1,?V5
   \   00003A   7403         MOV     A,#0x3
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?US_SHR
   \   000041   E5..         MOV     A,?V0
   \   000043   5420         ANL     A,#0x20
   \   000045   F8           MOV     R0,A
   \   000046   EA           MOV     A,R2
   \   000047   48           ORL     A,R0
   \   000048   F8           MOV     R0,A
   \   000049   EB           MOV     A,R3
   \   00004A   F9           MOV     R1,A
   \   00004B   85..82       MOV     DPL,?XSP + 0
   \   00004E   85..83       MOV     DPH,?XSP + 1
   \   000051   E8           MOV     A,R0
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   E9           MOV     A,R1
   \   000055   F0           MOVX    @DPTR,A
    323            
    324            if ( GP_IS_COMMUNICATION_MODE_LIGHT_UNICAST( pairingOpt ) )
   \   000056   85....       MOV     ?V0,?V4
   \   000059   E5..         MOV     A,?V0
   \   00005B   C4           SWAP    A
   \   00005C   13           RRC     A
   \   00005D   5407         ANL     A,#0x7
   \   00005F   5403         ANL     A,#0x3
   \   000061   F8           MOV     R0,A
   \   000062   7403         MOV     A,#0x3
   \   000064   68           XRL     A,R0
   \   000065   85..82       MOV     DPL,?XSP + 0
   \   000068   85..83       MOV     DPH,?XSP + 1
   \   00006B   7012         JNZ     ??gp_pairingSetProxyTblOptions_0
    325            {
    326              PROXY_TBL_SET_LIGHTWIGHT_UNICAST( &proxyOpt[0] );
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   D2E6         SETB    0xE0 /* A   */.6
   \   000070   F0           MOVX    @DPTR,A
    327            }
    328            else
    329            {
    330              PROXY_TBL_CLR_LIGHTWIGHT_UNICAST( &proxyOpt[0] );
    331            }
    332            if ( GP_IS_COMMUNICATION_MODE_GRPCAST_DGROUP_ID( pairingOpt ) )
    333            {
    334              PROXY_TBL_SET_DGROUP( &proxyOpt[0] );
    335            }
    336            else
    337            {
    338              PROXY_TBL_CLR_DGROUP( &proxyOpt[0] );
   \                     ??gp_pairingSetProxyTblOptions_1:
   \   000071   E0           MOVX    A,@DPTR
   \   000072   C2E7         CLR     0xE0 /* A   */.7
   \   000074   F0           MOVX    @DPTR,A
    339            }
    340            if ( GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( pairingOpt ) )
   \   000075   7402         MOV     A,#0x2
   \   000077   68           XRL     A,R0
   \   000078   7012         JNZ     ??gp_pairingSetProxyTblOptions_2
    341            {
    342              PROXY_TBL_SET_CGROUP( &proxyOpt[0] );
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   D2E0         SETB    0xE0 /* A   */.0
   \   00007D   8010         SJMP    ??gp_pairingSetProxyTblOptions_3
    343            }
   \                     ??gp_pairingSetProxyTblOptions_0:
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   C2E6         CLR     0xE0 /* A   */.6
   \   000082   F0           MOVX    @DPTR,A
   \   000083   7401         MOV     A,#0x1
   \   000085   68           XRL     A,R0
   \   000086   70E9         JNZ     ??gp_pairingSetProxyTblOptions_1
   \   000088   E0           MOVX    A,@DPTR
   \   000089   D2E7         SETB    0xE0 /* A   */.7
   \   00008B   F0           MOVX    @DPTR,A
    344            else
    345            {
    346              PROXY_TBL_CLR_CGROUP( &proxyOpt[0] );
   \                     ??gp_pairingSetProxyTblOptions_2:
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   C2E0         CLR     0xE0 /* A   */.0
   \                     ??gp_pairingSetProxyTblOptions_3:
   \   00008F   F0           MOVX    @DPTR,A
    347            }
    348            
    349            // FALSE by default
    350            PROXY_TBL_CLR_FIRST_TO_FORWARD( &proxyOpt[1] );
    351            
    352            // The InRange sub-field, if set to 0b1, indicates that this GPD is in range 
    353            // of this proxy. The default value is FALSE
    354            PROXY_TBL_CLR_IN_RANGE( &proxyOpt[1] );
   \   000090   7401         MOV     A,#0x1
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   E0           MOVX    A,@DPTR
   \   000096   54F9         ANL     A,#0xf9
   \   000098   F0           MOVX    @DPTR,A
    355            // The GPDfixed sub-field, if set to 0b1, indicates portability capabilities 
    356            if ( GP_GET_GPD_FIXED_BIT( pairingOpt ) )
   \   000099   E5..         MOV     A,?V0
   \   00009B   5480         ANL     A,#0x80
   \   00009D   6005         JZ      ??gp_pairingSetProxyTblOptions_4
    357            {
    358              PROXY_TBL_SET_GPD_FIXED( &proxyOpt[1] );
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   D2E3         SETB    0xE0 /* A   */.3
   \   0000A2   8003         SJMP    ??gp_pairingSetProxyTblOptions_5
    359            }
    360            else
    361            {
    362              PROXY_TBL_CLR_GPD_FIXED( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_4:
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   C2E3         CLR     0xE0 /* A   */.3
   \                     ??gp_pairingSetProxyTblOptions_5:
   \   0000A7   F0           MOVX    @DPTR,A
    363            }
    364            
    365            if ( GP_IS_COMMUNICATION_MODE_FULL_UNICAST( pairingOpt ) )
   \   0000A8   E8           MOV     A,R0
   \   0000A9   7005         JNZ     ??gp_pairingSetProxyTblOptions_6
    366            {
    367              PROXY_TBL_SET_HAS_ALL_ROUTES( &proxyOpt[1] );
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   D2E4         SETB    0xE0 /* A   */.4
   \   0000AE   8003         SJMP    ??gp_pairingSetProxyTblOptions_7
    368            }
    369            else
    370            {
    371              PROXY_TBL_CLR_HAS_ALL_ROUTES( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_6:
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   C2E4         CLR     0xE0 /* A   */.4
   \                     ??gp_pairingSetProxyTblOptions_7:
   \   0000B3   F0           MOVX    @DPTR,A
    372            }
    373            if ( GP_ALIAS ( pairingOpt ) )
   \   0000B4   85....       MOV     ?V1,?V5
   \   0000B7   85....       MOV     ?V2,?V6
   \   0000BA   85....       MOV     ?V3,?V7
   \   0000BD   90....       MOV     DPTR,#__Constant_10000
   \   0000C0   78..         MOV     R0,#?V0
   \   0000C2   12....       LCALL   ?L_AND_X
   \   0000C5   E5..         MOV     A,?V0
   \   0000C7   45..         ORL     A,?V1
   \   0000C9   45..         ORL     A,?V2
   \   0000CB   45..         ORL     A,?V3
   \   0000CD   600A         JZ      ??gp_pairingSetProxyTblOptions_8
    374            {
    375              PROXY_TBL_SET_ASSIGNED_ALIAS( &proxyOpt[1] );
   \   0000CF   7401         MOV     A,#0x1
   \   0000D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   D2E5         SETB    0xE0 /* A   */.5
   \   0000D7   8008         SJMP    ??gp_pairingSetProxyTblOptions_9
    376            }
    377            else
    378            {
    379              PROXY_TBL_CLR_ASSIGNED_ALIAS( &proxyOpt[1]);
   \                     ??gp_pairingSetProxyTblOptions_8:
   \   0000D9   7401         MOV     A,#0x1
   \   0000DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   C2E5         CLR     0xE0 /* A   */.5
   \                     ??gp_pairingSetProxyTblOptions_9:
   \   0000E1   F0           MOVX    @DPTR,A
    380            }
    381            if ( GP_GET_SEC_LEVEL( pairingOpt ) > 1 )
   \   0000E2   90....       MOV     DPTR,#__Constant_2
   \   0000E5   7409         MOV     A,#0x9
   \   0000E7   78..         MOV     R0,#?V4
   \   0000E9   12....       LCALL   ?US_SHR
   \   0000EC   E5..         MOV     A,?V4
   \   0000EE   5403         ANL     A,#0x3
   \   0000F0   F5..         MOV     ?V0,A
   \   0000F2   75..00       MOV     ?V1,#0x0
   \   0000F5   E4           CLR     A
   \   0000F6   F5..         MOV     ?V2,A
   \   0000F8   F5..         MOV     ?V3,A
   \   0000FA   78..         MOV     R0,#?V0
   \   0000FC   12....       LCALL   ?UL_GE_X
   \   0000FF   7401         MOV     A,#0x1
   \   000101   5008         JNC     ??gp_pairingSetProxyTblOptions_10
    382            {
    383              PROXY_TBL_SET_SEC_USE( &proxyOpt[1] );
   \   000103   12....       LCALL   ?XSTACK_DISP0_8
   \   000106   E0           MOVX    A,@DPTR
   \   000107   D2E6         SETB    0xE0 /* A   */.6
   \   000109   8006         SJMP    ??gp_pairingSetProxyTblOptions_11
    384            }
    385            else
    386            {
    387              PROXY_TBL_CLR_SEC_USE( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_10:
   \   00010B   12....       LCALL   ?XSTACK_DISP0_8
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   C2E6         CLR     0xE0 /* A   */.6
   \                     ??gp_pairingSetProxyTblOptions_11:
   \   000111   F0           MOVX    @DPTR,A
    388            }
    389            PROXY_TBL_SET_OPT_EXT( &proxyOpt[1] );
    390            PROXY_TBL_CLR_OPT_EXT( &proxyOpt[1] );
   \   000112   E0           MOVX    A,@DPTR
   \   000113   C2E7         CLR     0xE0 /* A   */.7
   \   000115   12....       LCALL   ?Subroutine7 & 0xFFFF
    391            
    392            opt |= ( ( proxyOpt[0] ) & 0x00FF );
    393            opt |= ( ( ( proxyOpt[1] ) <<  8 ) & 0xFF00 );
    394              
    395            return opt;
   \                     ??CrossCallReturnLabel_15:
   \   000118   FA           MOV     R2,A
   \   000119   7401         MOV     A,#0x1
   \   00011B   12....       LCALL   ?XSTACK_DISP0_8
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   FB           MOV     R3,A
   \   000120   7402         MOV     A,#0x2
   \   000122   12....       LCALL   ?DEALLOC_XSTACK8
   \   000125                REQUIRE ?Subroutine0
   \   000125                ; // Fall through to label ?Subroutine0
    396          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    397          
    398          /*********************************************************************
    399           * @fn          gp_PairingUpdateProxyTlb
    400           *
    401           * @brief       General function fill the proxy table vector
    402           *
    403           * @param       
    404           *
    405           * @return      
    406           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    407          void gp_PairingUpdateProxyTlb( gpPairingCmd_t* payload )
   \                     gp_PairingUpdateProxyTlb:
    408          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 71
   \   000005   74B9         MOV     A,#-0x47
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    409            uint8  entryVector[PROXY_TBL_ENTRY_LEN] = {0};
   \   00000E   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2`
   \   000011   7407         MOV     A,#0x7
   \   000013   12....       LCALL   ?XSTACK_DISP102_8
   \   000016   7440         MOV     A,#0x40
   \   000018   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    410            uint8  entryLen = 0;
   \   00001B   85..82       MOV     DPL,?XSP + 0
   \   00001E   85..83       MOV     DPH,?XSP + 1
   \   000021   F0           MOVX    @DPTR,A
    411            uint8  addSink;
    412            uint16 entryOptions = 0;
   \   000022   7405         MOV     A,#0x5
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E4           CLR     A
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   F0           MOVX    @DPTR,A
    413            uint8  securityOpt = 0;
   \   00002B   7402         MOV     A,#0x2
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   E4           CLR     A
   \   000031   F0           MOVX    @DPTR,A
    414            uint8  searchCounter = 0x0A;
   \   000032   04           INC     A
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   740A         MOV     A,#0xa
   \   000038   F0           MOVX    @DPTR,A
    415            uint16 grpAlias = 0xFFFF;
   \   000039   7403         MOV     A,#0x3
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   74FF         MOV     A,#-0x1
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   F0           MOVX    @DPTR,A
    416            
    417            addSink = GP_ADD_SINK( payload->options );
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   78..         MOV     R0,#?V8
   \   000049   12....       LCALL   ?L_MOV_X
   \   00004C   85....       MOV     ?V0,?V8
   \   00004F   E5..         MOV     A,?V0
   \   000051   13           RRC     A
   \   000052   13           RRC     A
   \   000053   13           RRC     A
   \   000054   541F         ANL     A,#0x1f
   \   000056   5401         ANL     A,#0x1
   \   000058   F5..         MOV     ?V4,A
    418            
    419            entryOptions = gp_pairingSetProxyTblOptions( payload->options );
   \   00005A                ; Setup parameters for call to function gp_pairingSetProxyTblOptions
   \   00005A   AA..         MOV     R2,?V8
   \   00005C   AB..         MOV     R3,?V9
   \   00005E   AC..         MOV     R4,?V10
   \   000060   AD..         MOV     R5,?V11
   \   000062   12....       LCALL   `??gp_pairingSetProxyTblOptions::?relay`; Banked call to: gp_pairingSetProxyTblOptions
   \   000065   7405         MOV     A,#0x5
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   EA           MOV     A,R2
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   EB           MOV     A,R3
   \   00006E   12....       LCALL   ?Subroutine2 & 0xFFFF
    420            gp_PopulateProxyTblEntry( ( uint8* )&entryOptions, sizeof( entryOptions ), entryVector, &entryLen );
   \                     ??CrossCallReturnLabel_0:
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000074   7409         MOV     A,#0x9
   \   000076   12....       LCALL   ?XSTACK_DISP102_8
   \   000079   7902         MOV     R1,#0x2
   \   00007B   7407         MOV     A,#0x7
   \   00007D   12....       LCALL   ?XSTACK_DISP101_8
   \   000080   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000083   7402         MOV     A,#0x2
   \   000085   12....       LCALL   ?DEALLOC_XSTACK8
   \   000088   8E82         MOV     DPL,R6
   \   00008A   8F83         MOV     DPH,R7
   \   00008C   78..         MOV     R0,#?V0
   \   00008E   12....       LCALL   ?L_MOV_X
   \   000091   E5..         MOV     A,?V0
   \   000093   5407         ANL     A,#0x7
   \   000095   F8           MOV     R0,A
   \   000096   7018         JNZ     ??gp_PairingUpdateProxyTlb_0
    421              
    422            // Options bitfield
    423            // If Application Id bitfield is 0b000
    424            if( GP_IS_APPLICATION_ID_GPD( payload->options ) )
    425            {        
    426              // Populate GPD ID
    427              entryLen += sizeof( uint32 );
   \   000098   85..82       MOV     DPL,?XSP + 0
   \   00009B   85..83       MOV     DPH,?XSP + 1
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   2404         ADD     A,#0x4
   \   0000A1   12....       LCALL   ?Subroutine2 & 0xFFFF
    428              gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdId, sizeof( payload->gpdId ), entryVector, &entryLen );
    429            }
   \                     ??CrossCallReturnLabel_1:
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A7   7409         MOV     A,#0x9
   \   0000A9   12....       LCALL   ?XSTACK_DISP102_8
   \   0000AC   7904         MOV     R1,#0x4
   \   0000AE   8019         SJMP    ??gp_PairingUpdateProxyTlb_1
    430            // If Application Id bitfield is 0b010
    431            else if( GP_IS_APPLICATION_ID_IEEE( payload->options ) )
   \                     ??gp_PairingUpdateProxyTlb_0:
   \   0000B0   7402         MOV     A,#0x2
   \   0000B2   68           XRL     A,R0
   \   0000B3   7022         JNZ     ??gp_PairingUpdateProxyTlb_2
    432            {   
    433              gp_PopulateProxyTblEntry( payload->gpdIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
   \   0000B5                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000B5   A8..         MOV     R0,?XSP + 0
   \   0000B7   A9..         MOV     R1,?XSP + 1
   \   0000B9   88..         MOV     ?V0,R0
   \   0000BB   89..         MOV     ?V1,R1
   \   0000BD   78..         MOV     R0,#?V0
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C2   7409         MOV     A,#0x9
   \   0000C4   12....       LCALL   ?XSTACK_DISP102_8
   \   0000C7   7908         MOV     R1,#0x8
   \                     ??gp_PairingUpdateProxyTlb_1:
   \   0000C9   EE           MOV     A,R6
   \   0000CA   29           ADD     A,R1
   \   0000CB   FA           MOV     R2,A
   \   0000CC   E4           CLR     A
   \   0000CD   3F           ADDC    A,R7
   \   0000CE   FB           MOV     R3,A
   \   0000CF   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0000D2   7402         MOV     A,#0x2
   \   0000D4   12....       LCALL   ?DEALLOC_XSTACK8
    434            }
    435            
    436            gp_PopulateProxyTblEntry( ( uint8* )&payload->ep, sizeof( payload->ep ), entryVector, &entryLen );
   \                     ??gp_PairingUpdateProxyTlb_2:
   \   0000D7                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000D7   A8..         MOV     R0,?XSP + 0
   \   0000D9   A9..         MOV     R1,?XSP + 1
   \   0000DB   88..         MOV     ?V0,R0
   \   0000DD   89..         MOV     ?V1,R1
   \   0000DF   78..         MOV     R0,#?V0
   \   0000E1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E4   7409         MOV     A,#0x9
   \   0000E6   12....       LCALL   ?XSTACK_DISP102_8
   \   0000E9   7901         MOV     R1,#0x1
   \   0000EB   EE           MOV     A,R6
   \   0000EC   2410         ADD     A,#0x10
   \   0000EE   FA           MOV     R2,A
   \   0000EF   E4           CLR     A
   \   0000F0   3F           ADDC    A,R7
   \   0000F1   FB           MOV     R3,A
   \   0000F2   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0000F5   7402         MOV     A,#0x2
   \   0000F7   12....       LCALL   ?DEALLOC_XSTACK8
    437          
    438            gp_PopulateProxyTblEntry( ( uint8* )&payload->assignedAlias, sizeof( payload->assignedAlias ), entryVector, &entryLen );
   \   0000FA                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000FA   78..         MOV     R0,#?V0
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FF   7409         MOV     A,#0x9
   \   000101   12....       LCALL   ?XSTACK_DISP102_8
   \   000104   7902         MOV     R1,#0x2
   \   000106   EE           MOV     A,R6
   \   000107   2432         ADD     A,#0x32
   \   000109   FA           MOV     R2,A
   \   00010A   E4           CLR     A
   \   00010B   3F           ADDC    A,R7
   \   00010C   FB           MOV     R3,A
   \   00010D   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000110   7402         MOV     A,#0x2
   \   000112   12....       LCALL   ?DEALLOC_XSTACK8
    439          
    440            //Security options
    441            securityOpt |= GP_GET_SEC_LEVEL( payload->options );
    442            securityOpt |= GP_GET_SEC_KEY_TYPE (payload->options ) << GP_OPT_SEC_LEVEL_LEN;
   \   000115   8E82         MOV     DPL,R6
   \   000117   8F83         MOV     DPH,R7
   \   000119   78..         MOV     R0,#?V0
   \   00011B   12....       LCALL   ?L_MOV_X
   \   00011E   85....       MOV     ?V6,?V0
   \   000121   85....       MOV     ?V7,?V1
   \   000124   740B         MOV     A,#0xb
   \   000126   78..         MOV     R0,#?V6
   \   000128   12....       LCALL   ?US_SHR
   \   00012B   E5..         MOV     A,?V6
   \   00012D   5407         ANL     A,#0x7
   \   00012F   33           RLC     A
   \   000130   33           RLC     A
   \   000131   54FC         ANL     A,#0xfc
   \   000133   F9           MOV     R1,A
   \   000134   7409         MOV     A,#0x9
   \   000136   78..         MOV     R0,#?V0
   \   000138   12....       LCALL   ?US_SHR
   \   00013B   E5..         MOV     A,?V0
   \   00013D   5403         ANL     A,#0x3
   \   00013F   49           ORL     A,R1
   \   000140   F8           MOV     R0,A
   \   000141   7402         MOV     A,#0x2
   \   000143   12....       LCALL   ?XSTACK_DISP0_8
   \   000146   E0           MOVX    A,@DPTR
   \   000147   48           ORL     A,R0
   \   000148   F0           MOVX    @DPTR,A
    443            osal_memcpy( &entryVector[entryLen], &securityOpt, sizeof ( uint8 ) );
   \   000149                ; Setup parameters for call to function osal_memcpy
   \   000149   7402         MOV     A,#0x2
   \   00014B   12....       LCALL   ?XSTACK_DISP100_8
   \   00014E   88..         MOV     ?V0,R0
   \   000150   89..         MOV     ?V1,R1
   \   000152   75..00       MOV     ?V2,#0x0
   \   000155   78..         MOV     R0,#?V0
   \   000157   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00015A   7C01         MOV     R4,#0x1
   \   00015C   7D00         MOV     R5,#0x0
   \   00015E   7403         MOV     A,#0x3
   \   000160   12....       LCALL   ?XSTACK_DISP0_8
   \   000163   E0           MOVX    A,@DPTR
   \   000164   F8           MOV     R0,A
   \   000165   740A         MOV     A,#0xa
   \   000167   12....       LCALL   ?XSTACK_DISP0_8
   \   00016A   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00016D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000170   7403         MOV     A,#0x3
   \   000172   12....       LCALL   ?DEALLOC_XSTACK8
    444            entryLen += sizeof ( uint8 );
   \   000175   85..82       MOV     DPL,?XSP + 0
   \   000178   85..83       MOV     DPH,?XSP + 1
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   04           INC     A
   \   00017D   12....       LCALL   ?Subroutine2 & 0xFFFF
    445          
    446            gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdSecCounter, sizeof( payload->gpdSecCounter ), entryVector, &entryLen );
   \                     ??CrossCallReturnLabel_2:
   \   000180   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000183   7409         MOV     A,#0x9
   \   000185   12....       LCALL   ?XSTACK_DISP102_8
   \   000188   7904         MOV     R1,#0x4
   \   00018A   EE           MOV     A,R6
   \   00018B   241E         ADD     A,#0x1e
   \   00018D   FA           MOV     R2,A
   \   00018E   E4           CLR     A
   \   00018F   3F           ADDC    A,R7
   \   000190   FB           MOV     R3,A
   \   000191   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000194   7402         MOV     A,#0x2
   \   000196   12....       LCALL   ?DEALLOC_XSTACK8
    447            gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdKey, SEC_KEY_LEN, entryVector, &entryLen );
   \   000199                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000199   78..         MOV     R0,#?V0
   \   00019B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019E   7409         MOV     A,#0x9
   \   0001A0   12....       LCALL   ?XSTACK_DISP102_8
   \   0001A3   7910         MOV     R1,#0x10
   \   0001A5   EE           MOV     A,R6
   \   0001A6   2422         ADD     A,#0x22
   \   0001A8   FA           MOV     R2,A
   \   0001A9   E4           CLR     A
   \   0001AA   3F           ADDC    A,R7
   \   0001AB   FB           MOV     R3,A
   \   0001AC   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0001AF   7402         MOV     A,#0x2
   \   0001B1   12....       LCALL   ?DEALLOC_XSTACK8
    448            
    449            gp_PopulateProxyTblEntry( payload->sinkIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
   \   0001B4   EE           MOV     A,R6
   \   0001B5   2411         ADD     A,#0x11
   \   0001B7   F5..         MOV     ?V2,A
   \   0001B9   E4           CLR     A
   \   0001BA   3F           ADDC    A,R7
   \   0001BB   F5..         MOV     ?V3,A
   \   0001BD                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0001BD   78..         MOV     R0,#?V0
   \   0001BF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C2   7409         MOV     A,#0x9
   \   0001C4   12....       LCALL   ?XSTACK_DISP102_8
   \   0001C7   7908         MOV     R1,#0x8
   \   0001C9   AA..         MOV     R2,?V2
   \   0001CB   AB..         MOV     R3,?V3
   \   0001CD   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0001D0   7402         MOV     A,#0x2
   \   0001D2   12....       LCALL   ?DEALLOC_XSTACK8
    450            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkNwkAddr, sizeof( payload->sinkNwkAddr ), entryVector, &entryLen );
   \   0001D5   EE           MOV     A,R6
   \   0001D6   2419         ADD     A,#0x19
   \   0001D8   F5..         MOV     ?V0,A
   \   0001DA   E4           CLR     A
   \   0001DB   3F           ADDC    A,R7
   \   0001DC   F5..         MOV     ?V1,A
   \   0001DE                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0001DE   A8..         MOV     R0,?XSP + 0
   \   0001E0   A9..         MOV     R1,?XSP + 1
   \   0001E2   88..         MOV     ?V6,R0
   \   0001E4   89..         MOV     ?V7,R1
   \   0001E6   78..         MOV     R0,#?V6
   \   0001E8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001EB   7409         MOV     A,#0x9
   \   0001ED   12....       LCALL   ?XSTACK_DISP102_8
   \   0001F0   7902         MOV     R1,#0x2
   \   0001F2   AA..         MOV     R2,?V0
   \   0001F4   AB..         MOV     R3,?V1
   \   0001F6   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0001F9   7402         MOV     A,#0x2
   \   0001FB   12....       LCALL   ?DEALLOC_XSTACK8
    451            // to add the invalid entries
    452            osal_memset ( &payload->sinkIEEE, 0xFF, Z_EXTADDR_LEN );
   \   0001FE                ; Setup parameters for call to function osal_memset
   \   0001FE   7C08         MOV     R4,#0x8
   \   000200   7D00         MOV     R5,#0x0
   \   000202   79FF         MOV     R1,#-0x1
   \   000204   AA..         MOV     R2,?V2
   \   000206   AB..         MOV     R3,?V3
   \   000208   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    453            payload->sinkNwkAddr = 0xFFFF;
   \   00020B   85..82       MOV     DPL,?V0
   \   00020E   85..83       MOV     DPH,?V1
   \   000211   74FF         MOV     A,#-0x1
   \   000213   F0           MOVX    @DPTR,A
   \   000214   A3           INC     DPTR
   \   000215   F0           MOVX    @DPTR,A
    454            gp_PopulateProxyTblEntry( payload->sinkIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
   \   000216                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000216   78..         MOV     R0,#?V6
   \   000218   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00021B   7409         MOV     A,#0x9
   \   00021D   12....       LCALL   ?XSTACK_DISP102_8
   \   000220   7908         MOV     R1,#0x8
   \   000222   AA..         MOV     R2,?V2
   \   000224   AB..         MOV     R3,?V3
   \   000226   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000229   7402         MOV     A,#0x2
   \   00022B   12....       LCALL   ?DEALLOC_XSTACK8
    455            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkNwkAddr, sizeof( payload->sinkNwkAddr ), entryVector, &entryLen );
   \   00022E                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00022E   A8..         MOV     R0,?XSP + 0
   \   000230   A9..         MOV     R1,?XSP + 1
   \   000232   88..         MOV     ?V2,R0
   \   000234   89..         MOV     ?V3,R1
   \   000236   78..         MOV     R0,#?V2
   \   000238   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00023B   7409         MOV     A,#0x9
   \   00023D   12....       LCALL   ?XSTACK_DISP102_8
   \   000240   7902         MOV     R1,#0x2
   \   000242   AA..         MOV     R2,?V0
   \   000244   AB..         MOV     R3,?V1
   \   000246   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000249   7402         MOV     A,#0x2
   \   00024B   12....       LCALL   ?DEALLOC_XSTACK8
    456            
    457            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkGroupID, sizeof( payload->sinkGroupID ), entryVector, &entryLen );
   \   00024E   EE           MOV     A,R6
   \   00024F   241B         ADD     A,#0x1b
   \   000251   F5..         MOV     ?V0,A
   \   000253   E4           CLR     A
   \   000254   3F           ADDC    A,R7
   \   000255   F5..         MOV     ?V1,A
   \   000257                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000257   78..         MOV     R0,#?V2
   \   000259   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00025C   7409         MOV     A,#0x9
   \   00025E   12....       LCALL   ?XSTACK_DISP102_8
   \   000261   7902         MOV     R1,#0x2
   \   000263   AA..         MOV     R2,?V0
   \   000265   AB..         MOV     R3,?V1
   \   000267   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   00026A   7402         MOV     A,#0x2
   \   00026C   12....       LCALL   ?DEALLOC_XSTACK8
    458            // to add the invalid entries
    459            gp_PopulateProxyTblEntry( ( uint8* )&grpAlias, sizeof ( uint16 ), entryVector, &entryLen );
   \   00026F                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00026F   78..         MOV     R0,#?V2
   \   000271   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000274   7409         MOV     A,#0x9
   \   000276   12....       LCALL   ?XSTACK_DISP102_8
   \   000279   7902         MOV     R1,#0x2
   \   00027B   7405         MOV     A,#0x5
   \   00027D   12....       LCALL   ?XSTACK_DISP101_8
   \   000280   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000283   7402         MOV     A,#0x2
   \   000285   12....       LCALL   ?DEALLOC_XSTACK8
    460            payload->sinkGroupID = 0xFFFF;
   \   000288   85..82       MOV     DPL,?V0
   \   00028B   85..83       MOV     DPH,?V1
   \   00028E   74FF         MOV     A,#-0x1
   \   000290   F0           MOVX    @DPTR,A
   \   000291   A3           INC     DPTR
   \   000292   F0           MOVX    @DPTR,A
    461            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkGroupID, sizeof( payload->sinkGroupID ), entryVector, &entryLen );
   \   000293                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000293   78..         MOV     R0,#?V2
   \   000295   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000298   7409         MOV     A,#0x9
   \   00029A   12....       LCALL   ?XSTACK_DISP102_8
   \   00029D   7902         MOV     R1,#0x2
   \   00029F   AA..         MOV     R2,?V0
   \   0002A1   AB..         MOV     R3,?V1
   \   0002A3   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0002A6   7402         MOV     A,#0x2
   \   0002A8   12....       LCALL   ?DEALLOC_XSTACK8
    462            gp_PopulateProxyTblEntry( ( uint8* )&grpAlias, sizeof ( uint16 ), entryVector, &entryLen );
   \   0002AB                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0002AB   A8..         MOV     R0,?XSP + 0
   \   0002AD   A9..         MOV     R1,?XSP + 1
   \   0002AF   88..         MOV     ?V0,R0
   \   0002B1   89..         MOV     ?V1,R1
   \   0002B3   78..         MOV     R0,#?V0
   \   0002B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002B8   7409         MOV     A,#0x9
   \   0002BA   12....       LCALL   ?XSTACK_DISP102_8
   \   0002BD   7902         MOV     R1,#0x2
   \   0002BF   7405         MOV     A,#0x5
   \   0002C1   12....       LCALL   ?XSTACK_DISP101_8
   \   0002C4   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0002C7   7402         MOV     A,#0x2
   \   0002C9   12....       LCALL   ?DEALLOC_XSTACK8
    463          
    464            
    465            gp_PopulateProxyTblEntry( &payload->forwardingRadius, sizeof( payload->forwardingRadius ), entryVector, &entryLen );
   \   0002CC                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0002CC   78..         MOV     R0,#?V0
   \   0002CE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002D1   7409         MOV     A,#0x9
   \   0002D3   12....       LCALL   ?XSTACK_DISP102_8
   \   0002D6   7901         MOV     R1,#0x1
   \   0002D8   EE           MOV     A,R6
   \   0002D9   2434         ADD     A,#0x34
   \   0002DB   FA           MOV     R2,A
   \   0002DC   E4           CLR     A
   \   0002DD   3F           ADDC    A,R7
   \   0002DE   FB           MOV     R3,A
   \   0002DF   12....       LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0002E2   7402         MOV     A,#0x2
   \   0002E4   12....       LCALL   ?DEALLOC_XSTACK8
    466           
    467            if ( ( PROXY_TBL_GET_ENTRY_ACTIVE( entryVector[0] ) == 0 ) && ( PROXY_TBL_GET_ENTRY_VALID( entryVector[0] ) == 0) )
   \   0002E7   85..82       MOV     DPL,?XSP + 0
   \   0002EA   85..83       MOV     DPH,?XSP + 1
   \   0002ED   E0           MOVX    A,@DPTR
   \   0002EE   F8           MOV     R0,A
   \   0002EF   7407         MOV     A,#0x7
   \   0002F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F4   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0002F7   7401         MOV     A,#0x1
   \   0002F9   12....       LCALL   ?XSTACK_DISP100_8
   \   0002FC   88..         MOV     ?V0,R0
   \   0002FE   89..         MOV     ?V1,R1
   \   000300   75..00       MOV     ?V2,#0x0
   \   000303   E0           MOVX    A,@DPTR
   \   000304   5418         ANL     A,#0x18
   \   000306   6008         JZ      ??gp_PairingUpdateProxyTlb_3
    468            {
    469              osal_memcpy( &entryVector[entryLen], &searchCounter, sizeof ( uint8 ) );
   \   000308                ; Setup parameters for call to function osal_memcpy
    470            }
    471            else
    472            {
    473              searchCounter = 0xFF;
   \   000308   7401         MOV     A,#0x1
   \   00030A   12....       LCALL   ?XSTACK_DISP0_8
   \   00030D   74FF         MOV     A,#-0x1
   \   00030F   F0           MOVX    @DPTR,A
    474              osal_memcpy( &entryVector[entryLen], &searchCounter, sizeof ( uint8 ) );
   \   000310                ; Setup parameters for call to function osal_memcpy
   \                     ??gp_PairingUpdateProxyTlb_3:
   \   000310   78..         MOV     R0,#?V0
   \   000312   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000315   7C01         MOV     R4,#0x1
   \   000317   7D00         MOV     R5,#0x0
   \   000319   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00031C   7403         MOV     A,#0x3
   \   00031E   12....       LCALL   ?DEALLOC_XSTACK8
    475            }
    476            // Update the proxy table
    477            gp_UpdateProxyTlb( entryVector, addSink );
   \   000321                ; Setup parameters for call to function gp_UpdateProxyTlb
   \   000321   A9..         MOV     R1,?V4
   \   000323   7407         MOV     A,#0x7
   \   000325   12....       LCALL   ?XSTACK_DISP101_8
   \   000328   12....       LCALL   `??gp_UpdateProxyTlb::?relay`; Banked call to: gp_UpdateProxyTlb
    478          }
   \   00032B   7447         MOV     A,#0x47
   \   00032D                REQUIRE ?Subroutine1
   \   00032D                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F0C         MOV     R7,#0xc
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000001                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000001                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000001   A8..         MOV     R0,?XSP + 0
   \   000003   A9..         MOV     R1,?XSP + 1
   \   000005   88..         MOV     ?V0,R0
   \   000007   89..         MOV     ?V1,R1
   \   000009   78..         MOV     R0,#?V0
   \   00000B   22           RET
    479          
    480          /*********************************************************************
    481           * @fn          gp_UpdateProxyTlb
    482           *
    483           * @brief       To update the proxy table NV vectors
    484           *
    485           * @param       pNpEntryew - New entry array to be added
    486           *
    487           * @return
    488           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    489          uint8 gp_UpdateProxyTlb( uint8* pEntry, uint8 addSink )
   \                     gp_UpdateProxyTlb:
    490          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 256
   \   000005   758200       MOV     DPL,#0x0
   \   000008   7583FF       MOV     DPH,#-0x1
   \   00000B   12....       LCALL   ?ADD_XSTACK_DISP0_16
   \   00000E   89..         MOV     ?V7,R1
    491            uint8 i;
    492            uint8 newEntry[PROXY_TBL_ENTRY_LEN] = {0};
   \   000010   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_3`
   \   000013   7480         MOV     A,#-0x80
   \   000015   12....       LCALL   ?XSTACK_DISP102_8
   \   000018   7440         MOV     A,#0x40
   \   00001A   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    493            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = {0};
   \   00001D   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_4`
   \   000020   7440         MOV     A,#0x40
   \   000022   12....       LCALL   ?XSTACK_DISP102_8
   \   000025   7440         MOV     A,#0x40
   \   000027   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    494            uint16 proxyTableIndex;
    495            uint8 status;
    496            
    497            // Copy the new entry pointer to array
    498            osal_memcpy( &newEntry, pEntry, PROXY_TBL_ENTRY_LEN );
   \   00002A                ; Setup parameters for call to function osal_memcpy
   \   00002A   8A..         MOV     ?V0,R2
   \   00002C   8B..         MOV     ?V1,R3
   \   00002E   F5..         MOV     ?V2,A
   \   000030   78..         MOV     R0,#?V0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000035   7C40         MOV     R4,#0x40
   \   000037   7D00         MOV     R5,#0x0
   \   000039   7483         MOV     A,#-0x7d
   \   00003B   12....       LCALL   ?XSTACK_DISP101_8
   \   00003E   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000041   7403         MOV     A,#0x3
   \   000043   12....       LCALL   ?DEALLOC_XSTACK8
    499          
    500            for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   000046   75..00       MOV     ?V3,#0x0
   \   000049   7480         MOV     A,#-0x80
   \   00004B   12....       LCALL   ?XSTACK_DISP100_8
   \   00004E   88..         MOV     ?V0,R0
   \   000050   89..         MOV     ?V1,R1
    501            {
    502              proxyTableIndex = ZCD_NV_PROXY_TABLE_START + i;
   \                     ??gp_UpdateProxyTlb_0:
   \   000052   E5..         MOV     A,?V3
   \   000054   2410         ADD     A,#0x10
   \   000056   FE           MOV     R6,A
   \   000057   E4           CLR     A
   \   000058   3403         ADDC    A,#0x3
   \   00005A   FF           MOV     R7,A
    503              status = gp_getProxyTableByIndex( proxyTableIndex, currEntry );
   \   00005B                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   00005B   7440         MOV     A,#0x40
   \   00005D   12....       LCALL   ?XSTACK_DISP102_8
   \   000060   EE           MOV     A,R6
   \   000061   FA           MOV     R2,A
   \   000062   EF           MOV     A,R7
   \   000063   FB           MOV     R3,A
   \   000064   12....       LCALL   `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   000067   E9           MOV     A,R1
   \   000068   F8           MOV     R0,A
    504          
    505              if ( status == NV_OPER_FAILED )
   \   000069   740A         MOV     A,#0xa
   \   00006B   68           XRL     A,R0
   \   00006C   7005         JNZ     ??gp_UpdateProxyTlb_1
    506              {
    507                // FAIL
    508                return status;
   \   00006E   790A         MOV     R1,#0xa
   \   000070   02....       LJMP    ??gp_UpdateProxyTlb_2 & 0xFFFF
    509              }
    510              
    511              // if the entry is empty
    512              if ( ( status == NV_INVALID_DATA ) && ( addSink == TRUE ) )
   \                     ??gp_UpdateProxyTlb_1:
   \   000073   740D         MOV     A,#0xd
   \   000075   68           XRL     A,R0
   \   000076   7009         JNZ     ??gp_UpdateProxyTlb_3
   \   000078   7401         MOV     A,#0x1
   \   00007A   65..         XRL     A,?V7
   \   00007C   7003         JNZ     $+5
   \   00007E   02....       LJMP    ??gp_UpdateProxyTlb_4 & 0xFFFF
    513              {
    514                // Save new entry
    515                status = osal_nv_write( proxyTableIndex, 0,
    516                                     PROXY_TBL_ENTRY_LEN, newEntry );
    517                
    518                return status;
   \   000081                ; Setup parameters for call to function osal_nv_write
    519              }
    520              
    521              if ( pt_lookForGpd( proxyTableIndex, newEntry ) )
   \                     ??gp_UpdateProxyTlb_3:
   \   000081   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_12`
   \   000084   74C0         MOV     A,#-0x40
   \   000086   12....       LCALL   ?XSTACK_DISP102_8
   \   000089   7440         MOV     A,#0x40
   \   00008B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   00008E   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_13`
   \   000091   AC..         MOV     R4,?XSP + 0
   \   000093   1D           DEC     R5
   \   000094   7440         MOV     A,#0x40
   \   000096   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   000099                ; Setup parameters for call to function osal_memcpy
   \   000099   78..         MOV     R0,#?V0
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00009E   7C40         MOV     R4,#0x40
   \   0000A0   7D00         MOV     R5,#0x0
   \   0000A2   74C3         MOV     A,#-0x3d
   \   0000A4   12....       LCALL   ?XSTACK_DISP101_8
   \   0000A7   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000AA   7403         MOV     A,#0x3
   \   0000AC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AF                ; Setup parameters for call to function osal_nv_read
   \   0000AF   A8..         MOV     R0,?XSP + 0
   \   0000B1   A9..         MOV     R1,?XSP + 1
   \   0000B3   88..         MOV     ?V4,R0
   \   0000B5   89..         MOV     ?V5,R1
   \   0000B7   78..         MOV     R0,#?V4
   \   0000B9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BC   75..40       MOV     ?V4,#0x40
   \   0000BF   75..00       MOV     ?V5,#0x0
   \   0000C2   78..         MOV     R0,#?V4
   \   0000C4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C7   7C00         MOV     R4,#0x0
   \   0000C9   7D00         MOV     R5,#0x0
   \   0000CB   EE           MOV     A,R6
   \   0000CC   FA           MOV     R2,A
   \   0000CD   EF           MOV     A,R7
   \   0000CE   FB           MOV     R3,A
   \   0000CF   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000D2   7404         MOV     A,#0x4
   \   0000D4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D7   E9           MOV     A,R1
   \   0000D8   7047         JNZ     ??gp_UpdateProxyTlb_5
   \   0000DA   74C0         MOV     A,#-0x40
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   5407         ANL     A,#0x7
   \   0000E2   FA           MOV     R2,A
   \   0000E3   85..82       MOV     DPL,?XSP + 0
   \   0000E6   85..83       MOV     DPH,?XSP + 1
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   5407         ANL     A,#0x7
   \   0000EC   6A           XRL     A,R2
   \   0000ED   7001         JNZ     ??gp_UpdateProxyTlb_6
   \   0000EF   E4           CLR     A
   \                     ??gp_UpdateProxyTlb_6:
   \   0000F0   702F         JNZ     ??gp_UpdateProxyTlb_5
   \   0000F2                ; Setup parameters for call to function osal_memcmp
   \   0000F2   7402         MOV     A,#0x2
   \   0000F4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F7   A982         MOV     R1,DPL
   \   0000F9   AA83         MOV     R2,DPH
   \   0000FB   89..         MOV     ?V4,R1
   \   0000FD   8A..         MOV     ?V5,R2
   \   0000FF   75..00       MOV     ?V6,#0x0
   \   000102   78..         MOV     R0,#?V4
   \   000104   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000107   7C08         MOV     R4,#0x8
   \   000109   7D00         MOV     R5,#0x0
   \   00010B   74C5         MOV     A,#-0x3b
   \   00010D   12....       LCALL   ?XSTACK_DISP0_8
   \   000110   A982         MOV     R1,DPL
   \   000112   AA83         MOV     R2,DPH
   \   000114   7B00         MOV     R3,#0x0
   \   000116   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000119   7403         MOV     A,#0x3
   \   00011B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011E   E9           MOV     A,R1
   \   00011F   7018         JNZ     ??gp_UpdateProxyTlb_7
    522              {
    523                // Entry found
    524                break;
    525              }
    526              
    527              if ( i >= GPP_MAX_PROXY_TABLE_ENTRIES )
   \                     ??gp_UpdateProxyTlb_5:
   \   000121   E5..         MOV     A,?V3
   \   000123   C3           CLR     C
   \   000124   9405         SUBB    A,#0x5
   \   000126   4005         JC      ??gp_UpdateProxyTlb_8
    528              {
    529                // No space for new entries
    530                return FAILURE;
   \   000128   7901         MOV     R1,#0x1
   \   00012A   02....       LJMP    ??gp_UpdateProxyTlb_2 & 0xFFFF
    531              }
    532            }
   \                     ??gp_UpdateProxyTlb_8:
   \   00012D   05..         INC     ?V3
   \   00012F   E5..         MOV     A,?V3
   \   000131   C3           CLR     C
   \   000132   9406         SUBB    A,#0x6
   \   000134   5003         JNC     $+5
   \   000136   02....       LJMP    ??gp_UpdateProxyTlb_0 & 0xFFFF
    533          
    534            if ( PROXY_TBL_GET_LIGHTWIGHT_UNICAST( newEntry[PROXY_TBL_ENTRY_OPT] ) )
   \                     ??gp_UpdateProxyTlb_7:
   \   000139   7480         MOV     A,#-0x80
   \   00013B   12....       LCALL   ?XSTACK_DISP0_8
   \   00013E   E0           MOVX    A,@DPTR
   \   00013F   A2E6         MOV     C,0xE0 /* A   */.6
   \   000141   4003         JC      $+5
   \   000143   02....       LJMP    ??gp_UpdateProxyTlb_9 & 0xFFFF
    535            {
    536              if ( ( !pt_updateLightweightUnicastSink( newEntry, currEntry, addSink ) ) )
   \   000146                ; Setup parameters for call to function pt_updateLightweightUnicastSink
   \   000146   A9..         MOV     R1,?V7
   \   000148   7440         MOV     A,#0x40
   \   00014A   12....       LCALL   ?XSTACK_DISP102_8
   \   00014D   7480         MOV     A,#-0x80
   \   00014F   12....       LCALL   ?XSTACK_DISP101_8
   \   000152   12....       LCALL   `??pt_updateLightweightUnicastSink::?relay`; Banked call to: pt_updateLightweightUnicastSink
   \   000155   E9           MOV     A,R1
   \   000156   7003         JNZ     $+5
   \   000158   02....       LJMP    ??gp_UpdateProxyTlb_10 & 0xFFFF
    537              {
    538                // The entry is full
    539                return NV_BAD_ITEM_LEN;
    540              }
    541            }
    542            else if ( PROXY_TBL_GET_CGROUP( newEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
    543            {
    544              if ( ( !pt_addSinkGroup( newEntry, currEntry ) ) )
    545              {
    546                // The entry is full
    547                return NV_BAD_ITEM_LEN;
    548              }
    549            }
    550          
    551            if ( pt_updateAlias( newEntry ) )
   \                     ??gp_UpdateProxyTlb_11:
   \   00015B   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_5`
   \   00015E   AC..         MOV     R4,?XSP + 0
   \   000160   AD..         MOV     R5,?XSP + 1
   \   000162   7440         MOV     A,#0x40
   \   000164   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   000167                ; Setup parameters for call to function osal_memcpy
   \   000167   78..         MOV     R0,#?V0
   \   000169   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00016C   7C40         MOV     R4,#0x40
   \   00016E   7D00         MOV     R5,#0x0
   \   000170   7403         MOV     A,#0x3
   \   000172   12....       LCALL   ?XSTACK_DISP101_8
   \   000175   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000178   7403         MOV     A,#0x3
   \   00017A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017D   7401         MOV     A,#0x1
   \   00017F   12....       LCALL   ?XSTACK_DISP0_8
   \   000182   E0           MOVX    A,@DPTR
   \   000183   A2E5         MOV     C,0xE0 /* A   */.5
   \   000185   502A         JNC     ??gp_UpdateProxyTlb_12
    552            {
    553              osal_memcpy( &currEntry[PROXY_TBL_ENTRY_ALIAS], &newEntry[PROXY_TBL_ENTRY_ALIAS], sizeof ( uint16 ) );
   \   000187                ; Setup parameters for call to function osal_memcpy
   \   000187   748B         MOV     A,#-0x75
   \   000189   12....       LCALL   ?XSTACK_DISP0_8
   \   00018C   A982         MOV     R1,DPL
   \   00018E   AA83         MOV     R2,DPH
   \   000190   89..         MOV     ?V4,R1
   \   000192   8A..         MOV     ?V5,R2
   \   000194   75..00       MOV     ?V6,#0x0
   \   000197   78..         MOV     R0,#?V4
   \   000199   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00019C   7C02         MOV     R4,#0x2
   \   00019E   7D00         MOV     R5,#0x0
   \   0001A0   744E         MOV     A,#0x4e
   \   0001A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A5   AA82         MOV     R2,DPL
   \   0001A7   AB83         MOV     R3,DPH
   \   0001A9   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001AC   7403         MOV     A,#0x3
   \   0001AE   12....       LCALL   ?DEALLOC_XSTACK8
    554            }
    555              
    556            if ( pt_updateSecurity( newEntry ) )
   \                     ??gp_UpdateProxyTlb_12:
   \   0001B1   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_6`
   \   0001B4   AC..         MOV     R4,?XSP + 0
   \   0001B6   AD..         MOV     R5,?XSP + 1
   \   0001B8   7440         MOV     A,#0x40
   \   0001BA   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   0001BD                ; Setup parameters for call to function osal_memcpy
   \   0001BD   78..         MOV     R0,#?V0
   \   0001BF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001C2   7C40         MOV     R4,#0x40
   \   0001C4   7D00         MOV     R5,#0x0
   \   0001C6   7403         MOV     A,#0x3
   \   0001C8   12....       LCALL   ?XSTACK_DISP101_8
   \   0001CB   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001CE   7403         MOV     A,#0x3
   \   0001D0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D3   7401         MOV     A,#0x1
   \   0001D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D8   E0           MOVX    A,@DPTR
   \   0001D9   A2E6         MOV     C,0xE0 /* A   */.6
   \   0001DB   505A         JNC     ??gp_UpdateProxyTlb_13
    557            {
    558              PROXY_TBL_SET_SEC_USE( &currEntry[PROXY_TBL_ENTRY_OPT + 1] );
   \   0001DD   7441         MOV     A,#0x41
   \   0001DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E2   E0           MOVX    A,@DPTR
   \   0001E3   D2E6         SETB    0xE0 /* A   */.6
   \   0001E5   F0           MOVX    @DPTR,A
    559              osal_memcpy( &currEntry[PROXY_TBL_ENTRY_SEC_OPT], &newEntry[PROXY_TBL_ENTRY_SEC_OPT], sizeof ( uint8 ) );
   \   0001E6                ; Setup parameters for call to function osal_memcpy
   \   0001E6   748D         MOV     A,#-0x73
   \   0001E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EB   A982         MOV     R1,DPL
   \   0001ED   AA83         MOV     R2,DPH
   \   0001EF   89..         MOV     ?V4,R1
   \   0001F1   8A..         MOV     ?V5,R2
   \   0001F3   75..00       MOV     ?V6,#0x0
   \   0001F6   78..         MOV     R0,#?V4
   \   0001F8   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001FB   7C01         MOV     R4,#0x1
   \   0001FD   7D00         MOV     R5,#0x0
   \   0001FF   7450         MOV     A,#0x50
   \   000201   12....       LCALL   ?XSTACK_DISP0_8
   \   000204   AA82         MOV     R2,DPL
   \   000206   AB83         MOV     R3,DPH
   \   000208   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00020B   7403         MOV     A,#0x3
   \   00020D   12....       LCALL   ?DEALLOC_XSTACK8
    560              osal_memcpy( &currEntry[PROXY_TBL_ENTRY_GPD_KEY], &newEntry[PROXY_TBL_ENTRY_GPD_KEY], SEC_KEY_LEN );
   \   000210                ; Setup parameters for call to function osal_memcpy
   \   000210   7492         MOV     A,#-0x6e
   \   000212   12....       LCALL   ?XSTACK_DISP0_8
   \   000215   A982         MOV     R1,DPL
   \   000217   AA83         MOV     R2,DPH
   \   000219   89..         MOV     ?V4,R1
   \   00021B   8A..         MOV     ?V5,R2
   \   00021D   78..         MOV     R0,#?V4
   \   00021F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000222   7C10         MOV     R4,#0x10
   \   000224   7D00         MOV     R5,#0x0
   \   000226   7455         MOV     A,#0x55
   \   000228   12....       LCALL   ?XSTACK_DISP0_8
   \   00022B   AA82         MOV     R2,DPL
   \   00022D   AB83         MOV     R3,DPH
   \   00022F   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000232   7403         MOV     A,#0x3
   \   000234   12....       LCALL   ?DEALLOC_XSTACK8
    561            }
    562                   
    563            if ( pt_updateSecFrameCounter( newEntry ) )
   \                     ??gp_UpdateProxyTlb_13:
   \   000237   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_7`
   \   00023A   AC..         MOV     R4,?XSP + 0
   \   00023C   AD..         MOV     R5,?XSP + 1
   \   00023E   7440         MOV     A,#0x40
   \   000240   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   000243                ; Setup parameters for call to function osal_memcpy
   \   000243   78..         MOV     R0,#?V0
   \   000245   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000248   7C40         MOV     R4,#0x40
   \   00024A   7D00         MOV     R5,#0x0
   \   00024C   7403         MOV     A,#0x3
   \   00024E   12....       LCALL   ?XSTACK_DISP101_8
   \   000251   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000254   7403         MOV     A,#0x3
   \   000256   12....       LCALL   ?DEALLOC_XSTACK8
   \   000259   85..82       MOV     DPL,?XSP + 0
   \   00025C   85..83       MOV     DPH,?XSP + 1
   \   00025F   E0           MOVX    A,@DPTR
   \   000260   A2E5         MOV     C,0xE0 /* A   */.5
   \   000262   5009         JNC     ??gp_UpdateProxyTlb_14
    564            {
    565              PROXY_TBL_SET_SEC_CAP( &currEntry[PROXY_TBL_ENTRY_SEC_FRAME] );
   \   000264   744E         MOV     A,#0x4e
   \   000266   12....       LCALL   ?XSTACK_DISP0_8
   \   000269   E0           MOVX    A,@DPTR
   \   00026A   D2E5         SETB    0xE0 /* A   */.5
   \   00026C   F0           MOVX    @DPTR,A
    566            }
    567            
    568            osal_memcpy( &currEntry[PROXY_TBL_ENTRY_SEC_FRAME], &newEntry[PROXY_TBL_ENTRY_SEC_FRAME], sizeof ( uint32 ) );
   \                     ??gp_UpdateProxyTlb_14:
   \   00026D                ; Setup parameters for call to function osal_memcpy
   \   00026D   748E         MOV     A,#-0x72
   \   00026F   12....       LCALL   ?XSTACK_DISP0_8
   \   000272   A982         MOV     R1,DPL
   \   000274   AA83         MOV     R2,DPH
   \   000276   89..         MOV     ?V0,R1
   \   000278   8A..         MOV     ?V1,R2
   \   00027A   78..         MOV     R0,#?V0
   \   00027C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00027F   7C04         MOV     R4,#0x4
   \   000281   7D00         MOV     R5,#0x0
   \   000283   7451         MOV     A,#0x51
   \   000285   12....       LCALL   ?XSTACK_DISP0_8
   \   000288   AA82         MOV     R2,DPL
   \   00028A   AB83         MOV     R3,DPH
   \   00028C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00028F   7403         MOV     A,#0x3
   \   000291   12....       LCALL   ?DEALLOC_XSTACK8
    569          
    570            if ( addSink == TRUE )
   \   000294   7401         MOV     A,#0x1
   \   000296   65..         XRL     A,?V7
   \   000298   7010         JNZ     ??gp_UpdateProxyTlb_15
    571            {
    572              currEntry[PROXY_TBL_ENTRY_GRP_RAD] = newEntry[PROXY_TBL_ENTRY_GRP_RAD];
   \   00029A   74BE         MOV     A,#-0x42
   \   00029C   12....       LCALL   ?XSTACK_DISP0_8
   \   00029F   E0           MOVX    A,@DPTR
   \   0002A0   C0E0         PUSH    A
   \   0002A2   747E         MOV     A,#0x7e
   \   0002A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A7   D0E0         POP     A
   \   0002A9   F0           MOVX    @DPTR,A
    573            }
    574              
    575            currEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER] = newEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER];
   \                     ??gp_UpdateProxyTlb_15:
   \   0002AA   74BF         MOV     A,#-0x41
   \   0002AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AF   E0           MOVX    A,@DPTR
   \   0002B0   C0E0         PUSH    A
   \   0002B2   747F         MOV     A,#0x7f
   \   0002B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B7   D0E0         POP     A
   \   0002B9   F0           MOVX    @DPTR,A
    576             
    577            status = osal_nv_write( proxyTableIndex, 0,
    578                               PROXY_TBL_ENTRY_LEN, currEntry );
    579            return status;
   \   0002BA                ; Setup parameters for call to function osal_nv_write
   \   0002BA   7440         MOV     A,#0x40
   \   0002BC   12....       LCALL   ?XSTACK_DISP100_8
   \   0002BF   88..         MOV     ?V0,R0
   \   0002C1   89..         MOV     ?V1,R1
   \                     ??gp_UpdateProxyTlb_4:
   \   0002C3   78..         MOV     R0,#?V0
   \   0002C5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002C8   75..40       MOV     ?V0,#0x40
   \   0002CB   75..00       MOV     ?V1,#0x0
   \   0002CE   78..         MOV     R0,#?V0
   \   0002D0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002D3   7C00         MOV     R4,#0x0
   \   0002D5   7D00         MOV     R5,#0x0
   \   0002D7   EE           MOV     A,R6
   \   0002D8   FA           MOV     R2,A
   \   0002D9   EF           MOV     A,R7
   \   0002DA   FB           MOV     R3,A
   \   0002DB   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0002DE   7404         MOV     A,#0x4
   \   0002E0   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??gp_UpdateProxyTlb_2:
   \   0002E3   758200       MOV     DPL,#0x0
   \   0002E6   758301       MOV     DPH,#0x1
   \   0002E9   12....       LCALL   ?ADD_XSTACK_DISP0_16
   \   0002EC   02....       LJMP    ?Subroutine0 & 0xFFFF
   \                     ??gp_UpdateProxyTlb_9:
   \   0002EF   7481         MOV     A,#-0x7f
   \   0002F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F4   E0           MOVX    A,@DPTR
   \   0002F5   A2E0         MOV     C,0xE0 /* A   */.0
   \   0002F7   4003         JC      $+5
   \   0002F9   02....       LJMP    ??gp_UpdateProxyTlb_11 & 0xFFFF
   \   0002FC                ; Setup parameters for call to function pt_addSinkGroup
   \   0002FC   7440         MOV     A,#0x40
   \   0002FE   12....       LCALL   ?XSTACK_DISP102_8
   \   000301   7480         MOV     A,#-0x80
   \   000303   12....       LCALL   ?XSTACK_DISP101_8
   \   000306   12....       LCALL   `??pt_addSinkGroup::?relay`; Banked call to: pt_addSinkGroup
   \   000309   E9           MOV     A,R1
   \   00030A   6003         JZ      $+5
   \   00030C   02....       LJMP    ??gp_UpdateProxyTlb_11 & 0xFFFF
   \                     ??gp_UpdateProxyTlb_10:
   \   00030F   790C         MOV     R1,#0xc
   \   000311   80D0         SJMP    ??gp_UpdateProxyTlb_2
    580          }
    581          
    582          /*********************************************************************
    583           * @fn          gp_CheckAnnouncedDevice
    584           *
    585           * @brief       General function to check if it has the announced device 
    586           *              listed in the SinkAddressList and look for address conflict
    587           *              resolution.
    588           *
    589           * @param       
    590           *
    591           * @return      
    592           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    593          uint8 gp_CheckAnnouncedDevice ( uint8 *sinkIEEE, uint16 sinkNwkAddr )
   \                     gp_CheckAnnouncedDevice:
    594          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 66
   \   000005   74BE         MOV     A,#-0x42
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EC           MOV     A,R4
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   ED           MOV     A,R5
   \   000014   F0           MOVX    @DPTR,A
    595            uint8 i;
    596            uint8 status;
    597            uint8 annceDelay;
    598            uint8 ProxyTableEntry[PROXY_TBL_ENTRY_LEN];
    599          
    600            if( sinkIEEE == NULL )
   \   000015   EA           MOV     A,R2
   \   000016   4B           ORL     A,R3
   \   000017   7005         JNZ     ??gp_CheckAnnouncedDevice_0
    601            {
    602              return ZInvalidParameter;
   \   000019   7902         MOV     R1,#0x2
   \   00001B   02....       LJMP    ??gp_CheckAnnouncedDevice_1 & 0xFFFF
    603            }     
    604          
    605            for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \                     ??gp_CheckAnnouncedDevice_0:
   \   00001E   7E00         MOV     R6,#0x0
   \   000020   8A..         MOV     ?V0,R2
   \   000022   8B..         MOV     ?V1,R3
   \   000024   8E..         MOV     ?V2,R6
   \   000026   A8..         MOV     R0,?XSP + 0
   \   000028   A9..         MOV     R1,?XSP + 1
   \   00002A   88..         MOV     ?V4,R0
   \   00002C   89..         MOV     ?V5,R1
   \   00002E   8E..         MOV     ?V6,R6
    606            {
    607              status = gp_getProxyTableByIndex( ( ZCD_NV_PROXY_TABLE_START + i ), ProxyTableEntry );
   \                     ??gp_CheckAnnouncedDevice_2:
   \   000030                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   000030   7402         MOV     A,#0x2
   \   000032   12....       LCALL   ?XSTACK_DISP102_8
   \   000035   EE           MOV     A,R6
   \   000036   2410         ADD     A,#0x10
   \   000038   FA           MOV     R2,A
   \   000039   E4           CLR     A
   \   00003A   3403         ADDC    A,#0x3
   \   00003C   FB           MOV     R3,A
   \   00003D   12....       LCALL   `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   000040   E9           MOV     A,R1
   \   000041   F8           MOV     R0,A
    608          
    609              if ( status == NV_OPER_FAILED )
   \   000042   740A         MOV     A,#0xa
   \   000044   68           XRL     A,R0
   \   000045   7005         JNZ     ??gp_CheckAnnouncedDevice_3
    610              {
    611                // FAIL
    612          
    613                return ZFailure;
   \   000047   7901         MOV     R1,#0x1
   \   000049   02....       LJMP    ??gp_CheckAnnouncedDevice_1 & 0xFFFF
    614              }
    615              
    616              // if the entry is empty
    617              if ( status == NV_INVALID_DATA )
   \                     ??gp_CheckAnnouncedDevice_3:
   \   00004C   740D         MOV     A,#0xd
   \   00004E   68           XRL     A,R0
   \   00004F   7003         JNZ     $+5
   \   000051   02....       LJMP    ??gp_CheckAnnouncedDevice_4 & 0xFFFF
    618              {
    619                continue;
    620              }
    621              
    622              // Compare for nwk alias address conflict
    623              if ( osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_ALIAS], sizeof( uint16 ) ) )
   \   000054                ; Setup parameters for call to function osal_memcmp
   \   000054   740D         MOV     A,#0xd
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   A982         MOV     R1,DPL
   \   00005B   AA83         MOV     R2,DPH
   \   00005D   89..         MOV     ?V8,R1
   \   00005F   8A..         MOV     ?V9,R2
   \   000061   75..00       MOV     ?V10,#0x0
   \   000064   78..         MOV     R0,#?V8
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000069   7C02         MOV     R4,#0x2
   \   00006B   7D00         MOV     R5,#0x0
   \   00006D   A9..         MOV     R1,?V4
   \   00006F   AA..         MOV     R2,?V5
   \   000071   AB..         MOV     R3,?V6
   \   000073   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000076   7403         MOV     A,#0x3
   \   000078   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007B   E9           MOV     A,R1
   \   00007C   6077         JZ      ??gp_CheckAnnouncedDevice_5
    624              {
    625                // Do address conflict resolution
    626                NLME_SendNetworkStatus( NWK_BROADCAST_SHORTADDR_DEVRXON,
    627                                   sinkNwkAddr, NWKSTAT_ADDRESS_CONFLICT, TRUE );
   \   00007E                ; Setup parameters for call to function NLME_SendNetworkStatus
   \   00007E   75..01       MOV     ?V3,#0x1
   \   000081   78..         MOV     R0,#?V3
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000086   790D         MOV     R1,#0xd
   \   000088   7401         MOV     A,#0x1
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   FC           MOV     R4,A
   \   00008F   A3           INC     DPTR
   \   000090   E0           MOVX    A,@DPTR
   \   000091   FD           MOV     R5,A
   \   000092   7AFD         MOV     R2,#-0x3
   \   000094   7BFF         MOV     R3,#-0x1
   \   000096   12....       LCALL   `??NLME_SendNetworkStatus::?relay`; Banked call to: NLME_SendNetworkStatus
   \   000099   7401         MOV     A,#0x1
   \   00009B   12....       LCALL   ?DEALLOC_XSTACK8
    628                
    629                aliasConflictAnnce.nwkAddr = sinkNwkAddr;
   \   00009E   85..82       MOV     DPL,?XSP + 0
   \   0000A1   85..83       MOV     DPH,?XSP + 1
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F8           MOV     R0,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F9           MOV     R1,A
   \   0000A9   90....       MOV     DPTR,#aliasConflictAnnce
   \   0000AC   E8           MOV     A,R0
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   E9           MOV     A,R1
   \   0000B0   F0           MOVX    @DPTR,A
    630                osal_memset( aliasConflictAnnce.extAddr, 0xFF, Z_EXTADDR_LEN );
   \   0000B1                ; Setup parameters for call to function osal_memset
   \   0000B1   7C08         MOV     R4,#0x8
   \   0000B3   7D00         MOV     R5,#0x0
   \   0000B5   79FF         MOV     R1,#-0x1
   \   0000B7   7A..         MOV     R2,#(aliasConflictAnnce + 2) & 0xff
   \   0000B9   7B..         MOV     R3,#((aliasConflictAnnce + 2) >> 8) & 0xff
   \   0000BB   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    631                aliasConflictAnnce.capabilities = 0;
   \   0000BE   90....       MOV     DPTR,#aliasConflictAnnce + 10
   \   0000C1   E4           CLR     A
   \   0000C2   F0           MOVX    @DPTR,A
    632                
    633                annceDelay = ( osal_rand()/650 ) + 5; // ( 65535/650 = 100 ) + 5 
   \   0000C3                ; Setup parameters for call to function osal_rand
   \   0000C3   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   0000C6   8A..         MOV     ?V8,R2
   \   0000C8   8B..         MOV     ?V9,R3
   \   0000CA   A8..         MOV     R0,?V8
   \   0000CC   A9..         MOV     R1,?V9
    634                // where:
    635                // 100 is Dmax
    636                // 5   is Dmin
    637                osal_start_timerEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT, annceDelay );
   \   0000CE                ; Setup parameters for call to function osal_start_timerEx
   \   0000CE   7A8A         MOV     R2,#-0x76
   \   0000D0   7B02         MOV     R3,#0x2
   \   0000D2   12....       LCALL   ?US_DIV_MOD
   \   0000D5   E8           MOV     A,R0
   \   0000D6   2405         ADD     A,#0x5
   \   0000D8   F5..         MOV     ?V8,A
   \   0000DA   E4           CLR     A
   \   0000DB   F5..         MOV     ?V9,A
   \   0000DD   F5..         MOV     ?V11,A
   \   0000DF   78..         MOV     R0,#?V8
   \   0000E1   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000E4   7A10         MOV     R2,#0x10
   \   0000E6   7B00         MOV     R3,#0x0
   \   0000E8   90....       MOV     DPTR,#gp_TaskID
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   F9           MOV     R1,A
   \   0000ED   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000F0   7404         MOV     A,#0x4
   \   0000F2   12....       LCALL   ?DEALLOC_XSTACK8
    638              }
    639          
    640              //Check if one of the Sink IEEE is the same
    641              if ( osal_memcmp( sinkIEEE, &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], Z_EXTADDR_LEN ) )
   \                     ??gp_CheckAnnouncedDevice_5:
   \   0000F5                ; Setup parameters for call to function osal_memcmp
   \   0000F5   7424         MOV     A,#0x24
   \   0000F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FA   A982         MOV     R1,DPL
   \   0000FC   AA83         MOV     R2,DPH
   \   0000FE   89..         MOV     ?V8,R1
   \   000100   8A..         MOV     ?V9,R2
   \   000102   78..         MOV     R0,#?V8
   \   000104   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000107   7C08         MOV     R4,#0x8
   \   000109   7D00         MOV     R5,#0x0
   \   00010B   A9..         MOV     R1,?V0
   \   00010D   AA..         MOV     R2,?V1
   \   00010F   AB..         MOV     R3,?V2
   \   000111   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000114   7403         MOV     A,#0x3
   \   000116   12....       LCALL   ?DEALLOC_XSTACK8
   \   000119   E9           MOV     A,R1
   \   00011A   6034         JZ      ??gp_CheckAnnouncedDevice_6
    642              {
    643                // If Nwk address is different, then update the new address
    644                if ( !osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR + Z_EXTADDR_LEN], sizeof( uint16 ) ) )
   \   00011C                ; Setup parameters for call to function osal_memcmp
   \   00011C   742C         MOV     A,#0x2c
   \   00011E   12....       LCALL   ?XSTACK_DISP0_8
   \   000121   A982         MOV     R1,DPL
   \   000123   AA83         MOV     R2,DPH
   \   000125   89..         MOV     ?V8,R1
   \   000127   8A..         MOV     ?V9,R2
   \   000129   78..         MOV     R0,#?V8
   \   00012B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00012E   7C02         MOV     R4,#0x2
   \   000130   7D00         MOV     R5,#0x0
   \   000132   A9..         MOV     R1,?V4
   \   000134   AA..         MOV     R2,?V5
   \   000136   AB..         MOV     R3,?V6
   \   000138   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00013B   7403         MOV     A,#0x3
   \   00013D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000140   E9           MOV     A,R1
   \   000141   7075         JNZ     ??gp_CheckAnnouncedDevice_4
    645                {
    646                  osal_memcpy( &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR + Z_EXTADDR_LEN], &sinkNwkAddr, sizeof( uint16 ) );
   \   000143                ; Setup parameters for call to function osal_memcpy
   \   000143   78..         MOV     R0,#?V4
   \   000145   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000148   7C02         MOV     R4,#0x2
   \   00014A   7D00         MOV     R5,#0x0
   \   00014C   742F         MOV     A,#0x2f
   \   00014E   8059         SJMP    ??gp_CheckAnnouncedDevice_7
    647                }
    648              }
    649              else if ( osal_memcmp( sinkIEEE, &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], Z_EXTADDR_LEN ) )
   \                     ??gp_CheckAnnouncedDevice_6:
   \   000150                ; Setup parameters for call to function osal_memcmp
   \   000150   742E         MOV     A,#0x2e
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   A982         MOV     R1,DPL
   \   000157   AA83         MOV     R2,DPH
   \   000159   89..         MOV     ?V8,R1
   \   00015B   8A..         MOV     ?V9,R2
   \   00015D   78..         MOV     R0,#?V8
   \   00015F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000162   7C08         MOV     R4,#0x8
   \   000164   7D00         MOV     R5,#0x0
   \   000166   A9..         MOV     R1,?V0
   \   000168   AA..         MOV     R2,?V1
   \   00016A   AB..         MOV     R3,?V2
   \   00016C   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00016F   7403         MOV     A,#0x3
   \   000171   12....       LCALL   ?DEALLOC_XSTACK8
   \   000174   E9           MOV     A,R1
   \   000175   6041         JZ      ??gp_CheckAnnouncedDevice_4
    650              {
    651                // If Nwk address is different, then update the new address
    652                if ( !osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR + Z_EXTADDR_LEN], sizeof( uint16 ) ) )
   \   000177                ; Setup parameters for call to function osal_memcmp
   \   000177   7436         MOV     A,#0x36
   \   000179   12....       LCALL   ?XSTACK_DISP0_8
   \   00017C   A982         MOV     R1,DPL
   \   00017E   AA83         MOV     R2,DPH
   \   000180   89..         MOV     ?V8,R1
   \   000182   8A..         MOV     ?V9,R2
   \   000184   78..         MOV     R0,#?V8
   \   000186   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000189   7C02         MOV     R4,#0x2
   \   00018B   7D00         MOV     R5,#0x0
   \   00018D   A9..         MOV     R1,?V4
   \   00018F   AA..         MOV     R2,?V5
   \   000191   AB..         MOV     R3,?V6
   \   000193   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000196   7403         MOV     A,#0x3
   \   000198   12....       LCALL   ?DEALLOC_XSTACK8
   \   00019B   E9           MOV     A,R1
   \   00019C   701A         JNZ     ??gp_CheckAnnouncedDevice_4
    653                {
    654                  osal_memcpy( &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR + Z_EXTADDR_LEN], &sinkNwkAddr, sizeof( uint16 ) );
   \   00019E                ; Setup parameters for call to function osal_memcpy
   \   00019E   78..         MOV     R0,#?V4
   \   0001A0   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001A3   7C02         MOV     R4,#0x2
   \   0001A5   7D00         MOV     R5,#0x0
   \   0001A7   7439         MOV     A,#0x39
   \                     ??gp_CheckAnnouncedDevice_7:
   \   0001A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AC   AA82         MOV     R2,DPL
   \   0001AE   AB83         MOV     R3,DPH
   \   0001B0   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001B3   7403         MOV     A,#0x3
   \   0001B5   12....       LCALL   ?DEALLOC_XSTACK8
    655                }
    656              }
    657            }
   \                     ??gp_CheckAnnouncedDevice_4:
   \   0001B8   0E           INC     R6
   \   0001B9   EE           MOV     A,R6
   \   0001BA   C3           CLR     C
   \   0001BB   9406         SUBB    A,#0x6
   \   0001BD   5003         JNC     $+5
   \   0001BF   02....       LJMP    ??gp_CheckAnnouncedDevice_2 & 0xFFFF
    658              
    659            return ZSuccess;
   \   0001C2   7900         MOV     R1,#0x0
   \                     ??gp_CheckAnnouncedDevice_1:
   \   0001C4   7442         MOV     A,#0x42
   \   0001C6   02....       LJMP    ?Subroutine1 & 0xFFFF
    660          }
    661          
    662           /*********************************************************************
    663           * PRIVATE FUNCTIONS
    664           *********************************************************************/
    665          
    666          /*********************************************************************
    667           * @fn          gp_PopulateProxyTblEntry
    668           *
    669           * @brief       Populate the given item data
    670           *
    671           * @param       pData - Pointer to the new data
    672           *              size - size of the new data
    673           *              pTblEntryVector - Pointer to the new vector
    674           *              vectorLen - Position in the vector to write the data
    675           *
    676           * @return
    677           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    678          static void gp_PopulateProxyTblEntry( uint8* pData, uint8 size, uint8* pTblEntryVector, uint8* vectorLen )
   \                     gp_PopulateProxyTblEntry:
    679          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8C..         MOV     ?V0,R4
   \   000009   8D..         MOV     ?V1,R5
   \   00000B   740F         MOV     A,#0xf
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FF           MOV     R7,A
    680            pTblEntryVector += *(uint8*)vectorLen;
    681            
    682            osal_memcpy( pTblEntryVector, pData, size );
   \   000015                ; Setup parameters for call to function osal_memcpy
   \   000015   8A..         MOV     ?V4,R2
   \   000017   8B..         MOV     ?V5,R3
   \   000019   75..00       MOV     ?V6,#0x0
   \   00001C   78..         MOV     R0,#?V4
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000021   AC..         MOV     R4,?V2
   \   000023   7D00         MOV     R5,#0x0
   \   000025   8E82         MOV     DPL,R6
   \   000027   8F83         MOV     DPH,R7
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F8           MOV     R0,A
   \   00002B   E5..         MOV     A,?V0
   \   00002D   28           ADD     A,R0
   \   00002E   FA           MOV     R2,A
   \   00002F   E4           CLR     A
   \   000030   35..         ADDC    A,?V1
   \   000032   FB           MOV     R3,A
   \   000033   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000036   7403         MOV     A,#0x3
   \   000038   12....       LCALL   ?DEALLOC_XSTACK8
    683            *(uint8*)vectorLen += size;
   \   00003B   8E82         MOV     DPL,R6
   \   00003D   8F83         MOV     DPH,R7
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   25..         ADD     A,?V2
   \   000042   F0           MOVX    @DPTR,A
    684          }
   \   000043   7F07         MOV     R7,#0x7
   \   000045   02....       LJMP    ?BANKED_LEAVE_XDATA
    685          
    686          /*********************************************************************
    687           * @fn          pt_updateAlias
    688           *
    689           * @brief       Get Bit to update assigned alias field or not
    690           *
    691           * @param       pNew - New entry array to be added
    692           *
    693           * @return      newAlias - TRUE if assigned alias bit is set
    694           */
    695          static uint8 pt_updateAlias( uint8* pNew )
    696          {
    697            bool newAlias;
    698            uint8 newEntry[PROXY_TBL_ENTRY_LEN] = {0};
    699            
    700            osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
    701            
    702            newAlias = PROXY_TBL_GET_ASSIGNED_ALIAS( newEntry[PROXY_TBL_ENTRY_OPT + 1] );
    703            
    704            return newAlias;
    705          }
    706          
    707          /*********************************************************************
    708           * @fn          pt_updateSecurity
    709           *
    710           * @brief       Get Bit to update security options field or not
    711           *
    712           * @param       pNew - New entry array to be added
    713           *
    714           * @return      secUse - TRUE if security use bit is set
    715           */
    716          static uint8 pt_updateSecurity( uint8* pNew )
    717          {
    718            bool secUse;
    719            uint8 newEntry[PROXY_TBL_ENTRY_LEN] = {0};
    720            
    721            osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
    722            
    723            secUse = PROXY_TBL_GET_SEC_USE( newEntry[PROXY_TBL_ENTRY_OPT + 1] );
    724          
    725            return secUse;
    726          }
    727          
    728          /*********************************************************************
    729           * @fn          pt_updateSecFrameCounter
    730           *
    731           * @brief       Get Bit to update security frame counter capabilities
    732           *
    733           * @param       pNew - New entry array to be added
    734           *
    735           * @return      secCap - TRUE if security frame counter capabilities bit is set
    736           */
    737          static uint8 pt_updateSecFrameCounter( uint8* pNew )
    738          {
    739            bool secCap;
    740            uint8 newEntry[PROXY_TBL_ENTRY_LEN] = {0};
    741            
    742            osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
    743            
    744            secCap = PROXY_TBL_GET_SEC_CAP( newEntry[PROXY_TBL_ENTRY_OPT] );
    745            
    746            return secCap;
    747          }
    748          
    749          /*********************************************************************
    750           * @fn          pt_updateLightweightUnicastSink
    751           *
    752           * @brief       To add new sink entry
    753           *
    754           * @param       pNew - New entry array to be added
    755           *              pCurr - The current entry array in the proxy table
    756           *
    757           * @return      TRUE new entry added, FALSE if not
    758           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    759          static uint8 pt_updateLightweightUnicastSink( uint8* pNew, uint8* pCurr, uint8 addSink )
   \                     pt_updateLightweightUnicastSink:
    760          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000   74E9         MOV     A,#-0x17
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 140
   \   000005   7474         MOV     A,#0x74
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EC           MOV     A,R4
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   ED           MOV     A,R5
   \   000014   F0           MOVX    @DPTR,A
   \   000015   E9           MOV     A,R1
   \   000016   FE           MOV     R6,A
    761            uint8 newEntry[PROXY_TBL_ENTRY_LEN] = {0};
   \   000017   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_8`
   \   00001A   744C         MOV     A,#0x4c
   \   00001C   12....       LCALL   ?XSTACK_DISP102_8
   \   00001F   7440         MOV     A,#0x40
   \   000021   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    762            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = {0};
   \   000024   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_9`
   \   000027   740C         MOV     A,#0xc
   \   000029   12....       LCALL   ?XSTACK_DISP102_8
   \   00002C   7440         MOV     A,#0x40
   \   00002E   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    763            uint8 freeSinkEntry[LSINK_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   000031   90....       MOV     DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_1`
   \   000034   7402         MOV     A,#0x2
   \   000036   12....       LCALL   ?XSTACK_DISP102_8
   \   000039   740A         MOV     A,#0xa
   \   00003B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    764            
    765            osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
   \   00003E                ; Setup parameters for call to function osal_memcpy
   \   00003E   8A..         MOV     ?V0,R2
   \   000040   8B..         MOV     ?V1,R3
   \   000042   F5..         MOV     ?V2,A
   \   000044   78..         MOV     R0,#?V0
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000049   7C40         MOV     R4,#0x40
   \   00004B   7D00         MOV     R5,#0x0
   \   00004D   744F         MOV     A,#0x4f
   \   00004F   12....       LCALL   ?XSTACK_DISP101_8
   \   000052   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000055   7403         MOV     A,#0x3
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
    766            osal_memcpy( &currEntry, pCurr, PROXY_TBL_ENTRY_LEN );
   \   00005A                ; Setup parameters for call to function osal_memcpy
   \   00005A   85..82       MOV     DPL,?XSP + 0
   \   00005D   85..83       MOV     DPH,?XSP + 1
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F5..         MOV     ?V0,A
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F5..         MOV     ?V1,A
   \   000067   78..         MOV     R0,#?V0
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006C   7C40         MOV     R4,#0x40
   \   00006E   7D00         MOV     R5,#0x0
   \   000070   740F         MOV     A,#0xf
   \   000072   12....       LCALL   ?XSTACK_DISP101_8
   \   000075   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000078   7403         MOV     A,#0x3
   \   00007A   12....       LCALL   ?DEALLOC_XSTACK8
    767            
    768            
    769            // if addSink is TRUE then add the sink to current entry
    770            if ( addSink ) 
   \   00007D   7438         MOV     A,#0x38
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   A982         MOV     R1,DPL
   \   000084   AA83         MOV     R2,DPH
   \   000086   89..         MOV     ?V8,R1
   \   000088   8A..         MOV     ?V9,R2
   \   00008A   75..00       MOV     ?V10,#0x0
   \   00008D   742E         MOV     A,#0x2e
   \   00008F   12....       LCALL   ?XSTACK_DISP0_8
   \   000092   A982         MOV     R1,DPL
   \   000094   AA83         MOV     R2,DPH
   \   000096   89..         MOV     ?V4,R1
   \   000098   8A..         MOV     ?V5,R2
   \   00009A   75..00       MOV     ?V6,#0x0
   \   00009D   746E         MOV     A,#0x6e
   \   00009F   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A2   A982         MOV     R1,DPL
   \   0000A4   AA83         MOV     R2,DPH
   \   0000A6   89..         MOV     ?V0,R1
   \   0000A8   8A..         MOV     ?V1,R2
   \   0000AA   7402         MOV     A,#0x2
   \   0000AC   12....       LCALL   ?XSTACK_DISP100_8
   \   0000AF   88..         MOV     ?V12,R0
   \   0000B1   89..         MOV     ?V13,R1
   \   0000B3   75..00       MOV     ?V14,#0x0
   \   0000B6   EE           MOV     A,R6
   \   0000B7   78..         MOV     R0,#?V0
   \   0000B9   605E         JZ      ??pt_updateLightweightUnicastSink_0
    771            {
    772              // if the incomming Sink entry is different to the current entry
    773              if ( !osal_memcmp( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \   0000BB                ; Setup parameters for call to function osal_memcmp
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000BE   7C0A         MOV     R4,#0xa
   \   0000C0   7D00         MOV     R5,#0x0
   \   0000C2   A9..         MOV     R1,?V4
   \   0000C4   AA..         MOV     R2,?V5
   \   0000C6   AB..         MOV     R3,?V6
   \   0000C8   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000CB   7403         MOV     A,#0x3
   \   0000CD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D0   E9           MOV     A,R1
   \   0000D1   6003         JZ      $+5
   \   0000D3   02....       LJMP    ??pt_updateLightweightUnicastSink_1 & 0xFFFF
    774              {
    775                // add the sink entry in the next slot if empty
    776                if ( osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \   0000D6                ; Setup parameters for call to function osal_memcmp
   \   0000D6   78..         MOV     R0,#?V8
   \   0000D8   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000DB   7C0A         MOV     R4,#0xa
   \   0000DD   7D00         MOV     R5,#0x0
   \   0000DF   A9..         MOV     R1,?V12
   \   0000E1   AA..         MOV     R2,?V13
   \   0000E3   AB..         MOV     R3,?V14
   \   0000E5   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000E8   7403         MOV     A,#0x3
   \   0000EA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000ED   E9           MOV     A,R1
   \   0000EE   78..         MOV     R0,#?V0
   \   0000F0   6006         JZ      ??pt_updateLightweightUnicastSink_2
    777                {
    778                  osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN );
   \   0000F2                ; Setup parameters for call to function osal_memcpy
   \   0000F2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000F5   02....       LJMP    ??pt_updateLightweightUnicastSink_3 & 0xFFFF
    779                  osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    780                  return TRUE;
    781                }
    782              }
    783              else 
    784              {
    785                osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    786               return TRUE;
    787              }
    788              // if the incomming Sink entry is different to the current entry
    789              if ( !osal_memcmp( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \                     ??pt_updateLightweightUnicastSink_2:
   \   0000F8                ; Setup parameters for call to function osal_memcmp
   \   0000F8   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000FB   7C0A         MOV     R4,#0xa
   \   0000FD   7D00         MOV     R5,#0x0
   \   0000FF   A9..         MOV     R1,?V8
   \   000101   AA..         MOV     R2,?V9
   \   000103   AB..         MOV     R3,?V10
   \   000105   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000108   7403         MOV     A,#0x3
   \   00010A   12....       LCALL   ?DEALLOC_XSTACK8
    790              {
    791                return FALSE;
    792              }
    793            }
    794            else
    795            {
    796              // if the incomming Sink entry is the same to the current entry
    797              if ( osal_memcmp( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
    798              {
    799                // Move the next sink entry to current
    800                osal_memcpy( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN );
    801                // Invalidate the sink entry
    802                osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], freeSinkEntry, LSINK_ADDR_LEN );
    803                // if the sink entry is empty then remove the proxy table entry
    804                if ( osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
    805                {
    806                  osal_memset( currEntry, 0xFF, PROXY_TBL_ENTRY_LEN );
    807                }
    808                osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    809                return TRUE;
    810              }
    811              // if the incomming Sink entry is the same to the current entry
    812              else if ( osal_memcmp( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
    813              {
    814                // Invalidate the sink entry
    815                osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], freeSinkEntry, LSINK_ADDR_LEN );
    816                osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    817                return TRUE;
    818              }
    819            }
    820            return FALSE;
   \                     ??pt_updateLightweightUnicastSink_4:
   \   00010D   7900         MOV     R1,#0x0
   \                     ??pt_updateLightweightUnicastSink_5:
   \   00010F   748C         MOV     A,#-0x74
   \   000111   12....       LCALL   ?DEALLOC_XSTACK8
   \   000114   7F0F         MOV     R7,#0xf
   \   000116   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??pt_updateLightweightUnicastSink_0:
   \   000119                ; Setup parameters for call to function osal_memcmp
   \   000119   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00011C   7C0A         MOV     R4,#0xa
   \   00011E   7D00         MOV     R5,#0x0
   \   000120   A9..         MOV     R1,?V4
   \   000122   AA..         MOV     R2,?V5
   \   000124   AB..         MOV     R3,?V6
   \   000126   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000129   7403         MOV     A,#0x3
   \   00012B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012E   E9           MOV     A,R1
   \   00012F   7003         JNZ     $+5
   \   000131   02....       LJMP    ??pt_updateLightweightUnicastSink_6 & 0xFFFF
   \   000134                ; Setup parameters for call to function osal_memcpy
   \   000134   78..         MOV     R0,#?V8
   \   000136   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000139   7C0A         MOV     R4,#0xa
   \   00013B   7D00         MOV     R5,#0x0
   \   00013D   7431         MOV     A,#0x31
   \   00013F   12....       LCALL   ?XSTACK_DISP0_8
   \   000142   AA82         MOV     R2,DPL
   \   000144   AB83         MOV     R3,DPH
   \   000146   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000149   7403         MOV     A,#0x3
   \   00014B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00014E                ; Setup parameters for call to function osal_memcpy
   \   00014E   78..         MOV     R0,#?V12
   \   000150   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000153   7C0A         MOV     R4,#0xa
   \   000155   7D00         MOV     R5,#0x0
   \   000157   743B         MOV     A,#0x3b
   \   000159   12....       LCALL   ?XSTACK_DISP0_8
   \   00015C   AA82         MOV     R2,DPL
   \   00015E   AB83         MOV     R3,DPH
   \   000160   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000163   7403         MOV     A,#0x3
   \   000165   12....       LCALL   ?DEALLOC_XSTACK8
   \   000168                ; Setup parameters for call to function osal_memcmp
   \   000168   78..         MOV     R0,#?V4
   \   00016A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00016D   7C0A         MOV     R4,#0xa
   \   00016F   7D00         MOV     R5,#0x0
   \   000171   A9..         MOV     R1,?V12
   \   000173   AA..         MOV     R2,?V13
   \   000175   AB..         MOV     R3,?V14
   \   000177   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00017A   7403         MOV     A,#0x3
   \   00017C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017F   E9           MOV     A,R1
   \   000180   600E         JZ      ??pt_updateLightweightUnicastSink_1
   \   000182                ; Setup parameters for call to function osal_memset
   \   000182   7C40         MOV     R4,#0x40
   \   000184   7D00         MOV     R5,#0x0
   \   000186   79FF         MOV     R1,#-0x1
   \   000188   740C         MOV     A,#0xc
   \   00018A   12....       LCALL   ?XSTACK_DISP101_8
   \   00018D   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \                     ??pt_updateLightweightUnicastSink_1:
   \   000190                ; Setup parameters for call to function osal_memcpy
   \   000190   740C         MOV     A,#0xc
   \   000192   12....       LCALL   ?XSTACK_DISP100_8
   \   000195   88..         MOV     ?V0,R0
   \   000197   89..         MOV     ?V1,R1
   \   000199   78..         MOV     R0,#?V0
   \   00019B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00019E   7C40         MOV     R4,#0x40
   \   0001A0   7D00         MOV     R5,#0x0
   \   0001A2   7403         MOV     A,#0x3
   \   0001A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   FA           MOV     R2,A
   \   0001A9   A3           INC     DPTR
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   FB           MOV     R3,A
   \   0001AC   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001AF   7403         MOV     A,#0x3
   \   0001B1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001B4   7901         MOV     R1,#0x1
   \   0001B6   02....       LJMP    ??pt_updateLightweightUnicastSink_5 & 0xFFFF
   \                     ??pt_updateLightweightUnicastSink_6:
   \   0001B9                ; Setup parameters for call to function osal_memcmp
   \   0001B9   78..         MOV     R0,#?V0
   \   0001BB   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001BE   7C0A         MOV     R4,#0xa
   \   0001C0   7D00         MOV     R5,#0x0
   \   0001C2   A9..         MOV     R1,?V8
   \   0001C4   AA..         MOV     R2,?V9
   \   0001C6   AB..         MOV     R3,?V10
   \   0001C8   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0001CB   7403         MOV     A,#0x3
   \   0001CD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D0   E9           MOV     A,R1
   \   0001D1   7003         JNZ     $+5
   \   0001D3   02....       LJMP    ??pt_updateLightweightUnicastSink_4 & 0xFFFF
   \   0001D6                ; Setup parameters for call to function osal_memcpy
   \   0001D6   78..         MOV     R0,#?V12
   \   0001D8   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \                     ??pt_updateLightweightUnicastSink_3:
   \   0001DB   7C0A         MOV     R4,#0xa
   \   0001DD   7D00         MOV     R5,#0x0
   \   0001DF   743B         MOV     A,#0x3b
   \   0001E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E4   AA82         MOV     R2,DPL
   \   0001E6   AB83         MOV     R3,DPH
   \   0001E8   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001EB   7403         MOV     A,#0x3
   \   0001ED   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F0   809E         SJMP    ??pt_updateLightweightUnicastSink_1
    821          }
    822          
    823          /*********************************************************************
    824           * @fn          pt_addSinkGroup
    825           *
    826           * @brief       To add new sink group entry
    827           *
    828           * @param       pNew - New entry array to be added
    829           *              pCurr - The current entry array in the proxy table
    830           *
    831           * @return      TRUE new entry added, FALSE if not
    832           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    833          static uint8 pt_addSinkGroup( uint8* pNew, uint8* pCurr )
   \                     pt_addSinkGroup:
    834          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 138
   \   000005   7476         MOV     A,#0x76
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
    835            bool newSinkGroup;
    836            uint8 newEntry[PROXY_TBL_ENTRY_LEN] = {0};
   \   00000E   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_10`
   \   000011   744A         MOV     A,#0x4a
   \   000013   12....       LCALL   ?XSTACK_DISP102_8
   \   000016   7440         MOV     A,#0x40
   \   000018   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    837            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = {0};
   \   00001B   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_11`
   \   00001E   740A         MOV     A,#0xa
   \   000020   12....       LCALL   ?XSTACK_DISP102_8
   \   000023   7440         MOV     A,#0x40
   \   000025   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    838            uint8 freeSinkEntry[LSINK_ADDR_LEN] = {0xFF};
   \   000028   90....       MOV     DPTR,#`?<Constant {255, 0, 0, 0, 0, 0, 0, 0, 0, 0}>`
   \   00002B   AC..         MOV     R4,?XSP + 0
   \   00002D   AD..         MOV     R5,?XSP + 1
   \   00002F   740A         MOV     A,#0xa
   \   000031   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    839            
    840            osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
   \   000034                ; Setup parameters for call to function osal_memcpy
   \   000034   8A..         MOV     ?V0,R2
   \   000036   8B..         MOV     ?V1,R3
   \   000038   F5..         MOV     ?V2,A
   \   00003A   78..         MOV     R0,#?V0
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003F   7C40         MOV     R4,#0x40
   \   000041   7D00         MOV     R5,#0x0
   \   000043   744D         MOV     A,#0x4d
   \   000045   12....       LCALL   ?XSTACK_DISP101_8
   \   000048   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00004B   7403         MOV     A,#0x3
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
    841            osal_memcpy( &currEntry, pCurr, PROXY_TBL_ENTRY_LEN );
   \   000050                ; Setup parameters for call to function osal_memcpy
   \   000050   8E..         MOV     ?V0,R6
   \   000052   8F..         MOV     ?V1,R7
   \   000054   78..         MOV     R0,#?V0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000059   7C40         MOV     R4,#0x40
   \   00005B   7D00         MOV     R5,#0x0
   \   00005D   740D         MOV     A,#0xd
   \   00005F   12....       LCALL   ?XSTACK_DISP101_8
   \   000062   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000065   7403         MOV     A,#0x3
   \   000067   12....       LCALL   ?DEALLOC_XSTACK8
    842            
    843            newSinkGroup = PROXY_TBL_GET_CGROUP( newEntry[PROXY_TBL_ENTRY_OPT + 1] );
    844            
    845            if ( newSinkGroup )
   \   00006A   744B         MOV     A,#0x4b
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   A2E0         MOV     C,0xE0 /* A   */.0
   \   000072   4003         JC      $+5
   \   000074   02....       LJMP    ??pt_addSinkGroup_0 & 0xFFFF
    846            {
    847              if ( osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof ( uint16 ) ) )
   \   000077   A8..         MOV     R0,?XSP + 0
   \   000079   A9..         MOV     R1,?XSP + 1
   \   00007B   88..         MOV     ?V0,R0
   \   00007D   89..         MOV     ?V1,R1
   \   00007F                ; Setup parameters for call to function osal_memcmp
   \   00007F   7444         MOV     A,#0x44
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   A982         MOV     R1,DPL
   \   000086   AA83         MOV     R2,DPH
   \   000088   89..         MOV     ?V4,R1
   \   00008A   8A..         MOV     ?V5,R2
   \   00008C   75..00       MOV     ?V6,#0x0
   \   00008F   78..         MOV     R0,#?V4
   \   000091   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000094   7C02         MOV     R4,#0x2
   \   000096   7D00         MOV     R5,#0x0
   \   000098   A9..         MOV     R1,?V0
   \   00009A   AA..         MOV     R2,?V1
   \   00009C   AB..         MOV     R3,?V2
   \   00009E   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000A1   7403         MOV     A,#0x3
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A6   E9           MOV     A,R1
   \   0000A7   7003         JNZ     $+5
   \   0000A9   02....       LJMP    ??pt_addSinkGroup_0 & 0xFFFF
    848              {
    849                if ( osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint16 ) ) )
   \   0000AC   740A         MOV     A,#0xa
   \   0000AE   12....       LCALL   ?XSTACK_DISP100_8
   \   0000B1   88..         MOV     ?V4,R0
   \   0000B3   89..         MOV     ?V5,R1
   \   0000B5                ; Setup parameters for call to function osal_memcmp
   \   0000B5   7440         MOV     A,#0x40
   \   0000B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BA   A982         MOV     R1,DPL
   \   0000BC   AA83         MOV     R2,DPH
   \   0000BE   89..         MOV     ?V8,R1
   \   0000C0   8A..         MOV     ?V9,R2
   \   0000C2   75..00       MOV     ?V10,#0x0
   \   0000C5   78..         MOV     R0,#?V8
   \   0000C7   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000CA   7C02         MOV     R4,#0x2
   \   0000CC   7D00         MOV     R5,#0x0
   \   0000CE   A9..         MOV     R1,?V0
   \   0000D0   AA..         MOV     R2,?V1
   \   0000D2   AB..         MOV     R3,?V2
   \   0000D4   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000D7   7403         MOV     A,#0x3
   \   0000D9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DC   E9           MOV     A,R1
   \   0000DD   601A         JZ      ??pt_addSinkGroup_1
    850                {
    851                  osal_memcpy( &currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint16 ) );
   \   0000DF                ; Setup parameters for call to function osal_memcpy
   \   0000DF   7480         MOV     A,#-0x80
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   A982         MOV     R1,DPL
   \   0000E6   AA83         MOV     R2,DPH
   \   0000E8   89..         MOV     ?V0,R1
   \   0000EA   8A..         MOV     ?V1,R2
   \   0000EC   78..         MOV     R0,#?V0
   \   0000EE   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000F1   7C02         MOV     R4,#0x2
   \   0000F3   7D00         MOV     R5,#0x0
   \   0000F5   7443         MOV     A,#0x43
   \   0000F7   8018         SJMP    ??pt_addSinkGroup_2
    852                  osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    853                  return TRUE;
    854                }
    855                else
    856                {
    857                  osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], &newEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof ( uint16 ) );
   \                     ??pt_addSinkGroup_1:
   \   0000F9                ; Setup parameters for call to function osal_memcpy
   \   0000F9   7484         MOV     A,#-0x7c
   \   0000FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FE   A982         MOV     R1,DPL
   \   000100   AA83         MOV     R2,DPH
   \   000102   89..         MOV     ?V0,R1
   \   000104   8A..         MOV     ?V1,R2
   \   000106   78..         MOV     R0,#?V0
   \   000108   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00010B   7C02         MOV     R4,#0x2
   \   00010D   7D00         MOV     R5,#0x0
   \   00010F   7447         MOV     A,#0x47
   \                     ??pt_addSinkGroup_2:
   \   000111   12....       LCALL   ?XSTACK_DISP0_8
   \   000114   AA82         MOV     R2,DPL
   \   000116   AB83         MOV     R3,DPH
   \   000118   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00011B   7403         MOV     A,#0x3
   \   00011D   12....       LCALL   ?DEALLOC_XSTACK8
    858                  osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
   \   000120                ; Setup parameters for call to function osal_memcpy
   \   000120   78..         MOV     R0,#?V4
   \   000122   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000125   7C40         MOV     R4,#0x40
   \   000127   7D00         MOV     R5,#0x0
   \   000129   EE           MOV     A,R6
   \   00012A   FA           MOV     R2,A
   \   00012B   EF           MOV     A,R7
   \   00012C   FB           MOV     R3,A
   \   00012D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000130   7403         MOV     A,#0x3
   \   000132   12....       LCALL   ?DEALLOC_XSTACK8
    859                  return TRUE;
   \   000135   7901         MOV     R1,#0x1
   \   000137   8002         SJMP    ??pt_addSinkGroup_3
    860                }
    861              }
    862            }
    863            return FALSE;
   \                     ??pt_addSinkGroup_0:
   \   000139   7900         MOV     R1,#0x0
   \                     ??pt_addSinkGroup_3:
   \   00013B   748A         MOV     A,#-0x76
   \   00013D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000140   7F0B         MOV     R7,#0xb
   \   000142   02....       LJMP    ?BANKED_LEAVE_XDATA
    864          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??pt_ZclReadGetProxyEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    pt_ZclReadGetProxyEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGpp_ReadWriteAttrCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGpp_ReadWriteAttrCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_pairingSetProxyTblOptions::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_pairingSetProxyTblOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_PairingUpdateProxyTlb::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_PairingUpdateProxyTlb

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_UpdateProxyTlb::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_UpdateProxyTlb

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_CheckAnnouncedDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_CheckAnnouncedDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_PopulateProxyTblEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_PopulateProxyTblEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??pt_updateLightweightUnicastSink::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    pt_updateLightweightUnicastSink

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??pt_addSinkGroup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    pt_addSinkGroup

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_3`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_4`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_5`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_6`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_7`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_8`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_9`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_1`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_10`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_11`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 0, 0, 0, 0, 0, 0, 0, 0, 0}>`:
   \   000000   FF           DB 255
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_12`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_13`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_10000:
   \   000000   00000100     DD 65536

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2:
   \   000000   02000000     DD 2
    865          
    866          /*********************************************************************
    867           * @fn          pt_lookForGpd
    868           *
    869           * @brief       To see if the GPD id is in this NV entry
    870           *
    871           * @param       currProxyEntryId - NV ID of the proxy table
    872           *              pNew - New tabble entry array to be added
    873           *
    874           * @return      TRUE if the GPD has an entry in current NV vector
    875           */
    876          static uint8 pt_lookForGpd( uint16 currProxyEntryId, uint8* pNew )
    877          {
    878            uint8 rtrn;
    879          
    880            uint8 newEntry[PROXY_TBL_ENTRY_LEN] = {0};
    881            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = {0};
    882          
    883            osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
    884            
    885            rtrn = osal_nv_read( currProxyEntryId, 0,
    886                                       PROXY_TBL_ENTRY_LEN, currEntry );
    887            
    888            if ( rtrn != SUCCESS )
    889            {
    890              return FALSE;
    891            }
    892          
    893            if ( PROXY_TBL_COMP_APPLICTION_ID( newEntry[PROXY_TBL_ENTRY_OPT], currEntry[PROXY_TBL_ENTRY_OPT] ) )
    894            {
    895              if ( osal_memcmp( &newEntry[PROXY_TBL_ENTRY_GPD_ID], &currEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN ) )
    896              {
    897              return TRUE;
    898              }
    899            }
    900            return FALSE;
    901          }
    902          
    903          
    904          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     90   gp_CheckAnnouncedDevice
        0     87   -> NLME_SendNetworkStatus
        0     86   -> gp_getProxyTableByIndex
        0     89   -> osal_memcmp
        0     89   -> osal_memcpy
        0     86   -> osal_memset
        0     86   -> osal_rand
        0     90   -> osal_start_timerEx
      0     94   gp_PairingUpdateProxyTlb
        0     93   -> gp_PopulateProxyTblEntry
        0     91   -> gp_UpdateProxyTlb
        0     91   -> gp_pairingSetProxyTblOptions
        0     94   -> osal_memcpy
        0     91   -> osal_memset
      0    188   gp_PopulateProxyTblEntry
        0     18   -> osal_memcpy
      1    367   gp_UpdateProxyTlb
        0    272   -> gp_getProxyTableByIndex
        0    275   -> osal_memcmp
        0    275   -> osal_memcpy
        0    276   -> osal_nv_read
        0    276   -> osal_nv_write
        0    272   -> pt_addSinkGroup
        0    272   -> pt_updateLightweightUnicastSink
      1    109   gp_pairingSetProxyTblOptions
      1    185   pt_ZclReadGetProxyEntry
        0    170   -> gp_PopulateProxyTblEntry
        0    168   -> gp_getProxyTableByIndex
        0    171   -> osal_memcmp
        0    171   -> osal_memcpy
      0    432   pt_addSinkGroup
        0    160   -> osal_memcmp
        0    160   -> osal_memcpy
      0    438   pt_updateLightweightUnicastSink
        0    166   -> osal_memcmp
        0    166   -> osal_memcpy
        0    163   -> osal_memset
      0     18   zclGpp_ReadWriteAttrCB
        0     14   -> pt_ZclReadGetProxyEntry


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      64  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
      64  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1
      64  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_10
      64  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_11
      64  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_12
      64  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_13
      64  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2
      64  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_3
      64  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_4
      64  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_5
      64  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_6
      64  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_7
      64  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_8
      64  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_9
       2  ?<Constant {0, 0}>
      10  ?<Constant {255, 0, 0, 0, 0, 0, 0, 0, 0, 0}>
      10  ?<Constant {255, 255, 255, 255, 255, 255, 255,
      10  ?<Constant {255, 255, 255, 255, 255, 255, 255,_1
       5  ?Subroutine0
       8  ?Subroutine1
      12  ?Subroutine2
       6  ?Subroutine3
      13  ?Subroutine4
       6  ?Subroutine5
       9  ?Subroutine6
       9  ?Subroutine7
       4  __Constant_10000
       4  __Constant_2
      11  aliasConflictAnnce
     457  gp_CheckAnnouncedDevice
       6  gp_CheckAnnouncedDevice::?relay
     813  gp_PairingUpdateProxyTlb
       6  gp_PairingUpdateProxyTlb::?relay
      72  gp_PopulateProxyTblEntry
       6  gp_PopulateProxyTblEntry::?relay
     787  gp_UpdateProxyTlb
       6  gp_UpdateProxyTlb::?relay
     293  gp_pairingSetProxyTblOptions
       6  gp_pairingSetProxyTblOptions::?relay
    1288  pt_ZclReadGetProxyEntry
       6  pt_ZclReadGetProxyEntry::?relay
     325  pt_addSinkGroup
       6  pt_addSinkGroup::?relay
     498  pt_updateLightweightUnicastSink
       6  pt_updateLightweightUnicastSink::?relay
     100  zclGpp_ReadWriteAttrCB
       6  zclGpp_ReadWriteAttrCB::?relay

 
 4 701 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
   936 bytes in segment XDATA_ROM_C
    11 bytes in segment XDATA_Z
 
 4 755 bytes of CODE  memory
   928 bytes of CONST memory (+ 8 bytes shared)
    11 bytes of XDATA memory

Errors: none
Warnings: none
