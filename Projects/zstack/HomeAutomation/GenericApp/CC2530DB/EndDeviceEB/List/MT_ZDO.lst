###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                03/Nov/2017  19:06:07
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack 3.0.0\Components\mt\MT_ZDO.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
#        Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack 3.0.0\Components\mt\MT_ZDO.c" -D
#        SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xPOWER_SAVING
#        -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
#        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LEGACY_LCD_DEBUG -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES -D
#        ZCL_GROUPS -lC "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List"
#        -lA "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\" -I
#        "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List\MT_ZDO.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\Obj\MT_ZDO.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack 3.0.0\Components\mt\MT_ZDO.c
      1          /**************************************************************************************************
      2            Filename:       MT_ZDO.c
      3            Revised:        $Date: 2015-02-05 17:15:13 -0800 (Thu, 05 Feb 2015) $
      4            Revision:       $Revision: 42371 $
      5          
      6            Description:    MonitorTest functions for the ZDO layer.
      7          
      8            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License"). You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product. Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          **************************************************************************************************/
     38          
     39          #ifdef MT_ZDO_FUNC
     40          
     41          /**************************************************************************************************
     42           * INCLUDES
     43           **************************************************************************************************/
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "OSAL_Nv.h"
     47          #include "MT.h"
     48          #include "MT_ZDO.h"
     49          #include "AddrMgr.h"
     50          #include "APSMEDE.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDApp.h"
     55          #include "OnBoard.h"
     56          #include "aps_groups.h"
     57          
     58          #if defined ( MT_ZDO_EXTENSIONS )
     59            #include "rtg.h"
     60          #endif
     61          #if defined ( MT_SYS_KEY_MANAGEMENT ) || defined ( MT_ZDO_EXTENSIONS )
     62            #include "ZDSecMgr.h"
     63          #endif
     64          
     65          #include "nwk_util.h"
     66          
     67          /**************************************************************************************************
     68           * CONSTANTS
     69           **************************************************************************************************/
     70          #define MT_ZDO_END_DEVICE_ANNCE_IND_LEN   0x0D
     71          #define MT_ZDO_ADDR_RSP_LEN               0x0D
     72          #define MT_ZDO_BIND_UNBIND_RSP_LEN        0x03
     73          #define MT_ZDO_BEACON_IND_LEN             21
     74          #define MT_ZDO_BEACON_IND_PACK_LEN        (MT_UART_TX_BUFF_MAX - SPI_0DATA_MSG_LEN)
     75          #define MT_ZDO_JOIN_CNF_LEN               5
     76          
     77          // Message must pack nwk addr, entire (not just pointer to) ieee addr, and packet cost, so the
     78          // sizeof(zdoConcentratorInd_t) is not usable.
     79          #define MT_ZDO_CONCENTRATOR_IND_LEN      (2 + Z_EXTADDR_LEN + 1)
     80          
     81          #define MTZDO_RESPONSE_BUFFER_LEN   100
     82          
     83          #define MTZDO_MAX_MATCH_CLUSTERS    16
     84          #define MTZDO_MAX_ED_BIND_CLUSTERS  15
     85          
     86          // Conversion from ZDO Cluster Id to the RPC AREQ Id is direct as follows:
     87          #define MT_ZDO_CID_TO_AREQ_ID(CId)  ((uint8)(CId) | 0x80)
     88          
     89          #define MT_ZDO_STATUS_LEN   1
     90          
     91          #if defined ( MT_ZDO_EXTENSIONS )
     92          typedef struct
     93          {
     94            uint16            ami;
     95            uint16            keyNvId;   // index to the Link Key table in NV
     96            ZDSecMgr_Authentication_Option authenticateOption;
     97          } ZDSecMgrEntry_t;
     98          #endif  // MT_ZDO_EXTENSIONS
     99          
    100          /**************************************************************************************************
    101           * GLOBAL VARIABLES
    102           **************************************************************************************************/
    103          uint32 _zdoCallbackSub;
    104          uint8 *pBeaconIndBuf = NULL;
    105          
    106          /**************************************************************************************************
    107           * LOCAL VARIABLES
    108           **************************************************************************************************/
    109          bool ignoreIndication = FALSE;
    110          
    111          /**************************************************************************************************
    112           * LOCAL FUNCTIONS
    113           **************************************************************************************************/
    114          #if defined (MT_ZDO_FUNC)
    115          static void MT_ZdoNWKAddressRequest(uint8 *pBuf);
    116          static void MT_ZdoIEEEAddrRequest(uint8 *pBuf);
    117          static void MT_ZdoNodeDescRequest(uint8 *pBuf);
    118          static void MT_ZdoPowerDescRequest(uint8 *pBuf);
    119          static void MT_ZdoSimpleDescRequest(uint8 *pBuf);
    120          static void MT_ZdoActiveEpRequest(uint8 *pBuf);
    121          static void MT_ZdoMatchDescRequest(uint8 *pBuf);
    122          static void MT_ZdoComplexDescRequest(uint8 *pBuf);
    123          static void MT_ZdoUserDescRequest(uint8 *pBuf);
    124          static void MT_ZdoEndDevAnnce(uint8 *pBuf);
    125          static void MT_ZdoUserDescSet(uint8 *pBuf);
    126          static void MT_ZdoServiceDiscRequest(uint8 *pBuf);
    127          static void MT_ZdoEndDevBindRequest(uint8 *pBuf);
    128          static void MT_ZdoBindRequest(uint8 *pBuf);
    129          static void MT_ZdoUnbindRequest(uint8 *pBuf);
    130          #if defined ( MT_SYS_KEY_MANAGEMENT )
    131          static void MT_ZdoSetLinkKey(uint8 *pBuf);
    132          static void MT_ZdoRemoveLinkKey(uint8 *pBuf);
    133          static void MT_ZdoGetLinkKey(uint8 *pBuf);
    134          #endif /* MT_SYS_KEY_MANAGEMENT */
    135          static void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf);
    136          static void MT_ZdoJoinReq(uint8 *pBuf);
    137          /* Call back function */
    138          void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr );
    139          void *MT_ZdoBeaconIndCB ( void *pStr );
    140          void *MT_ZdoJoinCnfCB ( void *pStr );
    141          #if defined (MT_ZDO_MGMT)
    142          static void MT_ZdoMgmtLqiRequest(uint8 *pBuf);
    143          static void MT_ZdoMgmtRtgRequest(uint8 *pBuf);
    144          static void MT_ZdoMgmtBindRequest(uint8 *pBuf);
    145          static void MT_ZdoMgmtLeaveRequest(uint8 *pBuf);
    146          static void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf);
    147          static void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf);
    148          static void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf);
    149          static void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf);
    150          #endif /* MT_ZDO_MGMT */
    151          static void MT_ZdoSendData( uint8 *pBuf );
    152          static void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf );
    153          static void MT_ZdoStartupFromApp(uint8 *pBuf);
    154          static void MT_ZdoStartupFromAppEx(uint8 *pBuf);
    155          static void MT_ZdoRegisterForZDOMsg(uint8 *pBuf);
    156          static void MT_ZdoRemoveRegisteredCB(uint8 *pBuf);
    157          static void MT_ZdoSetRejoinParameters(uint8 *pBuf);
    158          #endif /* MT_ZDO_FUNC */
    159          
    160          #if defined (MT_ZDO_CB_FUNC)
    161          uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg );
    162          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID );
    163          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr );
    164          void MT_ZdoBindUnbindRspCB( uint16 clusterID, uint16 srcAddr, uint8 status );
    165          void* MT_ZdoSrcRtgCB( void *pStr );
    166          static void *MT_ZdoConcentratorIndCB(void *pStr);
    167          static void *MT_ZdoLeaveInd(void *vPtr);
    168          void *MT_ZdoTcDeviceInd( void *params );
    169          void *MT_ZdoPermitJoinInd( void *duration );
    170          #endif /* MT_ZDO_CB_FUNC */
    171          
    172          #if defined ( MT_ZDO_EXTENSIONS )
    173          #if ( ZG_BUILD_COORDINATOR_TYPE )
    174          static void MT_ZdoSecUpdateNwkKey( uint8 *pBuf );
    175          static void MT_ZdoSecSwitchNwkKey( uint8 *pBuf );
    176          #endif // ZDO_COORDINATOR
    177          static void MT_ZdoSecAddLinkKey( uint8 *pBuf );
    178          static void MT_ZdoSecEntryLookupExt( uint8 *pBuf );
    179          static void MT_ZdoSecDeviceRemove( uint8 *pBuf );
    180          static void MT_ZdoExtRouteDisc( uint8 *pBuf );
    181          static void MT_ZdoExtRouteCheck( uint8 *pBuf );
    182          static void MT_ZdoExtRemoveGroup( uint8 *pBuf );
    183          static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf );
    184          static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf );
    185          static void MT_ZdoExtFindGroup( uint8 *pBuf );
    186          static void MT_ZdoExtAddGroup( uint8 *pBuf );
    187          static void MT_ZdoExtCountAllGroups( uint8 *pBuf );
    188          static void MT_ZdoExtRxIdle( uint8 *pBuf );
    189          static void MT_ZdoExtNwkInfo( uint8 *pBuf );
    190          static void MT_ZdoExtSecApsRemoveReq( uint8 *pBuf );
    191          static void MT_ZdoExtSetParams( uint8 *pBuf );
    192          extern ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
    193          #endif // MT_ZDO_EXTENSIONS
    194          
    195          #if defined (MT_ZDO_FUNC)
    196          /***************************************************************************************************
    197           * @fn      MT_ZdoInit
    198           *
    199           * @brief   MT ZDO initialization
    200           *
    201           * @param   none
    202           *
    203           * @return  none
    204           ***************************************************************************************************/
    205          void MT_ZdoInit(void)
    206          {
    207          #ifdef MT_ZDO_CB_FUNC
    208            /* Register with ZDO for indication callbacks */
    209            ZDO_RegisterForZdoCB(ZDO_SRC_RTG_IND_CBID, &MT_ZdoSrcRtgCB);
    210            ZDO_RegisterForZdoCB(ZDO_CONCENTRATOR_IND_CBID, &MT_ZdoConcentratorIndCB);
    211            ZDO_RegisterForZdoCB(ZDO_LEAVE_IND_CBID, &MT_ZdoLeaveInd);
    212            ZDO_RegisterForZdoCB(ZDO_PERMIT_JOIN_CBID, &MT_ZdoPermitJoinInd);
    213            ZDO_RegisterForZdoCB(ZDO_TC_DEVICE_CBID, &MT_ZdoTcDeviceInd);
    214          #endif
    215          }
    216          
    217          /***************************************************************************************************
    218           * @fn      MT_ZdoCommandProcessing
    219           *
    220           * @brief
    221           *
    222           *   Process all the ZDO commands that are issued by test tool
    223           *
    224           * @param   pBuf - pointer to the msg buffer
    225           *
    226           *          | LEN  | CMD0  | CMD1  |  DATA  |
    227           *          |  1   |   1   |   1   |  0-255 |
    228           *
    229           * @return  status
    230           ***************************************************************************************************/
    231          uint8 MT_ZdoCommandProcessing(uint8* pBuf)
    232          {
    233            uint8 status = MT_RPC_SUCCESS;
    234          
    235            switch (pBuf[MT_RPC_POS_CMD1])
    236            {
    237          #if defined ( ZDO_NWKADDR_REQUEST )
    238              case MT_ZDO_NWK_ADDR_REQ:
    239                MT_ZdoNWKAddressRequest(pBuf);
    240                break;
    241          #endif
    242          
    243          #if defined ( ZDO_IEEEADDR_REQUEST )
    244              case MT_ZDO_IEEE_ADDR_REQ:
    245                MT_ZdoIEEEAddrRequest(pBuf);
    246                break;
    247          #endif
    248          
    249          #if defined ( ZDO_NODEDESC_REQUEST )
    250              case MT_ZDO_NODE_DESC_REQ:
    251                MT_ZdoNodeDescRequest(pBuf);
    252                break;
    253          #endif
    254          
    255          #if defined ( ZDO_POWERDESC_REQUEST )
    256              case MT_ZDO_POWER_DESC_REQ:
    257                MT_ZdoPowerDescRequest(pBuf);
    258                break;
    259          #endif
    260          
    261          #if defined ( ZDO_SIMPLEDESC_REQUEST )
    262              case MT_ZDO_SIMPLE_DESC_REQ:
    263                MT_ZdoSimpleDescRequest(pBuf);
    264                break;
    265          #endif
    266          
    267          #if defined ( ZDO_ACTIVEEP_REQUEST )
    268              case MT_ZDO_ACTIVE_EP_REQ:
    269                MT_ZdoActiveEpRequest(pBuf);
    270                break;
    271          #endif
    272          
    273          #if defined ( ZDO_MATCH_REQUEST )
    274              case MT_ZDO_MATCH_DESC_REQ:
    275                MT_ZdoMatchDescRequest(pBuf);
    276                break;
    277          #endif
    278          
    279          #if defined ( ZDO_COMPLEXDESC_REQUEST )
    280              case MT_ZDO_COMPLEX_DESC_REQ:
    281                MT_ZdoComplexDescRequest(pBuf);
    282                break;
    283          #endif
    284          
    285          #if defined ( ZDO_USERDESC_REQUEST )
    286              case MT_ZDO_USER_DESC_REQ:
    287                MT_ZdoUserDescRequest(pBuf);
    288                break;
    289          #endif
    290          
    291          #if defined ( ZDO_ENDDEVICE_ANNCE )
    292              case MT_ZDO_END_DEV_ANNCE:
    293                MT_ZdoEndDevAnnce(pBuf);
    294                break;
    295          #endif
    296          
    297          #if defined ( ZDO_USERDESCSET_REQUEST )
    298              case MT_ZDO_USER_DESC_SET:
    299                MT_ZdoUserDescSet(pBuf);
    300                break;
    301          #endif
    302          
    303          #if defined ( ZDO_SERVERDISC_REQUEST )
    304              case MT_ZDO_SERVICE_DISC_REQ:
    305                MT_ZdoServiceDiscRequest(pBuf);
    306                break;
    307          #endif
    308          
    309          #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
    310              case MT_ZDO_END_DEV_BIND_REQ:
    311                MT_ZdoEndDevBindRequest(pBuf);
    312                break;
    313          #endif
    314          
    315          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    316              case MT_ZDO_BIND_REQ:
    317                MT_ZdoBindRequest(pBuf);
    318                break;
    319          #endif
    320          
    321          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    322              case MT_ZDO_UNBIND_REQ:
    323                MT_ZdoUnbindRequest(pBuf);
    324                break;
    325          #endif
    326          
    327          #if defined ( MT_SYS_KEY_MANAGEMENT )
    328              case MT_ZDO_SET_LINK_KEY:
    329                MT_ZdoSetLinkKey(pBuf);
    330                break;
    331          
    332              case MT_ZDO_REMOVE_LINK_KEY:
    333                MT_ZdoRemoveLinkKey(pBuf);
    334                break;
    335          
    336              case MT_ZDO_GET_LINK_KEY:
    337                MT_ZdoGetLinkKey(pBuf);
    338                break;
    339          #endif // MT_SYS_KEY_MANAGEMENT
    340          
    341          #if defined ( ZDO_MANUAL_JOIN )
    342              case MT_ZDO_NWK_DISCOVERY_REQ:
    343                MT_ZdoNetworkDiscoveryReq(pBuf);
    344                break;
    345          
    346              case MT_ZDO_JOIN_REQ:
    347                MT_ZdoJoinReq(pBuf);
    348                break;
    349          #endif
    350          
    351          #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
    352              case MT_ZDO_MGMT_NWKDISC_REQ:
    353                MT_ZdoMgmtNwkDiscRequest(pBuf);
    354                break;
    355          #endif
    356          
    357          #if defined ( ZDO_MGMT_LQI_REQUEST )
    358              case MT_ZDO_MGMT_LQI_REQ:
    359                MT_ZdoMgmtLqiRequest(pBuf);
    360                break;
    361          #endif
    362          
    363          #if defined ( ZDO_MGMT_RTG_REQUEST )
    364              case MT_ZDO_MGMT_RTG_REQ:
    365                MT_ZdoMgmtRtgRequest(pBuf);
    366                break;
    367          #endif
    368          
    369          #if defined ( ZDO_MGMT_BIND_REQUEST )
    370              case MT_ZDO_MGMT_BIND_REQ:
    371                MT_ZdoMgmtBindRequest(pBuf);
    372                break;
    373          #endif
    374          
    375          #if defined ( ZDO_MGMT_LEAVE_REQUEST )
    376              case MT_ZDO_MGMT_LEAVE_REQ:
    377                MT_ZdoMgmtLeaveRequest(pBuf);
    378                break;
    379          #endif
    380          
    381          #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
    382              case MT_ZDO_MGMT_DIRECT_JOIN_REQ:
    383                MT_ZdoMgmtDirectJoinRequest(pBuf);
    384                break;
    385          #endif
    386          
    387          #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
    388              case MT_ZDO_MGMT_PERMIT_JOIN_REQ:
    389                MT_ZdoMgmtPermitJoinRequest(pBuf);
    390                break;
    391          #endif
    392          
    393          #if defined ( ZDO_MGMT_NWKUPDATE_REQUEST )
    394              case MT_ZDO_MGMT_NWK_UPDATE_REQ:
    395                MT_ZdoMgmtNwkUpdateRequest(pBuf);
    396                break;
    397          #endif
    398          
    399          #if defined ( ZDO_NETWORKSTART_REQUEST )
    400              case MT_ZDO_STARTUP_FROM_APP:
    401                MT_ZdoStartupFromApp(pBuf);
    402                break;
    403              case MT_ZDO_STARTUP_FROM_APP_EX:
    404                MT_ZdoStartupFromAppEx(pBuf);
    405                break;
    406          #endif
    407          
    408              case MT_ZDO_SEND_DATA:
    409                MT_ZdoSendData( pBuf );
    410                break;
    411          
    412              case MT_ZDO_NWK_ADDR_OF_INTEREST_REQ:
    413                MT_ZdoNwkAddrOfInterestReq( pBuf );
    414                break;
    415          
    416              case MT_ZDO_MSG_CB_REGISTER:
    417                MT_ZdoRegisterForZDOMsg(pBuf);
    418                break;
    419          
    420              case MT_ZDO_MSG_CB_REMOVE:
    421                MT_ZdoRemoveRegisteredCB(pBuf);
    422                break;
    423          
    424              case MT_ZDO_SET_REJOIN_PARAMS:
    425                MT_ZdoSetRejoinParameters(pBuf);
    426                break;
    427          
    428          #if defined ( MT_ZDO_EXTENSIONS )
    429          #if ( ZG_BUILD_COORDINATOR_TYPE )
    430              case MT_ZDO_EXT_UPDATE_NWK_KEY:
    431                MT_ZdoSecUpdateNwkKey( pBuf );
    432                break;
    433          
    434              case MT_ZDO_EXT_SWITCH_NWK_KEY:
    435                MT_ZdoSecSwitchNwkKey( pBuf );
    436                break;
    437          #endif // ZDO_COORDINATOR
    438              case MT_ZDO_SEC_ADD_LINK_KEY:
    439                MT_ZdoSecAddLinkKey( pBuf );
    440                break;
    441          
    442              case MT_ZDO_SEC_ENTRY_LOOKUP_EXT:
    443                MT_ZdoSecEntryLookupExt( pBuf );
    444                break;
    445          
    446              case MT_ZDO_SEC_DEVICE_REMOVE:
    447                 MT_ZdoSecDeviceRemove( pBuf );
    448                 break;
    449          
    450              case MT_ZDO_EXT_ROUTE_DISC:
    451                 MT_ZdoExtRouteDisc( pBuf );
    452                 break;
    453          
    454              case MT_ZDO_EXT_ROUTE_CHECK:
    455                 MT_ZdoExtRouteCheck( pBuf );
    456                 break;
    457          
    458              case MT_ZDO_EXT_REMOVE_GROUP:
    459                MT_ZdoExtRemoveGroup( pBuf );
    460                break;
    461          
    462              case MT_ZDO_EXT_REMOVE_ALL_GROUP:
    463                MT_ZdoExtRemoveAllGroup( pBuf );
    464                break;
    465          
    466              case MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT:
    467                MT_ZdoExtFindAllGroupsEndpoint( pBuf );
    468                break;
    469          
    470              case MT_ZDO_EXT_FIND_GROUP:
    471                MT_ZdoExtFindGroup( pBuf );
    472                break;
    473          
    474              case MT_ZDO_EXT_ADD_GROUP:
    475                MT_ZdoExtAddGroup( pBuf );
    476                break;
    477          
    478              case MT_ZDO_EXT_COUNT_ALL_GROUPS:
    479                MT_ZdoExtCountAllGroups( pBuf );
    480                break;
    481          
    482              case MT_ZDO_EXT_RX_IDLE:
    483                MT_ZdoExtRxIdle( pBuf );
    484                break;
    485          
    486              case MT_ZDO_EXT_NWK_INFO:
    487                MT_ZdoExtNwkInfo( pBuf );
    488                break;
    489          
    490              case MT_ZDO_EXT_SEC_APS_REMOVE_REQ:
    491                MT_ZdoExtSecApsRemoveReq( pBuf );
    492                break;
    493          
    494              case MT_ZDO_FORCE_CONCENTRATOR_CHANGE:
    495                ZDApp_ForceConcentratorChange();
    496                break;
    497          
    498              case MT_ZDO_EXT_SET_PARAMS:
    499                MT_ZdoExtSetParams( pBuf );
    500                break;
    501          #endif  // MT_ZDO_EXTENSIONS
    502          
    503              default:
    504                status = MT_RPC_ERR_COMMAND_ID;
    505                break;
    506            }
    507          
    508            return status;
    509          }
    510          
    511          /***************************************************************************************************
    512           * @fn      MT_ZdoNwkAddrReq
    513           *
    514           * @brief   Handle a nwk address request.
    515           *
    516           * @param   pData  - MT message data
    517           *
    518           * @return  void
    519           ***************************************************************************************************/
    520          static void MT_ZdoNWKAddressRequest(uint8 *pBuf)
    521          {
    522            uint8 cmdId;
    523            uint8 retValue;
    524            uint8 reqType;
    525            uint8 startIndex;
    526            uint8 *pExtAddr;
    527          
    528            /* parse header */
    529            cmdId = pBuf[MT_RPC_POS_CMD1];
    530            pBuf += MT_RPC_FRAME_HDR_SZ;
    531          
    532            /* parse parameters */
    533            pExtAddr = pBuf;
    534            pBuf += Z_EXTADDR_LEN;
    535          
    536            /* Request type */
    537            reqType = *pBuf++;
    538          
    539            /* Start index */
    540            startIndex = *pBuf;
    541          
    542            retValue = (uint8)ZDP_NwkAddrReq(pExtAddr, reqType, startIndex, 0);
    543          
    544            /* Build and send back the response */
    545            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    546          
    547          #if defined ( MT_ZDO_EXTENSIONS )
    548            {
    549              // Force a response message if the ext address matches a child of this device
    550              associated_devices_t *pAssoc;
    551              uint8 buf[21];
    552              uint8 *pBuf = buf;
    553          
    554              if ( (ZSTACK_ROUTER_BUILD)
    555                && (((pAssoc = AssocGetWithExt( pExtAddr )) != NULL)
    556                       && (pAssoc->nodeRelation == CHILD_RFD)) )
    557              {
    558                uint16 nwkAddr = NLME_GetShortAddr();
    559          
    560                *pBuf++ = LO_UINT16(nwkAddr);
    561                *pBuf++ = HI_UINT16(nwkAddr);
    562                *pBuf++ = 0;
    563                *pBuf++ = LO_UINT16(NWK_addr_rsp);
    564                *pBuf++ = HI_UINT16(NWK_addr_rsp);
    565                *pBuf++ = 0;
    566                *pBuf++ = 0;
    567                *pBuf++ = LO_UINT16(nwkAddr);
    568                *pBuf++ = HI_UINT16(nwkAddr);
    569          
    570                *pBuf++ = ZSuccess;
    571          
    572                pBuf = osal_cpyExtAddr( pBuf, pExtAddr );
    573          
    574                *pBuf++ = LO_UINT16( pAssoc->shortAddr );
    575                *pBuf++ = HI_UINT16( pAssoc->shortAddr );
    576                *pBuf = 0;
    577          
    578                MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
    579                                            MT_ZDO_MSG_CB_INCOMING, 21, buf );
    580              }
    581            }
    582          #endif
    583          }
    584          
    585          /***************************************************************************************************
    586           * @fn      MT_ZdoIEEEAddrRequest
    587           *
    588           * @brief   Handle a IEEE address request.
    589           *
    590           * @param   pData  - MT message data
    591           *
    592           * @return  void
    593           ***************************************************************************************************/
    594          static void MT_ZdoIEEEAddrRequest (uint8 *pBuf)
    595          {
    596            uint8 cmdId;
    597            uint8 retValue;
    598            uint16 shortAddr;
    599            uint8 reqType;
    600            uint8 startIndex;
    601          
    602            /* parse header */
    603            cmdId = pBuf[MT_RPC_POS_CMD1];
    604            pBuf += MT_RPC_FRAME_HDR_SZ;
    605          
    606            /* Dev address */
    607            shortAddr = osal_build_uint16( pBuf );
    608            pBuf += 2;
    609          
    610            /* request type */
    611            reqType = *pBuf++;
    612          
    613            /* start index */
    614            startIndex = *pBuf;
    615          
    616            retValue = (uint8)ZDP_IEEEAddrReq(shortAddr, reqType, startIndex, 0);
    617          
    618            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    619          }
    620          
    621          /***************************************************************************************************
    622           * @fn      MT_ZdoNodeDescRequest
    623           *
    624           * @brief   Handle a Node Descriptor request.
    625           *
    626           * @param   pData  - MT message data
    627           *
    628           * @return  void
    629           ***************************************************************************************************/
    630          static void MT_ZdoNodeDescRequest (uint8 *pBuf)
    631          {
    632            uint8 cmdId;
    633            uint8 retValue;
    634            zAddrType_t destAddr;
    635            uint16 shortAddr;
    636          
    637            /* parse header */
    638            cmdId = pBuf[MT_RPC_POS_CMD1];
    639            pBuf += MT_RPC_FRAME_HDR_SZ;
    640          
    641            /* Destination address */
    642            destAddr.addrMode = Addr16Bit;
    643            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    644            pBuf += 2;
    645          
    646            /* Network address of interest */
    647            shortAddr = osal_build_uint16( pBuf );
    648          
    649            retValue = (uint8)ZDP_NodeDescReq( &destAddr, shortAddr, 0);
    650          
    651            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    652          }
    653          
    654          /***************************************************************************************************
    655           * @fn      MT_ZdoPowerDescRequest
    656           *
    657           * @brief   Handle a Power Descriptor request.
    658           *
    659           * @param   pData  - MT message data
    660           *
    661           * @return  void
    662           ***************************************************************************************************/
    663          static void MT_ZdoPowerDescRequest(uint8 *pBuf)
    664          {
    665            uint8 cmdId;
    666            uint8 retValue;
    667            zAddrType_t destAddr;
    668            uint16 shortAddr;
    669          
    670            /* parse header */
    671            cmdId = pBuf[MT_RPC_POS_CMD1];
    672            pBuf += MT_RPC_FRAME_HDR_SZ;
    673          
    674            /* Dev address */
    675            destAddr.addrMode = Addr16Bit;
    676            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    677            pBuf += 2;
    678          
    679            /* Network address of interest */
    680            shortAddr = osal_build_uint16( pBuf );
    681          
    682            retValue = (uint8)ZDP_PowerDescReq( &destAddr, shortAddr, 0);
    683          
    684            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    685          }
    686          
    687          /***************************************************************************************************
    688           * @fn      MT_ZdoSimpleDescRequest
    689           *
    690           * @brief   Handle a Simple Descriptor request.
    691           *
    692           * @param   pBuf  - MT message data
    693           *
    694           * @return  void
    695           ***************************************************************************************************/
    696          static void MT_ZdoSimpleDescRequest(uint8 *pBuf)
    697          {
    698            uint8 cmdId;
    699            uint8 retValue;
    700            uint8 epInt;
    701            zAddrType_t destAddr;
    702            uint16 shortAddr;
    703          
    704            /* parse header */
    705            cmdId = pBuf[MT_RPC_POS_CMD1];
    706            pBuf += MT_RPC_FRAME_HDR_SZ;
    707          
    708            /* Dev address */
    709            destAddr.addrMode = Addr16Bit;
    710            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    711            pBuf += 2;
    712          
    713            /* Network address of interest */
    714            shortAddr = osal_build_uint16( pBuf );
    715            pBuf += 2;
    716          
    717            /* endpoint/interface */
    718            epInt = *pBuf;
    719          
    720            retValue = (uint8)ZDP_SimpleDescReq( &destAddr, shortAddr, epInt, 0);
    721          
    722            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    723          }
    724          
    725          /***************************************************************************************************
    726           * @fn      MT_ZdoActiveEpRequest
    727           *
    728           * @brief   Handle a Active EP request.
    729           *
    730           * @param   pBuf  - MT message data
    731           *
    732           * @return  void
    733           ***************************************************************************************************/
    734          static void MT_ZdoActiveEpRequest(uint8 *pBuf)
    735          {
    736            uint8 cmdId;
    737            uint8 retValue;
    738            zAddrType_t destAddr;
    739            uint16 shortAddr;
    740          
    741            /* parse header */
    742            cmdId = pBuf[MT_RPC_POS_CMD1];
    743            pBuf += MT_RPC_FRAME_HDR_SZ;
    744          
    745            /* Dev address */
    746            destAddr.addrMode = Addr16Bit;
    747            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    748            pBuf += 2;
    749          
    750            /* Network address of interest */
    751            shortAddr = osal_build_uint16( pBuf );
    752          
    753            retValue = (uint8)ZDP_ActiveEPReq( &destAddr, shortAddr, 0);
    754          
    755            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    756          }
    757          
    758          /***************************************************************************************************
    759           * @fn      MT_ZdoMatchDescRequest
    760           *
    761           * @brief   Handle a Match Descriptor request.
    762           *
    763           * @param   pBuf  - MT message data
    764           *
    765           * @return  void
    766           ***************************************************************************************************/
    767          static void MT_ZdoMatchDescRequest(uint8 *pBuf)
    768          {
    769            uint8 cmdId;
    770            uint8 retValue = 0;
    771            uint8 i, numInClusters, numOutClusters;
    772            uint16 profileId;
    773            zAddrType_t destAddr;
    774            uint16 shortAddr;
    775            uint16 inClusters[MTZDO_MAX_MATCH_CLUSTERS], outClusters[MTZDO_MAX_MATCH_CLUSTERS];
    776          
    777            /* parse header */
    778            cmdId = pBuf[MT_RPC_POS_CMD1];
    779            pBuf += MT_RPC_FRAME_HDR_SZ;
    780          
    781            /* Dev address */
    782            destAddr.addrMode = Addr16Bit;
    783            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    784            pBuf += 2;
    785          
    786            /* Network address of interest */
    787            shortAddr = osal_build_uint16( pBuf );
    788            pBuf += 2;
    789          
    790            /* Profile ID */
    791            profileId = osal_build_uint16( pBuf );
    792            pBuf += 2;
    793          
    794            /* NumInClusters */
    795            numInClusters = *pBuf++;
    796            if ( numInClusters <= MTZDO_MAX_MATCH_CLUSTERS )
    797            {
    798              /* IN clusters */
    799              for ( i = 0; i < numInClusters; i++ )
    800              {
    801                inClusters[i] = osal_build_uint16( pBuf );
    802                pBuf += 2;
    803              }
    804            }
    805            else
    806            {
    807              retValue = ZDP_INVALID_REQTYPE;
    808            }
    809          
    810            /* NumOutClusters */
    811            numOutClusters = *pBuf++;
    812            if ( numOutClusters <= MTZDO_MAX_MATCH_CLUSTERS )
    813            {
    814              /* OUT Clusters */
    815              for ( i = 0; i < numOutClusters; i++ )
    816              {
    817                outClusters[i] = osal_build_uint16( pBuf );
    818                pBuf += 2;
    819              }
    820            }
    821            else
    822            {
    823              retValue = ZDP_INVALID_REQTYPE;
    824            }
    825          
    826            if ( retValue == 0 )
    827            {
    828              retValue = (uint8)ZDP_MatchDescReq( &destAddr, shortAddr, profileId, numInClusters,
    829                                                 inClusters, numOutClusters, outClusters, 0);
    830            }
    831          
    832            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    833          }
    834          
    835          /***************************************************************************************************
    836           * @fn      MT_ZdoComplexDescRequest
    837           *
    838           * @brief   Handle a Complex Descriptor request.
    839           *
    840           * @param   pBuf  - MT message data
    841           *
    842           * @return  void
    843           ***************************************************************************************************/
    844          static void MT_ZdoComplexDescRequest(uint8 *pBuf)
    845          {
    846            uint8 cmdId;
    847            uint8 retValue;
    848            zAddrType_t destAddr;
    849            uint16 shortAddr;
    850          
    851            /* parse header */
    852            cmdId = pBuf[MT_RPC_POS_CMD1];
    853            pBuf += MT_RPC_FRAME_HDR_SZ;
    854          
    855            /* Dev address */
    856            destAddr.addrMode = Addr16Bit;
    857            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    858            pBuf += 2;
    859          
    860            /* Network address of interest */
    861            shortAddr = osal_build_uint16( pBuf );
    862          
    863            retValue = (uint8)ZDP_ComplexDescReq( &destAddr, shortAddr, 0);
    864          
    865            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    866          }
    867          
    868          /***************************************************************************************************
    869           * @fn      MT_ZdoUserDescRequest
    870           *
    871           * @brief   Handle a User Descriptor request.
    872           *
    873           * @param   pBuf  - MT message data
    874           *
    875           * @return  void
    876           ***************************************************************************************************/
    877          static void MT_ZdoUserDescRequest(uint8 *pBuf)
    878          {
    879            uint8 cmdId;
    880            uint8 retValue;
    881            zAddrType_t destAddr;
    882            uint16 shortAddr;
    883          
    884            /* parse header */
    885            cmdId = pBuf[MT_RPC_POS_CMD1];
    886            pBuf += MT_RPC_FRAME_HDR_SZ;
    887          
    888            /* Dev address */
    889            destAddr.addrMode = Addr16Bit;
    890            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    891            pBuf += 2;
    892          
    893            /* Network address of interest */
    894            shortAddr = osal_build_uint16( pBuf );
    895          
    896            retValue = (uint8)ZDP_UserDescReq( &destAddr, shortAddr, 0);
    897          
    898            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    899          }
    900          
    901          /***************************************************************************************************
    902           * @fn      MT_ZdoEndDevAnnce
    903           *
    904           * @brief   Handle a End Device Announce Descriptor request.
    905           *
    906           * @param   pBuf  - MT message data
    907           *
    908           * @return  void
    909           ***************************************************************************************************/
    910          static void MT_ZdoEndDevAnnce(uint8 *pBuf)
    911          {
    912            uint8 cmdId;
    913            uint8 retValue;
    914            uint16 shortAddr;
    915            uint8 *pIEEEAddr;
    916          
    917            /* parse header */
    918            cmdId = pBuf[MT_RPC_POS_CMD1];
    919            pBuf += MT_RPC_FRAME_HDR_SZ;
    920          
    921            /* network address */
    922            shortAddr = osal_build_uint16( pBuf );
    923            pBuf += 2;
    924          
    925            /* extended address */
    926            pIEEEAddr = pBuf;
    927            pBuf += Z_EXTADDR_LEN;
    928          
    929            retValue = (uint8)ZDP_DeviceAnnce( shortAddr, pIEEEAddr, *pBuf, 0);
    930          
    931            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    932          }
    933          
    934          /***************************************************************************************************
    935           * @fn      MT_ZdoUserDescSet
    936           *
    937           * @brief   Handle a User Descriptor Set.
    938           *
    939           * @param   pBuf  - MT message data
    940           *
    941           * @return  void
    942           ***************************************************************************************************/
    943          static void MT_ZdoUserDescSet(uint8 *pBuf)
    944          {
    945            uint8 cmdId;
    946            uint8 retValue;
    947            zAddrType_t destAddr;
    948            uint16 shortAddr;
    949            UserDescriptorFormat_t userDesc;
    950          
    951            /* parse header */
    952            cmdId = pBuf[MT_RPC_POS_CMD1];
    953            pBuf += MT_RPC_FRAME_HDR_SZ;
    954          
    955            /* Dev address */
    956            destAddr.addrMode = Addr16Bit;
    957            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    958            pBuf += 2;
    959          
    960            /* Network address of interest */
    961            shortAddr = osal_build_uint16( pBuf );
    962            pBuf += 2;
    963          
    964            /* User descriptor */
    965            userDesc.len = *pBuf++;
    966            osal_memcpy( userDesc.desc, pBuf, userDesc.len );
    967          
    968            retValue = (uint8)ZDP_UserDescSet( &destAddr, shortAddr, &userDesc, 0);
    969          
    970            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    971          }
    972          
    973          /***************************************************************************************************
    974           * @fn      MT_ZdoServiceDiscRequest
    975           *
    976           * @brief   Handle a Server Discovery request.
    977           *
    978           * @param   pBuf  - MT message data
    979           *
    980           * @return  void
    981           ***************************************************************************************************/
    982          static void MT_ZdoServiceDiscRequest(uint8 *pBuf)
    983          {
    984            uint8 cmdId;
    985            uint8 retValue;
    986            uint16 serviceMask;
    987          
    988            /* parse header */
    989            cmdId = pBuf[MT_RPC_POS_CMD1];
    990            pBuf += MT_RPC_FRAME_HDR_SZ;
    991          
    992            /* Service Mask */
    993            serviceMask = osal_build_uint16( pBuf );
    994          
    995            retValue = (uint8)ZDP_ServerDiscReq( serviceMask, 0);
    996          
    997            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    998          }
    999          
   1000          /***************************************************************************************************
   1001           * @fn      MT_ZdoEndDevBindRequest
   1002           *
   1003           * @brief   Handle a End Device Bind request.
   1004           *
   1005           * @param   pBuf  - MT message data
   1006           *
   1007           * @return  void
   1008           ***************************************************************************************************/
   1009          static void MT_ZdoEndDevBindRequest(uint8 *pBuf)
   1010          {
   1011            uint8 cmdId;
   1012            uint8 retValue = 0;
   1013            uint8 i, epInt, numInClusters, numOutClusters;
   1014            zAddrType_t destAddr;
   1015            uint16 shortAddr;
   1016            uint16 profileID, inClusters[MTZDO_MAX_ED_BIND_CLUSTERS], outClusters[MTZDO_MAX_ED_BIND_CLUSTERS];
   1017          
   1018            /* parse header */
   1019            cmdId = pBuf[MT_RPC_POS_CMD1];
   1020            pBuf += MT_RPC_FRAME_HDR_SZ;
   1021          
   1022            /* Dev address */
   1023            destAddr.addrMode = Addr16Bit;
   1024            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1025            pBuf += 2;
   1026          
   1027            /* Local coordinator of the binding */
   1028            shortAddr = osal_build_uint16( pBuf );
   1029            pBuf += 2;
   1030          
   1031            /* For now, skip past the extended address */
   1032            pBuf += Z_EXTADDR_LEN;
   1033          
   1034            /* Endpoint */
   1035            epInt = *pBuf++;
   1036          
   1037            /* Profile ID */
   1038            profileID = osal_build_uint16( pBuf );
   1039            pBuf += 2;
   1040          
   1041            /* NumInClusters */
   1042            numInClusters = *pBuf++;
   1043            if ( numInClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   1044            {
   1045              for ( i = 0; i < numInClusters; i++ )
   1046              {
   1047                inClusters[i] = osal_build_uint16( pBuf );
   1048                pBuf += 2;
   1049              }
   1050            }
   1051            else
   1052            {
   1053              retValue = ZDP_INVALID_REQTYPE;
   1054            }
   1055          
   1056            /* NumOutClusters */
   1057            numOutClusters = *pBuf++;
   1058            if ( numOutClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   1059            {
   1060              for ( i = 0; i < numOutClusters; i++ )
   1061              {
   1062                outClusters[i] = osal_build_uint16( pBuf );
   1063                pBuf += 2;
   1064              }
   1065            }
   1066            else
   1067            {
   1068              retValue = ZDP_INVALID_REQTYPE;
   1069            }
   1070          
   1071            if ( retValue == 0 )
   1072            {
   1073              retValue = (uint8)ZDP_EndDeviceBindReq( &destAddr, shortAddr, epInt, profileID,
   1074                                                    numInClusters, inClusters, numOutClusters, outClusters, 0);
   1075            }
   1076          
   1077            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1078          }
   1079          
   1080          /***************************************************************************************************
   1081           * @fn      MT_ZdoBindRequest
   1082           *
   1083           * @brief   Handle a Bind request.
   1084           *
   1085           * @param   pBuf  - MT message data
   1086           *
   1087           * @return  void
   1088           ***************************************************************************************************/
   1089          static void MT_ZdoBindRequest(uint8 *pBuf)
   1090          {
   1091            uint8 cmdId;
   1092            uint8 retValue;
   1093            zAddrType_t destAddr, devAddr;
   1094            uint8 *pSrcAddr, *ptr;
   1095            uint8 srcEPInt, dstEPInt;
   1096            uint16 clusterID;
   1097          
   1098            /* parse header */
   1099            cmdId = pBuf[MT_RPC_POS_CMD1];
   1100            pBuf += MT_RPC_FRAME_HDR_SZ;
   1101          
   1102            /* Dev address */
   1103            destAddr.addrMode = Addr16Bit;
   1104            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1105            pBuf += 2;
   1106          
   1107            /* SrcAddress */
   1108            pSrcAddr = pBuf;
   1109            pBuf += Z_EXTADDR_LEN;
   1110          
   1111            /* SrcEPInt */
   1112            srcEPInt = *pBuf++;
   1113          
   1114            /* ClusterID */
   1115            clusterID = osal_build_uint16( pBuf );
   1116            pBuf += 2;
   1117          
   1118            /* Destination Address mode */
   1119            devAddr.addrMode = *pBuf++;
   1120          
   1121            /* Destination Address */
   1122            if ( devAddr.addrMode == Addr64Bit )
   1123            {
   1124              ptr = pBuf;
   1125              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   1126            }
   1127            else
   1128            {
   1129              devAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1130            }
   1131            /* The short address occupies LSB two bytes */
   1132            pBuf += Z_EXTADDR_LEN;
   1133          
   1134            /* DstEPInt */
   1135            dstEPInt = *pBuf;
   1136          
   1137            retValue = (uint8)ZDP_BindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   1138          
   1139            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1140          }
   1141          
   1142          /***************************************************************************************************
   1143           * @fn      MT_ZdoUnbindRequest
   1144           *
   1145           * @brief   Handle a Unbind request.
   1146           *
   1147           * @param   pBuf  - MT message data
   1148           *
   1149           * @return  void
   1150           ***************************************************************************************************/
   1151          static void MT_ZdoUnbindRequest(uint8 *pBuf)
   1152          {
   1153            uint8 cmdId;
   1154            uint8 retValue;
   1155            zAddrType_t destAddr, devAddr;
   1156            uint8 *pSrcAddr, *ptr;
   1157            uint8 srcEPInt, dstEPInt;
   1158            uint16 clusterID;
   1159          
   1160            /* parse header */
   1161            cmdId = pBuf[MT_RPC_POS_CMD1];
   1162            pBuf += MT_RPC_FRAME_HDR_SZ;
   1163          
   1164            /* dev address */
   1165            destAddr.addrMode = Addr16Bit;
   1166            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1167            pBuf += 2;
   1168          
   1169            /* SrcAddress */
   1170            pSrcAddr = pBuf;
   1171            pBuf += Z_EXTADDR_LEN;
   1172          
   1173            /* SrcEPInt */
   1174            srcEPInt = *pBuf++;
   1175          
   1176            /* ClusterID */
   1177            clusterID = osal_build_uint16( pBuf );
   1178            pBuf += 2;
   1179          
   1180            /* Destination Address mode */
   1181            devAddr.addrMode = *pBuf++;
   1182          
   1183            /* Destination Address */
   1184            if ( devAddr.addrMode == Addr64Bit )
   1185            {
   1186              ptr = pBuf;
   1187              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   1188            }
   1189            else
   1190            {
   1191              devAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1192            }
   1193            /* The short address occupies LSB two bytes */
   1194            pBuf += Z_EXTADDR_LEN;
   1195          
   1196            /* dstEPInt */
   1197            dstEPInt = *pBuf;
   1198          
   1199            retValue = (uint8)ZDP_UnbindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   1200          
   1201            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1202          }
   1203          
   1204          #if defined (MT_SYS_KEY_MANAGEMENT)
   1205          /***************************************************************************************************
   1206           * @fn      MT_ZdoSetLinkKey
   1207           *
   1208           * @brief   Set an application or trust center link key.
   1209           *
   1210           * @param   pBuf  - MT message data
   1211           *
   1212           * @return  void
   1213           ***************************************************************************************************/
   1214          static void MT_ZdoSetLinkKey(uint8 *pBuf)
   1215          {
   1216            uint8 cmdId;
   1217            uint8 retValue;
   1218            uint8 *pExtAddr;
   1219            uint8 *pKey;
   1220            uint16 shortAddr;
   1221          
   1222            /* parse header */
   1223            cmdId = pBuf[MT_RPC_POS_CMD1];
   1224            pBuf += MT_RPC_FRAME_HDR_SZ;
   1225          
   1226            /* ShortAddr */
   1227            shortAddr = osal_build_uint16( pBuf );
   1228            pBuf += 2;
   1229          
   1230            /* Extended Addr */
   1231            pExtAddr = pBuf;
   1232            pBuf += Z_EXTADDR_LEN;
   1233          
   1234            /* Key data */
   1235            pKey = pBuf;
   1236          
   1237            retValue = (uint8)ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pKey);
   1238          
   1239            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1240          }
   1241          
   1242          /***************************************************************************************************
   1243           * @fn      MT_ZdoRemoveLinkKey
   1244           *
   1245           * @brief   Remove an application or trust center link key.
   1246           *
   1247           * @param   pBuf  - MT message data
   1248           *
   1249           * @return  void
   1250           ***************************************************************************************************/
   1251          static void MT_ZdoRemoveLinkKey(uint8 *pBuf)
   1252          {
   1253            uint8 cmdId;
   1254            uint8 retValue = ZNwkUnknownDevice;
   1255            uint8 *pExtAddr;
   1256          
   1257            /* parse header */
   1258            cmdId = pBuf[MT_RPC_POS_CMD1];
   1259            pBuf += MT_RPC_FRAME_HDR_SZ;
   1260          
   1261            /* ShortAddr */
   1262            pExtAddr = pBuf;
   1263            
   1264            if( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ))
   1265            {
   1266              uint16 tempIndex;
   1267              APSME_TCLKDevEntry_t TCLKDevEntry;
   1268              uint8 found;
   1269                                                             //Reset the frame counter associated to this device  TCLinkKeyFrmCntr
   1270              tempIndex = APSME_SearchTCLinkKeyEntry(pExtAddr,&found, &TCLKDevEntry);
   1271              
   1272              if(found)
   1273              {
   1274                uint8 i;
   1275                
   1276                i = tempIndex - ZCD_NV_TCLK_TABLE_START;
   1277                
   1278                TCLinkKeyFrmCntr[i].txFrmCntr = 0;
   1279                TCLinkKeyFrmCntr[i].rxFrmCntr = 0;
   1280                
   1281                if(TCLKDevEntry.keyAttributes == ZG_PROVISIONAL_KEY)
   1282                {
   1283                  APSME_EraseICEntry(&TCLKDevEntry.SeedShift_IcIndex);
   1284                }
   1285                
   1286                osal_memset(&TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
   1287                osal_nv_write( ( tempIndex), 0, sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
   1288                retValue = ZSuccess;
   1289              }
   1290            }
   1291            else
   1292            {
   1293              retValue = ZDSecMgrDeviceRemoveByExtAddr( pExtAddr );
   1294            }
   1295            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1296          }
   1297          
   1298          /***************************************************************************************************
   1299           * @fn      MT_ZdoGetLinkKey
   1300           *
   1301           * @brief   Get the application link key.
   1302           *
   1303           * @param   pBuf  - MT message data
   1304           *
   1305           * @return  void
   1306           ***************************************************************************************************/
   1307          static void MT_ZdoGetLinkKey(uint8 *pBuf)
   1308          {
   1309            uint8 cmdId;
   1310            uint8 retValue;
   1311            uint8 *pExtAddr;
   1312            uint8 *retBuf = NULL;
   1313            uint8 len;
   1314            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   1315            uint16 apsLinkKeyNvId;
   1316          
   1317            // parse header
   1318            len = pBuf[MT_RPC_POS_LEN];
   1319            cmdId = pBuf[MT_RPC_POS_CMD1];
   1320            pBuf += MT_RPC_FRAME_HDR_SZ;
   1321          
   1322            // Extended Address
   1323            pExtAddr = pBuf;
   1324          
   1325            // Check for illegal extended address -- indicating network address lookup
   1326            if ( ( pExtAddr[2] == 0xFE ) && ( pExtAddr[3] == 0xFF ) &&
   1327                 ( len >= Z_EXTADDR_LEN )            )
   1328            {
   1329              uint16 nwkAddr;
   1330              nwkAddr = osal_build_uint16( pExtAddr );
   1331              (void)AddrMgrExtAddrLookup( nwkAddr, pExtAddr );
   1332            }
   1333          
   1334            // Fetch the key NV ID
   1335            retValue = APSME_LinkKeyNVIdGet( pExtAddr, &apsLinkKeyNvId );
   1336          
   1337            if (retValue == ZSuccess)
   1338            {
   1339              if ((pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t))) != NULL)
   1340              {
   1341                // retrieve key from NV
   1342                if (osal_nv_read( apsLinkKeyNvId, 0,
   1343                                 sizeof(APSME_LinkKeyData_t), pApsLinkKey) != SUCCESS)
   1344                {
   1345                  retValue = ZNwkUnknownDevice;
   1346                }
   1347              }
   1348              else
   1349              {
   1350                retValue = ZNwkUnknownDevice;
   1351              }
   1352            }
   1353          
   1354            // Construct the response message
   1355            len = MT_ZDO_STATUS_LEN + Z_EXTADDR_LEN + SEC_KEY_LEN; // status + extAddr + key
   1356            if ((retBuf = (uint8 *)osal_mem_alloc(len)) != NULL)
   1357            {
   1358              if (retValue == ZSuccess)
   1359              {
   1360                // Extended Address
   1361                osal_memcpy( &(retBuf[1]), pExtAddr, Z_EXTADDR_LEN );
   1362          
   1363                // Key data
   1364                osal_memcpy( &(retBuf[1 + Z_EXTADDR_LEN]), pApsLinkKey->key, SEC_KEY_LEN );
   1365              }
   1366              else
   1367              {
   1368                // Failed case - set the rest fields to all FF
   1369                osal_memset( &(retBuf[1]), 0xFF, Z_EXTADDR_LEN + SEC_KEY_LEN );
   1370              }
   1371          
   1372              retBuf[0] = retValue;  // Status
   1373          
   1374              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, len, retBuf);
   1375          
   1376              // clear retBuf because it contains key data and free allocated memory
   1377              osal_memset(retBuf, 0x00, len);
   1378          
   1379              osal_mem_free(retBuf);
   1380            }
   1381          
   1382            // clear copy of key in RAM
   1383            if (pApsLinkKey != NULL)
   1384            {
   1385              osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   1386          
   1387              osal_mem_free(pApsLinkKey);
   1388            }
   1389          
   1390            return;
   1391          }
   1392          #endif // MT_SYS_KEY_MANAGEMENT
   1393          
   1394          #if defined (MT_ZDO_MGMT)
   1395          /***************************************************************************************************
   1396           * @fn      MT_ZdoMgmtNwkDiscRequest
   1397           *
   1398           * @brief   Handle a Mgmt Nwk Discovery request.
   1399           *
   1400           * @param   pBuf  - MT message data
   1401           *
   1402           * @return  void
   1403           ***************************************************************************************************/
   1404          static void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf)
   1405          {
   1406            uint8 cmdId;
   1407            uint8 retValue;
   1408            zAddrType_t destAddr;
   1409            uint32 scanChannels;
   1410            uint8 scanDuration, startIndex;
   1411          
   1412            /* parse header */
   1413            cmdId = pBuf[MT_RPC_POS_CMD1];
   1414            pBuf += MT_RPC_FRAME_HDR_SZ;
   1415          
   1416            /* Dev address */
   1417            destAddr.addrMode = Addr16Bit;
   1418            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1419            pBuf += 2;
   1420          
   1421            /* Scan Channels */
   1422            scanChannels = osal_build_uint32(pBuf, 4);
   1423            pBuf += 4;
   1424          
   1425            /* Scan Duration */
   1426            scanDuration = *pBuf++;
   1427          
   1428            /* Start Index */
   1429            startIndex = *pBuf;
   1430          
   1431            retValue = (uint8)ZDP_MgmtNwkDiscReq( &destAddr, scanChannels, scanDuration, startIndex, 0);
   1432          
   1433            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1434          }
   1435          
   1436          /***************************************************************************************************
   1437           * @fn      MT_ZdoMgmtLqiRequest
   1438           *
   1439           * @brief   Handle a Mgmt Lqi request.
   1440           *
   1441           * @param   pBuf  - MT message data
   1442           *
   1443           * @return  void
   1444           ***************************************************************************************************/
   1445          static void MT_ZdoMgmtLqiRequest(uint8 *pBuf)
   1446          {
   1447            uint8 cmdId;
   1448            uint8 retValue;
   1449            zAddrType_t destAddr;
   1450            uint8 startIndex;
   1451          
   1452            /* parse header */
   1453            cmdId = pBuf[MT_RPC_POS_CMD1];
   1454            pBuf += MT_RPC_FRAME_HDR_SZ;
   1455          
   1456            /* Dev address */
   1457            destAddr.addrMode = Addr16Bit;
   1458            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1459            pBuf += 2;
   1460          
   1461            /* Start Index */
   1462            startIndex = *pBuf;
   1463          
   1464            retValue = (uint8)ZDP_MgmtLqiReq( &destAddr, startIndex, 0);
   1465          
   1466            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1467          }
   1468          
   1469          /***************************************************************************************************
   1470           * @fn      MT_ZdoMgmtRtgRequest
   1471           *
   1472           * @brief   Handle a Mgmt Rtg request.
   1473           *
   1474           * @param   pBuf  - MT message data
   1475           *
   1476           * @return  void
   1477           ***************************************************************************************************/
   1478          static void MT_ZdoMgmtRtgRequest(uint8 *pBuf)
   1479          {
   1480            uint8 cmdId;
   1481            uint8 retValue;
   1482            zAddrType_t destAddr;
   1483            uint8 startIndex;
   1484          
   1485            /* parse header */
   1486            cmdId = pBuf[MT_RPC_POS_CMD1];
   1487            pBuf += MT_RPC_FRAME_HDR_SZ;
   1488          
   1489            /* Dev Address */
   1490            destAddr.addrMode = Addr16Bit;
   1491            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1492            pBuf += 2;
   1493          
   1494            /* Start Index */
   1495            startIndex = *pBuf;
   1496          
   1497            retValue = (byte)ZDP_MgmtRtgReq( &destAddr, startIndex, 0);
   1498          
   1499            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1500          }
   1501          
   1502          /***************************************************************************************************
   1503           * @fn      MT_ZdoMgmtBindRequest
   1504           *
   1505           * @brief   Handle a Mgmt Bind request.
   1506           *
   1507           * @param   pBuf  - MT message data
   1508           *
   1509           * @return  void
   1510           ***************************************************************************************************/
   1511          static void MT_ZdoMgmtBindRequest(uint8 *pBuf)
   1512          {
   1513            uint8 cmdId;
   1514            uint8 retValue;
   1515            zAddrType_t destAddr;
   1516            uint8 startIndex;
   1517          
   1518            /* parse header */
   1519            cmdId = pBuf[MT_RPC_POS_CMD1];
   1520            pBuf += MT_RPC_FRAME_HDR_SZ;
   1521          
   1522            /* Dev Address */
   1523            destAddr.addrMode = Addr16Bit;
   1524            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1525            pBuf += 2;
   1526          
   1527            /* Start Index */
   1528            startIndex = *pBuf;
   1529          
   1530            retValue = (uint8)ZDP_MgmtBindReq( &destAddr, startIndex, 0);
   1531          
   1532            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1533          }
   1534          
   1535          /***************************************************************************************************
   1536           * @fn      MT_ZdoMgmtLeaveRequest
   1537           *
   1538           * @brief   Handle a Mgmt Leave request.
   1539           *
   1540           * @param   pBuf  - MT message data
   1541           *
   1542           * @return  void
   1543           ***************************************************************************************************/
   1544          static void MT_ZdoMgmtLeaveRequest(uint8 *pBuf)
   1545          {
   1546            uint8 cmdId;
   1547            uint8 retValue;
   1548            zAddrType_t destAddr;
   1549            uint8 *pIEEEAddr;
   1550            uint8 removeChildren;
   1551            uint8 rejoin;
   1552          
   1553            /* parse header */
   1554            cmdId = pBuf[MT_RPC_POS_CMD1];
   1555            pBuf += MT_RPC_FRAME_HDR_SZ;
   1556          
   1557            /* Destination Address */
   1558            destAddr.addrMode = Addr16Bit;
   1559            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1560            pBuf += 2;
   1561          
   1562            /* IEEE address */
   1563            pIEEEAddr = pBuf;
   1564            pBuf += Z_EXTADDR_LEN;
   1565          
   1566            /* Rejoin if bit0 is set */
   1567            rejoin = ( *pBuf & 0x01 ) ? TRUE : FALSE;
   1568          
   1569            /* Remove Children if bit1 is set */
   1570            removeChildren = ( *pBuf & 0x02 ) ? TRUE : FALSE;
   1571          
   1572            retValue = (byte)ZDP_MgmtLeaveReq( &destAddr, pIEEEAddr, removeChildren, rejoin, 0);
   1573          
   1574            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1575          }
   1576          
   1577          /***************************************************************************************************
   1578           * @fn      MT_ZdoMgmtDirectJoinRequest
   1579           *
   1580           * @brief   Handle a Mgmt Direct Join request.
   1581           *
   1582           * @param   pBuf  - MT message data
   1583           *
   1584           * @return  void
   1585           ***************************************************************************************************/
   1586          static void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf)
   1587          {
   1588            uint8 cmdId;
   1589            uint8 retValue;
   1590            zAddrType_t destAddr;
   1591            uint8 *deviceAddr;
   1592            uint8 capInfo;
   1593          
   1594            /* parse header */
   1595            cmdId = pBuf[MT_RPC_POS_CMD1];
   1596            pBuf += MT_RPC_FRAME_HDR_SZ;
   1597          
   1598            /* Destination Address */
   1599            destAddr.addrMode = Addr16Bit;
   1600            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1601            pBuf += 2;
   1602          
   1603            /* Device Address */
   1604            deviceAddr = pBuf;
   1605            pBuf += Z_EXTADDR_LEN;
   1606          
   1607            /* Capability information */
   1608            capInfo = *pBuf;
   1609          
   1610            retValue = (uint8)ZDP_MgmtDirectJoinReq( &destAddr, deviceAddr, capInfo, 0);
   1611          
   1612            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1613          }
   1614          
   1615          /***************************************************************************************************
   1616           * @fn      MT_ZdoMgmtPermitJoinRequest
   1617           *
   1618           * @brief   Handle a Mgmt Permit Join request.
   1619           *
   1620           * @param   pBuf  - MT message data
   1621           *
   1622           * @return  void
   1623           ***************************************************************************************************/
   1624          static void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf)
   1625          {
   1626            uint8 cmdId;
   1627            uint8 dataLn;
   1628            uint8 retValue;
   1629            uint8 duration;
   1630            uint8 tcSignificance;
   1631            zAddrType_t destAddr;
   1632          
   1633            /* parse header */
   1634            dataLn = pBuf[MT_RPC_POS_LEN];
   1635            cmdId = pBuf[MT_RPC_POS_CMD1];
   1636            pBuf += MT_RPC_FRAME_HDR_SZ;
   1637          
   1638            if ( 4 == dataLn )
   1639            {
   1640              /* addrMode was hardwired up to Z-Stack 2.6.0 */
   1641              destAddr.addrMode = afAddr16Bit;
   1642            }
   1643            else
   1644            {
   1645              /* addrMode is a parameter after Z-Stack 2.6.0 */
   1646              destAddr.addrMode = *pBuf++;
   1647            }
   1648          
   1649            /* Destination Address */
   1650            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1651            pBuf += 2;
   1652          
   1653            /* Duration */
   1654            duration = *pBuf++;
   1655          
   1656            /* Trust center significance */
   1657            tcSignificance = *pBuf;
   1658          
   1659            ignoreIndication = TRUE;
   1660            retValue = (uint8)ZDP_MgmtPermitJoinReq( &destAddr, duration, tcSignificance, 0);
   1661            ignoreIndication = FALSE;
   1662          
   1663            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1664          }
   1665          
   1666          /***************************************************************************************************
   1667           * @fn      MT_ZdoMgmtNwkUpdateRequest
   1668           *
   1669           * @brief   Handle a Mgmt Nwk Update request.
   1670           *
   1671           * @param   pBuf  - MT message data
   1672           *
   1673           * @return  void
   1674           ***************************************************************************************************/
   1675          static void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf)
   1676          {
   1677            uint8 cmdId;
   1678            uint8 retValue;
   1679            zAddrType_t destAddr;
   1680            uint32 channelMask;
   1681            uint8 scanDuration, scanCount;
   1682            uint16 nwkManagerAddr;
   1683          
   1684              /* parse header */
   1685            cmdId = pBuf[MT_RPC_POS_CMD1];
   1686            pBuf += MT_RPC_FRAME_HDR_SZ;
   1687          
   1688            /* Destination address */
   1689            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1690            pBuf += 2;
   1691          
   1692            /* Destination address mode */
   1693            destAddr.addrMode = *pBuf++;
   1694          
   1695            channelMask = osal_build_uint32(pBuf, 4);
   1696            pBuf += 4;
   1697          
   1698            /* Scan duration */
   1699            scanDuration = *pBuf++;
   1700          
   1701            /* Scan count */
   1702            scanCount = *pBuf++;
   1703          
   1704            /* NWK manager address */
   1705            nwkManagerAddr = osal_build_uint16( pBuf );
   1706          
   1707            /* Send the Management Network Update request */
   1708            retValue = (uint8)ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1709                                                    scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   1710          
   1711            /*
   1712              Since we don't recevied our own broadcast messages, we should
   1713              send a unicast copy of the message to ourself.
   1714            */
   1715            if ( destAddr.addrMode == AddrBroadcast )
   1716            {
   1717              destAddr.addrMode = Addr16Bit;
   1718              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   1719              retValue = (uint8) ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1720                                                       scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   1721            }
   1722          
   1723            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1724          }
   1725          #endif /* MT_ZDO_MGMT */
   1726          
   1727          /***************************************************************************************************
   1728           * @fn      MT_ZdoSendData
   1729           *
   1730           * @brief   Handle a ZDO Send Data request.
   1731           *
   1732           * @param   pBuf  - MT message data
   1733           *
   1734           * @return  void
   1735           ***************************************************************************************************/
   1736          static void MT_ZdoSendData( uint8 *pBuf )
   1737          {
   1738            uint8 cmdId;
   1739            uint8 retValue;
   1740            zAddrType_t destAddr;
   1741            uint8 transSeq;
   1742            uint8 len;
   1743            uint16 cmd;
   1744          
   1745              /* parse header */
   1746            cmdId = pBuf[MT_RPC_POS_CMD1];
   1747            pBuf += MT_RPC_FRAME_HDR_SZ;
   1748          
   1749            /* Destination address */
   1750            destAddr.addrMode = Addr16Bit;
   1751            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1752            pBuf += 2;
   1753          
   1754            /* Destination address mode */
   1755            transSeq = *pBuf++;
   1756          
   1757            /* cmd */
   1758            cmd = osal_build_uint16( pBuf );
   1759            pBuf += 2;
   1760            len = *pBuf++;
   1761          
   1762            /* Send the Generic ZDO message request */
   1763            retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
   1764            /*
   1765              Since we don't recevied our own broadcast messages, we should
   1766              send a unicast copy of the message to ourself.
   1767            */
   1768            if ( destAddr.addrMode == AddrBroadcast )
   1769            {
   1770              destAddr.addrMode = Addr16Bit;
   1771              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   1772              retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
   1773            }
   1774          
   1775            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1776          }
   1777          
   1778          /***************************************************************************************************
   1779           * @fn      MT_ZdoNwkAddrOfInterestReq
   1780           *
   1781           * @brief   Handle a ZDO Network Address of Interest request.
   1782           *
   1783           * @param   pBuf  - MT message data
   1784           *
   1785           * @return  void
   1786           ***************************************************************************************************/
   1787          static void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf )
   1788          {
   1789            uint8 cmdId;
   1790            uint8 retValue;
   1791            zAddrType_t destAddr;
   1792            uint16 nwkAddr;
   1793            uint8 cmd;
   1794          
   1795              /* parse header */
   1796            cmdId = pBuf[MT_RPC_POS_CMD1];
   1797            pBuf += MT_RPC_FRAME_HDR_SZ;
   1798          
   1799            /* Destination address */
   1800            destAddr.addrMode = Addr16Bit;
   1801            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1802            pBuf += 2;
   1803          
   1804            /* Network Address of Interest */
   1805            nwkAddr = osal_build_uint16( pBuf );
   1806            pBuf += 2;
   1807          
   1808            cmd = *pBuf++;
   1809          
   1810            /* Send the Generic ZDO message request */
   1811            retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
   1812          
   1813          
   1814            /*
   1815              Since we don't recevied our own broadcast messages, we should
   1816              send a unicast copy of the message to ourself.
   1817            */
   1818            if ( destAddr.addrMode == AddrBroadcast )
   1819            {
   1820              destAddr.addrMode = Addr16Bit;
   1821              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   1822              retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
   1823            }
   1824          
   1825            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1826          }
   1827          
   1828          /***************************************************************************************************
   1829           * @fn      MT_ZdoStartupFromApp
   1830           *
   1831           * @brief   Handle a Startup from App request.
   1832           *
   1833           * @param   pBuf  - MT message data
   1834           *
   1835           * @return  void
   1836           ***************************************************************************************************/
   1837          static void MT_ZdoStartupFromApp(uint8 *pBuf)
   1838          {
   1839            uint8 cmd0, cmd1, retValue;
   1840          
   1841            /* parse header */
   1842            cmd0 = pBuf[MT_RPC_POS_CMD0];
   1843            cmd1 = pBuf[MT_RPC_POS_CMD1];
   1844            pBuf += MT_RPC_FRAME_HDR_SZ;
   1845          
   1846            retValue = ZDOInitDevice(100);
   1847          
   1848            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   1849            {
   1850              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1,1, &retValue);
   1851            }
   1852          }
   1853          
   1854          /***************************************************************************************************
   1855           * @fn      MT_ZdoStartupFromAppEx
   1856           *
   1857           * @brief   Handle a Startup from App request Extended.
   1858           *
   1859           * @param   pBuf  - MT message data
   1860           *
   1861           * @return  void
   1862           ***************************************************************************************************/
   1863          static void MT_ZdoStartupFromAppEx(uint8 *pBuf)
   1864          {
   1865            uint8 cmd0, cmd1, retValue;
   1866            uint8 delay, mode;
   1867          
   1868            /* parse header */
   1869            cmd0 = pBuf[MT_RPC_POS_CMD0];
   1870            cmd1 = pBuf[MT_RPC_POS_CMD1];
   1871            pBuf += MT_RPC_FRAME_HDR_SZ;
   1872            delay = *pBuf;
   1873            pBuf++;
   1874            mode = *pBuf;
   1875            
   1876            retValue = ZDOInitDeviceEx(delay, mode);
   1877          
   1878            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   1879            {
   1880              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1,1, &retValue);
   1881            }
   1882          }
   1883          
   1884          /***************************************************************************************************
   1885           * @fn      MT_ZdoNetworkDiscoveryReq
   1886           *
   1887           * @brief   Handle a ZDO Network Discovery request.
   1888           *
   1889           * @param   pBuf  - MT message data
   1890           *
   1891           * @return  void
   1892           ***************************************************************************************************/
   1893          static void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf)
   1894          {
   1895            uint8  retValue = ZFailure;
   1896            uint8  cmdId;
   1897            uint32 scanChannels;
   1898          
   1899            /* parse header */
   1900            cmdId = pBuf[MT_RPC_POS_CMD1];
   1901            pBuf += MT_RPC_FRAME_HDR_SZ;
   1902          
   1903            /* Packet format */
   1904            /* scan channels (4) | scan duration (1) */
   1905          
   1906            /* Scan channels */
   1907            scanChannels = osal_build_uint32(pBuf, 4);
   1908            pBuf += 4;
   1909          
   1910            retValue = ZDApp_NetworkDiscoveryReq(scanChannels, *pBuf);
   1911          
   1912            // Register ZDO callback for MT to handle the network discovery confirm
   1913            // and beacon notification confirm
   1914            ZDO_RegisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID, &MT_ZdoNwkDiscoveryCnfCB );
   1915            ZDO_RegisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID, &MT_ZdoBeaconIndCB );
   1916          
   1917            /* Build and send back the response */
   1918            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
   1919          }
   1920          
   1921          
   1922          /***************************************************************************************************
   1923           * @fn      MT_ZdoJoinReq
   1924           *
   1925           * @brief   Handle a ZDO Join request.
   1926           *
   1927           * @param   pBuf  - MT message data
   1928           *
   1929           * @return  void
   1930           ***************************************************************************************************/
   1931          static void MT_ZdoJoinReq(uint8 *pBuf)
   1932          {
   1933            uint8  retValue = ZFailure;
   1934            uint8  cmdId;
   1935            uint16 panId;
   1936            uint16 chosenParent;
   1937          
   1938            /* parse header */
   1939            cmdId = pBuf[MT_RPC_POS_CMD1];
   1940            pBuf += MT_RPC_FRAME_HDR_SZ;
   1941          
   1942            /* Packet format */
   1943            /* channel     (1) | panID (2) | extendedPanID (8) | chosenParent (2) |
   1944             * parentDepth (1) | stackProfile  (1)
   1945             */
   1946          
   1947            panId        = osal_build_uint16( &pBuf[1] );
   1948            chosenParent = osal_build_uint16( &pBuf[11] );
   1949          
   1950            retValue = ZDApp_JoinReq(pBuf[0], panId, &(pBuf[3]), chosenParent, pBuf[13], pBuf[14]);
   1951          
   1952            /* Register for MT to receive Join Confirm */
   1953            ZDO_RegisterForZdoCB( ZDO_JOIN_CNF_CBID, &MT_ZdoJoinCnfCB );
   1954          
   1955            /* Build and send back the response */
   1956            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
   1957          
   1958          }
   1959          
   1960          
   1961          /***************************************************************************************************
   1962           * @fn          MT_ZdoNwkDiscoveryCnfCB
   1963           *
   1964           * @brief       Send an indication to inform host device the completion of
   1965           *              network discovery scan
   1966           *
   1967           * @param       pStr - pointer to a parameter and a structure of parameters
   1968           *
   1969           * @return      void
   1970           ***************************************************************************************************/
   1971          void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr )
   1972          {
   1973            /* pStr: status (uint8) */
   1974            /* Packet Format */
   1975            /* Status (1) */
   1976          
   1977            // Scan completed. De-register the callback with ZDO
   1978            ZDO_DeregisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID );
   1979            ZDO_DeregisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID );
   1980          
   1981            // Send the buffered beacon indication
   1982            MT_ZdoBeaconIndCB ( NULL );
   1983          
   1984            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1985                                                   MT_ZDO_NWK_DISCOVERY_CNF, 1, pStr);
   1986            return NULL;
   1987          }
   1988          
   1989          /***************************************************************************************************
   1990           * @fn          MT_ZdoBeaconIndCB
   1991           *
   1992           * @brief       Send an indication to host device of a beacon notification
   1993           *
   1994           * @param       pStr -  pointer to a parameter and a structure of parameters
   1995           *
   1996           * @return      void
   1997           ***************************************************************************************************/
   1998          void *MT_ZdoBeaconIndCB ( void *pStr )
   1999          {
   2000            zdoBeaconInd_t *pBeacon = pStr;
   2001            uint8 *pTmp;
   2002          
   2003            /* Packet Format */
   2004            /* devCnt (1) | device #1 (21) | device #2 (21) |... | device #n (21) */
   2005          
   2006            if( pStr != NULL)
   2007            {
   2008              if( pBeaconIndBuf == NULL )
   2009              {
   2010                // If pBeaconIndBuf has not been allocated yet
   2011                // allocate memory now with MAX_UART_TX_BUFF
   2012                if( NULL == (pBeaconIndBuf = (uint8 *)osal_mem_alloc(MT_ZDO_BEACON_IND_PACK_LEN)))
   2013                {
   2014                  // Memory failure
   2015                  return NULL;
   2016                }
   2017                pBeaconIndBuf[0] = 0; // First byte is devCnt. Initialize to 0.
   2018              }
   2019          
   2020              // Fill in the buffer with the beacon indication
   2021              pTmp = pBeaconIndBuf + (1 + pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN);
   2022              *pTmp++ = LO_UINT16(pBeacon->sourceAddr);
   2023              *pTmp++ = HI_UINT16(pBeacon->sourceAddr);
   2024              *pTmp++ = LO_UINT16(pBeacon->panID);
   2025              *pTmp++ = HI_UINT16(pBeacon->panID);
   2026              *pTmp++ = pBeacon->logicalChannel;
   2027              *pTmp++ = pBeacon->permitJoining;
   2028              *pTmp++ = pBeacon->routerCapacity;
   2029              *pTmp++ = pBeacon->deviceCapacity;
   2030              *pTmp++ = pBeacon->protocolVersion;
   2031              *pTmp++ = pBeacon->stackProfile;
   2032              *pTmp++ = pBeacon->LQI;
   2033              *pTmp++ = pBeacon->depth;
   2034              *pTmp++ = pBeacon->updateID;
   2035              osal_memcpy( pTmp, pBeacon->extendedPanID, Z_EXTADDR_LEN);
   2036          
   2037              pBeaconIndBuf[0] += 1; // Increment the devCnt
   2038          
   2039              // Check if the buffer can fit in another beacon
   2040              if( ((pBeaconIndBuf[0] + 1) * MT_ZDO_BEACON_IND_LEN + 1) > MT_ZDO_BEACON_IND_PACK_LEN )
   2041              {
   2042                // Packet full, send the packet over MT
   2043                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2044                                             MT_ZDO_BEACON_NOTIFY_IND,
   2045                                             (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
   2046                pBeaconIndBuf[0] = 0; // Reset the devCnt back to zero
   2047              }
   2048            }
   2049            else
   2050            {
   2051              if( (pBeaconIndBuf != NULL) && (pBeaconIndBuf[0] != 0) )
   2052              {
   2053                // End of beacon indication, send the packet over MT
   2054                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2055                                             MT_ZDO_BEACON_NOTIFY_IND,
   2056                                             (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
   2057              }
   2058              // Free the allocated memory
   2059              if(pBeaconIndBuf != NULL)
   2060              {
   2061                osal_mem_free(pBeaconIndBuf);
   2062                pBeaconIndBuf = NULL;
   2063              }
   2064            }
   2065          
   2066            return NULL;
   2067          }
   2068          
   2069          /***************************************************************************************************
   2070           * @fn          MT_ZdoJoinCnfCB
   2071           *
   2072           * @brief       Handle the ZDO Join Confirm from ZDO
   2073           *
   2074           * @param       pStr - pointer to a parameter and a structure of parameters
   2075           *
   2076           * @return      void
   2077           ***************************************************************************************************/
   2078          void *MT_ZdoJoinCnfCB ( void *pStr )
   2079          {
   2080            /* pStr: zdoJoinCnf_t* */
   2081            /* Packet Format */
   2082            /* Status (1) | device addr (2) | parent addr (2) */
   2083          
   2084            uint8 buf[MT_ZDO_JOIN_CNF_LEN];
   2085            zdoJoinCnf_t *joinCnf = pStr;
   2086          
   2087            /* Join Complete. De-register the callback with ZDO */
   2088            ZDO_DeregisterForZdoCB( ZDO_JOIN_CNF_CBID );
   2089          
   2090            buf[0] = joinCnf->status;
   2091            buf[1] = LO_UINT16( joinCnf->deviceAddr );
   2092            buf[2] = HI_UINT16( joinCnf->deviceAddr );
   2093            buf[3] = LO_UINT16( joinCnf->parentAddr );
   2094            buf[4] = HI_UINT16( joinCnf->parentAddr );
   2095          
   2096            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2097                                         MT_ZDO_JOIN_CNF, MT_ZDO_JOIN_CNF_LEN, buf);
   2098          
   2099            return NULL;
   2100          }
   2101          
   2102          /*************************************************************************************************
   2103           * @fn      MT_ZdoRegisterForZDOMsg(pBuf);
   2104           *
   2105           * @brief   MT proxy for ZDO_RegisterForZDOMsg.
   2106           *
   2107           * @param   pBuf  - MT message data
   2108           *
   2109           * @return  void
   2110           *************************************************************************************************/
   2111          void MT_ZdoRegisterForZDOMsg(uint8 *pBuf)
   2112          {
   2113            uint8 cmd0, cmd1, tmp;
   2114            uint16 cId;
   2115          
   2116            /* parse header */
   2117            cmd0 = pBuf[MT_RPC_POS_CMD0];
   2118            cmd1 = pBuf[MT_RPC_POS_CMD1];
   2119            pBuf += MT_RPC_FRAME_HDR_SZ;
   2120          
   2121            cId = osal_build_uint16( pBuf );
   2122            tmp = ZDO_RegisterForZDOMsg(MT_TaskID, cId);
   2123          
   2124            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   2125            {
   2126              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   2127            }
   2128          }
   2129          
   2130          /*************************************************************************************************
   2131           * @fn      MT_ZdoRemoveRegisteredCB(pBuf);
   2132           *
   2133           * @brief   MT proxy for ZDO_RemoveRegisteredCB.
   2134           *
   2135           * @param   pBuf  - MT message data
   2136           *
   2137           * @return  void
   2138           *************************************************************************************************/
   2139          void MT_ZdoRemoveRegisteredCB(uint8 *pBuf)
   2140          {
   2141            uint8 cmd0, cmd1, tmp;
   2142            uint16 cId;
   2143          
   2144            /* parse header */
   2145            cmd0 = pBuf[MT_RPC_POS_CMD0];
   2146            cmd1 = pBuf[MT_RPC_POS_CMD1];
   2147            pBuf += MT_RPC_FRAME_HDR_SZ;
   2148          
   2149            cId = osal_build_uint16( pBuf );
   2150            tmp = ZDO_RemoveRegisteredCB(MT_TaskID, cId);
   2151          
   2152            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   2153            {
   2154              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   2155            }
   2156          }
   2157          
   2158          /*************************************************************************************************
   2159           * @fn      MT_ZdoSetRejoinParameters(pBuf);
   2160           *
   2161           * @brief   Set Rejoin backoff and scan duration from MT
   2162           *
   2163           * @param   pBuf  - MT message data
   2164           *
   2165           * @return  void
   2166           *************************************************************************************************/
   2167          static void MT_ZdoSetRejoinParameters(uint8 *pBuf)
   2168          {
   2169            uint8 cmdId;
   2170            uint8 retValue;
   2171            uint32 rejoinBackoffDuration, rejoinScanDuration;
   2172          
   2173            // parse header
   2174            cmdId = pBuf[MT_RPC_POS_CMD1];
   2175            pBuf += MT_RPC_FRAME_HDR_SZ;
   2176          
   2177            //Rejoin Backoff Duration
   2178            rejoinBackoffDuration = osal_build_uint32(pBuf, 4);
   2179            pBuf += 4;
   2180          
   2181            //Rejoin Scan Duration
   2182            rejoinScanDuration = osal_build_uint32(pBuf, 4);
   2183          
   2184            ZDApp_SetRejoinScanDuration(rejoinScanDuration);
   2185            ZDApp_SetRejoinBackoffDuration(rejoinBackoffDuration);
   2186          
   2187            retValue = ZSuccess;
   2188          
   2189            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   2190          
   2191          }
   2192          
   2193          #endif /* MT_ZDO_FUNC */
   2194          
   2195          
   2196          /***************************************************************************************************
   2197           * Callback handling function
   2198           ***************************************************************************************************/
   2199          
   2200          #if defined (MT_ZDO_CB_FUNC)
   2201          
   2202          /***************************************************************************************************
   2203           * @fn      MT_ZdoStateChangeCB
   2204           *
   2205           * @brief   Handle state change OSAL message from ZDO.
   2206           *
   2207           * @param   pMsg  - Message data
   2208           *
   2209           * @return  void
   2210           */
   2211          void MT_ZdoStateChangeCB(osal_event_hdr_t *pMsg)
   2212          {
   2213            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2214                                                 MT_ZDO_STATE_CHANGE_IND, 1, &pMsg->status);
   2215          }
   2216          
   2217          /***************************************************************************************************
   2218           * @fn     MT_ZdoDirectCB()
   2219           *
   2220           * @brief  ZDO direct callback.  Build an MT message directly from the
   2221           *         over-the-air ZDO message.
   2222           *
   2223           * @param  pData - Incoming AF frame.
   2224           *
   2225           * @return  none
   2226           ***************************************************************************************************/
   2227          void MT_ZdoDirectCB( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
   2228          {
   2229            uint8 len, *pBuf;
   2230            uint16 origClusterId;
   2231          
   2232            // save original value because MT_ZdoHandleExceptions() function could modify pData->clusterId
   2233            origClusterId = pData->clusterId;
   2234          
   2235            // Is the message an exception or not a response?
   2236            if ( MT_ZdoHandleExceptions( pData, inMsg ) || ( (origClusterId & ZDO_RESPONSE_BIT) == 0 ) )
   2237            {
   2238              return;  // Handled somewhere else or not needed.
   2239            }
   2240          
   2241            /* ZDO data starts after one-byte sequence number and the msg buffer length includes
   2242             * two bytes for srcAddr.
   2243             */
   2244            len = pData->cmd.DataLength - 1 + sizeof(uint16);
   2245          
   2246            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   2247            {
   2248              uint8 id = MT_ZDO_CID_TO_AREQ_ID(pData->clusterId);
   2249          
   2250              pBuf[0] = LO_UINT16(pData->srcAddr.addr.shortAddr);
   2251              pBuf[1] = HI_UINT16(pData->srcAddr.addr.shortAddr);
   2252          
   2253              /* copy ZDO data, skipping one-byte sequence number */
   2254              osal_memcpy(pBuf+2, (pData->cmd.Data + 1), pData->cmd.DataLength-1);
   2255          
   2256              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   2257              osal_mem_free(pBuf);
   2258            }
   2259          }
   2260          
   2261          /***************************************************************************************************
   2262           * @fn     MT_ZdoHandleExceptions()
   2263           *
   2264           * @brief  Handles all messages that are an exception to the generic MT ZDO Response.
   2265           *
   2266           * @param  pData - Incoming AF frame.
   2267           *
   2268           * @return  TRUE if handled by this function, FALSE if not
   2269           ***************************************************************************************************/
   2270          static uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
   2271          {
   2272            uint8 ret = TRUE;
   2273            ZDO_NwkIEEEAddrResp_t *nwkRsp;
   2274            ZDO_DeviceAnnce_t devAnnce;
   2275            uint8 doDefault = FALSE;
   2276          
   2277            switch ( inMsg->clusterID )
   2278            {
   2279              case NWK_addr_rsp:
   2280              case IEEE_addr_rsp:
   2281                if ( NULL != (nwkRsp = ZDO_ParseAddrRsp(inMsg)) )
   2282                {
   2283                  if ( nwkRsp->status == ZDO_SUCCESS )
   2284                  {
   2285                    MT_ZdoAddrRspCB( nwkRsp, inMsg->clusterID );
   2286                  }
   2287                  osal_mem_free( nwkRsp );
   2288                }
   2289                break;
   2290          
   2291              case Device_annce:
   2292                ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
   2293                MT_ZdoEndDevAnnceCB( &devAnnce, inMsg->srcAddr.addr.shortAddr );
   2294                break;
   2295          
   2296              case Simple_Desc_rsp:
   2297                if ( pData->cmd.DataLength > 5 )
   2298                {
   2299                  ret = FALSE;
   2300                }
   2301                else
   2302                {
   2303                  doDefault = TRUE;
   2304                }
   2305                break;
   2306          
   2307              default:
   2308                ret = FALSE;
   2309                break;
   2310            }
   2311          
   2312            if ( doDefault )
   2313            {
   2314              ret = FALSE;
   2315              pData->clusterId = MtZdoDef_rsp;
   2316              pData->cmd.DataLength = 2;
   2317            }
   2318          
   2319            return ( ret );
   2320          }
   2321          
   2322          /***************************************************************************************************
   2323           * @fn      MT_ZdoAddrRspCB
   2324           *
   2325           * @brief   Handle IEEE or nwk address response OSAL message from ZDO.
   2326           *
   2327           * @param   pMsg  - Message data
   2328           *
   2329           * @return  void
   2330           */
   2331          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID )
   2332          {
   2333            uint8   listLen, len, *pBuf;
   2334          
   2335            /* both ZDO_NwkAddrResp_t and ZDO_IEEEAddrResp_t must be the same */
   2336          
   2337            /* get length, sanity check length */
   2338            listLen = pMsg->numAssocDevs;
   2339          
   2340            /* calculate msg length */
   2341            len = MT_ZDO_ADDR_RSP_LEN + (listLen * sizeof(uint16));
   2342          
   2343            /* get buffer */
   2344            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   2345            {
   2346              uint8 id = MT_ZDO_CID_TO_AREQ_ID(clusterID);
   2347              uint8 *pTmp = pBuf;
   2348          
   2349              *pTmp++ = pMsg->status;
   2350          
   2351              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   2352              pTmp += Z_EXTADDR_LEN;
   2353          
   2354              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   2355              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   2356          
   2357              *pTmp++ = pMsg->startIndex;
   2358              *pTmp++ = listLen;
   2359          
   2360              MT_Word2Buf(pTmp, pMsg->devList, listLen);
   2361          
   2362              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   2363              osal_mem_free(pBuf);
   2364            }
   2365          }
   2366          
   2367          /***************************************************************************************************
   2368           * @fn      MT_ZdoEndDevAnnceCB
   2369           *
   2370           * @brief   Handle end device announce OSAL message from ZDO.
   2371           *
   2372           * @param   pMsg  - Message data
   2373           *
   2374           * @return  void
   2375           */
   2376          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr )
   2377          {
   2378            uint8 *pBuf;
   2379          
   2380            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(MT_ZDO_END_DEVICE_ANNCE_IND_LEN)))
   2381            {
   2382              uint8 *pTmp = pBuf;
   2383          
   2384              *pTmp++ = LO_UINT16(srcAddr);
   2385              *pTmp++ = HI_UINT16(srcAddr);
   2386          
   2387              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   2388              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   2389          
   2390              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   2391              pTmp += Z_EXTADDR_LEN;
   2392          
   2393              *pTmp = pMsg->capabilities;
   2394          
   2395              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2396                                                   MT_ZDO_END_DEVICE_ANNCE_IND,
   2397                                                   MT_ZDO_END_DEVICE_ANNCE_IND_LEN, pBuf);
   2398              osal_mem_free(pBuf);
   2399            }
   2400          }
   2401          
   2402          /***************************************************************************************************
   2403           * @fn      MT_ZdoSrcRtgCB
   2404           *
   2405           * @brief   Handle Src Route from ZDO.
   2406           *
   2407           * @param   pStr  - pointer to the data structure for the src route
   2408           *
   2409           * @return  void*
   2410           */
   2411          void* MT_ZdoSrcRtgCB( void *pStr )
   2412          {
   2413            uint8 len, *pBuf;
   2414            zdoSrcRtg_t *pSrcRtg = pStr;
   2415          
   2416            // srcAddr (2) + relayCnt (1) + relayList( relaycnt * 2 )
   2417            len = 2 + 1 + pSrcRtg->relayCnt * sizeof(uint16);
   2418          
   2419            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   2420            {
   2421              uint8 idx, *pTmp = pBuf;
   2422              uint16 *pRelay;
   2423          
   2424              // Packet payload
   2425              *pTmp++ = LO_UINT16(pSrcRtg->srcAddr);
   2426              *pTmp++ = HI_UINT16(pSrcRtg->srcAddr);
   2427              *pTmp++ = pSrcRtg->relayCnt;
   2428          
   2429              // Relay List
   2430              if( ( pRelay = pSrcRtg->pRelayList ) != NULL )
   2431              {
   2432                for( idx = 0; idx < pSrcRtg->relayCnt; idx ++ )
   2433                {
   2434                  *pTmp++ = LO_UINT16(*pRelay);
   2435                  *pTmp++ = HI_UINT16(*pRelay);
   2436                  pRelay++;
   2437                }
   2438              }
   2439              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2440                                                   MT_ZDO_SRC_RTG_IND, len, pBuf);
   2441              osal_mem_free(pBuf);
   2442            }
   2443          
   2444            return NULL;
   2445          }
   2446          
   2447          /***************************************************************************************************
   2448           * @fn          MT_ZdoConcentratorIndCB
   2449           *
   2450           * @brief       Handle the ZDO Concentrator Indication callback from the ZDO.
   2451           *
   2452           * @param       pStr - pointer to a parameter and a structure of parameters
   2453           *
   2454           * @return      NULL
   2455           ***************************************************************************************************/
   2456          void *MT_ZdoConcentratorIndCB(void *pStr)
   2457          {
   2458            uint8 buf[MT_ZDO_CONCENTRATOR_IND_LEN], *pTmp = buf;
   2459            zdoConcentratorInd_t *pInd = (zdoConcentratorInd_t *)pStr;
   2460          
   2461            *pTmp++ = LO_UINT16(pInd->nwkAddr);
   2462            *pTmp++ = HI_UINT16(pInd->nwkAddr);
   2463            pTmp = osal_memcpy(pTmp, pInd->extAddr, Z_EXTADDR_LEN);
   2464            *pTmp = pInd->pktCost;
   2465          
   2466            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2467                                              MT_ZDO_CONCENTRATOR_IND_CB, MT_ZDO_CONCENTRATOR_IND_LEN, buf);
   2468            return NULL;
   2469          }
   2470          
   2471          /***************************************************************************************************
   2472           * @fn          MT_ZdoLeaveInd
   2473           *
   2474           * @brief       Handle the ZDO Leave Indication callback from the ZDO.
   2475           *
   2476           * @param       vPtr - Pointer to the received Leave Indication message.
   2477           *
   2478           * @return      NULL
   2479           ***************************************************************************************************/
   2480          static void *MT_ZdoLeaveInd(void *vPtr)
   2481          {
   2482            NLME_LeaveInd_t *pInd = (NLME_LeaveInd_t *)vPtr;
   2483            uint8 buf[sizeof(NLME_LeaveInd_t)];
   2484          
   2485            buf[0] = LO_UINT16(pInd->srcAddr);
   2486            buf[1] = HI_UINT16(pInd->srcAddr);
   2487            (void)osal_memcpy(buf+2, pInd->extAddr, Z_EXTADDR_LEN);
   2488            buf[2+Z_EXTADDR_LEN] = pInd->request;
   2489            buf[3+Z_EXTADDR_LEN] = pInd->removeChildren;
   2490            buf[4+Z_EXTADDR_LEN] = pInd->rejoin;
   2491          
   2492            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2493                                                 MT_ZDO_LEAVE_IND, 5+Z_EXTADDR_LEN, buf);
   2494            return NULL;
   2495          }
   2496          
   2497          /***************************************************************************************************
   2498           * @fn          MT_ZdoTcDeviceInd
   2499           *
   2500           * @brief       Handle the ZDO TC Device Indication callback from the ZDO.
   2501           *
   2502           * @param       params - pointer to Trust Center joining device information
   2503           *
   2504           * @return      NULL
   2505           ***************************************************************************************************/
   2506          void *MT_ZdoTcDeviceInd( void *params )
   2507          {
   2508            ZDO_TC_Device_t *pDev = (ZDO_TC_Device_t *)params;
   2509            uint8 buf[12];
   2510          
   2511            buf[0] = LO_UINT16( pDev->nwkAddr );
   2512            buf[1] = HI_UINT16( pDev->nwkAddr );
   2513            (void)osal_memcpy( &buf[2], pDev->extAddr, Z_EXTADDR_LEN);
   2514            buf[2+Z_EXTADDR_LEN] = LO_UINT16( pDev->parentAddr );
   2515            buf[3+Z_EXTADDR_LEN] = HI_UINT16( pDev->parentAddr );
   2516          
   2517            MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2518                                                 MT_ZDO_TC_DEVICE_IND, 12, buf );
   2519          
   2520            return ( NULL );
   2521          }
   2522          
   2523          /***************************************************************************************************
   2524           * @fn          MT_ZdoPermitJoinInd
   2525           *
   2526           * @brief       Handle the ZDO Permit Join Indication callback from the ZDO.
   2527           *
   2528           * @param       duration - permit join duration
   2529           *
   2530           * @return      NULL
   2531           ***************************************************************************************************/
   2532          void *MT_ZdoPermitJoinInd( void *duration )
   2533          {
   2534            if ( ignoreIndication == FALSE )
   2535            {
   2536              // The following condition was moved here from NLME_PermitJoiningSet. It was removed there to
   2537              // support calling the callback for every time a permit join command is processed, and let the
   2538              // callback decide how to act.
   2539              if ((( *(uint8*)duration == 0x00 ) && ( NLME_PermitJoining )) || (( *(uint8*)duration != 0x00 ) && ( ! NLME_PermitJoining )))
   2540              {  
   2541                MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2542                                                 MT_ZDO_PERMIT_JOIN_IND, 1, (uint8 *)duration );
   2543              }
   2544            }
   2545          
   2546            return ( NULL );
   2547          }
   2548          #endif // MT_ZDO_CB_FUNC
   2549          
   2550          /***************************************************************************************************
   2551           * @fn      MT_ZdoSendMsgCB
   2552           *
   2553           * @brief   Proxy the ZDO_SendMsgCBs one message at a time.
   2554           *
   2555           * @param   pMsg  - Message data
   2556           *
   2557           * @return  void
   2558           */
   2559          void MT_ZdoSendMsgCB(zdoIncomingMsg_t *pMsg)
   2560          {
   2561            uint8 len = pMsg->asduLen + 9;
   2562            uint8 *pBuf = (uint8 *)osal_mem_alloc(len);
   2563          
   2564            if (pBuf != NULL)
   2565            {
   2566              uint8 *pTmp = pBuf;
   2567          
   2568              // Assuming exclusive use of network short addresses.
   2569              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   2570              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   2571              *pTmp++ = pMsg->wasBroadcast;
   2572              *pTmp++ = LO_UINT16(pMsg->clusterID);
   2573              *pTmp++ = HI_UINT16(pMsg->clusterID);
   2574              *pTmp++ = pMsg->SecurityUse;
   2575              *pTmp++ = pMsg->TransSeq;
   2576              // Skipping asduLen since it can be deduced from the RPC packet length.
   2577              *pTmp++ = LO_UINT16(pMsg->macDestAddr);
   2578              *pTmp++ = HI_UINT16(pMsg->macDestAddr);
   2579              (void)osal_memcpy(pTmp, pMsg->asdu, pMsg->asduLen);
   2580          
   2581              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2582                                                   MT_ZDO_MSG_CB_INCOMING, len, pBuf);
   2583          
   2584              osal_mem_free(pBuf);
   2585            }
   2586          }
   2587          
   2588          
   2589          #if defined ( MT_ZDO_EXTENSIONS )
   2590          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2591          /***************************************************************************************************
   2592           * @fn          MT_ZdoSecUpdateNwkKey
   2593           *
   2594           * @brief       Handle the ZDO Security Update Network Key extension message
   2595           *
   2596           * @param       pBuf - Pointer to the received message data.
   2597           *
   2598           * @return      NULL
   2599           ***************************************************************************************************/
   2600          static void MT_ZdoSecUpdateNwkKey( uint8 *pBuf )
   2601          {
   2602            uint16 dstAddr;
   2603            uint8 keySeqNum;
   2604            uint8 status;
   2605          
   2606            pBuf += MT_RPC_FRAME_HDR_SZ;
   2607          
   2608            dstAddr = osal_build_uint16( pBuf );
   2609            pBuf += 2;
   2610            keySeqNum = *pBuf++;
   2611          
   2612            status = ZDSecMgrUpdateNwkKey( pBuf, keySeqNum, dstAddr );
   2613          
   2614            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2615                                                 MT_ZDO_EXT_UPDATE_NWK_KEY, 1, &status );
   2616          }
   2617          
   2618          /***************************************************************************************************
   2619           * @fn          MT_ZdoSecSwitchNwkKey
   2620           *
   2621           * @brief       Handle the ZDO Security Switch Network Key extension message
   2622           *
   2623           * @param       pBuf - Pointer to the received message data.
   2624           *
   2625           * @return      NULL
   2626           ***************************************************************************************************/
   2627          static void MT_ZdoSecSwitchNwkKey( uint8 *pBuf )
   2628          {
   2629            uint16 dstAddr;
   2630            uint8 keySeqNum;
   2631            uint8 status;
   2632          
   2633            pBuf += MT_RPC_FRAME_HDR_SZ;
   2634          
   2635            dstAddr = osal_build_uint16( pBuf );
   2636            pBuf += 2;
   2637            keySeqNum = *pBuf++;
   2638          
   2639            status = ZDSecMgrSwitchNwkKey( keySeqNum, dstAddr );
   2640          
   2641            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2642                                                 MT_ZDO_EXT_SWITCH_NWK_KEY, 1, &status );
   2643          }
   2644          #endif // ZG_BUILD_COORDINATOR_TYPE
   2645          
   2646          /***************************************************************************************************
   2647           * @fn          MT_ZdoSecAddLinkKey
   2648           *
   2649           * @brief       Handle the ZDO Security Add Link Key extension message
   2650           *
   2651           * @param       pBuf - Pointer to the received message data.
   2652           *
   2653           * @return      NULL
   2654           ***************************************************************************************************/
   2655          static void MT_ZdoSecAddLinkKey( uint8 *pBuf )
   2656          {
   2657            uint16 shortAddr;
   2658            uint8 *pExtAddr;
   2659            uint8 status;
   2660          
   2661            pBuf += MT_RPC_FRAME_HDR_SZ;
   2662          
   2663            shortAddr = osal_build_uint16( pBuf );
   2664            pBuf += 2;
   2665            pExtAddr = pBuf;
   2666            pBuf += Z_EXTADDR_LEN;
   2667          
   2668            status = ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pBuf );
   2669          
   2670            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2671                                                 MT_ZDO_SEC_ADD_LINK_KEY, 1, &status );
   2672          }
   2673          
   2674          /***************************************************************************************************
   2675           * @fn          MT_ZdoSecEntryLookupExt
   2676           *
   2677           * @brief       Handle the ZDO Security Entry Lookup Extended extension message
   2678           *
   2679           * @param       pBuf - Pointer to the received message data.
   2680           *
   2681           * @return      NULL
   2682           ***************************************************************************************************/
   2683          static void MT_ZdoSecEntryLookupExt( uint8 *pBuf )
   2684          {
   2685            ZDSecMgrEntry_t *pEntry = NULL;
   2686            uint8 buf[6] = {0};
   2687          
   2688            pBuf += MT_RPC_FRAME_HDR_SZ;
   2689          
   2690            // lookup entry index for specified EXT address
   2691            buf[0] = ZDSecMgrEntryLookupExt( pBuf, &pEntry );
   2692            if ( pEntry )
   2693            {
   2694              buf[1] = LO_UINT16( pEntry->ami );
   2695              buf[2] = HI_UINT16( pEntry->ami );
   2696              buf[3] = LO_UINT16( pEntry->keyNvId );
   2697              buf[4] = HI_UINT16( pEntry->keyNvId );
   2698              buf[5] = (uint8)pEntry->authenticateOption;
   2699            }
   2700          
   2701            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2702                                                 MT_ZDO_SEC_ENTRY_LOOKUP_EXT, 6, buf );
   2703          }
   2704          
   2705          /***************************************************************************************************
   2706           * @fn          MT_ZdoSecDeviceRemove
   2707           *
   2708           * @brief       Handle the ZDO Security Remove Device extension message
   2709           *
   2710           * @param       pBuf - Pointer to the received message data.
   2711           *
   2712           * @return      NULL
   2713           ***************************************************************************************************/
   2714          static void MT_ZdoSecDeviceRemove( uint8 *pBuf )
   2715          {
   2716            ZStatus_t status;
   2717          
   2718            pBuf += MT_RPC_FRAME_HDR_SZ;
   2719          
   2720            // lookup entry index for specified EXT address
   2721            status = ZDSecMgrDeviceRemoveByExtAddr( pBuf );
   2722          
   2723            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2724                                                 MT_ZDO_SEC_DEVICE_REMOVE, 1, &status );
   2725          }
   2726          
   2727          /***************************************************************************************************
   2728           * @fn          MT_ZdoExtRouteDisc
   2729           *
   2730           * @brief       Handle the ZDO Route Discovery extension message
   2731           *
   2732           * @param       pBuf - Pointer to the received message data.
   2733           *
   2734           * @return      NULL
   2735           ***************************************************************************************************/
   2736          static void MT_ZdoExtRouteDisc( uint8 *pBuf )
   2737          {
   2738            ZStatus_t status;
   2739            uint16 dstAddr;
   2740          
   2741            pBuf += MT_RPC_FRAME_HDR_SZ;
   2742          
   2743            dstAddr = osal_build_uint16( pBuf );
   2744          
   2745            status = NLME_RouteDiscoveryRequest( dstAddr, pBuf[2], pBuf[3] );
   2746          
   2747          
   2748            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2749                                                 MT_ZDO_EXT_ROUTE_DISC, 1, &status );
   2750          }
   2751          
   2752          /***************************************************************************************************
   2753           * @fn          MT_ZdoExtRouteCheck
   2754           *
   2755           * @brief       Handle the ZDO Route Check extension message
   2756           *
   2757           * @param       pBuf - Pointer to the received message data.
   2758           *
   2759           * @return      NULL
   2760           ***************************************************************************************************/
   2761          static void MT_ZdoExtRouteCheck( uint8 *pBuf )
   2762          {
   2763            ZStatus_t status;
   2764            uint16 dstAddr;
   2765          
   2766            pBuf += MT_RPC_FRAME_HDR_SZ;
   2767          
   2768            dstAddr = osal_build_uint16( pBuf );
   2769          
   2770            status = RTG_CheckRtStatus( dstAddr, pBuf[2], pBuf[3] );
   2771          
   2772            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2773                                                 MT_ZDO_EXT_ROUTE_CHECK, 1, &status );
   2774          }
   2775          
   2776          /***************************************************************************************************
   2777           * @fn          MT_ZdoExtRemoveGroup
   2778           *
   2779           * @brief       Handle the ZDO extension Remove Group message
   2780           *
   2781           * @param       pBuf - Pointer to the received message data.
   2782           *
   2783           * @return      NULL
   2784           ***************************************************************************************************/
   2785          static void MT_ZdoExtRemoveGroup( uint8 *pBuf )
   2786          {
   2787            ZStatus_t status;
   2788            uint8 endpoint;
   2789            uint16 groupID;
   2790          
   2791            pBuf += MT_RPC_FRAME_HDR_SZ;
   2792          
   2793            endpoint = *pBuf++;
   2794            groupID = osal_build_uint16( pBuf );
   2795          
   2796            if ( aps_RemoveGroup( endpoint, groupID ) )
   2797            {
   2798              status = ZSuccess;
   2799            }
   2800            else
   2801            {
   2802              status = ZFailure;
   2803            }
   2804          
   2805            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2806                                                 MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
   2807          }
   2808          
   2809          /***************************************************************************************************
   2810           * @fn          MT_ZdoExtRemoveAllGroup
   2811           *
   2812           * @brief       Handle the ZDO extension Remove All Groups message
   2813           *
   2814           * @param       pBuf - Pointer to the received message data.
   2815           *
   2816           * @return      NULL
   2817           ***************************************************************************************************/
   2818          static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf )
   2819          {
   2820            ZStatus_t status = ZSuccess;
   2821          
   2822            pBuf += MT_RPC_FRAME_HDR_SZ;
   2823          
   2824            aps_RemoveAllGroup( *pBuf );
   2825          
   2826            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2827                                                 MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
   2828          }
   2829          
   2830          /***************************************************************************************************
   2831           * @fn          MT_ZdoExtFindAllGroupsEndpoint
   2832           *
   2833           * @brief       Handle the ZDO extension Find All Groups for Endpoint message
   2834           *
   2835           * @param       pBuf - Pointer to the received message data.
   2836           *
   2837           * @return      NULL
   2838           ***************************************************************************************************/
   2839          static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf )
   2840          {
   2841            uint16 groupList[ APS_MAX_GROUPS ];
   2842            uint8 groups;
   2843            uint8 msgLen;
   2844            uint8 *pMsg;
   2845          
   2846            pBuf += MT_RPC_FRAME_HDR_SZ;
   2847          
   2848            groups = aps_FindAllGroupsForEndpoint( *pBuf, groupList );
   2849          
   2850            msgLen = 1 + (2 * groups);
   2851            pMsg = osal_mem_alloc( msgLen );
   2852            if ( pMsg )
   2853            {
   2854              uint8 x;
   2855              uint8 *pBuf = pMsg;
   2856          
   2857              *pBuf++ = groups;
   2858              for ( x = 0; x < groups; x++ )
   2859              {
   2860                *pBuf++ = LO_UINT16( groupList[x] );
   2861                *pBuf++ = HI_UINT16( groupList[x] );
   2862              }
   2863          
   2864              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2865                                                 MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, msgLen, pMsg );
   2866              osal_mem_free( pMsg );
   2867            }
   2868            else
   2869            {
   2870              groups = 0;
   2871              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2872                                                 MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, 1, &groups );
   2873            }
   2874          }
   2875          
   2876          /***************************************************************************************************
   2877           * @fn          MT_ZdoExtFindGroup
   2878           *
   2879           * @brief       Handle the ZDO extension Find Group message
   2880           *
   2881           * @param       pBuf - Pointer to the received message data.
   2882           *
   2883           * @return      NULL
   2884           ***************************************************************************************************/
   2885          static void MT_ZdoExtFindGroup( uint8 *pBuf )
   2886          {
   2887            uint8 endpoint;
   2888            uint16 groupID;
   2889            aps_Group_t *pGroup;
   2890            uint8 buf[1+2+APS_GROUP_NAME_LEN] = {0};
   2891          
   2892            pBuf += MT_RPC_FRAME_HDR_SZ;
   2893          
   2894            endpoint = *pBuf++;
   2895            groupID = osal_build_uint16( pBuf );
   2896          
   2897            pGroup = aps_FindGroup( endpoint, groupID );
   2898            if ( pGroup  )
   2899            {
   2900              buf[0] = ZSuccess;
   2901              buf[1] = LO_UINT16( pGroup->ID );
   2902              buf[2] = HI_UINT16( pGroup->ID );
   2903              buf[3] = pGroup->name[0];
   2904              osal_memcpy( &buf[4], &pGroup->name[1], buf[3] );
   2905            }
   2906            else
   2907            {
   2908              buf[0] = ZFailure;
   2909            }
   2910          
   2911            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2912                                MT_ZDO_EXT_FIND_GROUP, (1+2+APS_GROUP_NAME_LEN), buf );
   2913          }
   2914          
   2915          /***************************************************************************************************
   2916           * @fn          MT_ZdoExtAddGroup
   2917           *
   2918           * @brief       Handle the ZDO extension Add Group message
   2919           *
   2920           * @param       pBuf - Pointer to the received message data.
   2921           *
   2922           * @return      NULL
   2923           ***************************************************************************************************/
   2924          static void MT_ZdoExtAddGroup( uint8 *pBuf )
   2925          {
   2926            ZStatus_t status = ZSuccess;
   2927            aps_Group_t group = {0};
   2928            uint8 endpoint;
   2929          
   2930            pBuf += MT_RPC_FRAME_HDR_SZ;
   2931          
   2932            endpoint = *pBuf++;
   2933            group.ID = osal_build_uint16( pBuf );
   2934            group.name[0] = pBuf[2];
   2935            if ( group.name[0] > (APS_GROUP_NAME_LEN-1) )
   2936            {
   2937              group.name[0] = (APS_GROUP_NAME_LEN-1);
   2938            }
   2939          
   2940            if (group.name[0] > 0 )
   2941            {
   2942              osal_memcpy( &group.name[1], &pBuf[3], group.name[0] );
   2943            }
   2944          
   2945            status = aps_AddGroup( endpoint, &group );
   2946          
   2947            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2948                                                 MT_ZDO_EXT_ADD_GROUP, 1, &status );
   2949          }
   2950          
   2951          /***************************************************************************************************
   2952           * @fn          MT_ZdoExtCountAllGroups
   2953           *
   2954           * @brief       Handle the ZDO extension Count All Groups message
   2955           *
   2956           * @param       pBuf - Pointer to the received message data.
   2957           *
   2958           * @return      NULL
   2959           ***************************************************************************************************/
   2960          static void MT_ZdoExtCountAllGroups( uint8 *pBuf )
   2961          {
   2962            ZStatus_t status = 0;
   2963          
   2964            pBuf += MT_RPC_FRAME_HDR_SZ;
   2965          
   2966            status = (ZStatus_t)aps_CountAllGroups();
   2967          
   2968            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2969                                                 MT_ZDO_EXT_COUNT_ALL_GROUPS, 1, &status );
   2970          }
   2971          
   2972          
   2973          /***************************************************************************************************
   2974           * @fn          MT_ZdoExtRxIdle
   2975           *
   2976           * @brief       Handle the ZDO extension Get/Set RxOnIdle to ZMac message
   2977           *
   2978           * @param       pBuf - Pointer to the received message data.
   2979           *
   2980           * @return      NULL
   2981           ***************************************************************************************************/
   2982          static void MT_ZdoExtRxIdle( uint8 *pBuf )
   2983          {
   2984            uint8 setFlag;
   2985            uint8 setValue;
   2986          
   2987            pBuf += MT_RPC_FRAME_HDR_SZ;
   2988          
   2989            setFlag = *pBuf++;
   2990            setValue = *pBuf++;
   2991          
   2992            if ( setFlag )
   2993            {
   2994              ZMacSetReq( ZMacRxOnIdle, &setValue );
   2995            }
   2996            else
   2997            {
   2998              ZMacGetReq( ZMacRxOnIdle, &setValue );
   2999            }
   3000          
   3001            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   3002                                                 MT_ZDO_EXT_RX_IDLE, 1, &setValue );
   3003          }
   3004          
   3005          /***************************************************************************************************
   3006           * @fn          MT_ZdoExtNwkInfo
   3007           *
   3008           * @brief       Handle the ZDO extension Network Info Request message
   3009           *
   3010           * @param       pBuf - Pointer to the received message data.
   3011           *
   3012           * @return      NULL
   3013           ***************************************************************************************************/
   3014          static void MT_ZdoExtNwkInfo( uint8 *pBuf )
   3015          {
   3016            uint8 buf[24];
   3017            uint8 *pMsg;
   3018          
   3019            pMsg = buf;
   3020          
   3021            *pMsg++ = LO_UINT16( _NIB.nwkDevAddress );
   3022            *pMsg++ = HI_UINT16( _NIB.nwkDevAddress );
   3023          
   3024            *pMsg++ = devState;
   3025            *pMsg++ = LO_UINT16( _NIB.nwkPanId );
   3026            *pMsg++ = HI_UINT16( _NIB.nwkPanId );
   3027            *pMsg++ = LO_UINT16( _NIB.nwkCoordAddress );
   3028            *pMsg++ = HI_UINT16( _NIB.nwkCoordAddress );
   3029            osal_memcpy( pMsg, _NIB.extendedPANID, 8 );
   3030            pMsg += 8;
   3031            osal_memcpy( pMsg, _NIB.nwkCoordExtAddress, 8 );
   3032            pMsg += 8;
   3033            *pMsg++ = _NIB.nwkLogicalChannel;
   3034          
   3035            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   3036                                                 MT_ZDO_EXT_NWK_INFO, 24, buf );
   3037          }
   3038          
   3039          /***************************************************************************************************
   3040           * @fn          MT_ZdoExtSecApsRemoveReq
   3041           *
   3042           * @brief       Handle the ZDO extension Security Manager APS Remove Request message
   3043           *
   3044           * @param       pBuf - Pointer to the received message data.
   3045           *
   3046           * @return      NULL
   3047           ***************************************************************************************************/
   3048          static void MT_ZdoExtSecApsRemoveReq( uint8 *pBuf )
   3049          {
   3050            ZStatus_t status = 0;
   3051            uint16 parentAddr;
   3052            uint16 nwkAddr;
   3053          
   3054            pBuf += MT_RPC_FRAME_HDR_SZ;
   3055          
   3056            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   3057            {
   3058              parentAddr = osal_build_uint16( pBuf );
   3059              pBuf += 2;
   3060          
   3061              nwkAddr = osal_build_uint16( pBuf );
   3062              pBuf += 2;
   3063          
   3064              status = ZDSecMgrAPSRemove( nwkAddr, pBuf, parentAddr );
   3065            }
   3066            else
   3067            {
   3068              status = ZUnsupportedMode;
   3069            }
   3070          
   3071            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   3072                                                 MT_ZDO_EXT_SEC_APS_REMOVE_REQ, 1, &status );
   3073          }
   3074          
   3075          /***************************************************************************************************
   3076           * @fn          MT_ZdoExtSetParams
   3077           *
   3078           * @brief       Set Parameters not settable through NV.
   3079           *
   3080           * @param       pBuf - Pointer to the received message data.
   3081           *
   3082           * @return      NULL
   3083           ***************************************************************************************************/
   3084          static void MT_ZdoExtSetParams( uint8 *pBuf )
   3085          {
   3086            ZStatus_t status = ZSuccess;
   3087            uint8 useMultiCast;
   3088          
   3089            pBuf += MT_RPC_FRAME_HDR_SZ;
   3090          
   3091            // Is the useMulticast in this message
   3092            useMultiCast = *pBuf++;
   3093            if ( useMultiCast & 0x80 )
   3094            {
   3095              if ( useMultiCast & 0x7F )
   3096              {
   3097                _NIB.nwkUseMultiCast = TRUE;
   3098              }
   3099              else
   3100              {
   3101                _NIB.nwkUseMultiCast = FALSE;
   3102              }
   3103            }
   3104          
   3105            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   3106                                                 MT_ZDO_EXT_SET_PARAMS, 1, &status );
   3107          }
   3108          #endif // MT_ZDO_EXTENSIONS
   3109          
   3110          #endif   /*ZDO Command Processing in MT*/
   3111          /***************************************************************************************************
   3112          ***************************************************************************************************/


 

 


Errors: none
Warnings: none
