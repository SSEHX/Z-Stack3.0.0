###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                26/Oct/2017  13:47:18
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack 3.0.0\Components\stack\GP\gp_common.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack 3.0.0\Components\stack\GP\gp_common.c"
#        -D BDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D
#        NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D
#        xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D
#        ZCL_GROUPS -D xZCL_LEVEL_CTRL -lC "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
#        "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List\gp_common.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj\gp_common.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack 3.0.0\Components\stack\GP\gp_common.c
      1          /**************************************************************************************************
      2            Filename:       gp_common.c
      3            Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
      4            Revision:       $Revision: - $
      5          
      6            Description:    This file contains the implementation of the cGP stub.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "ZGlobals.h"
     45          //GP_UPDATE
     46          
     47          #include "ZComDef.h"
     48          #include "zcl_general.h"
     49          #include "AF.h"
     50          #include "gp_common.h"
     51          #include "gp_interface.h"
     52          #include "zcl_green_power.h"
     53          #include "OSAL.h"
     54          #include "dGP_stub.h"
     55          #include "mac_api.h"
     56          #include "ZDSecMgr.h"
     57          #include "bdb.h"
     58          
     59           /*********************************************************************
     60           * MACROS
     61           */ 
     62          
     63             
     64           /*********************************************************************
     65           * CONSTANTS
     66           */
     67          
     68          #define PGG_COMMISSIONING_WINDOW   180  //180 seconds by defaut
     69          
     70          
     71          #ifdef GP_SHARED_KEY

   \                                 In  segment CODE_C, align 1
     72            CONFIG_ITEM uint8 zgpSharedKey[SEC_KEY_LEN] = GP_SHARED_KEY;
   \                     zgpSharedKey:
   \   000000   C0           DB 192
   \   000001   C1           DB 193
   \   000002   C2           DB 194
   \   000003   C3           DB 195
   \   000004   C4           DB 196
   \   000005   C5           DB 197
   \   000006   C6           DB 198
   \   000007   C7           DB 199
   \   000008   C8           DB 200
   \   000009   C9           DB 201
   \   00000A   CA           DB 202
   \   00000B   CB           DB 203
   \   00000C   CC           DB 204
   \   00000D   CD           DB 205
   \   00000E   CE           DB 206
   \   00000F   CF           DB 207
     73          #else
     74            CONFIG_ITEM uint8 zgpSharedKey[SEC_KEY_LEN] = {0xFF};
     75          #endif
     76          
     77          /*********************************************************************
     78           * TYPEDEFS
     79           */
     80             
     81           /*********************************************************************
     82           * GLOBAL VARIABLES
     83           */
     84          
     85          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     86          uint8  zclGp_gppMaxProxyTableEntries = GPP_MAX_PROXY_TABLE_ENTRIES;
   \                     zclGp_gppMaxProxyTableEntries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclGp_gppMaxProxyTableEntrie`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     87          uint8 *pZclGp_ProxyTableEntries = NULL;
   \                     pZclGp_ProxyTableEntries:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
     88          uint8  zclGp_gppNotificationRetryNumber = GPP_NOTIFICATION_RETRY_NUMBER;
   \                     zclGp_gppNotificationRetryNumber:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclGp_gppNotificationRetryNu`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     89          uint8  zclGp_gppNotificationRetryTimer = GPP_NOTIFICATION_RETRY_TIMER;
   \                     zclGp_gppNotificationRetryTimer:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclGp_gppNotificationRetryTi`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     90          uint8  zclGp_gppMaxSearchCounter = GPP_MAX_SEARCH_COUNTER;
   \                     zclGp_gppMaxSearchCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclGp_gppMaxSearchCounter>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     91          uint8 *pZclGp_gppBlockedGPDID = NULL;
   \                     pZclGp_gppBlockedGPDID:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     92          uint8  zclGp_gppFunctionality[3] = {0};
   \                     zclGp_gppFunctionality:
   \   000000                DS 3
   \   000003                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     93          uint8  zclGp_gppActiveFunctionality[3] = {0};
   \                     zclGp_gppActiveFunctionality:
   \   000000                DS 3
   \   000003                REQUIRE __INIT_XDATA_Z
     94          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          uint8  zclGp_gpSharedSecurityKeyType = GP_SHARED_SEC_KEY_TYPE;
   \                     zclGp_gpSharedSecurityKeyType:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     96          uint8  zclGp_gpSharedSecurityKey[SEC_KEY_LEN] = {0};
   \                     zclGp_gpSharedSecurityKey:
   \   000000                DS 16
   \   000010                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
     97          uint8  zclGp_gpLinkKey[SEC_KEY_LEN] = GP_LINK_LEY;
   \                     zclGp_gpLinkKey:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for zclGp_gpLinkKey>`
   \   000010                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     98          uint16 zclGp_clusterRevision = GP_CLUSTER_REVISION;
   \                     zclGp_clusterRevision:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zclGp_clusterRevision>`
   \   000002                REQUIRE __INIT_XDATA_I
     99          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    100          static gpCommissioningMode_t  pfnCommissioningMode = NULL;
   \                     pfnCommissioningMode:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    101          static gpChangeChannelReq_t   pfnChangeChannelReq = NULL;
   \                     pfnChangeChannelReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          static gpChangeChannelReq_t   pfnChangeChannelReqForBDB = NULL;
   \                     pfnChangeChannelReqForBDB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    103          
    104          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          uint8 gp_commissioningOptions = 0;           //Commissioning Options from the ommissioningMode command
   \                     gp_commissioningOptions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          uint16 gp_commissioningUnicastAddress = 0;   //address of the device to which send the notifications
   \                     gp_commissioningUnicastAddress:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    107          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    108          uint8  zgGP_InCommissioningMode = FALSE;     // Global flag that states if in commissioning mode or in operational mode.
   \                     zgGP_InCommissioningMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    109          uint16 gp_commissionerAddress = 0xFFFF;      //Address to which send the notifications during commissioning mode
   \                     gp_commissionerAddress:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for gp_commissionerAddress>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    110          byte   gp_tempLogicalChannel = 0;            //Holder of the operational nwk channel
   \                     gp_tempLogicalChannel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    111          
    112          
    113          
    114            
    115          
    116          /*********************************************************************
    117           * ATTRIBUTE DEFINITIONS - Uses REAL cluster IDs
    118           */

   \                                 In  segment CODE_C, align 1
    119          CONST zclAttrRec_t zclGp_Attrs[] =
   \                     zclGp_Attrs:
   \   000000   2100         DW 33
   \   000002   1000         DW 16
   \   000004   20           DB 32
   \   000005   81           DB 129
   \   000006   ....         DW zclGp_gppMaxProxyTableEntries
   \   000008   2100         DW 33
   \   00000A   1100         DW 17
   \   00000C   43           DB 67
   \   00000D   81           DB 129
   \   00000E   0000         DW 0H
   \   000010   2100         DW 33
   \   000012   1200         DW 18
   \   000014   20           DB 32
   \   000015   83           DB 131
   \   000016   ....         DW zclGp_gppNotificationRetryNumber
   \   000018   2100         DW 33
   \   00001A   1300         DW 19
   \   00001C   20           DB 32
   \   00001D   83           DB 131
   \   00001E   ....         DW zclGp_gppNotificationRetryTimer
   \   000020   2100         DW 33
   \   000022   1400         DW 20
   \   000024   20           DB 32
   \   000025   83           DB 131
   \   000026   ....         DW zclGp_gppMaxSearchCounter
   \   000028   2100         DW 33
   \   00002A   1500         DW 21
   \   00002C   43           DB 67
   \   00002D   81           DB 129
   \   00002E   ....         DW pZclGp_gppBlockedGPDID
   \   000030   2100         DW 33
   \   000032   1600         DW 22
   \   000034   1A           DB 26
   \   000035   81           DB 129
   \   000036   ....         DW zclGp_gppFunctionality
   \   000038   2100         DW 33
   \   00003A   1700         DW 23
   \   00003C   1A           DB 26
   \   00003D   81           DB 129
   \   00003E   ....         DW zclGp_gppActiveFunctionality
   \   000040   2100         DW 33
   \   000042   2000         DW 32
   \   000044   18           DB 24
   \   000045   83           DB 131
   \   000046   ....         DW zclGp_gpSharedSecurityKeyType
   \   000048   2100         DW 33
   \   00004A   2100         DW 33
   \   00004C   F1           DB 241
   \   00004D   83           DB 131
   \   00004E   ....         DW zclGp_gpSharedSecurityKey
   \   000050   2100         DW 33
   \   000052   2200         DW 34
   \   000054   F1           DB 241
   \   000055   83           DB 131
   \   000056   ....         DW zclGp_gpLinkKey
   \   000058   2100         DW 33
   \   00005A   FDFF         DW 65533
   \   00005C   20           DB 32
   \   00005D   81           DB 129
   \   00005E   ....         DW zclGp_clusterRevision
    120          {
    121            // *** Green Power Proxy Cluster Attributes ***
    122            {
    123              ZCL_CLUSTER_ID_GREEN_POWER,
    124              {  // Attribute record
    125                ATTRID_GP_GPP_MAX_PROXY_TABLE_ENTRIES,
    126                ZCL_DATATYPE_UINT8,
    127                ACCESS_CONTROL_READ | ACCESS_CLIENT,
    128                (void *)&zclGp_gppMaxProxyTableEntries
    129              }
    130            },
    131            {
    132              ZCL_CLUSTER_ID_GREEN_POWER,
    133              {  // Attribute record
    134                ATTRID_GP_PROXY_TABLE,
    135                ZCL_DATATYPE_LONG_OCTET_STR,
    136                ACCESS_CONTROL_READ | ACCESS_CLIENT,
    137                NULL // Use application's callback to Read this attribute
    138              }
    139            },
    140            {
    141              ZCL_CLUSTER_ID_GREEN_POWER,
    142              {  // Attribute record
    143                ATTRID_GP_GPP_NOTIFICATION_RETRY_NUMBER,
    144                ZCL_DATATYPE_UINT8,
    145                ACCESS_CONTROL_READ | ACCESS_CONTROL_WRITE | ACCESS_CLIENT,
    146                (void *)&zclGp_gppNotificationRetryNumber
    147              }
    148            },
    149            {
    150              ZCL_CLUSTER_ID_GREEN_POWER,
    151              {  // Attribute record
    152                ATTRID_GP_GPP_NOTIFICATION_RETRY_TIMER,
    153                ZCL_DATATYPE_UINT8,
    154                ACCESS_CONTROL_READ | ACCESS_CONTROL_WRITE | ACCESS_CLIENT,
    155                (void *)&zclGp_gppNotificationRetryTimer
    156              }
    157            },
    158            {
    159              ZCL_CLUSTER_ID_GREEN_POWER,
    160              {  // Attribute record
    161                ATTRID_GP_GPP_MAX_SEARCH_COUNTER,
    162                ZCL_DATATYPE_UINT8,
    163                ACCESS_CONTROL_READ | ACCESS_CONTROL_WRITE | ACCESS_CLIENT,
    164                (void *)&zclGp_gppMaxSearchCounter
    165              }
    166            },
    167            {
    168              ZCL_CLUSTER_ID_GREEN_POWER,
    169              {  // Attribute record
    170                ATTRID_GP_GPP_BLOCKED_GPD_ID,
    171                ZCL_DATATYPE_LONG_OCTET_STR,
    172                ACCESS_CONTROL_READ | ACCESS_CLIENT,
    173                (void *)&pZclGp_gppBlockedGPDID
    174              }
    175            },
    176            {
    177              ZCL_CLUSTER_ID_GREEN_POWER,
    178              {  // Attribute record
    179                ATTRID_GP_GPP_FUNCTIONALITY,
    180                ZCL_DATATYPE_BITMAP24,
    181                ACCESS_CONTROL_READ | ACCESS_CLIENT,
    182                (void *)&zclGp_gppFunctionality
    183              }
    184            },
    185            {
    186              ZCL_CLUSTER_ID_GREEN_POWER,
    187              {  // Attribute record
    188                ATTRID_GP_GPP_ACTIVE_FUNCTIONALITY,
    189                ZCL_DATATYPE_BITMAP24,
    190                ACCESS_CONTROL_READ | ACCESS_CLIENT,
    191                (void *)&zclGp_gppActiveFunctionality
    192              }
    193            },
    194            {
    195              ZCL_CLUSTER_ID_GREEN_POWER,
    196              {  // Attribute record
    197                ATTRID_GP_SHARED_SEC_KEY_TYPE,
    198                ZCL_DATATYPE_BITMAP8,
    199                ACCESS_CONTROL_READ | ACCESS_CONTROL_WRITE | ACCESS_CLIENT,
    200                (void *)&zclGp_gpSharedSecurityKeyType
    201              }
    202            },
    203            {
    204              ZCL_CLUSTER_ID_GREEN_POWER,
    205              {  // Attribute record
    206                ATTRID_GP_SHARED_SEC_KEY,
    207                ZCL_DATATYPE_128_BIT_SEC_KEY,
    208                ACCESS_CONTROL_READ | ACCESS_CONTROL_WRITE | ACCESS_CLIENT,
    209                (void *)&zclGp_gpSharedSecurityKey
    210              }
    211            },
    212            {
    213              ZCL_CLUSTER_ID_GREEN_POWER,
    214              {  // Attribute record
    215                ATTRID_GP_LINK_KEY,
    216                ZCL_DATATYPE_128_BIT_SEC_KEY,
    217                ACCESS_CONTROL_READ | ACCESS_CONTROL_WRITE | ACCESS_CLIENT,
    218                (void *)&zclGp_gpLinkKey
    219              }
    220            },
    221            {
    222              ZCL_CLUSTER_ID_GREEN_POWER,
    223              {  // Attribute record
    224                ATTRID_CLUSTER_REVISION,
    225                ZCL_DATATYPE_UINT8,
    226                ACCESS_CONTROL_READ | ACCESS_CLIENT,
    227                (void *)&zclGp_clusterRevision
    228              }
    229            }
    230          };
    231          
    232          

   \                                 In  segment CODE_C, align 1
    233          uint8 CONST zclGp_NumAttributes = ( sizeof(zclGp_Attrs) / sizeof(zclGp_Attrs[0]) );
   \                     zclGp_NumAttributes:
   \   000000   0C           DB 12
    234          
    235           /*********************************************************************
    236           * EXTERNAL VARIABLES
    237           */
    238          
    239          //List to filter duplicated packets

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    240          gp_DataInd_t        *gp_DataIndList;
   \                     gp_DataIndList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    241          
    242          extern uint32 gpTimeTempBackoff;
    243          extern uint16 gpTimeTempTimer;
    244          extern bool   gpLockTimestamp;
    245          /*********************************************************************
    246           * EXTERNAL FUNCTIONS
    247           */
    248          
    249          
    250          /*********************************************************************
    251           * LOCAL VARIABLES
    252           */
    253          // This is the Cluster ID List and should be filled with Application
    254          // specific cluster IDs.
    255          #define GREEN_POWER_EP_MAX_INCLUSTERS       1

   \                                 In  segment XDATA_ROM_C, align 1
    256          static const cId_t greenPower_EP_InClusterList[GREEN_POWER_EP_MAX_INCLUSTERS] =
   \                     greenPower_EP_InClusterList:
   \   000000   2100         DW 33
    257          {
    258            ZCL_CLUSTER_ID_GREEN_POWER
    259          };
    260          
    261          #define GREEN_POWER_EP_MAX_OUTCLUSTERS       1

   \                                 In  segment XDATA_ROM_C, align 1
    262          static const cId_t greenPower_EP_OutClusterList[GREEN_POWER_EP_MAX_OUTCLUSTERS] =
   \                     greenPower_EP_OutClusterList:
   \   000000   2100         DW 33
    263          {
    264            ZCL_CLUSTER_ID_GREEN_POWER
    265          };
    266          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    267          static SimpleDescriptionFormat_t greenPower_EP_SimpleDesc =
   \                     greenPower_EP_SimpleDesc:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for greenPower_EP_SimpleDesc>`
   \   00000C                REQUIRE __INIT_XDATA_I
    268          {
    269            GREEN_POWER_INTERNAL_ENDPOINT,         //  int Endpoint;
    270            ZCL_GP_PROFILE_ID,                     //  uint16 AppProfId;
    271            ZCL_GP_DEVICEID_PROXY_BASIC,           //  uint16 AppDeviceId;
    272            0,                                     //  int   AppDevVer:4;
    273            0,                                     //  int   AppFlags:4;
    274            GREEN_POWER_EP_MAX_INCLUSTERS,         //  byte  AppNumInClusters;
    275            (cId_t *)greenPower_EP_InClusterList,  //  byte *pAppInClusterList;
    276            GREEN_POWER_EP_MAX_OUTCLUSTERS,        //  byte  AppNumInClusters;
    277            (cId_t *)greenPower_EP_OutClusterList  //  byte *pAppInClusterList;
    278          };
    279          
    280          
    281          
    282          
    283           /*********************************************************************
    284           * LOCAL FUNCTIONS
    285           */
    286          static void GP_ProccessCommissioningNotification(gp_DataInd_t *gp_DataInd);
    287          static void GP_ProccessNotification(gp_DataInd_t *gp_DataInd);
    288          
    289          static void zclGp_GpPairingCommandCB( zclGpPairing_t *pCmd );
    290          static void zclGp_GpProxyTableReqCB( zclGpProxyTableRequest_t *pCmd );
    291          static void zclGp_GpProxyCommissioningModeCB(zclGpProxyCommissioningMode_t* pCmd);
    292          static void zclGp_GpResponseCommandCB(zclGpResponse_t* pCmd);
    293          static void gp_u32CastPointer( uint8 *data, uint8 *p );
    294          static void gp_u16CastPointer( uint8 *data, uint8 *p );
    295          static void gp_u8CastPointer( uint8 *data, uint8 *p );
    296          static void gp_ZclPairingParse( zclGpPairing_t* pCmd, gpPairingCmd_t* payload );
    297          static void gp_ZclProxyTableReqParse( zclGpProxyTableRequest_t* pCmd, gpProxyTableReqCmd_t* payload );
    298          static uint8 gp_SecurityOperationProxy( gp_DataInd_t* pInd, uint8* pKeyType, uint8* pKey);
    299          static gp_DataInd_t* gp_DataIndFindDuplicate(uint8 handle, uint8 secLvl);
    300          static uint8 GP_RecoveryKey(uint8 GPDFKeyType,uint8 KeyType, uint8 status, uint8 *Key);
    301           
    302          
    303          
    304          
    305          /*********************************************************************
    306           * ZCL General Profile Callback table
    307           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    308          static zclGp_AppCallbacks_t zclGpProxy_CmdCallbacks =
   \                     zclGpProxy_CmdCallbacks:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for zclGpProxy_CmdCallbacks>`
   \   000008                REQUIRE __INIT_XDATA_I
    309          {
    310            zclGp_GpPairingCommandCB,            //
    311            zclGp_GpProxyTableReqCB,
    312            zclGp_GpProxyCommissioningModeCB,    //
    313            zclGp_GpResponseCommandCB  
    314          };
    315          
    316          /*********************************************************************
    317           * PUBLIC FUNCTIONS
    318           *********************************************************************/
    319          
    320          
    321           

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    322          void gp_endpointInit(void)
   \                     gp_endpointInit:
    323          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    324          
    325            bdb_RegisterSimpleDescriptor( &greenPower_EP_SimpleDesc );
   \   000004                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   000004   7A..         MOV     R2,#greenPower_EP_SimpleDesc & 0xff
   \   000006   7B..         MOV     R3,#(greenPower_EP_SimpleDesc >> 8) & 0xff
   \   000008   12....       LCALL   `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    326            
    327            zclGp_RegisterCmdCallbacks( GREEN_POWER_INTERNAL_ENDPOINT, &zclGpProxy_CmdCallbacks );
   \   00000B                ; Setup parameters for call to function zclGp_RegisterCmdCallbacks
   \   00000B   7A..         MOV     R2,#zclGpProxy_CmdCallbacks & 0xff
   \   00000D   7B..         MOV     R3,#(zclGpProxy_CmdCallbacks >> 8) & 0xff
   \   00000F   79F2         MOV     R1,#-0xe
   \   000011   12....       LCALL   `??zclGp_RegisterCmdCallbacks::?relay`; Banked call to: zclGp_RegisterCmdCallbacks
    328            
    329            // Register the application's attribute list
    330            zcl_registerAttrList( GREEN_POWER_INTERNAL_ENDPOINT, zclGp_NumAttributes, zclGp_Attrs );
   \   000014                ; Setup parameters for call to function zcl_registerAttrList
   \   000014   7C..         MOV     R4,#zclGp_Attrs & 0xff
   \   000016   7D..         MOV     R5,#(zclGp_Attrs >> 8) & 0xff
   \   000018   7A0C         MOV     R2,#0xc
   \   00001A   79F2         MOV     R1,#-0xe
   \   00001C   12....       LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    331            
    332            zcl_registerReadWriteCB( GREEN_POWER_INTERNAL_ENDPOINT, zclGpp_ReadWriteAttrCB, NULL );
   \   00001F                ; Setup parameters for call to function zcl_registerReadWriteCB
   \   00001F   7C00         MOV     R4,#0x0
   \   000021   7D00         MOV     R5,#0x0
   \   000023   7A..         MOV     R2,#`??zclGpp_ReadWriteAttrCB::?relay` & 0xff
   \   000025   7B..         MOV     R3,#(`??zclGpp_ReadWriteAttrCB::?relay` >> 8) & 0xff
   \   000027   79F2         MOV     R1,#-0xe
   \   000029   12....       LCALL   `??zcl_registerReadWriteCB::?relay`; Banked call to: zcl_registerReadWriteCB
    333            
    334            gp_ProxyTblInit( FALSE );
   \   00002C                ; Setup parameters for call to function gp_ProxyTblInit
   \   00002C   7900         MOV     R1,#0x0
   \   00002E   12....       LCALL   `??gp_ProxyTblInit::?relay`; Banked call to: gp_ProxyTblInit
    335          
    336          }
   \   000031   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    337          
    338          /*********************************************************************
    339           * @fn      gp_stopCommissioningMode
    340           *
    341           * @brief   Stops the commissioning mode
    342           *
    343           * @param   none
    344           *
    345           * @return  none
    346           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    347          void gp_stopCommissioningMode(void)
   \                     gp_stopCommissioningMode:
    348          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    349            //Callback to notify about the end of the commissioning mode
    350            gp_commissioningOptions = 0;
   \   000004   90....       MOV     DPTR,#gp_commissioningOptions
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
    351            zgGP_InCommissioningMode = FALSE;
   \   000009   90....       MOV     DPTR,#zgGP_InCommissioningMode
   \   00000C   F0           MOVX    @DPTR,A
    352            gp_commissionerAddress = 0xFFFF;
   \   00000D   90....       MOV     DPTR,#gp_commissionerAddress
   \   000010   74FF         MOV     A,#-0x1
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   F0           MOVX    @DPTR,A
    353            osal_stop_timerEx(gp_TaskID,GP_COMMISSIONING_WINDOW_TIMEOUT);
   \   000015                ; Setup parameters for call to function osal_stop_timerEx
   \   000015   7A04         MOV     R2,#0x4
   \   000017   7B00         MOV     R3,#0x0
   \   000019   90....       MOV     DPTR,#gp_TaskID
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    354            
    355            //Release the gpTxQueue, proxy does not support bidirectional communication on operational mode
    356            //A.3.2.8
    357            gp_FreeGpTxQueue();
   \   000021                ; Setup parameters for call to function gp_FreeGpTxQueue
   \   000021   12....       LCALL   `??gp_FreeGpTxQueue::?relay`; Banked call to: gp_FreeGpTxQueue
    358            
    359            //Notify the user that we have exited the commissioning mode
    360            if(pfnCommissioningMode)
   \   000024   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000027   6008         JZ      ??gp_stopCommissioningMode_0
    361            {
    362              pfnCommissioningMode(FALSE);
   \   000029                ; Setup parameters for indirect call
   \   000029   7900         MOV     R1,#0x0
   \   00002B   12....       LCALL   ??Subroutine41_0 & 0xFFFF
    363            }
   \                     ??CrossCallReturnLabel_93:
   \   00002E   12....       LCALL   ?CALL_IND
    364          }
   \                     ??gp_stopCommissioningMode_0:
   \   000031   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV     DPTR,#pfnCommissioningMode
   \   000003                REQUIRE ??Subroutine31_0
   \   000003                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET
    365          
    366          /*********************************************************************
    367           * @fn      zclGp_ManteinanceIndParse
    368           *
    369           * @brief   Parse the Gp Manteinance indication to Gp Notification command
    370           *
    371           * @param   pInd - Pointer to the incoming data
    372           *
    373           * @return  ZStatus_t
    374           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    375          ZStatus_t zclGp_ManteinanceIndParse( gp_DataInd_t *pInd, gpCommissioningNotificationCmd_t *pGpNotification )
   \                     zclGp_ManteinanceIndParse:
    376          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0,R4
   \   000010   8D..         MOV     ?V1,R5
    377            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = {0};
    378            uint8  ntfOpt[2] = {0x00, 0x00};
   \   000012   90....       MOV     DPTR,#`?<Constant {0, 0}>`
   \   000015   AC..         MOV     R4,?XSP + 0
   \   000017   AD..         MOV     R5,?XSP + 1
   \   000019   7402         MOV     A,#0x2
   \   00001B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    379            int8 RSSI;
    380            uint8 LQI;
    381            
    382            if ( pInd->GPDCmmdID != GP_CHANNEL_REQ_COMMAND_ID )
   \   00001E   EE           MOV     A,R6
   \   00001F   242A         ADD     A,#0x2a
   \   000021   F5..         MOV     ?V2,A
   \   000023   E4           CLR     A
   \   000024   3F           ADDC    A,R7
   \   000025   F5..         MOV     ?V3,A
   \   000027   85..82       MOV     DPL,?V2
   \   00002A   F583         MOV     DPH,A
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   64E3         XRL     A,#0xe3
   \   00002F   6059         JZ      ??zclGp_ManteinanceIndParse_0
    383            {
    384              if ( PROXY_TBL_COMP_APPLICTION_ID( pInd->appID, GP_OPT_APP_ID_GPD ) )
   \   000031   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000034   5407         ANL     A,#0x7
   \   000036   F8           MOV     R0,A
   \   000037   701A         JNZ     ??zclGp_ManteinanceIndParse_1
    385              {
    386                pGpNotification->gpdId = pInd->SrcId;
   \   000039   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00003C   12....       LCALL   ?XLOAD_R0123
   \   00003F   85..82       MOV     DPL,?V0
   \   000042   85..83       MOV     DPH,?V1
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   12....       LCALL   ?XSTORE_R0123
    387                ntfOpt[0] = GP_OPT_APP_ID_GPD;
   \   00004A   85..82       MOV     DPL,?XSP + 0
   \   00004D   85..83       MOV     DPH,?XSP + 1
   \   000050   E4           CLR     A
   \   000051   8036         SJMP    ??zclGp_ManteinanceIndParse_2
    388              }
    389              else if ( PROXY_TBL_COMP_APPLICTION_ID( pInd->appID, GP_OPT_APP_ID_IEEE ) )
   \                     ??zclGp_ManteinanceIndParse_1:
   \   000053   7402         MOV     A,#0x2
   \   000055   68           XRL     A,R0
   \   000056   7032         JNZ     ??zclGp_ManteinanceIndParse_0
    390              {
    391                osal_memcpy( pGpNotification->gpdIEEE, &(pInd->srcAddr.addr.extAddr), Z_EXTADDR_LEN );
   \   000058                ; Setup parameters for call to function osal_memcpy
   \   000058   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005E   7C08         MOV     R4,#0x8
   \   000060   7D00         MOV     R5,#0x0
   \   000062   E5..         MOV     A,?V0
   \   000064   2406         ADD     A,#0x6
   \   000066   FA           MOV     R2,A
   \   000067   E4           CLR     A
   \   000068   35..         ADDC    A,?V1
   \   00006A   FB           MOV     R3,A
   \   00006B   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00006E   7403         MOV     A,#0x3
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
    392                pGpNotification->ep = pInd->EndPoint;
   \   000073   EE           MOV     A,R6
   \   000074   2425         ADD     A,#0x25
   \   000076   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000079   C0E0         PUSH    A
   \   00007B   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00007E   D0E0         POP     A
   \   000080   F0           MOVX    @DPTR,A
    393                ntfOpt[0] = GP_OPT_APP_ID_IEEE;
   \   000081   85..82       MOV     DPL,?XSP + 0
   \   000084   85..83       MOV     DPH,?XSP + 1
   \   000087   7402         MOV     A,#0x2
   \                     ??zclGp_ManteinanceIndParse_2:
   \   000089   F0           MOVX    @DPTR,A
    394              }
    395            }
    396            
    397            // Set the options bit field
    398            ( pInd->RxAfterTx == TRUE ) ?PROXY_TBL_SET_RX_AFTER_TX( ( uint8* )&ntfOpt[0] ) : PROXY_TBL_CLR_RX_AFTER_TX( ( uint8* )&ntfOpt[0] );
   \                     ??zclGp_ManteinanceIndParse_0:
   \   00008A   EE           MOV     A,R6
   \   00008B   2420         ADD     A,#0x20
   \   00008D   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000090   6401         XRL     A,#0x1
   \   000092   85..82       MOV     DPL,?XSP + 0
   \   000095   85..83       MOV     DPH,?XSP + 1
   \   000098   7005         JNZ     ??zclGp_ManteinanceIndParse_3
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   D2E3         SETB    0xE0 /* A   */.3
   \   00009D   8003         SJMP    ??zclGp_ManteinanceIndParse_4
   \                     ??zclGp_ManteinanceIndParse_3:
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   C2E3         CLR     0xE0 /* A   */.3
   \                     ??zclGp_ManteinanceIndParse_4:
   \   0000A2   F0           MOVX    @DPTR,A
    399            GP_CNTF_SET_SEC_LEVEL( ( uint8* )&ntfOpt[0], currEntry[PROXY_TBL_ENTRY_SEC_OPT] );
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   54CF         ANL     A,#0xcf
   \   0000A6   F0           MOVX    @DPTR,A
    400            GP_CNTF_SET_SEC_KEY_TYPE( ( uint16* )ntfOpt, currEntry[PROXY_TBL_ENTRY_SEC_OPT] );
   \   0000A7   543F         ANL     A,#0x3f
   \   0000A9   F8           MOV     R0,A
   \   0000AA   A3           INC     DPTR
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   54FE         ANL     A,#0xfe
   \   0000AE   F9           MOV     R1,A
   \   0000AF   85..82       MOV     DPL,?XSP + 0
   \   0000B2   85..83       MOV     DPH,?XSP + 1
   \   0000B5   12....       LCALL   ??Subroutine38_0 & 0xFFFF
    401            if( pInd->status == GP_DATA_IND_STATUS_AUTH_FAILURE )
   \                     ??CrossCallReturnLabel_69:
   \   0000B8   E5..         MOV     A,?V0
   \   0000BA   241A         ADD     A,#0x1a
   \   0000BC   F8           MOV     R0,A
   \   0000BD   E4           CLR     A
   \   0000BE   35..         ADDC    A,?V1
   \   0000C0   F9           MOV     R1,A
   \   0000C1   88..         MOV     ?V4,R0
   \   0000C3   89..         MOV     ?V5,R1
   \   0000C5   EE           MOV     A,R6
   \   0000C6   240D         ADD     A,#0xd
   \   0000C8   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0000CB   6403         XRL     A,#0x3
   \   0000CD   7020         JNZ     ??zclGp_ManteinanceIndParse_5
    402            {
    403              GP_CNTF_SET_SEC_FAIL( ( uint8* )&ntfOpt[1] );
   \   0000CF   7401         MOV     A,#0x1
   \   0000D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   D2E1         SETB    0xE0 /* A   */.1
   \   0000D7   F0           MOVX    @DPTR,A
    404              pGpNotification->mic = pInd->MIC;
   \   0000D8   EE           MOV     A,R6
   \   0000D9   242B         ADD     A,#0x2b
   \   0000DB   F582         MOV     DPL,A
   \   0000DD   E4           CLR     A
   \   0000DE   3F           ADDC    A,R7
   \   0000DF   F583         MOV     DPH,A
   \   0000E1   12....       LCALL   ?XLOAD_R0123
   \   0000E4   85..82       MOV     DPL,?V4
   \   0000E7   85..83       MOV     DPH,?V5
   \   0000EA   12....       LCALL   ?XSTORE_R0123
   \   0000ED   8010         SJMP    ??CrossCallReturnLabel_52
    405            }
    406            else
    407            {
    408              GP_CNTF_CLR_SEC_FAIL( ( uint8* )&ntfOpt[1] );
   \                     ??zclGp_ManteinanceIndParse_5:
   \   0000EF   7401         MOV     A,#0x1
   \   0000F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   C2E1         CLR     0xE0 /* A   */.1
   \   0000F7   F0           MOVX    @DPTR,A
    409              pGpNotification->mic = 0xFFFFFFFF;
   \   0000F8   8882         MOV     DPL,R0
   \   0000FA   8983         MOV     DPH,R1
   \   0000FC   12....       LCALL   ?Subroutine6 & 0xFFFF
    410            }
    411            GP_CNTF_SET_BIDIRECTIONAL_CAP( ( uint8* )&ntfOpt[1] );
    412          
    413            GP_CNTF_SET_PROXY_INFO( ( uint8* )&ntfOpt[1] );
   \                     ??CrossCallReturnLabel_52:
   \   0000FF   7401         MOV     A,#0x1
   \   000101   12....       LCALL   ?XSTACK_DISP0_8
   \   000104   E0           MOVX    A,@DPTR
   \   000105   440C         ORL     A,#0xc
   \   000107   F0           MOVX    @DPTR,A
    414            
    415            pGpNotification->options |= ( ( ntfOpt[0] ) & 0x00FF );
    416            pGpNotification->options |= ( ( ( ntfOpt[1] ) <<  8 ) & 0xFF00 );
   \   000108   85..82       MOV     DPL,?XSP + 0
   \   00010B   85..83       MOV     DPH,?XSP + 1
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   FA           MOV     R2,A
   \   000110   7401         MOV     A,#0x1
   \   000112   12....       LCALL   ?XSTACK_DISP0_8
   \   000115   E0           MOVX    A,@DPTR
   \   000116   F9           MOV     R1,A
   \   000117   EA           MOV     A,R2
   \   000118   F8           MOV     R0,A
   \   000119   85..82       MOV     DPL,?V0
   \   00011C   85..83       MOV     DPH,?V1
   \   00011F   E0           MOVX    A,@DPTR
   \   000120   48           ORL     A,R0
   \   000121   F0           MOVX    @DPTR,A
   \   000122   A3           INC     DPTR
   \   000123   E0           MOVX    A,@DPTR
   \   000124   49           ORL     A,R1
   \   000125   F0           MOVX    @DPTR,A
    417            
    418            pGpNotification->gpdSecCounter = pInd->GPDSecFrameCounter;
   \   000126   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000129   12....       LCALL   ?XLOAD_R0123
   \   00012C   E5..         MOV     A,?V0
   \   00012E   240F         ADD     A,#0xf
   \   000130   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000133   12....       LCALL   ?XSTORE_R0123
    419            pGpNotification->cmdId = pInd->GPDCmmdID;
   \   000136   85..82       MOV     DPL,?V2
   \   000139   85..83       MOV     DPH,?V3
   \   00013C   E0           MOVX    A,@DPTR
   \   00013D   C0E0         PUSH    A
   \   00013F   E5..         MOV     A,?V0
   \   000141   2413         ADD     A,#0x13
   \   000143   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000146   D0E0         POP     A
   \   000148   F0           MOVX    @DPTR,A
    420          
    421            if ( pInd->GPDasduLength > 0 )
   \   000149   EE           MOV     A,R6
   \   00014A   242F         ADD     A,#0x2f
   \   00014C   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   00014F   601A         JZ      ??CrossCallReturnLabel_76
    422            {
    423              pGpNotification->payloadLen = pInd->GPDasduLength;
   \   000151   C0E0         PUSH    A
   \   000153   E5..         MOV     A,?V0
   \   000155   2414         ADD     A,#0x14
   \   000157   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00015A   D0E0         POP     A
   \   00015C   F0           MOVX    @DPTR,A
    424              pGpNotification->cmdPayload = pInd->GPDasdu;
   \   00015D   EE           MOV     A,R6
   \   00015E   2430         ADD     A,#0x30
   \   000160   F8           MOV     R0,A
   \   000161   E4           CLR     A
   \   000162   3F           ADDC    A,R7
   \   000163   F9           MOV     R1,A
   \   000164   E5..         MOV     A,?V0
   \   000166   2415         ADD     A,#0x15
   \   000168   12....       LCALL   ?Subroutine8 & 0xFFFF
    425            }
    426            
    427            pGpNotification->gppShortAddr = _NIB.nwkDevAddress;
   \                     ??CrossCallReturnLabel_76:
   \   00016B   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00016E   E5..         MOV     A,?V0
   \   000170   2417         ADD     A,#0x17
   \   000172   12....       LCALL   ?Subroutine8 & 0xFFFF
    428            
    429            RSSI = pInd->Rssi;
   \                     ??CrossCallReturnLabel_77:
   \   000175   EE           MOV     A,R6
   \   000176   240E         ADD     A,#0xe
   \   000178   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00017B   F8           MOV     R0,A
    430            ( RSSI > 8 ) ?RSSI = 8 : ( RSSI < -109 ) ?RSSI = -109 : NULL;
   \   00017C   C3           CLR     C
   \   00017D   9409         SUBB    A,#0x9
   \   00017F   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000181   65D0         XRL     A,PSW
   \   000183   33           RLC     A
   \   000184   4004         JC      ??zclGp_ManteinanceIndParse_6
   \   000186   783B         MOV     R0,#0x3b
   \   000188   8019         SJMP    ??zclGp_ManteinanceIndParse_7
   \                     ??zclGp_ManteinanceIndParse_6:
   \   00018A   E8           MOV     A,R0
   \   00018B   C3           CLR     C
   \   00018C   9493         SUBB    A,#-0x6d
   \   00018E   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000190   65D0         XRL     A,PSW
   \   000192   33           RLC     A
   \   000193   5004         JNC     ??zclGp_ManteinanceIndParse_8
   \   000195   7800         MOV     R0,#0x0
   \   000197   800A         SJMP    ??zclGp_ManteinanceIndParse_7
   \                     ??zclGp_ManteinanceIndParse_8:
   \   000199   746E         MOV     A,#0x6e
   \   00019B   28           ADD     A,R0
   \   00019C   75F002       MOV     B,#0x2
   \   00019F   12....       LCALL   ?SC_DIV_MOD
   \   0001A2   F8           MOV     R0,A
    431            RSSI += 110;
    432            RSSI /= 2;
    433            
    434            ( pInd->LinkQuality == 0 ) ?LQI = 0 : ( pInd->LinkQuality > 0 ) ?LQI = 2 : NULL;
   \                     ??zclGp_ManteinanceIndParse_7:
   \   0001A3   EE           MOV     A,R6
   \   0001A4   240F         ADD     A,#0xf
   \   0001A6   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   0001A9   7004         JNZ     ??zclGp_ManteinanceIndParse_9
   \   0001AB   7900         MOV     R1,#0x0
   \   0001AD   8002         SJMP    ??zclGp_ManteinanceIndParse_10
   \                     ??zclGp_ManteinanceIndParse_9:
   \   0001AF   7902         MOV     R1,#0x2
    435            
    436            pGpNotification->gppGpdLink = RSSI;
    437            pGpNotification->gppGpdLink |= ( LQI << 6 );
   \                     ??zclGp_ManteinanceIndParse_10:
   \   0001B1   E9           MOV     A,R1
   \   0001B2   C4           SWAP    A
   \   0001B3   33           RLC     A
   \   0001B4   33           RLC     A
   \   0001B5   54C0         ANL     A,#0xc0
   \   0001B7   48           ORL     A,R0
   \   0001B8   C0E0         PUSH    A
   \   0001BA   E5..         MOV     A,?V0
   \   0001BC   2419         ADD     A,#0x19
   \   0001BE   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0001C1   D0E0         POP     A
   \   0001C3   F0           MOVX    @DPTR,A
    438              
    439            return SUCCESS;
   \   0001C4   7900         MOV     R1,#0x0
   \   0001C6   7402         MOV     A,#0x2
   \   0001C8                REQUIRE ?Subroutine1
   \   0001C8                ; // Fall through to label ?Subroutine1
    440          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F07         MOV     R7,#0x7
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   90....       MOV     DPTR,#_NIB + 20
   \   000003                REQUIRE ??Subroutine32_0
   \   000003                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   74FF         MOV     A,#-0x1
   \   000002                REQUIRE ??Subroutine33_0
   \   000002                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E5..         MOV     A,?V0
   \   000002   240E         ADD     A,#0xe
   \   000004                REQUIRE ??Subroutine35_0
   \   000004                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V1
   \   000005   F583         MOV     DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V1
   \   000005                REQUIRE ??Subroutine37_0
   \   000005                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine38_0
   \   000002                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   EE           MOV     A,R6
   \   000001   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000004   3F           ADDC    A,R7
   \   000005   F583         MOV     DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   2426         ADD     A,#0x26
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   EE           MOV     A,R6
   \   000001   2421         ADD     A,#0x21
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   EE           MOV     A,R6
   \   000001   2411         ADD     A,#0x11
   \   000003   F5..         MOV     ?V4,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F5..         MOV     ?V5,A
   \   000009   75..00       MOV     ?V6,#0x0
   \   00000C   78..         MOV     R0,#?V4
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   EE           MOV     A,R6
   \   000001   241C         ADD     A,#0x1c
   \   000003                REQUIRE ??Subroutine40_0
   \   000003                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET
    441          
    442          /*********************************************************************
    443           * @fn      zclGp_DataIndParse
    444           *
    445          
    446           * @brief   Parse the Gp Data indication to Gp Notification command
    447           *
    448           * @param   pInd - Pointer to the incoming data
    449           *
    450           * @return  ZStatus_t
    451           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    452          ZStatus_t zclGp_DataIndParse( gp_DataInd_t *pInd, gpNotificationCmd_t *pGpNotification )
   \                     zclGp_DataIndParse:
    453          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 64
   \   000005   74C0         MOV     A,#-0x40
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   \   00000E   8C..         MOV     ?V6,R4
   \   000010   8D..         MOV     ?V7,R5
    454            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = {0};
   \   000012   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
   \   000015   AC..         MOV     R4,?XSP + 0
   \   000017   AD..         MOV     R5,?XSP + 1
   \   000019   7440         MOV     A,#0x40
   \   00001B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    455            uint8  ntfOpt[2] = {0x00, 0x00};
   \   00001E   7E00         MOV     R6,#0x0
    456            uint8 i;
    457            int8 RSSI;
    458            uint8 LQI;
    459            uint8 status;
    460            
    461            for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   000020   7F00         MOV     R7,#0x0
   \   000022   EA           MOV     A,R2
   \   000023   2411         ADD     A,#0x11
   \   000025   F5..         MOV     ?V0,A
   \   000027   E4           CLR     A
   \   000028   35..         ADDC    A,?V5
   \   00002A   F5..         MOV     ?V1,A
   \   00002C   8E..         MOV     ?V2,R6
   \   00002E   EA           MOV     A,R2
   \   00002F   2421         ADD     A,#0x21
   \   000031   F5..         MOV     ?V12,A
   \   000033   E4           CLR     A
   \   000034   35..         ADDC    A,?V5
   \   000036   F5..         MOV     ?V13,A
    462            {
    463              status = gp_getProxyTableByIndex( ( ZCD_NV_PROXY_TABLE_START + i ), currEntry );
   \                     ??zclGp_DataIndParse_0:
   \   000038                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   000038   AC..         MOV     R4,?XSP + 0
   \   00003A   AD..         MOV     R5,?XSP + 1
   \   00003C   EF           MOV     A,R7
   \   00003D   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000040   12....       LCALL   `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   000043   E9           MOV     A,R1
   \   000044   F8           MOV     R0,A
    464          
    465              if ( status == NV_OPER_FAILED )
   \   000045   740A         MOV     A,#0xa
   \   000047   68           XRL     A,R0
   \   000048   7005         JNZ     ??zclGp_DataIndParse_1
    466              {
    467                return status;
   \   00004A   790A         MOV     R1,#0xa
   \   00004C   02....       LJMP    ??zclGp_DataIndParse_2 & 0xFFFF
    468              }
    469              
    470              // if the entry is empty
    471              if ( status == NV_INVALID_DATA )
   \                     ??zclGp_DataIndParse_1:
   \   00004F   740D         MOV     A,#0xd
   \   000051   68           XRL     A,R0
   \   000052   7003         JNZ     $+5
   \   000054   02....       LJMP    ??zclGp_DataIndParse_3 & 0xFFFF
    472              {
    473                continue;
    474              }
    475            
    476              if ( PROXY_TBL_COMP_APPLICTION_ID( pInd->appID, currEntry[PROXY_TBL_ENTRY_OPT] ) )
   \   000057   E5..         MOV     A,?V4
   \   000059   241C         ADD     A,#0x1c
   \   00005B   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00005E   FC           MOV     R4,A
   \   00005F   5407         ANL     A,#0x7
   \   000061   FA           MOV     R2,A
   \   000062   85..82       MOV     DPL,?XSP + 0
   \   000065   85..83       MOV     DPH,?XSP + 1
   \   000068   E0           MOVX    A,@DPTR
   \   000069   5407         ANL     A,#0x7
   \   00006B   6A           XRL     A,R2
   \   00006C   7001         JNZ     ??zclGp_DataIndParse_4
   \   00006E   E4           CLR     A
   \                     ??zclGp_DataIndParse_4:
   \   00006F   6003         JZ      $+5
   \   000071   02....       LJMP    ??zclGp_DataIndParse_3 & 0xFFFF
    477              {
    478                if ( pInd->appID == GP_OPT_APP_ID_GPD )
   \   000074   EC           MOV     A,R4
   \   000075   7045         JNZ     ??zclGp_DataIndParse_5
    479                {
    480                  if ( osal_memcmp( &pInd->SrcId, &currEntry[PROXY_TBL_ENTRY_GPD_ID + 4], sizeof ( uint32 ) ) )
   \   000077                ; Setup parameters for call to function osal_memcmp
   \   000077   7406         MOV     A,#0x6
   \   000079   12....       LCALL   ?XSTACK_DISP0_8
   \   00007C   A982         MOV     R1,DPL
   \   00007E   AA83         MOV     R2,DPH
   \   000080   89..         MOV     ?V8,R1
   \   000082   8A..         MOV     ?V9,R2
   \   000084   8E..         MOV     ?V10,R6
   \   000086   78..         MOV     R0,#?V8
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00008B   7C04         MOV     R4,#0x4
   \   00008D   7D00         MOV     R5,#0x0
   \   00008F   85..82       MOV     DPL,?V12
   \   000092   85..83       MOV     DPH,?V13
   \   000095   A982         MOV     R1,DPL
   \   000097   AA83         MOV     R2,DPH
   \   000099   7B00         MOV     R3,#0x0
   \   00009B   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00009E   7403         MOV     A,#0x3
   \   0000A0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A3   E9           MOV     A,R1
   \   0000A4   6079         JZ      ??zclGp_DataIndParse_3
    481                  {
    482                    // Entry found
    483                    pGpNotification->gpdId = pInd->SrcId;
   \   0000A6   85..82       MOV     DPL,?V12
   \   0000A9   85..83       MOV     DPH,?V13
   \   0000AC   12....       LCALL   ?XLOAD_R0123
   \   0000AF   85..82       MOV     DPL,?V6
   \   0000B2   85..83       MOV     DPH,?V7
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   12....       LCALL   ?XSTORE_R0123
    484                    ntfOpt[0] = GP_OPT_APP_ID_GPD;
    485                    break;
   \   0000BA   806D         SJMP    ??zclGp_DataIndParse_6
    486                  }
    487                }
    488                else if ( pInd->appID == GP_OPT_APP_ID_IEEE )
   \                     ??zclGp_DataIndParse_5:
   \   0000BC   7402         MOV     A,#0x2
   \   0000BE   6C           XRL     A,R4
   \   0000BF   705E         JNZ     ??zclGp_DataIndParse_3
    489                {
    490                  if ( osal_memcmp( &pInd->srcAddr, &currEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN ) )
   \   0000C1                ; Setup parameters for call to function osal_memcmp
   \   0000C1   7402         MOV     A,#0x2
   \   0000C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C6   A982         MOV     R1,DPL
   \   0000C8   AA83         MOV     R2,DPH
   \   0000CA   89..         MOV     ?V8,R1
   \   0000CC   8A..         MOV     ?V9,R2
   \   0000CE   8E..         MOV     ?V10,R6
   \   0000D0   78..         MOV     R0,#?V8
   \   0000D2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000D5   7C08         MOV     R4,#0x8
   \   0000D7   7D00         MOV     R5,#0x0
   \   0000D9   A9..         MOV     R1,?V0
   \   0000DB   AA..         MOV     R2,?V1
   \   0000DD   AB..         MOV     R3,?V2
   \   0000DF   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000E2   7403         MOV     A,#0x3
   \   0000E4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E7   E9           MOV     A,R1
   \   0000E8   6035         JZ      ??zclGp_DataIndParse_3
    491                  {
    492                    // Entry found
    493                    osal_memcpy( pGpNotification->gpdIEEE, &(pInd->srcAddr.addr.extAddr), Z_EXTADDR_LEN );
   \   0000EA                ; Setup parameters for call to function osal_memcpy
   \   0000EA   78..         MOV     R0,#?V0
   \   0000EC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000EF   7C08         MOV     R4,#0x8
   \   0000F1   7D00         MOV     R5,#0x0
   \   0000F3   E5..         MOV     A,?V6
   \   0000F5   2406         ADD     A,#0x6
   \   0000F7   FA           MOV     R2,A
   \   0000F8   E4           CLR     A
   \   0000F9   35..         ADDC    A,?V7
   \   0000FB   FB           MOV     R3,A
   \   0000FC   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000FF   7403         MOV     A,#0x3
   \   000101   12....       LCALL   ?DEALLOC_XSTACK8
    494                    pGpNotification->ep = pInd->EndPoint;
   \   000104   E5..         MOV     A,?V4
   \   000106   2425         ADD     A,#0x25
   \   000108   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00010B   C0E0         PUSH    A
   \   00010D   E5..         MOV     A,?V6
   \   00010F   240E         ADD     A,#0xe
   \   000111   F582         MOV     DPL,A
   \   000113   E4           CLR     A
   \   000114   35..         ADDC    A,?V7
   \   000116   F583         MOV     DPH,A
   \   000118   D0E0         POP     A
   \   00011A   F0           MOVX    @DPTR,A
    495                    ntfOpt[0] = GP_OPT_APP_ID_IEEE;
   \   00011B   7E02         MOV     R6,#0x2
    496                    break;
   \   00011D   800A         SJMP    ??zclGp_DataIndParse_6
    497                  }
    498                }
    499              }
    500              else
    501              {
    502                continue;
    503              }
    504            }
   \                     ??zclGp_DataIndParse_3:
   \   00011F   0F           INC     R7
   \   000120   EF           MOV     A,R7
   \   000121   C3           CLR     C
   \   000122   9406         SUBB    A,#0x6
   \   000124   5003         JNC     $+5
   \   000126   02....       LJMP    ??zclGp_DataIndParse_0 & 0xFFFF
    505            
    506            // Set the options bit field
    507            GP_NTF_SET_ALSO_UNICAST( ( uint8* )&ntfOpt[0], currEntry[PROXY_TBL_ENTRY_OPT] );
    508            GP_NTF_SET_ALSO_DGROUP( ( uint8* )&ntfOpt[0], currEntry[PROXY_TBL_ENTRY_OPT] );
    509            GP_NTF_SET_ALSO_CGROUP( ( uint8* )&ntfOpt[0], currEntry[PROXY_TBL_ENTRY_OPT] );
    510            GP_NTF_SET_SEC_LEVEL( ( uint8* )&ntfOpt[0], currEntry[PROXY_TBL_ENTRY_SEC_OPT] );
   \                     ??zclGp_DataIndParse_6:
   \   000129   740D         MOV     A,#0xd
   \   00012B   12....       LCALL   ?XSTACK_DISP0_8
   \   00012E   E0           MOVX    A,@DPTR
   \   00012F   F8           MOV     R0,A
   \   000130   C4           SWAP    A
   \   000131   33           RLC     A
   \   000132   33           RLC     A
   \   000133   54C0         ANL     A,#0xc0
   \   000135   FA           MOV     R2,A
   \   000136   85..82       MOV     DPL,?XSP + 0
   \   000139   85..83       MOV     DPH,?XSP + 1
   \   00013C   E0           MOVX    A,@DPTR
   \   00013D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00013F   E4           CLR     A
   \   000140   33           RLC     A
   \   000141   C4           SWAP    A
   \   000142   33           RLC     A
   \   000143   F9           MOV     R1,A
   \   000144   E0           MOVX    A,@DPTR
   \   000145   13           RRC     A
   \   000146   13           RRC     A
   \   000147   13           RRC     A
   \   000148   541F         ANL     A,#0x1f
   \   00014A   5418         ANL     A,#0x18
   \   00014C   4E           ORL     A,R6
   \   00014D   49           ORL     A,R1
   \   00014E   543F         ANL     A,#0x3f
   \   000150   4A           ORL     A,R2
   \   000151   FE           MOV     R6,A
    511            GP_NTF_SET_SEC_KEY_TYPE( ( uint8* )&ntfOpt[1], currEntry[PROXY_TBL_ENTRY_SEC_OPT] );
   \   000152   E8           MOV     A,R0
   \   000153   13           RRC     A
   \   000154   13           RRC     A
   \   000155   543F         ANL     A,#0x3f
   \   000157   5407         ANL     A,#0x7
   \   000159   F8           MOV     R0,A
    512            pInd->RxAfterTx ?PROXY_TBL_SET_RX_AFTER_TX( ( uint8* )&ntfOpt[1] ) : PROXY_TBL_CLR_RX_AFTER_TX( ( uint8* )&ntfOpt[1] );
   \   00015A   E5..         MOV     A,?V4
   \   00015C   2420         ADD     A,#0x20
   \   00015E   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000161   6004         JZ      ??zclGp_DataIndParse_7
   \   000163   E8           MOV     A,R0
   \   000164   D2E3         SETB    0xE0 /* A   */.3
   \   000166   F8           MOV     R0,A
    513            PROXY_TBL_CLR_TX_QUEUE_FULL( ( uint8* )&ntfOpt[1] );
    514            PROXY_TBL_SET_BIDIRECTIONAL_CAP( ( uint8* )&ntfOpt[1] );
    515            PROXY_TBL_SET_PROXY_INFO( ( uint8* )&ntfOpt[1] );
    516            
    517            pGpNotification->options |= ( ( ntfOpt[0] ) & 0x00FF );
    518            pGpNotification->options |= ( ( ( ntfOpt[1] ) <<  8 ) & 0xFF00 );
   \                     ??zclGp_DataIndParse_7:
   \   000167   EE           MOV     A,R6
   \   000168   FA           MOV     R2,A
   \   000169   7460         MOV     A,#0x60
   \   00016B   48           ORL     A,R0
   \   00016C   F9           MOV     R1,A
   \   00016D   EA           MOV     A,R2
   \   00016E   F8           MOV     R0,A
   \   00016F   85..82       MOV     DPL,?V6
   \   000172   85..83       MOV     DPH,?V7
   \   000175   E0           MOVX    A,@DPTR
   \   000176   48           ORL     A,R0
   \   000177   F0           MOVX    @DPTR,A
   \   000178   A3           INC     DPTR
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   49           ORL     A,R1
   \   00017B   F0           MOVX    @DPTR,A
    519            
    520            pGpNotification->gpdSecCounter = pInd->GPDSecFrameCounter;
   \   00017C   E5..         MOV     A,?V4
   \   00017E   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000181   35..         ADDC    A,?V5
   \   000183   F583         MOV     DPH,A
   \   000185   12....       LCALL   ?XLOAD_R0123
   \   000188   E5..         MOV     A,?V6
   \   00018A   240F         ADD     A,#0xf
   \   00018C   F582         MOV     DPL,A
   \   00018E   E4           CLR     A
   \   00018F   35..         ADDC    A,?V7
   \   000191   F583         MOV     DPH,A
   \   000193   12....       LCALL   ?XSTORE_R0123
    521            pGpNotification->cmdId = pInd->GPDCmmdID;
   \   000196   E5..         MOV     A,?V4
   \   000198   242A         ADD     A,#0x2a
   \   00019A   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00019D   C0E0         PUSH    A
   \   00019F   E5..         MOV     A,?V6
   \   0001A1   2413         ADD     A,#0x13
   \   0001A3   F582         MOV     DPL,A
   \   0001A5   E4           CLR     A
   \   0001A6   35..         ADDC    A,?V7
   \   0001A8   F583         MOV     DPH,A
   \   0001AA   D0E0         POP     A
   \   0001AC   F0           MOVX    @DPTR,A
    522          
    523            if ( pInd->GPDasduLength > 0 )
   \   0001AD   E5..         MOV     A,?V4
   \   0001AF   242F         ADD     A,#0x2f
   \   0001B1   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0001B4   6025         JZ      ??CrossCallReturnLabel_74
    524            {
    525              pGpNotification->payloadLen = pInd->GPDasduLength;
   \   0001B6   C0E0         PUSH    A
   \   0001B8   E5..         MOV     A,?V6
   \   0001BA   2414         ADD     A,#0x14
   \   0001BC   F582         MOV     DPL,A
   \   0001BE   E4           CLR     A
   \   0001BF   35..         ADDC    A,?V7
   \   0001C1   F583         MOV     DPH,A
   \   0001C3   D0E0         POP     A
   \   0001C5   F0           MOVX    @DPTR,A
    526              pGpNotification->cmdPayload = pInd->GPDasdu;
   \   0001C6   E5..         MOV     A,?V4
   \   0001C8   2430         ADD     A,#0x30
   \   0001CA   F8           MOV     R0,A
   \   0001CB   E4           CLR     A
   \   0001CC   35..         ADDC    A,?V5
   \   0001CE   F9           MOV     R1,A
   \   0001CF   E5..         MOV     A,?V6
   \   0001D1   2415         ADD     A,#0x15
   \   0001D3   F582         MOV     DPL,A
   \   0001D5   E4           CLR     A
   \   0001D6   35..         ADDC    A,?V7
   \   0001D8   12....       LCALL   ??Subroutine37_0 & 0xFFFF
    527            }
    528            
    529            pGpNotification->gppShortAddr = _NIB.nwkDevAddress;
   \                     ??CrossCallReturnLabel_74:
   \   0001DB   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0001DE   E5..         MOV     A,?V6
   \   0001E0   2417         ADD     A,#0x17
   \   0001E2   F582         MOV     DPL,A
   \   0001E4   E4           CLR     A
   \   0001E5   35..         ADDC    A,?V7
   \   0001E7   12....       LCALL   ??Subroutine37_0 & 0xFFFF
    530            
    531            RSSI = pInd->Rssi;
   \                     ??CrossCallReturnLabel_75:
   \   0001EA   E5..         MOV     A,?V4
   \   0001EC   240E         ADD     A,#0xe
   \   0001EE   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0001F1   F9           MOV     R1,A
    532            ( RSSI > 8 ) ?RSSI = 8 : ( RSSI < -109 ) ?RSSI = -109 : NULL;
   \   0001F2   C3           CLR     C
   \   0001F3   9409         SUBB    A,#0x9
   \   0001F5   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0001F7   65D0         XRL     A,PSW
   \   0001F9   33           RLC     A
   \   0001FA   4004         JC      ??zclGp_DataIndParse_8
   \   0001FC   7876         MOV     R0,#0x76
   \   0001FE   8013         SJMP    ??zclGp_DataIndParse_9
   \                     ??zclGp_DataIndParse_8:
   \   000200   E9           MOV     A,R1
   \   000201   C3           CLR     C
   \   000202   9493         SUBB    A,#-0x6d
   \   000204   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000206   65D0         XRL     A,PSW
   \   000208   33           RLC     A
   \   000209   5004         JNC     ??zclGp_DataIndParse_10
   \   00020B   7801         MOV     R0,#0x1
   \   00020D   8004         SJMP    ??zclGp_DataIndParse_9
   \                     ??zclGp_DataIndParse_10:
   \   00020F   746E         MOV     A,#0x6e
   \   000211   29           ADD     A,R1
   \   000212   F8           MOV     R0,A
    533            RSSI += 110;
    534            RSSI /= 2;
   \                     ??zclGp_DataIndParse_9:
   \   000213   E8           MOV     A,R0
   \   000214   75F002       MOV     B,#0x2
   \   000217   12....       LCALL   ?SC_DIV_MOD
   \   00021A   F9           MOV     R1,A
    535            
    536            ( pInd->LinkQuality == 0 ) ?LQI = 0 : ( pInd->LinkQuality > 0 ) ?LQI = 2 : NULL;
   \   00021B   E5..         MOV     A,?V4
   \   00021D   240F         ADD     A,#0xf
   \   00021F   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000222   7004         JNZ     ??zclGp_DataIndParse_11
   \   000224   7800         MOV     R0,#0x0
   \   000226   8002         SJMP    ??zclGp_DataIndParse_12
   \                     ??zclGp_DataIndParse_11:
   \   000228   7802         MOV     R0,#0x2
    537            
    538            pGpNotification->gppGpdLink = RSSI;
    539            pGpNotification->gppGpdLink |= ( LQI << 6 );
   \                     ??zclGp_DataIndParse_12:
   \   00022A   E8           MOV     A,R0
   \   00022B   C4           SWAP    A
   \   00022C   33           RLC     A
   \   00022D   33           RLC     A
   \   00022E   54C0         ANL     A,#0xc0
   \   000230   49           ORL     A,R1
   \   000231   C0E0         PUSH    A
   \   000233   E5..         MOV     A,?V6
   \   000235   2419         ADD     A,#0x19
   \   000237   F582         MOV     DPL,A
   \   000239   E4           CLR     A
   \   00023A   35..         ADDC    A,?V7
   \   00023C   F583         MOV     DPH,A
   \   00023E   D0E0         POP     A
   \   000240   F0           MOVX    @DPTR,A
    540              
    541            return SUCCESS;
   \   000241   7900         MOV     R1,#0x0
   \                     ??zclGp_DataIndParse_2:
   \   000243   7440         MOV     A,#0x40
   \   000245                REQUIRE ?Subroutine2
   \   000245                ; // Fall through to label ?Subroutine2
    542          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F0E         MOV     R7,#0xe
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V5
   \   000005   F583         MOV     DPH,A
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   2410         ADD     A,#0x10
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   3403         ADDC    A,#0x3
   \   000006   FB           MOV     R3,A
   \   000007   22           RET
    543          
    544          /*********************************************************************
    545           * @fn      zclGp_GpPairingCommandCB
    546           *
    547           * @brief   Callback from the ZCL GreenPower Cluster Library when
    548           *          it received an Gp Notification Command for this application.
    549           *
    550           * @param   pCmd - command payload
    551           *
    552           * @return  none
    553           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    554          static void zclGp_GpPairingCommandCB( zclGpPairing_t *pCmd )
   \                     zclGp_GpPairingCommandCB:
    555          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 53
   \   000004   74CB         MOV     A,#-0x35
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    556            gpPairingCmd_t pairingPayload = {0x00};
   \   000009   90....       MOV     DPTR,#`?<Constant {0, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0,`
   \   00000C   AC..         MOV     R4,?XSP + 0
   \   00000E   AD..         MOV     R5,?XSP + 1
   \   000010   7435         MOV     A,#0x35
   \   000012   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    557          
    558            gp_ZclPairingParse( pCmd, &pairingPayload );
   \   000015                ; Setup parameters for call to function gp_ZclPairingParse
   \   000015   AC..         MOV     R4,?XSP + 0
   \   000017   AD..         MOV     R5,?XSP + 1
   \   000019   12....       LCALL   `??gp_ZclPairingParse::?relay`; Banked call to: gp_ZclPairingParse
    559            gp_PairingUpdateProxyTlb( &pairingPayload );
   \   00001C                ; Setup parameters for call to function gp_PairingUpdateProxyTlb
   \   00001C   AA..         MOV     R2,?XSP + 0
   \   00001E   AB..         MOV     R3,?XSP + 1
   \   000020   12....       LCALL   `??gp_PairingUpdateProxyTlb::?relay`; Banked call to: gp_PairingUpdateProxyTlb
    560            
    561            
    562            if(gp_commissioningOptions & GP_COMM_OPT_EXIT_ON_PAIRING_SUCCESS_MASK)
   \   000023   90....       MOV     DPTR,#gp_commissioningOptions
   \   000026   E0           MOVX    A,@DPTR
   \   000027   A2E2         MOV     C,0xE0 /* A   */.2
   \   000029   5003         JNC     ??zclGp_GpPairingCommandCB_0
    563            {
    564              gp_stopCommissioningMode();
   \   00002B                ; Setup parameters for call to function gp_stopCommissioningMode
   \   00002B   12....       LCALL   `??gp_stopCommissioningMode::?relay`; Banked call to: gp_stopCommissioningMode
    565            }
    566          }
   \                     ??zclGp_GpPairingCommandCB_0:
   \   00002E   7435         MOV     A,#0x35
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
   \   000033   02....       LJMP    ?Subroutine0 & 0xFFFF
    567          
    568          /*********************************************************************
    569           * @fn      zclGp_GpProxyTableReqCB
    570           *
    571           * @brief   Callback from the ZCL GreenPower Cluster Library when
    572           *          it received a Gp proxy table req.
    573           *
    574           * @param   pCmd - command payload
    575           *
    576           * @return  none
    577           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    578          static void zclGp_GpProxyTableReqCB( zclGpProxyTableRequest_t *pCmd )
   \                     zclGp_GpProxyTableReqCB:
    579          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 86
   \   000005   74AA         MOV     A,#-0x56
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
    580            uint8 i;
    581            uint8 status;
    582            uint8* buf = NULL;
    583            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = {0};
   \   00000E   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`
   \   000011   7416         MOV     A,#0x16
   \   000013   12....       LCALL   ?XSTACK_DISP102_8
   \   000016   7440         MOV     A,#0x40
   \   000018   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    584            
    585            zclGpProxyTableResponse_t proxyTblRsp = {0};
   \   00001B   90....       MOV     DPTR,#`?<Constant {0}>`
   \   00001E   04           INC     A
   \   00001F   12....       LCALL   ?XSTACK_DISP102_8
   \   000022   7406         MOV     A,#0x6
   \   000024   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    586            gpProxyTableReqCmd_t proxyTblReqPayload = {0};
   \   000027   90....       MOV     DPTR,#`?<Constant {0, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0,_1`
   \   00002A   740F         MOV     A,#0xf
   \   00002C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    587            
    588            proxyTblRsp.proxyTableEntry = NULL;
   \   00002F   7405         MOV     A,#0x5
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E4           CLR     A
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   F0           MOVX    @DPTR,A
    589          
    590            gp_ZclProxyTableReqParse( pCmd, &proxyTblReqPayload );
   \   000038                ; Setup parameters for call to function gp_ZclProxyTableReqParse
   \   000038   7407         MOV     A,#0x7
   \   00003A   12....       LCALL   ?XSTACK_DISP102_8
   \   00003D   12....       LCALL   `??gp_ZclProxyTableReqParse::?relay`; Banked call to: gp_ZclProxyTableReqParse
    591            
    592          
    593            for ( i = proxyTblReqPayload.index; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   000040   7415         MOV     A,#0x15
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F5..         MOV     ?V3,A
   \   000048   800D         SJMP    ??zclGp_GpProxyTableReqCB_0
    594            {
    595              status = gp_getProxyTableByIndex( ( ZCD_NV_PROXY_TABLE_START + i ), currEntry );
    596          
    597              if ( status == NV_OPER_FAILED )
    598              {
    599                break;
    600              }
    601              
    602              // if the entry is not empty
    603              if ( status == SUCCESS )
   \                     ??zclGp_GpProxyTableReqCB_1:
   \   00004A   E8           MOV     A,R0
   \   00004B   7008         JNZ     ??zclGp_GpProxyTableReqCB_2
    604              {
    605                proxyTblRsp.tableEntriesTotal += 1;
   \   00004D   7402         MOV     A,#0x2
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   E0           MOVX    A,@DPTR
   \   000053   04           INC     A
   \   000054   F0           MOVX    @DPTR,A
    606              }
   \                     ??zclGp_GpProxyTableReqCB_2:
   \   000055   05..         INC     ?V3
   \                     ??zclGp_GpProxyTableReqCB_0:
   \   000057   E5..         MOV     A,?V3
   \   000059   C3           CLR     C
   \   00005A   9406         SUBB    A,#0x6
   \   00005C   5012         JNC     ??zclGp_GpProxyTableReqCB_3
   \   00005E                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   00005E   7416         MOV     A,#0x16
   \   000060   12....       LCALL   ?XSTACK_DISP102_8
   \   000063   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000066   12....       LCALL   `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   000069   E9           MOV     A,R1
   \   00006A   F8           MOV     R0,A
   \   00006B   740A         MOV     A,#0xa
   \   00006D   68           XRL     A,R0
   \   00006E   70DA         JNZ     ??zclGp_GpProxyTableReqCB_1
    607            }
    608            
    609            if ( proxyTblRsp.tableEntriesTotal == 0x00 )
   \                     ??zclGp_GpProxyTableReqCB_3:
   \   000070   7402         MOV     A,#0x2
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   E0           MOVX    A,@DPTR
   \   000076   7024         JNZ     ??zclGp_GpProxyTableReqCB_4
    610            {
    611              proxyTblRsp.status = SUCCESS;
   \   000078   7401         MOV     A,#0x1
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   E4           CLR     A
   \   00007E   F0           MOVX    @DPTR,A
    612              proxyTblRsp.startIndex = 0xFF;
   \   00007F   7403         MOV     A,#0x3
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   74FF         MOV     A,#-0x1
   \   000086   F0           MOVX    @DPTR,A
    613              proxyTblRsp.entriesCount = 0x00;
   \   000087   7404         MOV     A,#0x4
   \   000089   12....       LCALL   ?XSTACK_DISP0_8
   \   00008C   E4           CLR     A
   \   00008D   12....       LCALL   ?Subroutine9 & 0xFFFF
    614              // Send response and exit
    615              zclGp_SendGpProxyTableResponse( pCmd->srcAddr, &proxyTblRsp, zcl_InSeqNum );
   \                     ??CrossCallReturnLabel_4:
   \   000090   12....       LCALL   ?XSTACK_DISP102_8
   \   000093   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000096   12....       LCALL   `??zclGp_SendGpProxyTableResponse::?relay`; Banked call to: zclGp_SendGpProxyTableResponse
    616              return;
   \   000099   02....       LJMP    ??zclGp_GpProxyTableReqCB_5 & 0xFFFF
    617            }
    618          
    619            
    620            if ( GP_IS_REQ_TPY_INDEX ( proxyTblReqPayload.options ) )
   \                     ??zclGp_GpProxyTableReqCB_4:
   \   00009C   7407         MOV     A,#0x7
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   13           RRC     A
   \   0000A3   13           RRC     A
   \   0000A4   13           RRC     A
   \   0000A5   541F         ANL     A,#0x1f
   \   0000A7   5403         ANL     A,#0x3
   \   0000A9   6401         XRL     A,#0x1
   \   0000AB   6003         JZ      $+5
   \   0000AD   02....       LJMP    ??zclGp_GpProxyTableReqCB_5 & 0xFFFF
    621            {
    622              uint8 entryLen = 0;
   \   0000B0   85..82       MOV     DPL,?XSP + 0
   \   0000B3   85..83       MOV     DPH,?XSP + 1
   \   0000B6   E4           CLR     A
   \   0000B7   F0           MOVX    @DPTR,A
    623              uint8 maxEntryLen = 0;
   \   0000B8   75..00       MOV     ?V2,#0x0
    624              
    625              for ( i = proxyTblReqPayload.index; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   0000BB   7415         MOV     A,#0x15
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   F5..         MOV     ?V3,A
   \   0000C3   8002         SJMP    ??zclGp_GpProxyTableReqCB_6
   \                     ??zclGp_GpProxyTableReqCB_7:
   \   0000C5   05..         INC     ?V3
   \                     ??zclGp_GpProxyTableReqCB_6:
   \   0000C7   E5..         MOV     A,?V3
   \   0000C9   C3           CLR     C
   \   0000CA   9406         SUBB    A,#0x6
   \   0000CC   5037         JNC     ??zclGp_GpProxyTableReqCB_8
    626              {    
    627                maxEntryLen = entryLen;    // Save the last iteration Lenght
   \   0000CE   85..82       MOV     DPL,?XSP + 0
   \   0000D1   85..83       MOV     DPH,?XSP + 1
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   F5..         MOV     ?V2,A
    628                
    629                // Get the length of the payload
    630                status = pt_ZclReadGetProxyEntry ( ( ZCD_NV_PROXY_TABLE_START + i ), NULL, &entryLen );
    631          
    632                if ( status != ZSuccess )
   \   0000D7                ; Setup parameters for call to function pt_ZclReadGetProxyEntry
   \   0000D7   A8..         MOV     R0,?XSP + 0
   \   0000D9   A9..         MOV     R1,?XSP + 1
   \   0000DB   88..         MOV     ?V4,R0
   \   0000DD   89..         MOV     ?V5,R1
   \   0000DF   78..         MOV     R0,#?V4
   \   0000E1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E4   7C00         MOV     R4,#0x0
   \   0000E6   7D00         MOV     R5,#0x0
   \   0000E8   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   0000EB   12....       LCALL   `??pt_ZclReadGetProxyEntry::?relay`; Banked call to: pt_ZclReadGetProxyEntry
   \   0000EE   7402         MOV     A,#0x2
   \   0000F0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F3   E9           MOV     A,R1
   \   0000F4   700F         JNZ     ??zclGp_GpProxyTableReqCB_8
    633                {
    634                  break;
    635                }
    636                
    637                if ( entryLen >= 75 )   // max payload for entries
   \   0000F6   85..82       MOV     DPL,?XSP + 0
   \   0000F9   85..83       MOV     DPH,?XSP + 1
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   C3           CLR     C
   \   0000FE   944B         SUBB    A,#0x4b
   \   000100   40C3         JC      ??zclGp_GpProxyTableReqCB_7
    638                {
    639                  entryLen = maxEntryLen;   // The last valid lenght is the MAX for this packet
   \   000102   E5..         MOV     A,?V2
   \   000104   F0           MOVX    @DPTR,A
    640                  break;
    641                }
    642              }
    643          
    644              buf = zcl_mem_alloc( entryLen );
   \                     ??zclGp_GpProxyTableReqCB_8:
   \   000105                ; Setup parameters for call to function osal_mem_alloc
   \   000105   85..82       MOV     DPL,?XSP + 0
   \   000108   85..83       MOV     DPH,?XSP + 1
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   FA           MOV     R2,A
   \   00010D   7B00         MOV     R3,#0x0
   \   00010F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000112   8A..         MOV     ?V4,R2
   \   000114   8B..         MOV     ?V5,R3
   \   000116   AE..         MOV     R6,?V4
   \   000118   AF..         MOV     R7,?V5
    645           
    646              if ( buf != NULL )
   \   00011A   EE           MOV     A,R6
   \   00011B   4F           ORL     A,R7
   \   00011C   7003         JNZ     $+5
   \   00011E   02....       LJMP    ??zclGp_GpProxyTableReqCB_5 & 0xFFFF
    647              {
    648                // Load the buffer - serially
    649                uint8 *pBuf = buf;
    650              
    651                entryLen = 0;
   \   000121   85..82       MOV     DPL,?XSP + 0
   \   000124   85..83       MOV     DPH,?XSP + 1
   \   000127   E4           CLR     A
   \   000128   F0           MOVX    @DPTR,A
    652                proxyTblRsp.entriesCount = 0;
   \   000129   7404         MOV     A,#0x4
   \   00012B   12....       LCALL   ?XSTACK_DISP0_8
   \   00012E   E4           CLR     A
   \   00012F   F0           MOVX    @DPTR,A
    653                for ( i = proxyTblReqPayload.index; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   000130   7415         MOV     A,#0x15
   \   000132   12....       LCALL   ?XSTACK_DISP0_8
   \   000135   E0           MOVX    A,@DPTR
   \   000136   F5..         MOV     ?V3,A
   \   000138   8002         SJMP    ??zclGp_GpProxyTableReqCB_9
   \                     ??zclGp_GpProxyTableReqCB_10:
   \   00013A   05..         INC     ?V3
   \                     ??zclGp_GpProxyTableReqCB_9:
   \   00013C   E5..         MOV     A,?V3
   \   00013E   C3           CLR     C
   \   00013F   9406         SUBB    A,#0x6
   \   000141   503C         JNC     ??zclGp_GpProxyTableReqCB_11
    654                {  
    655                  status = pt_ZclReadGetProxyEntry ( ( ZCD_NV_PROXY_TABLE_START + i ), pBuf, &entryLen );
   \   000143                ; Setup parameters for call to function pt_ZclReadGetProxyEntry
   \   000143   A8..         MOV     R0,?XSP + 0
   \   000145   A9..         MOV     R1,?XSP + 1
   \   000147   88..         MOV     ?V4,R0
   \   000149   89..         MOV     ?V5,R1
   \   00014B   78..         MOV     R0,#?V4
   \   00014D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000150   EE           MOV     A,R6
   \   000151   FC           MOV     R4,A
   \   000152   EF           MOV     A,R7
   \   000153   FD           MOV     R5,A
   \   000154   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000157   12....       LCALL   `??pt_ZclReadGetProxyEntry::?relay`; Banked call to: pt_ZclReadGetProxyEntry
   \   00015A   7402         MOV     A,#0x2
   \   00015C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00015F   E9           MOV     A,R1
   \   000160   F8           MOV     R0,A
    656                  if ( status == NV_OPER_FAILED )
   \   000161   740A         MOV     A,#0xa
   \   000163   68           XRL     A,R0
   \   000164   6019         JZ      ??zclGp_GpProxyTableReqCB_11
    657                  {
    658                    break;
    659                  }
    660                  
    661                  if ( status != NV_INVALID_DATA )
   \   000166   740D         MOV     A,#0xd
   \   000168   68           XRL     A,R0
   \   000169   6008         JZ      ??zclGp_GpProxyTableReqCB_12
    662                  {
    663                    proxyTblRsp.entriesCount += 1;
   \   00016B   7404         MOV     A,#0x4
   \   00016D   12....       LCALL   ?XSTACK_DISP0_8
   \   000170   E0           MOVX    A,@DPTR
   \   000171   04           INC     A
   \   000172   F0           MOVX    @DPTR,A
    664                  }
    665                  
    666                  if ( entryLen >= maxEntryLen )   // to see if we reched the MAX calculated payload
   \                     ??zclGp_GpProxyTableReqCB_12:
   \   000173   85..82       MOV     DPL,?XSP + 0
   \   000176   85..83       MOV     DPH,?XSP + 1
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   C3           CLR     C
   \   00017B   95..         SUBB    A,?V2
   \   00017D   40BB         JC      ??zclGp_GpProxyTableReqCB_10
    667                  {
    668                    break;
    669                  }
    670                }
    671                
    672                // Send response and exit
    673                proxyTblRsp.startIndex = proxyTblReqPayload.index;
   \                     ??zclGp_GpProxyTableReqCB_11:
   \   00017F   7415         MOV     A,#0x15
   \   000181   12....       LCALL   ?XSTACK_DISP0_8
   \   000184   E0           MOVX    A,@DPTR
   \   000185   C0E0         PUSH    A
   \   000187   7403         MOV     A,#0x3
   \   000189   12....       LCALL   ?XSTACK_DISP0_8
   \   00018C   D0E0         POP     A
   \   00018E   F0           MOVX    @DPTR,A
    674                proxyTblRsp.proxyTableEntry = buf;
   \   00018F   7405         MOV     A,#0x5
   \   000191   12....       LCALL   ?XSTACK_DISP0_8
   \   000194   EE           MOV     A,R6
   \   000195   F0           MOVX    @DPTR,A
   \   000196   A3           INC     DPTR
   \   000197   EF           MOV     A,R7
   \   000198   12....       LCALL   ?Subroutine9 & 0xFFFF
    675                zclGp_SendGpProxyTableResponse( pCmd->srcAddr, &proxyTblRsp, zcl_InSeqNum );
   \                     ??CrossCallReturnLabel_5:
   \   00019B   12....       LCALL   ?XSTACK_DISP102_8
   \   00019E   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   0001A1   12....       LCALL   `??zclGp_SendGpProxyTableResponse::?relay`; Banked call to: zclGp_SendGpProxyTableResponse
    676                zcl_mem_free( buf );
   \   0001A4                ; Setup parameters for call to function osal_mem_free
   \   0001A4   EE           MOV     A,R6
   \   0001A5   FA           MOV     R2,A
   \   0001A6   EF           MOV     A,R7
   \   0001A7   FB           MOV     R3,A
   \   0001A8   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    677              }
    678            }
    679          }
   \                     ??zclGp_GpProxyTableReqCB_5:
   \   0001AB   7456         MOV     A,#0x56
   \   0001AD                REQUIRE ?Subroutine3
   \   0001AD                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine34_0
   \   000003                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function zclGp_SendGpProxyTableResponse
   \   000001                ; Setup parameters for call to function zclGp_SendGpProxyTableResponse
   \   000001   90....       MOV     DPTR,#zcl_InSeqNum
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F9           MOV     R1,A
   \   000006   7401         MOV     A,#0x1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E5..         MOV     A,?V3
   \   000002                REQUIRE ??Subroutine39_0
   \   000002                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV     DPL,?V0
   \   000003   85..83       MOV     DPH,?V1
   \   000006                REQUIRE ??Subroutine42_0
   \   000006                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0
   \            00      
    680          
    681          
    682          /*********************************************************************
    683           * @fn      zclGp_GpResponseCommandCB
    684           *
    685           * @brief   Callback from the ZCL GreenPower Cluster Library when
    686           *          it received a Gp Response command.
    687           *
    688           * @param   pCmd - command payload
    689           *
    690           * @return  none
    691           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    692          static void zclGp_GpResponseCommandCB(zclGpResponse_t *pCmd)
   \                     zclGp_GpResponseCommandCB:
    693          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 75
   \   000005   74B5         MOV     A,#-0x4b
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
    694            gp_DataReq_t  *gp_DataReq;
    695            gpd_ID_t      gpd_ID;
    696            uint8         endpoint = 0;
    697            uint8         command;
    698            uint8         payloadLen = 0;
    699            
    700            //No bidirectional communication in operational mode
    701            //A.3.2.8
    702            if(!zgGP_InCommissioningMode)
   \   00000E   90....       MOV     DPTR,#zgGP_InCommissioningMode
   \   000011   E0           MOVX    A,@DPTR
   \   000012   7003         JNZ     $+5
   \   000014   02....       LJMP    ??zclGp_GpResponseCommandCB_0 & 0xFFFF
    703            {
    704              return;
    705            }
    706            
    707            gpd_ID.AppID = pCmd->options & GP_RSP_CMD_OPT_APP_ID_MASK;
   \   000017   EA           MOV     A,R2
   \   000018   2402         ADD     A,#0x2
   \   00001A   F5..         MOV     ?V12,A
   \   00001C   E4           CLR     A
   \   00001D   35..         ADDC    A,?V3
   \   00001F   F5..         MOV     ?V13,A
   \   000021   85..82       MOV     DPL,?V12
   \   000024   F583         MOV     DPH,A
   \   000026   E0           MOVX    A,@DPTR
   \   000027   5407         ANL     A,#0x7
   \   000029   C0E0         PUSH    A
   \   00002B   7402         MOV     A,#0x2
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   D0E0         POP     A
   \   000032   F0           MOVX    @DPTR,A
    708            if(gpd_ID.AppID == GP_APP_ID_DEFAULT)
   \   000033   6003         JZ      $+5
   \   000035   02....       LJMP    ??zclGp_GpResponseCommandCB_0 & 0xFFFF
    709            {
    710              gpd_ID.GPDId.SrcID = osal_build_uint32(pCmd->pData,sizeof(uint32));
   \   000038   EA           MOV     A,R2
   \   000039   2406         ADD     A,#0x6
   \   00003B   FE           MOV     R6,A
   \   00003C   E4           CLR     A
   \   00003D   35..         ADDC    A,?V3
   \   00003F   FF           MOV     R7,A
   \   000040                ; Setup parameters for call to function osal_build_uint32
   \   000040   7904         MOV     R1,#0x4
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000049   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00004C   EA           MOV     A,R2
   \   00004D   F8           MOV     R0,A
   \   00004E   EB           MOV     A,R3
   \   00004F   F9           MOV     R1,A
   \   000050   EC           MOV     A,R4
   \   000051   FA           MOV     R2,A
   \   000052   ED           MOV     A,R5
   \   000053   FB           MOV     R3,A
   \   000054   7403         MOV     A,#0x3
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   12....       LCALL   ?XSTORE_R0123
    711              pCmd->pData += sizeof(uint32);
   \   00005C   8E82         MOV     DPL,R6
   \   00005E   8F83         MOV     DPH,R7
   \   000060   E0           MOVX    A,@DPTR
   \   000061   2404         ADD     A,#0x4
   \   000063   F8           MOV     R0,A
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   3400         ADDC    A,#0x0
   \   000068   F9           MOV     R1,A
   \   000069   12....       LCALL   ?Subroutine7 & 0xFFFF
    712            }
    713            else if(gpd_ID.AppID == GP_APP_ID_DEFAULT)
    714            {
    715              gpd_ID.GPDId.SrcID = osal_build_uint32(pCmd->pData,sizeof(uint32));
    716              pCmd->pData += sizeof(uint32);
    717              
    718              endpoint = *pCmd->pData;
    719              pCmd->pData++;
    720            }
    721            else
    722            {
    723              //Invalid app ID
    724              return;
    725            }
    726            
    727            command  = *pCmd->pData;
   \                     ??CrossCallReturnLabel_2:
   \   00006C   F5..         MOV     ?V5,A
    728            pCmd->pData++;
   \   00006E   A3           INC     DPTR
   \   00006F   A882         MOV     R0,DPL
   \   000071   A983         MOV     R1,DPH
   \   000073   12....       LCALL   ?Subroutine7 & 0xFFFF
    729            payloadLen = *pCmd->pData;
   \                     ??CrossCallReturnLabel_3:
   \   000076   F5..         MOV     ?V4,A
    730            pCmd->pData++;
   \   000078   A3           INC     DPTR
   \   000079   08           INC     R0
   \   00007A   A983         MOV     R1,DPH
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   12....       LCALL   ??Subroutine38_0 & 0xFFFF
    731             
    732            gp_DataReq = (gp_DataReq_t*)osal_msg_allocate(sizeof(gp_DataReq_t) + payloadLen);  
   \                     ??CrossCallReturnLabel_70:
   \   000083                ; Setup parameters for call to function osal_msg_allocate
   \   000083   E5..         MOV     A,?V4
   \   000085   2415         ADD     A,#0x15
   \   000087   FA           MOV     R2,A
   \   000088   E4           CLR     A
   \   000089   3400         ADDC    A,#0x0
   \   00008B   FB           MOV     R3,A
   \   00008C   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00008F   8A..         MOV     ?V0,R2
   \   000091   8B..         MOV     ?V1,R3
    733            
    734            if(gp_DataReq == NULL)
   \   000093   EA           MOV     A,R2
   \   000094   45..         ORL     A,?V1
   \   000096   7003         JNZ     $+5
   \   000098   02....       LJMP    ??zclGp_GpResponseCommandCB_0 & 0xFFFF
    735            {
    736              //FAIL no memory
    737              return;
    738            }
    739            if(payloadLen == 0xFF)
   \   00009B   74FF         MOV     A,#-0x1
   \   00009D   65..         XRL     A,?V4
   \   00009F   7003         JNZ     ??zclGp_GpResponseCommandCB_1
    740            {
    741              payloadLen = 0;
   \   0000A1   75..00       MOV     ?V4,#0x0
    742            }
    743            gp_DataReq->TxOptions = GP_OPT_USE_TX_QUEUE_MASK;
   \                     ??zclGp_GpResponseCommandCB_1:
   \   0000A4   EA           MOV     A,R2
   \   0000A5   2403         ADD     A,#0x3
   \   0000A7   F5..         MOV     ?V6,A
   \   0000A9   E4           CLR     A
   \   0000AA   35..         ADDC    A,?V1
   \   0000AC   F5..         MOV     ?V7,A
   \   0000AE   85..82       MOV     DPL,?V6
   \   0000B1   F583         MOV     DPH,A
   \   0000B3   7401         MOV     A,#0x1
   \   0000B5   F0           MOVX    @DPTR,A
    744            gp_DataReq->EndPoint = endpoint;
   \   0000B6   EA           MOV     A,R2
   \   0000B7   240D         ADD     A,#0xd
   \   0000B9   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0000BC   E4           CLR     A
   \   0000BD   F0           MOVX    @DPTR,A
    745            osal_memcpy(gp_DataReq->GPDasdu,pCmd->pData,payloadLen);
   \   0000BE                ; Setup parameters for call to function osal_memcpy
   \   0000BE   8E82         MOV     DPL,R6
   \   0000C0   8F83         MOV     DPH,R7
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   F5..         MOV     ?V8,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   F5..         MOV     ?V9,A
   \   0000C9   75..00       MOV     ?V10,#0x0
   \   0000CC   78..         MOV     R0,#?V8
   \   0000CE   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000D1   AC..         MOV     R4,?V4
   \   0000D3   7D00         MOV     R5,#0x0
   \   0000D5   EA           MOV     A,R2
   \   0000D6   2414         ADD     A,#0x14
   \   0000D8   FA           MOV     R2,A
   \   0000D9   E4           CLR     A
   \   0000DA   35..         ADDC    A,?V1
   \   0000DC   FB           MOV     R3,A
   \   0000DD   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000E0   7403         MOV     A,#0x3
   \   0000E2   12....       LCALL   ?DEALLOC_XSTACK8
    746            gp_DataReq->GPDasduLength = payloadLen;
   \   0000E5   E5..         MOV     A,?V0
   \   0000E7   2413         ADD     A,#0x13
   \   0000E9   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0000EC   E5..         MOV     A,?V4
   \   0000EE   F0           MOVX    @DPTR,A
    747            gp_DataReq->GPDCmmdId = command;
   \   0000EF   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0000F2   E5..         MOV     A,?V5
   \   0000F4   F0           MOVX    @DPTR,A
    748            osal_memcpy(&gp_DataReq->gpd_ID,&gpd_ID,sizeof(gpd_ID_t));
   \   0000F5                ; Setup parameters for call to function osal_memcpy
   \   0000F5   7402         MOV     A,#0x2
   \   0000F7   12....       LCALL   ?XSTACK_DISP100_8
   \   0000FA   88..         MOV     ?V8,R0
   \   0000FC   89..         MOV     ?V9,R1
   \   0000FE   78..         MOV     R0,#?V8
   \   000100   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000103   7C09         MOV     R4,#0x9
   \   000105   7D00         MOV     R5,#0x0
   \   000107   E5..         MOV     A,?V0
   \   000109   2404         ADD     A,#0x4
   \   00010B   FA           MOV     R2,A
   \   00010C   E4           CLR     A
   \   00010D   35..         ADDC    A,?V1
   \   00010F   FB           MOV     R3,A
   \   000110   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000113   7403         MOV     A,#0x3
   \   000115   12....       LCALL   ?DEALLOC_XSTACK8
    749          
    750            gp_DataReq->GPEPhandle = gp_GetHandle(GPEP_HANDLE_TYPE);
   \   000118                ; Setup parameters for call to function gp_GetHandle
   \   000118   7901         MOV     R1,#0x1
   \   00011A   12....       LCALL   `??gp_GetHandle::?relay`; Banked call to: gp_GetHandle
   \   00011D   E5..         MOV     A,?V0
   \   00011F   240F         ADD     A,#0xf
   \   000121   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000124   E9           MOV     A,R1
   \   000125   F0           MOVX    @DPTR,A
    751                
    752            gp_DataReq->hdr.event = GP_DATA_REQ;
   \   000126   85..82       MOV     DPL,?V0
   \   000129   85..83       MOV     DPH,?V1
   \   00012C   7405         MOV     A,#0x5
   \   00012E   F0           MOVX    @DPTR,A
    753            gp_DataReq->hdr.status = 0;  
   \   00012F   A3           INC     DPTR
   \   000130   E4           CLR     A
   \   000131   F0           MOVX    @DPTR,A
    754            
    755            if(pCmd->options & GP_RSP_CMD_OPT_TRANSMIT_ON_ENDPOINT_MATCH_MASK)
   \   000132   85..82       MOV     DPL,?V12
   \   000135   85..83       MOV     DPH,?V13
   \   000138   E0           MOVX    A,@DPTR
   \   000139   A2E3         MOV     C,0xE0 /* A   */.3
   \   00013B   500A         JNC     ??zclGp_GpResponseCommandCB_2
    756            {
    757              gp_DataReq->TxOptions |= GP_OPT_TX_ON_MATCHING_ENDPOINT_MASK;
   \   00013D   85..82       MOV     DPL,?V6
   \   000140   85..83       MOV     DPH,?V7
   \   000143   E0           MOVX    A,@DPTR
   \   000144   D2E5         SETB    0xE0 /* A   */.5
   \   000146   F0           MOVX    @DPTR,A
    758            }
    759                      
    760            if(pCmd->tempMasterShortAddr == _NIB.nwkDevAddress)
   \                     ??zclGp_GpResponseCommandCB_2:
   \   000147   E5..         MOV     A,?V0
   \   000149   2402         ADD     A,#0x2
   \   00014B   FE           MOV     R6,A
   \   00014C   E4           CLR     A
   \   00014D   35..         ADDC    A,?V1
   \   00014F   FF           MOV     R7,A
   \   000150   85..82       MOV     DPL,?V2
   \   000153   85..83       MOV     DPH,?V3
   \   000156   A3           INC     DPTR
   \   000157   A3           INC     DPTR
   \   000158   A3           INC     DPTR
   \   000159   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00015C   7003         JNZ     ??zclGp_GpResponseCommandCB_3
   \   00015E   A3           INC     DPTR
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   69           XRL     A,R1
   \                     ??zclGp_GpResponseCommandCB_3:
   \   000161   A8..         MOV     R0,?XSP + 0
   \   000163   A9..         MOV     R1,?XSP + 1
   \   000165   6003         JZ      $+5
   \   000167   02....       LJMP    ??zclGp_GpResponseCommandCB_4 & 0xFFFF
    761            {
    762              uint16 NvProxyTableIndex;
    763              uint8  ProxyTableEntryTemp[PROXY_TBL_ENTRY_LEN];
    764                 
    765              if ( gp_getProxyTableByGpId(&gpd_ID,ProxyTableEntryTemp,&NvProxyTableIndex) != ZSuccess )
   \   00016A                ; Setup parameters for call to function gp_getProxyTableByGpId
   \   00016A   88..         MOV     ?V4,R0
   \   00016C   89..         MOV     ?V5,R1
   \   00016E   78..         MOV     R0,#?V4
   \   000170   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000173   740D         MOV     A,#0xd
   \   000175   12....       LCALL   ?XSTACK_DISP102_8
   \   000178   7404         MOV     A,#0x4
   \   00017A   12....       LCALL   ?XSTACK_DISP101_8
   \   00017D   12....       LCALL   `??gp_getProxyTableByGpId::?relay`; Banked call to: gp_getProxyTableByGpId
   \   000180   7402         MOV     A,#0x2
   \   000182   12....       LCALL   ?DEALLOC_XSTACK8
   \   000185   E9           MOV     A,R1
   \   000186   6003         JZ      $+5
   \   000188   02....       LJMP    ??zclGp_GpResponseCommandCB_0 & 0xFFFF
    766              {
    767                return;
    768              }
    769              
    770              if(pCmd->dstAddr == _NIB.nwkDevAddress)
   \   00018B   85..82       MOV     DPL,?V2
   \   00018E   85..83       MOV     DPH,?V3
   \   000191   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000194   7003         JNZ     ??zclGp_GpResponseCommandCB_5
   \   000196   A3           INC     DPTR
   \   000197   E0           MOVX    A,@DPTR
   \   000198   69           XRL     A,R1
   \                     ??zclGp_GpResponseCommandCB_5:
   \   000199   6003         JZ      $+5
   \   00019B   02....       LJMP    ??zclGp_GpResponseCommandCB_6 & 0xFFFF
    771              {
    772                //Update FirstToForward to 1
    773                if(PROXY_TBL_GET_FIRST_TO_FORWARD(ProxyTableEntryTemp[PROXY_TBL_ENTRY_OPT]) == 0)
   \   00019E   740B         MOV     A,#0xb
   \   0001A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A3   E0           MOVX    A,@DPTR
   \   0001A4   A2E1         MOV     C,0xE0 /* A   */.1
   \   0001A6   4030         JC      ??zclGp_GpResponseCommandCB_7
    774                {
    775                  PROXY_TBL_SET_FIRST_TO_FORWARD(&ProxyTableEntryTemp[PROXY_TBL_ENTRY_OPT]);
   \   0001A8   D2E1         SETB    0xE0 /* A   */.1
   \   0001AA   F0           MOVX    @DPTR,A
    776                  osal_nv_write(NvProxyTableIndex,PROXY_TBL_ENTRY_OPT,2,&ProxyTableEntryTemp[PROXY_TBL_ENTRY_OPT]);
   \   0001AB                ; Setup parameters for call to function osal_nv_write
   \   0001AB   740B         MOV     A,#0xb
   \   0001AD   12....       LCALL   ?XSTACK_DISP100_8
   \   0001B0   88..         MOV     ?V4,R0
   \   0001B2   89..         MOV     ?V5,R1
   \   0001B4   78..         MOV     R0,#?V4
   \   0001B6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B9   75..02       MOV     ?V4,#0x2
   \   0001BC   75..00       MOV     ?V5,#0x0
   \   0001BF   78..         MOV     R0,#?V4
   \   0001C1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C4   7C00         MOV     R4,#0x0
   \   0001C6   7D00         MOV     R5,#0x0
   \   0001C8   7404         MOV     A,#0x4
   \   0001CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CD   12....       LCALL   ??Subroutine42_0 & 0xFFFF
    777                }
   \                     ??CrossCallReturnLabel_100:
   \   0001D0   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0001D3   7404         MOV     A,#0x4
   \   0001D5   12....       LCALL   ?DEALLOC_XSTACK8
    778                
    779                //Depends on TempMasterAddress
    780                gp_DataReq->Action = TRUE;
   \                     ??zclGp_GpResponseCommandCB_7:
   \   0001D8   8E82         MOV     DPL,R6
   \   0001DA   8F83         MOV     DPH,R7
   \   0001DC   7401         MOV     A,#0x1
   \   0001DE   F0           MOVX    @DPTR,A
    781                
    782                //Step 6 of Section A.3.9.1 The Procedure
    783                //Check if we are in a different channel
    784                if((pCmd->tempMasterTxChannel + 0x0B) != _NIB.nwkLogicalChannel)
   \   0001DF   E5..         MOV     A,?V2
   \   0001E1   2405         ADD     A,#0x5
   \   0001E3   F8           MOV     R0,A
   \   0001E4   E4           CLR     A
   \   0001E5   35..         ADDC    A,?V3
   \   0001E7   F9           MOV     R1,A
   \   0001E8   E8           MOV     A,R0
   \   0001E9   FE           MOV     R6,A
   \   0001EA   E9           MOV     A,R1
   \   0001EB   FF           MOV     R7,A
   \   0001EC   8E82         MOV     DPL,R6
   \   0001EE   8F83         MOV     DPH,R7
   \   0001F0   E0           MOVX    A,@DPTR
   \   0001F1   240B         ADD     A,#0xb
   \   0001F3   FA           MOV     R2,A
   \   0001F4   E4           CLR     A
   \   0001F5   3400         ADDC    A,#0x0
   \   0001F7   FB           MOV     R3,A
   \   0001F8   90....       MOV     DPTR,#_NIB + 22
   \   0001FB   E0           MOVX    A,@DPTR
   \   0001FC   6A           XRL     A,R2
   \   0001FD   7001         JNZ     ??zclGp_GpResponseCommandCB_8
   \   0001FF   EB           MOV     A,R3
   \                     ??zclGp_GpResponseCommandCB_8:
   \   000200   7003         JNZ     $+5
   \   000202   02....       LJMP    ??zclGp_GpResponseCommandCB_6 & 0xFFFF
    785                {
    786                  //did we got permission to attend channel request?
    787                  if(osal_get_timeoutEx(gp_TaskID,GP_CHANNEL_CONFIGURATION_TIMEOUT))
   \   000205                ; Setup parameters for call to function osal_get_timeoutEx
   \   000205   7A08         MOV     R2,#0x8
   \   000207   7B00         MOV     R3,#0x0
   \   000209   90....       MOV     DPTR,#gp_TaskID
   \   00020C   E0           MOVX    A,@DPTR
   \   00020D   F9           MOV     R1,A
   \   00020E   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000211   EA           MOV     A,R2
   \   000212   4B           ORL     A,R3
   \   000213   4C           ORL     A,R4
   \   000214   4D           ORL     A,R5
   \   000215   6072         JZ      ??zclGp_GpResponseCommandCB_6
    788                  {
    789                    gp_tempLogicalChannel = _NIB.nwkLogicalChannel;
   \   000217   90....       MOV     DPTR,#_NIB + 22
   \   00021A   E0           MOVX    A,@DPTR
   \   00021B   90....       MOV     DPTR,#gp_tempLogicalChannel
   \   00021E   F0           MOVX    @DPTR,A
    790                    _NIB.nwkLogicalChannel = pCmd->tempMasterTxChannel;
   \   00021F   8E82         MOV     DPL,R6
   \   000221   8F83         MOV     DPH,R7
   \   000223   12....       LCALL   ?Subroutine14 & 0xFFFF
    791                    ZMacSetReq( ZMacChannel, &(_NIB.nwkLogicalChannel) );
    792                  }
    793                }
    794              }
    795            }
   \                     ??CrossCallReturnLabel_8:
   \   000226   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000229   805E         SJMP    ??zclGp_GpResponseCommandCB_6
    796            else
    797            {
    798              uint16 NvProxyTableIndex;
    799              uint8  ProxyTableEntryTemp[PROXY_TBL_ENTRY_LEN];
    800                 
    801              if( gp_getProxyTableByGpId(&gpd_ID,ProxyTableEntryTemp,&NvProxyTableIndex) != ZSuccess )
   \                     ??zclGp_GpResponseCommandCB_4:
   \   00022B                ; Setup parameters for call to function gp_getProxyTableByGpId
   \   00022B   88..         MOV     ?V2,R0
   \   00022D   89..         MOV     ?V3,R1
   \   00022F   78..         MOV     R0,#?V2
   \   000231   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000234   740D         MOV     A,#0xd
   \   000236   12....       LCALL   ?XSTACK_DISP102_8
   \   000239   7404         MOV     A,#0x4
   \   00023B   12....       LCALL   ?XSTACK_DISP101_8
   \   00023E   12....       LCALL   `??gp_getProxyTableByGpId::?relay`; Banked call to: gp_getProxyTableByGpId
   \   000241   7402         MOV     A,#0x2
   \   000243   12....       LCALL   ?DEALLOC_XSTACK8
   \   000246   E9           MOV     A,R1
   \   000247   704C         JNZ     ??zclGp_GpResponseCommandCB_0
    802              {
    803                return;
    804              }
    805          
    806              //Update FirstToForward to 0
    807              if(PROXY_TBL_GET_FIRST_TO_FORWARD(ProxyTableEntryTemp[PROXY_TBL_ENTRY_OPT]) == 1)
   \   000249   740B         MOV     A,#0xb
   \   00024B   12....       LCALL   ?XSTACK_DISP0_8
   \   00024E   E0           MOVX    A,@DPTR
   \   00024F   A2E1         MOV     C,0xE0 /* A   */.1
   \   000251   5030         JNC     ??zclGp_GpResponseCommandCB_9
    808              {
    809                PROXY_TBL_SET_FIRST_TO_FORWARD(&ProxyTableEntryTemp[PROXY_TBL_ENTRY_OPT]);
   \   000253   D2E1         SETB    0xE0 /* A   */.1
   \   000255   F0           MOVX    @DPTR,A
    810                osal_nv_write(NvProxyTableIndex,PROXY_TBL_ENTRY_OPT,2,&ProxyTableEntryTemp[PROXY_TBL_ENTRY_OPT]);
   \   000256                ; Setup parameters for call to function osal_nv_write
   \   000256   740B         MOV     A,#0xb
   \   000258   12....       LCALL   ?XSTACK_DISP100_8
   \   00025B   88..         MOV     ?V2,R0
   \   00025D   89..         MOV     ?V3,R1
   \   00025F   78..         MOV     R0,#?V2
   \   000261   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000264   75..02       MOV     ?V2,#0x2
   \   000267   75..00       MOV     ?V3,#0x0
   \   00026A   78..         MOV     R0,#?V2
   \   00026C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00026F   7C00         MOV     R4,#0x0
   \   000271   7D00         MOV     R5,#0x0
   \   000273   7404         MOV     A,#0x4
   \   000275   12....       LCALL   ?XSTACK_DISP0_8
   \   000278   12....       LCALL   ??Subroutine42_0 & 0xFFFF
    811              }    
   \                     ??CrossCallReturnLabel_101:
   \   00027B   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00027E   7404         MOV     A,#0x4
   \   000280   12....       LCALL   ?DEALLOC_XSTACK8
    812              
    813              gp_DataReq->Action = 0;
   \                     ??zclGp_GpResponseCommandCB_9:
   \   000283   8E82         MOV     DPL,R6
   \   000285   8F83         MOV     DPH,R7
   \   000287   E4           CLR     A
   \   000288   F0           MOVX    @DPTR,A
    814            }
    815            
    816            osal_msg_send(gp_TaskID,(uint8*)gp_DataReq);
   \                     ??zclGp_GpResponseCommandCB_6:
   \   000289                ; Setup parameters for call to function osal_msg_send
   \   000289   AA..         MOV     R2,?V0
   \   00028B   AB..         MOV     R3,?V1
   \   00028D   90....       MOV     DPTR,#gp_TaskID
   \   000290   E0           MOVX    A,@DPTR
   \   000291   F9           MOV     R1,A
   \   000292   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    817          }
   \                     ??zclGp_GpResponseCommandCB_0:
   \   000295   744B         MOV     A,#0x4b
   \   000297   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000003   90....       MOV     DPTR,#_NIB + 20
   \   000006   E0           MOVX    A,@DPTR
   \   000007   68           XRL     A,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E8           MOV     A,R0
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   E9           MOV     A,R1
   \   000008   F0           MOVX    @DPTR,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   90....       MOV     DPTR,#_NIB + 22
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function ZMacSetReq
   \   000005                ; Setup parameters for call to function ZMacSetReq
   \   000005   7A..         MOV     R2,#(_NIB + 22) & 0xff
   \   000007   7B..         MOV     R3,#((_NIB + 22) >> 8) & 0xff
   \   000009   79E1         MOV     R1,#-0x1f
   \   00000B   22           RET
    818          
    819          
    820          
    821          /*********************************************************************
    822           * @fn      zclGp_GpProxyCommissioningModeCB
    823           *
    824           * @brief   Callback from the ZCL GreenPower Cluster Library when
    825           *          it received a Gp Commissioning Mode command.
    826           *
    827           * @param   pCmd - command payload
    828           *
    829           * @return  none
    830           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    831          static void zclGp_GpProxyCommissioningModeCB(zclGpProxyCommissioningMode_t* pCmd)
   \                     zclGp_GpProxyCommissioningModeCB:
    832          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    833            gp_commissioningOptions = pCmd->options;
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   90....       MOV     DPTR,#gp_commissioningOptions
   \   000013   F0           MOVX    @DPTR,A
    834            uint32 CommissioningWindow = PGG_COMMISSIONING_WINDOW;
    835            
    836            if ( ( zgGP_InCommissioningMode == TRUE ) && ( gp_commissionerAddress != pCmd->srcAddr ) )
   \   000014   90....       MOV     DPTR,#zgGP_InCommissioningMode
   \   000017   E0           MOVX    A,@DPTR
   \   000018   6401         XRL     A,#0x1
   \   00001A   7013         JNZ     ??zclGp_GpProxyCommissioningModeCB_0
   \   00001C   90....       MOV     DPTR,#gp_commissionerAddress
   \   00001F   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000022   8E82         MOV     DPL,R6
   \   000024   8F83         MOV     DPH,R7
   \   000026   E0           MOVX    A,@DPTR
   \   000027   68           XRL     A,R0
   \   000028   7003         JNZ     ??zclGp_GpProxyCommissioningModeCB_1
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   69           XRL     A,R1
   \                     ??zclGp_GpProxyCommissioningModeCB_1:
   \   00002D   7068         JNZ     ??zclGp_GpProxyCommissioningModeCB_2
    837            {
    838              // If is in commissioning mode and the soruce address is different from 
    839              // the device that set the proxy in commissioning mode, then drop
    840              // the request.
    841              return;
    842            }
    843          
    844            //Enter in commissioning mode
    845            if(gp_commissioningOptions & GP_COMM_OPT_ACTION_MASK)
   \                     ??zclGp_GpProxyCommissioningModeCB_0:
   \   00002F   90....       MOV     DPTR,#gp_commissioningOptions
   \   000032   E0           MOVX    A,@DPTR
   \   000033   A2E0         MOV     C,0xE0 /* A   */.0
   \   000035   505D         JNC     ??zclGp_GpProxyCommissioningModeCB_3
    846            {
    847            
    848          #if 0
    849              if(gp_commissioningOptions & GP_COMM_OPT_CHANNEL_PRES_MASK)
    850              {
    851                //Section A.3.3.5.3, channel field is not supported in the current version of the spec
    852              }
    853          #endif
    854           
    855              if(gp_commissioningOptions & GP_COMM_OPT_EXIT_ON_WINDOW_EXPIRATION_MASK)
   \   000037   A2E1         MOV     C,0xE0 /* A   */.1
   \   000039   5024         JNC     ??CrossCallReturnLabel_71
    856              {
    857                CommissioningWindow = osal_build_uint16(pCmd->pData);
   \   00003B   EE           MOV     A,R6
   \   00003C   2403         ADD     A,#0x3
   \   00003E   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000041   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000044   12....       LCALL   `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
    858                pCmd->pData += sizeof(uint16);
   \   000047   85..82       MOV     DPL,?V0
   \   00004A   85..83       MOV     DPH,?V1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   2402         ADD     A,#0x2
   \   000050   F8           MOV     R0,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   3400         ADDC    A,#0x0
   \   000055   F9           MOV     R1,A
   \   000056   85..82       MOV     DPL,?V0
   \   000059   85..83       MOV     DPH,?V1
   \   00005C   12....       LCALL   ??Subroutine38_0 & 0xFFFF
    859                
    860                
    861              }
    862              if(gp_commissioningOptions & GP_COMM_OPT_UNICAST_COMM_MASK)
   \                     ??CrossCallReturnLabel_71:
   \   00005F   90....       MOV     DPTR,#gp_commissioningOptions
   \   000062   E0           MOVX    A,@DPTR
   \   000063   A2E5         MOV     C,0xE0 /* A   */.5
   \   000065   5010         JNC     ??zclGp_GpProxyCommissioningModeCB_4
    863              {
    864                gp_commissionerAddress = pCmd->srcAddr;
   \   000067   8E82         MOV     DPL,R6
   \   000069   8F83         MOV     DPH,R7
   \   00006B   12....       LCALL   ??Subroutine32_0 & 0xFFFF
    865              }
   \                     ??CrossCallReturnLabel_43:
   \   00006E   90....       MOV     DPTR,#gp_commissionerAddress
   \   000071   E8           MOV     A,R0
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   E9           MOV     A,R1
   \   000075   8007         SJMP    ??zclGp_GpProxyCommissioningModeCB_5
    866              else
    867              {
    868                gp_commissionerAddress = 0xFFFF;
   \                     ??zclGp_GpProxyCommissioningModeCB_4:
   \   000077   90....       MOV     DPTR,#gp_commissionerAddress
   \   00007A   74FF         MOV     A,#-0x1
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   A3           INC     DPTR
   \                     ??zclGp_GpProxyCommissioningModeCB_5:
   \   00007E   F0           MOVX    @DPTR,A
    869              }
    870              
    871              //Convert to timer units
    872              CommissioningWindow = CommissioningWindow * 1000;
    873              
    874              //Exit upon expire
    875              zgGP_InCommissioningMode = TRUE;
   \   00007F   90....       MOV     DPTR,#zgGP_InCommissioningMode
   \   000082   7401         MOV     A,#0x1
   \   000084   F0           MOVX    @DPTR,A
    876              
    877              //Notify the user about entering in commissioning mode
    878              if(pfnCommissioningMode)
   \   000085   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000088   600D         JZ      ??zclGp_GpProxyCommissioningModeCB_2
    879              {
    880                pfnCommissioningMode(TRUE);
   \   00008A                ; Setup parameters for indirect call
   \   00008A   7901         MOV     R1,#0x1
   \   00008C   12....       LCALL   ??Subroutine41_0 & 0xFFFF
    881              }
    882            }
   \                     ??CrossCallReturnLabel_94:
   \   00008F   12....       LCALL   ?CALL_IND
   \   000092   8003         SJMP    ??zclGp_GpProxyCommissioningModeCB_2
    883            //Exit commissioning mode
    884            else
    885            { 
    886              gp_stopCommissioningMode();
   \                     ??zclGp_GpProxyCommissioningModeCB_3:
   \   000094                ; Setup parameters for call to function gp_stopCommissioningMode
   \   000094   12....       LCALL   `??gp_stopCommissioningMode::?relay`; Banked call to: gp_stopCommissioningMode
    887            }
    888          }
   \                     ??zclGp_GpProxyCommissioningModeCB_2:
   \   000097   7F02         MOV     R7,#0x2
   \   000099   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   3F           ADDC    A,R7
   \   000003   F9           MOV     R1,A
   \   000004   88..         MOV     ?V0,R0
   \   000006   89..         MOV     ?V1,R1
   \   000008                ; Setup parameters for call to function osal_build_uint16
   \   000008   8882         MOV     DPL,R0
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET
    889          
    890           /*********************************************************************
    891           * @fn          gp_ZclPairingParse
    892           *
    893           * @brief       Parse the pairing data message payload
    894           *
    895           * @param       
    896           *
    897           * @return      
    898           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    899          static void gp_ZclPairingParse( zclGpPairing_t* pCmd, gpPairingCmd_t* payload )
   \                     gp_ZclPairingParse:
    900          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 64
   \   000005   74C0         MOV     A,#-0x40
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
    901          
    902            payload->options |= ( ( ( uint32 ) pCmd->options[2] << 16 ) & 0x00FF0000 );
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0,A
   \   000019   E4           CLR     A
   \   00001A   F5..         MOV     ?V1,A
   \   00001C   F5..         MOV     ?V2,A
   \   00001E   F5..         MOV     ?V3,A
   \   000020   7410         MOV     A,#0x10
   \   000022   78..         MOV     R0,#?V0
   \   000024   12....       LCALL   ?L_SHL
   \   000027   8E82         MOV     DPL,R6
   \   000029   8F83         MOV     DPH,R7
   \   00002B   78..         MOV     R0,#?V0
   \   00002D   12....       LCALL   ?L_IOR_TO_X
    903            payload->options |= ( ( ( uint32 ) pCmd->options[1] <<  8 ) & 0x0000FF00 );
   \   000030   8A82         MOV     DPL,R2
   \   000032   8B83         MOV     DPH,R3
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F5..         MOV     ?V0,A
   \   00003A   E4           CLR     A
   \   00003B   F5..         MOV     ?V2,A
   \   00003D   7408         MOV     A,#0x8
   \   00003F   78..         MOV     R0,#?V0
   \   000041   12....       LCALL   ?L_SHL
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   78..         MOV     R0,#?V0
   \   00004A   12....       LCALL   ?L_IOR_TO_X
    904            payload->options |= ( ( ( uint32 ) pCmd->options[0] )       & 0x000000FF );
   \   00004D   8A82         MOV     DPL,R2
   \   00004F   8B83         MOV     DPH,R3
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F5..         MOV     ?V0,A
   \   000056   E4           CLR     A
   \   000057   F5..         MOV     ?V1,A
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   78..         MOV     R0,#?V0
   \   00005F   12....       LCALL   ?L_IOR_TO_X
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   78..         MOV     R0,#?V0
   \   000068   12....       LCALL   ?L_MOV_X
   \   00006B   E5..         MOV     A,?V0
   \   00006D   5407         ANL     A,#0x7
   \   00006F   F8           MOV     R0,A
   \   000070   EE           MOV     A,R6
   \   000071   2410         ADD     A,#0x10
   \   000073   F5..         MOV     ?V4,A
   \   000075   E4           CLR     A
   \   000076   3F           ADDC    A,R7
   \   000077   F5..         MOV     ?V5,A
   \   000079   EE           MOV     A,R6
   \   00007A   2408         ADD     A,#0x8
   \   00007C   F5..         MOV     ?V2,A
   \   00007E   E4           CLR     A
   \   00007F   3F           ADDC    A,R7
   \   000080   F5..         MOV     ?V3,A
   \   000082   EE           MOV     A,R6
   \   000083   2404         ADD     A,#0x4
   \   000085   F5..         MOV     ?V10,A
   \   000087   E4           CLR     A
   \   000088   3F           ADDC    A,R7
   \   000089   F5..         MOV     ?V11,A
   \   00008B   EA           MOV     A,R2
   \   00008C   2405         ADD     A,#0x5
   \   00008E   F5..         MOV     ?V0,A
   \   000090   E4           CLR     A
   \   000091   3B           ADDC    A,R3
   \   000092   F5..         MOV     ?V1,A
   \   000094   E8           MOV     A,R0
   \   000095   7025         JNZ     ??gp_ZclPairingParse_0
    905              
    906            // Options bitfield
    907            // If Application Id bitfield is 0b000
    908            if( GP_IS_APPLICATION_ID_GPD( payload->options ) )
    909            {        
    910              // Populate GPD ID
    911              gp_PopulateField( ( uint8* )&payload->gpdId, &pCmd->pData, sizeof( payload->gpdId ) );
   \   000097                ; Setup parameters for call to function gp_PopulateField
   \   000097   7904         MOV     R1,#0x4
   \   000099   AC..         MOV     R4,?V0
   \   00009B   AD..         MOV     R5,?V1
   \   00009D   AA..         MOV     R2,?V10
   \   00009F   AB..         MOV     R3,?V11
   \   0000A1   12....       LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
    912              
    913              // Populate GPD IEEE Invalid
    914              osal_memset ( &payload->gpdIEEE, 0xFF, Z_EXTADDR_LEN );
   \   0000A4                ; Setup parameters for call to function osal_memset
   \   0000A4   7C08         MOV     R4,#0x8
   \   0000A6   7D00         MOV     R5,#0x0
   \   0000A8   79FF         MOV     R1,#-0x1
   \   0000AA   AA..         MOV     R2,?V2
   \   0000AC   AB..         MOV     R3,?V3
   \   0000AE   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    915              // Populate EP Invalid
    916              payload->ep = 0xFF;
   \   0000B1   85..82       MOV     DPL,?V4
   \   0000B4   85..83       MOV     DPH,?V5
   \   0000B7   74FF         MOV     A,#-0x1
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   8026         SJMP    ??gp_ZclPairingParse_1
    917            }
    918            // If Application Id bitfield is 0b010
    919            else if( GP_IS_APPLICATION_ID_IEEE( payload->options ) )
   \                     ??gp_ZclPairingParse_0:
   \   0000BC   7402         MOV     A,#0x2
   \   0000BE   68           XRL     A,R0
   \   0000BF   7021         JNZ     ??gp_ZclPairingParse_1
    920            {
    921              // Populate GPD ID Invalid
    922              payload->gpdId = 0xFFFFFFFF;
   \   0000C1   85..82       MOV     DPL,?V10
   \   0000C4   85..83       MOV     DPH,?V11
   \   0000C7   12....       LCALL   ?Subroutine5 & 0xFFFF
    923              
    924              // Populate GPD IEEE
    925              gp_PopulateField( ( uint8* )&payload->gpdIEEE, &pCmd->pData, Z_EXTADDR_LEN );
   \                     ??CrossCallReturnLabel_0:
   \   0000CA   AC..         MOV     R4,?V0
   \   0000CC   AD..         MOV     R5,?V1
   \   0000CE   AA..         MOV     R2,?V2
   \   0000D0   AB..         MOV     R3,?V3
   \   0000D2   12....       LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
    926              // Populate EP
    927              gp_PopulateField( ( uint8* )&payload->ep, &pCmd->pData, sizeof( payload->ep ) );
   \   0000D5                ; Setup parameters for call to function gp_PopulateField
   \   0000D5   7901         MOV     R1,#0x1
   \   0000D7   AC..         MOV     R4,?V0
   \   0000D9   AD..         MOV     R5,?V1
   \   0000DB   AA..         MOV     R2,?V4
   \   0000DD   AB..         MOV     R3,?V5
   \   0000DF   12....       LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
    928            }
    929            
    930            // If Remove GPD bit is 0b0
    931            if( !GP_REMOVE_GPD( payload->options ) )
   \                     ??gp_ZclPairingParse_1:
   \   0000E2   EE           MOV     A,R6
   \   0000E3   2411         ADD     A,#0x11
   \   0000E5   F5..         MOV     ?V8,A
   \   0000E7   E4           CLR     A
   \   0000E8   3F           ADDC    A,R7
   \   0000E9   F5..         MOV     ?V9,A
   \   0000EB   8E82         MOV     DPL,R6
   \   0000ED   8F83         MOV     DPH,R7
   \   0000EF   78..         MOV     R0,#?V4
   \   0000F1   12....       LCALL   ?L_MOV_X
   \   0000F4   E5..         MOV     A,?V4
   \   0000F6   5410         ANL     A,#0x10
   \   0000F8   6003         JZ      $+5
   \   0000FA   02....       LJMP    ??gp_ZclPairingParse_2 & 0xFFFF
    932            {
    933              // Communication Mode 0b00 or 0b11
    934              if( ( GP_IS_COMMUNICATION_MODE_FULL_UNICAST( payload->options ) ) || ( GP_IS_COMMUNICATION_MODE_LIGHT_UNICAST( payload->options ) ) )
   \   0000FD   E5..         MOV     A,?V4
   \   0000FF   C4           SWAP    A
   \   000100   13           RRC     A
   \   000101   5407         ANL     A,#0x7
   \   000103   5403         ANL     A,#0x3
   \   000105   F8           MOV     R0,A
   \   000106   EE           MOV     A,R6
   \   000107   241B         ADD     A,#0x1b
   \   000109   F5..         MOV     ?V4,A
   \   00010B   E4           CLR     A
   \   00010C   3F           ADDC    A,R7
   \   00010D   F5..         MOV     ?V5,A
   \   00010F   EE           MOV     A,R6
   \   000110   2419         ADD     A,#0x19
   \   000112   F5..         MOV     ?V2,A
   \   000114   E4           CLR     A
   \   000115   3F           ADDC    A,R7
   \   000116   F5..         MOV     ?V3,A
   \   000118   E8           MOV     A,R0
   \   000119   6005         JZ      ??gp_ZclPairingParse_3
   \   00011B   7403         MOV     A,#0x3
   \   00011D   68           XRL     A,R0
   \   00011E   7027         JNZ     ??gp_ZclPairingParse_4
    935              {
    936                // Populate Sink Addesses
    937                gp_PopulateField( ( uint8* )&payload->sinkIEEE, &pCmd->pData, Z_EXTADDR_LEN );
   \                     ??gp_ZclPairingParse_3:
   \   000120                ; Setup parameters for call to function gp_PopulateField
   \   000120   7908         MOV     R1,#0x8
   \   000122   AC..         MOV     R4,?V0
   \   000124   AD..         MOV     R5,?V1
   \   000126   AA..         MOV     R2,?V8
   \   000128   AB..         MOV     R3,?V9
   \   00012A   12....       LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
    938                gp_PopulateField( ( uint8* )&payload->sinkNwkAddr, &pCmd->pData, sizeof( payload->sinkNwkAddr ) );
   \   00012D                ; Setup parameters for call to function gp_PopulateField
   \   00012D   7902         MOV     R1,#0x2
   \   00012F   AC..         MOV     R4,?V0
   \   000131   AD..         MOV     R5,?V1
   \   000133   AA..         MOV     R2,?V2
   \   000135   AB..         MOV     R3,?V3
   \   000137   12....       LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
    939                
    940                // Populate Grp Address Ivalid
    941                payload->sinkGroupID = 0xFFFF;
   \   00013A   85..82       MOV     DPL,?V4
   \   00013D   85..83       MOV     DPH,?V5
   \   000140   74FF         MOV     A,#-0x1
   \   000142   F0           MOVX    @DPTR,A
   \   000143   A3           INC     DPTR
   \   000144   F0           MOVX    @DPTR,A
   \   000145   802F         SJMP    ??gp_ZclPairingParse_5
    942              }
    943              // Communication Mode 0b01 or 0b10
    944              else if ( ( GP_IS_COMMUNICATION_MODE_GRPCAST_DGROUP_ID( payload->options ) ) || ( GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( payload->options ) ) )
   \                     ??gp_ZclPairingParse_4:
   \   000147   7401         MOV     A,#0x1
   \   000149   68           XRL     A,R0
   \   00014A   6005         JZ      ??gp_ZclPairingParse_6
   \   00014C   7402         MOV     A,#0x2
   \   00014E   68           XRL     A,R0
   \   00014F   7025         JNZ     ??gp_ZclPairingParse_5
    945              {
    946                // Populate Sink Addesses Invalid
    947                osal_memset ( &payload->sinkIEEE, 0xFF, Z_EXTADDR_LEN );
   \                     ??gp_ZclPairingParse_6:
   \   000151                ; Setup parameters for call to function osal_memset
   \   000151   7C08         MOV     R4,#0x8
   \   000153   7D00         MOV     R5,#0x0
   \   000155   79FF         MOV     R1,#-0x1
   \   000157   AA..         MOV     R2,?V8
   \   000159   AB..         MOV     R3,?V9
   \   00015B   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    948                payload->sinkNwkAddr = 0xFFFF;
   \   00015E   85..82       MOV     DPL,?V2
   \   000161   85..83       MOV     DPH,?V3
   \   000164   74FF         MOV     A,#-0x1
   \   000166   F0           MOVX    @DPTR,A
   \   000167   A3           INC     DPTR
   \   000168   F0           MOVX    @DPTR,A
    949                
    950                // Populate Grp Address
    951                gp_PopulateField( ( uint8* )&payload->sinkGroupID, &pCmd->pData, sizeof( payload->sinkGroupID ) );
   \   000169                ; Setup parameters for call to function gp_PopulateField
   \   000169   7902         MOV     R1,#0x2
   \   00016B   AC..         MOV     R4,?V0
   \   00016D   AD..         MOV     R5,?V1
   \   00016F   AA..         MOV     R2,?V4
   \   000171   AB..         MOV     R3,?V5
   \   000173   12....       LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
    952              }
    953            }
    954            else
    955            {
    956              uint8 i;
    957              uint8 status;
    958              uint8 currEntry[PROXY_TBL_ENTRY_LEN] = {0};
    959                
    960              // Remove
    961              for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
    962              {
    963                status = gp_getProxyTableByIndex( ( ZCD_NV_PROXY_TABLE_START + i ), currEntry );
    964          
    965                if ( status == NV_OPER_FAILED )
    966                {
    967                  // FAIL
    968                  return;
    969                }
    970              
    971                // if the entry is empty
    972                if ( status == NV_INVALID_DATA )
    973                {
    974                  // Look for the next entry
    975                  continue;
    976                }
    977                
    978                if( GP_IS_APPLICATION_ID_GPD( payload->options ) )
    979                {
    980                  if ( osal_memcmp( &currEntry[PROXY_TBL_ENTRY_GPD_ID + 4], &payload->gpdId, sizeof ( uint32 ) ) )
    981                  {
    982                    // Remove this GPD entry
    983                    osal_memset( currEntry, 0xFF, PROXY_TBL_ENTRY_LEN );
    984                  }
    985                }
    986                else if( GP_IS_APPLICATION_ID_IEEE( payload->options ) )
    987                {   
    988                  if ( osal_memcmp( &currEntry[PROXY_TBL_ENTRY_GPD_ID ], payload->sinkIEEE, Z_EXTADDR_LEN ) )
    989                  {
    990                    // Remove this GPD entry
    991                    osal_memset( currEntry, 0xFF, PROXY_TBL_ENTRY_LEN );
    992                  }
    993                }
    994              }
    995              return;
    996            }
    997            
    998            // If Add Sink bit is 0b1
    999            if ( GP_ADD_SINK( payload->options ) )
   \                     ??gp_ZclPairingParse_5:
   \   000176   EE           MOV     A,R6
   \   000177   2434         ADD     A,#0x34
   \   000179   F5..         MOV     ?V10,A
   \   00017B   E4           CLR     A
   \   00017C   3F           ADDC    A,R7
   \   00017D   F5..         MOV     ?V11,A
   \   00017F   EE           MOV     A,R6
   \   000180   2432         ADD     A,#0x32
   \   000182   F5..         MOV     ?V8,A
   \   000184   E4           CLR     A
   \   000185   3F           ADDC    A,R7
   \   000186   F5..         MOV     ?V9,A
   \   000188   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00018B   EE           MOV     A,R6
   \   00018C   241D         ADD     A,#0x1d
   \   00018E   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000191   12....       LCALL   ?L_MOV_X
   \   000194   E5..         MOV     A,?V4
   \   000196   5408         ANL     A,#0x8
   \   000198   6003         JZ      $+5
   \   00019A   02....       LJMP    ??gp_ZclPairingParse_7 & 0xFFFF
   1000            {
   1001              // Populate Device ID
   1002              gp_PopulateField( ( uint8* )&payload->deviceId, &pCmd->pData, sizeof( payload->deviceId ) );
   1003              
   1004              if ( GP_SEC_COUNTER( payload->options ) )
   1005              {
   1006                // Populate GPD security frame counter
   1007                gp_PopulateField( ( uint8* )&payload->gpdSecCounter, &pCmd->pData, sizeof( payload->gpdSecCounter ) );
   1008              }
   1009              else
   1010              {
   1011                payload->gpdSecCounter = 0xFFFFFFFF;
   1012              }
   1013              
   1014              if ( GP_SEC_KEY ( payload->options ) )
   1015              {
   1016                gp_PopulateField( ( uint8* )&payload->gpdKey, &pCmd->pData, SEC_KEY_LEN );
   1017              }
   1018              else
   1019              {
   1020                osal_memset ( &payload->gpdKey, 0xFF, SEC_KEY_LEN );
   1021              }
   1022              
   1023              if ( GP_ALIAS ( payload->options ) )
   1024              {
   1025                gp_PopulateField( ( uint8* )&payload->assignedAlias, &pCmd->pData, sizeof( payload->assignedAlias ) );
   1026              }
   1027              else
   1028              {
   1029                payload->assignedAlias = 0xFFFF;
   1030              }
   1031              if ( GP_FORWARDING_RADIUS ( payload->options ) )
   1032              {
   1033                gp_PopulateField( ( uint8* )&payload->forwardingRadius, &pCmd->pData, sizeof( payload->forwardingRadius ) );
   1034              }
   1035              else
   1036              {
   1037                payload->forwardingRadius = 0xFF;
   1038              }
   1039            }
   1040            else
   1041            {
   1042              // Ivalidate every field
   1043              payload->deviceId = 0xFF;
   \   00019D   8A82         MOV     DPL,R2
   \   00019F   8B83         MOV     DPH,R3
   \   0001A1   74FF         MOV     A,#-0x1
   \   0001A3   F0           MOVX    @DPTR,A
   1044              payload->gpdSecCounter = 0xFFFFFFFF;
   \   0001A4   85..82       MOV     DPL,?V2
   \   0001A7   85..83       MOV     DPH,?V3
   \   0001AA   12....       LCALL   ??Subroutine33_0 & 0xFFFF
   1045              payload->assignedAlias = 0xFFFF;
   \                     ??CrossCallReturnLabel_50:
   \   0001AD   85..82       MOV     DPL,?V8
   \   0001B0   85..83       MOV     DPH,?V9
   \   0001B3   F0           MOVX    @DPTR,A
   \   0001B4   A3           INC     DPTR
   \   0001B5   F0           MOVX    @DPTR,A
   1046              payload->forwardingRadius = 0xFF;
   \   0001B6   85..82       MOV     DPL,?V10
   \   0001B9   85..83       MOV     DPH,?V11
   \                     ??gp_ZclPairingParse_8:
   \   0001BC   F0           MOVX    @DPTR,A
   1047            }
   1048          }
   \                     ??gp_ZclPairingParse_9:
   \   0001BD   7440         MOV     A,#0x40
   \   0001BF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001C2   7F0C         MOV     R7,#0xc
   \   0001C4   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??gp_ZclPairingParse_2:
   \   0001C7   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2`
   \   0001CA   AC..         MOV     R4,?XSP + 0
   \   0001CC   AD..         MOV     R5,?XSP + 1
   \   0001CE   7440         MOV     A,#0x40
   \   0001D0   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   0001D3   75..00       MOV     ?V0,#0x0
   \                     ??gp_ZclPairingParse_10:
   \   0001D6                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   0001D6   AC..         MOV     R4,?XSP + 0
   \   0001D8   AD..         MOV     R5,?XSP + 1
   \   0001DA   E5..         MOV     A,?V0
   \   0001DC   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0001DF   12....       LCALL   `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   0001E2   E9           MOV     A,R1
   \   0001E3   F8           MOV     R0,A
   \   0001E4   740A         MOV     A,#0xa
   \   0001E6   68           XRL     A,R0
   \   0001E7   60D4         JZ      ??gp_ZclPairingParse_9
   \   0001E9   740D         MOV     A,#0xd
   \   0001EB   68           XRL     A,R0
   \   0001EC   6074         JZ      ??gp_ZclPairingParse_11
   \   0001EE   8E82         MOV     DPL,R6
   \   0001F0   8F83         MOV     DPH,R7
   \   0001F2   78..         MOV     R0,#?V4
   \   0001F4   12....       LCALL   ?L_MOV_X
   \   0001F7   E5..         MOV     A,?V4
   \   0001F9   5407         ANL     A,#0x7
   \   0001FB   F8           MOV     R0,A
   \   0001FC   702A         JNZ     ??gp_ZclPairingParse_12
   \   0001FE                ; Setup parameters for call to function osal_memcmp
   \   0001FE   85....       MOV     ?V4,?V10
   \   000201   85....       MOV     ?V5,?V11
   \   000204   75..00       MOV     ?V6,#0x0
   \   000207   78..         MOV     R0,#?V4
   \   000209   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00020C   7C04         MOV     R4,#0x4
   \   00020E   7D00         MOV     R5,#0x0
   \   000210   7409         MOV     A,#0x9
   \   000212   12....       LCALL   ?XSTACK_DISP0_8
   \   000215   A982         MOV     R1,DPL
   \   000217   AA83         MOV     R2,DPH
   \   000219   7B00         MOV     R3,#0x0
   \   00021B   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00021E   7403         MOV     A,#0x3
   \   000220   12....       LCALL   ?DEALLOC_XSTACK8
   \   000223   E9           MOV     A,R1
   \   000224   702F         JNZ     ??gp_ZclPairingParse_13
   \   000226   803A         SJMP    ??gp_ZclPairingParse_11
   \                     ??gp_ZclPairingParse_12:
   \   000228   7402         MOV     A,#0x2
   \   00022A   68           XRL     A,R0
   \   00022B   7035         JNZ     ??gp_ZclPairingParse_11
   \   00022D                ; Setup parameters for call to function osal_memcmp
   \   00022D   85....       MOV     ?V4,?V8
   \   000230   85....       MOV     ?V5,?V9
   \   000233   75..00       MOV     ?V6,#0x0
   \   000236   78..         MOV     R0,#?V4
   \   000238   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00023B   7C08         MOV     R4,#0x8
   \   00023D   7D00         MOV     R5,#0x0
   \   00023F   7405         MOV     A,#0x5
   \   000241   12....       LCALL   ?XSTACK_DISP0_8
   \   000244   A982         MOV     R1,DPL
   \   000246   AA83         MOV     R2,DPH
   \   000248   7B00         MOV     R3,#0x0
   \   00024A   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00024D   7403         MOV     A,#0x3
   \   00024F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000252   E9           MOV     A,R1
   \   000253   600D         JZ      ??gp_ZclPairingParse_11
   \                     ??gp_ZclPairingParse_13:
   \   000255                ; Setup parameters for call to function osal_memset
   \   000255   7C40         MOV     R4,#0x40
   \   000257   7D00         MOV     R5,#0x0
   \   000259   79FF         MOV     R1,#-0x1
   \   00025B   AA..         MOV     R2,?XSP + 0
   \   00025D   AB..         MOV     R3,?XSP + 1
   \   00025F   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \                     ??gp_ZclPairingParse_11:
   \   000262   05..         INC     ?V0
   \   000264   E5..         MOV     A,?V0
   \   000266   C3           CLR     C
   \   000267   9406         SUBB    A,#0x6
   \   000269   5003         JNC     $+5
   \   00026B   02....       LJMP    ??gp_ZclPairingParse_10 & 0xFFFF
   \   00026E   02....       LJMP    ??gp_ZclPairingParse_9 & 0xFFFF
   \                     ??gp_ZclPairingParse_7:
   \   000271                ; Setup parameters for call to function gp_PopulateField
   \   000271   7901         MOV     R1,#0x1
   \   000273   AC..         MOV     R4,?V0
   \   000275   AD..         MOV     R5,?V1
   \   000277   12....       LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
   \   00027A   8E82         MOV     DPL,R6
   \   00027C   8F83         MOV     DPH,R7
   \   00027E   78..         MOV     R0,#?V4
   \   000280   12....       LCALL   ?L_MOV_X
   \   000283   E5..         MOV     A,?V5
   \   000285   5440         ANL     A,#0x40
   \   000287   600F         JZ      ??gp_ZclPairingParse_14
   \   000289                ; Setup parameters for call to function gp_PopulateField
   \   000289   7904         MOV     R1,#0x4
   \   00028B   AC..         MOV     R4,?V0
   \   00028D   AD..         MOV     R5,?V1
   \   00028F   AA..         MOV     R2,?V2
   \   000291   AB..         MOV     R3,?V3
   \   000293   12....       LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
   \   000296   8009         SJMP    ??CrossCallReturnLabel_53
   \                     ??gp_ZclPairingParse_14:
   \   000298   85..82       MOV     DPL,?V2
   \   00029B   85..83       MOV     DPH,?V3
   \   00029E   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0002A1   EE           MOV     A,R6
   \   0002A2   2422         ADD     A,#0x22
   \   0002A4   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0002A7   12....       LCALL   ?L_MOV_X
   \   0002AA   E5..         MOV     A,?V5
   \   0002AC   5480         ANL     A,#0x80
   \   0002AE   600B         JZ      ??gp_ZclPairingParse_15
   \   0002B0                ; Setup parameters for call to function gp_PopulateField
   \   0002B0   7910         MOV     R1,#0x10
   \   0002B2   AC..         MOV     R4,?V0
   \   0002B4   AD..         MOV     R5,?V1
   \   0002B6   12....       LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
   \   0002B9   8009         SJMP    ??gp_ZclPairingParse_16
   \                     ??gp_ZclPairingParse_15:
   \   0002BB                ; Setup parameters for call to function osal_memset
   \   0002BB   7C10         MOV     R4,#0x10
   \   0002BD   7D00         MOV     R5,#0x0
   \   0002BF   79FF         MOV     R1,#-0x1
   \   0002C1   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \                     ??gp_ZclPairingParse_16:
   \   0002C4   8E82         MOV     DPL,R6
   \   0002C6   8F83         MOV     DPH,R7
   \   0002C8   78..         MOV     R0,#?V4
   \   0002CA   12....       LCALL   ?L_MOV_X
   \   0002CD   90....       MOV     DPTR,#__Constant_10000
   \   0002D0   78..         MOV     R0,#?V4
   \   0002D2   12....       LCALL   ?L_AND_X
   \   0002D5   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0002D8   600F         JZ      ??gp_ZclPairingParse_17
   \   0002DA                ; Setup parameters for call to function gp_PopulateField
   \   0002DA   7902         MOV     R1,#0x2
   \   0002DC   AC..         MOV     R4,?V0
   \   0002DE   AD..         MOV     R5,?V1
   \   0002E0   AA..         MOV     R2,?V8
   \   0002E2   AB..         MOV     R3,?V9
   \   0002E4   12....       LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
   \   0002E7   800B         SJMP    ??gp_ZclPairingParse_18
   \                     ??gp_ZclPairingParse_17:
   \   0002E9   85..82       MOV     DPL,?V8
   \   0002EC   85..83       MOV     DPH,?V9
   \   0002EF   74FF         MOV     A,#-0x1
   \   0002F1   F0           MOVX    @DPTR,A
   \   0002F2   A3           INC     DPTR
   \   0002F3   F0           MOVX    @DPTR,A
   \                     ??gp_ZclPairingParse_18:
   \   0002F4   8E82         MOV     DPL,R6
   \   0002F6   8F83         MOV     DPH,R7
   \   0002F8   78..         MOV     R0,#?V4
   \   0002FA   12....       LCALL   ?L_MOV_X
   \   0002FD   90....       MOV     DPTR,#__Constant_20000
   \   000300   78..         MOV     R0,#?V4
   \   000302   12....       LCALL   ?L_AND_X
   \   000305   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000308   6010         JZ      ??gp_ZclPairingParse_19
   \   00030A                ; Setup parameters for call to function gp_PopulateField
   \   00030A   7901         MOV     R1,#0x1
   \   00030C   AC..         MOV     R4,?V0
   \   00030E   AD..         MOV     R5,?V1
   \   000310   AA..         MOV     R2,?V10
   \   000312   AB..         MOV     R3,?V11
   \   000314   12....       LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
   \   000317   02....       LJMP    ??gp_ZclPairingParse_9 & 0xFFFF
   \                     ??gp_ZclPairingParse_19:
   \   00031A   85..82       MOV     DPL,?V10
   \   00031D   85..83       MOV     DPH,?V11
   \   000320   74FF         MOV     A,#-0x1
   \   000322   02....       LJMP    ??gp_ZclPairingParse_8 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E5..         MOV     A,?V4
   \   000002                REQUIRE ??Subroutine36_0
   \   000002                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   45..         ORL     A,?V5
   \   000002   45..         ORL     A,?V6
   \   000004   45..         ORL     A,?V7
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   FA           MOV     R2,A
   \   000001   E4           CLR     A
   \   000002   3F           ADDC    A,R7
   \   000003   FB           MOV     R3,A
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   78..         MOV     R0,#?V4
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   74FF         MOV     A,#-0x1
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   F0           MOVX    @DPTR,A
   \   000009                ; Setup parameters for call to function gp_PopulateField
   \   000009                ; Setup parameters for call to function gp_PopulateField
   \   000009   7908         MOV     R1,#0x8
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   EE           MOV     A,R6
   \   000001   241E         ADD     A,#0x1e
   \   000003   F5..         MOV     ?V2,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F5..         MOV     ?V3,A
   \   000009   22           RET
   1049          
   1050           /*********************************************************************
   1051           * @fn          gp_ZclProxyTableReqParse
   1052           *
   1053           * @brief       Parse the proxy table request data message payload
   1054           *
   1055           * @param       
   1056           *
   1057           * @return      
   1058           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1059          static void gp_ZclProxyTableReqParse( zclGpProxyTableRequest_t* pCmd, gpProxyTableReqCmd_t* payload )
   \                     gp_ZclProxyTableReqParse:
   1060          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   1061          
   1062            payload->options =  pCmd->options;
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   8C82         MOV     DPL,R4
   \   00000F   8D83         MOV     DPH,R5
   \   000011   F0           MOVX    @DPTR,A
   1063              
   1064            // If Request type bitfield is 0b00
   1065            if( GP_IS_REQ_TYP_GPD( payload->options ) )
   \   000012   13           RRC     A
   \   000013   13           RRC     A
   \   000014   13           RRC     A
   \   000015   541F         ANL     A,#0x1f
   \   000017   5403         ANL     A,#0x3
   \   000019   F8           MOV     R0,A
   \   00001A   EC           MOV     A,R4
   \   00001B   240E         ADD     A,#0xe
   \   00001D   F5..         MOV     ?V4,A
   \   00001F   E4           CLR     A
   \   000020   3D           ADDC    A,R5
   \   000021   F5..         MOV     ?V5,A
   \   000023   EC           MOV     A,R4
   \   000024   240D         ADD     A,#0xd
   \   000026   F5..         MOV     ?V2,A
   \   000028   E4           CLR     A
   \   000029   3D           ADDC    A,R5
   \   00002A   F5..         MOV     ?V3,A
   \   00002C   EC           MOV     A,R4
   \   00002D   2405         ADD     A,#0x5
   \   00002F   F5..         MOV     ?V0,A
   \   000031   E4           CLR     A
   \   000032   3D           ADDC    A,R5
   \   000033   F5..         MOV     ?V1,A
   \   000035   A3           INC     DPTR
   \   000036   EA           MOV     A,R2
   \   000037   2403         ADD     A,#0x3
   \   000039   FE           MOV     R6,A
   \   00003A   E4           CLR     A
   \   00003B   3B           ADDC    A,R3
   \   00003C   FF           MOV     R7,A
   \   00003D   E8           MOV     A,R0
   \   00003E   7056         JNZ     ??gp_ZclProxyTableReqParse_0
   1066            {  
   1067              // If Application Id bitfield is 0b000
   1068              if( GP_IS_APPLICATION_ID_GPD( payload->options ) )
   \   000040   7407         MOV     A,#0x7
   \   000042   59           ANL     A,R1
   \   000043   F8           MOV     R0,A
   \   000044   7025         JNZ     ??gp_ZclProxyTableReqParse_1
   1069              {        
   1070                // Populate GPD ID
   1071                gp_PopulateField( ( uint8* )&payload->gpdId, &pCmd->pData, sizeof( payload->gpdId ) );
   \   000046                ; Setup parameters for call to function gp_PopulateField
   \   000046   7904         MOV     R1,#0x4
   \   000048   EE           MOV     A,R6
   \   000049   FC           MOV     R4,A
   \   00004A   EF           MOV     A,R7
   \   00004B   FD           MOV     R5,A
   \   00004C   AA82         MOV     R2,DPL
   \   00004E   AB83         MOV     R3,DPH
   \   000050   12....       LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
   1072              
   1073                // Populate GPD IEEE Invalid
   1074                osal_memset ( &payload->gpdIEEE, 0xFF, Z_EXTADDR_LEN );
   \   000053                ; Setup parameters for call to function osal_memset
   \   000053   7C08         MOV     R4,#0x8
   \   000055   7D00         MOV     R5,#0x0
   \   000057   79FF         MOV     R1,#-0x1
   \   000059   AA..         MOV     R2,?V0
   \   00005B   AB..         MOV     R3,?V1
   \   00005D   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1075                // Populate EP Invalid
   1076                payload->ep = 0xFF;
   \   000060   85..82       MOV     DPL,?V2
   \   000063   85..83       MOV     DPH,?V3
   \   000066   74FF         MOV     A,#-0x1
   \   000068   F0           MOVX    @DPTR,A
   \   000069   8020         SJMP    ??gp_ZclProxyTableReqParse_2
   1077              }
   1078              // If Application Id bitfield is 0b010
   1079              else if( GP_IS_APPLICATION_ID_IEEE( payload->options ) )
   \                     ??gp_ZclProxyTableReqParse_1:
   \   00006B   7402         MOV     A,#0x2
   \   00006D   68           XRL     A,R0
   \   00006E   701B         JNZ     ??gp_ZclProxyTableReqParse_2
   1080              {
   1081                // Populate GPD ID Invalid
   1082                payload->gpdId = 0xFFFFFFFF;
   \   000070   12....       LCALL   ?Subroutine5 & 0xFFFF
   1083              
   1084                // Populate GPD IEEE
   1085                gp_PopulateField( ( uint8* )&payload->gpdIEEE, &pCmd->pData, Z_EXTADDR_LEN );
   \                     ??CrossCallReturnLabel_1:
   \   000073   EE           MOV     A,R6
   \   000074   FC           MOV     R4,A
   \   000075   EF           MOV     A,R7
   \   000076   FD           MOV     R5,A
   \   000077   AA..         MOV     R2,?V0
   \   000079   AB..         MOV     R3,?V1
   \   00007B   12....       LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
   1086                // Populate EP
   1087                gp_PopulateField( ( uint8* )&payload->ep, &pCmd->pData, sizeof( payload->ep ) );
   \   00007E                ; Setup parameters for call to function gp_PopulateField
   \   00007E   7901         MOV     R1,#0x1
   \   000080   EE           MOV     A,R6
   \   000081   FC           MOV     R4,A
   \   000082   EF           MOV     A,R7
   \   000083   FD           MOV     R5,A
   \   000084   AA..         MOV     R2,?V2
   \   000086   AB..         MOV     R3,?V3
   \   000088   12....       LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
   1088              }
   1089              // Populate Index Invalid
   1090              payload->index = 0xFF;
   \                     ??gp_ZclProxyTableReqParse_2:
   \   00008B   85..82       MOV     DPL,?V4
   \   00008E   85..83       MOV     DPH,?V5
   \   000091   74FF         MOV     A,#-0x1
   \   000093   F0           MOVX    @DPTR,A
   \   000094   802A         SJMP    ??gp_ZclProxyTableReqParse_3
   1091            }
   1092            // If Request type bitfield is 0b01
   1093            else if( GP_IS_REQ_TPY_INDEX( payload->options ) )
   \                     ??gp_ZclProxyTableReqParse_0:
   \   000096   7401         MOV     A,#0x1
   \   000098   68           XRL     A,R0
   \   000099   7025         JNZ     ??gp_ZclProxyTableReqParse_3
   1094            {
   1095              // Populate GPD ID Invalid
   1096              payload->gpdId = 0xFFFFFFFF;
   \   00009B   12....       LCALL   ?Subroutine6 & 0xFFFF
   1097              
   1098              // Populate GPD IEEE Invalid
   1099              osal_memset ( &payload->gpdIEEE, 0xFF, Z_EXTADDR_LEN );
   \                     ??CrossCallReturnLabel_54:
   \   00009E                ; Setup parameters for call to function osal_memset
   \   00009E   7C08         MOV     R4,#0x8
   \   0000A0   7D00         MOV     R5,#0x0
   \   0000A2   F9           MOV     R1,A
   \   0000A3   AA..         MOV     R2,?V0
   \   0000A5   AB..         MOV     R3,?V1
   \   0000A7   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1100              
   1101              // Populate EP Invalid
   1102              payload->ep = 0xFF;
   \   0000AA   85..82       MOV     DPL,?V2
   \   0000AD   85..83       MOV     DPH,?V3
   \   0000B0   74FF         MOV     A,#-0x1
   \   0000B2   F0           MOVX    @DPTR,A
   1103              
   1104              // Populate index
   1105              gp_PopulateField( ( uint8* )&payload->index, &pCmd->pData, sizeof( payload->index ) );
   \   0000B3                ; Setup parameters for call to function gp_PopulateField
   \   0000B3   7901         MOV     R1,#0x1
   \   0000B5   EE           MOV     A,R6
   \   0000B6   FC           MOV     R4,A
   \   0000B7   EF           MOV     A,R7
   \   0000B8   FD           MOV     R5,A
   \   0000B9   AA..         MOV     R2,?V4
   \   0000BB   AB..         MOV     R3,?V5
   \   0000BD   12....       LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
   1106            }
   1107          
   1108          }
   \                     ??gp_ZclProxyTableReqParse_3:
   \   0000C0   02....       LJMP    ??Subroutine34_0 & 0xFFFF
   1109          
   1110           /*********************************************************************
   1111           * @fn          gp_PopulateField
   1112           *
   1113           * @brief       General function fill the proxy table vector item
   1114           *
   1115           * @param       
   1116           *
   1117           * @return      
   1118           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1119          void gp_PopulateField( uint8* pField, uint8** pData, uint8 size )
   \                     gp_PopulateField:
   1120          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V8,R1
   1121            switch ( size )
   \   00000B   E9           MOV     A,R1
   \   00000C   14           DEC     A
   \   00000D   6018         JZ      ??gp_PopulateField_0
   \   00000F   14           DEC     A
   \   000010   6026         JZ      ??gp_PopulateField_1
   \   000012   24FE         ADD     A,#-0x2
   \   000014   6056         JZ      ??gp_PopulateField_2
   \   000016   24FC         ADD     A,#-0x4
   \   000018   7003         JNZ     $+5
   \   00001A   02....       LJMP    ??gp_PopulateField_3 & 0xFFFF
   \   00001D   24F8         ADD     A,#-0x8
   \   00001F   7003         JNZ     $+5
   \   000021   02....       LJMP    ??gp_PopulateField_4 & 0xFFFF
   \   000024   02....       LJMP    ??gp_PopulateField_5 & 0xFFFF
   1122            {
   1123              case ( sizeof( uint8 ) ):
   1124                gp_u8CastPointer( pField, *pData );
   \                     ??gp_PopulateField_0:
   \   000027   8E82         MOV     DPL,R6
   \   000029   8F83         MOV     DPH,R7
   \   00002B   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F8           MOV     R0,A
   \   000030   8A82         MOV     DPL,R2
   \   000032   8B83         MOV     DPH,R3
   \   000034   E0           MOVX    A,@DPTR
   \   000035   48           ORL     A,R0
   \   000036   8030         SJMP    ??gp_PopulateField_6
   1125                break;
   1126              case ( sizeof( uint16 ) ):
   1127                gp_u16CastPointer( pField, *pData );
   \                     ??gp_PopulateField_1:
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   FC           MOV     R4,A
   \   000041   8B83         MOV     DPH,R3
   \   000043   8A82         MOV     DPL,R2
   \   000045   E0           MOVX    A,@DPTR
   \   000046   4C           ORL     A,R4
   \   000047   FC           MOV     R4,A
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   FD           MOV     R5,A
   \   00004B   8A82         MOV     DPL,R2
   \   00004D   8B83         MOV     DPH,R3
   \   00004F   EC           MOV     A,R4
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   ED           MOV     A,R5
   \   000053   F0           MOVX    @DPTR,A
   \   000054   8882         MOV     DPL,R0
   \   000056   8983         MOV     DPH,R1
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F9           MOV     R1,A
   \   00005B   EC           MOV     A,R4
   \   00005C   F8           MOV     R0,A
   \   00005D   ED           MOV     A,R5
   \   00005E   49           ORL     A,R1
   \   00005F   F9           MOV     R1,A
   \   000060   8A82         MOV     DPL,R2
   \   000062   8B83         MOV     DPH,R3
   \   000064   E8           MOV     A,R0
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   \   000067   E9           MOV     A,R1
   \                     ??gp_PopulateField_6:
   \   000068   F0           MOVX    @DPTR,A
   1128                break;
   \   000069   02....       LJMP    ??gp_PopulateField_5 & 0xFFFF
   1129              case ( sizeof( uint32 ) ):
   1130                gp_u32CastPointer( pField, *pData );
   \                     ??gp_PopulateField_2:
   \   00006C   8E82         MOV     DPL,R6
   \   00006E   8F83         MOV     DPH,R7
   \   000070   E0           MOVX    A,@DPTR
   \   000071   FC           MOV     R4,A
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   FD           MOV     R5,A
   \   000075   8C82         MOV     DPL,R4
   \   000077   8D83         MOV     DPH,R5
   \   000079   78..         MOV     R0,#?V0
   \   00007B   12....       LCALL   ?L_MOV_X
   \   00007E   90....       MOV     DPTR,#__Constant_ff
   \   000081   78..         MOV     R0,#?V0
   \   000083   12....       LCALL   ?L_AND_X
   \   000086   8B83         MOV     DPH,R3
   \   000088   8A82         MOV     DPL,R2
   \   00008A   78..         MOV     R0,#?V0
   \   00008C   12....       LCALL   ?L_IOR_X
   \   00008F   8A82         MOV     DPL,R2
   \   000091   8B83         MOV     DPH,R3
   \   000093   78..         MOV     R0,#?V0
   \   000095   12....       LCALL   ?L_MOV_TO_X
   \   000098   8C82         MOV     DPL,R4
   \   00009A   8D83         MOV     DPH,R5
   \   00009C   A3           INC     DPTR
   \   00009D   78..         MOV     R0,#?V4
   \   00009F   12....       LCALL   ?L_MOV_X
   \   0000A2   7408         MOV     A,#0x8
   \   0000A4   78..         MOV     R0,#?V4
   \   0000A6   12....       LCALL   ?L_SHL
   \   0000A9   90....       MOV     DPTR,#__Constant_ff00
   \   0000AC   78..         MOV     R0,#?V4
   \   0000AE   12....       LCALL   ?L_AND_X
   \   0000B1   78..         MOV     R0,#?V0
   \   0000B3   79..         MOV     R1,#?V4
   \   0000B5   12....       LCALL   ?L_IOR
   \   0000B8   8A82         MOV     DPL,R2
   \   0000BA   8B83         MOV     DPH,R3
   \   0000BC   78..         MOV     R0,#?V0
   \   0000BE   12....       LCALL   ?L_MOV_TO_X
   \   0000C1   8C82         MOV     DPL,R4
   \   0000C3   8D83         MOV     DPH,R5
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   78..         MOV     R0,#?V4
   \   0000C9   12....       LCALL   ?L_MOV_X
   \   0000CC   7410         MOV     A,#0x10
   \   0000CE   78..         MOV     R0,#?V4
   \   0000D0   12....       LCALL   ?L_SHL
   \   0000D3   90....       MOV     DPTR,#__Constant_ff0000
   \   0000D6   78..         MOV     R0,#?V4
   \   0000D8   12....       LCALL   ?L_AND_X
   \   0000DB   78..         MOV     R0,#?V0
   \   0000DD   79..         MOV     R1,#?V4
   \   0000DF   12....       LCALL   ?L_IOR
   \   0000E2   8A82         MOV     DPL,R2
   \   0000E4   8B83         MOV     DPH,R3
   \   0000E6   78..         MOV     R0,#?V0
   \   0000E8   12....       LCALL   ?L_MOV_TO_X
   \   0000EB   8C82         MOV     DPL,R4
   \   0000ED   8D83         MOV     DPH,R5
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   78..         MOV     R0,#?V4
   \   0000F4   12....       LCALL   ?L_MOV_X
   \   0000F7   7418         MOV     A,#0x18
   \   0000F9   78..         MOV     R0,#?V4
   \   0000FB   12....       LCALL   ?L_SHL
   \   0000FE   78..         MOV     R0,#?V0
   \   000100   79..         MOV     R1,#?V4
   \   000102   12....       LCALL   ?L_IOR
   \   000105   8A82         MOV     DPL,R2
   \   000107   8B83         MOV     DPH,R3
   \   000109   78..         MOV     R0,#?V0
   \   00010B   12....       LCALL   ?L_MOV_TO_X
   1131                break;
   \   00010E   801C         SJMP    ??gp_PopulateField_5
   1132              case ( Z_EXTADDR_LEN ):
   1133                osal_memcpy( pField, *pData, Z_EXTADDR_LEN );
   \                     ??gp_PopulateField_3:
   \   000110                ; Setup parameters for call to function osal_memcpy
   \   000110   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000113   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000116   7C08         MOV     R4,#0x8
   \   000118   8008         SJMP    ??gp_PopulateField_7
   1134                break;
   1135              case ( SEC_KEY_LEN ):
   1136                osal_memcpy( pField, *pData, SEC_KEY_LEN );
   \                     ??gp_PopulateField_4:
   \   00011A                ; Setup parameters for call to function osal_memcpy
   \   00011A   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00011D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000120   7C10         MOV     R4,#0x10
   \                     ??gp_PopulateField_7:
   \   000122   7D00         MOV     R5,#0x0
   \   000124   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000127   7403         MOV     A,#0x3
   \   000129   12....       LCALL   ?DEALLOC_XSTACK8
   1137                break;
   1138            }
   1139            *pData += size;
   \                     ??gp_PopulateField_5:
   \   00012C   A8..         MOV     R0,?V8
   \   00012E   8E82         MOV     DPL,R6
   \   000130   8F83         MOV     DPH,R7
   \   000132   E0           MOVX    A,@DPTR
   \   000133   28           ADD     A,R0
   \   000134   F8           MOV     R0,A
   \   000135   A3           INC     DPTR
   \   000136   E0           MOVX    A,@DPTR
   \   000137   3400         ADDC    A,#0x0
   \   000139   F9           MOV     R1,A
   \   00013A   8E82         MOV     DPL,R6
   \   00013C   8F83         MOV     DPH,R7
   \   00013E   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   1140          }
   \                     ??CrossCallReturnLabel_72:
   \   000141   7F09         MOV     R7,#0x9
   \   000143   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F5..         MOV     ?V1,A
   \   00000B   75..00       MOV     ?V2,#0x0
   \   00000E   78..         MOV     R0,#?V0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   22           RET
   1141          
   1142           /*********************************************************************
   1143           * @fn          gp_ProxyTblInit
   1144           *
   1145           * @brief       General function to init the NV items for proxy table
   1146           *
   1147           * @param       
   1148           *
   1149           * @return      
   1150           */
   1151          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1152          uint8 gp_ProxyTblInit( uint8 resetTable )
   \                     gp_ProxyTblInit:
   1153          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 64
   \   000005   74C0         MOV     A,#-0x40
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V1,R1
   1154            uint8 i;
   1155            uint8 status;
   1156            uint8 emptyEntry[PROXY_TBL_ENTRY_LEN];
   1157            
   1158            osal_memset( emptyEntry, 0xFF, PROXY_TBL_ENTRY_LEN );
   \   00000C                ; Setup parameters for call to function osal_memset
   \   00000C   7C40         MOV     R4,#0x40
   \   00000E   7D00         MOV     R5,#0x0
   \   000010   79FF         MOV     R1,#-0x1
   \   000012   AA..         MOV     R2,?XSP + 0
   \   000014   AB..         MOV     R3,?XSP + 1
   \   000016   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1159            
   1160            for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   000019   75..00       MOV     ?V0,#0x0
   1161            {
   1162              status = osal_nv_item_init( ( ZCD_NV_PROXY_TABLE_START + i ),
   1163                                                 PROXY_TBL_ENTRY_LEN, &emptyEntry );
   \                     ??gp_ProxyTblInit_0:
   \   00001C   E5..         MOV     A,?V0
   \   00001E   2410         ADD     A,#0x10
   \   000020   FE           MOV     R6,A
   \   000021   E4           CLR     A
   \   000022   3403         ADDC    A,#0x3
   \   000024   FF           MOV     R7,A
   \   000025                ; Setup parameters for call to function osal_nv_item_init
   \   000025   A8..         MOV     R0,?XSP + 0
   \   000027   A9..         MOV     R1,?XSP + 1
   \   000029   88..         MOV     ?V2,R0
   \   00002B   89..         MOV     ?V3,R1
   \   00002D   78..         MOV     R0,#?V2
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7C40         MOV     R4,#0x40
   \   000034   7D00         MOV     R5,#0x0
   \   000036   EE           MOV     A,R6
   \   000037   FA           MOV     R2,A
   \   000038   EF           MOV     A,R7
   \   000039   FB           MOV     R3,A
   \   00003A   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00003D   7402         MOV     A,#0x2
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000042   E9           MOV     A,R1
   \   000043   F9           MOV     R1,A
   1164              
   1165              if ( ( status != SUCCESS ) && ( status != NV_ITEM_UNINIT ) )
   \   000044   6007         JZ      ??gp_ProxyTblInit_1
   \   000046   7409         MOV     A,#0x9
   \   000048   69           XRL     A,R1
   \   000049   7033         JNZ     ??gp_ProxyTblInit_2
   \   00004B   8028         SJMP    ??gp_ProxyTblInit_3
   \                     ??gp_ProxyTblInit_1:
   \   00004D   7401         MOV     A,#0x1
   \   00004F   65..         XRL     A,?V1
   \   000051   7022         JNZ     ??gp_ProxyTblInit_3
   1166              {
   1167                return status;
   1168              }
   1169              if ( ( status == SUCCESS ) && ( resetTable == TRUE ) )
   1170              {
   1171                status = osal_nv_write( ( ZCD_NV_PROXY_TABLE_START + i ), 0,
   1172                                              PROXY_TBL_ENTRY_LEN, &emptyEntry );
   \   000053                ; Setup parameters for call to function osal_nv_write
   \   000053   78..         MOV     R0,#?V2
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   75..40       MOV     ?V2,#0x40
   \   00005B   75..00       MOV     ?V3,#0x0
   \   00005E   78..         MOV     R0,#?V2
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000063   7C00         MOV     R4,#0x0
   \   000065   7D00         MOV     R5,#0x0
   \   000067   EE           MOV     A,R6
   \   000068   FA           MOV     R2,A
   \   000069   EF           MOV     A,R7
   \   00006A   FB           MOV     R3,A
   \   00006B   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00006E   7404         MOV     A,#0x4
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
   \   000073   E9           MOV     A,R1
   \   000074   F9           MOV     R1,A
   1173              }
   1174            }
   \                     ??gp_ProxyTblInit_3:
   \   000075   05..         INC     ?V0
   \   000077   E5..         MOV     A,?V0
   \   000079   C3           CLR     C
   \   00007A   9406         SUBB    A,#0x6
   \   00007C   409E         JC      ??gp_ProxyTblInit_0
   1175            return status;
   \                     ??gp_ProxyTblInit_2:
   \   00007E   7440         MOV     A,#0x40
   \   000080   12....       LCALL   ?DEALLOC_XSTACK8
   \   000083                REQUIRE ?Subroutine4
   \   000083                ; // Fall through to label ?Subroutine4
   1176          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1177          
   1178          
   1179           /*********************************************************************
   1180           * @fn          gp_getProxyTableByGpId
   1181           *
   1182           * @brief       General function to get proxy table entry by gpd_ID (GP Src ID or Extended Adddress)
   1183           *
   1184           * @param       gpd_ID  - address to look for in the table
   1185           *              pEntry  - buffer in which the entry of the table will be copied
   1186           *
   1187           * @return      
   1188           */
   1189          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1190          uint8 gp_getProxyTableByGpId(gpd_ID_t *gpd_ID, uint8 *pEntry,uint16 *NvProxyTableIndex)
   \                     gp_getProxyTableByGpId:
   1191          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V6,R2
   \   000007   8B..         MOV     ?V7,R3
   \   000009   8C..         MOV     ?V4,R4
   \   00000B   8D..         MOV     ?V5,R5
   1192            uint8 i;
   1193            uint8 status;
   1194          
   1195            if((pEntry == NULL) ||  (gpd_ID == NULL))
   \   00000D   EC           MOV     A,R4
   \   00000E   45..         ORL     A,?V5
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??gp_getProxyTableByGpId_0 & 0xFFFF
   \   000015   EA           MOV     A,R2
   \   000016   45..         ORL     A,?V7
   \   000018   7003         JNZ     $+5
   \   00001A   02....       LJMP    ??gp_getProxyTableByGpId_0 & 0xFFFF
   1196            {
   1197              return ZInvalidParameter;
   1198            }     
   1199            
   1200          
   1201            for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   00001D   7E00         MOV     R6,#0x0
   \   00001F   8A82         MOV     DPL,R2
   \   000021   8B83         MOV     DPH,R3
   \   000023   A3           INC     DPTR
   \   000024   A982         MOV     R1,DPL
   \   000026   AA83         MOV     R2,DPH
   \   000028   89..         MOV     ?V0,R1
   \   00002A   8A..         MOV     ?V1,R2
   \   00002C   8E..         MOV     ?V2,R6
   1202            {
   1203              status = gp_getProxyTableByIndex( ( ZCD_NV_PROXY_TABLE_START + i ), pEntry );
   \                     ??gp_getProxyTableByGpId_1:
   \   00002E                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   00002E   AC..         MOV     R4,?V4
   \   000030   AD..         MOV     R5,?V5
   \   000032   EE           MOV     A,R6
   \   000033   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000036   12....       LCALL   `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   000039   E9           MOV     A,R1
   \   00003A   F8           MOV     R0,A
   1204          
   1205              if ( status == NV_OPER_FAILED )
   \   00003B   740A         MOV     A,#0xa
   \   00003D   68           XRL     A,R0
   \   00003E   7005         JNZ     ??gp_getProxyTableByGpId_2
   1206              {
   1207                // FAIL
   1208                return ZFailure;
   \   000040   7901         MOV     R1,#0x1
   \   000042   02....       LJMP    ??gp_getProxyTableByGpId_3 & 0xFFFF
   1209              }
   1210              
   1211              // if the entry is empty
   1212              if ( status == NV_INVALID_DATA )
   \                     ??gp_getProxyTableByGpId_2:
   \   000045   740D         MOV     A,#0xd
   \   000047   68           XRL     A,R0
   \   000048   6073         JZ      ??gp_getProxyTableByGpId_4
   1213              {
   1214                continue;
   1215              }
   1216          
   1217              //Check that App ID is the same
   1218          
   1219              if ( PROXY_TBL_COMP_APPLICTION_ID( gpd_ID->AppID, pEntry[PROXY_TBL_ENTRY_OPT] ) )
   \   00004A   85..82       MOV     DPL,?V6
   \   00004D   85..83       MOV     DPH,?V7
   \   000050   E0           MOVX    A,@DPTR
   \   000051   FC           MOV     R4,A
   \   000052   5407         ANL     A,#0x7
   \   000054   FA           MOV     R2,A
   \   000055   85..82       MOV     DPL,?V4
   \   000058   85..83       MOV     DPH,?V5
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   5407         ANL     A,#0x7
   \   00005E   6A           XRL     A,R2
   \   00005F   7001         JNZ     ??gp_getProxyTableByGpId_5
   \   000061   E4           CLR     A
   \                     ??gp_getProxyTableByGpId_5:
   \   000062   7059         JNZ     ??gp_getProxyTableByGpId_4
   1220              {
   1221                if ( gpd_ID->AppID == GP_OPT_APP_ID_GPD )
   \   000064   EC           MOV     A,R4
   \   000065   702A         JNZ     ??gp_getProxyTableByGpId_6
   1222                {
   1223                  if ( osal_memcmp( &gpd_ID->GPDId.SrcID, &pEntry[PROXY_TBL_ENTRY_GPD_ID + 4], sizeof ( uint32 ) ) )
   \   000067                ; Setup parameters for call to function osal_memcmp
   \   000067   E5..         MOV     A,?V4
   \   000069   2406         ADD     A,#0x6
   \   00006B   F5..         MOV     ?V8,A
   \   00006D   E4           CLR     A
   \   00006E   35..         ADDC    A,?V5
   \   000070   F5..         MOV     ?V9,A
   \   000072   75..00       MOV     ?V10,#0x0
   \   000075   78..         MOV     R0,#?V8
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00007A   7C04         MOV     R4,#0x4
   \   00007C   7D00         MOV     R5,#0x0
   \   00007E   A9..         MOV     R1,?V0
   \   000080   AA..         MOV     R2,?V1
   \   000082   AB..         MOV     R3,?V2
   \   000084   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000087   7403         MOV     A,#0x3
   \   000089   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008C   E9           MOV     A,R1
   \   00008D   7038         JNZ     ??gp_getProxyTableByGpId_7
   \   00008F   802C         SJMP    ??gp_getProxyTableByGpId_4
   1224                  {
   1225                    // Entry found
   1226                    break;
   1227                  }
   1228                }
   1229          
   1230                else if ( gpd_ID->AppID == GP_OPT_APP_ID_IEEE )
   \                     ??gp_getProxyTableByGpId_6:
   \   000091   7402         MOV     A,#0x2
   \   000093   6C           XRL     A,R4
   \   000094   7027         JNZ     ??gp_getProxyTableByGpId_4
   1231                {
   1232                  if ( osal_memcmp( &gpd_ID->GPDId.GPDExtAddr, &pEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN ) )
   \   000096                ; Setup parameters for call to function osal_memcmp
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A982         MOV     R1,DPL
   \   00009A   AA83         MOV     R2,DPH
   \   00009C   89..         MOV     ?V8,R1
   \   00009E   8A..         MOV     ?V9,R2
   \   0000A0   75..00       MOV     ?V10,#0x0
   \   0000A3   78..         MOV     R0,#?V8
   \   0000A5   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A8   7C08         MOV     R4,#0x8
   \   0000AA   7D00         MOV     R5,#0x0
   \   0000AC   A9..         MOV     R1,?V0
   \   0000AE   AA..         MOV     R2,?V1
   \   0000B0   AB..         MOV     R3,?V2
   \   0000B2   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000B5   7403         MOV     A,#0x3
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BA   E9           MOV     A,R1
   \   0000BB   700A         JNZ     ??gp_getProxyTableByGpId_7
   1233                  {
   1234                    // Entry found
   1235                    break;
   1236                  }
   1237                }
   1238              }
   1239              else
   1240              {
   1241                continue;
   1242              }
   1243            }
   \                     ??gp_getProxyTableByGpId_4:
   \   0000BD   0E           INC     R6
   \   0000BE   EE           MOV     A,R6
   \   0000BF   C3           CLR     C
   \   0000C0   9406         SUBB    A,#0x6
   \   0000C2   5003         JNC     $+5
   \   0000C4   02....       LJMP    ??gp_getProxyTableByGpId_1 & 0xFFFF
   1244          
   1245            if(i <= GPP_MAX_PROXY_TABLE_ENTRIES)
   \                     ??gp_getProxyTableByGpId_7:
   \   0000C7   EE           MOV     A,R6
   \   0000C8   C3           CLR     C
   \   0000C9   9406         SUBB    A,#0x6
   \   0000CB   501D         JNC     ??gp_getProxyTableByGpId_0
   \   0000CD   7413         MOV     A,#0x13
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   12....       LCALL   ?Subroutine16 & 0xFFFF
   1246            {
   1247              if(NvProxyTableIndex != NULL)
   \                     ??CrossCallReturnLabel_13:
   \   0000D5   E582         MOV     A,DPL
   \   0000D7   4583         ORL     A,DPH
   \   0000D9   600B         JZ      ??CrossCallReturnLabel_73
   1248              {
   1249                *NvProxyTableIndex = ZCD_NV_PROXY_TABLE_START + i;
   \   0000DB   EE           MOV     A,R6
   \   0000DC   2410         ADD     A,#0x10
   \   0000DE   F8           MOV     R0,A
   \   0000DF   E4           CLR     A
   \   0000E0   3403         ADDC    A,#0x3
   \   0000E2   F9           MOV     R1,A
   \   0000E3   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   1250              }
   1251              return ZSuccess;
   \                     ??CrossCallReturnLabel_73:
   \   0000E6   7900         MOV     R1,#0x0
   \   0000E8   8002         SJMP    ??gp_getProxyTableByGpId_3
   1252            }
   1253              
   1254            return ZInvalidParameter;
   \                     ??gp_getProxyTableByGpId_0:
   \   0000EA   7902         MOV     R1,#0x2
   \                     ??gp_getProxyTableByGpId_3:
   \   0000EC   7F0B         MOV     R7,#0xb
   \   0000EE   02....       LJMP    ?BANKED_LEAVE_XDATA
   1255          }
   1256          
   1257           /*********************************************************************
   1258           * @fn          gp_SecurityOperationProxy
   1259           *
   1260           * @brief       Performs Security Operations according to Proxy
   1261           *
   1262           * @param       ind - pointer to gp data indication
   1263           * @param       pFrameCounter 
   1264           * @param       pKeyType 
   1265           * @param       pkey Key to be used to decript the packet (if applies)
   1266           *
   1267           * @return      GP_SEC_RSP status
   1268           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1269          uint8 gp_SecurityOperationProxy( gp_DataInd_t* pInd, uint8* pKeyType, uint8* pKey)
   \                     gp_SecurityOperationProxy:
   1270          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 75
   \   000005   74B5         MOV     A,#-0x4b
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V8,R4
   \   000010   8D..         MOV     ?V9,R5
   1271            uint8    currEntry[PROXY_TBL_ENTRY_LEN] = {0};
   \   000012   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_3`
   \   000015   740B         MOV     A,#0xb
   \   000017   12....       LCALL   ?XSTACK_DISP102_8
   \   00001A   7440         MOV     A,#0x40
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1272            uint8    status;
   1273            uint32   SecFrameCounter = 0;
   1274            uint8    securityCheckFail = FALSE;
   1275            uint8    endpointCheckFail = FALSE;
   1276            uint16   NvProxyTableIndex = 0;
   \   00001F   85..82       MOV     DPL,?XSP + 0
   \   000022   85..83       MOV     DPH,?XSP + 1
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   F0           MOVX    @DPTR,A
   1277            gpd_ID_t gpd_ID;
   1278            
   1279            
   1280            if((pKeyType == NULL) || (pKey == NULL) || (pInd == NULL))
   \   000028   E5..         MOV     A,?V8
   \   00002A   45..         ORL     A,?V9
   \   00002C   6016         JZ      ??gp_SecurityOperationProxy_0
   \   00002E   745D         MOV     A,#0x5d
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V0,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F5..         MOV     ?V1,A
   \   00003A   E5..         MOV     A,?V0
   \   00003C   45..         ORL     A,?V1
   \   00003E   6004         JZ      ??gp_SecurityOperationProxy_0
   \   000040   EE           MOV     A,R6
   \   000041   4F           ORL     A,R7
   \   000042   7005         JNZ     ??gp_SecurityOperationProxy_1
   1281            {
   1282              return GP_SEC_RSP_ERROR;
   \                     ??gp_SecurityOperationProxy_0:
   \   000044   7904         MOV     R1,#0x4
   \   000046   02....       LJMP    ??gp_SecurityOperationProxy_2 & 0xFFFF
   1283            }
   1284            *pKeyType = 0;
   \                     ??gp_SecurityOperationProxy_1:
   \   000049   85..82       MOV     DPL,?V8
   \   00004C   85..83       MOV     DPH,?V9
   \   00004F   E4           CLR     A
   \   000050   F0           MOVX    @DPTR,A
   1285            osal_memset(pKey,0,SEC_KEY_LEN);
   \   000051                ; Setup parameters for call to function osal_memset
   \   000051   7C10         MOV     R4,#0x10
   \   000053   FD           MOV     R5,A
   \   000054   F9           MOV     R1,A
   \   000055   AA..         MOV     R2,?V0
   \   000057   AB..         MOV     R3,?V1
   \   000059   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1286            
   1287            gpd_ID.AppID = pInd->appID;
   \   00005C   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00005F   C0E0         PUSH    A
   \   000061   7402         MOV     A,#0x2
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   D0E0         POP     A
   \   000068   F0           MOVX    @DPTR,A
   1288            
   1289            if(gpd_ID.AppID == GP_APP_ID_DEFAULT)
   \   000069   7010         JNZ     ??gp_SecurityOperationProxy_3
   1290            {
   1291              gpd_ID.GPDId.SrcID = pInd->SrcId;
   \   00006B   12....       LCALL   ?Subroutine22 & 0xFFFF
   1292            }
   \                     ??CrossCallReturnLabel_22:
   \   00006E   12....       LCALL   ?XLOAD_R0123
   \   000071   7403         MOV     A,#0x3
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   12....       LCALL   ?XSTORE_R0123
   \   000079   801B         SJMP    ??gp_SecurityOperationProxy_4
   1293            else
   1294            {
   1295              osal_memcpy(gpd_ID.GPDId.GPDExtAddr,pInd->srcAddr.addr.extAddr,Z_EXTADDR_LEN);
   \                     ??gp_SecurityOperationProxy_3:
   \   00007B                ; Setup parameters for call to function osal_memcpy
   \   00007B   12....       LCALL   ?Subroutine20 & 0xFFFF
   1296            }
   \                     ??CrossCallReturnLabel_18:
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000081   7C08         MOV     R4,#0x8
   \   000083   7D00         MOV     R5,#0x0
   \   000085   7406         MOV     A,#0x6
   \   000087   12....       LCALL   ?XSTACK_DISP0_8
   \   00008A   AA82         MOV     R2,DPL
   \   00008C   AB83         MOV     R3,DPH
   \   00008E   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000091   7403         MOV     A,#0x3
   \   000093   12....       LCALL   ?DEALLOC_XSTACK8
   1297            
   1298            status = gp_getProxyTableByGpId(&gpd_ID,currEntry,&NvProxyTableIndex);
   \                     ??gp_SecurityOperationProxy_4:
   \   000096                ; Setup parameters for call to function gp_getProxyTableByGpId
   \   000096   A8..         MOV     R0,?XSP + 0
   \   000098   A9..         MOV     R1,?XSP + 1
   \   00009A   88..         MOV     ?V2,R0
   \   00009C   89..         MOV     ?V3,R1
   \   00009E   78..         MOV     R0,#?V2
   \   0000A0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A3   740D         MOV     A,#0xd
   \   0000A5   12....       LCALL   ?XSTACK_DISP102_8
   \   0000A8   7404         MOV     A,#0x4
   \   0000AA   12....       LCALL   ?XSTACK_DISP101_8
   \   0000AD   12....       LCALL   `??gp_getProxyTableByGpId::?relay`; Banked call to: gp_getProxyTableByGpId
   \   0000B0   7402         MOV     A,#0x2
   \   0000B2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B5   E9           MOV     A,R1
   \   0000B6   F8           MOV     R0,A
   1299            
   1300            //Not found
   1301            if(status == ZInvalidParameter)
   \   0000B7   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0000BA   7402         MOV     A,#0x2
   \   0000BC   68           XRL     A,R0
   \   0000BD   7055         JNZ     ??gp_SecurityOperationProxy_5
   1302            {
   1303              //Section A.3.5.2.1 if in commissioning mode and GPDF from proxy that do not 
   1304              //have entry, then drop frame
   1305              if(zgGP_InCommissioningMode == FALSE)
   \   0000BF   90....       MOV     DPTR,#zgGP_InCommissioningMode
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   7003         JNZ     $+5
   \   0000C5   02....       LJMP    ??gp_SecurityOperationProxy_6 & 0xFFFF
   1306              {
   1307                return GP_SEC_RSP_DROP_FRAME;
   1308              }
   1309              if(pInd->GPDFKeyType == 0)
   \   0000C8   85..82       MOV     DPL,?V2
   \   0000CB   85..83       MOV     DPH,?V3
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   6003         JZ      $+5
   \   0000D1   02....       LJMP    ??gp_SecurityOperationProxy_7 & 0xFFFF
   1310              {
   1311                //If there is no shared key, then pass unprocess
   1312                if(osal_memcmp(pKey,zgpSharedKey,SEC_KEY_LEN))
   \   0000D4   75....       MOV     ?V4,#zgpSharedKey & 0xff
   \   0000D7   75....       MOV     ?V5,#(zgpSharedKey >> 8) & 0xff
   \   0000DA   75..80       MOV     ?V6,#-0x80
   \   0000DD                ; Setup parameters for call to function osal_memcmp
   \   0000DD   78..         MOV     R0,#?V4
   \   0000DF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E2   7C10         MOV     R4,#0x10
   \   0000E4   7D00         MOV     R5,#0x0
   \   0000E6   85..82       MOV     DPL,?V0
   \   0000E9   85..83       MOV     DPH,?V1
   \   0000EC   A982         MOV     R1,DPL
   \   0000EE   AA83         MOV     R2,DPH
   \   0000F0   7B00         MOV     R3,#0x0
   \   0000F2   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000F5   7403         MOV     A,#0x3
   \   0000F7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FA   E9           MOV     A,R1
   \   0000FB   7059         JNZ     ??gp_SecurityOperationProxy_7
   1313                {
   1314                  return GP_SEC_RSP_PASS_UNPROCESSED;
   1315                }
   1316                osal_memcpy(pKey,zgpSharedKey,SEC_KEY_LEN);
   \   0000FD                ; Setup parameters for call to function osal_memcpy
   \   0000FD   78..         MOV     R0,#?V4
   \   0000FF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000102   7C10         MOV     R4,#0x10
   \   000104   7D00         MOV     R5,#0x0
   \   000106   AA..         MOV     R2,?V0
   \   000108   AB..         MOV     R3,?V1
   \   00010A   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00010D   7403         MOV     A,#0x3
   \   00010F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000112   803E         SJMP    ??gp_SecurityOperationProxy_6
   1317              }
   1318              else
   1319              {
   1320                return GP_SEC_RSP_PASS_UNPROCESSED;
   1321              }
   1322            }
   1323            
   1324            //error
   1325            else if(status == ZFailure)
   \                     ??gp_SecurityOperationProxy_5:
   \   000114   7401         MOV     A,#0x1
   \   000116   68           XRL     A,R0
   \   000117   6039         JZ      ??gp_SecurityOperationProxy_6
   1326            {
   1327              //Not found, or error, drop the frame
   1328              return GP_SEC_RSP_DROP_FRAME;
   1329            }
   1330            
   1331            //Found
   1332            else
   1333            {
   1334              
   1335          //Active/Inactive entries in the proxy table are not supported    
   1336          #if 1    
   1337                //Check security Section A.3.7.3.3
   1338                //Check framecounter freshness
   1339                SecFrameCounter = osal_build_uint32(&currEntry[PROXY_TBL_ENTRY_SEC_FRAME],sizeof(uint32));
   \   000119                ; Setup parameters for call to function osal_build_uint32
   \   000119   7904         MOV     R1,#0x4
   \   00011B   7419         MOV     A,#0x19
   \   00011D   12....       LCALL   ?XSTACK_DISP0_8
   \   000120   AA82         MOV     R2,DPL
   \   000122   AB83         MOV     R3,DPH
   \   000124   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000127   8A..         MOV     ?V4,R2
   \   000129   8B..         MOV     ?V5,R3
   \   00012B   8C..         MOV     ?V6,R4
   \   00012D   8D..         MOV     ?V7,R5
   1340                if(SecFrameCounter >= pInd->GPDSecFrameCounter)
   \   00012F   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000132   78..         MOV     R0,#?V4
   \   000134   12....       LCALL   ?UL_GE_X
   \   000137   4013         JC      ??gp_SecurityOperationProxy_8
   1341                {
   1342                  securityCheckFail = TRUE;
   1343                }
   1344                //Compare the security level
   1345                else if(pInd->GPDFSecLvl != GP_GET_SEC_LEVEL(currEntry[PROXY_TBL_ENTRY_SEC_OPT]))
   \   000139   EE           MOV     A,R6
   \   00013A   241D         ADD     A,#0x1d
   \   00013C   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00013F   700B         JNZ     ??gp_SecurityOperationProxy_8
   1346                {
   1347                  securityCheckFail = TRUE;
   1348                }
   1349                //Mapping of security key type (section A.1.4.1.3 Table 12)
   1350                else if((GP_GET_SEC_KEY_TYPE(currEntry[PROXY_TBL_ENTRY_SEC_OPT]) <= 0x03)
   1351                        && (pInd->GPDFKeyType == 1))
   \   000141   85..82       MOV     DPL,?V2
   \   000144   85..83       MOV     DPH,?V3
   \   000147   E0           MOVX    A,@DPTR
   \   000148   6401         XRL     A,#0x1
   \   00014A   700E         JNZ     ??gp_SecurityOperationProxy_9
   1352                {
   1353                  securityCheckFail = TRUE;
   1354                }
   1355                else if(  ((GP_GET_SEC_KEY_TYPE(currEntry[PROXY_TBL_ENTRY_SEC_OPT]) == 0x07) ||
   1356                           (GP_GET_SEC_KEY_TYPE(currEntry[PROXY_TBL_ENTRY_SEC_OPT]) == 0x04)) 
   1357                         && (pInd->GPDFKeyType == 0) )
   1358                {
   1359                  securityCheckFail = TRUE;
   1360                  
   1361                }
   1362                else if( (GP_GET_SEC_KEY_TYPE(currEntry[PROXY_TBL_ENTRY_SEC_OPT]) == 0x05) ||
   1363                         (GP_GET_SEC_KEY_TYPE(currEntry[PROXY_TBL_ENTRY_SEC_OPT]) == 0x06) )
   1364                {
   1365                  //keytype reserved
   1366                  securityCheckFail = TRUE;
   1367                }
   1368                
   1369                if(securityCheckFail == TRUE)
   1370                {
   1371                  if(zgGP_InCommissioningMode == FALSE)
   \                     ??gp_SecurityOperationProxy_8:
   \   00014C   90....       MOV     DPTR,#zgGP_InCommissioningMode
   \   00014F   E0           MOVX    A,@DPTR
   \   000150   7004         JNZ     ??gp_SecurityOperationProxy_7
   1372                  {
   1373                    return GP_SEC_RSP_DROP_FRAME;
   \                     ??gp_SecurityOperationProxy_6:
   \   000152   7900         MOV     R1,#0x0
   \   000154   8033         SJMP    ??gp_SecurityOperationProxy_2
   1374                  }
   1375                  else
   1376                  {
   1377                    return GP_SEC_RSP_PASS_UNPROCESSED;
   \                     ??gp_SecurityOperationProxy_7:
   \   000156   7902         MOV     R1,#0x2
   \   000158   802F         SJMP    ??gp_SecurityOperationProxy_2
   1378                  }
   1379                }
   1380                else
   1381                {
   1382                  //Securty check success
   1383                  osal_memcpy(pKey,&currEntry[PROXY_TBL_ENTRY_GPD_KEY],SEC_KEY_LEN);
   \                     ??gp_SecurityOperationProxy_9:
   \   00015A                ; Setup parameters for call to function osal_memcpy
   \   00015A   741D         MOV     A,#0x1d
   \   00015C   12....       LCALL   ?XSTACK_DISP0_8
   \   00015F   A982         MOV     R1,DPL
   \   000161   AA83         MOV     R2,DPH
   \   000163   89..         MOV     ?V4,R1
   \   000165   8A..         MOV     ?V5,R2
   \   000167   75..00       MOV     ?V6,#0x0
   \   00016A   78..         MOV     R0,#?V4
   \   00016C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00016F   7C10         MOV     R4,#0x10
   \   000171   7D00         MOV     R5,#0x0
   \   000173   AA..         MOV     R2,?V0
   \   000175   AB..         MOV     R3,?V1
   \   000177   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00017A   7403         MOV     A,#0x3
   \   00017C   12....       LCALL   ?DEALLOC_XSTACK8
   1384                  *pKeyType = GP_GET_SEC_KEY_TYPE(currEntry[PROXY_TBL_ENTRY_SEC_OPT]);
   \   00017F   85..82       MOV     DPL,?V8
   \   000182   85..83       MOV     DPH,?V9
   \   000185   E4           CLR     A
   \   000186   F0           MOVX    @DPTR,A
   1385                
   1386                  //compare the endpoint
   1387                  if(endpointCheckFail)
   1388                  {
   1389                    return GP_SEC_RSP_TX_THEN_DROP;
   1390                  }
   1391                  else
   1392                  {
   1393                    return GP_SEC_RSP_MATCH;
   \   000187   7901         MOV     R1,#0x1
   \                     ??gp_SecurityOperationProxy_2:
   \   000189   744B         MOV     A,#0x4b
   \   00018B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00018E   7F0A         MOV     R7,#0xa
   \   000190   02....       LJMP    ?BANKED_LEAVE_XDATA
   1394                  }
   1395                }
   1396                
   1397          //Active/Inactive entries in the proxy table are not supported
   1398          #else
   1399              //Is active
   1400              if(PROXY_TBL_GET_ENTRY_ACTIVE(currEntry[PROXY_TBL_ENTRY_OPT]))
   1401              {
   1402                //Check security Section A.3.7.3.3
   1403                //Check framecounter freshness
   1404                SecFrameCounter = osal_build_uint32(&currEntry[PROXY_TBL_ENTRY_SEC_FRAME],sizeof(uint32));
   1405                if(SecFrameCounter >= pInd->GPDSecFrameCounter)
   1406                {
   1407                  securityCheckFail = TRUE;
   1408                }
   1409                //Compare the security level
   1410                else if(pInd->GPDFSecLvl != GP_GET_SEC_LEVEL(currEntry[PROXY_TBL_ENTRY_SEC_OPT]))
   1411                {
   1412                  securityCheckFail = TRUE;
   1413                }
   1414                //Mapping of security key type (section A.1.4.1.3 Table 12)
   1415                else if((GP_GET_SEC_KEY_TYPE(currEntry[PROXY_TBL_ENTRY_SEC_OPT]) <= 0x03)
   1416                        && (pInd->GPDFKeyType == 1))
   1417                {
   1418                  securityCheckFail = TRUE;
   1419                }
   1420                else if(  ((GP_GET_SEC_KEY_TYPE(currEntry[PROXY_TBL_ENTRY_SEC_OPT]) == 0x07) ||
   1421                           (GP_GET_SEC_KEY_TYPE(currEntry[PROXY_TBL_ENTRY_SEC_OPT]) == 0x04)) 
   1422                         && (pInd->GPDFKeyType == 0) )
   1423                {
   1424                  securityCheckFail = TRUE;
   1425                  
   1426                }
   1427                else if( (GP_GET_SEC_KEY_TYPE(currEntry[PROXY_TBL_ENTRY_SEC_OPT]) == 0x05) ||
   1428                         (GP_GET_SEC_KEY_TYPE(currEntry[PROXY_TBL_ENTRY_SEC_OPT]) == 0x06) )
   1429                {
   1430                  //keytype reserved
   1431                  securityCheckFail = TRUE;
   1432                }
   1433                
   1434                if(securityCheckFail == TRUE)
   1435                {
   1436                  if(zgGP_InCommissioningMode == FALSE)
   1437                  {
   1438                    return GP_SEC_RSP_DROP_FRAME;
   1439                  }
   1440                  else
   1441                  {
   1442                    return GP_SEC_RSP_PASS_UNPROCESSED;
   1443                  }
   1444                }
   1445                else
   1446                {
   1447                  //Securty check success
   1448                  osal_memcpy(pKey,&currEntry[PROXY_TBL_ENTRY_GPD_KEY],SEC_KEY_LEN);
   1449                  *pKeyType = GP_GET_SEC_KEY_TYPE(currEntry[PROXY_TBL_ENTRY_SEC_OPT]);
   1450                
   1451                  //compare the endpoint
   1452                  if(endpointCheckFail)
   1453                  {
   1454                    return GP_SEC_RSP_TX_THEN_DROP;
   1455                  }
   1456                  else
   1457                  {
   1458                    return GP_SEC_RSP_MATCH;
   1459                  }
   1460                }
   1461              }
   1462          
   1463              //Inactive
   1464              else
   1465              {
   1466                //Found, inactive and in operational mode
   1467                if(zgGP_InCommissioningMode == FALSE)
   1468                {
   1469                  //Check framecounter freshness
   1470                  SecFrameCounter = osal_build_uint32(&currEntry[PROXY_TBL_ENTRY_SEC_FRAME],sizeof(uint32));
   1471                  if(SecFrameCounter < pInd->GPDSecFrameCounter)
   1472                  {
   1473                    //Update framecounter
   1474                     osal_memcpy(&currEntry[PROXY_TBL_ENTRY_SEC_FRAME],(uint8*)&pInd->GPDSecFrameCounter,sizeof(uint32));
   1475          
   1476                     status = osal_nv_write( NvProxyTableIndex, 0,
   1477                                         PROXY_TBL_ENTRY_LEN, currEntry );
   1478                     
   1479                     if ( status != SUCCESS )
   1480                     {
   1481                       // FAIL
   1482                       return GP_SEC_RSP_ERROR;
   1483                     }
   1484                  }
   1485                  return GP_SEC_RSP_DROP_FRAME;
   1486                }
   1487                //Found,inactive, and in commissioning mode
   1488                else
   1489                {
   1490                  //If key type = 0, its the same as not found
   1491                  if(pInd->GPDFKeyType == 0)
   1492                  {
   1493                    Found = FALSE;
   1494                  }
   1495                  else
   1496                  {
   1497                    return GP_SEC_RSP_PASS_UNPROCESSED;
   1498                  }
   1499                }
   1500              }
   1501          #endif
   1502              
   1503            }
   1504          
   1505          
   1506            //Should not reach this point
   1507            return GP_SEC_RSP_DROP_FRAME;
   1508          }
   1509          
   1510           /*********************************************************************
   1511           * @fn          gp_u32CastPointer
   1512           *
   1513           * @brief       General function fill uint32 from pionter.
   1514           *
   1515           * @param       pBitField - pointer to the bit field.
   1516           *              bit       - position of the bit to set in the given bitfield.
   1517           *
   1518           * @return      
   1519           */
   1520          static void gp_u32CastPointer( uint8 *data, uint8 *p )
   1521          {
   1522              *( uint32* )data |= ( ( *( uint32* ) p++ )       & 0x000000FF );
   1523              *( uint32* )data |= ( ( *( uint32* ) p++ <<  8 ) & 0x0000FF00 );
   1524              *( uint32* )data |= ( ( *( uint32* ) p++ << 16 ) & 0x00FF0000 );
   1525              *( uint32* )data |= ( ( *( uint32* ) p++ << 24 ) & 0xFF000000 );
   1526          }
   1527          
   1528           /*********************************************************************
   1529           * @fn          gp_u16CastPointer
   1530           *
   1531           * @brief       General function fill uint16 from pionter.
   1532           *
   1533           * @param       pBitField - pointer to the bit field.
   1534           *              bit       - position of the bit to set in the given bitfield.
   1535           *
   1536           * @return      
   1537           */
   1538          static void gp_u16CastPointer( uint8 *data, uint8 *p )
   1539          {
   1540              *( uint16* )data |= ( ( *( uint16* ) p++ )       & 0x00FF );
   1541              *( uint16* )data |= ( ( *( uint16* ) p++ <<  8 ) & 0xFF00 );
   1542          }
   1543          
   1544           /*********************************************************************
   1545           * @fn          gp_u8CastPointer
   1546           *
   1547           * @brief       General function fill uint16 from pionter.
   1548           *
   1549           * @param       pBitField - pointer to the bit field.
   1550           *              bit       - position of the bit to set in the given bitfield.
   1551           *
   1552           * @return      
   1553           */
   1554          static void gp_u8CastPointer( uint8 *data, uint8 *p )
   1555          {
   1556              *( uint8* )data |= ( ( *( uint8* ) p ) );
   1557          }
   1558          
   1559           /*********************************************************************
   1560           * @fn          gp_getProxyTableByIndex
   1561           *
   1562           * @brief       General function to get proxy table entry by NV index
   1563           *
   1564           * @param       nvIndex - NV Id of proxy table
   1565           *              pEntry  - pointer to PROXY_TBL_ENTRY_LEN array
   1566           *
   1567           * @return      
   1568           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1569          uint8 gp_getProxyTableByIndex( uint16 nvIndex, uint8 *pEntry )
   \                     gp_getProxyTableByIndex:
   1570          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8C..         MOV     ?V4,R4
   \   00000C   8D..         MOV     ?V5,R5
   1571            uint8 status;
   1572            uint16 emptyEntry = 0xFFFF;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   74FF         MOV     A,#-0x1
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   F0           MOVX    @DPTR,A
   1573            
   1574            
   1575            if ( ( nvIndex < ZCD_NV_PROXY_TABLE_START ) || ( nvIndex > ZCD_NV_PROXY_TABLE_END ) )
   \   000019   EA           MOV     A,R2
   \   00001A   24F0         ADD     A,#-0x10
   \   00001C   F8           MOV     R0,A
   \   00001D   EB           MOV     A,R3
   \   00001E   34FC         ADDC    A,#-0x4
   \   000020   F9           MOV     R1,A
   \   000021   C3           CLR     C
   \   000022   E8           MOV     A,R0
   \   000023   9430         SUBB    A,#0x30
   \   000025   E9           MOV     A,R1
   \   000026   9400         SUBB    A,#0x0
   \   000028   4004         JC      ??gp_getProxyTableByIndex_0
   1576            {
   1577              return NV_OPER_FAILED;
   \   00002A   790A         MOV     R1,#0xa
   \   00002C   8051         SJMP    ??gp_getProxyTableByIndex_1
   1578            }
   1579            
   1580            status = osal_nv_read( nvIndex, 0,
   1581                                    PROXY_TBL_ENTRY_LEN, pEntry );
   \                     ??gp_getProxyTableByIndex_0:
   \   00002E                ; Setup parameters for call to function osal_nv_read
   \   00002E   78..         MOV     R0,#?V4
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   75..40       MOV     ?V0,#0x40
   \   000036   75..00       MOV     ?V1,#0x0
   \   000039   78..         MOV     R0,#?V0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   7C00         MOV     R4,#0x0
   \   000040   7D00         MOV     R5,#0x0
   \   000042   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000045   7404         MOV     A,#0x4
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004A   E9           MOV     A,R1
   \   00004B   FE           MOV     R6,A
   1582            
   1583            if ( status != SUCCESS )
   \   00004C   702F         JNZ     ??gp_getProxyTableByIndex_2
   1584            {
   1585              // Return the failure status of NV read procedure
   1586              return status;
   1587            }
   1588              
   1589                
   1590            // if the entry is empty
   1591            if ( osal_memcmp( pEntry, &emptyEntry, sizeof ( uint16 ) ) )
   \   00004E                ; Setup parameters for call to function osal_memcmp
   \   00004E   A8..         MOV     R0,?XSP + 0
   \   000050   A9..         MOV     R1,?XSP + 1
   \   000052   88..         MOV     ?V0,R0
   \   000054   89..         MOV     ?V1,R1
   \   000056   75..00       MOV     ?V2,#0x0
   \   000059   78..         MOV     R0,#?V0
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005E   7C02         MOV     R4,#0x2
   \   000060   7D00         MOV     R5,#0x0
   \   000062   85..82       MOV     DPL,?V4
   \   000065   85..83       MOV     DPH,?V5
   \   000068   A982         MOV     R1,DPL
   \   00006A   AA83         MOV     R2,DPH
   \   00006C   7B00         MOV     R3,#0x0
   \   00006E   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000071   7403         MOV     A,#0x3
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
   \   000076   E9           MOV     A,R1
   \   000077   6004         JZ      ??gp_getProxyTableByIndex_2
   1592            {
   1593              return NV_INVALID_DATA;
   \   000079   790D         MOV     R1,#0xd
   \   00007B   8002         SJMP    ??gp_getProxyTableByIndex_1
   1594            }
   1595            
   1596            return status;
   \                     ??gp_getProxyTableByIndex_2:
   \   00007D   EE           MOV     A,R6
   \   00007E   F9           MOV     R1,A
   \                     ??gp_getProxyTableByIndex_1:
   \   00007F   7402         MOV     A,#0x2
   \   000081   02....       LJMP    ?Subroutine3 & 0xFFFF
   1597          }
   1598          
   1599          
   1600          
   1601          
   1602          
   1603          
   1604          
   1605          
   1606          
   1607          /*********************************************************************
   1608           * @fn          GP_DataInd
   1609           *
   1610           * @brief       This passes the MCPS data indications received in MAC to the application
   1611           *
   1612           * @param       gp_DataInd
   1613           *
   1614           * @return      FreeMsg - TRUE if the message will be released, False if it will 
   1615           *                        be keeped for duplicate filtering
   1616           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1617          uint8 GP_DataInd(gp_DataInd_t *gp_DataInd)
   \                     GP_DataInd:
   1618          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 56
   \   000005   74C8         MOV     A,#-0x38
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1619            uint32  timeout;
   1620            uint8   freeMsg = FALSE;
   1621          
   1622            gp_DataIndAppendToList(gp_DataInd, &gp_DataIndList);
   \   00000E                ; Setup parameters for call to function gp_DataIndAppendToList
   \   00000E   7C..         MOV     R4,#gp_DataIndList & 0xff
   \   000010   7D..         MOV     R5,#(gp_DataIndList >> 8) & 0xff
   \   000012   12....       LCALL   `??gp_DataIndAppendToList::?relay`; Banked call to: gp_DataIndAppendToList
   1623            
   1624            gp_DataInd->SecReqHandling.timeout = gpDuplicateTimeout;
   \   000015   EE           MOV     A,R6
   \   000016   2405         ADD     A,#0x5
   \   000018   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00001B   74D0         MOV     A,#-0x30
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   7407         MOV     A,#0x7
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   E4           CLR     A
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   F0           MOVX    @DPTR,A
   1625            //Consider the current time elepsed to the next timeout
   1626            timeout = osal_get_timeoutEx(gp_TaskID,GP_DUPLICATE_FILTERING_TIMEOUT_EVENT);
   \   000027                ; Setup parameters for call to function osal_get_timeoutEx
   \   000027   7A02         MOV     R2,#0x2
   \   000029   FB           MOV     R3,A
   \   00002A   90....       MOV     DPTR,#gp_TaskID
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F9           MOV     R1,A
   \   00002F   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000032   8A..         MOV     ?V4,R2
   \   000034   8B..         MOV     ?V5,R3
   \   000036   8C..         MOV     ?V6,R4
   \   000038   8D..         MOV     ?V7,R5
   1627            
   1628            if(timeout)
   \   00003A   EA           MOV     A,R2
   \   00003B   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00003E   85..82       MOV     DPL,?V0
   \   000041   85..83       MOV     DPH,?V1
   \   000044   6007         JZ      ??GP_DataInd_0
   1629            {
   1630              gp_DataInd->SecReqHandling.timeout += timeout;
   \   000046   78..         MOV     R0,#?V4
   \   000048   12....       LCALL   ?L_ADD_TO_X
   \   00004B   8014         SJMP    ??GP_DataInd_1
   1631            }  
   1632            else
   1633            {
   1634              osal_start_timerEx(gp_TaskID,GP_DUPLICATE_FILTERING_TIMEOUT_EVENT,gp_DataInd->SecReqHandling.timeout);
   \                     ??GP_DataInd_0:
   \   00004D                ; Setup parameters for call to function osal_start_timerEx
   \   00004D   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000050   7A02         MOV     R2,#0x2
   \   000052   7B00         MOV     R3,#0x0
   \   000054   90....       MOV     DPTR,#gp_TaskID
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00005C   7404         MOV     A,#0x4
   \   00005E   12....       LCALL   ?DEALLOC_XSTACK8
   1635            }  
   1636            
   1637            if ( zgGP_InCommissioningMode == TRUE )
   \                     ??GP_DataInd_1:
   \   000061   90....       MOV     DPTR,#zgGP_InCommissioningMode
   \   000064   E0           MOVX    A,@DPTR
   \   000065   6401         XRL     A,#0x1
   \   000067   6003         JZ      $+5
   \   000069   02....       LJMP    ??GP_DataInd_2 & 0xFFFF
   1638            {
   1639              if(gp_DataInd->GPDCmmdID == GP_CHANNEL_REQ_COMMAND_ID)
   \   00006C   EE           MOV     A,R6
   \   00006D   242A         ADD     A,#0x2a
   \   00006F   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000072   E0           MOVX    A,@DPTR
   \   000073   64E3         XRL     A,#0xe3
   \   000075   703C         JNZ     ??GP_DataInd_3
   1640              {
   1641                if(pfnChangeChannelReqForBDB)
   \   000077   90....       MOV     DPTR,#pfnChangeChannelReqForBDB
   \   00007A   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00007D   600C         JZ      ??GP_DataInd_4
   1642                {
   1643                  //Check if we got permission from BDB
   1644                  if(!pfnChangeChannelReqForBDB())
   \   00007F                ; Setup parameters for indirect call
   \   00007F   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   1645                  {
   1646                    //No permisssion
   1647                    return freeMsg;
   1648                  }
   1649                }
   \                     ??CrossCallReturnLabel_95:
   \   000082   12....       LCALL   ?CALL_IND
   \   000085   E9           MOV     A,R1
   \   000086   7003         JNZ     $+5
   \   000088   02....       LJMP    ??GP_DataInd_5 & 0xFFFF
   1650                if(pfnChangeChannelReq)
   \                     ??GP_DataInd_4:
   \   00008B   90....       MOV     DPTR,#pfnChangeChannelReq
   \   00008E   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000091   6009         JZ      ??GP_DataInd_6
   1651                {
   1652                  //Check if we got permission from BDB
   1653                  if(!pfnChangeChannelReq())
   \   000093                ; Setup parameters for indirect call
   \   000093   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   1654                  {
   1655                    //No permisssion
   1656                    return freeMsg;
   1657                  }
   1658                }
   \                     ??CrossCallReturnLabel_96:
   \   000096   12....       LCALL   ?CALL_IND
   \   000099   E9           MOV     A,R1
   \   00009A   6074         JZ      ??GP_DataInd_5
   1659                
   1660                osal_start_timerEx(gp_TaskID,GP_CHANNEL_CONFIGURATION_TIMEOUT,gpBirectionalCommissioningChangeChannelTimeout);
   \                     ??GP_DataInd_6:
   \   00009C                ; Setup parameters for call to function osal_start_timerEx
   \   00009C   90....       MOV     DPTR,#__Constant_1388
   \   00009F   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000A2   7A08         MOV     R2,#0x8
   \   0000A4   7B00         MOV     R3,#0x0
   \   0000A6   90....       MOV     DPTR,#gp_TaskID
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   F9           MOV     R1,A
   \   0000AB   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000AE   7404         MOV     A,#0x4
   \   0000B0   12....       LCALL   ?DEALLOC_XSTACK8
   1661                
   1662              }
   1663              GP_ProccessCommissioningNotification( gp_DataInd );
   \                     ??GP_DataInd_3:
   \   0000B3   85..82       MOV     DPL,?V0
   \   0000B6   85..83       MOV     DPH,?V1
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   F8           MOV     R0,A
   \   0000BB   74E0         MOV     A,#-0x20
   \   0000BD   68           XRL     A,R0
   \   0000BE   600A         JZ      ??GP_DataInd_7
   \   0000C0   74E2         MOV     A,#-0x1e
   \   0000C2   68           XRL     A,R0
   \   0000C3   6005         JZ      ??GP_DataInd_7
   \   0000C5   74E3         MOV     A,#-0x1d
   \   0000C7   68           XRL     A,R0
   \   0000C8   7046         JNZ     ??GP_DataInd_5
   \                     ??GP_DataInd_7:
   \   0000CA                ; Setup parameters for call to function osal_memset
   \   0000CA   7C1E         MOV     R4,#0x1e
   \   0000CC   7D00         MOV     R5,#0x0
   \   0000CE   7900         MOV     R1,#0x0
   \   0000D0   741A         MOV     A,#0x1a
   \   0000D2   12....       LCALL   ?XSTACK_DISP101_8
   \   0000D5   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000D8                ; Setup parameters for call to function zclGp_ManteinanceIndParse
   \   0000D8   741A         MOV     A,#0x1a
   \   0000DA   12....       LCALL   ?XSTACK_DISP102_8
   \   0000DD   EE           MOV     A,R6
   \   0000DE   FA           MOV     R2,A
   \   0000DF   EF           MOV     A,R7
   \   0000E0   FB           MOV     R3,A
   \   0000E1   12....       LCALL   `??zclGp_ManteinanceIndParse::?relay`; Banked call to: zclGp_ManteinanceIndParse
   \   0000E4                ; Setup parameters for call to function zclGp_SendGpCommissioningNotificationCommand
   \   0000E4   741A         MOV     A,#0x1a
   \   0000E6   12....       LCALL   ?XSTACK_DISP101_8
   \   0000E9   12....       LCALL   `??zclGp_SendGpCommissioningNotificationCommand:`; Banked call to: zclGp_SendGpCommissioningNotificationCommand
   \   0000EC   8022         SJMP    ??GP_DataInd_5
   1664            }
   1665            else if ( ( zgGP_InCommissioningMode == FALSE ) )
   \                     ??GP_DataInd_2:
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   701F         JNZ     ??GP_DataInd_5
   1666            {
   1667              GP_ProccessNotification( gp_DataInd );
   \   0000F1                ; Setup parameters for call to function osal_memset
   \   0000F1   7C1A         MOV     R4,#0x1a
   \   0000F3   7D00         MOV     R5,#0x0
   \   0000F5   7900         MOV     R1,#0x0
   \   0000F7   AA..         MOV     R2,?XSP + 0
   \   0000F9   AB..         MOV     R3,?XSP + 1
   \   0000FB   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000FE                ; Setup parameters for call to function zclGp_DataIndParse
   \   0000FE   AC..         MOV     R4,?XSP + 0
   \   000100   AD..         MOV     R5,?XSP + 1
   \   000102   EE           MOV     A,R6
   \   000103   FA           MOV     R2,A
   \   000104   EF           MOV     A,R7
   \   000105   FB           MOV     R3,A
   \   000106   12....       LCALL   `??zclGp_DataIndParse::?relay`; Banked call to: zclGp_DataIndParse
   \   000109                ; Setup parameters for call to function zclGp_SendGpNotificationCommand
   \   000109   AA..         MOV     R2,?XSP + 0
   \   00010B   AB..         MOV     R3,?XSP + 1
   \   00010D   12....       LCALL   `??zclGp_SendGpNotificationCommand::?relay`; Banked call to: zclGp_SendGpNotificationCommand
   1668            }
   1669            
   1670            return freeMsg;
   \                     ??GP_DataInd_5:
   \   000110   7900         MOV     R1,#0x0
   \   000112   7438         MOV     A,#0x38
   \   000114   12....       LCALL   ?DEALLOC_XSTACK8
   \   000117   7F08         MOV     R7,#0x8
   \   000119   02....       LJMP    ?BANKED_LEAVE_XDATA
   1671          }
   1672          
   1673          /*********************************************************************
   1674           * @fn          GP_ProccessCommissioningNotification
   1675           *
   1676           * @brief       General function to process the GP Manteinance Indication in operational mode
   1677           *
   1678           * @param       gp_DataInd
   1679           *
   1680           * @return      none
   1681           */
   1682          static void GP_ProccessCommissioningNotification(gp_DataInd_t *gp_DataInd)
   1683          {
   1684            gpCommissioningNotificationCmd_t gpNotification;
   1685            
   1686            if ( ( gp_DataInd->GPDCmmdID == GP_COMMISSIONING_COMMAND_ID ) || ( gp_DataInd->GPDCmmdID == GP_SUCCESS_COMMAND_ID ) ||
   1687                 ( gp_DataInd->GPDCmmdID == GP_CHANNEL_REQ_COMMAND_ID ) )
   1688            {
   1689            
   1690              osal_memset( &gpNotification, 0, sizeof ( gpCommissioningNotificationCmd_t ) );
   1691              zclGp_ManteinanceIndParse( gp_DataInd, &gpNotification );
   1692            
   1693              zclGp_SendGpCommissioningNotificationCommand ( &gpNotification );
   1694            }
   1695          }
   1696          
   1697          /*********************************************************************
   1698           * @fn          GP_ProccessNotification
   1699           *
   1700           * @brief       General function to process the GP Data Indication in operational mode
   1701           *
   1702           * @param       gp_DataInd
   1703           *
   1704           * @return      none
   1705           */
   1706          static void GP_ProccessNotification(gp_DataInd_t *gp_DataInd)
   1707          {
   1708            gpNotificationCmd_t gpNotification;
   1709            
   1710            osal_memset( &gpNotification, 0, sizeof ( gpNotificationCmd_t ) );
   1711            zclGp_DataIndParse( gp_DataInd, &gpNotification );
   1712            
   1713            zclGp_SendGpNotificationCommand ( &gpNotification );
   1714          }
   1715          
   1716          /*********************************************************************
   1717           * @fn          GP_SecReq
   1718           *
   1719           * @brief       Primitive from dGP stub to GP EndPoint notify about a protected GPDF
   1720           *
   1721           * @param       gp_SecReq 
   1722           *
   1723           * @return      none
   1724           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1725          uint8 GP_SecReq(gp_SecReq_t *gp_SecReq)
   \                     GP_SecReq:
   1726          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   1727            gp_SecRsp_t *gp_SecRsp = NULL;
   1728            uint8 status;
   1729          
   1730            gp_SecRsp = (gp_SecRsp_t*)osal_msg_allocate(sizeof(gp_SecRsp_t));
   \   00000E                ; Setup parameters for call to function osal_msg_allocate
   \   00000E   7A24         MOV     R2,#0x24
   \   000010   7B00         MOV     R3,#0x0
   \   000012   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000015   8A..         MOV     ?V2,R2
   \   000017   8B..         MOV     ?V3,R3
   \   000019   AE..         MOV     R6,?V2
   \   00001B   AF..         MOV     R7,?V3
   1731          
   1732            //No mem, then do not release the msg, process later
   1733            if(gp_SecRsp == NULL)
   \   00001D   EE           MOV     A,R6
   \   00001E   4F           ORL     A,R7
   \   00001F   7005         JNZ     ??GP_SecReq_0
   1734            {
   1735              return FALSE;
   \   000021   7900         MOV     R1,#0x0
   \   000023   02....       LJMP    ??GP_SecReq_1 & 0xFFFF
   1736            }
   1737            
   1738            gp_SecRsp->hdr.event = GP_SEC_RSP;
   \                     ??GP_SecReq_0:
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   7408         MOV     A,#0x8
   \   00002C   F0           MOVX    @DPTR,A
   1739            gp_SecRsp->hdr.status = ZSuccess;
   \   00002D   A3           INC     DPTR
   \   00002E   E4           CLR     A
   \   00002F   F0           MOVX    @DPTR,A
   1740          
   1741            gp_SecRsp->dGPStubHandle = gp_SecReq->dGPStubHandle;
   \   000030   E5..         MOV     A,?V0
   \   000032   2412         ADD     A,#0x12
   \   000034   F5..         MOV     ?V10,A
   \   000036   E4           CLR     A
   \   000037   35..         ADDC    A,?V1
   \   000039   F5..         MOV     ?V11,A
   \   00003B   85..82       MOV     DPL,?V10
   \   00003E   F583         MOV     DPH,A
   \   000040   E0           MOVX    A,@DPTR
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   F0           MOVX    @DPTR,A
   1742            gp_SecRsp->EndPoint = gp_SecReq->EndPoint;
   \   000049   E5..         MOV     A,?V0
   \   00004B   240B         ADD     A,#0xb
   \   00004D   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000050   E0           MOVX    A,@DPTR
   \   000051   C0E0         PUSH    A
   \   000053   EE           MOV     A,R6
   \   000054   240D         ADD     A,#0xd
   \   000056   F582         MOV     DPL,A
   \   000058   E4           CLR     A
   \   000059   3F           ADDC    A,R7
   \   00005A   F583         MOV     DPH,A
   \   00005C   D0E0         POP     A
   \   00005E   F0           MOVX    @DPTR,A
   1743          
   1744            osal_memcpy(&gp_SecRsp->gp_SecData,&gp_SecReq->gp_SecData, sizeof(gp_SecData_t));
   \   00005F   E5..         MOV     A,?V0
   \   000061   240C         ADD     A,#0xc
   \   000063   F5..         MOV     ?V8,A
   \   000065   E4           CLR     A
   \   000066   35..         ADDC    A,?V1
   \   000068   F5..         MOV     ?V9,A
   \   00006A                ; Setup parameters for call to function osal_memcpy
   \   00006A   85....       MOV     ?V4,?V8
   \   00006D   F5..         MOV     ?V5,A
   \   00006F   75..00       MOV     ?V6,#0x0
   \   000072   78..         MOV     R0,#?V4
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000077   7C06         MOV     R4,#0x6
   \   000079   7D00         MOV     R5,#0x0
   \   00007B   EE           MOV     A,R6
   \   00007C   240E         ADD     A,#0xe
   \   00007E   FA           MOV     R2,A
   \   00007F   E4           CLR     A
   \   000080   3F           ADDC    A,R7
   \   000081   FB           MOV     R3,A
   \   000082   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000085   7403         MOV     A,#0x3
   \   000087   12....       LCALL   ?DEALLOC_XSTACK8
   1745            osal_memcpy(&gp_SecRsp->gpd_ID,&gp_SecReq->gpd_ID, sizeof(gpd_ID_t));
   \   00008A                ; Setup parameters for call to function osal_memcpy
   \   00008A   85..82       MOV     DPL,?V0
   \   00008D   85..83       MOV     DPH,?V1
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A982         MOV     R1,DPL
   \   000094   AA83         MOV     R2,DPH
   \   000096   89..         MOV     ?V4,R1
   \   000098   8A..         MOV     ?V5,R2
   \   00009A   78..         MOV     R0,#?V4
   \   00009C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00009F   7C09         MOV     R4,#0x9
   \   0000A1   7D00         MOV     R5,#0x0
   \   0000A3   EE           MOV     A,R6
   \   0000A4   2404         ADD     A,#0x4
   \   0000A6   FA           MOV     R2,A
   \   0000A7   E4           CLR     A
   \   0000A8   3F           ADDC    A,R7
   \   0000A9   FB           MOV     R3,A
   \   0000AA   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000AD   7403         MOV     A,#0x3
   \   0000AF   12....       LCALL   ?DEALLOC_XSTACK8
   1746          
   1747            gp_SecRsp->Status = GP_SEC_RSP_DROP_FRAME;
   \   0000B2   EE           MOV     A,R6
   \   0000B3   2402         ADD     A,#0x2
   \   0000B5   F5..         MOV     ?V14,A
   \   0000B7   E4           CLR     A
   \   0000B8   3F           ADDC    A,R7
   \   0000B9   F5..         MOV     ?V15,A
   \   0000BB   85..82       MOV     DPL,?V14
   \   0000BE   F583         MOV     DPH,A
   \   0000C0   E4           CLR     A
   \   0000C1   F0           MOVX    @DPTR,A
   1748           
   1749            //Find duplicates A.3.6.1.2 Duplicate filtering
   1750            if(NULL == gp_DataIndFindDuplicate(gp_SecReq->dGPStubHandle, gp_SecReq->gp_SecData.GPDFSecLvl))
   \   0000C2   85..82       MOV     DPL,?V8
   \   0000C5   85..83       MOV     DPH,?V9
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   F5..         MOV     ?V12,A
   \   0000CB                ; Setup parameters for call to function gp_DataIndGet
   \   0000CB   85..82       MOV     DPL,?V10
   \   0000CE   85..83       MOV     DPH,?V11
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   F9           MOV     R1,A
   \   0000D3   12....       LCALL   `??gp_DataIndGet::?relay`; Banked call to: gp_DataIndGet
   \   0000D6   EA           MOV     A,R2
   \   0000D7   4B           ORL     A,R3
   \   0000D8   7003         JNZ     $+5
   \   0000DA   02....       LJMP    ??GP_SecReq_2 & 0xFFFF
   \   0000DD   90....       MOV     DPTR,#gp_DataIndList
   \   0000E0   803C         SJMP    ??GP_SecReq_3
   \                     ??GP_SecReq_4:
   \   0000E2   E5..         MOV     A,?V2
   \   0000E4   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0000E7   35..         ADDC    A,?V3
   \   0000E9   F583         MOV     DPH,A
   \   0000EB   78..         MOV     R0,#?V4
   \   0000ED   12....       LCALL   ?L_MOV_X
   \   0000F0   EA           MOV     A,R2
   \   0000F1   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0000F4   3B           ADDC    A,R3
   \   0000F5   F583         MOV     DPH,A
   \   0000F7   78..         MOV     R0,#?V4
   \   0000F9   12....       LCALL   ?L_EQ_X
   \   0000FC   7017         JNZ     ??GP_SecReq_5
   \                     ??GP_SecReq_6:
   \   0000FE   8A82         MOV     DPL,R2
   \   000100   8B83         MOV     DPH,R3
   \   000102   A3           INC     DPTR
   \   000103   A3           INC     DPTR
   \   000104   E0           MOVX    A,@DPTR
   \   000105   F8           MOV     R0,A
   \   000106   85..82       MOV     DPL,?V2
   \   000109   85..83       MOV     DPH,?V3
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   68           XRL     A,R0
   \   000110   6003         JZ      $+5
   \   000112   02....       LJMP    ??GP_SecReq_7 & 0xFFFF
   \                     ??GP_SecReq_5:
   \   000115   85..82       MOV     DPL,?V2
   \   000118   85..83       MOV     DPH,?V3
   \   00011B   A3           INC     DPTR
   \   00011C   A3           INC     DPTR
   \   00011D   A3           INC     DPTR
   \                     ??GP_SecReq_3:
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   F5..         MOV     ?V2,A
   \   000121   A3           INC     DPTR
   \   000122   E0           MOVX    A,@DPTR
   \   000123   F5..         MOV     ?V3,A
   \   000125   E5..         MOV     A,?V2
   \   000127   45..         ORL     A,?V3
   \   000129   6042         JZ      ??GP_SecReq_8
   \   00012B   E5..         MOV     A,?V12
   \   00012D   70B3         JNZ     ??GP_SecReq_4
   \   00012F   EA           MOV     A,R2
   \   000130   2410         ADD     A,#0x10
   \   000132   F582         MOV     DPL,A
   \   000134   E4           CLR     A
   \   000135   3B           ADDC    A,R3
   \   000136   F583         MOV     DPH,A
   \   000138   E0           MOVX    A,@DPTR
   \   000139   F8           MOV     R0,A
   \   00013A   E5..         MOV     A,?V2
   \   00013C   2410         ADD     A,#0x10
   \   00013E   F582         MOV     DPL,A
   \   000140   E4           CLR     A
   \   000141   35..         ADDC    A,?V3
   \   000143   F583         MOV     DPH,A
   \   000145   E0           MOVX    A,@DPTR
   \   000146   68           XRL     A,R0
   \   000147   70CC         JNZ     ??GP_SecReq_5
   \   000149   EA           MOV     A,R2
   \   00014A   241C         ADD     A,#0x1c
   \   00014C   F582         MOV     DPL,A
   \   00014E   E4           CLR     A
   \   00014F   3B           ADDC    A,R3
   \   000150   F583         MOV     DPH,A
   \   000152   E0           MOVX    A,@DPTR
   \   000153   F8           MOV     R0,A
   \   000154   E5..         MOV     A,?V2
   \   000156   241C         ADD     A,#0x1c
   \   000158   F582         MOV     DPL,A
   \   00015A   E4           CLR     A
   \   00015B   35..         ADDC    A,?V3
   \   00015D   F583         MOV     DPH,A
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   68           XRL     A,R0
   \   000161   70B2         JNZ     ??GP_SecReq_5
   \   000163   8099         SJMP    ??GP_SecReq_6
   \                     ??GP_SecReq_2:
   \   000165   EE           MOV     A,R6
   \   000166   45..         ORL     A,?V3
   \   000168   6003         JZ      $+5
   \   00016A   02....       LJMP    ??GP_SecReq_7 & 0xFFFF
   1751            {
   1752              if(gp_SecReq->gp_SecData.GPDFSecLvl)
   \                     ??GP_SecReq_8:
   \   00016D   85..82       MOV     DPL,?V8
   \   000170   85..83       MOV     DPH,?V9
   \   000173   E0           MOVX    A,@DPTR
   \   000174   7003         JNZ     $+5
   \   000176   02....       LJMP    ??GP_SecReq_9 & 0xFFFF
   1753              {
   1754                gp_DataInd_t* temp;
   1755                uint8   KeyType;
   1756                uint8   Key[SEC_KEY_LEN];
   1757                temp = gp_DataIndGet(gp_SecReq->dGPStubHandle);
   \   000179                ; Setup parameters for call to function gp_DataIndGet
   \   000179   85..82       MOV     DPL,?V10
   \   00017C   85..83       MOV     DPH,?V11
   \   00017F   E0           MOVX    A,@DPTR
   \   000180   F9           MOV     R1,A
   \   000181   12....       LCALL   `??gp_DataIndGet::?relay`; Banked call to: gp_DataIndGet
   1758          
   1759                //Section A.3.7.3.3
   1760                status = gp_SecurityOperationProxy(temp,&KeyType,Key);
   \   000184                ; Setup parameters for call to function gp_SecurityOperationProxy
   \   000184   7401         MOV     A,#0x1
   \   000186   12....       LCALL   ?XSTACK_DISP100_8
   \   000189   88..         MOV     ?V2,R0
   \   00018B   89..         MOV     ?V3,R1
   \   00018D   78..         MOV     R0,#?V2
   \   00018F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000192   7402         MOV     A,#0x2
   \   000194   12....       LCALL   ?XSTACK_DISP102_8
   \   000197   12....       LCALL   `??gp_SecurityOperationProxy::?relay`; Banked call to: gp_SecurityOperationProxy
   \   00019A   7402         MOV     A,#0x2
   \   00019C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00019F   E9           MOV     A,R1
   \   0001A0   F5..         MOV     ?V2,A
   1761          
   1762                switch(status)
   \   0001A2   6065         JZ      ??GP_SecReq_7
   \   0001A4   14           DEC     A
   \   0001A5   600B         JZ      ??GP_SecReq_10
   \   0001A7   14           DEC     A
   \   0001A8   6055         JZ      ??GP_SecReq_9
   \   0001AA   14           DEC     A
   \   0001AB   6005         JZ      ??GP_SecReq_10
   \   0001AD   14           DEC     A
   \   0001AE   6059         JZ      ??GP_SecReq_7
   \   0001B0   805F         SJMP    ??GP_SecReq_11
   1763                {
   1764                  case GP_SEC_RSP_ERROR:  //This should not happen
   1765                  case GP_SEC_RSP_DROP_FRAME:
   1766                    gp_SecRsp->Status = GP_SEC_RSP_DROP_FRAME;
   1767                  break;
   1768                  
   1769                  case GP_SEC_RSP_PASS_UNPROCESSED:  
   1770                    gp_SecRsp->Status = GP_SEC_RSP_PASS_UNPROCESSED;
   1771                  break;
   1772                  
   1773                  case GP_SEC_RSP_MATCH:
   1774                  case GP_SEC_RSP_TX_THEN_DROP:
   1775                    if(GP_RecoveryKey(gp_SecReq->gp_SecData.GPDFKeyType,KeyType,status,Key) == GP_SEC_RSP_DROP_FRAME)
   \                     ??GP_SecReq_10:
   \   0001B2                ; Setup parameters for call to function GP_RecoveryKey
   \   0001B2   7401         MOV     A,#0x1
   \   0001B4   12....       LCALL   ?XSTACK_DISP102_8
   \   0001B7   AB..         MOV     R3,?V2
   \   0001B9   85..82       MOV     DPL,?XSP + 0
   \   0001BC   85..83       MOV     DPH,?XSP + 1
   \   0001BF   E0           MOVX    A,@DPTR
   \   0001C0   FA           MOV     R2,A
   \   0001C1   E5..         MOV     A,?V0
   \   0001C3   240D         ADD     A,#0xd
   \   0001C5   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0001C8   E0           MOVX    A,@DPTR
   \   0001C9   F9           MOV     R1,A
   \   0001CA   12....       LCALL   `??GP_RecoveryKey::?relay`; Banked call to: GP_RecoveryKey
   \   0001CD   E9           MOV     A,R1
   \   0001CE   6039         JZ      ??GP_SecReq_7
   1776                    {
   1777                      gp_SecRsp->Status = GP_SEC_RSP_DROP_FRAME;
   1778                    }
   1779                    else
   1780                    {
   1781                      gp_SecRsp->Status = status;
   \   0001D0   85..82       MOV     DPL,?V14
   \   0001D3   85..83       MOV     DPH,?V15
   \   0001D6   E5..         MOV     A,?V2
   \   0001D8   F0           MOVX    @DPTR,A
   1782                      osal_memcpy(gp_SecRsp->GPDKey,Key,SEC_KEY_LEN);
   \   0001D9                ; Setup parameters for call to function osal_memcpy
   \   0001D9   7401         MOV     A,#0x1
   \   0001DB   12....       LCALL   ?XSTACK_DISP100_8
   \   0001DE   88..         MOV     ?V0,R0
   \   0001E0   89..         MOV     ?V1,R1
   \   0001E2   75..00       MOV     ?V2,#0x0
   \   0001E5   78..         MOV     R0,#?V0
   \   0001E7   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001EA   7C10         MOV     R4,#0x10
   \   0001EC   7D00         MOV     R5,#0x0
   \   0001EE   EE           MOV     A,R6
   \   0001EF   2414         ADD     A,#0x14
   \   0001F1   FA           MOV     R2,A
   \   0001F2   E4           CLR     A
   \   0001F3   3F           ADDC    A,R7
   \   0001F4   FB           MOV     R3,A
   \   0001F5   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001F8   7403         MOV     A,#0x3
   \   0001FA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001FD   8012         SJMP    ??GP_SecReq_11
   1783                    }
   1784                  break;
   1785                }
   1786              }
   1787              //No security
   1788              else
   1789              {
   1790                gp_SecRsp->Status = GP_SEC_RSP_PASS_UNPROCESSED;
   \                     ??GP_SecReq_9:
   \   0001FF   85..82       MOV     DPL,?V14
   \   000202   85..83       MOV     DPH,?V15
   \   000205   7402         MOV     A,#0x2
   \   000207   8007         SJMP    ??GP_SecReq_12
   1791              }
   1792            }
   1793          
   1794            //Found duplicate, then drop it
   1795            else
   1796            {
   1797              gp_SecRsp->Status = GP_SEC_RSP_DROP_FRAME;
   \                     ??GP_SecReq_7:
   \   000209   85..82       MOV     DPL,?V14
   \   00020C   85..83       MOV     DPH,?V15
   \   00020F   E4           CLR     A
   \                     ??GP_SecReq_12:
   \   000210   F0           MOVX    @DPTR,A
   1798            }
   1799            
   1800            osal_msg_send(gp_TaskID,(uint8*)gp_SecRsp);
   \                     ??GP_SecReq_11:
   \   000211                ; Setup parameters for call to function osal_msg_send
   \   000211   EE           MOV     A,R6
   \   000212   FA           MOV     R2,A
   \   000213   EF           MOV     A,R7
   \   000214   FB           MOV     R3,A
   \   000215   90....       MOV     DPTR,#gp_TaskID
   \   000218   E0           MOVX    A,@DPTR
   \   000219   F9           MOV     R1,A
   \   00021A   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   1801            return TRUE;
   \   00021D   7901         MOV     R1,#0x1
   \                     ??GP_SecReq_1:
   \   00021F   7411         MOV     A,#0x11
   \   000221   12....       LCALL   ?DEALLOC_XSTACK8
   \   000224   7F10         MOV     R7,#0x10
   \   000226   02....       LJMP    ?BANKED_LEAVE_XDATA
   1802          }
   1803          
   1804          /*********************************************************************
   1805           * @fn          GP_RecoveryKey
   1806           *
   1807           * @brief       Procedure to retrive the key to be used to decrypt the GPDF
   1808           *
   1809           * @param       GPDFKeyType   KeyType from the GPDF
   1810           * @param       KeyType       Key type in the Proxy table entry for this GPD
   1811           * @param       Status        Previous status to search key (MATCH, TX_THEN_DROP)
   1812           * @param       Key[out]      Key to be used
   1813           *                       
   1814           * @return      Status
   1815           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1816          uint8 GP_RecoveryKey(uint8 GPDFKeyType,uint8 KeyType, uint8 status, uint8 *Key)
   \                     GP_RecoveryKey:
   1817          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EC           MOV     A,R4
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   ED           MOV     A,R5
   \   000013   F0           MOVX    @DPTR,A
   \   000014   EA           MOV     A,R2
   \   000015   FF           MOV     R7,A
   \   000016   EB           MOV     A,R3
   \   000017   FE           MOV     R6,A
   1818            if(GPDFKeyType)
   \   000018   E9           MOV     A,R1
   \   000019   6065         JZ      ??GP_RecoveryKey_0
   1819            {
   1820              uint8 TempKey[SEC_KEY_LEN] = {0xFF};
   \   00001B   90....       MOV     DPTR,#`?<Constant {255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,`
   \   00001E   7405         MOV     A,#0x5
   \   000020   12....       LCALL   ?XSTACK_DISP102_8
   \   000023   7410         MOV     A,#0x10
   \   000025   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1821              if(KeyType == GP_SECURITY_KEY_TYPE_OUT_OF_BOX_GPD_KEY)
   \   000028   7405         MOV     A,#0x5
   \   00002A   12....       LCALL   ?XSTACK_DISP100_8
   \   00002D   88..         MOV     ?V4,R0
   \   00002F   89..         MOV     ?V5,R1
   \   000031   75..00       MOV     ?V6,#0x0
   \   000034   7401         MOV     A,#0x1
   \   000036   12....       LCALL   ?XSTACK_DISP100_8
   \   000039   88..         MOV     ?V0,R0
   \   00003B   89..         MOV     ?V1,R1
   \   00003D   A9..         MOV     R1,?V0
   \   00003F   AA..         MOV     R2,?V1
   \   000041   7B00         MOV     R3,#0x0
   \   000043   7404         MOV     A,#0x4
   \   000045   6F           XRL     A,R7
   \   000046   701B         JNZ     ??GP_RecoveryKey_1
   1822              {
   1823                //Is the key of the Proxy table entry empty?
   1824                if(osal_memcmp(&Key,&TempKey,SEC_KEY_LEN))
   \   000048                ; Setup parameters for call to function osal_memcmp
   \   000048   78..         MOV     R0,#?V4
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00004D   7C10         MOV     R4,#0x10
   \   00004F   7D00         MOV     R5,#0x0
   \   000051   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000054   7403         MOV     A,#0x3
   \   000056   12....       LCALL   ?DEALLOC_XSTACK8
   \   000059   E9           MOV     A,R1
   \   00005A   6020         JZ      ??GP_RecoveryKey_2
   1825                {
   1826                  return GP_SEC_RSP_DROP_FRAME;
   1827                }          
   1828                else
   1829                {
   1830                  //There is a key, then use it
   1831                  return status;
   1832                }
   1833              }
   1834              else if(KeyType == GP_SECURITY_KEY_TYPE_DERIVED_IND_GPD_KEY)
   1835              {
   1836                //Is the key of the Proxy table entry empty?
   1837                if(osal_memcmp(&Key,&TempKey,SEC_KEY_LEN))
   1838                {
   1839                  return GP_SEC_RSP_DROP_FRAME;
   1840                }  
   1841                //There is a key, then use it. Derived keys are provided by the Sink 
   1842                //device at paring time according to A.3.7.1.2.2
   1843                return status;
   1844              }
   1845              else
   1846              {
   1847                return GP_SEC_RSP_DROP_FRAME;
   1848              }
   1849            }
   1850            else
   1851            {
   1852              uint8  gpSharedSecKeyType;
   1853              uint16 AttLen;
   1854              uint8 TempKey[SEC_KEY_LEN] = {0xFF};
   1855          
   1856              //Get the SharedKeyType Attribute
   1857              zcl_ReadAttrData(GREEN_POWER_INTERNAL_ENDPOINT,ZCL_CLUSTER_ID_GREEN_POWER,ATTRID_GP_SHARED_SEC_KEY_TYPE,&gpSharedSecKeyType,&AttLen);
   1858          
   1859              if(KeyType == gpSharedSecKeyType)
   1860              {
   1861                if(!osal_memcmp(TempKey,zgpSharedKey,SEC_KEY_LEN))
   1862                {
   1863                  //Use key shared key
   1864                  osal_memcpy(Key,zgpSharedKey,SEC_KEY_LEN);
   1865                  return status;
   1866                }
   1867              }
   1868              if(KeyType == GP_SECURITY_KEY_TYPE_ZIGBEE_NWK_KEY)
   1869              {
   1870                ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY,Key);
   1871              }
   1872              //There is a key, then use it. Derived keys are provided by the Sink 
   1873              //device at paring time according to A.3.7.1.2.2
   1874              else
   1875              {
   1876                return GP_SEC_RSP_DROP_FRAME;
   \                     ??GP_RecoveryKey_3:
   \   00005C   7900         MOV     R1,#0x0
   \                     ??GP_RecoveryKey_4:
   \   00005E   7415         MOV     A,#0x15
   1877              }
   \   000060   02....       LJMP    ?Subroutine1 & 0xFFFF
   \                     ??GP_RecoveryKey_1:
   \   000063   7407         MOV     A,#0x7
   \   000065   6F           XRL     A,R7
   \   000066   70F4         JNZ     ??GP_RecoveryKey_3
   \   000068                ; Setup parameters for call to function osal_memcmp
   \   000068   78..         MOV     R0,#?V4
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006D   7C10         MOV     R4,#0x10
   \   00006F   7D00         MOV     R5,#0x0
   \   000071   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000074   7403         MOV     A,#0x3
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
   \   000079   E9           MOV     A,R1
   \   00007A   70E0         JNZ     ??GP_RecoveryKey_3
   \                     ??GP_RecoveryKey_2:
   \   00007C   EE           MOV     A,R6
   \   00007D   F9           MOV     R1,A
   \   00007E   80DE         SJMP    ??GP_RecoveryKey_4
   \                     ??GP_RecoveryKey_0:
   \   000080   90....       MOV     DPTR,#`?<Constant {255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,_1`
   \   000083   7405         MOV     A,#0x5
   \   000085   12....       LCALL   ?XSTACK_DISP102_8
   \   000088   7410         MOV     A,#0x10
   \   00008A   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   00008D                ; Setup parameters for call to function zcl_ReadAttrData
   \   00008D   7403         MOV     A,#0x3
   \   00008F   12....       LCALL   ?XSTACK_DISP100_8
   \   000092   88..         MOV     ?V0,R0
   \   000094   89..         MOV     ?V1,R1
   \   000096   78..         MOV     R0,#?V0
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009B   7402         MOV     A,#0x2
   \   00009D   12....       LCALL   ?XSTACK_DISP100_8
   \   0000A0   88..         MOV     ?V0,R0
   \   0000A2   89..         MOV     ?V1,R1
   \   0000A4   78..         MOV     R0,#?V0
   \   0000A6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A9   7C20         MOV     R4,#0x20
   \   0000AB   7D00         MOV     R5,#0x0
   \   0000AD   7A21         MOV     R2,#0x21
   \   0000AF   7B00         MOV     R3,#0x0
   \   0000B1   79F2         MOV     R1,#-0xe
   \   0000B3   12....       LCALL   `??zcl_ReadAttrData::?relay`; Banked call to: zcl_ReadAttrData
   \   0000B6   7404         MOV     A,#0x4
   \   0000B8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BB   85..82       MOV     DPL,?XSP + 0
   \   0000BE   85..83       MOV     DPH,?XSP + 1
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   6F           XRL     A,R7
   \   0000C3   7044         JNZ     ??GP_RecoveryKey_5
   \   0000C5   75....       MOV     ?V0,#zgpSharedKey & 0xff
   \   0000C8   75....       MOV     ?V1,#(zgpSharedKey >> 8) & 0xff
   \   0000CB   75..80       MOV     ?V2,#-0x80
   \   0000CE                ; Setup parameters for call to function osal_memcmp
   \   0000CE   78..         MOV     R0,#?V0
   \   0000D0   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000D3   7C10         MOV     R4,#0x10
   \   0000D5   7D00         MOV     R5,#0x0
   \   0000D7   7408         MOV     A,#0x8
   \   0000D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DC   A982         MOV     R1,DPL
   \   0000DE   AA83         MOV     R2,DPH
   \   0000E0   7B00         MOV     R3,#0x0
   \   0000E2   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000E5   7403         MOV     A,#0x3
   \   0000E7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EA   E9           MOV     A,R1
   \   0000EB   701C         JNZ     ??GP_RecoveryKey_5
   \   0000ED                ; Setup parameters for call to function osal_memcpy
   \   0000ED   78..         MOV     R0,#?V0
   \   0000EF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000F2   7C10         MOV     R4,#0x10
   \   0000F4   7D00         MOV     R5,#0x0
   \   0000F6   7404         MOV     A,#0x4
   \   0000F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FB   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0000FE   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000101   7403         MOV     A,#0x3
   \   000103   12....       LCALL   ?DEALLOC_XSTACK8
   \   000106   02....       LJMP    ??GP_RecoveryKey_2 & 0xFFFF
   \                     ??GP_RecoveryKey_5:
   \   000109   7401         MOV     A,#0x1
   \   00010B   6F           XRL     A,R7
   \   00010C   6003         JZ      $+5
   \   00010E   02....       LJMP    ??GP_RecoveryKey_3 & 0xFFFF
   \   000111                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   000111   7401         MOV     A,#0x1
   \   000113   12....       LCALL   ?XSTACK_DISP0_8
   \   000116   E0           MOVX    A,@DPTR
   \   000117   FC           MOV     R4,A
   \   000118   A3           INC     DPTR
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   FD           MOV     R5,A
   \   00011B   7A62         MOV     R2,#0x62
   \   00011D   7B00         MOV     R3,#0x0
   \   00011F   12....       LCALL   `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
   \   000122   02....       LJMP    ??GP_RecoveryKey_2 & 0xFFFF
   1878            }
   1879            return status;
   1880          }
   1881          
   1882          
   1883          gp_DataInd_t* gp_DataIndFindDuplicate(uint8 handle, uint8 secLvl)
   1884          {
   1885            gp_DataInd_t* temp;
   1886            gp_DataInd_t* tempList;
   1887            temp = gp_DataIndGet(handle);
   1888            
   1889            if(temp != NULL)
   1890            {
   1891              tempList = gp_DataIndList;
   1892              
   1893              while(tempList != NULL)
   1894              {
   1895                //search for MAC seq num
   1896                if(secLvl == 0)
   1897                {
   1898                  if((temp->SeqNumber == tempList->SeqNumber) && (temp->appID == tempList->appID)&&
   1899                     (temp->SecReqHandling.dGPStubHandle != tempList->SecReqHandling.dGPStubHandle))
   1900                  {
   1901                    break;
   1902                  }
   1903                }
   1904                //Other secLevels uses SecFrameCounter
   1905                else
   1906                {
   1907                  if((temp->GPDSecFrameCounter == tempList->GPDSecFrameCounter) && 
   1908                     (temp->SecReqHandling.dGPStubHandle != tempList->SecReqHandling.dGPStubHandle))
   1909                  {
   1910                    
   1911                    break;
   1912                  }
   1913                }
   1914                tempList = tempList->SecReqHandling.next;
   1915              }
   1916            }
   1917            return tempList;
   1918          }
   1919           
   1920          /*********************************************************************
   1921           * @fn          GP_DataCnf
   1922           *
   1923           * @brief       Primitive to notify GP EndPoint the status of a previews DataReq
   1924           *
   1925           * @param       gp_DataCnf
   1926           *
   1927           * @return      none
   1928           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1929          void GP_DataCnf(gp_DataCnf_t *gp_DataCnf)
   \                     GP_DataCnf:
   1930          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1931            //Current spec does not mandates to do anything with this.
   1932            switch(gp_DataCnf->status)
   1933            {
   1934              case GP_DATA_CNF_TX_QUEUE_FULL:
   1935              case GP_DATA_CNF_ENTRY_REPLACED:
   1936              case GP_DATA_CNF_ENTRY_ADDED:
   1937              case GP_DATA_CNF_ENTRY_EXPIRED:
   1938              case GP_DATA_CNF_ENTRY_REMOVED:
   1939              case GP_DATA_CNF_GPDF_SENDING_FINALIZED:
   1940              break;
   1941            }  
   1942          }
   \   000000   02....       LJMP    ?BRET
   1943          
   1944           /*********************************************************************
   1945           * PRIVATE FUNCTIONS
   1946           *********************************************************************/
   1947          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1948          void gp_RegisterCommissioningModeCB(gpCommissioningMode_t gpCommissioningMode)
   \                     gp_RegisterCommissioningModeCB:
   1949          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1950            if(gpCommissioningMode)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   6008         JZ      ??gp_RegisterCommissioningModeCB_0
   1951            {
   1952               pfnCommissioningMode = gpCommissioningMode;
   \   000008   90....       MOV     DPTR,#pfnCommissioningMode
   \   00000B   EA           MOV     A,R2
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   EB           MOV     A,R3
   \   00000F   F0           MOVX    @DPTR,A
   1953            }
   1954          }
   \                     ??gp_RegisterCommissioningModeCB_0:
   \   000010                REQUIRE ?Subroutine0
   \   000010                ; // Fall through to label ?Subroutine0
   1955          
   1956          /*********************************************************************
   1957           * @fn          gp_RegisterGPChangeChannelReqCB
   1958           *
   1959           * @brief       Register a callback in which the application will be notified about a change
   1960           *              of channel for at most gpBirectionalCommissioningChangeChannelTimeout ms
   1961           *              to perform GP bidirectional commissioning in the channel parameter.
   1962           *
   1963           * @param       gpChangeChannelReq
   1964           *
   1965           * @return      none
   1966           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1967          void gp_RegisterGPChangeChannelReqCB(gpChangeChannelReq_t gpChangeChannelReq)
   \                     gp_RegisterGPChangeChannelReqCB:
   1968          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1969            if(gpChangeChannelReq)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   6008         JZ      ??gp_RegisterGPChangeChannelReqCB_0
   1970            {
   1971              pfnChangeChannelReq = gpChangeChannelReq;
   \   000008   90....       MOV     DPTR,#pfnChangeChannelReq
   \   00000B   EA           MOV     A,R2
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   EB           MOV     A,R3
   \   00000F   F0           MOVX    @DPTR,A
   1972            }
   1973          }
   \                     ??gp_RegisterGPChangeChannelReqCB_0:
   \   000010   80..         SJMP    ?Subroutine0
   1974          
   1975          /*********************************************************************
   1976           * @fn          gp_RegisterGPChangeChannelReqForBDBCB
   1977           *
   1978           * @brief       Register a callback in which the bdb will be notified about a change
   1979           *              of channel for at most gpBirectionalCommissioningChangeChannelTimeout ms
   1980           *              to perform GP bidirectional commissioning in the channel parameter.
   1981           *
   1982           * @param       gpChangeChannelReq
   1983           *
   1984           * @return      none
   1985           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1986          void gp_RegisterGPChangeChannelReqForBDBCB(gpChangeChannelReq_t gpChangeChannelReq)
   \                     gp_RegisterGPChangeChannelReqForBDBCB:
   1987          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1988            if(gpChangeChannelReq)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   6008         JZ      ??gp_RegisterGPChangeChannelReqForBDBCB_0
   1989            {
   1990              pfnChangeChannelReqForBDB = gpChangeChannelReq;
   \   000008   90....       MOV     DPTR,#pfnChangeChannelReqForBDB
   \   00000B   EA           MOV     A,R2
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   EB           MOV     A,R3
   \   00000F   F0           MOVX    @DPTR,A
   1991            }
   1992          }
   \                     ??gp_RegisterGPChangeChannelReqForBDBCB_0:
   \   000010   80..         SJMP    ?Subroutine0
   1993          
   1994          
   1995          
   1996          
   1997          /*********************************************************************
   1998           * @fn          gp_returnOperationalChannel
   1999           *
   2000           * @brief       Return to the operational channel after bidirectional commissioning
   2001           *
   2002           * @param       none
   2003           *
   2004           * @return      none
   2005           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2006          void gp_returnOperationalChannel(void)
   \                     gp_returnOperationalChannel:
   2007          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2008            gp_DataReq_t gp_DataReq;
   2009            _NIB.nwkLogicalChannel = gp_tempLogicalChannel;
   \   00000A   90....       MOV     DPTR,#gp_tempLogicalChannel
   \   00000D   12....       LCALL   ?Subroutine14 & 0xFFFF
   2010            ZMacSetReq( ZMacChannel, &(_NIB.nwkLogicalChannel) );
   \                     ??CrossCallReturnLabel_9:
   \   000010   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   2011            osal_stop_timerEx(gp_TaskID,GP_CHANNEL_CONFIGURATION_TIMEOUT);
   \   000013                ; Setup parameters for call to function osal_stop_timerEx
   \   000013   7A08         MOV     R2,#0x8
   \   000015   7B00         MOV     R3,#0x0
   \   000017   90....       MOV     DPTR,#gp_TaskID
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   2012            
   2013            gp_DataReq.Action = 0;
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   E4           CLR     A
   \   000025   F0           MOVX    @DPTR,A
   2014            gp_DataReq.gpd_ID.AppID = GP_APP_ID_DEFAULT;
   \   000026   7404         MOV     A,#0x4
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E4           CLR     A
   \   00002C   F0           MOVX    @DPTR,A
   2015            gp_DataReq.gpd_ID.GPDId.SrcID = 0;
   \   00002D   7405         MOV     A,#0x5
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   E4           CLR     A
   \   000033   12....       LCALL   ??Subroutine33_0 & 0xFFFF
   2016            
   2017            GP_DataReq(&gp_DataReq);
   \                     ??CrossCallReturnLabel_51:
   \   000036                ; Setup parameters for call to function GP_DataReq
   \   000036   AA..         MOV     R2,?XSP + 0
   \   000038   AB..         MOV     R3,?XSP + 1
   \   00003A   12....       LCALL   `??GP_DataReq::?relay`; Banked call to: GP_DataReq
   2018          }
   \   00003D   7415         MOV     A,#0x15
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000042   7F01         MOV     R7,#0x1
   \   000044   02....       LJMP    ?BANKED_LEAVE_XDATA
   2019          
   2020               
   2021           /*********************************************************************
   2022           * @fn          gp_expireDuplicateFiltering
   2023           *
   2024           * @brief       Process the expiration of the packets in the duplicate filtering
   2025           *              list. Assumption is the first in the queue is the first into expire.
   2026           *
   2027           * @param       none
   2028           *
   2029           * @return      none
   2030           */    

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine41_0
   \   000003                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2031          void gp_expireDuplicateFiltering(void)
   \                     gp_expireDuplicateFiltering:
   2032          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2033            gp_DataInd_t * temp;
   2034            uint32 timeout;
   2035            
   2036            temp = gp_DataIndList;
   \   000005   90....       MOV     DPTR,#gp_DataIndList
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FE           MOV     R6,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   FF           MOV     R7,A
   2037            timeout = gp_DataIndList->SecReqHandling.timeout;
   \   00000D   90....       MOV     DPTR,#gp_DataIndList
   \   000010   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   78..         MOV     R0,#?V0
   \   00001A   12....       LCALL   ?L_MOV_X
   \   00001D   8011         SJMP    ??gp_expireDuplicateFiltering_0
   2038            
   2039            while(temp != NULL)
   2040            {
   2041              if(timeout >= temp->SecReqHandling.timeout)
   2042              {
   2043                gp_DataInd_t *expired = temp;   
   \                     ??gp_expireDuplicateFiltering_1:
   \   00001F   EE           MOV     A,R6
   \   000020   FA           MOV     R2,A
   \   000021   EF           MOV     A,R7
   \   000022   FB           MOV     R3,A
   2044                
   2045                temp = temp->SecReqHandling.next;
   \   000023   EC           MOV     A,R4
   \   000024   FE           MOV     R6,A
   \   000025   ED           MOV     A,R5
   \   000026   FF           MOV     R7,A
   2046                gp_DataIndReleaseFromList(TRUE, expired,&gp_DataIndList);
   \   000027                ; Setup parameters for call to function gp_DataIndReleaseFromList
   \   000027   7C..         MOV     R4,#gp_DataIndList & 0xff
   \   000029   7D..         MOV     R5,#(gp_DataIndList >> 8) & 0xff
   \   00002B   7901         MOV     R1,#0x1
   \   00002D   12....       LCALL   `??gp_DataIndReleaseFromList::?relay`; Banked call to: gp_DataIndReleaseFromList
   2047              }
   \                     ??gp_expireDuplicateFiltering_0:
   \   000030   EE           MOV     A,R6
   \   000031   4F           ORL     A,R7
   \   000032   6031         JZ      ??gp_expireDuplicateFiltering_2
   \   000034   8E82         MOV     DPL,R6
   \   000036   8F83         MOV     DPH,R7
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FC           MOV     R4,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FD           MOV     R5,A
   \   000040   EE           MOV     A,R6
   \   000041   2405         ADD     A,#0x5
   \   000043   F8           MOV     R0,A
   \   000044   E4           CLR     A
   \   000045   3F           ADDC    A,R7
   \   000046   F9           MOV     R1,A
   \   000047   E8           MOV     A,R0
   \   000048   FA           MOV     R2,A
   \   000049   E9           MOV     A,R1
   \   00004A   FB           MOV     R3,A
   \   00004B   8A82         MOV     DPL,R2
   \   00004D   8B83         MOV     DPH,R3
   \   00004F   78..         MOV     R0,#?V0
   \   000051   12....       LCALL   ?UL_GE_X
   \   000054   40C9         JC      ??gp_expireDuplicateFiltering_1
   2048              else
   2049              {
   2050                temp->SecReqHandling.timeout -= timeout;
   \   000056   8A82         MOV     DPL,R2
   \   000058   8B83         MOV     DPH,R3
   \   00005A   78..         MOV     R0,#?V0
   \   00005C   12....       LCALL   ?L_SUB_FROM_X
   2051                temp = temp->SecReqHandling.next;
   \   00005F   EC           MOV     A,R4
   \   000060   FE           MOV     R6,A
   \   000061   ED           MOV     A,R5
   \   000062   FF           MOV     R7,A
   \   000063   80CB         SJMP    ??gp_expireDuplicateFiltering_0
   2052              }
   2053            }
   2054          }
   \                     ??gp_expireDuplicateFiltering_2:
   \   000065   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclGp_gppMaxProxyTableEntrie`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclGp_gppNotificationRetryNu`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclGp_gppNotificationRetryTi`:
   \   000000   64           DB 100

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclGp_gppMaxSearchCounter>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclGp_gpLinkKey>`:
   \   000000   5A           DB 90
   \   000001   69           DB 105
   \   000002   67           DB 103
   \   000003   42           DB 66
   \   000004   65           DB 101
   \   000005   65           DB 101
   \   000006   41           DB 65
   \   000007   6C           DB 108
   \   000008   6C           DB 108
   \   000009   69           DB 105
   \   00000A   61           DB 97
   \   00000B   6E           DB 110
   \   00000C   63           DB 99
   \   00000D   65           DB 101
   \   00000E   30           DB 48
   \   00000F   39           DB 57

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclGp_clusterRevision>`:
   \   000000   0100         DW 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gp_commissionerAddress>`:
   \   000000   FFFF         DW 65535

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for greenPower_EP_SimpleDesc>`:
   \   000000   F2           DB 242
   \   000001   E0A1         DW 41440
   \   000003   6100         DW 97
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW greenPower_EP_InClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW greenPower_EP_OutClusterList

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclGpProxy_CmdCallbacks>`:
   \   000000   ....         DW `??zclGp_GpPairingCommandCB::?relay`
   \   000002   ....         DW `??zclGp_GpProxyTableReqCB::?relay`
   \   000004   ....         DW `??zclGp_GpProxyCommissioningModeCB::?relay`
   \   000006   ....         DW `??zclGp_GpResponseCommandCB::?relay`

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_endpointInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_endpointInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_stopCommissioningMode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_stopCommissioningMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_ManteinanceIndParse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_ManteinanceIndParse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_DataIndParse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_DataIndParse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_GpPairingCommandCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_GpPairingCommandCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_GpProxyTableReqCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_GpProxyTableReqCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_GpResponseCommandCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_GpResponseCommandCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_GpProxyCommissioningModeCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_GpProxyCommissioningModeCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_ZclPairingParse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_ZclPairingParse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_ZclProxyTableReqParse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_ZclProxyTableReqParse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_PopulateField::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_PopulateField

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_ProxyTblInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_ProxyTblInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_getProxyTableByGpId::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_getProxyTableByGpId

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_SecurityOperationProxy::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_SecurityOperationProxy

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_getProxyTableByIndex::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_getProxyTableByIndex

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GP_DataInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GP_DataInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GP_SecReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GP_SecReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GP_RecoveryKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GP_RecoveryKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GP_DataCnf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GP_DataCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_RegisterCommissioningModeCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_RegisterCommissioningModeCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_RegisterGPChangeChannelReqCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_RegisterGPChangeChannelReqCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_RegisterGPChangeChannelReqForBDBCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_RegisterGPChangeChannelReqForBDBCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_returnOperationalChannel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_returnOperationalChannel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_expireDuplicateFiltering::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_expireDuplicateFiltering

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0,`:
   \   000000   00000000     DD 0
   \   000004   00000000     DD 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   0000         DW 0
   \   00001B   0000         DW 0
   \   00001D   00           DB 0
   \   00001E   00000000     DD 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   0000         DW 0
   \   000034   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0,_1`:
   \   000000   00           DB 0
   \   000001   00000000     DD 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_3`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,`:
   \   000000   FF           DB 255
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,_1`:
   \   000000   FF           DB 255
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_10000:
   \   000000   00000100     DD 65536

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_20000:
   \   000000   00000200     DD 131072

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ff:
   \   000000   FF000000     DD 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ff00:
   \   000000   00FF0000     DD 65280

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ff0000:
   \   000000   0000FF00     DD 16711680

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1388:
   \   000000   88130000     DD 5000
   2055          
   2056          /*********************************************************************
   2057          *********************************************************************/
   2058          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   GP_DataCnf
      0     76   GP_DataInd
        0     72   -> gp_DataIndAppendToList
        0     72   -> osal_get_timeoutEx
        0     72   -> osal_memset
        0     76   -> osal_start_timerEx
        0     72   -> zclGp_DataIndParse
        0     72   -> zclGp_ManteinanceIndParse
        0     72   -> zclGp_SendGpCommissioningNotificationCommand
        0     72   -> zclGp_SendGpNotificationCommand
      0     81   GP_RecoveryKey
        0     36   -> ZDSecMgrReadKeyFromNv
        0     39   -> osal_memcmp
        0     39   -> osal_memcpy
        0     40   -> zcl_ReadAttrData
      1     44   GP_SecReq
        0     41   -> GP_RecoveryKey
        0     41   -> gp_DataIndGet
        0     43   -> gp_SecurityOperationProxy
        0     44   -> osal_memcpy
        0     41   -> osal_msg_allocate
        0     41   -> osal_msg_send
      2    104   gp_PopulateField
        0     20   -> osal_memcpy
      0     80   gp_ProxyTblInit
        0     76   -> osal_memset
        0     78   -> osal_nv_item_init
        0     80   -> osal_nv_write
      2      0   gp_RegisterCommissioningModeCB
      2      0   gp_RegisterGPChangeChannelReqCB
      2      0   gp_RegisterGPChangeChannelReqForBDBCB
      1    139   gp_SecurityOperationProxy
        0     95   -> gp_getProxyTableByGpId
        0     93   -> osal_build_uint32
        0     96   -> osal_memcmp
        0     96   -> osal_memcpy
        0     93   -> osal_memset
      0    140   gp_ZclPairingParse
        0     84   -> gp_PopulateField
        0     84   -> gp_getProxyTableByIndex
        0     87   -> osal_memcmp
        0     84   -> osal_memset
      1    114   gp_ZclProxyTableReqParse
        0     14   -> gp_PopulateField
        0     14   -> osal_memset
      2      0   gp_endpointInit
        2      0   -> bdb_RegisterSimpleDescriptor
        2      0   -> gp_ProxyTblInit
        2      0   -> zclGp_RegisterCmdCallbacks
        2      0   -> zcl_registerAttrList
        2      0   -> zcl_registerReadWriteCB
      0     12   gp_expireDuplicateFiltering
        0     12   -> gp_DataIndReleaseFromList
      0    121   gp_getProxyTableByGpId
        0     19   -> gp_getProxyTableByIndex
        0     22   -> osal_memcmp
      0    120   gp_getProxyTableByIndex
        0     19   -> osal_memcmp
        0     20   -> osal_nv_read
      0     30   gp_returnOperationalChannel
        0     30   -> GP_DataReq
        0     30   -> ZMacSetReq
        0     30   -> osal_stop_timerEx
      2     53   gp_stopCommissioningMode
        2      0   -> gp_FreeGpTxQueue
        2      0   -> osal_stop_timerEx
      1    161   zclGp_DataIndParse
        0     86   -> gp_getProxyTableByIndex
        0     89   -> osal_memcmp
        0     89   -> osal_memcpy
      2     53   zclGp_GpPairingCommandCB
        2     53   -> gp_PairingUpdateProxyTlb
        2     53   -> gp_ZclPairingParse
        2     53   -> gp_stopCommissioningMode
      0     10   zclGp_GpProxyCommissioningModeCB
        0     10   -> gp_stopCommissioningMode
        0     10   -> osal_build_uint16
      1    102   zclGp_GpProxyTableReqCB
        0    100   -> gp_ZclProxyTableReqParse
        0    100   -> gp_getProxyTableByIndex
        0    100   -> osal_mem_alloc
        0    100   -> osal_mem_free
        0    102   -> pt_ZclReadGetProxyEntry
        0    100   -> zclGp_SendGpProxyTableResponse
      1    101   zclGp_GpResponseCommandCB
        0     97   -> ZMacSetReq
        0     97   -> gp_GetHandle
        0     99   -> gp_getProxyTableByGpId
        0     97   -> osal_build_uint32
        0     97   -> osal_get_timeoutEx
        0    100   -> osal_memcpy
        0     97   -> osal_msg_allocate
        0     97   -> osal_msg_send
        0    101   -> osal_nv_write
      1     92   zclGp_ManteinanceIndParse
        0     20   -> osal_memcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      64  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
      64  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1
      64  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2
      64  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_3
      53  ?<Constant {0, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0,
      15  ?<Constant {0, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0,_1
       2  ?<Constant {0, 0}>
       6  ?<Constant {0}>
      16  ?<Constant {255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      16  ?<Constant {255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,_1
       2  ?<Initializer for gp_commissionerAddress>
      12  ?<Initializer for greenPower_EP_SimpleDesc>
       8  ?<Initializer for zclGpProxy_CmdCallbacks>
       2  ?<Initializer for zclGp_clusterRevision>
      16  ?<Initializer for zclGp_gpLinkKey>
       1  ?<Initializer for zclGp_gppMaxProxyTableEntrie
       1  ?<Initializer for zclGp_gppMaxSearchCounter>
       1  ?<Initializer for zclGp_gppNotificationRetryNu
       1  ?<Initializer for zclGp_gppNotificationRetryTi
       6  ??Subroutine31_0
       4  ??Subroutine32_0
       8  ??Subroutine33_0
       5  ??Subroutine34_0
       8  ??Subroutine35_0
       7  ??Subroutine36_0
       2  ??Subroutine37_0
       6  ??Subroutine38_0
       8  ??Subroutine39_0
       8  ??Subroutine40_0
       6  ??Subroutine41_0
       6  ??Subroutine42_0
       7  ?Subroutine0
       8  ?Subroutine1
       3  ?Subroutine10
       6  ?Subroutine11
       3  ?Subroutine12
      17  ?Subroutine13
      12  ?Subroutine14
       9  ?Subroutine15
       8  ?Subroutine16
       3  ?Subroutine17
      13  ?Subroutine18
       3  ?Subroutine19
       8  ?Subroutine2
      15  ?Subroutine20
      11  ?Subroutine21
      10  ?Subroutine22
       4  ?Subroutine23
       8  ?Subroutine24
       2  ?Subroutine25
       9  ?Subroutine26
       2  ?Subroutine27
      10  ?Subroutine28
       6  ?Subroutine29
       3  ?Subroutine3
       6  ?Subroutine30
       5  ?Subroutine4
      12  ?Subroutine5
       2  ?Subroutine6
      15  ?Subroutine7
       5  ?Subroutine8
       9  ?Subroutine9
       3  GP_DataCnf
       6  GP_DataCnf::?relay
     284  GP_DataInd
       6  GP_DataInd::?relay
     293  GP_RecoveryKey
       6  GP_RecoveryKey::?relay
     553  GP_SecReq
       6  GP_SecReq::?relay
       4  __Constant_10000
       4  __Constant_1388
       4  __Constant_20000
       4  __Constant_ff
       4  __Constant_ff00
       4  __Constant_ff0000
       2  gp_DataIndList
     326  gp_PopulateField
       6  gp_PopulateField::?relay
     131  gp_ProxyTblInit
       6  gp_ProxyTblInit::?relay
      16  gp_RegisterCommissioningModeCB
       6  gp_RegisterCommissioningModeCB::?relay
      18  gp_RegisterGPChangeChannelReqCB
       6  gp_RegisterGPChangeChannelReqCB::?relay
      18  gp_RegisterGPChangeChannelReqForBDBCB
       6  gp_RegisterGPChangeChannelReqForBDBCB::?relay
     403  gp_SecurityOperationProxy
       6  gp_SecurityOperationProxy::?relay
     805  gp_ZclPairingParse
       6  gp_ZclPairingParse::?relay
     195  gp_ZclProxyTableReqParse
       6  gp_ZclProxyTableReqParse::?relay
       2  gp_commissionerAddress
       1  gp_commissioningOptions
       2  gp_commissioningUnicastAddress
      52  gp_endpointInit
       6  gp_endpointInit::?relay
     104  gp_expireDuplicateFiltering
       6  gp_expireDuplicateFiltering::?relay
     241  gp_getProxyTableByGpId
       6  gp_getProxyTableByGpId::?relay
     132  gp_getProxyTableByIndex
       6  gp_getProxyTableByIndex::?relay
      71  gp_returnOperationalChannel
       6  gp_returnOperationalChannel::?relay
      52  gp_stopCommissioningMode
       6  gp_stopCommissioningMode::?relay
       1  gp_tempLogicalChannel
       2  greenPower_EP_InClusterList
       2  greenPower_EP_OutClusterList
      12  greenPower_EP_SimpleDesc
       2  pZclGp_ProxyTableEntries
       2  pZclGp_gppBlockedGPDID
       2  pfnChangeChannelReq
       2  pfnChangeChannelReqForBDB
       2  pfnCommissioningMode
       8  zclGpProxy_CmdCallbacks
      96  zclGp_Attrs
     581  zclGp_DataIndParse
       6  zclGp_DataIndParse::?relay
      54  zclGp_GpPairingCommandCB
       6  zclGp_GpPairingCommandCB::?relay
     156  zclGp_GpProxyCommissioningModeCB
       6  zclGp_GpProxyCommissioningModeCB::?relay
     429  zclGp_GpProxyTableReqCB
       6  zclGp_GpProxyTableReqCB::?relay
     666  zclGp_GpResponseCommandCB
       6  zclGp_GpResponseCommandCB::?relay
     456  zclGp_ManteinanceIndParse
       6  zclGp_ManteinanceIndParse::?relay
       1  zclGp_NumAttributes
       2  zclGp_clusterRevision
      16  zclGp_gpLinkKey
      16  zclGp_gpSharedSecurityKey
       1  zclGp_gpSharedSecurityKeyType
       3  zclGp_gppActiveFunctionality
       3  zclGp_gppFunctionality
       1  zclGp_gppMaxProxyTableEntries
       1  zclGp_gppMaxSearchCounter
       1  zclGp_gppNotificationRetryNumber
       1  zclGp_gppNotificationRetryTimer
       1  zgGP_InCommissioningMode
      16  zgpSharedKey

 
 6 347 bytes in segment BANKED_CODE
   144 bytes in segment BANK_RELAYS
   113 bytes in segment CODE_C
    44 bytes in segment XDATA_I
    44 bytes in segment XDATA_ID
   392 bytes in segment XDATA_ROM_C
    40 bytes in segment XDATA_Z
 
 6 648 bytes of CODE  memory
   368 bytes of CONST memory (+ 24 bytes shared)
    84 bytes of XDATA memory

Errors: none
Warnings: none
