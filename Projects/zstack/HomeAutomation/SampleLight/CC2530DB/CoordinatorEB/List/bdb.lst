###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                26/Oct/2017  13:47:11
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack 3.0.0\Components\stack\bdb\bdb.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack 3.0.0\Components\stack\bdb\bdb.c" -D
#        BDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE
#        -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D
#        xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D
#        ZCL_GROUPS -D xZCL_LEVEL_CTRL -lC "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
#        "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List\bdb.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj\bdb.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack 3.0.0\Components\stack\bdb\bdb.c
      1          /**************************************************************************************************
      2            Filename:       bdb.c
      3            Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
      4            Revision:       $Revision: - $
      5          
      6            Description:    This file contains the Base Device Behavior functions and attributes.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "bdb.h"
     45          #include "ZDApp.h"
     46          #include "OSAL.h"
     47          #include "ZDConfig.h"
     48          #include "hal_led.h"
     49          #include "ZDObject.h"
     50          #include "OSAL_Nv.h"
     51          #include "AddrMgr.h"
     52          #include "ZDSecMgr.h"
     53          #include "nwk.h"
     54          #include "nwk_util.h"
     55          #include "ssp_hash.h"
     56          #ifdef BDB_REPORTING
     57          #include "bdb_Reporting.h"
     58          #endif 
     59          
     60          //GP_UPDATE
     61          #include "gp_interface.h"
     62          #include "gp_common.h"
     63          #include "bdb_interface.h"
     64          #include "dgp_stub.h"
     65          
     66          #if defined ( INTER_PAN ) 
     67          #if defined ( BDB_TL_INITIATOR )  
     68          #include "bdb_touchlink_initiator.h"
     69          #endif
     70          #if defined ( BDB_TL_TARGET )  
     71          #include "bdb_touchlink_target.h"
     72          #endif
     73          #endif
     74             
     75          #if defined ( INTER_PAN ) && ( defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET ) )
     76            #include "bdb_touchlink.h"
     77          #endif
     78           
     79          #ifdef MT_APP_CNF_FUNC
     80          #include "MT_APP_CONFIG.h"
     81          #endif
     82             
     83           /*********************************************************************
     84           * MACROS
     85           */
     86          //This is actually the channels used
     87          #define vScanChannels  zgDefaultChannelList
     88             
     89           /*********************************************************************
     90           * CONSTANTS
     91           */
     92          
     93          #define NUMBER_OF_CHANNELS     16
     94          
     95          #define CHANNEL_11_MASK_POS    11
     96          #define CHANNEL_26_MASK_POS    26
     97             

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          uint8 bdb_FB_InitiatorCurrentCyclesNumber = 0; //last cycle is #1 (i.e. cycles-left = (bdb_FB_InitiatorCurrentCyclesNumber - 1))
   \                     bdb_FB_InitiatorCurrentCyclesNumber:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     99          
    100          /*********************************************************************
    101           * TYPEDEFS
    102           */
    103           
    104           
    105           /*********************************************************************
    106           * GLOBAL VARIABLES
    107           */
    108          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    109          byte bdb_TaskID;
   \                     bdb_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    110          bdbAttributes_t bdbAttributes = BDB_ATTRIBUTES_DEFAULT_CONFIG;
   \                     bdbAttributes:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for bdbAttributes>`
   \   000012                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    111          epList_t *bdb_HeadEpDescriptorList = NULL;
   \                     bdb_HeadEpDescriptorList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    112          epList_t *bdb_CurrEpDescriptorList = NULL;
   \                     bdb_CurrEpDescriptorList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    113          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    114          bdbFindingBindingRespondent_t *pRespondentHead = NULL;
   \                     pRespondentHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    115          bdbFindingBindingRespondent_t *pRespondentCurr = NULL;
   \                     pRespondentCurr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    116          bdbFindingBindingRespondent_t *pRespondentNext = NULL;
   \                     pRespondentNext:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    117          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          bdbCommissioningProcedureState_t bdbCommissioningProcedureState; 
   \                     bdbCommissioningProcedureState:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    119          bool bdb_initialization = FALSE;  //Variable to tell if the initialization process has been started
   \                     bdb_initialization:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    120          
    121          //Nwk formation and nwk steering for nodes not in nwk

   \                                 In  segment XDATA_I, align 1, keep-with-next
    122          bool vDoPrimaryScan = TRUE;
   \                     vDoPrimaryScan:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for vDoPrimaryScan>`
   \   000001                REQUIRE __INIT_XDATA_I
    123          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    124          uint8 zgBdbInstallCodeCRC[INSTALL_CODE_LEN + INSTALL_CODE_CRC_LEN] = {0x83,0xFE,0xD3,0x40,0x7A,0x93,0x97,0x23,0xA5,0xC6,0x39,0xB2,0x69,0x16,0xD5,0x05,0xC3,0xB5};
   \                     zgBdbInstallCodeCRC:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for zgBdbInstallCodeCRC>`
   \   000012                REQUIRE __INIT_XDATA_I
    125          
    126          //Pointer of the nwk being tried in association process
    127          #if (ZG_BUILD_JOINING_TYPE)
    128          static networkDesc_t *pBDBListNwk = NULL;
    129          #endif
    130          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          uint8 bdb_ZclTransactionSequenceNumber=0x00;
   \                     bdb_ZclTransactionSequenceNumber:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    132          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          bool touchLinkTargetEnabled = FALSE;
   \                     touchLinkTargetEnabled:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134          
    135           /*********************************************************************
    136           * EXTERNAL VARIABLES
    137           */
    138          
    139          extern devStartModes_t devStartMode;
    140          extern bool  requestNewTrustCenterLinkKey;
    141          extern uint32 requestLinkKeyTimeout;
    142          extern uint32 ZDApp_SavedPollRate;
    143          
    144          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
    145          extern bdbGCB_IdentifyTimeChange_t pfnIdentifyTimeChangeCB;
    146          extern uint8 bdbIndentifyActiveEndpoint;
    147          #endif
    148          
    149          extern bdbFindingBindingRespondent_t *pRespondentNext;
    150          
    151          #ifndef ZNP_ENABLED
    152          extern ZDO_DeviceAnnce_t aliasConflictAnnce;
    153          #endif
    154          
    155          /*********************************************************************
    156           * EXTERNAL FUNCTIONS
    157           */
    158          
    159          extern void ZDApp_ResetTimerStart( uint16 delay );
    160          extern void ZDApp_NodeProfileSync( uint8 stackProfile );
    161          extern uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
    162          extern uint8 ZDApp_ReadNetworkRestoreState( void );
    163          
    164          extern bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead);
    165          
    166          /*********************************************************************
    167           * LOCAL VARIABLES
    168           */
    169          #if (ZG_BUILD_JOINING_TYPE)
    170            static uint8 bdb_nwkAssocRetriesCount = 0;
    171          #endif
    172          #if (ZG_BUILD_COORDINATOR_TYPE)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173            static bdb_joiningDeviceList_t *bdb_joiningDeviceList = NULL;
   \                     bdb_joiningDeviceList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    174          #endif
    175            
    176          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
    177          //Latch to save the status success of any attempt in the periodic F&B process  

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          static uint8 bdb_FBStateSuccessLatch = FALSE;
   \                     bdb_FBStateSuccessLatch:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    179          #endif
    180           /*********************************************************************
    181           * LOCAL FUNCTIONS
    182           */
    183          static void bdb_ProcessOSALMsg(bdbInMsg_t *msgPtr);
    184          void bdb_NotifyCommissioningModeStart(uint8 commissioningMode);
    185          
    186          #if (ZG_BUILD_JOINING_TYPE)
    187          static void bdb_requestTCStackVersion(void);
    188          static void bdb_requestTCLinkKey(void);
    189          static void bdb_requestVerifyTCLinkKey(void);
    190          static void bdb_tryNwkAssoc(void);
    191          #endif
    192          
    193          
    194          static void bdb_processTimeout(void);
    195          static void bdb_startResumeCommissioningProcess(void);
    196          static void bdb_nwkSteeringDeviceOnNwk(void);
    197          static void bdb_nwkJoiningFormation(bool isJoining);
    198          
    199          //GP_UPDATE
    200          #if (ZG_BUILD_RTR_TYPE)
    201          #ifndef ZNP_ENABLED
    202          static uint8 gp_ChangeChannelReq(void);
    203          static void gp_CBInit(void);
    204          #endif
    205          #endif
    206          
    207          #if (ZG_BUILD_COORDINATOR_TYPE)
    208          static void bdb_TCProcessJoiningList(void);
    209          static ZStatus_t bdb_TCJoiningDeviceFree(bdb_joiningDeviceList_t* JoiningDeviceToRemove);
    210          #endif
    211          #if (ZG_BUILD_COORDINATOR_TYPE)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    212          static bdbGCB_TCLinkKeyExchangeProcess_t  pfnTCLinkKeyExchangeProcessCB = NULL;
   \                     pfnTCLinkKeyExchangeProcessCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    213          #endif

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    214          static bdbGCB_CommissioningStatus_t       pfnCommissioningStatusCB = NULL; 
   \                     pfnCommissioningStatusCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    215          #if (ZG_BUILD_JOINING_TYPE)
    216          static bdbGCB_CBKETCLinkKeyExchange_t     pfnCBKETCLinkKeyExchange = NULL;
    217          static bdbGCB_FilterNwkDesc_t             pfnFilterNwkDesc = NULL;   
    218          #endif
    219          
    220          
    221          
    222          void bdb_calculateCCITT_CRC (uint8 *Mb, uint32 msglen, uint16 *crc);
    223          void bdb_crcInit(uint16 *crc, uint16 *crcinit_direct, uint16 *crcinit_nondirect);
    224          uint16 bdb_crcReflect (uint16 crc, uint16 bitnum);
    225          uint16 bdb_crcBitByBitFast(uint8 * p, uint32 len, uint16 crcinit_direct, uint16 crcinit_nondirect);
    226          
    227          
    228          /*********************************************************************
    229           * PUBLIC FUNCTIONS
    230           *********************************************************************/
    231          void bdb_filterNwkDisc(void);
    232          ZStatus_t bdb_joinProcess(networkDesc_t *pChosenNwk);
    233          
    234          ZStatus_t bdb_TCAddJoiningDevice(uint16 parentAddr, uint8* JoiningExtAddr);
    235          void bdb_TCjoiningDeviceComplete(uint8* JoiningExtAddr);
    236          
    237           /*********************************************************************
    238           * @fn          bdb_Init
    239           *
    240           * @brief       Initialization function for the Base Device Behavior.
    241           *
    242           * @param       task_id - bdb_TaskID Task ID
    243           *
    244           * @return      none
    245           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    246          void bdb_Init( byte task_id )
   \                     bdb_Init:
    247          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    248            bdb_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#bdb_TaskID
   \   000009   F0           MOVX    @DPTR,A
    249              
    250          #if (ZG_BUILD_COORDINATOR_TYPE)
    251            if(ZG_DEVICE_COORDINATOR_TYPE)
    252            {
    253              if(bdbAttributes.bdbJoinUsesInstallCodeKey)
   \   00000A   90....       MOV     DPTR,#bdbAttributes + 15
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6006         JZ      ??bdb_Init_0
    254              {
    255                zgAllowInstallCodes = ZG_IC_MUST_USED;
   \   000010   90....       MOV     DPTR,#zgAllowInstallCodes
   \   000013   7402         MOV     A,#0x2
   \   000015   F0           MOVX    @DPTR,A
    256              }
    257            }
    258          #endif
    259            
    260          #if defined ( INTER_PAN ) && defined ( BDB_TL_INITIATOR )  
    261            touchLinkInitiator_InitDevice( );
    262          #endif
    263          
    264          #if (BDB_REPORTING)
    265            bdb_RepInit();
   \                     ??bdb_Init_0:
   \   000016                ; Setup parameters for call to function bdb_RepInit
   \   000016   12....       LCALL   `??bdb_RepInit::?relay`; Banked call to: bdb_RepInit
    266          #endif  
    267            
    268          //GP_UPDATE
    269          #if (ZG_BUILD_RTR_TYPE)
    270          #ifndef ZNP_ENABLED
    271            gp_RegisterGPChangeChannelReqForBDBCB(gp_ChangeChannelReq);
   \   000019                ; Setup parameters for call to function gp_RegisterGPChangeChannelReqForBDBCB
   \   000019   7A..         MOV     R2,#`??gp_ChangeChannelReq::?relay` & 0xff
   \   00001B   7B..         MOV     R3,#(`??gp_ChangeChannelReq::?relay` >> 8) & 0xff
   \   00001D   12....       LCALL   `??gp_RegisterGPChangeChannelReqForBDBCB::?relay`; Banked call to: gp_RegisterGPChangeChannelReqForBDBCB
    272            gp_CBInit();
   \   000020   90....       MOV     DPTR,#GP_DataCnfGCB
   \   000023   74..         MOV     A,#`??GP_DataCnf::?relay` & 0xff
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   74..         MOV     A,#(`??GP_DataCnf::?relay` >> 8) & 0xff
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   90....       MOV     DPTR,#GP_endpointInitGCB
   \   00002D   74..         MOV     A,#`??gp_endpointInit::?relay` & 0xff
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   74..         MOV     A,#(`??gp_endpointInit::?relay` >> 8) & 0xff
   \   000033   F0           MOVX    @DPTR,A
   \   000034   90....       MOV     DPTR,#GP_expireDuplicateFilteringGCB
   \   000037   74..         MOV     A,#`??gp_expireDuplicateFiltering::?relay` & 0xff
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   \   00003B   74..         MOV     A,#(`??gp_expireDuplicateFiltering::?relay` >> 8) & 0xff
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   90....       MOV     DPTR,#GP_stopCommissioningModeGCB
   \   000041   74..         MOV     A,#`??gp_stopCommissioningMode::?relay` & 0xff
   \   000043   F0           MOVX    @DPTR,A
   \   000044   A3           INC     DPTR
   \   000045   74..         MOV     A,#(`??gp_stopCommissioningMode::?relay` >> 8) & 0xff
   \   000047   F0           MOVX    @DPTR,A
   \   000048   90....       MOV     DPTR,#GP_returnOperationalChannelGCB
   \   00004B   74..         MOV     A,#`??gp_returnOperationalChannel::?relay` & 0xff
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   74..         MOV     A,#(`??gp_returnOperationalChannel::?relay` >> 8) & 0xff
   \   000051   F0           MOVX    @DPTR,A
   \   000052   90....       MOV     DPTR,#GP_DataIndGCB
   \   000055   74..         MOV     A,#`??GP_DataInd::?relay` & 0xff
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   74..         MOV     A,#(`??GP_DataInd::?relay` >> 8) & 0xff
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   90....       MOV     DPTR,#GP_SecReqGCB
   \   00005F   74..         MOV     A,#`??GP_SecReq::?relay` & 0xff
   \   000061   F0           MOVX    @DPTR,A
   \   000062   A3           INC     DPTR
   \   000063   74..         MOV     A,#(`??GP_SecReq::?relay` >> 8) & 0xff
   \   000065   F0           MOVX    @DPTR,A
   \   000066   90....       MOV     DPTR,#GP_CheckAnnouncedDeviceGCB
   \   000069   74..         MOV     A,#`??gp_CheckAnnouncedDevice::?relay` & 0xff
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   74..         MOV     A,#(`??gp_CheckAnnouncedDevice::?relay` >> 8) & 0xff
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   90....       MOV     DPTR,#GP_aliasConflictAnnce
   \   000073   74..         MOV     A,#aliasConflictAnnce & 0xff
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   74..         MOV     A,#(aliasConflictAnnce >> 8) & 0xff
   \   000079   F0           MOVX    @DPTR,A
   \   00007A                ; Setup parameters for call to function gp_endpointInit
   \   00007A   12....       LCALL   `??gp_endpointInit::?relay`; Banked call to: gp_endpointInit
    273          #endif
    274          #endif
    275          }
   \   00007D   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    276          
    277          /*********************************************************************
    278           * @fn      bdb_RegisterSimpleDescriptor
    279           *
    280           * @brief   Register the Simple descriptor. This function also registers 
    281           *          the profile's cluster conversion table.
    282           *
    283           * @param   simpleDesc - a pointer to a valid SimpleDescriptionFormat_t, must not be NULL.
    284           *
    285           * @return  none
    286           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    287          void bdb_RegisterSimpleDescriptor( SimpleDescriptionFormat_t *simpleDesc )
   \                     bdb_RegisterSimpleDescriptor:
    288          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    289            endPointDesc_t *epDesc;
    290          
    291            // Register the application's endpoint descriptor
    292            //  - This memory is allocated and never freed.
    293            epDesc = osal_mem_alloc( sizeof ( endPointDesc_t ) );
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   7A07         MOV     R2,#0x7
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
    294            if ( epDesc )
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   6023         JZ      ??bdb_RegisterSimpleDescriptor_0
    295            {
    296              // Fill out the endpoint description.
    297              epDesc->endPoint = simpleDesc->EndPoint;
   \   000014   8E82         MOV     DPL,R6
   \   000016   8F83         MOV     DPH,R7
   \   000018   E0           MOVX    A,@DPTR
   \   000019   8A82         MOV     DPL,R2
   \   00001B   8B83         MOV     DPH,R3
   \   00001D   F0           MOVX    @DPTR,A
    298              epDesc->task_id = &zcl_TaskID;   // all messages get sent to ZCL first
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   74..         MOV     A,#zcl_TaskID & 0xff
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   74..         MOV     A,#(zcl_TaskID >> 8) & 0xff
   \   000026   12....       LCALL   ?Subroutine11 & 0xFFFF
    299              epDesc->simpleDesc = simpleDesc;
   \                     ??CrossCallReturnLabel_0:
   \   000029   EE           MOV     A,R6
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   EF           MOV     A,R7
   \   00002D   12....       LCALL   ?Subroutine11 & 0xFFFF
    300              epDesc->latencyReq = noLatencyReqs;
   \                     ??CrossCallReturnLabel_1:
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
    301          
    302              // Register the endpoint description with the AF
    303              afRegister( epDesc );
   \   000034                ; Setup parameters for call to function afRegister
   \   000034   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    304            }
    305          }
   \                     ??bdb_RegisterSimpleDescriptor_0:
   \   000037   80..         SJMP    ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    306          
    307          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
    308          /*********************************************************************
    309           * @fn      bdb_ZclIdentifyCmdInd
    310           *
    311           * @brief   Callback from the ZCL General Cluster Library when
    312           *          it received an Identity Command for this application.
    313           *
    314           * @param   srcAddr - source address and endpoint of the response message
    315           * @param   identifyTime - the number of seconds to identify yourself
    316           * @param   endpoint - destination endpoint
    317           *
    318           * @return  none
    319           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    320          void bdb_ZclIdentifyCmdInd( zclIdentify_t *pCmd, uint8 endpoint )
   \                     bdb_ZclIdentifyCmdInd:
    321          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V0,R1
    322            zclAttrRec_t identifyAttrRec;
    323            
    324            if ( zclFindAttrRec( endpoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    325                                ATTRID_IDENTIFY_TIME, &identifyAttrRec ) )
   \   000010                ; Setup parameters for call to function zclFindAttrRec
   \   000010   A8..         MOV     R0,?XSP + 0
   \   000012   A9..         MOV     R1,?XSP + 1
   \   000014   88..         MOV     ?V2,R0
   \   000016   89..         MOV     ?V3,R1
   \   000018   78..         MOV     R0,#?V2
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   7C00         MOV     R4,#0x0
   \   00001F   7D00         MOV     R5,#0x0
   \   000021   7A03         MOV     R2,#0x3
   \   000023   7B00         MOV     R3,#0x0
   \   000025   A9..         MOV     R1,?V0
   \   000027   12....       LCALL   `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   00002A   7402         MOV     A,#0x2
   \   00002C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002F   E9           MOV     A,R1
   \   000030   6067         JZ      ??bdb_ZclIdentifyCmdInd_0
    326            {
    327              if ( pCmd->identifyTime > 0 )
   \   000032   7406         MOV     A,#0x6
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000043   8882         MOV     DPL,R0
   \   000045   8983         MOV     DPH,R1
   \   000047   6011         JZ      ??bdb_ZclIdentifyCmdInd_1
    328              {
    329                *((uint16*)identifyAttrRec.attr.dataPtr) += pCmd->identifyTime;
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   2A           ADD     A,R2
   \   00004B   FA           MOV     R2,A
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   3B           ADDC    A,R3
   \   00004F   FB           MOV     R3,A
   \   000050   8882         MOV     DPL,R0
   \   000052   8983         MOV     DPH,R1
   \   000054   EA           MOV     A,R2
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   EB           MOV     A,R3
   \   000058   8003         SJMP    ??bdb_ZclIdentifyCmdInd_2
    330              }
    331              else if ( pCmd->identifyTime <= 0 )
    332              {
    333                *((uint16*)identifyAttrRec.attr.dataPtr) = 0;
   \                     ??bdb_ZclIdentifyCmdInd_1:
   \   00005A   E4           CLR     A
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   \                     ??bdb_ZclIdentifyCmdInd_2:
   \   00005D   F0           MOVX    @DPTR,A
    334              }
    335              osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
   \   00005E                ; Setup parameters for call to function osal_start_timerEx
   \   00005E   90....       MOV     DPTR,#__Constant_3e8
   \   000061   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000064   7A00         MOV     R2,#0x0
   \   000066   7B20         MOV     R3,#0x20
   \   000068   90....       MOV     DPTR,#bdb_TaskID
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F9           MOV     R1,A
   \   00006D   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000070   7404         MOV     A,#0x4
   \   000072   12....       LCALL   ?DEALLOC_XSTACK8
    336              
    337              if(pfnIdentifyTimeChangeCB != NULL)
   \   000075   90....       MOV     DPTR,#pfnIdentifyTimeChangeCB
   \   000078   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00007B   601C         JZ      ??bdb_ZclIdentifyCmdInd_0
    338              {
    339                pfnIdentifyTimeChangeCB(pCmd->srcAddr->endPoint);
   \   00007D                ; Setup parameters for indirect call
   \   00007D   8E82         MOV     DPL,R6
   \   00007F   8F83         MOV     DPH,R7
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F8           MOV     R0,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   C8           XCH     A,R0
   \   000086   2409         ADD     A,#0x9
   \   000088   F582         MOV     DPL,A
   \   00008A   E4           CLR     A
   \   00008B   38           ADDC    A,R0
   \   00008C   F583         MOV     DPH,A
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   F9           MOV     R1,A
   \   000090   90....       MOV     DPTR,#pfnIdentifyTimeChangeCB
   \   000093   12....       LCALL   ?Subroutine22 & 0xFFFF
    340              }
    341            }
   \                     ??CrossCallReturnLabel_73:
   \   000096   12....       LCALL   ?CALL_IND
    342          }
   \                     ??bdb_ZclIdentifyCmdInd_0:
   \   000099   7408         MOV     A,#0x8
   \   00009B   02....       LJMP    ??Subroutine37_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine38_0
   \   000003                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine42_0
   \   000003                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   22           RET
    343          #endif
    344          
    345          
    346          #if (ZG_BUILD_JOINING_TYPE) 
    347           /*********************************************************************
    348           * @fn          bdb_setActiveCentralizedLinkKey
    349           *
    350           * @brief       Set the active centralized key to be used, Global or IC derived.
    351           *
    352           * @param       useGlobal - If TRUE, then use default TC link key, if FALSE use 
    353           *                          pBuf as source for IC key derived input
    354           * @param       pBuf - The expected format and length of the IC is defined by 
    355           *                     BDB_INSTALL_CODE_USE
    356           *
    357           * @return      ZStatus_t - ZFailure when no valid BDB_INSTALL_CODE_USE is used
    358           *                          ZInvalidParameter when IC buffer is null
    359           */
    360          ZStatus_t bdb_setActiveCentralizedLinkKey(bool useGlobal, uint8* pBuf)
    361          {
    362            uint8 extAddr[Z_EXTADDR_LEN];
    363            osal_memset(extAddr,0x00,Z_EXTADDR_LEN);
    364            ZStatus_t Status = ZSuccess;
    365          
    366            if(useGlobal)
    367            {
    368              APSME_AddTCLinkKey((uint8*)defaultTCLinkKey,extAddr);
    369              Status = ZSuccess;
    370            } 
    371            else
    372            {
    373              if(pBuf != NULL)
    374              {
    375            #if (BDB_INSTALL_CODE_USE==BDB_INSTALL_CODE_USE_IC_CRC)
    376                //Set the install code as default key
    377                Status = bdb_addInstallCode(pBuf,extAddr);
    378              
    379            #elif (BDB_INSTALL_CODE_USE==BDB_INSTALL_CODE_USE_KEY)
    380          
    381                //Set the key as global default
    382                APSME_AddTCLinkKey(pBuf,extAddr);
    383            #else
    384              
    385                //BDB_INSTALL_CODE_USE not supported
    386                Status = ZFailure;
    387            #endif
    388              }
    389              else
    390              {
    391                Status = ZInvalidParameter;
    392              }
    393            }
    394            return Status;
    395          }
    396          #endif
    397          
    398          
    399              
    400            
    401          /******************************************************************************
    402           * @fn          bdb_addInstallCode
    403           *
    404           * @brief       Interface to add an install codes and adds a APS TC Link key.
    405           *
    406           * @param       pInstallCode - [in] Install Code with CRC (buffer size of 18 bytes).
    407           *              pExt - [in] Extended address of the node.
    408           *
    409           * @return      ZStatus_t
    410           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    411          ZStatus_t bdb_addInstallCode(uint8* pInstallCode, uint8* pExt)
   \                     bdb_addInstallCode:
    412          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0,R4
   \   000010   8D..         MOV     ?V1,R5
    413            uint8  hashOutput[16];
    414            uint16 CRC;
    415            
    416          #if (ZG_BUILD_COORDINATOR_TYPE)
    417            if(ZG_DEVICE_COORDINATOR_TYPE)
    418            {
    419              if(zgAllowInstallCodes == ZG_IC_NOT_SUPPORTED)
   \   000012   90....       MOV     DPTR,#zgAllowInstallCodes
   \   000015   E0           MOVX    A,@DPTR
   \   000016   7004         JNZ     ??bdb_addInstallCode_0
    420              {
    421                return ZFailure;
   \   000018   7901         MOV     R1,#0x1
   \   00001A   805D         SJMP    ??bdb_addInstallCode_1
    422              }
    423            }
    424          #endif
    425                 
    426            if((pInstallCode == NULL) || (pExt == NULL))
   \                     ??bdb_addInstallCode_0:
   \   00001C   EE           MOV     A,R6
   \   00001D   4F           ORL     A,R7
   \   00001E   6020         JZ      ??bdb_addInstallCode_2
   \   000020   EC           MOV     A,R4
   \   000021   45..         ORL     A,?V1
   \   000023   601B         JZ      ??bdb_addInstallCode_2
    427            {
    428              return ZInvalidParameter;
    429            }
    430            
    431            CRC = bdb_GenerateInstallCodeCRC(pInstallCode);
   \   000025                ; Setup parameters for call to function bdb_GenerateInstallCodeCRC
   \   000025   12....       LCALL   `??bdb_GenerateInstallCodeCRC::?relay`; Banked call to: bdb_GenerateInstallCodeCRC
   \   000028   8A..         MOV     ?V2,R2
   \   00002A   8B..         MOV     ?V3,R3
    432            //Validate CRC
    433            if(CRC != osal_build_uint16(&pInstallCode[INSTALL_CODE_LEN]))
   \   00002C                ; Setup parameters for call to function osal_build_uint16
   \   00002C   EE           MOV     A,R6
   \   00002D   2410         ADD     A,#0x10
   \   00002F   FA           MOV     R2,A
   \   000030   E4           CLR     A
   \   000031   3F           ADDC    A,R7
   \   000032   FB           MOV     R3,A
   \   000033   12....       LCALL   `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000036   EA           MOV     A,R2
   \   000037   65..         XRL     A,?V2
   \   000039   7003         JNZ     ??bdb_addInstallCode_3
   \   00003B   EB           MOV     A,R3
   \   00003C   65..         XRL     A,?V3
   \                     ??bdb_addInstallCode_3:
   \   00003E   6004         JZ      ??bdb_addInstallCode_4
    434            {
    435              return ZInvalidParameter;
   \                     ??bdb_addInstallCode_2:
   \   000040   7902         MOV     R1,#0x2
   \   000042   8035         SJMP    ??bdb_addInstallCode_1
    436            }
    437          
    438            sspMMOHash (NULL, 0, pInstallCode,(INSTALL_CODE_LEN + INSTALL_CODE_CRC_LEN) * BITS_PER_BYTE, hashOutput);
   \                     ??bdb_addInstallCode_4:
   \   000044                ; Setup parameters for call to function sspMMOHash
   \   000044   A8..         MOV     R0,?XSP + 0
   \   000046   A9..         MOV     R1,?XSP + 1
   \   000048   88..         MOV     ?V2,R0
   \   00004A   89..         MOV     ?V3,R1
   \   00004C   78..         MOV     R0,#?V2
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   75..90       MOV     ?V2,#-0x70
   \   000054   75..00       MOV     ?V3,#0x0
   \   000057   78..         MOV     R0,#?V2
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005C   EE           MOV     A,R6
   \   00005D   FC           MOV     R4,A
   \   00005E   EF           MOV     A,R7
   \   00005F   FD           MOV     R5,A
   \   000060   7900         MOV     R1,#0x0
   \   000062   7A00         MOV     R2,#0x0
   \   000064   7B00         MOV     R3,#0x0
   \   000066   12....       LCALL   `??sspMMOHash::?relay`; Banked call to: sspMMOHash
   \   000069   7404         MOV     A,#0x4
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
    439          
    440            return APSME_AddTCLinkKey(hashOutput,pExt);
   \   00006E                ; Setup parameters for call to function APSME_AddTCLinkKey
   \   00006E   AC..         MOV     R4,?V0
   \   000070   AD..         MOV     R5,?V1
   \   000072   AA..         MOV     R2,?XSP + 0
   \   000074   AB..         MOV     R3,?XSP + 1
   \   000076   12....       LCALL   `??APSME_AddTCLinkKey::?relay`; Banked call to: APSME_AddTCLinkKey
   \                     ??bdb_addInstallCode_1:
   \   000079   7410         MOV     A,#0x10
   \   00007B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007E   7F06         MOV     R7,#0x6
   \   000080   02....       LJMP    ?BANKED_LEAVE_XDATA
    441          }    
    442              
    443          
    444          #if (ZG_BUILD_COORDINATOR_TYPE)
    445           /*********************************************************************
    446           * @fn      bdb_RegisterTCLinkKeyExchangeProcessCB
    447           *
    448           * @brief   Register a callback to receive notifications on the joining devices 
    449           *          and its status on TC link key exchange
    450           *
    451           * @param   bdbGCB_TCLinkKeyExchangeProcess - application callback 
    452           *          (extended address of device, status: 0 = Joining, 1 = TC link key exchange success, 2 = TC link key exchange failed)
    453           *
    454           * @return  none
    455           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    456          void bdb_RegisterTCLinkKeyExchangeProcessCB(bdbGCB_TCLinkKeyExchangeProcess_t bdbGCB_TCLinkKeyExchangeProcess)
   \                     bdb_RegisterTCLinkKeyExchangeProcessCB:
    457          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    458            if(bdbGCB_TCLinkKeyExchangeProcess != NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   6008         JZ      ??bdb_RegisterTCLinkKeyExchangeProcessCB_0
    459            {
    460              pfnTCLinkKeyExchangeProcessCB = bdbGCB_TCLinkKeyExchangeProcess;
   \   000008   90....       MOV     DPTR,#pfnTCLinkKeyExchangeProcessCB
   \   00000B   EA           MOV     A,R2
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   EB           MOV     A,R3
   \   00000F   F0           MOVX    @DPTR,A
    461            }
    462          }
   \                     ??bdb_RegisterTCLinkKeyExchangeProcessCB_0:
   \   000010   02....       LJMP    ??Subroutine35_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    463          
    464          
    465          
    466           /*********************************************************************
    467           * @fn          bdb_setTCRequireKeyExchange
    468           *
    469           * @brief       Set the bdb_setTCRequireKeyExchange attribute
    470           *
    471           * @param       isKeyExchangeRequired - True if TC will remove devices that do 
    472           *              not perform key exchange after bdbTrustCenterNodeJoinTimeout, 
    473           *              False to not remove devices.
    474           *
    475           * @return      none
    476           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    477          void bdb_setTCRequireKeyExchange(bool isKeyExchangeRequired)
   \                     bdb_setTCRequireKeyExchange:
    478          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    479            bdbAttributes.bdbTrustCenterRequireKeyExchange = isKeyExchangeRequired;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#bdbAttributes + 17
   \   000008   02....       LJMP    ??Subroutine34_0 & 0xFFFF
    480          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine35_0
   \   000001                ; // Fall through to label ??Subroutine35_0
    481          
    482          
    483          
    484           /*********************************************************************
    485           * @fn          bdb_TCAddJoiningDevice
    486           *
    487           * @brief       Add a joining device to the list of devices that must request a 
    488           *              key before bdbTrustCenterNodeJoinTimeout.
    489           *
    490           * @param       parentAddr - Address of the parent device
    491           * @param       JoiningExtAddr - IEEE address of the joining device
    492           *
    493           * @return      ZStatus_t - ZFailure No memory to allocate the device in the list
    494           *                          ZInvalidParameter
    495           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    496          ZStatus_t bdb_TCAddJoiningDevice(uint16 parentAddr, uint8* JoiningExtAddr)
   \                     bdb_TCAddJoiningDevice:
    497          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V6,R2
   \   00000C   8B..         MOV     ?V7,R3
    498            bdb_joiningDeviceList_t* tempJoiningDescNode;
    499            
    500            if((parentAddr == INVALID_NODE_ADDR) || (JoiningExtAddr == NULL))
   \   00000E   74FE         MOV     A,#-0x2
   \   000010   65..         XRL     A,?V6
   \   000012   7004         JNZ     ??bdb_TCAddJoiningDevice_0
   \   000014   74FF         MOV     A,#-0x1
   \   000016   65..         XRL     A,?V7
   \                     ??bdb_TCAddJoiningDevice_0:
   \   000018   6004         JZ      ??bdb_TCAddJoiningDevice_1
   \   00001A   EC           MOV     A,R4
   \   00001B   4D           ORL     A,R5
   \   00001C   7005         JNZ     ??bdb_TCAddJoiningDevice_2
    501            {
    502              return ZInvalidParameter;
   \                     ??bdb_TCAddJoiningDevice_1:
   \   00001E   7902         MOV     R1,#0x2
   \   000020   02....       LJMP    ??bdb_TCAddJoiningDevice_3 & 0xFFFF
    503            }
    504            
    505            //If the list was empty and element was allocated, then start the timer
    506            if(bdb_joiningDeviceList == NULL)
   \                     ??bdb_TCAddJoiningDevice_2:
   \   000023   8C..         MOV     ?V0,R4
   \   000025   8D..         MOV     ?V1,R5
   \   000027   75..00       MOV     ?V2,#0x0
   \   00002A   90....       MOV     DPTR,#bdb_joiningDeviceList
   \   00002D   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000030   703B         JNZ     ??bdb_TCAddJoiningDevice_4
    507            {
    508              bdb_joiningDeviceList = osal_mem_alloc(sizeof(bdb_joiningDeviceList_t));
   \   000032                ; Setup parameters for call to function osal_mem_alloc
   \   000032   7A0D         MOV     R2,#0xd
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000039   90....       MOV     DPTR,#bdb_joiningDeviceList
   \   00003C   EA           MOV     A,R2
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   EB           MOV     A,R3
   \   000040   F0           MOVX    @DPTR,A
    509              if(bdb_joiningDeviceList == NULL)
   \   000041   90....       MOV     DPTR,#bdb_joiningDeviceList
   \   000044   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000047   7003         JNZ     $+5
   \   000049   02....       LJMP    ??bdb_TCAddJoiningDevice_5 & 0xFFFF
    510              {
    511                return ZFailure;
    512              }
    513             
    514              osal_start_reload_timer(bdb_TaskID,BDB_TC_JOIN_TIMEOUT,1000);
   \   00004C                ; Setup parameters for call to function osal_start_reload_timer
   \   00004C   90....       MOV     DPTR,#__Constant_3e8
   \   00004F   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000052   7A00         MOV     R2,#0x0
   \   000054   7B08         MOV     R3,#0x8
   \   000056   90....       MOV     DPTR,#bdb_TaskID
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F9           MOV     R1,A
   \   00005B   12....       LCALL   `??osal_start_reload_timer::?relay`; Banked call to: osal_start_reload_timer
   \   00005E   7404         MOV     A,#0x4
   \   000060   12....       LCALL   ?DEALLOC_XSTACK8
    515              tempJoiningDescNode = bdb_joiningDeviceList;
   \   000063   90....       MOV     DPTR,#bdb_joiningDeviceList
   \   000066   E0           MOVX    A,@DPTR
   \   000067   FE           MOV     R6,A
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   02....       LJMP    ??bdb_TCAddJoiningDevice_6 & 0xFFFF
    516            }
    517            //if the list was not empty then add the entry at the end of the list
    518            else
    519            {
    520              tempJoiningDescNode = bdb_joiningDeviceList;
   \                     ??bdb_TCAddJoiningDevice_4:
   \   00006D   12....       LCALL   ?Subroutine28 & 0xFFFF
    521              
    522              //Validate that this is not already in the list... somehow
    523              if(osal_memcmp(JoiningExtAddr,tempJoiningDescNode->bdbJoiningNodeEui64,Z_EXTADDR_LEN))
   \                     ??CrossCallReturnLabel_80:
   \   000070                ; Setup parameters for call to function osal_memcmp
   \   000070   8E82         MOV     DPL,R6
   \   000072   8F83         MOV     DPH,R7
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A982         MOV     R1,DPL
   \   000078   AA83         MOV     R2,DPH
   \   00007A   89..         MOV     ?V8,R1
   \   00007C   8A..         MOV     ?V9,R2
   \   00007E   75..00       MOV     ?V10,#0x0
   \   000081   78..         MOV     R0,#?V8
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000086   7C08         MOV     R4,#0x8
   \   000088   7D00         MOV     R5,#0x0
   \   00008A   A9..         MOV     R1,?V0
   \   00008C   AA..         MOV     R2,?V1
   \   00008E   AB..         MOV     R3,?V2
   \   000090   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000093   7403         MOV     A,#0x3
   \   000095   12....       LCALL   ?DEALLOC_XSTACK8
   \   000098   E9           MOV     A,R1
   \   000099   7038         JNZ     ??bdb_TCAddJoiningDevice_7
    524              {
    525                //The device added is already in the list, refresh its time and do nothing else
    526                tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
    527                return ZSuccess;
    528              }
    529              
    530              while(tempJoiningDescNode->nextDev != NULL)
   \                     ??bdb_TCAddJoiningDevice_8:
   \   00009B   EE           MOV     A,R6
   \   00009C   240B         ADD     A,#0xb
   \   00009E   FE           MOV     R6,A
   \   00009F   5001         JNC     ??bdb_TCAddJoiningDevice_9
   \   0000A1   0F           INC     R7
   \                     ??bdb_TCAddJoiningDevice_9:
   \   0000A2   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0000A5   6032         JZ      ??bdb_TCAddJoiningDevice_10
    531              {
    532                tempJoiningDescNode = tempJoiningDescNode->nextDev;
   \   0000A7   E8           MOV     A,R0
   \   0000A8   FE           MOV     R6,A
   \   0000A9   E9           MOV     A,R1
   \   0000AA   FF           MOV     R7,A
    533                
    534                //Validate that this is not already in the list... somehow
    535                if(osal_memcmp(JoiningExtAddr,tempJoiningDescNode->bdbJoiningNodeEui64,Z_EXTADDR_LEN))
   \   0000AB                ; Setup parameters for call to function osal_memcmp
   \   0000AB   8E82         MOV     DPL,R6
   \   0000AD   8F83         MOV     DPH,R7
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   A982         MOV     R1,DPL
   \   0000B3   AA83         MOV     R2,DPH
   \   0000B5   89..         MOV     ?V8,R1
   \   0000B7   8A..         MOV     ?V9,R2
   \   0000B9   78..         MOV     R0,#?V8
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000BE   7C08         MOV     R4,#0x8
   \   0000C0   7D00         MOV     R5,#0x0
   \   0000C2   A9..         MOV     R1,?V0
   \   0000C4   AA..         MOV     R2,?V1
   \   0000C6   AB..         MOV     R3,?V2
   \   0000C8   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000CB   7403         MOV     A,#0x3
   \   0000CD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D0   E9           MOV     A,R1
   \   0000D1   60C8         JZ      ??bdb_TCAddJoiningDevice_8
    536                {
    537                  //The device added is already in the list, refresh its time and do nothing else
    538                  tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
   \                     ??bdb_TCAddJoiningDevice_7:
   \   0000D3   12....       LCALL   ?Subroutine18 & 0xFFFF
    539                  return ZSuccess;
   \                     ??CrossCallReturnLabel_16:
   \   0000D6   02....       LJMP    ??bdb_TCAddJoiningDevice_11 & 0xFFFF
    540                }
    541              }
    542              
    543              tempJoiningDescNode->nextDev = osal_mem_alloc(sizeof(bdb_joiningDeviceList_t));
   \                     ??bdb_TCAddJoiningDevice_10:
   \   0000D9                ; Setup parameters for call to function osal_mem_alloc
   \   0000D9   7A0D         MOV     R2,#0xd
   \   0000DB   7B00         MOV     R3,#0x0
   \   0000DD   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000E0   8A..         MOV     ?V4,R2
   \   0000E2   8B..         MOV     ?V5,R3
   \   0000E4   A8..         MOV     R0,?V4
   \   0000E6   A9..         MOV     R1,?V5
   \   0000E8   12....       LCALL   ??Subroutine43_0 & 0xFFFF
    544              if(tempJoiningDescNode->nextDev == NULL)
   \                     ??CrossCallReturnLabel_77:
   \   0000EB   7005         JNZ     ??bdb_TCAddJoiningDevice_12
    545              {
    546                return ZFailure;
   \                     ??bdb_TCAddJoiningDevice_5:
   \   0000ED   7901         MOV     R1,#0x1
   \   0000EF   02....       LJMP    ??bdb_TCAddJoiningDevice_3 & 0xFFFF
    547              }
    548              
    549              tempJoiningDescNode = tempJoiningDescNode->nextDev;
   \                     ??bdb_TCAddJoiningDevice_12:
   \   0000F2   E8           MOV     A,R0
   \   0000F3   FE           MOV     R6,A
   \   0000F4   E9           MOV     A,R1
   \                     ??bdb_TCAddJoiningDevice_6:
   \   0000F5   FF           MOV     R7,A
    550            }
    551            
    552            if(pfnTCLinkKeyExchangeProcessCB)
   \   0000F6   EE           MOV     A,R6
   \   0000F7   2402         ADD     A,#0x2
   \   0000F9   F5..         MOV     ?V4,A
   \   0000FB   E4           CLR     A
   \   0000FC   3F           ADDC    A,R7
   \   0000FD   F5..         MOV     ?V5,A
   \   0000FF   90....       MOV     DPTR,#pfnTCLinkKeyExchangeProcessCB
   \   000102   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000105   604B         JZ      ??bdb_TCAddJoiningDevice_13
    553            {
    554              bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
    555              osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
   \   000107                ; Setup parameters for call to function osal_memcpy
   \   000107   85....       MOV     ?V8,?V4
   \   00010A   85....       MOV     ?V9,?V5
   \   00010D   75..00       MOV     ?V10,#0x0
   \   000110   78..         MOV     R0,#?V8
   \   000112   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000115   7C08         MOV     R4,#0x8
   \   000117   7D00         MOV     R5,#0x0
   \   000119   7404         MOV     A,#0x4
   \   00011B   12....       LCALL   ?XSTACK_DISP0_8
   \   00011E   AA82         MOV     R2,DPL
   \   000120   AB83         MOV     R3,DPH
   \   000122   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000125   7403         MOV     A,#0x3
   \   000127   12....       LCALL   ?DEALLOC_XSTACK8
    556              bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_JOINING;
   \   00012A   85..82       MOV     DPL,?XSP + 0
   \   00012D   85..83       MOV     DPH,?XSP + 1
   \   000130   E4           CLR     A
   \   000131   F0           MOVX    @DPTR,A
    557              
    558              bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
   \   000132                ; Setup parameters for call to function bdb_SendMsg
   \   000132   A8..         MOV     R0,?XSP + 0
   \   000134   A9..         MOV     R1,?XSP + 1
   \   000136   88..         MOV     ?V8,R0
   \   000138   89..         MOV     ?V9,R1
   \   00013A   78..         MOV     R0,#?V8
   \   00013C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013F   7C09         MOV     R4,#0x9
   \   000141   7B00         MOV     R3,#0x0
   \   000143   7A09         MOV     R2,#0x9
   \   000145   90....       MOV     DPTR,#bdb_TaskID
   \   000148   E0           MOVX    A,@DPTR
   \   000149   F9           MOV     R1,A
   \   00014A   12....       LCALL   `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   00014D   7402         MOV     A,#0x2
   \   00014F   12....       LCALL   ?DEALLOC_XSTACK8
    559            }
    560            
    561            tempJoiningDescNode->nextDev = NULL;
   \                     ??bdb_TCAddJoiningDevice_13:
   \   000152   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000155   E4           CLR     A
   \   000156   F0           MOVX    @DPTR,A
   \   000157   A3           INC     DPTR
   \   000158   F0           MOVX    @DPTR,A
    562            tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
   \   000159   12....       LCALL   ?Subroutine18 & 0xFFFF
    563            tempJoiningDescNode->parentAddr = parentAddr;
   \                     ??CrossCallReturnLabel_17:
   \   00015C   8E82         MOV     DPL,R6
   \   00015E   8F83         MOV     DPH,R7
   \   000160   E5..         MOV     A,?V6
   \   000162   F0           MOVX    @DPTR,A
   \   000163   A3           INC     DPTR
   \   000164   E5..         MOV     A,?V7
   \   000166   F0           MOVX    @DPTR,A
    564            osal_memcpy(tempJoiningDescNode->bdbJoiningNodeEui64, JoiningExtAddr, Z_EXTADDR_LEN);
   \   000167                ; Setup parameters for call to function osal_memcpy
   \   000167   78..         MOV     R0,#?V0
   \   000169   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00016C   7C08         MOV     R4,#0x8
   \   00016E   7D00         MOV     R5,#0x0
   \   000170   AA..         MOV     R2,?V4
   \   000172   AB..         MOV     R3,?V5
   \   000174   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000177   7403         MOV     A,#0x3
   \   000179   12....       LCALL   ?DEALLOC_XSTACK8
    565            
    566            return ZSuccess;
   \                     ??bdb_TCAddJoiningDevice_11:
   \   00017C   7900         MOV     R1,#0x0
   \                     ??bdb_TCAddJoiningDevice_3:
   \   00017E                REQUIRE ?Subroutine4
   \   00017E                ; // Fall through to label ?Subroutine4
    567          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7409         MOV     A,#0x9
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F0B         MOV     R7,#0xb
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   90....       MOV     DPTR,#bdbAttributes + 16
   \   000003   E0           MOVX    A,@DPTR
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   F0           MOVX    @DPTR,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine41_0
   \   000004                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E8           MOV     A,R0
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   E9           MOV     A,R1
   \   000008   F0           MOVX    @DPTR,A
   \   000009   E8           MOV     A,R0
   \   00000A   49           ORL     A,R1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   90....       MOV     DPTR,#bdb_joiningDeviceList
   \   000003                REQUIRE ??Subroutine44_0
   \   000003                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET
    568          
    569          /****************************************************************************
    570           * @fn          bdb_TCProcessJoiningList
    571           *
    572           * @brief       Process the timer to handle the joining devices if the TC link 
    573           *              key is mandatory for all devices
    574           *
    575           * @param       none
    576           *
    577           * @return      none
    578           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    579          void bdb_TCProcessJoiningList(void)
   \                     bdb_TCProcessJoiningList:
    580          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 42
   \   000005   74D6         MOV     A,#-0x2a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    581            bdb_joiningDeviceList_t* tempJoiningDescNode;
    582            
    583            if(bdb_joiningDeviceList)
   \   00000A   90....       MOV     DPTR,#bdb_joiningDeviceList
   \   00000D   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??bdb_TCProcessJoiningList_0 & 0xFFFF
    584            {
    585              tempJoiningDescNode = bdb_joiningDeviceList;
   \   000015   90....       MOV     DPTR,#bdb_joiningDeviceList
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V4,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V5,A
    586            
    587              while(tempJoiningDescNode)
    588              {
    589                if(tempJoiningDescNode->NodeJoinTimeout)
   \                     ??bdb_TCProcessJoiningList_1:
   \   00001F   E5..         MOV     A,?V4
   \   000021   240A         ADD     A,#0xa
   \   000023   F582         MOV     DPL,A
   \   000025   E4           CLR     A
   \   000026   35..         ADDC    A,?V5
   \   000028   F583         MOV     DPH,A
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6007         JZ      ??bdb_TCProcessJoiningList_2
    590                {
    591                  tempJoiningDescNode->NodeJoinTimeout--;
   \   00002D   14           DEC     A
   \   00002E   F0           MOVX    @DPTR,A
    592                }
    593                
    594                if(tempJoiningDescNode->NodeJoinTimeout == 0)
   \   00002F   6003         JZ      $+5
   \   000031   02....       LJMP    ??bdb_TCProcessJoiningList_3 & 0xFFFF
    595                {
    596                  //Check if the key exchange is required 
    597                  if(bdbAttributes.bdbTrustCenterRequireKeyExchange)
   \                     ??bdb_TCProcessJoiningList_2:
   \   000034   E5..         MOV     A,?V4
   \   000036   2402         ADD     A,#0x2
   \   000038   FE           MOV     R6,A
   \   000039   E4           CLR     A
   \   00003A   35..         ADDC    A,?V5
   \   00003C   FF           MOV     R7,A
   \   00003D   8E..         MOV     ?V0,R6
   \   00003F   8F..         MOV     ?V1,R7
   \   000041   75..00       MOV     ?V2,#0x0
   \   000044   90....       MOV     DPTR,#bdbAttributes + 17
   \   000047   E0           MOVX    A,@DPTR
   \   000048   604E         JZ      ??bdb_TCProcessJoiningList_4
    598                  {
    599                      AddrMgrEntry_t entry;
    600                      
    601                      entry.user = ADDRMGR_USER_DEFAULT;
   \   00004A   740A         MOV     A,#0xa
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   E4           CLR     A
   \   000050   F0           MOVX    @DPTR,A
    602                      osal_memcpy(entry.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
   \   000051                ; Setup parameters for call to function osal_memcpy
   \   000051   78..         MOV     R0,#?V0
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000056   7C08         MOV     R4,#0x8
   \   000058   7D00         MOV     R5,#0x0
   \   00005A   7410         MOV     A,#0x10
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   AA82         MOV     R2,DPL
   \   000061   AB83         MOV     R3,DPH
   \   000063   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000066   7403         MOV     A,#0x3
   \   000068   12....       LCALL   ?DEALLOC_XSTACK8
    603                      
    604                      if(AddrMgrEntryLookupExt(&entry))
   \   00006B                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   00006B   740A         MOV     A,#0xa
   \   00006D   12....       LCALL   ?XSTACK_DISP101_8
   \   000070   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000073   E9           MOV     A,R1
   \   000074   6022         JZ      ??bdb_TCProcessJoiningList_4
    605                      {
    606                        ZDSecMgrAPSRemove(entry.nwkAddr,entry.extAddr,tempJoiningDescNode->parentAddr);
   \   000076                ; Setup parameters for call to function ZDSecMgrAPSRemove
   \   000076   85..82       MOV     DPL,?V4
   \   000079   85..83       MOV     DPH,?V5
   \   00007C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00007F   740F         MOV     A,#0xf
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   AC82         MOV     R4,DPL
   \   000086   AD83         MOV     R5,DPH
   \   000088   740D         MOV     A,#0xd
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   12....       LCALL   ??Subroutine45_0 & 0xFFFF
    607                      }
    608                  }
   \                     ??CrossCallReturnLabel_82:
   \   000090   12....       LCALL   `??ZDSecMgrAPSRemove::?relay`; Banked call to: ZDSecMgrAPSRemove
   \   000093   7402         MOV     A,#0x2
   \   000095   12....       LCALL   ?DEALLOC_XSTACK8
    609                  
    610                  //Expired device either is legacy device not using the TCLK entry or got 
    611                  //removed from the network because of timeout, eitherway it is not using
    612                  //TCLK entry neither the Security user in the address manager, so free the entry
    613                  //in both tables.
    614                  
    615                  uint16 keyNvIndex;
    616                  APSME_TCLKDevEntry_t TCLKDevEntry;
    617                  uint8 found, index;
    618                  
    619                  //Remove the entry in address manager
    620                  ZDSecMgrAddrClear(tempJoiningDescNode->bdbJoiningNodeEui64);
   \                     ??bdb_TCProcessJoiningList_4:
   \   000098                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   000098   EE           MOV     A,R6
   \   000099   FA           MOV     R2,A
   \   00009A   EF           MOV     A,R7
   \   00009B   FB           MOV     R3,A
   \   00009C   12....       LCALL   `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
    621                  
    622                  //search for the entry in the TCLK table
    623                  keyNvIndex = APSME_SearchTCLinkKeyEntry(tempJoiningDescNode->bdbJoiningNodeEui64,&found, NULL);
   \   00009F                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   00009F   E4           CLR     A
   \   0000A0   F5..         MOV     ?V6,A
   \   0000A2   F5..         MOV     ?V7,A
   \   0000A4   78..         MOV     R0,#?V6
   \   0000A6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A9   7402         MOV     A,#0x2
   \   0000AB   12....       LCALL   ?XSTACK_DISP102_8
   \   0000AE   EE           MOV     A,R6
   \   0000AF   FA           MOV     R2,A
   \   0000B0   EF           MOV     A,R7
   \   0000B1   FB           MOV     R3,A
   \   0000B2   12....       LCALL   `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
   \   0000B5   7402         MOV     A,#0x2
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BA   8A..         MOV     ?V6,R2
   \   0000BC   8B..         MOV     ?V7,R3
   \   0000BE   AE..         MOV     R6,?V6
   \   0000C0   AF..         MOV     R7,?V7
    624                  
    625                  //If found, erase it.
    626                  if(found == TRUE)
   \   0000C2   85..82       MOV     DPL,?XSP + 0
   \   0000C5   85..83       MOV     DPH,?XSP + 1
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   6401         XRL     A,#0x1
   \   0000CB   7069         JNZ     ??bdb_TCProcessJoiningList_5
    627                  {
    628                    osal_memset(&TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
   \   0000CD                ; Setup parameters for call to function osal_memset
   \   0000CD   7C13         MOV     R4,#0x13
   \   0000CF   7D00         MOV     R5,#0x0
   \   0000D1   7900         MOV     R1,#0x0
   \   0000D3   7417         MOV     A,#0x17
   \   0000D5   12....       LCALL   ?XSTACK_DISP101_8
   \   0000D8   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    629                    TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
   \   0000DB   7427         MOV     A,#0x27
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   74FF         MOV     A,#-0x1
   \   0000E2   F0           MOVX    @DPTR,A
    630                    
    631                    //Increase the shift by one. Validate the maximum shift of the seed which is 15
    632                    index = keyNvIndex - ZCD_NV_TCLK_TABLE_START;
   \   0000E3   EE           MOV     A,R6
   \   0000E4   24EF         ADD     A,#-0x11
   \   0000E6   F8           MOV     R0,A
    633                    
    634                    TCLinkKeyFrmCntr[index].rxFrmCntr = 0;
   \   0000E7   75F009       MOV     B,#0x9
   \   0000EA   A4           MUL     AB
   \   0000EB   F8           MOV     R0,A
   \   0000EC   A9F0         MOV     R1,B
   \   0000EE   74..         MOV     A,#TCLinkKeyFrmCntr & 0xff
   \   0000F0   28           ADD     A,R0
   \   0000F1   F5..         MOV     ?V6,A
   \   0000F3   74..         MOV     A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   0000F5   39           ADDC    A,R1
   \   0000F6   F5..         MOV     ?V7,A
   \   0000F8   85..82       MOV     DPL,?V6
   \   0000FB   F583         MOV     DPH,A
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   12....       LCALL   ?Subroutine8 & 0xFFFF
    635                    TCLinkKeyFrmCntr[index].txFrmCntr = 0;
   \                     ??CrossCallReturnLabel_43:
   \   000104   85..82       MOV     DPL,?V6
   \   000107   85..83       MOV     DPH,?V7
   \   00010A   12....       LCALL   ??Subroutine33_0 & 0xFFFF
    636                    
    637                    //Update the entry
    638                    osal_nv_write(keyNvIndex,0,sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
   \                     ??CrossCallReturnLabel_41:
   \   00010D                ; Setup parameters for call to function osal_nv_write
   \   00010D   7417         MOV     A,#0x17
   \   00010F   12....       LCALL   ?XSTACK_DISP100_8
   \   000112   88..         MOV     ?V6,R0
   \   000114   89..         MOV     ?V7,R1
   \   000116   78..         MOV     R0,#?V6
   \   000118   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011B   75..13       MOV     ?V6,#0x13
   \   00011E   75..00       MOV     ?V7,#0x0
   \   000121   78..         MOV     R0,#?V6
   \   000123   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000126   7C00         MOV     R4,#0x0
   \   000128   7D00         MOV     R5,#0x0
   \   00012A   EE           MOV     A,R6
   \   00012B   FA           MOV     R2,A
   \   00012C   EF           MOV     A,R7
   \   00012D   FB           MOV     R3,A
   \   00012E   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000131   7404         MOV     A,#0x4
   \   000133   12....       LCALL   ?DEALLOC_XSTACK8
    639                  }
    640                  
    641                  if(pfnTCLinkKeyExchangeProcessCB)
   \                     ??bdb_TCProcessJoiningList_5:
   \   000136   90....       MOV     DPTR,#pfnTCLinkKeyExchangeProcessCB
   \   000139   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00013C   6042         JZ      ??bdb_TCProcessJoiningList_6
    642                  {
    643                    bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
    644                    osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
   \   00013E                ; Setup parameters for call to function osal_memcpy
   \   00013E   78..         MOV     R0,#?V0
   \   000140   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000143   7C08         MOV     R4,#0x8
   \   000145   7D00         MOV     R5,#0x0
   \   000147   7405         MOV     A,#0x5
   \   000149   12....       LCALL   ?XSTACK_DISP0_8
   \   00014C   AA82         MOV     R2,DPL
   \   00014E   AB83         MOV     R3,DPH
   \   000150   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000153   7403         MOV     A,#0x3
   \   000155   12....       LCALL   ?DEALLOC_XSTACK8
    645                    bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_EXCH_FAIL;
   \   000158   7401         MOV     A,#0x1
   \   00015A   12....       LCALL   ?XSTACK_DISP0_8
   \   00015D   7402         MOV     A,#0x2
   \   00015F   F0           MOVX    @DPTR,A
    646                    
    647                    bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
   \   000160                ; Setup parameters for call to function bdb_SendMsg
   \   000160   14           DEC     A
   \   000161   12....       LCALL   ?XSTACK_DISP100_8
   \   000164   88..         MOV     ?V0,R0
   \   000166   89..         MOV     ?V1,R1
   \   000168   78..         MOV     R0,#?V0
   \   00016A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016D   7C09         MOV     R4,#0x9
   \   00016F   7B00         MOV     R3,#0x0
   \   000171   7A09         MOV     R2,#0x9
   \   000173   90....       MOV     DPTR,#bdb_TaskID
   \   000176   E0           MOVX    A,@DPTR
   \   000177   F9           MOV     R1,A
   \   000178   12....       LCALL   `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   00017B   7402         MOV     A,#0x2
   \   00017D   12....       LCALL   ?DEALLOC_XSTACK8
    648                  }
    649                 
    650                  //Free the device from the list
    651                  bdb_TCJoiningDeviceFree(tempJoiningDescNode);
   \                     ??bdb_TCProcessJoiningList_6:
   \   000180                ; Setup parameters for call to function bdb_TCJoiningDeviceFree
   \   000180   AA..         MOV     R2,?V4
   \   000182   AB..         MOV     R3,?V5
   \   000184   12....       LCALL   `??bdb_TCJoiningDeviceFree::?relay`; Banked call to: bdb_TCJoiningDeviceFree
    652                }
    653                tempJoiningDescNode = tempJoiningDescNode->nextDev;
   \                     ??bdb_TCProcessJoiningList_3:
   \   000187   E5..         MOV     A,?V4
   \   000189   240B         ADD     A,#0xb
   \   00018B   F582         MOV     DPL,A
   \   00018D   E4           CLR     A
   \   00018E   35..         ADDC    A,?V5
   \   000190   F583         MOV     DPH,A
   \   000192   E0           MOVX    A,@DPTR
   \   000193   F5..         MOV     ?V4,A
   \   000195   A3           INC     DPTR
   \   000196   E0           MOVX    A,@DPTR
   \   000197   F5..         MOV     ?V5,A
    654              }
   \   000199   E5..         MOV     A,?V4
   \   00019B   45..         ORL     A,?V5
   \   00019D   6003         JZ      $+5
   \   00019F   02....       LJMP    ??bdb_TCProcessJoiningList_1 & 0xFFFF
    655            }
    656          
    657            //we are done with the list
    658            if(bdb_joiningDeviceList == NULL)
   \   0001A2   90....       MOV     DPTR,#bdb_joiningDeviceList
   \   0001A5   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0001A8   700C         JNZ     ??bdb_TCProcessJoiningList_7
    659            {
    660              osal_stop_timerEx(bdb_TaskID,BDB_TC_JOIN_TIMEOUT);
   \                     ??bdb_TCProcessJoiningList_0:
   \   0001AA                ; Setup parameters for call to function osal_stop_timerEx
   \   0001AA   7A00         MOV     R2,#0x0
   \   0001AC   7B08         MOV     R3,#0x8
   \   0001AE   90....       MOV     DPTR,#bdb_TaskID
   \   0001B1   E0           MOVX    A,@DPTR
   \   0001B2   F9           MOV     R1,A
   \   0001B3   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    661            }
    662          }
   \                     ??bdb_TCProcessJoiningList_7:
   \   0001B6   742A         MOV     A,#0x2a
   \   0001B8                REQUIRE ?Subroutine5
   \   0001B8                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E4           CLR     A
   \   000001                REQUIRE ??Subroutine33_0
   \   000001                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    663          
    664          
    665          
    666          /****************************************************************************
    667           * @fn          bdb_TCjoiningDeviceComplete
    668           *
    669           * @brief       This function frees a joining device from the list that has 
    670           *              finished TC link key exchange process
    671           *
    672           * @param       JoiningExtAddr - Extended address of the device
    673           *
    674           * @return      none
    675           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    676          void bdb_TCjoiningDeviceComplete(uint8* JoiningExtAddr)
   \                     bdb_TCjoiningDeviceComplete:
    677          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
    678            bdb_joiningDeviceList_t* tempJoiningDescNode;
    679            
    680            if((bdb_joiningDeviceList != NULL) && (JoiningExtAddr != NULL))
   \   00000E   90....       MOV     DPTR,#bdb_joiningDeviceList
   \   000011   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000014   7003         JNZ     $+5
   \   000016   02....       LJMP    ??bdb_TCjoiningDeviceComplete_0 & 0xFFFF
   \   000019   EA           MOV     A,R2
   \   00001A   45..         ORL     A,?V1
   \   00001C   7003         JNZ     $+5
   \   00001E   02....       LJMP    ??bdb_TCjoiningDeviceComplete_0 & 0xFFFF
    681            {
    682              tempJoiningDescNode = bdb_joiningDeviceList;
   \   000021   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A982         MOV     R1,DPL
   \   00002C   AA83         MOV     R2,DPH
   \   00002E   89..         MOV     ?V4,R1
   \   000030   8A..         MOV     ?V5,R2
   \   000032   75..00       MOV     ?V6,#0x0
   \   000035                ; Setup parameters for call to function osal_memcmp
   \   000035   85....       MOV     ?V8,?V0
   \   000038   85....       MOV     ?V9,?V1
   \   00003B   75..00       MOV     ?V10,#0x0
   \   00003E   78..         MOV     R0,#?V8
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000043   7C08         MOV     R4,#0x8
   \   000045   7D00         MOV     R5,#0x0
   \   000047   AB..         MOV     R3,?V6
    683              
    684              while(tempJoiningDescNode != NULL)
    685              {
    686                if(osal_memcmp(tempJoiningDescNode->bdbJoiningNodeEui64,JoiningExtAddr,Z_EXTADDR_LEN))
   \   000049   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00004C   7403         MOV     A,#0x3
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000051   E9           MOV     A,R1
   \   000052   6044         JZ      ??bdb_TCjoiningDeviceComplete_1
    687                {
    688                  if(pfnTCLinkKeyExchangeProcessCB)
   \   000054   90....       MOV     DPTR,#pfnTCLinkKeyExchangeProcessCB
   \   000057   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00005A   6033         JZ      ??bdb_TCjoiningDeviceComplete_2
    689                  {
    690                    bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
    691                    osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
   \   00005C                ; Setup parameters for call to function osal_memcpy
   \   00005C   78..         MOV     R0,#?V4
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000061   7C08         MOV     R4,#0x8
   \   000063   7D00         MOV     R5,#0x0
   \   000065   7404         MOV     A,#0x4
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   AA82         MOV     R2,DPL
   \   00006C   AB83         MOV     R3,DPH
   \   00006E   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000071   7403         MOV     A,#0x3
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
    692                    bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_EXCH_SUCCESS;
   \   000076   12....       LCALL   ?Subroutine7 & 0xFFFF
    693                    
    694                    bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
    695                  }        
   \                     ??CrossCallReturnLabel_36:
   \   000079   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007C   7C09         MOV     R4,#0x9
   \   00007E   7B00         MOV     R3,#0x0
   \   000080   7A09         MOV     R2,#0x9
   \   000082   90....       MOV     DPTR,#bdb_TaskID
   \   000085   E0           MOVX    A,@DPTR
   \   000086   F9           MOV     R1,A
   \   000087   12....       LCALL   `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   00008A   7402         MOV     A,#0x2
   \   00008C   12....       LCALL   ?DEALLOC_XSTACK8
    696                  
    697                  bdb_TCJoiningDeviceFree(tempJoiningDescNode);
   \                     ??bdb_TCjoiningDeviceComplete_2:
   \   00008F                ; Setup parameters for call to function bdb_TCJoiningDeviceFree
   \   00008F   EE           MOV     A,R6
   \   000090   FA           MOV     R2,A
   \   000091   EF           MOV     A,R7
   \   000092   FB           MOV     R3,A
   \   000093   12....       LCALL   `??bdb_TCJoiningDeviceFree::?relay`; Banked call to: bdb_TCJoiningDeviceFree
    698                  break;
   \   000096   800A         SJMP    ??bdb_TCjoiningDeviceComplete_3
    699                }
    700                tempJoiningDescNode = tempJoiningDescNode->nextDev;
   \                     ??bdb_TCjoiningDeviceComplete_1:
   \   000098   12....       LCALL   ?Subroutine24 & 0xFFFF
    701              }
   \                     ??CrossCallReturnLabel_27:
   \   00009B   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00009E   EE           MOV     A,R6
   \   00009F   4F           ORL     A,R7
   \   0000A0   7082         JNZ     ??CrossCallReturnLabel_81
    702             
    703              if(bdb_joiningDeviceList == NULL)
   \                     ??bdb_TCjoiningDeviceComplete_3:
   \   0000A2   90....       MOV     DPTR,#bdb_joiningDeviceList
   \   0000A5   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0000A8   700C         JNZ     ??bdb_TCjoiningDeviceComplete_0
    704              {
    705                osal_stop_timerEx(bdb_TaskID,BDB_TC_JOIN_TIMEOUT);
   \   0000AA                ; Setup parameters for call to function osal_stop_timerEx
   \   0000AA   7A00         MOV     R2,#0x0
   \   0000AC   7B08         MOV     R3,#0x8
   \   0000AE   90....       MOV     DPTR,#bdb_TaskID
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F9           MOV     R1,A
   \   0000B3   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    706              }
    707            }
    708          }
   \                     ??bdb_TCjoiningDeviceComplete_0:
   \   0000B6   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   7401         MOV     A,#0x1
   \   000008                REQUIRE ??Subroutine32_0
   \   000008                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function bdb_SendMsg
   \   000001                ; Setup parameters for call to function bdb_SendMsg
   \   000001                ; Setup parameters for call to function bdb_SendMsg
   \   000001                ; Setup parameters for call to function bdb_SendMsg
   \   000001                ; Setup parameters for call to function bdb_SendMsg
   \   000001   A8..         MOV     R0,?XSP + 0
   \   000003   A9..         MOV     R1,?XSP + 1
   \   000005   88..         MOV     ?V0,R0
   \   000007   89..         MOV     ?V1,R1
   \   000009   78..         MOV     R0,#?V0
   \   00000B   22           RET
    709          
    710          
    711          
    712          /****************************************************************************
    713           * @fn          bdb_TCJoiningDeviceFree
    714           *
    715           * @brief       This function frees a joining device from the list.
    716           *
    717           * @param       ZSuccess - If the device was found and erased
    718           * @param       ZInvalidParameter - Not found
    719           *
    720           * @return      none
    721           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    722          ZStatus_t bdb_TCJoiningDeviceFree(bdb_joiningDeviceList_t* JoiningDeviceToRemove)
   \                     bdb_TCJoiningDeviceFree:
    723          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A982         MOV     R1,DPL
   \   000011   AA83         MOV     R2,DPH
   \   000013   89..         MOV     ?V4,R1
   \   000015   8A..         MOV     ?V5,R2
   \   000017   75..00       MOV     ?V6,#0x0
   \   00001A                ; Setup parameters for call to function osal_memcmp
   \   00001A   78..         MOV     R0,#?V4
   \   00001C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00001F   7C08         MOV     R4,#0x8
   \   000021   7D00         MOV     R5,#0x0
   \   000023   90....       MOV     DPTR,#bdb_joiningDeviceList
   \   000026   12....       LCALL   ?Subroutine17 & 0xFFFF
    724            bdb_joiningDeviceList_t* descCurrent;
    725            bdb_joiningDeviceList_t* descPrev;
    726            
    727            //validate empty list?
    728            
    729            //Is it the first?
    730            if(osal_memcmp(bdb_joiningDeviceList->bdbJoiningNodeEui64, JoiningDeviceToRemove->bdbJoiningNodeEui64, Z_EXTADDR_LEN))
   \                     ??CrossCallReturnLabel_14:
   \   000029   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00002C   7403         MOV     A,#0x3
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000031   E9           MOV     A,R1
   \   000032   90....       MOV     DPTR,#bdb_joiningDeviceList
   \   000035   6013         JZ      ??bdb_TCJoiningDeviceFree_0
    731            {
    732              descCurrent = bdb_joiningDeviceList;
   \   000037   12....       LCALL   ??Subroutine45_0 & 0xFFFF
    733              bdb_joiningDeviceList = bdb_joiningDeviceList->nextDev;
   \                     ??CrossCallReturnLabel_83:
   \   00003A   90....       MOV     DPTR,#bdb_joiningDeviceList
   \   00003D   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000040   90....       MOV     DPTR,#bdb_joiningDeviceList
   \   000043   E8           MOV     A,R0
   \   000044   F0           MOVX    @DPTR,A
   \   000045   A3           INC     DPTR
   \   000046   E9           MOV     A,R1
   \   000047   F0           MOVX    @DPTR,A
    734              osal_mem_free( descCurrent );
   \   000048                ; Setup parameters for call to function osal_mem_free
   \   000048   803B         SJMP    ??bdb_TCJoiningDeviceFree_1
    735              return ZSuccess;
    736            }
    737            
    738            descPrev = NULL;
    739            descCurrent = bdb_joiningDeviceList;
    740            
    741            while(descCurrent != NULL)
    742            {
    743              if(osal_memcmp(descCurrent->nextDev->bdbJoiningNodeEui64, JoiningDeviceToRemove->bdbJoiningNodeEui64, Z_EXTADDR_LEN))
    744              {
    745                descPrev = descCurrent;
    746                break;
    747              }
    748              descCurrent = descCurrent->nextDev;
   \                     ??bdb_TCJoiningDeviceFree_0:
   \   00004A   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00004D   603D         JZ      ??bdb_TCJoiningDeviceFree_2
   \   00004F   EA           MOV     A,R2
   \   000050   240B         ADD     A,#0xb
   \   000052   FE           MOV     R6,A
   \   000053   E4           CLR     A
   \   000054   3B           ADDC    A,R3
   \   000055   FF           MOV     R7,A
   \   000056                ; Setup parameters for call to function osal_memcmp
   \   000056   78..         MOV     R0,#?V4
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005B   7C08         MOV     R4,#0x8
   \   00005D   7D00         MOV     R5,#0x0
   \   00005F   8E82         MOV     DPL,R6
   \   000061   8F83         MOV     DPH,R7
   \   000063   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000066   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000069   7403         MOV     A,#0x3
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006E   E9           MOV     A,R1
   \   00006F   8E82         MOV     DPL,R6
   \   000071   8F83         MOV     DPH,R7
   \   000073   60D5         JZ      ??bdb_TCJoiningDeviceFree_0
    749            }
    750            if(descPrev == NULL)
    751            {
    752              //Not found
    753              return ZInvalidParameter;
    754            }
    755            
    756            descPrev->nextDev = descPrev->nextDev->nextDev;
   \   000075   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000078   8E82         MOV     DPL,R6
   \   00007A   8F83         MOV     DPH,R7
   \   00007C   E8           MOV     A,R0
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   A3           INC     DPTR
   \   00007F   E9           MOV     A,R1
   \   000080   F0           MOVX    @DPTR,A
    757              
    758            osal_mem_free( JoiningDeviceToRemove );
   \   000081                ; Setup parameters for call to function osal_mem_free
   \   000081   AA..         MOV     R2,?V0
   \   000083   AB..         MOV     R3,?V1
   \                     ??bdb_TCJoiningDeviceFree_1:
   \   000085   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    759            return ZSuccess;
   \   000088   7900         MOV     R1,#0x0
   \   00008A   8002         SJMP    ??bdb_TCJoiningDeviceFree_3
   \                     ??bdb_TCJoiningDeviceFree_2:
   \   00008C   7902         MOV     R1,#0x2
   \                     ??bdb_TCJoiningDeviceFree_3:
   \   00008E   7F07         MOV     R7,#0x7
   \   000090   02....       LJMP    ?BANKED_LEAVE_XDATA
    760          
    761          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000003   A982         MOV     R1,DPL
   \   000005   AA83         MOV     R2,DPH
   \   000007   7B00         MOV     R3,#0x0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C8           XCH     A,R0
   \   000005   240B         ADD     A,#0xb
   \   000007   F582         MOV     DPL,A
   \   000009   E4           CLR     A
   \   00000A   38           ADDC    A,R0
   \   00000B   F583         MOV     DPH,A
   \   00000D   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET
    762          
    763           /*********************************************************************
    764           * @fn          bdb_setJoinUsesInstallCodeKey
    765           *
    766           * @brief       Set BDB attribute bdbJoinUsesInstallCodeKey.
    767           *
    768           * @param       set - If TRUE only devices with IC register in TC can join the 
    769           *              nwk, otherwise devices may or not have a IC register
    770           *
    771           * @return      none
    772           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    773          void bdb_setJoinUsesInstallCodeKey(bool set)
   \                     bdb_setJoinUsesInstallCodeKey:
    774          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    775            bdbAttributes.bdbJoinUsesInstallCodeKey = set;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#bdbAttributes + 15
   \   000008   F0           MOVX    @DPTR,A
    776            if(set)
   \   000009   90....       MOV     DPTR,#zgAllowInstallCodes
   \   00000C   6004         JZ      ??bdb_setJoinUsesInstallCodeKey_0
    777            {
    778              zgAllowInstallCodes = ZG_IC_MUST_USED;
   \   00000E   7402         MOV     A,#0x2
   \   000010   8002         SJMP    ??bdb_setJoinUsesInstallCodeKey_1
    779            }
    780            else
    781            {
    782              zgAllowInstallCodes = ZG_IC_SUPPORTED_NOT_REQUIRED;
   \                     ??bdb_setJoinUsesInstallCodeKey_0:
   \   000012   7401         MOV     A,#0x1
    783            }
   \                     ??bdb_setJoinUsesInstallCodeKey_1:
   \   000014   02....       LJMP    ??Subroutine34_0 & 0xFFFF
    784          }
    785          #endif
    786          
    787           /*********************************************************************
    788           * @fn          bdb_StartCommissioning
    789           *
    790           * @brief       Start the commissioning process setting the commissioning mode given.
    791           *
    792           * @param       mode - refer to bdbCommissioningMode
    793           *
    794           * @return      none
    795           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    796          void bdb_StartCommissioning(uint8 mode)
   \                     bdb_StartCommissioning:
    797          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
    798            //Application cannot request to set the device in initialization mode or parent lost
    799            mode &= ~(BDB_COMMISSIONING_MODE_INITIALIZATION | BDB_COMMISSIONING_MODE_PARENT_LOST);
    800              
    801          #ifdef BDB_TL_INITIATOR
    802            if ( touchlinkFNReset == TRUE )
    803            {
    804              return;
    805            }
    806          #else
    807            //Commissioning mode used only for initiator
    808            mode &= ~BDB_COMMISSIONING_MODE_INITIATOR_TL;
   \   00000C   53..CE       ANL     ?V0,#0xce
    809          #endif
    810            
    811          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==0)    
    812            //Commissioning mode used only for devices with F&B
    813            mode &= ~BDB_COMMISSIONING_MODE_FINDING_BINDING;
    814          #endif
    815           
    816            //If we have running process or the machine state is triggered, then just append and it will be excecuted
    817            if((bdbAttributes.bdbCommissioningMode) || (osal_get_timeoutEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE)))
   \   00000F   90....       MOV     DPTR,#bdbAttributes + 11
   \   000012   E0           MOVX    A,@DPTR
   \   000013   7012         JNZ     ??bdb_StartCommissioning_0
   \   000015                ; Setup parameters for call to function osal_get_timeoutEx
   \   000015   7A04         MOV     R2,#0x4
   \   000017   7B00         MOV     R3,#0x0
   \   000019   90....       MOV     DPTR,#bdb_TaskID
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000021   EA           MOV     A,R2
   \   000022   4B           ORL     A,R3
   \   000023   4C           ORL     A,R4
   \   000024   4D           ORL     A,R5
   \   000025   6027         JZ      ??bdb_StartCommissioning_1
    818            {
    819          #if ZG_BUILD_ENDDEVICE_TYPE
    820              if(ZG_DEVICE_ENDDEVICE_TYPE)
    821              {
    822                //Devices with parent lost are not allowed to perform actions
    823                if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)
    824                {
    825                  return;
    826                }
    827              }
    828          #endif
    829              
    830              //If we are on the network and got requested to do nwk steering, we do not need to wait other process, 
    831              // just send permit joining and report the application
    832              if((bdbAttributes.bdbNodeIsOnANetwork) && (mode & BDB_COMMISSIONING_MODE_NWK_STEERING))
   \                     ??bdb_StartCommissioning_0:
   \   000027   90....       MOV     DPTR,#bdbAttributes + 14
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6013         JZ      ??bdb_StartCommissioning_2
   \   00002D   E5..         MOV     A,?V0
   \   00002F   A2E1         MOV     C,0xE0 /* A   */.1
   \   000031   500D         JNC     ??bdb_StartCommissioning_2
    833              {
    834                bdb_nwkSteeringDeviceOnNwk();
   \   000033                ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
   \   000033   12....       LCALL   `??bdb_nwkSteeringDeviceOnNwk::?relay`; Banked call to: bdb_nwkSteeringDeviceOnNwk
    835                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
   \   000036                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000036   7A01         MOV     R2,#0x1
   \   000038   7904         MOV     R1,#0x4
   \   00003A   12....       LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    836                
    837                //Clean nwk steering
    838                mode ^= BDB_COMMISSIONING_MODE_NWK_STEERING; 
   \   00003D   63..02       XRL     ?V0,#0x2
    839              }
    840              
    841              //add the remaining valid commissioning modes requested, those will be process when bdb finish its current process
    842              bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
   \                     ??bdb_StartCommissioning_2:
   \   000040   743F         MOV     A,#0x3f
   \   000042   55..         ANL     A,?V0
   \   000044   F8           MOV     R0,A
   \   000045   90....       MOV     DPTR,#bdbAttributes + 11
   \   000048   E0           MOVX    A,@DPTR
   \   000049   48           ORL     A,R0
   \   00004A   F0           MOVX    @DPTR,A
    843              return;      
   \   00004B   02....       LJMP    ??bdb_StartCommissioning_3 & 0xFFFF
    844            }
    845          
    846            //Save the commissioning modes valid requested
    847            bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
   \                     ??bdb_StartCommissioning_1:
   \   00004E   743F         MOV     A,#0x3f
   \   000050   55..         ANL     A,?V0
   \   000052   FE           MOV     R6,A
   \   000053   90....       MOV     DPTR,#bdbAttributes + 11
   \   000056   E0           MOVX    A,@DPTR
   \   000057   4E           ORL     A,R6
   \   000058   F0           MOVX    @DPTR,A
    848            
    849            
    850            //Start processing the initialization, once per power cycle.
    851            if(!bdb_initialization)
   \   000059   90....       MOV     DPTR,#bdb_initialization
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   6003         JZ      $+5
   \   00005F   02....       LJMP    ??bdb_StartCommissioning_4 & 0xFFFF
    852            {
    853              bdb_initialization = TRUE;
   \   000062   7401         MOV     A,#0x1
   \   000064   F0           MOVX    @DPTR,A
    854              
    855          #ifdef BDB_REPORTING
    856              //Delete NV data if startup was with factory reset
    857              if(ZDO_INITDEV_NEW_NETWORK_STATE == ZDApp_ReadNetworkRestoreState())
   \   000065                ; Setup parameters for call to function ZDApp_ReadNetworkRestoreState
   \   000065   12....       LCALL   `??ZDApp_ReadNetworkRestoreState::?relay`; Banked call to: ZDApp_ReadNetworkRestoreState
   \   000068   E9           MOV     A,R1
   \   000069   6401         XRL     A,#0x1
   \   00006B   701A         JNZ     ??bdb_StartCommissioning_5
    858              {
    859                //Factory reset bdb reporting NV data
    860                uint16 attrRepNvLen = osal_nv_item_len( ZCD_NV_BDBREPORTINGCONFIG );
   \   00006D                ; Setup parameters for call to function osal_nv_item_len
   \   00006D   7A56         MOV     R2,#0x56
   \   00006F   7B00         MOV     R3,#0x0
   \   000071   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000074   8A..         MOV     ?V2,R2
   \   000076   8B..         MOV     ?V3,R3
   \   000078   AC..         MOV     R4,?V2
   \   00007A   AD..         MOV     R5,?V3
    861                if ( attrRepNvLen > 0 )
   \   00007C   EC           MOV     A,R4
   \   00007D   4D           ORL     A,R5
   \   00007E   6007         JZ      ??bdb_StartCommissioning_5
    862                {
    863                  osal_nv_delete( ZCD_NV_BDBREPORTINGCONFIG, attrRepNvLen );
   \   000080                ; Setup parameters for call to function osal_nv_delete
   \   000080   7A56         MOV     R2,#0x56
   \   000082   7B00         MOV     R3,#0x0
   \   000084   12....       LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
    864                }
    865              }
    866          
    867              //Construct the Endpoint-cluster array
    868              bdb_RepConstructReportingData();
   \                     ??bdb_StartCommissioning_5:
   \   000087                ; Setup parameters for call to function bdb_RepConstructReportingData
   \   000087   12....       LCALL   `??bdb_RepConstructReportingData::?relay`; Banked call to: bdb_RepConstructReportingData
    869          #endif //BDB_REPORTING
    870          
    871              osal_nv_read(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
   \   00008A                ; Setup parameters for call to function osal_nv_read
   \   00008A   75....       MOV     ?V2,#(bdbAttributes + 14) & 0xff
   \   00008D   75....       MOV     ?V3,#((bdbAttributes + 14) >> 8) & 0xff
   \   000090   78..         MOV     R0,#?V2
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000095   75..01       MOV     ?V2,#0x1
   \   000098   75..00       MOV     ?V3,#0x0
   \   00009B   78..         MOV     R0,#?V2
   \   00009D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A0   7C00         MOV     R4,#0x0
   \   0000A2   7D00         MOV     R5,#0x0
   \   0000A4   7A55         MOV     R2,#0x55
   \   0000A6   7B00         MOV     R3,#0x0
   \   0000A8   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000AB   7404         MOV     A,#0x4
   \   0000AD   12....       LCALL   ?DEALLOC_XSTACK8
    872              
    873              //Are we on a network
    874              if(bdbAttributes.bdbNodeIsOnANetwork == TRUE)
   \   0000B0   90....       MOV     DPTR,#bdbAttributes + 14
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   6401         XRL     A,#0x1
   \   0000B6   6003         JZ      $+5
   \   0000B8   02....       LJMP    ??bdb_StartCommissioning_4 & 0xFFFF
    875              {
    876          #ifdef ZG_BUILD_JOINING_TYPE
    877                //Only for joining devices validate the joining procedure
    878                if(ZG_DEVICE_JOINING_TYPE)
   \   0000BB   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   6401         XRL     A,#0x1
   \   0000C1   6008         JZ      ??bdb_StartCommissioning_6
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   6402         XRL     A,#0x2
   \   0000C6   6003         JZ      $+5
   \   0000C8   02....       LJMP    ??bdb_StartCommissioning_7 & 0xFFFF
    879                {
    880                  //If we got into a network
    881                  if(!osal_isbufset( AIB_apsTrustCenterAddress, 0x00, Z_EXTADDR_LEN ))
   \                     ??bdb_StartCommissioning_6:
   \   0000CB                ; Setup parameters for call to function osal_isbufset
   \   0000CB   7C08         MOV     R4,#0x8
   \   0000CD   7900         MOV     R1,#0x0
   \   0000CF   90....       MOV     DPTR,#AIB_apsTrustCenterAddress
   \   0000D2   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   0000D5   12....       LCALL   `??osal_isbufset::?relay`; Banked call to: osal_isbufset
   \   0000D8   E9           MOV     A,R1
   \   0000D9   6003         JZ      $+5
   \   0000DB   02....       LJMP    ??bdb_StartCommissioning_7 & 0xFFFF
    882                  {
    883                    //Which is not distributed
    884                    if(!APSME_IsDistributedSecurity())
   \   0000DE                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   0000DE   12....       LCALL   `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   0000E1   E9           MOV     A,R1
   \   0000E2   6003         JZ      $+5
   \   0000E4   02....       LJMP    ??bdb_StartCommissioning_7 & 0xFFFF
    885                    {
    886                      uint8 keyAttributes;
    887                      osal_nv_read(ZCD_NV_TCLK_TABLE_START, osal_offsetof(APSME_TCLKDevEntry_t,keyAttributes), sizeof(uint8), &keyAttributes);
   \   0000E7                ; Setup parameters for call to function osal_nv_read
   \   0000E7   A8..         MOV     R0,?XSP + 0
   \   0000E9   A9..         MOV     R1,?XSP + 1
   \   0000EB   88..         MOV     ?V2,R0
   \   0000ED   89..         MOV     ?V3,R1
   \   0000EF   78..         MOV     R0,#?V2
   \   0000F1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F4   75..01       MOV     ?V2,#0x1
   \   0000F7   75..00       MOV     ?V3,#0x0
   \   0000FA   78..         MOV     R0,#?V2
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FF   7C10         MOV     R4,#0x10
   \   000101   7D00         MOV     R5,#0x0
   \   000103   7A11         MOV     R2,#0x11
   \   000105   7B01         MOV     R3,#0x1
   \   000107   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00010A   7404         MOV     A,#0x4
   \   00010C   12....       LCALL   ?DEALLOC_XSTACK8
    888                      //And the TCLK procedure got not complete, then reset the device parameters to FN
    889                      if((keyAttributes != ZG_NON_R21_NWK_JOINED) && (keyAttributes != ZG_VERIFIED_KEY))
   \   00010F   85..82       MOV     DPL,?XSP + 0
   \   000112   85..83       MOV     DPH,?XSP + 1
   \   000115   E0           MOVX    A,@DPTR
   \   000116   64FD         XRL     A,#0xfd
   \   000118   7003         JNZ     $+5
   \   00011A   02....       LJMP    ??bdb_StartCommissioning_7 & 0xFFFF
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   6402         XRL     A,#0x2
   \   000120   607C         JZ      ??bdb_StartCommissioning_7
    890                      {
    891                        //Force to initialize the entry
    892                        APSME_TCLKDevEntry_t APSME_TCLKDevEntry;
    893                        
    894                        osal_memset(&APSME_TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
   \   000122                ; Setup parameters for call to function osal_memset
   \   000122   7C13         MOV     R4,#0x13
   \   000124   7D00         MOV     R5,#0x0
   \   000126   7900         MOV     R1,#0x0
   \   000128   7401         MOV     A,#0x1
   \   00012A   12....       LCALL   ?XSTACK_DISP101_8
   \   00012D   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    895                        APSME_TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
   \   000130   7411         MOV     A,#0x11
   \   000132   12....       LCALL   ?XSTACK_DISP0_8
   \   000135   74FF         MOV     A,#-0x1
   \   000137   F0           MOVX    @DPTR,A
    896                        osal_nv_write(ZCD_NV_TCLK_TABLE_START, 0, sizeof(APSME_TCLKDevEntry_t), &APSME_TCLKDevEntry);
   \   000138                ; Setup parameters for call to function osal_nv_write
   \   000138   7401         MOV     A,#0x1
   \   00013A   12....       LCALL   ?XSTACK_DISP100_8
   \   00013D   88..         MOV     ?V2,R0
   \   00013F   89..         MOV     ?V3,R1
   \   000141   78..         MOV     R0,#?V2
   \   000143   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000146   75..13       MOV     ?V2,#0x13
   \   000149   75..00       MOV     ?V3,#0x0
   \   00014C   78..         MOV     R0,#?V2
   \   00014E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000151   7C00         MOV     R4,#0x0
   \   000153   7D00         MOV     R5,#0x0
   \   000155   7A11         MOV     R2,#0x11
   \   000157   7B01         MOV     R3,#0x1
   \   000159   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00015C   7404         MOV     A,#0x4
   \   00015E   12....       LCALL   ?DEALLOC_XSTACK8
    897                        TCLinkKeyFrmCntr[0].txFrmCntr = 0;
   \   000161   90....       MOV     DPTR,#TCLinkKeyFrmCntr
   \   000164   12....       LCALL   ?Subroutine8 & 0xFFFF
    898                        TCLinkKeyFrmCntr[0].rxFrmCntr = 0;
   \                     ??CrossCallReturnLabel_44:
   \   000167   A3           INC     DPTR
   \   000168   12....       LCALL   ??Subroutine33_0 & 0xFFFF
    899                        
    900                        
    901                        //reset the device parameters to FN
    902                        bdbAttributes.bdbNodeIsOnANetwork = FALSE;
   \                     ??CrossCallReturnLabel_42:
   \   00016B   90....       MOV     DPTR,#bdbAttributes + 14
   \   00016E   F0           MOVX    @DPTR,A
    903                        osal_nv_write(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
   \   00016F                ; Setup parameters for call to function osal_nv_write
   \   00016F   75....       MOV     ?V2,#(bdbAttributes + 14) & 0xff
   \   000172   75....       MOV     ?V3,#((bdbAttributes + 14) >> 8) & 0xff
   \   000175   78..         MOV     R0,#?V2
   \   000177   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017A   75..01       MOV     ?V2,#0x1
   \   00017D   75..00       MOV     ?V3,#0x0
   \   000180   78..         MOV     R0,#?V2
   \   000182   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000185   7C00         MOV     R4,#0x0
   \   000187   7D00         MOV     R5,#0x0
   \   000189   7A55         MOV     R2,#0x55
   \   00018B   7B00         MOV     R3,#0x0
   \   00018D   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000190   7404         MOV     A,#0x4
   \   000192   12....       LCALL   ?DEALLOC_XSTACK8
    904                        zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
   \   000195                ; Setup parameters for call to function zgWriteStartupOptions
   \   000195   7A03         MOV     R2,#0x3
   \   000197   79FF         MOV     R1,#-0x1
   \   000199   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    905                        
    906                        //Then start the commissioning process requested
    907                        bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   00019C   802F         SJMP    ??bdb_StartCommissioning_4
    908                        osal_set_event( bdb_TaskID, BDB_CHANGE_COMMISSIONING_STATE );
    909                        return;
    910                      }
    911                    }
    912                  }
    913                }
    914          #endif //ZG_BUILD_JOINING_TYPE
    915          
    916                //Set the initialization
    917                bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_INITIALIZATION;
    918                bdbCommissioningProcedureState.bdbCommissioningState = BDB_INITIALIZATION;
   \                     ??bdb_StartCommissioning_7:
   \   00019E   90....       MOV     DPTR,#bdbCommissioningProcedureState
   \   0001A1   7407         MOV     A,#0x7
   \   0001A3   F0           MOVX    @DPTR,A
    919                bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
   \   0001A4   7410         MOV     A,#0x10
   \   0001A6   4E           ORL     A,R6
   \   0001A7   F8           MOV     R0,A
   \   0001A8   90....       MOV     DPTR,#bdbAttributes + 11
   \   0001AB   E0           MOVX    A,@DPTR
   \   0001AC   48           ORL     A,R0
   \   0001AD   F0           MOVX    @DPTR,A
    920                
    921                if(ZDOInitDevice(0) == ZDO_INITDEV_RESTORED_NETWORK_STATE)
   \   0001AE                ; Setup parameters for call to function ZDOInitDeviceEx
   \   0001AE   7900         MOV     R1,#0x0
   \   0001B0   7A00         MOV     R2,#0x0
   \   0001B2   7B00         MOV     R3,#0x0
   \   0001B4   12....       LCALL   `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
   \   0001B7   E9           MOV     A,R1
   \   0001B8   7005         JNZ     ??bdb_StartCommissioning_8
    922                {
    923          #ifdef BDB_REPORTING
    924                  //Mark the clusterEndpoint entries that have binding, starts reporting if at least one entry was marked
    925                  bdb_RepUpdateMarkBindings();
   \   0001BA                ; Setup parameters for call to function bdb_RepUpdateMarkBindings
   \   0001BA   12....       LCALL   `??bdb_RepUpdateMarkBindings::?relay`; Banked call to: bdb_RepUpdateMarkBindings
    926          #endif
    927                  return;
   \   0001BD   801E         SJMP    ??bdb_StartCommissioning_3
    928                }
    929                bdb_setNodeIsOnANetwork(FALSE);  
   \                     ??bdb_StartCommissioning_8:
   \   0001BF                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   0001BF   7900         MOV     R1,#0x0
   \   0001C1   12....       LCALL   `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
    930                //Not in the network
    931                bdb_reportCommissioningState(BDB_INITIALIZATION,FALSE);
   \   0001C4                ; Setup parameters for call to function bdb_reportCommissioningState
   \   0001C4   7A00         MOV     R2,#0x0
   \   0001C6   7907         MOV     R1,#0x7
   \   0001C8   12....       LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    932                return;
   \   0001CB   8010         SJMP    ??bdb_StartCommissioning_3
    933              }
    934            }
    935            
    936            //Start the commissioning process
    937            bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \                     ??bdb_StartCommissioning_4:
   \   0001CD   90....       MOV     DPTR,#bdbCommissioningProcedureState
   \   0001D0   E4           CLR     A
   \   0001D1   F0           MOVX    @DPTR,A
    938            osal_set_event( bdb_TaskID, BDB_CHANGE_COMMISSIONING_STATE );
   \   0001D2                ; Setup parameters for call to function osal_set_event
   \   0001D2   7A04         MOV     R2,#0x4
   \   0001D4   FB           MOV     R3,A
   \   0001D5   90....       MOV     DPTR,#bdb_TaskID
   \   0001D8   E0           MOVX    A,@DPTR
   \   0001D9   F9           MOV     R1,A
   \   0001DA   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    939          }
   \                     ??bdb_StartCommissioning_3:
   \   0001DD   7414         MOV     A,#0x14
   \   0001DF   02....       LJMP    ??Subroutine37_0 & 0xFFFF
    940          
    941          
    942           /*********************************************************************
    943           * @fn          bdb_NotifyCommissioningModeStart
    944           *
    945           * @brief       Notify the user about a commissioning method just started
    946           *
    947           * @param       commissioningMode
    948           *
    949           * @return      none
    950           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine31_0
   \   000003                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    951          void bdb_NotifyCommissioningModeStart(uint8 commissioningMode)
   \                     bdb_NotifyCommissioningModeStart:
    952          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    953            bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
    954          
    955            bdbCommissioningModeMsg.bdbCommissioningMode = commissioningMode;
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   E9           MOV     A,R1
   \   000010   F0           MOVX    @DPTR,A
    956            bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_IN_PROGRESS;
   \   000011   12....       LCALL   ?Subroutine7 & 0xFFFF
    957            //Remaining commissioning modes are set just before the call to the application to avoid race conditions
    958          
    959            bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   \                     ??CrossCallReturnLabel_37:
   \   000014   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000017   7C03         MOV     R4,#0x3
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7A0A         MOV     R2,#0xa
   \   00001D   90....       MOV     DPTR,#bdb_TaskID
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   12....       LCALL   `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   000025   7402         MOV     A,#0x2
   \   000027   12....       LCALL   ?DEALLOC_XSTACK8
    960          }
   \   00002A   7403         MOV     A,#0x3
   \   00002C   02....       LJMP    ?Subroutine1 & 0xFFFF
    961          
    962          
    963          
    964          #if (ZG_BUILD_JOINING_TYPE)
    965           /*********************************************************************
    966           * @fn          bdb_setNodeJoinLinkKeyType
    967           *
    968           * @brief       Set the key type in use in the network joined. Global centralized key is used by default
    969           *
    970           * @param       none
    971           *
    972           * @return      none
    973           */
    974          void bdb_setNodeJoinLinkKeyType(uint8 KeyType)
    975          {
    976            bdbAttributes.bdbNodeJoinLinkKeyType = KeyType;
    977          }
    978          #endif
    979          
    980           /*********************************************************************
    981           * @fn          bdb_setFN
    982           *
    983           * @brief       Set configuration for FN. This FN configuration will be perfome 
    984           *              upon call to ZDOInitDevice
    985           *
    986           * @param       none
    987           *
    988           * @return      none
    989           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    990          void bdb_setFN(void)
   \                     bdb_setFN:
    991          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    992            bdb_setNodeIsOnANetwork(FALSE);
   \   000004                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000004   7900         MOV     R1,#0x0
   \   000006   12....       LCALL   `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
    993          
    994          #if defined ( INTER_PAN ) && defined ( BDB_TL_INITIATOR )
    995              touchLink_InitFreeRanges( TRUE );
    996              touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
    997          #endif
    998          #if defined ( INTER_PAN ) && defined ( BDB_TL_TARGET ) 
    999              touchLink_InitFreeRanges( FALSE );
   1000              touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
   1001          #endif
   1002          
   1003            //Set the device as factory new
   1004            zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
   \   000009                ; Setup parameters for call to function zgWriteStartupOptions
   \   000009   7A03         MOV     R2,#0x3
   \   00000B   79FF         MOV     R1,#-0x1
   \   00000D   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   1005          }
   \   000010   80..         SJMP    ??Subroutine35_0
   1006          
   1007           /*********************************************************************
   1008           * @fn          bdb_resetLocalAction
   1009           *
   1010           * @brief       Application interface to perform BDB Reset to FN.
   1011           *
   1012           * @param       none
   1013           *
   1014           * @return      none
   1015           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1016          void bdb_resetLocalAction(void)
   \                     bdb_resetLocalAction:
   1017          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1018            //Process reset as nwk leave if the device is on the network and is able to process it
   1019            if((ZG_BUILD_JOINING_TYPE) && (bdbAttributes.bdbNodeIsOnANetwork) && (!(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)))
   1020            {
   1021              NLME_LeaveReq_t leaveReq;
   1022              // Set every field to 0
   1023              osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
   1024              
   1025              bdb_setFN();
   1026                
   1027              NLME_LeaveReq( &leaveReq );
   1028              
   1029              return;
   1030            }
   1031            else
   1032            {
   1033              bdb_setFN();
   \   000004                ; Setup parameters for call to function bdb_setFN
   \   000004   12....       LCALL   `??bdb_setFN::?relay`; Banked call to: bdb_setFN
   1034              
   1035              ZDApp_ResetTimerStart( 500 );
   \   000007                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000007   7AF4         MOV     R2,#-0xc
   \   000009   7B01         MOV     R3,#0x1
   \   00000B   12....       LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   1036            }
   1037          }
   \   00000E   80..         SJMP    ??Subroutine35_0
   1038          
   1039          
   1040           /*********************************************************************
   1041           * @fn          bdb_parentLost
   1042           *
   1043           * @brief       Notify bdb that connection with parent is lost
   1044           *
   1045           * @return      none
   1046           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1047          void bdb_parentLost(void)
   \                     bdb_parentLost:
   1048          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1049          #if ZG_BUILD_ENDDEVICE_TYPE
   1050            if(ZG_DEVICE_ENDDEVICE_TYPE)
   1051            {
   1052              while(pBDBListNwk)
   1053              {
   1054                bdb_nwkDescFree(pBDBListNwk);
   1055              }
   1056              
   1057              nwk_desc_list_free();  
   1058              if(bdbCommissioningProcedureState.bdbCommissioningState != BDB_PARENT_LOST)
   1059              {
   1060                //If parent lost during TCLK exchange, then report TCLK exchange fail
   1061                if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE)
   1062                {
   1063                  bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, FALSE);
   1064                  return;
   1065                }
   1066                bdbCommissioningProcedureState.bdb_ParentLostSavedState = bdbCommissioningProcedureState.bdbCommissioningState;
   1067                
   1068              }
   1069              bdbCommissioningProcedureState.bdbCommissioningState = BDB_PARENT_LOST;
   1070              NLME_OrphanStateSet();
   1071              ZDApp_ChangeState( DEV_NWK_ORPHAN );
   1072              bdb_reportCommissioningState(BDB_PARENT_LOST,FALSE);
   1073            }
   1074          #endif
   1075          }
   \   000000   02....       LJMP    ?BRET
   1076          
   1077          
   1078          
   1079          
   1080          
   1081           /*********************************************************************
   1082           * @fn          bdb_NetworkRestoredResumeState
   1083           *
   1084           * @brief       Restore the state of child device after parent lost
   1085           *
   1086           * @return      none
   1087           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1088          void bdb_NetworkRestoredResumeState(void)
   \                     bdb_NetworkRestoredResumeState:
   1089          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1090          #if ZG_BUILD_ENDDEVICE_TYPE
   1091            if(ZG_DEVICE_ENDDEVICE_TYPE)
   1092            {
   1093              uint8 restoreSimpleDesc = FALSE;
   1094              //If restored when F&B still enabled, then restore the simple descriptors attempts
   1095              if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
   1096              {
   1097                bdbFindingBindingRespondent_t  *pRespondentTemp = NULL;
   1098                
   1099                pRespondentTemp = pRespondentHead;
   1100                
   1101                while(pRespondentTemp != NULL)
   1102                {
   1103                  if(pRespondentTemp->attempts == BDB_SIMPLE_DESC_PENDING_PARENT_LOST)
   1104                  {
   1105                    pRespondentTemp->attempts = 0;
   1106                    restoreSimpleDesc = TRUE;
   1107                  }
   1108                  pRespondentTemp = pRespondentTemp->pNext;
   1109                }
   1110              }
   1111              if(restoreSimpleDesc)
   1112              {
   1113                //Restore the simple Descriptor sending after 1 second of restoring the network
   1114                osal_start_timerEx(bdb_TaskID,BDB_RESPONDENT_SIMPLEDESC_TIMEOUT, 1000);
   1115              }
   1116            }
   1117          #endif
   1118          }
   \   000000   02....       LJMP    ?BRET
   1119          
   1120          #if ZG_BUILD_ENDDEVICE_TYPE
   1121           /*********************************************************************
   1122           * @fn          bdb_ZedAttemptRecoverNwk
   1123           *
   1124           * @brief       Instruct the ZED to try to rejoin its previews network
   1125           *
   1126           * @return      success if the attempt is being excecuted
   1127           *              False if device do not have nwk parameters to perform this action
   1128           */
   1129          uint8 bdb_ZedAttemptRecoverNwk(void)
   1130          {
   1131            if(ZG_DEVICE_ENDDEVICE_TYPE)
   1132            {
   1133              if(bdbAttributes.bdbNodeIsOnANetwork)
   1134              {
   1135                if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST)
   1136                {
   1137                  if(ZDOInitDevice(0) == ZDO_INITDEV_RESTORED_NETWORK_STATE)
   1138                  {
   1139                    return ZSuccess;
   1140                  }
   1141                }
   1142              }
   1143            }
   1144            return ZFailure;
   1145          }
   1146          
   1147          #endif
   1148          
   1149           /*********************************************************************
   1150           * @fn          bdb_reportCommissioningState
   1151           *
   1152           * @brief       Process the result of a BDB main state attempt.
   1153           *
   1154           * @param       bdbCommissioningState - MainState that is issuing fail
   1155           * @param       didSuccess - TRUE if the main state were success, FALSE otherwise
   1156           *
   1157           * @return      none
   1158           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1159          void bdb_reportCommissioningState(uint8 bdbCommissioningState,bool didSuccess)
   \                     bdb_reportCommissioningState:
   1160          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
   1161            bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
   1162            //Process only if we are in that state, or if we are on parent lost and processing F&B
   1163            if((bdbCommissioningProcedureState.bdbCommissioningState == bdbCommissioningState)
   1164               || ((bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST) && (bdbCommissioningProcedureState.bdb_ParentLostSavedState == BDB_COMMISSIONING_STATE_FINDING_BINDING)))
   \   00000E   90....       MOV     DPTR,#bdbCommissioningProcedureState
   \   000011   E0           MOVX    A,@DPTR
   \   000012   6E           XRL     A,R6
   \   000013   6013         JZ      ??bdb_reportCommissioningState_0
   \   000015   E0           MOVX    A,@DPTR
   \   000016   6408         XRL     A,#0x8
   \   000018   6003         JZ      $+5
   \   00001A   02....       LJMP    ??bdb_reportCommissioningState_1 & 0xFFFF
   \   00001D   90....       MOV     DPTR,#bdbCommissioningProcedureState + 3
   \   000020   E0           MOVX    A,@DPTR
   \   000021   6406         XRL     A,#0x6
   \   000023   6003         JZ      $+5
   \   000025   02....       LJMP    ??bdb_reportCommissioningState_1 & 0xFFFF
   1165            {
   1166              switch(bdbCommissioningState)
   \                     ??bdb_reportCommissioningState_0:
   \   000028   EE           MOV     A,R6
   \   000029   24FE         ADD     A,#-0x2
   \   00002B   7003         JNZ     $+5
   \   00002D   02....       LJMP    ??bdb_reportCommissioningState_2 & 0xFFFF
   \   000030   24FE         ADD     A,#-0x2
   \   000032   6012         JZ      ??bdb_reportCommissioningState_3
   \   000034   14           DEC     A
   \   000035   6051         JZ      ??bdb_reportCommissioningState_4
   \   000037   14           DEC     A
   \   000038   7003         JNZ     $+5
   \   00003A   02....       LJMP    ??bdb_reportCommissioningState_5 & 0xFFFF
   \   00003D   14           DEC     A
   \   00003E   7003         JNZ     $+5
   \   000040   02....       LJMP    ??bdb_reportCommissioningState_6 & 0xFFFF
   \   000043   02....       LJMP    ??bdb_reportCommissioningState_7 & 0xFFFF
   1167              {
   1168          #if (ZG_BUILD_JOINING_TYPE)
   1169                case BDB_COMMISSIONING_STATE_JOINING:
   1170                  if(ZG_DEVICE_JOINING_TYPE)
   1171                  {
   1172                    //Prepare for the next state or commissioning mode to be excecuted
   1173                    osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   1174          
   1175                    if(didSuccess)
   1176                    {
   1177                      //Next state is TC link key exchange
   1178                      bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE;
   1179                      //Free the list of nwk discovered
   1180                      while(pBDBListNwk)
   1181                      {
   1182                        bdb_nwkDescFree(pBDBListNwk);
   1183                      }
   1184                      
   1185                      //Set the poll rate of the ZED joining device to 1 second to allow TCLK 
   1186                      //exchange be perfomed successfully in cases in which application has a 
   1187                      //slow pollrate
   1188                      NLME_SetPollRate(TCLK_POLL_RATE);
   1189                      
   1190                      //No notification in this step
   1191                      return;
   1192                    } 
   1193                    else
   1194                    {
   1195                      uint8 temp = FALSE;
   1196                      //If fail, then restore poll rate
   1197                      NLME_SetPollRate(POLL_RATE);
   1198                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   1199                      bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
   1200                      bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   1201                      bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_STEERING;
   1202                      
   1203                      //Turn off the radio
   1204                      ZMacSetReq(ZMacRxOnIdle, &temp);
   1205                      //Set the device to FN, to start as new for subsequent attempts
   1206                      bdb_setFN();
   1207                      NLME_ResetRequest();
   1208                      ZDApp_ChangeState( DEV_HOLD );
   1209                      
   1210                      //Free the list of nwk discovered
   1211                      while(pBDBListNwk)
   1212                      {
   1213                        bdb_nwkDescFree(pBDBListNwk);
   1214                      }
   1215                    }
   1216                  }
   1217                break;
   1218          
   1219                case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
   1220                  if(ZG_DEVICE_JOINING_TYPE)
   1221                  {
   1222                    if(didSuccess)
   1223                    {
   1224                      //Next state is nwk steering on the nwk (permit joining)
   1225                      bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_STEERING_ON_NWK;
   1226                      osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE, 50);
   1227                      
   1228                      //Set the poll rate to the application default after TCLK success
   1229                      NLME_SetPollRate(POLL_RATE);
   1230          
   1231                      osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT );
   1232                      //No notification to the user is needed
   1233                      return;
   1234                    }
   1235                    else
   1236                    {
   1237                      bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
   1238                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_TCLK_EX_FAILURE;
   1239                      
   1240                      osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT);
   1241                     
   1242                      //No process shall be attempted after this fail
   1243                      bdbAttributes.bdbCommissioningMode = 0;
   1244                      
   1245                      //Fill the context for the user notification
   1246                      osal_start_timerEx(bdb_TaskID,BDB_TC_LINK_KEY_EXCHANGE_FAIL,BDB_TC_LINK_KEY_EXCHANGE_FAIL_LEAVE_TIMEOUT);
   1247                    }
   1248                  }
   1249                break;
   1250          #endif
   1251                
   1252                case BDB_COMMISSIONING_STATE_STEERING_ON_NWK:
   1253                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
   \                     ??bdb_reportCommissioningState_3:
   \   000046   7401         MOV     A,#0x1
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   7401         MOV     A,#0x1
   \   00004D   F0           MOVX    @DPTR,A
   1254                  if(didSuccess)
   \   00004E   EF           MOV     A,R7
   \   00004F   90....       MOV     DPTR,#bdbAttributes + 10
   \   000052   600C         JZ      ??bdb_reportCommissioningState_8
   1255                  {
   1256                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \   000054   12....       LCALL   ?Subroutine9 & 0xFFFF
   1257                    
   1258          #if (ZG_BUILD_RTR_TYPE)          
   1259                    //Update ZDApp state
   1260                    if(ZG_DEVICE_RTRONLY_TYPE)
   \                     ??CrossCallReturnLabel_45:
   \   000057   700A         JNZ     ??bdb_reportCommissioningState_9
   1261                    {          
   1262                      ZDApp_ChangeState( DEV_ROUTER );
   \   000059                ; Setup parameters for call to function ZDApp_ChangeState
   \   000059   7907         MOV     R1,#0x7
   \   00005B   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   \   00005E   8003         SJMP    ??bdb_reportCommissioningState_9
   1263                    }
   1264          #endif
   1265          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1266                    if(ZG_DEVICE_ENDDEVICE_TYPE)
   1267                    {
   1268                      ZDApp_ChangeState( DEV_END_DEVICE );
   1269                    }
   1270          #endif
   1271                  }
   1272          #if (ZG_BUILD_COORDINATOR_TYPE)
   1273                  else
   1274                  {
   1275                    if(ZG_DEVICE_COORDINATOR_TYPE)
   1276                    {
   1277                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   \                     ??bdb_reportCommissioningState_8:
   \   000060   7402         MOV     A,#0x2
   \   000062   F0           MOVX    @DPTR,A
   1278                    }
   1279                  }
   1280          #endif
   1281                  
   1282                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \                     ??bdb_reportCommissioningState_9:
   \   000063   90....       MOV     DPTR,#bdbCommissioningProcedureState
   \   000066   E4           CLR     A
   \   000067   F0           MOVX    @DPTR,A
   1283                  osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   \   000068                ; Setup parameters for call to function osal_start_timerEx
   \   000068   90....       MOV     DPTR,#__Constant_32
   \   00006B   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00006E   7A04         MOV     R2,#0x4
   \   000070   7B00         MOV     R3,#0x0
   \   000072   90....       MOV     DPTR,#bdb_TaskID
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F9           MOV     R1,A
   \   000077   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00007A   7404         MOV     A,#0x4
   \   00007C   12....       LCALL   ?DEALLOC_XSTACK8
   1284                  bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_STEERING;
   \   00007F   90....       MOV     DPTR,#bdbAttributes + 11
   \   000082   E0           MOVX    A,@DPTR
   \   000083   C2E1         CLR     0xE0 /* A   */.1
   \   000085   02....       LJMP    ??bdb_reportCommissioningState_10 & 0xFFFF
   1285                break;
   1286                
   1287                case BDB_COMMISSIONING_STATE_FORMATION:
   1288                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FORMATION;
   \                     ??bdb_reportCommissioningState_4:
   \   000088   7401         MOV     A,#0x1
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   7402         MOV     A,#0x2
   \   00008F   F0           MOVX    @DPTR,A
   1289          
   1290                  if(didSuccess)
   \   000090   EF           MOV     A,R7
   \   000091   90....       MOV     DPTR,#bdbAttributes + 10
   \   000094   600E         JZ      ??bdb_reportCommissioningState_11
   1291                  {
   1292                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \   000096   12....       LCALL   ?Subroutine9 & 0xFFFF
   1293          
   1294                     //Update ZDApp State
   1295          #if (ZG_BUILD_RTR_TYPE)
   1296                    if(ZG_DEVICE_RTRONLY_TYPE)
   \                     ??CrossCallReturnLabel_46:
   \   000099   7005         JNZ     ??bdb_reportCommissioningState_12
   1297                    {          
   1298                      ZDApp_ChangeState( DEV_ROUTER );
   \   00009B                ; Setup parameters for call to function ZDApp_ChangeState
   \   00009B   7907         MOV     R1,#0x7
   \   00009D   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1299                    }
   1300          #endif    
   1301          #if (ZG_BUILD_COORDINATOR_TYPE)
   1302                    if(ZG_DEVICE_COORDINATOR_TYPE)
   1303                    {          
   1304                      ZDApp_ChangeState( DEV_ZB_COORD );
   \                     ??bdb_reportCommissioningState_12:
   \   0000A0                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000A0   7909         MOV     R1,#0x9
   \   0000A2   802C         SJMP    ??bdb_reportCommissioningState_13
   1305                    }     
   1306          #endif
   1307                  }
   1308                  else
   1309                  {
   1310                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_FORMATION_FAILURE;
   \                     ??bdb_reportCommissioningState_11:
   \   0000A4   7408         MOV     A,#0x8
   \   0000A6   F0           MOVX    @DPTR,A
   1311                    //If not on the nwk, then restart the nwk parameters
   1312          #if (ZG_BUILD_RTR_TYPE)
   1313                    if(ZG_DEVICE_RTR_TYPE)
   \   0000A7   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   6004         JZ      ??bdb_reportCommissioningState_14
   \   0000AD   6401         XRL     A,#0x1
   \   0000AF   7022         JNZ     ??bdb_reportCommissioningState_15
   1314                    {           
   1315                      if(!bdbAttributes.bdbNodeIsOnANetwork)
   \                     ??bdb_reportCommissioningState_14:
   \   0000B1   90....       MOV     DPTR,#bdbAttributes + 14
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   701C         JNZ     ??bdb_reportCommissioningState_15
   1316                      {
   1317                        uint8 temp = FALSE;
   \   0000B7   7403         MOV     A,#0x3
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   E4           CLR     A
   \   0000BD   F0           MOVX    @DPTR,A
   1318                        //Turn off the radio
   1319                        ZMacSetReq(ZMacRxOnIdle, &temp);
   \   0000BE                ; Setup parameters for call to function ZMacSetReq
   \   0000BE   7403         MOV     A,#0x3
   \   0000C0   12....       LCALL   ?XSTACK_DISP101_8
   \   0000C3   7952         MOV     R1,#0x52
   \   0000C5   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1320                        //Set the device to FN, to start as new for subsequent attempts
   1321                        bdb_setFN();
   \   0000C8                ; Setup parameters for call to function bdb_setFN
   \   0000C8   12....       LCALL   `??bdb_setFN::?relay`; Banked call to: bdb_setFN
   1322                        NLME_ResetRequest();
   \   0000CB                ; Setup parameters for call to function NLME_ResetRequest
   \   0000CB   12....       LCALL   `??NLME_ResetRequest::?relay`; Banked call to: NLME_ResetRequest
   1323                        ZDApp_ChangeState( DEV_HOLD );
   \   0000CE                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000CE   7900         MOV     R1,#0x0
   \                     ??bdb_reportCommissioningState_13:
   \   0000D0   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1324                      }
   1325                    }
   1326          #endif
   1327                  }
   1328                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \                     ??bdb_reportCommissioningState_15:
   \   0000D3   90....       MOV     DPTR,#bdbCommissioningProcedureState
   \   0000D6   E4           CLR     A
   \   0000D7   F0           MOVX    @DPTR,A
   1329                  osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   \   0000D8                ; Setup parameters for call to function osal_start_timerEx
   \   0000D8   90....       MOV     DPTR,#__Constant_32
   \   0000DB   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000DE   7A04         MOV     R2,#0x4
   \   0000E0   7B00         MOV     R3,#0x0
   \   0000E2   90....       MOV     DPTR,#bdb_TaskID
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   F9           MOV     R1,A
   \   0000E7   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000EA   7404         MOV     A,#0x4
   \   0000EC   12....       LCALL   ?DEALLOC_XSTACK8
   1330                  bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_FORMATION;
   \   0000EF   90....       MOV     DPTR,#bdbAttributes + 11
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   C2E2         CLR     0xE0 /* A   */.2
   \   0000F5   02....       LJMP    ??bdb_reportCommissioningState_10 & 0xFFFF
   1331                break;  
   1332                
   1333          
   1334                case BDB_COMMISSIONING_STATE_FINDING_BINDING:
   1335          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
   1336                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
   \                     ??bdb_reportCommissioningState_5:
   \   0000F8   7401         MOV     A,#0x1
   \   0000FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FD   7403         MOV     A,#0x3
   \   0000FF   F0           MOVX    @DPTR,A
   1337          
   1338                  //Do not notify the status if we have another identify to send
   1339                  if(bdbAttributes.bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \   000100   90....       MOV     DPTR,#bdbAttributes + 10
   \   000103   E0           MOVX    A,@DPTR
   \   000104   7006         JNZ     ??bdb_reportCommissioningState_16
   1340                  {
   1341                    //Success at least once during F&B as initiator, mark it
   1342                    bdb_FBStateSuccessLatch = TRUE;
   \   000106   90....       MOV     DPTR,#bdb_FBStateSuccessLatch
   \   000109   7401         MOV     A,#0x1
   \   00010B   F0           MOVX    @DPTR,A
   1343                  }        
   1344                  
   1345                  //Will we process another indentify?
   1346                  if(((FINDING_AND_BINDING_PERIODIC_ENABLE == FALSE) || (bdb_FB_InitiatorCurrentCyclesNumber == 0)) && (bdb_getRespondentRetry(pRespondentHead) == NULL) && (osal_get_timeoutEx( bdb_TaskID, BDB_RESPONDENT_SIMPLEDESC_TIMEOUT) == 0))
   \                     ??bdb_reportCommissioningState_16:
   \   00010C   90....       MOV     DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   6003         JZ      $+5
   \   000112   02....       LJMP    ??bdb_reportCommissioningState_1 & 0xFFFF
   \   000115                ; Setup parameters for call to function bdb_getRespondentRetry
   \   000115   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000118   12....       LCALL   `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
   \   00011B   8B..         MOV     ?V1,R3
   \   00011D   EA           MOV     A,R2
   \   00011E   45..         ORL     A,?V1
   \   000120   6003         JZ      $+5
   \   000122   02....       LJMP    ??bdb_reportCommissioningState_1 & 0xFFFF
   \   000125                ; Setup parameters for call to function osal_get_timeoutEx
   \   000125   7A00         MOV     R2,#0x0
   \   000127   7B40         MOV     R3,#0x40
   \   000129   90....       MOV     DPTR,#bdb_TaskID
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   F9           MOV     R1,A
   \   00012E   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000131   EA           MOV     A,R2
   \   000132   4B           ORL     A,R3
   \   000133   4C           ORL     A,R4
   \   000134   4D           ORL     A,R5
   \   000135   6003         JZ      $+5
   \   000137   02....       LJMP    ??bdb_reportCommissioningState_1 & 0xFFFF
   1347                  {
   1348                    // Dealocate respondent list and clean all the F&B process
   1349                    pRespondentCurr = NULL;
   \   00013A   90....       MOV     DPTR,#pRespondentCurr
   \   00013D   E4           CLR     A
   \   00013E   F0           MOVX    @DPTR,A
   \   00013F   A3           INC     DPTR
   \   000140   F0           MOVX    @DPTR,A
   1350                    pRespondentNext = NULL;
   \   000141   90....       MOV     DPTR,#pRespondentNext
   \   000144   F0           MOVX    @DPTR,A
   \   000145   A3           INC     DPTR
   \   000146   F0           MOVX    @DPTR,A
   1351                    bdb_zclRespondentListClean( &pRespondentHead );
   \   000147                ; Setup parameters for call to function bdb_zclRespondentListClean
   \   000147   7A..         MOV     R2,#pRespondentHead & 0xff
   \   000149   7B..         MOV     R3,#(pRespondentHead >> 8) & 0xff
   \   00014B   12....       LCALL   `??bdb_zclRespondentListClean::?relay`; Banked call to: bdb_zclRespondentListClean
   1352                    osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_SIMPLEDESC_TIMEOUT );
   \   00014E                ; Setup parameters for call to function osal_stop_timerEx
   \   00014E   7A00         MOV     R2,#0x0
   \   000150   7B40         MOV     R3,#0x40
   \   000152   90....       MOV     DPTR,#bdb_TaskID
   \   000155   E0           MOVX    A,@DPTR
   \   000156   F9           MOV     R1,A
   \   000157   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1353                    
   1354                    //Report success if in any of the attempts we got success, regardless that we did receive no rsp on the last attempt
   1355                    if(bdb_FBStateSuccessLatch && (bdbAttributes.bdbCommissioningStatus == BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE))
   \   00015A   90....       MOV     DPTR,#bdb_FBStateSuccessLatch
   \   00015D   E0           MOVX    A,@DPTR
   \   00015E   600A         JZ      ??bdb_reportCommissioningState_17
   \   000160   90....       MOV     DPTR,#bdbAttributes + 10
   \   000163   E0           MOVX    A,@DPTR
   \   000164   640B         XRL     A,#0xb
   \   000166   7002         JNZ     ??bdb_reportCommissioningState_17
   1356                    {
   1357                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \   000168   E4           CLR     A
   \   000169   F0           MOVX    @DPTR,A
   1358                    }
   1359                    
   1360                    //Set default state
   1361                    bdb_FBStateSuccessLatch = FALSE;
   \                     ??bdb_reportCommissioningState_17:
   \   00016A   90....       MOV     DPTR,#bdb_FBStateSuccessLatch
   \   00016D   E4           CLR     A
   \   00016E   F0           MOVX    @DPTR,A
   1362                    
   1363                    //Resume BDB machine state only if we were in F&B, if we were on parent lost, only clean the commissioning mode and remove from bdb_ParentLostSavedState
   1364                    if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
   \   00016F   90....       MOV     DPTR,#bdbCommissioningProcedureState
   \   000172   E0           MOVX    A,@DPTR
   \   000173   6406         XRL     A,#0x6
   \   000175   701B         JNZ     ??bdb_reportCommissioningState_18
   1365                    {
   1366                      bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   000177   E4           CLR     A
   \   000178   F0           MOVX    @DPTR,A
   1367                      osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50); 
   \   000179                ; Setup parameters for call to function osal_start_timerEx
   \   000179   90....       MOV     DPTR,#__Constant_32
   \   00017C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00017F   7A04         MOV     R2,#0x4
   \   000181   7B00         MOV     R3,#0x0
   \   000183   90....       MOV     DPTR,#bdb_TaskID
   \   000186   E0           MOVX    A,@DPTR
   \   000187   F9           MOV     R1,A
   \   000188   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00018B   7404         MOV     A,#0x4
   \   00018D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000190   800A         SJMP    ??bdb_reportCommissioningState_19
   1368                    }
   1369                    else if(bdbCommissioningProcedureState.bdb_ParentLostSavedState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
   \                     ??bdb_reportCommissioningState_18:
   \   000192   90....       MOV     DPTR,#bdbCommissioningProcedureState + 3
   \   000195   E0           MOVX    A,@DPTR
   \   000196   6406         XRL     A,#0x6
   \   000198   7002         JNZ     ??bdb_reportCommissioningState_19
   1370                    {
   1371                      bdbCommissioningProcedureState.bdb_ParentLostSavedState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   00019A   E4           CLR     A
   \   00019B   F0           MOVX    @DPTR,A
   1372                    }
   1373                    
   1374                    bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_FINDING_BINDING;
   \                     ??bdb_reportCommissioningState_19:
   \   00019C   90....       MOV     DPTR,#bdbAttributes + 11
   \   00019F   E0           MOVX    A,@DPTR
   \   0001A0   C2E3         CLR     0xE0 /* A   */.3
   \   0001A2   807E         SJMP    ??bdb_reportCommissioningState_10
   1375                  }
   1376                  else
   1377                  {
   1378                    return;
   1379                  }
   1380          
   1381          #endif
   1382                break;     
   1383                case BDB_COMMISSIONING_STATE_TL:
   1384                  // Set NWK task to run
   1385                  nwk_setStateIdle( FALSE );
   \                     ??bdb_reportCommissioningState_2:
   \   0001A4                ; Setup parameters for call to function nwk_setStateIdle
   \   0001A4   7900         MOV     R1,#0x0
   \   0001A6   12....       LCALL   `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
   1386                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_TOUCHLINK;
   \   0001A9   7401         MOV     A,#0x1
   \   0001AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AE   7404         MOV     A,#0x4
   \   0001B0   F0           MOVX    @DPTR,A
   1387                  if(didSuccess)
   \   0001B1   EF           MOV     A,R7
   \   0001B2   6010         JZ      ??bdb_reportCommissioningState_20
   1388                  {
   1389                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \   0001B4   90....       MOV     DPTR,#bdbAttributes + 10
   \   0001B7   E4           CLR     A
   \   0001B8   F0           MOVX    @DPTR,A
   1390                    bdbAttributes.bdbCommissioningMode = BDB_COMMISSIONING_MODE_IDDLE;
   \   0001B9   A3           INC     DPTR
   \   0001BA   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   1391                    
   1392                    //Update ZDApp state
   1393          #if (ZG_BUILD_RTR_TYPE)
   1394                    if(ZG_DEVICE_RTRONLY_TYPE)
   \                     ??CrossCallReturnLabel_47:
   \   0001BD   7005         JNZ     ??bdb_reportCommissioningState_20
   1395                    {          
   1396                      ZDApp_ChangeState( DEV_ROUTER );
   \   0001BF                ; Setup parameters for call to function ZDApp_ChangeState
   \   0001BF   7907         MOV     R1,#0x7
   \   0001C1   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1397                    }
   1398          #endif
   1399          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1400                    if(ZG_DEVICE_ENDDEVICE_TYPE)
   1401                    {
   1402                      ZDApp_ChangeState( DEV_END_DEVICE );
   1403                    }
   1404          #endif          
   1405                  }
   1406                  //The fail status is already set from the calling function to report commissioning process
   1407                  
   1408                  // The commissioning FAIL status is set before calling the bdb_reportCommissioningState
   1409                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \                     ??bdb_reportCommissioningState_20:
   \   0001C4   90....       MOV     DPTR,#bdbCommissioningProcedureState
   \   0001C7   E4           CLR     A
   \   0001C8   F0           MOVX    @DPTR,A
   1410                  osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50); 
   \   0001C9                ; Setup parameters for call to function osal_start_timerEx
   \   0001C9   90....       MOV     DPTR,#__Constant_32
   \   0001CC   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0001CF   7A04         MOV     R2,#0x4
   \   0001D1   7B00         MOV     R3,#0x0
   \   0001D3   90....       MOV     DPTR,#bdb_TaskID
   \   0001D6   E0           MOVX    A,@DPTR
   \   0001D7   F9           MOV     R1,A
   \   0001D8   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0001DB   7404         MOV     A,#0x4
   \   0001DD   12....       LCALL   ?DEALLOC_XSTACK8
   1411                  //Clear the event
   1412                  bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_INITIATOR_TL;
   \   0001E0   90....       MOV     DPTR,#bdbAttributes + 11
   \   0001E3   E0           MOVX    A,@DPTR
   \   0001E4   C2E0         CLR     0xE0 /* A   */.0
   \   0001E6   803A         SJMP    ??bdb_reportCommissioningState_10
   1413                  
   1414                break;
   1415                
   1416                case BDB_INITIALIZATION:
   1417                  //Notify user about successfull initialization
   1418                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_INITIALIZATION;
   \                     ??bdb_reportCommissioningState_6:
   \   0001E8   7401         MOV     A,#0x1
   \   0001EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001ED   E4           CLR     A
   \   0001EE   F0           MOVX    @DPTR,A
   1419                  if(didSuccess)
   \   0001EF   EF           MOV     A,R7
   \   0001F0   602A         JZ      ??bdb_reportCommissioningState_21
   1420                  {
   1421                    //Update ZDApp state
   1422          #if (ZG_BUILD_COORDINATOR_TYPE)
   1423                    if(ZG_DEVICE_COORDINATOR_TYPE)
   1424                    {          
   1425                      ZDApp_ChangeState( DEV_ZB_COORD );
   \   0001F2                ; Setup parameters for call to function ZDApp_ChangeState
   \   0001F2   7909         MOV     R1,#0x9
   \   0001F4   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1426                    }
   1427          #endif          
   1428          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1429                    if(ZG_DEVICE_ENDDEVICE_TYPE)
   1430                    {
   1431                      uint32 pollrate = POLL_RATE;
   1432                      NLME_SetPollRate(pollrate);
   1433                      ZDApp_ChangeState( DEV_END_DEVICE );
   1434                      
   1435                    }
   1436          #endif          
   1437                    ZDApp_RestoreNwkSecMaterial();
   \   0001F7                ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
   \   0001F7   12....       LCALL   `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
   1438                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NETWORK_RESTORED;
   \   0001FA   90....       MOV     DPTR,#bdbAttributes + 10
   \   0001FD   740D         MOV     A,#0xd
   \   0001FF   F0           MOVX    @DPTR,A
   1439                    bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   000200   90....       MOV     DPTR,#bdbCommissioningProcedureState
   \   000203   E4           CLR     A
   \   000204   F0           MOVX    @DPTR,A
   1440                    osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,200);
   \   000205                ; Setup parameters for call to function osal_start_timerEx
   \   000205   90....       MOV     DPTR,#__Constant_c8
   \   000208   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00020B   7A04         MOV     R2,#0x4
   \   00020D   7B00         MOV     R3,#0x0
   \   00020F   90....       MOV     DPTR,#bdb_TaskID
   \   000212   E0           MOVX    A,@DPTR
   \   000213   F9           MOV     R1,A
   \   000214   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000217   7404         MOV     A,#0x4
   \   000219   12....       LCALL   ?DEALLOC_XSTACK8
   1441                  }
   1442          #if (ZG_BUILD_ENDDEVICE_TYPE)         
   1443                  //Notify the user about losing parent
   1444                  else
   1445                  {
   1446                    if(ZG_DEVICE_ENDDEVICE_TYPE)
   1447                    {
   1448                      bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_PARENT_LOST;
   1449                      bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_PARENT_LOST;
   1450                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   1451                      
   1452                      //Update ZDApp state
   1453                      ZDApp_ChangeState( DEV_NWK_ORPHAN );
   1454                    }
   1455                  }
   1456          #endif
   1457                  //Clear the commissioning mode
   1458                  bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_INITIALIZATION;
   \                     ??bdb_reportCommissioningState_21:
   \   00021C   90....       MOV     DPTR,#bdbAttributes + 11
   \   00021F   E0           MOVX    A,@DPTR
   \   000220   C2E4         CLR     0xE0 /* A   */.4
   \                     ??bdb_reportCommissioningState_10:
   \   000222   F0           MOVX    @DPTR,A
   1459                  
   1460                break;
   1461          #if (ZG_BUILD_ENDDEVICE_TYPE)     
   1462                case BDB_PARENT_LOST:
   1463                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_PARENT_LOST;
   1464                  if(ZG_DEVICE_ENDDEVICE_TYPE)
   1465                  {
   1466                    if(didSuccess)
   1467                    {
   1468                      uint32 pollrate = POLL_RATE;
   1469                      bdbCommissioningProcedureState.bdbCommissioningState = bdbCommissioningProcedureState.bdb_ParentLostSavedState;  
   1470                      bdbCommissioningProcedureState.bdb_ParentLostSavedState = 0;
   1471                      NLME_SetPollRate(pollrate);
   1472                      bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_PARENT_LOST;
   1473                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NETWORK_RESTORED;
   1474                      //Update ZDApp state
   1475                      ZDApp_ChangeState( DEV_END_DEVICE );
   1476                      
   1477                      bdb_NetworkRestoredResumeState();
   1478                    }
   1479                    else
   1480                    {
   1481                      bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_PARENT_LOST;
   1482                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   1483                    }
   1484                  }
   1485                break;
   1486          #endif
   1487              }
   1488          #ifdef MT_APP_CNF_FUNC
   1489              //Notify the user about the status, the main state which has failed
   1490              bdbCommissioningModeMsg.bdbCommissioningStatus = bdbAttributes.bdbCommissioningStatus;
   1491              
   1492              bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   1493          #else
   1494              if(pfnCommissioningStatusCB)
   \                     ??bdb_reportCommissioningState_7:
   \   000223   90....       MOV     DPTR,#pfnCommissioningStatusCB
   \   000226   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000229   6023         JZ      ??bdb_reportCommissioningState_1
   1495              {
   1496                //Notify the user about the status, the main state which has failed
   1497                bdbCommissioningModeMsg.bdbCommissioningStatus = bdbAttributes.bdbCommissioningStatus;
   \   00022B   90....       MOV     DPTR,#bdbAttributes + 10
   \   00022E   E0           MOVX    A,@DPTR
   \   00022F   85..82       MOV     DPL,?XSP + 0
   \   000232   85..83       MOV     DPH,?XSP + 1
   \   000235   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   1498                
   1499                bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   1500              }
   1501          #endif
   1502            }  
   \                     ??CrossCallReturnLabel_38:
   \   000238   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00023B   7C03         MOV     R4,#0x3
   \   00023D   7B00         MOV     R3,#0x0
   \   00023F   7A0A         MOV     R2,#0xa
   \   000241   90....       MOV     DPTR,#bdb_TaskID
   \   000244   E0           MOVX    A,@DPTR
   \   000245   F9           MOV     R1,A
   \   000246   12....       LCALL   `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   000249   7402         MOV     A,#0x2
   \   00024B   12....       LCALL   ?DEALLOC_XSTACK8
   1503          }
   \                     ??bdb_reportCommissioningState_1:
   \   00024E   7404         MOV     A,#0x4
   \   000250   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E4           CLR     A
   \   000001                REQUIRE ??Subroutine36_0
   \   000001                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000004   E0           MOVX    A,@DPTR
   \   000005   6401         XRL     A,#0x1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   90....       MOV     DPTR,#pRespondentHead
   \   000003                REQUIRE ??Subroutine45_0
   \   000003                ; // Fall through to label ??Subroutine45_0
   1504          
   1505          
   1506           /*********************************************************************
   1507           * @fn          bdb_nwkFormationAttempt
   1508           *
   1509           * @brief       Process a nwk formation attempt.
   1510           *
   1511           * @param       didSuccess - TRUE if the nwk formation was success, FALSE 
   1512           *                         otherwise and try secondary channel
   1513           *
   1514           * @return      none
   1515           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1516          void bdb_nwkFormationAttempt(bool didSuccess)
   \                     bdb_nwkFormationAttempt:
   1517          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   1518            if(didSuccess)
   \   000006   6004         JZ      ??bdb_nwkFormationAttempt_0
   1519            {
   1520              bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION,TRUE);
   \   000008                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000008   7A01         MOV     R2,#0x1
   \   00000A   801F         SJMP    ??bdb_nwkFormationAttempt_1
   1521            }
   1522            else
   1523            {
   1524              //Can we try the secondary channel set?
   1525              if((vDoPrimaryScan) && (bdbAttributes.bdbSecondaryChannelSet))
   \                     ??bdb_nwkFormationAttempt_0:
   \   00000C   90....       MOV     DPTR,#vDoPrimaryScan
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   6017         JZ      ??bdb_nwkFormationAttempt_2
   \   000012   90....       MOV     DPTR,#bdbAttributes
   \   000015   12....       LCALL   ?XLOAD_R0123
   \   000018   E8           MOV     A,R0
   \   000019   49           ORL     A,R1
   \   00001A   4A           ORL     A,R2
   \   00001B   4B           ORL     A,R3
   \   00001C   600B         JZ      ??bdb_nwkFormationAttempt_2
   1526              {
   1527                vDoPrimaryScan = FALSE;
   \   00001E   90....       MOV     DPTR,#vDoPrimaryScan
   \   000021   E4           CLR     A
   \   000022   F0           MOVX    @DPTR,A
   1528                bdb_nwkJoiningFormation(FALSE);
   \   000023                ; Setup parameters for call to function bdb_nwkJoiningFormation
   \   000023   F9           MOV     R1,A
   \   000024   12....       LCALL   `??bdb_nwkJoiningFormation::?relay`; Banked call to: bdb_nwkJoiningFormation
   \   000027   8007         SJMP    ??bdb_nwkFormationAttempt_3
   1529              }
   1530              else
   1531              {
   1532                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
   \                     ??bdb_nwkFormationAttempt_2:
   \   000029                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000029   7A00         MOV     R2,#0x0
   \                     ??bdb_nwkFormationAttempt_1:
   \   00002B   7905         MOV     R1,#0x5
   \   00002D   12....       LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   1533              }
   1534            }
   1535          }
   \                     ??bdb_nwkFormationAttempt_3:
   \   000030   02....       LJMP    ?Subroutine0 & 0xFFFF
   1536          
   1537          
   1538          
   1539          /*********************************************************************
   1540           * @fn          bdb_isDeviceNonFactoryNew
   1541           *
   1542           * @brief       Returns the state of bdbNodeIsOnANetwork attribute
   1543           * 
   1544           * @param       none
   1545           *
   1546           * @return      bdbNodeIsOnANetwork
   1547           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1548          bool bdb_isDeviceNonFactoryNew(void)
   \                     bdb_isDeviceNonFactoryNew:
   1549          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1550            return bdbAttributes.bdbNodeIsOnANetwork;
   \   000004   90....       MOV     DPTR,#bdbAttributes + 14
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   02....       LJMP    ??Subroutine35_0 & 0xFFFF
   1551          }
   1552          
   1553          
   1554          /*********************************************************************
   1555           * @fn      bdb_rejoinNwk
   1556           *
   1557           * @brief   Attempt to rejoin/resume a nwk from nv parameters
   1558           *
   1559           * @param   none
   1560           *
   1561           * @return  ZStatus_t
   1562           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1563          ZStatus_t bdb_rejoinNwk(void)
   \                     bdb_rejoinNwk:
   1564          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1565            ZStatus_t rejoinStatus = ZSuccess;
   \   00000A   7E00         MOV     R6,#0x0
   1566            
   1567            // Transition state machine to correct rejoin state based on nwk key
   1568            if ( ZDApp_RestoreNwkKey( FALSE )== TRUE )
   \   00000C                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   00000C   7900         MOV     R1,#0x0
   \   00000E   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   000011   E9           MOV     A,R1
   \   000012   6401         XRL     A,#0x1
   \   000014   7004         JNZ     ??bdb_rejoinNwk_0
   1569            {
   1570              ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
   \   000016                ; Setup parameters for call to function ZDApp_ChangeState
   \   000016   7904         MOV     R1,#0x4
   \   000018   8002         SJMP    ??bdb_rejoinNwk_1
   1571            }
   1572            else
   1573            {
   1574              ZDApp_ChangeState( DEV_NWK_TC_REJOIN_CURR_CHANNEL );
   \                     ??bdb_rejoinNwk_0:
   \   00001A                ; Setup parameters for call to function ZDApp_ChangeState
   \   00001A   790E         MOV     R1,#0xe
   \                     ??bdb_rejoinNwk_1:
   \   00001C   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1575            }
   1576          
   1577            // Before trying to do rejoin, check if the device has a valid short address
   1578            // If not, generate a random short address for itself
   1579            if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \   00001F   90....       MOV     DPTR,#_NIB + 20
   \   000022   E0           MOVX    A,@DPTR
   \   000023   64FE         XRL     A,#0xfe
   \   000025   7003         JNZ     ??bdb_rejoinNwk_2
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F4           CPL     A
   \                     ??bdb_rejoinNwk_2:
   \   00002A   7002         JNZ     ??bdb_rejoinNwk_3
   1580            {
   1581              rejoinStatus = ZFailure;
   \   00002C   7E01         MOV     R6,#0x1
   1582            }
   1583          
   1584            // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1585            if ( _NIB.nwkPanId == 0xFFFF )
   \                     ??bdb_rejoinNwk_3:
   \   00002E   90....       MOV     DPTR,#_NIB + 33
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F4           CPL     A
   \   000033   7003         JNZ     ??bdb_rejoinNwk_4
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F4           CPL     A
   \                     ??bdb_rejoinNwk_4:
   \   000038   7004         JNZ     ??bdb_rejoinNwk_5
   1586            {
   1587              rejoinStatus = ZFailure;
   \   00003A   7E01         MOV     R6,#0x1
   \   00003C   803A         SJMP    ??bdb_rejoinNwk_6
   1588            }
   1589          
   1590            if(rejoinStatus == ZSuccess)
   \                     ??bdb_rejoinNwk_5:
   \   00003E   EE           MOV     A,R6
   \   00003F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000041   4035         JC      ??bdb_rejoinNwk_6
   1591            {
   1592              uint8 tmp = true;
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   7401         MOV     A,#0x1
   \   00004B   F0           MOVX    @DPTR,A
   1593              ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
   \   00004C                ; Setup parameters for call to function ZMacSetReq
   \   00004C   AA..         MOV     R2,?XSP + 0
   \   00004E   AB..         MOV     R3,?XSP + 1
   \   000050   7952         MOV     R1,#0x52
   \   000052   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1594                  
   1595              // Perform Secure or Unsecure Rejoin depending on available configuration
   1596              if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == TRUE ) )
   \   000055                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000055   7901         MOV     R1,#0x1
   \   000057   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   00005A   E9           MOV     A,R1
   \   00005B   6401         XRL     A,#0x1
   \   00005D   90....       MOV     DPTR,#_NIB + 22
   \   000060   700B         JNZ     ??bdb_rejoinNwk_7
   1597              {
   1598                rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, _NIB.nwkLogicalChannel);
   \   000062                ; Setup parameters for call to function NLME_ReJoinRequest
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F9           MOV     R1,A
   \   000064   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000066   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000068   12....       LCALL   `??NLME_ReJoinRequest::?relay`; Banked call to: NLME_ReJoinRequest
   \   00006B   8009         SJMP    ??bdb_rejoinNwk_8
   1599              }
   1600              else
   1601              {
   1602                rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, _NIB.nwkLogicalChannel);
   \                     ??bdb_rejoinNwk_7:
   \   00006D                ; Setup parameters for call to function NLME_ReJoinRequestUnsecure
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F9           MOV     R1,A
   \   00006F   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000071   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000073   12....       LCALL   `??NLME_ReJoinRequestUnsecure::?relay`; Banked call to: NLME_ReJoinRequestUnsecure
   \                     ??bdb_rejoinNwk_8:
   \   000076   E9           MOV     A,R1
   \   000077   FE           MOV     R6,A
   1603              }
   1604            }
   1605            
   1606            return rejoinStatus;
   \                     ??bdb_rejoinNwk_6:
   \   000078   EE           MOV     A,R6
   \   000079   F9           MOV     R1,A
   \   00007A   7401         MOV     A,#0x1
   \   00007C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007F                REQUIRE ?Subroutine0
   \   00007F                ; // Fall through to label ?Subroutine0
   1607          }
   1608          
   1609          #if (ZG_BUILD_JOINING_TYPE)
   1610           /*********************************************************************
   1611           * @fn          bdb_nwkDiscoveryAttempt
   1612           *
   1613           * @brief       Process a nwk discovery attempt
   1614           *
   1615           * @param       didSuccess - TRUE we found nwk in the scanned channels, FALSE if 
   1616           *                           no suitable nwks were found, try secondary channel
   1617           *
   1618           * @return      none
   1619           */
   1620          void bdb_nwkDiscoveryAttempt(bool didSuccess)
   1621          {
   1622            uint8 bdbJoinEvent = BDB_JOIN_EVENT_NWK_DISCOVERY;
   1623            
   1624            if(didSuccess)
   1625            {
   1626              bdb_SendMsg(bdb_TaskID, BDB_COMMISSIONING_STATE_JOINING, BDB_MSG_EVENT_SUCCESS,sizeof(bdbJoinEvent),(uint8*)&bdbJoinEvent);
   1627            }
   1628            else
   1629            {
   1630              //Can we try the secondary channel set?
   1631              if((vDoPrimaryScan) && (bdbAttributes.bdbSecondaryChannelSet))
   1632              {
   1633                vDoPrimaryScan = FALSE;
   1634                bdb_setChannel(bdbAttributes.bdbSecondaryChannelSet);
   1635                
   1636                ZDApp_NetworkInit( 50 );
   1637              }
   1638              else
   1639              {
   1640                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, FALSE);
   1641              }
   1642            }
   1643          }
   1644          
   1645           /*********************************************************************
   1646           * @fn          bdb_filterNwkDisc
   1647           *
   1648           * @brief       Filter the nwks found and attempt to join the suitable nwks
   1649           *              Here the application can include nwk filters 
   1650           *
   1651           * @param       none
   1652           *
   1653           * @return      none
   1654           */
   1655          void bdb_filterNwkDisc(void)
   1656          {
   1657            networkDesc_t* pNwkDesc;
   1658            uint8 i = 0;
   1659            uint8 ResultCount = 0;
   1660            uint8 stackProfile = 0;
   1661            uint8 stackProfilePro = 0;
   1662            
   1663            pBDBListNwk  = nwk_getNwkDescList();
   1664            nwk_desc_list_release();
   1665            
   1666            pNwkDesc = pBDBListNwk;
   1667            while (pNwkDesc)
   1668            {
   1669              ResultCount++;
   1670              pNwkDesc = pNwkDesc->nextDesc;
   1671            }
   1672            
   1673            if(pBDBListNwk)
   1674            {
   1675              if(pfnFilterNwkDesc)
   1676              {
   1677                pfnFilterNwkDesc(pBDBListNwk, ResultCount);
   1678              }
   1679              
   1680              for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   1681              {
   1682                pNwkDesc = pBDBListNwk;
   1683                
   1684                if(pNwkDesc)
   1685                {
   1686                  for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   1687                  {
   1688                    if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
   1689                    {
   1690                      // If the extended Pan ID is commissioned to a non zero value
   1691                      // Only join the Pan that has match EPID
   1692                      if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   1693                      {
   1694                        //Remove from the list
   1695                        bdb_nwkDescFree(pNwkDesc);
   1696                        continue;
   1697                      }
   1698                    }
   1699                    else if ( zgConfigPANID != 0xFFFF )
   1700                    {
   1701                      // PAN Id is preconfigured. check if it matches
   1702                      if ( pNwkDesc->panId != zgConfigPANID )
   1703                      {
   1704                        //Remove from the list
   1705                        bdb_nwkDescFree(pNwkDesc);
   1706                        continue;
   1707                      }
   1708                    }
   1709          
   1710                    if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
   1711                    {
   1712                      // check that network is allowing joining
   1713                      if ( ZSTACK_ROUTER_BUILD )
   1714                      {
   1715                        if ( stackProfilePro == FALSE )
   1716                        {
   1717                          if ( !pNwkDesc->routerCapacity )
   1718                          {
   1719                            //Remove from the list
   1720                            bdb_nwkDescFree(pNwkDesc);
   1721                            continue;
   1722                          }
   1723                        }
   1724                        else
   1725                        {
   1726                          if ( !pNwkDesc->deviceCapacity )
   1727                          {
   1728                            //Remove from the list
   1729                            bdb_nwkDescFree(pNwkDesc);
   1730                            continue;
   1731                          }
   1732                        }
   1733                      }
   1734                      else if ( ZSTACK_END_DEVICE_BUILD )
   1735                      {
   1736                        if ( !pNwkDesc->deviceCapacity )
   1737                        {
   1738                          //Remove from the list
   1739                          bdb_nwkDescFree(pNwkDesc);
   1740                          continue;
   1741                        }
   1742                      }
   1743                    }
   1744          
   1745                    // check version of zigbee protocol
   1746                    if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   1747                      continue;
   1748          
   1749                    // check version of stack profile
   1750                    if ( pNwkDesc->stackProfile != zgStackProfile  )
   1751                    {
   1752                      if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   1753                          || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   1754                      {
   1755                        stackProfilePro = TRUE;
   1756                      }
   1757          
   1758                      if ( stackProfile == 0 )
   1759                      {
   1760                        //Remove from the list
   1761                        bdb_nwkDescFree(pNwkDesc);
   1762                        continue;
   1763                      }
   1764                    }
   1765                  }
   1766                }
   1767              }
   1768            }
   1769          }
   1770                
   1771           /*********************************************************************
   1772           * @fn          bdb_tryNwkAssoc
   1773           *
   1774           * @brief       Try to associate to the first network in the network descriptor list
   1775           *
   1776           * @param       none
   1777           *
   1778           * @return      none
   1779           */
   1780          static void bdb_tryNwkAssoc(void)
   1781          {
   1782            if(pBDBListNwk)
   1783            {
   1784              bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_ASSOC;
   1785              
   1786              //Try the first in the list after the filtering
   1787              if(ZSuccess != bdb_joinProcess(pBDBListNwk))
   1788              {
   1789                //If fail, free the first in the list and prepare for futher processing, either next nwk or discover again
   1790                uint8 bdbJoinEvent = BDB_JOIN_EVENT_ASSOCIATION;
   1791                bdb_nwkDescFree(pBDBListNwk);
   1792                bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,BDB_MSG_EVENT_FAIL,sizeof(uint8),&bdbJoinEvent);
   1793              }
   1794            }
   1795            else
   1796            {
   1797              bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_NWK_DISC;
   1798              uint8 bdbJoinEvent = BDB_JOIN_EVENT_NWK_DISCOVERY;
   1799              
   1800              bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,BDB_MSG_EVENT_FAIL,sizeof(uint8),&bdbJoinEvent);
   1801            }
   1802          }
   1803          
   1804          
   1805          
   1806           /*********************************************************************
   1807           * @fn          bdb_nwkAssocAttemt
   1808           *
   1809           * @brief       Process the result of an attempt to associate to a network 
   1810           *
   1811           * @param       didSuccess - bool
   1812           *
   1813           * @return      none
   1814           */
   1815          void bdb_nwkAssocAttemt(bool didSuccess)
   1816          {
   1817            bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_STATE_JOINING;
   1818            uint8 bdbJoinEvent = BDB_JOIN_EVENT_ASSOCIATION;
   1819            uint8 status;
   1820            
   1821            if(didSuccess)
   1822            {
   1823              status = BDB_MSG_EVENT_SUCCESS;
   1824            }
   1825            else
   1826            {
   1827              if(bdb_nwkAssocRetriesCount < BDBC_REC_SAME_NETWORK_RETRY_ATTEMPS)
   1828              {
   1829                bdb_nwkAssocRetriesCount++;
   1830              }
   1831              else
   1832              {
   1833                //Free the first in the list and prepare for futher processing
   1834                bdb_nwkDescFree(pBDBListNwk);
   1835                bdb_nwkAssocRetriesCount = 0;
   1836              }
   1837              status = BDB_MSG_EVENT_FAIL;
   1838            }
   1839            bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,status,sizeof(uint8),&bdbJoinEvent);
   1840          }
   1841                                 
   1842          
   1843          /****************************************************************************
   1844           * @fn          bdb_nwkDescFree
   1845           *
   1846           * @brief       This function frees one network discovery data.
   1847           *
   1848           * @param       ZSuccess - If the device was found and erased
   1849           * @param       ZInvalidParameter - Not found
   1850           *
   1851           * @return      none
   1852           */
   1853          ZStatus_t bdb_nwkDescFree(networkDesc_t* nodeDescToRemove)
   1854          {
   1855            networkDesc_t* current_desc;
   1856            networkDesc_t* prev_desc;
   1857            
   1858            current_desc = pBDBListNwk;
   1859          
   1860            while(current_desc != NULL)
   1861            {  
   1862              if(current_desc == nodeDescToRemove)
   1863              {
   1864                if (current_desc == pBDBListNwk)
   1865                {
   1866                  pBDBListNwk = pBDBListNwk->nextDesc;
   1867                }
   1868                else
   1869                {
   1870                  prev_desc->nextDesc = current_desc->nextDesc;
   1871                }
   1872                
   1873                osal_mem_free( current_desc );
   1874                
   1875                return ZSuccess;
   1876              }
   1877          
   1878              prev_desc = current_desc;
   1879              current_desc = current_desc->nextDesc;
   1880            }
   1881            
   1882            return ZInvalidParameter;
   1883          }
   1884          
   1885          /*********************************************************************
   1886          * @fn          bdb_joinProcess
   1887          *
   1888          * @brief       Start the joining process for the selected nwk
   1889          *
   1890          * @return      ZStatus_t
   1891          */  
   1892          ZStatus_t bdb_joinProcess(networkDesc_t *pChosenNwk)
   1893          {
   1894            ZStatus_t status;
   1895           
   1896            ZDApp_ChangeState( DEV_NWK_JOINING );
   1897            ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
   1898          
   1899            status =  NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
   1900                                  pChosenNwk->logicalChannel,
   1901                                  ZDO_Config_Node_Descriptor.CapabilityFlags,
   1902                                  pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth );
   1903            
   1904            if(status == ZSuccess)
   1905            {
   1906              // The receiver is on, turn network layer polling off.
   1907              if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   1908              {
   1909                // for an End Device with NO Child Table Management process or for a Router
   1910                if ( ( ZG_DEVICE_RTR_TYPE )  ||
   1911                     ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
   1912                {
   1913                  NLME_SetPollRate( 0 );
   1914                  NLME_SetQueuedPollRate( 0 );
   1915                  NLME_SetResponseRate( 0 );
   1916                }
   1917              }
   1918              else
   1919              {
   1920                if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   1921                {
   1922                  ZDApp_SavedPollRate = zgPollRate;
   1923                  NLME_SetPollRate( zgRejoinPollRate );
   1924                }
   1925              }
   1926            }
   1927            return status;
   1928          }
   1929          #endif
   1930          
   1931          
   1932           /*********************************************************************
   1933           * @fn          bdb_setChannelAttribute
   1934           *
   1935           * @brief       Set the primary or seconday channel for discovery or formation procedure
   1936           *
   1937           * @param       isPrimaryChannel - True if channel to set is primary,  
   1938           *                                 False if the channel to set is secondary
   1939           *
   1940           * @param       channel - Channel mask
   1941           *
   1942           * @return      none
   1943           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1944          void bdb_setChannelAttribute(bool isPrimaryChannel, uint32 channel)
   \                     bdb_setChannelAttribute:
   1945          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   1946            if(isPrimaryChannel)
   \   00000D   E9           MOV     A,R1
   \   00000E   6005         JZ      ??bdb_setChannelAttribute_0
   1947            {
   1948              bdbAttributes.bdbPrimaryChannelSet = channel;
   \   000010   90....       MOV     DPTR,#bdbAttributes + 4
   \   000013   8003         SJMP    ??bdb_setChannelAttribute_1
   1949            }
   1950            else
   1951            {
   1952              bdbAttributes.bdbSecondaryChannelSet = channel;
   \                     ??bdb_setChannelAttribute_0:
   \   000015   90....       MOV     DPTR,#bdbAttributes
   \                     ??bdb_setChannelAttribute_1:
   \   000018   78..         MOV     R0,#?V0
   \   00001A   12....       LCALL   ?L_MOV_TO_X
   1953            }
   1954          }
   \   00001D   80..         SJMP    ??Subroutine38_0
   1955          
   1956           /*********************************************************************
   1957           * @fn          bdb_setChannel
   1958           *
   1959           * @brief       Set channel and save it in Nv for joining/formation operations
   1960           *
   1961           * @param       channel - Channel mask
   1962           *
   1963           * @return      none
   1964           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7404         MOV     A,#0x4
   \   000002                REQUIRE ??Subroutine37_0
   \   000002                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1965          void bdb_setChannel(uint32 channel)
   \                     bdb_setChannel:
   1966          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   1967            //Assign the channel and save it into nv
   1968            vScanChannels = channel;
   \   00000D   90....       MOV     DPTR,#zgDefaultChannelList
   \   000010   78..         MOV     R0,#?V0
   \   000012   12....       LCALL   ?L_MOV_TO_X
   1969            runtimeChannel = channel;
   \   000015   90....       MOV     DPTR,#runtimeChannel
   \   000018   78..         MOV     R0,#?V0
   \   00001A   12....       LCALL   ?L_MOV_TO_X
   1970              
   1971            osal_nv_write(ZCD_NV_CHANLIST,0,sizeof(uint32),&vScanChannels);
   \   00001D                ; Setup parameters for call to function osal_nv_write
   \   00001D   75....       MOV     ?V0,#zgDefaultChannelList & 0xff
   \   000020   75....       MOV     ?V1,#(zgDefaultChannelList >> 8) & 0xff
   \   000023   78..         MOV     R0,#?V0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   75..04       MOV     ?V0,#0x4
   \   00002B   75..00       MOV     ?V1,#0x0
   \   00002E   78..         MOV     R0,#?V0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7C00         MOV     R4,#0x0
   \   000035   7D00         MOV     R5,#0x0
   \   000037   7A84         MOV     R2,#-0x7c
   \   000039   7B00         MOV     R3,#0x0
   \   00003B   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003E   80..         SJMP    ?Subroutine2
   1972          }
   1973          
   1974          
   1975           /*********************************************************************
   1976           * @fn          bdb_nwkJoiningFormation   
   1977           *
   1978           * @brief       Performs Joining/Formation operation on primary or secondary channel
   1979           *
   1980           * @param       isJoining - TRUE if the device is performing joining, FALSE is performing Formation
   1981           *
   1982           * @return      none
   1983           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1984          void bdb_nwkJoiningFormation(bool isJoining)
   \                     bdb_nwkJoiningFormation:
   1985          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1986            
   1987            if((vDoPrimaryScan) && (bdbAttributes.bdbPrimaryChannelSet))
   \   000007   90....       MOV     DPTR,#vDoPrimaryScan
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   601C         JZ      ??bdb_nwkJoiningFormation_0
   \   00000D   90....       MOV     DPTR,#bdbAttributes + 4
   \   000010   78..         MOV     R0,#?V0
   \   000012   12....       LCALL   ?L_MOV_X
   \   000015   E5..         MOV     A,?V0
   \   000017   45..         ORL     A,?V1
   \   000019   45..         ORL     A,?V2
   \   00001B   45..         ORL     A,?V3
   \   00001D   600A         JZ      ??bdb_nwkJoiningFormation_0
   1988            {
   1989              bdb_setChannel(bdbAttributes.bdbPrimaryChannelSet);
   \   00001F                ; Setup parameters for call to function bdb_setChannel
   \   00001F   AA..         MOV     R2,?V0
   \   000021   AB..         MOV     R3,?V1
   \   000023   AC..         MOV     R4,?V2
   \   000025   AD..         MOV     R5,?V3
   \   000027   800B         SJMP    ??bdb_nwkJoiningFormation_1
   1990            }
   1991            else
   1992            {
   1993              vDoPrimaryScan = FALSE;
   \                     ??bdb_nwkJoiningFormation_0:
   \   000029   90....       MOV     DPTR,#vDoPrimaryScan
   \   00002C   E4           CLR     A
   \   00002D   F0           MOVX    @DPTR,A
   1994              bdb_setChannel(bdbAttributes.bdbSecondaryChannelSet);
   \   00002E                ; Setup parameters for call to function bdb_setChannel
   \   00002E   90....       MOV     DPTR,#bdbAttributes
   \   000031   12....       LCALL   ?XLOAD_R2345
   \                     ??bdb_nwkJoiningFormation_1:
   \   000034   12....       LCALL   `??bdb_setChannel::?relay`; Banked call to: bdb_setChannel
   1995            }
   1996          
   1997            if(vScanChannels)
   \   000037   90....       MOV     DPTR,#zgDefaultChannelList
   \   00003A   12....       LCALL   ?XLOAD_R0123
   \   00003D   E8           MOV     A,R0
   \   00003E   49           ORL     A,R1
   \   00003F   4A           ORL     A,R2
   \   000040   4B           ORL     A,R3
   \   000041   601A         JZ      ??bdb_nwkJoiningFormation_2
   1998            {
   1999              if(ZG_DEVICE_RTRONLY_TYPE)
   \   000043   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000046   E0           MOVX    A,@DPTR
   \   000047   6401         XRL     A,#0x1
   \   000049   7007         JNZ     ??bdb_nwkJoiningFormation_3
   2000              {
   2001                if(isJoining)
   \   00004B   EE           MOV     A,R6
   \   00004C   7004         JNZ     ??bdb_nwkJoiningFormation_3
   2002                {
   2003                  ZDOInitDeviceEx(100,0);
   2004                }
   2005                else
   2006                {
   2007                  ZDOInitDeviceEx(100,1);
   \   00004E                ; Setup parameters for call to function ZDOInitDeviceEx
   \   00004E   7901         MOV     R1,#0x1
   \   000050   8002         SJMP    ??bdb_nwkJoiningFormation_4
   2008                }
   2009              }
   2010              //ZED can only join, and ZC can only create
   2011              else
   2012              {
   2013                ZDOInitDeviceEx(100,0);
   \                     ??bdb_nwkJoiningFormation_3:
   \   000052                ; Setup parameters for call to function ZDOInitDeviceEx
   \   000052   7900         MOV     R1,#0x0
   \                     ??bdb_nwkJoiningFormation_4:
   \   000054   7A64         MOV     R2,#0x64
   \   000056   7B00         MOV     R3,#0x0
   \   000058   12....       LCALL   `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
   \   00005B   800E         SJMP    ??bdb_nwkJoiningFormation_5
   2014              }
   2015            }
   2016            else
   2017            {
   2018              if(isJoining)
   \                     ??bdb_nwkJoiningFormation_2:
   \   00005D   EE           MOV     A,R6
   \   00005E   7A00         MOV     R2,#0x0
   \   000060   6004         JZ      ??bdb_nwkJoiningFormation_6
   2019              {
   2020                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, FALSE);
   \   000062                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000062   7903         MOV     R1,#0x3
   \   000064   8002         SJMP    ??bdb_nwkJoiningFormation_7
   2021              }
   2022              else
   2023              {
   2024                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
   \                     ??bdb_nwkJoiningFormation_6:
   \   000066                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000066   7905         MOV     R1,#0x5
   \                     ??bdb_nwkJoiningFormation_7:
   \   000068   12....       LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2025              }
   2026            }
   2027          }
   \                     ??bdb_nwkJoiningFormation_5:
   \   00006B   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   2028          
   2029          #if (ZG_BUILD_JOINING_TYPE)
   2030           /*********************************************************************
   2031           * @fn          bdb_tcLinkKeyExchangeAttempt
   2032           *
   2033           * @brief       Generic send msg for TC link key exchange process attempts
   2034           *
   2035           * @param       didSuccess - FALSE if the step failed/timeout, TRUE otherwise
   2036           * @param       bdbTCExchangeState - Step in which the attemp was done
   2037           *
   2038           * @return      none
   2039           */
   2040          void bdb_tcLinkKeyExchangeAttempt(bool didSuccess, uint8 bdbTCExchangeState)
   2041          {
   2042            bool bdbEventStatus = BDB_MSG_EVENT_SUCCESS;
   2043            uint8 dummy;
   2044            bdbCommissioningProcedureState.bdbTCExchangeState = bdbTCExchangeState;
   2045            if(didSuccess)
   2046            {
   2047              //Allow try since we are performing a new step.
   2048              osal_stop_timerEx(bdb_TaskID, BDB_PROCESS_TIMEOUT);
   2049              bdbAttributes.bdbTCLinkKeyExchangeAttempts = 0;
   2050            }
   2051            else
   2052            {
   2053              bdbEventStatus = BDB_MSG_EVENT_FAIL;
   2054            }
   2055            bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE,bdbEventStatus,1, &dummy);
   2056          }
   2057          
   2058          
   2059           /*********************************************************************
   2060           * @fn          bdb_requestVerifyTCLinkKey
   2061           *
   2062           * @brief       Attempt to verify the TC link key by sending Verify Key Request
   2063           *
   2064           * @param       none
   2065           *
   2066           * @return      none
   2067           */
   2068          void bdb_requestVerifyTCLinkKey(void)
   2069          {
   2070              uint8 TC_ExtAddr[Z_EXTADDR_LEN];
   2071              APSME_VerifyKeyReq_t vKey;
   2072              
   2073              APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
   2074              
   2075              vKey.tcExtAddr = TC_ExtAddr;
   2076              vKey.keyType = KEY_TYPE_TC_LINK;
   2077              
   2078              APSME_VerifyKeyReq( &vKey );
   2079              
   2080              osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
   2081              osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT,BDBC_TC_LINK_KEY_EXANGE_TIMEOUT);
   2082              
   2083          }
   2084          
   2085          /*********************************************************************
   2086           * @fn          bdb_requestTCLinkKey
   2087           *
   2088           * @brief       Attempt to request a TC link key
   2089           *
   2090           * @param       none
   2091           *
   2092           * @return      none
   2093           */
   2094          void bdb_requestTCLinkKey(void)
   2095          {
   2096            zAddrType_t destAddr;
   2097            APSME_RequestKeyReq_t req;
   2098          
   2099            destAddr.addrMode = Addr16Bit;
   2100            destAddr.addr.shortAddr = 0x0000;
   2101            
   2102            req.dstAddr = destAddr.addr.shortAddr;
   2103            req.keyType = KEY_TYPE_TC_LINK;
   2104            
   2105            APSME_RequestKeyReq(&req);
   2106            
   2107            osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
   2108            
   2109            osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT,(uint32)requestLinkKeyTimeout);
   2110          } 
   2111          
   2112          
   2113          /*********************************************************************
   2114           * @fn          bdb_requestTCStackVersion
   2115           *
   2116           * @brief       Attempt to request the TC stack version using ZDP Node desc if 
   2117           *              join a Centralized nwk
   2118           *
   2119           * @param       none
   2120           *
   2121           * @return      none
   2122           */
   2123          void bdb_requestTCStackVersion(void)
   2124          {
   2125            if(requestNewTrustCenterLinkKey)
   2126            {
   2127              if(!APSME_IsDistributedSecurity())
   2128              {
   2129                if(bdbAttributes.bdbTCLinkKeyExchangeMethod == BDB_TC_LINK_KEY_EXCHANGE_APS_KEY)
   2130                {
   2131                  zAddrType_t destAddr;
   2132                 
   2133                  destAddr.addrMode = Addr16Bit;
   2134                  destAddr.addr.shortAddr = 0x0000;
   2135                 
   2136                  ZDP_NodeDescReq( &destAddr, destAddr.addr.shortAddr, 0);  
   2137                  
   2138                  osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
   2139                  osal_start_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT, BDBC_TC_LINK_KEY_EXANGE_TIMEOUT );
   2140                  return;
   2141                }
   2142                else
   2143                {
   2144                  if(pfnCBKETCLinkKeyExchange)
   2145                  {
   2146                    pfnCBKETCLinkKeyExchange();
   2147                  }
   2148                  return;
   2149                }
   2150              }
   2151              else
   2152              {
   2153                bdb_setNodeJoinLinkKeyType(BDB_DISTRIBUTED_SECURITY_GLOBAL_LINK_KEY);
   2154              }
   2155            }
   2156            else
   2157            {
   2158              //Key not required, set default which is global
   2159              bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
   2160            }
   2161          
   2162          
   2163            //TC link key not required or join distributed nwk
   2164            bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE,TRUE);
   2165          }
   2166          #endif
   2167          
   2168          
   2169          /*********************************************************************
   2170           * @fn          bdb_nwkSteeringDeviceOnNwk
   2171           *
   2172           * @brief       Send ZDP mgmt permit joining
   2173           *
   2174           * @param       none
   2175           *
   2176           * @return      none
   2177           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2178          void bdb_nwkSteeringDeviceOnNwk(void)
   \                     bdb_nwkSteeringDeviceOnNwk:
   2179          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 9
   \   000004   74F7         MOV     A,#-0x9
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   2180            zAddrType_t dstAddr;
   2181            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   74FC         MOV     A,#-0x4
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   74FF         MOV     A,#-0x1
   \   000015   F0           MOVX    @DPTR,A
   2182            dstAddr.addrMode = AddrBroadcast;
   \   000016   7408         MOV     A,#0x8
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   740F         MOV     A,#0xf
   \   00001D   F0           MOVX    @DPTR,A
   2183            // Trust Center significance is always true
   2184            ZDP_MgmtPermitJoinReq( &dstAddr, BDBC_MIN_COMMISSIONING_TIME, TRUE, FALSE );
   \   00001E                ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   7C01         MOV     R4,#0x1
   \   000022   79B4         MOV     R1,#-0x4c
   \   000024   AA..         MOV     R2,?XSP + 0
   \   000026   AB..         MOV     R3,?XSP + 1
   \   000028   12....       LCALL   `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
   2185          }
   \   00002B   7409         MOV     A,#0x9
   \   00002D                REQUIRE ?Subroutine6
   \   00002D                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   02....       LJMP    ??Subroutine35_0 & 0xFFFF
   2186          
   2187          
   2188          /*********************************************************************
   2189           * @fn          bdb_startResumeCommissioningProcess
   2190           *
   2191           * @brief       Starts or resume the commissioning operations sets in the 
   2192           *              commissioningMode attribute
   2193           *
   2194           * @param       none
   2195           *
   2196           * @return      none
   2197           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2198          void bdb_startResumeCommissioningProcess(void)
   \                     bdb_startResumeCommissioningProcess:
   2199          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2200          
   2201          #if ( defined ( BDB_TL_INITIATOR ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) ) 
   2202            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_INITIATOR_TL)
   2203            {
   2204              uint16 nwkAddr;
   2205          
   2206              //Does the device supports this commissioning mode?
   2207              if(bdbAttributes.bdbNodeCommissioningCapability & BDB_TOUCHLINK_CAPABILITY)
   2208              {
   2209                //Clear previous state and substates
   2210                osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState));
   2211                bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_TL;
   2212                
   2213                // Get our short address
   2214                ZMacGetReq( ZMacShortAddress, (byte*)&nwkAddr );
   2215                if ( nwkAddr == INVALID_NODE_ADDR )
   2216                {
   2217                  initiatorSelectNwkParams();
   2218                }
   2219                
   2220                touchLinkInitiator_StartDevDisc( );  
   2221                
   2222                bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_TOUCHLINK);
   2223              }
   2224              else
   2225              {
   2226                //Process the next commissioning mode
   2227                bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );
   2228              }
   2229              return;
   2230            }
   2231          #endif // BDB_TOUCHLINK_CAPABILITY_ENABLED  
   2232            
   2233          #if ZG_BUILD_ENDDEVICE_TYPE
   2234            if(ZG_DEVICE_ENDDEVICE_TYPE)
   2235            {
   2236              if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)
   2237              {
   2238                //No commissioning process can be performed if the ZED has lost its parent
   2239                return;
   2240              }
   2241            }
   2242          #endif
   2243            
   2244            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_NWK_STEERING)
   \   00000A   90....       MOV     DPTR,#bdbAttributes + 11
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   A2E1         MOV     C,0xE0 /* A   */.1
   \   000010   5028         JNC     ??bdb_startResumeCommissioningProcess_0
   2245            {
   2246              bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_STEERING_ON_NWK;
   \   000012   90....       MOV     DPTR,#bdbCommissioningProcedureState
   \   000015   7404         MOV     A,#0x4
   \   000017   F0           MOVX    @DPTR,A
   2247              
   2248              if(bdbAttributes.bdbNodeCommissioningCapability & BDB_NETWORK_STEERING_CAPABILITY)
   \   000018   90....       MOV     DPTR,#bdbAttributes + 12
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00001E   5017         JNC     ??bdb_startResumeCommissioningProcess_1
   2249              {
   2250          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
   2251                bdb_ClearNetworkParams();
   2252          #endif
   2253                if(bdbAttributes.bdbNodeIsOnANetwork)
   \   000020   90....       MOV     DPTR,#bdbAttributes + 14
   \   000023   E0           MOVX    A,@DPTR
   \   000024   600A         JZ      ??bdb_startResumeCommissioningProcess_2
   2254                {
   2255                  bdb_nwkSteeringDeviceOnNwk();
   \   000026                ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
   \   000026   12....       LCALL   `??bdb_nwkSteeringDeviceOnNwk::?relay`; Banked call to: bdb_nwkSteeringDeviceOnNwk
   2256                  bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
   \   000029                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000029   7A01         MOV     R2,#0x1
   \   00002B   7904         MOV     R1,#0x4
   \   00002D   12....       LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2257                }
   2258          #if (ZG_BUILD_JOINING_TYPE)
   2259                else
   2260                {
   2261                  if(ZG_DEVICE_JOINING_TYPE)
   2262                  {
   2263                    vDoPrimaryScan = TRUE;
   2264                    
   2265                    //Initialize the commissioning procedure state, bdbJoinState to nwk discovery and TCLinkKeyExchange to not active
   2266                    osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState_t));
   2267                    bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_JOINING;
   2268                    bdb_nwkJoiningFormation(TRUE);
   2269                    bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_NWK_STEERING);
   2270                  }
   2271                }
   2272          #endif
   2273          #if (ZG_BUILD_COORDINATOR_TYPE)
   2274                if(ZG_DEVICE_COORDINATOR_TYPE)
   2275                {
   2276                  bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, FALSE);
   \                     ??bdb_startResumeCommissioningProcess_2:
   \   000030                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000030   7A00         MOV     R2,#0x0
   \   000032   7904         MOV     R1,#0x4
   \   000034   12....       LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2277                }
   2278          #endif
   2279              }
   2280              return;
   \                     ??bdb_startResumeCommissioningProcess_1:
   \   000037   02....       LJMP    ??bdb_startResumeCommissioningProcess_3 & 0xFFFF
   2281            }
   2282            
   2283            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_NWK_FORMATION)
   \                     ??bdb_startResumeCommissioningProcess_0:
   \   00003A   A2E2         MOV     C,0xE0 /* A   */.2
   \   00003C   5044         JNC     ??bdb_startResumeCommissioningProcess_4
   2284            {
   2285              bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FORMATION;
   \   00003E   90....       MOV     DPTR,#bdbCommissioningProcedureState
   \   000041   7405         MOV     A,#0x5
   \   000043   F0           MOVX    @DPTR,A
   2286              
   2287              if(bdbAttributes.bdbNodeCommissioningCapability & BDB_NETWORK_FORMATION_CAPABILITY)
   \   000044   90....       MOV     DPTR,#bdbAttributes + 12
   \   000047   E0           MOVX    A,@DPTR
   \   000048   A2E1         MOV     C,0xE0 /* A   */.1
   \   00004A   502C         JNC     ??bdb_startResumeCommissioningProcess_5
   2288              {
   2289                if(!bdbAttributes.bdbNodeIsOnANetwork)
   \   00004C   90....       MOV     DPTR,#bdbAttributes + 14
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   7026         JNZ     ??bdb_startResumeCommissioningProcess_5
   2290                {
   2291          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
   2292                bdb_ClearNetworkParams();
   2293          #endif
   2294                  vDoPrimaryScan = TRUE;
   \   000052   90....       MOV     DPTR,#vDoPrimaryScan
   \   000055   7401         MOV     A,#0x1
   \   000057   F0           MOVX    @DPTR,A
   2295                  
   2296                  osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState));
   \   000058                ; Setup parameters for call to function osal_memset
   \   000058   7C04         MOV     R4,#0x4
   \   00005A   7D00         MOV     R5,#0x0
   \   00005C   7900         MOV     R1,#0x0
   \   00005E   7A..         MOV     R2,#bdbCommissioningProcedureState & 0xff
   \   000060   7B..         MOV     R3,#(bdbCommissioningProcedureState >> 8) & 0xff
   \   000062   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2297                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FORMATION;
   \   000065   90....       MOV     DPTR,#bdbCommissioningProcedureState
   \   000068   7405         MOV     A,#0x5
   \   00006A   F0           MOVX    @DPTR,A
   2298          
   2299                  bdb_nwkJoiningFormation(FALSE);
   \   00006B                ; Setup parameters for call to function bdb_nwkJoiningFormation
   \   00006B   7900         MOV     R1,#0x0
   \   00006D   12....       LCALL   `??bdb_nwkJoiningFormation::?relay`; Banked call to: bdb_nwkJoiningFormation
   2300                  bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_FORMATION);
   \   000070                ; Setup parameters for call to function bdb_NotifyCommissioningModeStart
   \   000070   7902         MOV     R1,#0x2
   \   000072   12....       LCALL   `??bdb_NotifyCommissioningModeStart::?relay`; Banked call to: bdb_NotifyCommissioningModeStart
   2301                  return;
   \   000075   02....       LJMP    ??bdb_startResumeCommissioningProcess_3 & 0xFFFF
   2302                }
   2303              }
   2304              bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
   \                     ??bdb_startResumeCommissioningProcess_5:
   \   000078                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000078   7A00         MOV     R2,#0x0
   \   00007A   7905         MOV     R1,#0x5
   \   00007C   12....       LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2305              return;
   \   00007F   02....       LJMP    ??bdb_startResumeCommissioningProcess_3 & 0xFFFF
   2306            }
   2307          
   2308          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)    
   2309            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_FINDING_BINDING)
   \                     ??bdb_startResumeCommissioningProcess_4:
   \   000082   A2E3         MOV     C,0xE0 /* A   */.3
   \   000084   4003         JC      $+5
   \   000086   02....       LJMP    ??bdb_startResumeCommissioningProcess_3 & 0xFFFF
   2310            {
   2311              bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FINDING_BINDING;
   \   000089   90....       MOV     DPTR,#bdbCommissioningProcedureState
   \   00008C   7406         MOV     A,#0x6
   \   00008E   F0           MOVX    @DPTR,A
   2312              
   2313              //Is the device on a network?
   2314              if(bdb_isDeviceNonFactoryNew())
   \   00008F   90....       MOV     DPTR,#bdbAttributes + 14
   \   000092   E0           MOVX    A,@DPTR
   \   000093   7003         JNZ     $+5
   \   000095   02....       LJMP    ??bdb_startResumeCommissioningProcess_6 & 0xFFFF
   2315              {
   2316                zclAttrRec_t attrRec;
   2317          
   2318                endPointDesc_t *bdb_CurrEpDescriptor = NULL;
   2319          
   2320                bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint();
   \   000098                ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
   \   000098   12....       LCALL   `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
   \   00009B   8A..         MOV     ?V0,R2
   \   00009D   8B..         MOV     ?V1,R3
   \   00009F   AE..         MOV     R6,?V0
   \   0000A1   AF..         MOV     R7,?V1
   2321                
   2322                //If not found endpoint with Identify cluster is found, then report fail
   2323                if(bdb_CurrEpDescriptor == NULL)
   \   0000A3   EE           MOV     A,R6
   \   0000A4   4F           ORL     A,R7
   \   0000A5   7003         JNZ     $+5
   \   0000A7   02....       LJMP    ??bdb_startResumeCommissioningProcess_6 & 0xFFFF
   2324                {
   2325                  bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   \   0000AA                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   2326                  return;
   2327                }
   2328                
   2329                if( bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_TARGET)  //F&B as Target
   \   0000AA   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000AD   A3           INC     DPTR
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   A2E1         MOV     C,0xE0 /* A   */.1
   \   0000B1   4003         JC      $+5
   \   0000B3   02....       LJMP    ??bdb_startResumeCommissioningProcess_7 & 0xFFFF
   2330                {
   2331                  if (zclFindAttrRec( bdb_CurrEpDescriptor->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
   2332                            ATTRID_IDENTIFY_TIME, &attrRec ) )
   \   0000B6                ; Setup parameters for call to function zclFindAttrRec
   \   0000B6   7403         MOV     A,#0x3
   \   0000B8   12....       LCALL   ?XSTACK_DISP100_8
   \   0000BB   88..         MOV     ?V0,R0
   \   0000BD   89..         MOV     ?V1,R1
   \   0000BF   78..         MOV     R0,#?V0
   \   0000C1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C4   7C00         MOV     R4,#0x0
   \   0000C6   7D00         MOV     R5,#0x0
   \   0000C8   7A03         MOV     R2,#0x3
   \   0000CA   7B00         MOV     R3,#0x0
   \   0000CC   8E82         MOV     DPL,R6
   \   0000CE   8F83         MOV     DPH,R7
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   F9           MOV     R1,A
   \   0000D2   12....       LCALL   `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0000D5   7402         MOV     A,#0x2
   \   0000D7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DA   E9           MOV     A,R1
   \   0000DB   7003         JNZ     $+5
   \   0000DD   02....       LJMP    ??bdb_startResumeCommissioningProcess_8 & 0xFFFF
   2333                  {
   2334                    //Set it to at less 180 
   2335                    if ( *((uint16*)attrRec.attr.dataPtr) <= BDBC_MIN_COMMISSIONING_TIME )
   \   0000E0   7409         MOV     A,#0x9
   \   0000E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E5   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000E8   C3           CLR     C
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   94B5         SUBB    A,#-0x4b
   \   0000EC   A3           INC     DPTR
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   9400         SUBB    A,#0x0
   \   0000F0   5043         JNC     ??bdb_startResumeCommissioningProcess_9
   2336                    {
   2337                      *((uint16*)attrRec.attr.dataPtr) = BDBC_MIN_COMMISSIONING_TIME;
   \   0000F2   8882         MOV     DPL,R0
   \   0000F4   8983         MOV     DPH,R1
   \   0000F6   74B4         MOV     A,#-0x4c
   \   0000F8   F0           MOVX    @DPTR,A
   \   0000F9   A3           INC     DPTR
   \   0000FA   E4           CLR     A
   \   0000FB   F0           MOVX    @DPTR,A
   2338                       osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
   \   0000FC                ; Setup parameters for call to function osal_start_timerEx
   \   0000FC   90....       MOV     DPTR,#__Constant_3e8
   \   0000FF   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000102   7A00         MOV     R2,#0x0
   \   000104   7B20         MOV     R3,#0x20
   \   000106   90....       MOV     DPTR,#bdb_TaskID
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   F9           MOV     R1,A
   \   00010B   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00010E   7404         MOV     A,#0x4
   \   000110   12....       LCALL   ?DEALLOC_XSTACK8
   2339          
   2340                      if(pfnIdentifyTimeChangeCB != NULL)
   \   000113   90....       MOV     DPTR,#pfnIdentifyTimeChangeCB
   \   000116   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000119   601A         JZ      ??bdb_startResumeCommissioningProcess_9
   2341                      {
   2342                        if(bdbIndentifyActiveEndpoint == 0xFF)
   \   00011B   90....       MOV     DPTR,#bdbIndentifyActiveEndpoint
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   F4           CPL     A
   \   000120   7004         JNZ     ??bdb_startResumeCommissioningProcess_10
   2343                        {
   2344                          pfnIdentifyTimeChangeCB(bdbIndentifyActiveEndpoint);  
   \   000122                ; Setup parameters for indirect call
   \   000122   79FF         MOV     R1,#-0x1
   \   000124   8006         SJMP    ??bdb_startResumeCommissioningProcess_11
   2345                        }
   2346                        else
   2347                        {
   2348                          pfnIdentifyTimeChangeCB(bdb_CurrEpDescriptor->endPoint);
   \                     ??bdb_startResumeCommissioningProcess_10:
   \   000126                ; Setup parameters for indirect call
   \   000126   8E82         MOV     DPL,R6
   \   000128   8F83         MOV     DPH,R7
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   F9           MOV     R1,A
   \                     ??bdb_startResumeCommissioningProcess_11:
   \   00012C   90....       MOV     DPTR,#pfnIdentifyTimeChangeCB + 1
   2349                        }
   2350                      }
   2351                    }
   \   00012F   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000132   12....       LCALL   ?CALL_IND
   2352                    //Attribute found and set, report success
   2353                    if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR))
   \                     ??bdb_startResumeCommissioningProcess_9:
   \   000135   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000138   4004         JC      ??bdb_startResumeCommissioningProcess_12
   2354                    {
   2355                      bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FB_TARGET_IN_PROGRESS);
   \   00013A                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   00013A   7909         MOV     R1,#0x9
   \   00013C   8032         SJMP    ??bdb_startResumeCommissioningProcess_13
   2356                    }
   2357                    else
   2358                    {
   2359                      bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
   2360          
   2361                      bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
   \                     ??bdb_startResumeCommissioningProcess_12:
   \   00013E   7401         MOV     A,#0x1
   \   000140   12....       LCALL   ?XSTACK_DISP0_8
   \   000143   7403         MOV     A,#0x3
   \   000145   F0           MOVX    @DPTR,A
   2362                      bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_FB_TARGET_IN_PROGRESS;
   \   000146   85..82       MOV     DPL,?XSP + 0
   \   000149   85..83       MOV     DPH,?XSP + 1
   \   00014C   7409         MOV     A,#0x9
   \   00014E   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   2363          
   2364                      bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   2365                    }
   2366                  }
   \                     ??CrossCallReturnLabel_39:
   \   000151   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000154   7C03         MOV     R4,#0x3
   \   000156   7B00         MOV     R3,#0x0
   \   000158   7A0A         MOV     R2,#0xa
   \   00015A   90....       MOV     DPTR,#bdb_TaskID
   \   00015D   E0           MOVX    A,@DPTR
   \   00015E   F9           MOV     R1,A
   \   00015F   12....       LCALL   `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   000162   7402         MOV     A,#0x2
   \   000164   12....       LCALL   ?DEALLOC_XSTACK8
   \   000167   800A         SJMP    ??bdb_startResumeCommissioningProcess_7
   2367                  else
   2368                  {
   2369                    //Attribute not found and no initiator process, report fail
   2370                    if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR))
   \                     ??bdb_startResumeCommissioningProcess_8:
   \   000169   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00016C   4005         JC      ??bdb_startResumeCommissioningProcess_7
   2371                    {
   2372                      bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   \   00016E                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   00016E   790E         MOV     R1,#0xe
   \                     ??bdb_startResumeCommissioningProcess_13:
   \   000170   12....       LCALL   `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   2373                      
   2374                    }
   2375                  }
   2376                }  //F&B Target
   2377                
   2378                if( bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR)  //F&B as Initiator
   \                     ??bdb_startResumeCommissioningProcess_7:
   \   000173   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000176   505E         JNC     ??bdb_startResumeCommissioningProcess_3
   2379                {
   2380                  bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
   2381                  
   2382                  //Send identify query with the endpoint requested
   2383                  if(bdb_SendIdentifyQuery(bdb_CurrEpDescriptor->endPoint) != ZSuccess)
   \   000178                ; Setup parameters for call to function bdb_SendIdentifyQuery
   \   000178   8E82         MOV     DPL,R6
   \   00017A   8F83         MOV     DPH,R7
   \   00017C   E0           MOVX    A,@DPTR
   \   00017D   F9           MOV     R1,A
   \   00017E   12....       LCALL   `??bdb_SendIdentifyQuery::?relay`; Banked call to: bdb_SendIdentifyQuery
   \   000181   E9           MOV     A,R1
   \   000182   6005         JZ      ??bdb_startResumeCommissioningProcess_14
   2384                  {
   2385                    bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   \   000184                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   000184   790E         MOV     R1,#0xe
   \   000186   12....       LCALL   `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   2386                  }
   2387          
   2388                  //If periodic F&B is enabled
   2389                  if ( FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE )
   2390                  {
   2391                    // total F&B time will be at least BDBC_MIN_COMMISSIONING_TIME, and at most (BDBC_MIN_COMMISSIONING_TIME + FINDING_AND_BINDING_PERIODIC_TIME - 1)
   2392                    bdb_FB_InitiatorCurrentCyclesNumber = (BDBC_MIN_COMMISSIONING_TIME + (FINDING_AND_BINDING_PERIODIC_TIME - 1)) / FINDING_AND_BINDING_PERIODIC_TIME;
   \                     ??bdb_startResumeCommissioningProcess_14:
   \   000189   90....       MOV     DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   00018C   740C         MOV     A,#0xc
   \   00018E   F0           MOVX    @DPTR,A
   2393                    
   2394                    osal_start_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT, FINDING_AND_BINDING_PERIODIC_TIME * 1000);
   \   00018F                ; Setup parameters for call to function osal_start_timerEx
   \   00018F   90....       MOV     DPTR,#__Constant_3a98
   \   000192   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000195   7A40         MOV     R2,#0x40
   \   000197   7B00         MOV     R3,#0x0
   \   000199   90....       MOV     DPTR,#bdb_TaskID
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   F9           MOV     R1,A
   \   00019E   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0001A1   7404         MOV     A,#0x4
   \   0001A3   12....       LCALL   ?DEALLOC_XSTACK8
   2395                  }
   2396          
   2397                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
   \   0001A6   7401         MOV     A,#0x1
   \   0001A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AB   7403         MOV     A,#0x3
   \   0001AD   F0           MOVX    @DPTR,A
   2398                  bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_FB_INITITATOR_IN_PROGRESS;
   \   0001AE   85..82       MOV     DPL,?XSP + 0
   \   0001B1   85..83       MOV     DPH,?XSP + 1
   \   0001B4   740A         MOV     A,#0xa
   \   0001B6   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   2399          
   2400                  bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   2401                } //F&B Initiator
   2402              }
   \                     ??CrossCallReturnLabel_40:
   \   0001B9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BC   7C03         MOV     R4,#0x3
   \   0001BE   7B00         MOV     R3,#0x0
   \   0001C0   7A0A         MOV     R2,#0xa
   \   0001C2   90....       MOV     DPTR,#bdb_TaskID
   \   0001C5   E0           MOVX    A,@DPTR
   \   0001C6   F9           MOV     R1,A
   \   0001C7   12....       LCALL   `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   0001CA   7402         MOV     A,#0x2
   \   0001CC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001CF   8005         SJMP    ??bdb_startResumeCommissioningProcess_3
   2403              //Not in the network
   2404              else
   2405              {
   2406                bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   \                     ??bdb_startResumeCommissioningProcess_6:
   \   0001D1                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   0001D1   790E         MOV     R1,#0xe
   \   0001D3   12....       LCALL   `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   2407              }
   2408              
   2409              return;
   2410            }
   2411          #endif
   2412            
   2413          }
   \                     ??bdb_startResumeCommissioningProcess_3:
   \   0001D6   740B         MOV     A,#0xb
   \   0001D8   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   A2E0         MOV     C,0xE0 /* A   */.0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   90....       MOV     DPTR,#bdb_CurrEpDescriptorList
   \   000003   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000006   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000009   22           RET
   2414          
   2415          /*********************************************************************
   2416           * @fn          bdb_event_loop
   2417           *
   2418           * @brief       Main event loop bdb tasks.
   2419           *
   2420           * @param       task_id - task id
   2421           * @param       events - event bitmap
   2422           *
   2423           * @return      unprocessed events
   2424           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2425          UINT16 bdb_event_loop(byte task_id, UINT16 events)
   \                     bdb_event_loop:
   2426          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2427            (void)task_id;  // Intentionally unreferenced parameter
   2428            
   2429          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
   2430            endPointDesc_t * bdb_CurrEpDescriptor;
   2431          #endif
   2432            
   2433            if(events & BDB_CHANGE_COMMISSIONING_STATE)
   \   00000E   EE           MOV     A,R6
   \   00000F   5404         ANL     A,#0x4
   \   000011   6047         JZ      ??bdb_event_loop_0
   2434            {
   2435              switch(bdbCommissioningProcedureState.bdbCommissioningState)
   \   000013   90....       MOV     DPTR,#bdbCommissioningProcedureState
   \   000016   E0           MOVX    A,@DPTR
   \   000017   600A         JZ      ??bdb_event_loop_1
   \   000019   24FC         ADD     A,#-0x4
   \   00001B   600B         JZ      ??bdb_event_loop_2
   \   00001D   24FE         ADD     A,#-0x2
   \   00001F   6013         JZ      ??bdb_event_loop_3
   \   000021   8031         SJMP    ??bdb_event_loop_4
   2436              {
   2437          
   2438                case BDB_COMMISSIONING_STATE_START_RESUME:
   2439                  bdb_startResumeCommissioningProcess();
   \                     ??bdb_event_loop_1:
   \   000023                ; Setup parameters for call to function bdb_startResumeCommissioningProcess
   \   000023   12....       LCALL   `??bdb_startResumeCommissioningProcess::?relay`; Banked call to: bdb_startResumeCommissioningProcess
   2440                break;
   \   000026   802C         SJMP    ??bdb_event_loop_4
   2441                
   2442                case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
   2443                  if (ZG_BUILD_JOINING_TYPE)
   2444                  {
   2445                    bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_STACK_VERSION);
   2446                  }
   2447                break;
   2448                
   2449                case BDB_COMMISSIONING_STATE_STEERING_ON_NWK:
   2450                  bdb_nwkSteeringDeviceOnNwk();
   \                     ??bdb_event_loop_2:
   \   000028                ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
   \   000028   12....       LCALL   `??bdb_nwkSteeringDeviceOnNwk::?relay`; Banked call to: bdb_nwkSteeringDeviceOnNwk
   2451                  
   2452                  bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
   \   00002B                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00002B   7A01         MOV     R2,#0x1
   \   00002D   7904         MOV     R1,#0x4
   \   00002F   12....       LCALL   `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2453                break;
   \   000032   8020         SJMP    ??bdb_event_loop_4
   2454                
   2455                case BDB_COMMISSIONING_STATE_FINDING_BINDING:
   2456                  bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \                     ??bdb_event_loop_3:
   \   000034   90....       MOV     DPTR,#bdbAttributes + 10
   \   000037   E4           CLR     A
   \   000038   F0           MOVX    @DPTR,A
   2457                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   000039   90....       MOV     DPTR,#bdbCommissioningProcedureState
   \   00003C   F0           MOVX    @DPTR,A
   2458                  osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   \   00003D                ; Setup parameters for call to function osal_start_timerEx
   \   00003D   90....       MOV     DPTR,#__Constant_32
   \   000040   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000043   7A04         MOV     R2,#0x4
   \   000045   7B00         MOV     R3,#0x0
   \   000047   90....       MOV     DPTR,#bdb_TaskID
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F9           MOV     R1,A
   \   00004C   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00004F   7404         MOV     A,#0x4
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
   2459                break;
   2460                
   2461              }
   2462              return (events ^ BDB_CHANGE_COMMISSIONING_STATE);
   \                     ??bdb_event_loop_4:
   \   000054   EE           MOV     A,R6
   \   000055   6404         XRL     A,#0x4
   \   000057   02....       LJMP    ??bdb_event_loop_5 & 0xFFFF
   2463            }
   2464          
   2465            if ( events & SYS_EVENT_MSG )
   \                     ??bdb_event_loop_0:
   \   00005A   EF           MOV     A,R7
   \   00005B   5480         ANL     A,#0x80
   \   00005D   7023         JNZ     ??bdb_event_loop_6
   2466            {
   2467              uint8 *msg_ptr;
   2468              
   2469              while ( (msg_ptr = osal_msg_receive( bdb_TaskID )) )
   2470              {
   2471                //Validate the is receive on the right process
   2472                if(((bdbInMsg_t*)msg_ptr)->hdr.event == bdbCommissioningProcedureState.bdbCommissioningState)
   2473                {
   2474                  bdb_ProcessOSALMsg( (bdbInMsg_t *)msg_ptr );
   2475                }
   2476                //Notify the user
   2477                else if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_NOTIFY_USER)
   2478                {
   2479                  if(pfnCommissioningStatusCB)
   2480                  {
   2481                    ((bdbCommissioningModeMsg_t*) ((bdbInMsg_t*)msg_ptr)->buf)->bdbRemainingCommissioningModes = bdbAttributes.bdbCommissioningMode;
   2482                    pfnCommissioningStatusCB((bdbCommissioningModeMsg_t*) (((bdbInMsg_t*)msg_ptr)->buf));
   2483                  }
   2484                  
   2485          #ifdef MT_APP_CNF_FUNC
   2486                  //Notify the host processor about the event
   2487                  MT_AppCnfCommissioningNotification((bdbCommissioningModeMsg_t*) (((bdbInMsg_t*)msg_ptr)->buf));
   2488          #endif
   2489                  
   2490                }
   2491          #if (ZG_BUILD_COORDINATOR_TYPE)
   2492                else
   2493                {
   2494                  if(ZG_DEVICE_COORDINATOR_TYPE)
   2495                  {
   2496                    //Notify the status 
   2497                    if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_TC_LINK_KEY_EXCHANGE_PROCESS)
   2498                    {
   2499                      pfnTCLinkKeyExchangeProcessCB( (bdb_TCLinkKeyExchProcess_t*) ((bdbInMsg_t*)msg_ptr)->buf);
   2500                    }
   2501                  }
   2502                }
   2503          #endif
   2504                
   2505                
   2506                // Release the memory
   2507                osal_msg_deallocate( msg_ptr );
   2508              }
   2509          
   2510              // Return unprocessed events
   2511              return (events ^ SYS_EVENT_MSG);
   2512            }
   2513            
   2514          
   2515            if(events & BDB_PROCESS_TIMEOUT)
   \   00005F   EF           MOV     A,R7
   \   000060   5410         ANL     A,#0x10
   \   000062   7003         JNZ     $+5
   \   000064   02....       LJMP    ??bdb_event_loop_7 & 0xFFFF
   2516            {
   2517              bdb_processTimeout();
   2518              // Return unprocessed events
   2519              return (events ^ BDB_PROCESS_TIMEOUT);
   \   000067   EF           MOV     A,R7
   \   000068   6410         XRL     A,#0x10
   \   00006A   02....       LJMP    ??bdb_event_loop_8 & 0xFFFF
   2520            }
   \                     ??bdb_event_loop_9:
   \   00006D   7409         MOV     A,#0x9
   \   00006F   68           XRL     A,R0
   \   000070   7009         JNZ     ??bdb_event_loop_10
   \   000072                ; Setup parameters for indirect call
   \   000072   90....       MOV     DPTR,#pfnTCLinkKeyExchangeProcessCB
   \                     ??bdb_event_loop_11:
   \   000075   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000078   12....       LCALL   ?CALL_IND
   \                     ??bdb_event_loop_10:
   \   00007B                ; Setup parameters for call to function osal_msg_deallocate
   \   00007B   AA..         MOV     R2,?V0
   \   00007D   AB..         MOV     R3,?V1
   \   00007F   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??bdb_event_loop_6:
   \   000082                ; Setup parameters for call to function osal_msg_receive
   \   000082   90....       MOV     DPTR,#bdb_TaskID
   \   000085   E0           MOVX    A,@DPTR
   \   000086   F9           MOV     R1,A
   \   000087   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00008A   8A..         MOV     ?V0,R2
   \   00008C   8B..         MOV     ?V1,R3
   \   00008E   EA           MOV     A,R2
   \   00008F   45..         ORL     A,?V1
   \   000091   604C         JZ      ??bdb_event_loop_12
   \   000093   8A82         MOV     DPL,R2
   \   000095   8B83         MOV     DPH,R3
   \   000097   E0           MOVX    A,@DPTR
   \   000098   F8           MOV     R0,A
   \   000099   90....       MOV     DPTR,#bdbCommissioningProcedureState
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   68           XRL     A,R0
   \   00009E   7016         JNZ     ??bdb_event_loop_13
   \   0000A0   E8           MOV     A,R0
   \   0000A1   24FE         ADD     A,#-0x2
   \   0000A3   6004         JZ      ??bdb_event_loop_14
   \   0000A5   24FC         ADD     A,#-0x4
   \   0000A7   70D2         JNZ     ??bdb_event_loop_10
   \                     ??bdb_event_loop_14:
   \   0000A9   8A82         MOV     DPL,R2
   \   0000AB   8B83         MOV     DPH,R3
   \   0000AD   A3           INC     DPTR
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   70CA         JNZ     ??bdb_event_loop_10
   \   0000B1                ; Setup parameters for call to function bdb_BindIfMatch
   \   0000B1   12....       LCALL   `??bdb_BindIfMatch::?relay`; Banked call to: bdb_BindIfMatch
   \   0000B4   80C5         SJMP    ??bdb_event_loop_10
   \                     ??bdb_event_loop_13:
   \   0000B6   EA           MOV     A,R2
   \   0000B7   2402         ADD     A,#0x2
   \   0000B9   FA           MOV     R2,A
   \   0000BA   E4           CLR     A
   \   0000BB   35..         ADDC    A,?V1
   \   0000BD   FB           MOV     R3,A
   \   0000BE   740A         MOV     A,#0xa
   \   0000C0   68           XRL     A,R0
   \   0000C1   70AA         JNZ     ??bdb_event_loop_9
   \   0000C3   90....       MOV     DPTR,#pfnCommissioningStatusCB
   \   0000C6   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0000C9   60B0         JZ      ??bdb_event_loop_10
   \   0000CB   90....       MOV     DPTR,#bdbAttributes + 11
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   85..82       MOV     DPL,?V0
   \   0000D2   85..83       MOV     DPH,?V1
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   F0           MOVX    @DPTR,A
   \   0000DA                ; Setup parameters for indirect call
   \   0000DA   90....       MOV     DPTR,#pfnCommissioningStatusCB
   \   0000DD   8096         SJMP    ??bdb_event_loop_11
   \                     ??bdb_event_loop_12:
   \   0000DF   EE           MOV     A,R6
   \   0000E0   FA           MOV     R2,A
   \   0000E1   EF           MOV     A,R7
   \   0000E2   6480         XRL     A,#0x80
   \   0000E4   02....       LJMP    ??bdb_event_loop_8 & 0xFFFF
   2521            
   2522            if(events &  BDB_REPORT_TIMEOUT){
   \                     ??bdb_event_loop_7:
   \   0000E7   EE           MOV     A,R6
   \   0000E8   5480         ANL     A,#0x80
   \   0000EA   6008         JZ      ??bdb_event_loop_15
   2523          #ifdef BDB_REPORTING    
   2524              bdb_RepProcessEvent();
   \   0000EC                ; Setup parameters for call to function bdb_RepProcessEvent
   \   0000EC   12....       LCALL   `??bdb_RepProcessEvent::?relay`; Banked call to: bdb_RepProcessEvent
   2525          #endif
   2526              // Return unprocessed events
   2527              return (events ^ BDB_REPORT_TIMEOUT);
   \   0000EF   EE           MOV     A,R6
   \   0000F0   6480         XRL     A,#0x80
   \   0000F2   8078         SJMP    ??bdb_event_loop_5
   2528            }
   2529            
   2530          #if (ZG_BUILD_JOINING_TYPE)
   2531            if(events & BDB_TC_LINK_KEY_EXCHANGE_FAIL)
   2532            {
   2533              if(ZG_DEVICE_JOINING_TYPE)
   2534              {
   2535                NLME_LeaveReq_t leaveReq;
   2536                // Set every field to 0
   2537                osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
   2538                
   2539                bdb_setNodeIsOnANetwork(FALSE);
   2540          
   2541                if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
   2542                {
   2543                  osal_set_event( bdb_TaskID,BDB_TC_LINK_KEY_EXCHANGE_FAIL);
   2544                }
   2545              }
   2546              // Return unprocessed events
   2547              return (events ^ BDB_TC_LINK_KEY_EXCHANGE_FAIL);
   2548            }
   2549          #endif
   2550            
   2551            
   2552            if(events & BDB_TC_JOIN_TIMEOUT)
   \                     ??bdb_event_loop_15:
   \   0000F4   EF           MOV     A,R7
   \   0000F5   5408         ANL     A,#0x8
   \   0000F7   600B         JZ      ??bdb_event_loop_16
   2553            {     
   2554          #if (ZG_BUILD_COORDINATOR_TYPE)
   2555              if(ZG_DEVICE_COORDINATOR_TYPE)
   2556              {
   2557                bdb_TCProcessJoiningList();
   \   0000F9                ; Setup parameters for call to function bdb_TCProcessJoiningList
   \   0000F9   12....       LCALL   `??bdb_TCProcessJoiningList::?relay`; Banked call to: bdb_TCProcessJoiningList
   2558              }
   2559          #endif    
   2560              return (events ^ BDB_TC_JOIN_TIMEOUT);
   \   0000FC   EE           MOV     A,R6
   \   0000FD   FA           MOV     R2,A
   \   0000FE   EF           MOV     A,R7
   \   0000FF   6408         XRL     A,#0x8
   \   000101   02....       LJMP    ??bdb_event_loop_8 & 0xFFFF
   2561            }
   2562          
   2563          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
   2564            
   2565            if(events & BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT)
   \                     ??bdb_event_loop_16:
   \   000104   EE           MOV     A,R6
   \   000105   5440         ANL     A,#0x40
   \   000107   6068         JZ      ??bdb_event_loop_17
   2566            {
   2567              if ( FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE )
   2568              {
   2569                bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint();
   \   000109                ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
   \   000109   12....       LCALL   `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
   \   00010C   8A..         MOV     ?V0,R2
   \   00010E   8B..         MOV     ?V1,R3
   2570                
   2571                //If we have endpoint from which to send the identify command, then proceed, otherwise finish
   2572                if(bdb_CurrEpDescriptor != NULL) //just a safty check. The fact that we got to this functuon at all means that this cannot be NULL
   \   000110   EA           MOV     A,R2
   \   000111   45..         ORL     A,?V1
   \   000113   6049         JZ      ??bdb_event_loop_18
   2573                {
   2574                  //Substract an attempt
   2575                  bdb_FB_InitiatorCurrentCyclesNumber--;
   2576                  
   2577                  if(bdb_FB_InitiatorCurrentCyclesNumber > 0)
   \   000115   90....       MOV     DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   000118   E0           MOVX    A,@DPTR
   \   000119   14           DEC     A
   \   00011A   F0           MOVX    @DPTR,A
   \   00011B   6047         JZ      ??bdb_event_loop_19
   2578                  {
   2579                    //Only send Identify Query if there is no pending responses from a previous identify query
   2580                    if ((osal_get_timeoutEx(bdb_TaskID, BDB_RESPONDENT_SIMPLEDESC_TIMEOUT) == 0) && (bdb_getRespondentRetry(pRespondentHead) == NULL))
   \   00011D                ; Setup parameters for call to function osal_get_timeoutEx
   \   00011D   7A00         MOV     R2,#0x0
   \   00011F   7B40         MOV     R3,#0x40
   \   000121   90....       MOV     DPTR,#bdb_TaskID
   \   000124   E0           MOVX    A,@DPTR
   \   000125   F9           MOV     R1,A
   \   000126   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000129   EA           MOV     A,R2
   \   00012A   4B           ORL     A,R3
   \   00012B   4C           ORL     A,R4
   \   00012C   4D           ORL     A,R5
   \   00012D   7018         JNZ     ??bdb_event_loop_20
   \   00012F                ; Setup parameters for call to function bdb_getRespondentRetry
   \   00012F   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000132   12....       LCALL   `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
   \   000135   8B..         MOV     ?V3,R3
   \   000137   EA           MOV     A,R2
   \   000138   45..         ORL     A,?V3
   \   00013A   700B         JNZ     ??bdb_event_loop_20
   2581                    {
   2582                      //Send identify query with the endpoint requested
   2583                      bdb_SendIdentifyQuery(bdb_CurrEpDescriptor->endPoint);
   \   00013C                ; Setup parameters for call to function bdb_SendIdentifyQuery
   \   00013C   85..82       MOV     DPL,?V0
   \   00013F   85..83       MOV     DPH,?V1
   \   000142   E0           MOVX    A,@DPTR
   \   000143   F9           MOV     R1,A
   \   000144   12....       LCALL   `??bdb_SendIdentifyQuery::?relay`; Banked call to: bdb_SendIdentifyQuery
   2584                    }
   2585          
   2586                    osal_start_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT, FINDING_AND_BINDING_PERIODIC_TIME * 1000);
   \                     ??bdb_event_loop_20:
   \   000147                ; Setup parameters for call to function osal_start_timerEx
   \   000147   90....       MOV     DPTR,#__Constant_3a98
   \   00014A   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00014D   7A40         MOV     R2,#0x40
   \   00014F   7B00         MOV     R3,#0x0
   \   000151   90....       MOV     DPTR,#bdb_TaskID
   \   000154   E0           MOVX    A,@DPTR
   \   000155   F9           MOV     R1,A
   \   000156   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000159   7404         MOV     A,#0x4
   \   00015B   12....       LCALL   ?DEALLOC_XSTACK8
   2587                  }
   2588                }
   2589              }
   2590          
   2591              if (bdb_FB_InitiatorCurrentCyclesNumber == 0)
   \                     ??bdb_event_loop_18:
   \   00015E   90....       MOV     DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   000161   E0           MOVX    A,@DPTR
   \   000162   7005         JNZ     ??bdb_event_loop_21
   2592              {
   2593                bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE );
   \                     ??bdb_event_loop_19:
   \   000164                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   000164   790B         MOV     R1,#0xb
   \   000166   12....       LCALL   `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   2594              }
   2595              
   2596              return (events ^ BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
   \                     ??bdb_event_loop_21:
   \   000169   EE           MOV     A,R6
   \   00016A   6440         XRL     A,#0x40
   \                     ??bdb_event_loop_5:
   \   00016C   FA           MOV     R2,A
   \   00016D   EF           MOV     A,R7
   \   00016E   02....       LJMP    ??bdb_event_loop_8 & 0xFFFF
   2597            }
   2598            
   2599            
   2600            
   2601            if(events & BDB_IDENTIFY_TIMEOUT)
   \                     ??bdb_event_loop_17:
   \   000171   EF           MOV     A,R7
   \   000172   5420         ANL     A,#0x20
   \   000174   7003         JNZ     $+5
   \   000176   02....       LJMP    ??bdb_event_loop_22 & 0xFFFF
   2602            {
   2603              zclAttrRec_t identifyAttrRec;
   2604              epList_t *bdb_CurrEpDescriptorNextInList = NULL;
   2605              bdb_CurrEpDescriptorNextInList = bdb_HeadEpDescriptorList;
   \   000179   90....       MOV     DPTR,#bdb_HeadEpDescriptorList
   \   00017C   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00017F   88..         MOV     ?V0,R0
   \   000181   89..         MOV     ?V1,R1
   2606              
   2607              bool KeepIdentifyTimerRunning = FALSE;
   \   000183   75..00       MOV     ?V4,#0x0
   \   000186   802B         SJMP    ??bdb_event_loop_23
   2608              
   2609              while(bdb_CurrEpDescriptorNextInList != NULL )
   2610              {
   2611                endPointDesc_t *bdb_EpDescriptor = NULL;
   2612                bdb_EpDescriptor = bdb_CurrEpDescriptorNextInList->epDesc;
   2613              
   2614                //Do not check ZDO or Zigbee reserved endpoints
   2615                if((bdb_CurrEpDescriptorList->epDesc->endPoint == 0) || (bdb_CurrEpDescriptorList->epDesc->endPoint >= BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
   2616                {
   2617                  bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
   2618                  continue;
   2619                }
   2620                
   2621                if ( zclFindAttrRec( bdb_EpDescriptor->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
   2622                                  ATTRID_IDENTIFY_TIME, &identifyAttrRec ) )
   2623                {
   2624                  if(*((uint16*)identifyAttrRec.attr.dataPtr) > 0)
   2625                  {
   2626                    (uint16)(*((uint16*)identifyAttrRec.attr.dataPtr))--;
   2627                    KeepIdentifyTimerRunning = TRUE;
   2628                  }
   2629                  else
   2630                  {
   2631                    // Use bdb success main state
   2632                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \                     ??bdb_event_loop_24:
   \   000188   90....       MOV     DPTR,#bdbAttributes + 10
   \   00018B   E4           CLR     A
   \   00018C   F0           MOVX    @DPTR,A
   2633                    if(pfnIdentifyTimeChangeCB != NULL)
   \   00018D   90....       MOV     DPTR,#pfnIdentifyTimeChangeCB
   \   000190   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000193   6011         JZ      ??bdb_event_loop_25
   2634                    {
   2635                      pfnIdentifyTimeChangeCB(bdb_EpDescriptor->endPoint);
   \   000195                ; Setup parameters for indirect call
   \   000195   85..82       MOV     DPL,?V2
   \   000198   85..83       MOV     DPH,?V3
   \   00019B   E0           MOVX    A,@DPTR
   \   00019C   F9           MOV     R1,A
   \   00019D   90....       MOV     DPTR,#pfnIdentifyTimeChangeCB + 1
   \   0001A0   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   2636                    }
   2637                  }
   \                     ??CrossCallReturnLabel_72:
   \   0001A3   12....       LCALL   ?CALL_IND
   2638                }
   2639                bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
   \                     ??bdb_event_loop_25:
   \   0001A6   85..82       MOV     DPL,?V0
   \   0001A9   85..83       MOV     DPH,?V1
   \   0001AC   E0           MOVX    A,@DPTR
   \   0001AD   F5..         MOV     ?V0,A
   \   0001AF   A3           INC     DPTR
   \   0001B0   E0           MOVX    A,@DPTR
   \   0001B1   F5..         MOV     ?V1,A
   \                     ??bdb_event_loop_23:
   \   0001B3   E5..         MOV     A,?V0
   \   0001B5   45..         ORL     A,?V1
   \   0001B7   6065         JZ      ??bdb_event_loop_26
   \   0001B9   85..82       MOV     DPL,?V0
   \   0001BC   85..83       MOV     DPH,?V1
   \   0001BF   A3           INC     DPTR
   \   0001C0   A3           INC     DPTR
   \   0001C1   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0001C4   88..         MOV     ?V2,R0
   \   0001C6   89..         MOV     ?V3,R1
   \   0001C8   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0001CB   E0           MOVX    A,@DPTR
   \   0001CC   60D8         JZ      ??bdb_event_loop_25
   \   0001CE   C3           CLR     C
   \   0001CF   94F1         SUBB    A,#-0xf
   \   0001D1   50D3         JNC     ??bdb_event_loop_25
   \   0001D3                ; Setup parameters for call to function zclFindAttrRec
   \   0001D3   A8..         MOV     R0,?XSP + 0
   \   0001D5   A9..         MOV     R1,?XSP + 1
   \   0001D7   88..         MOV     ?V6,R0
   \   0001D9   89..         MOV     ?V7,R1
   \   0001DB   78..         MOV     R0,#?V6
   \   0001DD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E0   7C00         MOV     R4,#0x0
   \   0001E2   7D00         MOV     R5,#0x0
   \   0001E4   7A03         MOV     R2,#0x3
   \   0001E6   7B00         MOV     R3,#0x0
   \   0001E8   85..82       MOV     DPL,?V2
   \   0001EB   85..83       MOV     DPH,?V3
   \   0001EE   E0           MOVX    A,@DPTR
   \   0001EF   F9           MOV     R1,A
   \   0001F0   12....       LCALL   `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0001F3   7402         MOV     A,#0x2
   \   0001F5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F8   E9           MOV     A,R1
   \   0001F9   60AB         JZ      ??bdb_event_loop_25
   \   0001FB   7406         MOV     A,#0x6
   \   0001FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000200   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000203   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000206   6080         JZ      ??bdb_event_loop_24
   \   000208   EA           MOV     A,R2
   \   000209   24FF         ADD     A,#-0x1
   \   00020B   1A           DEC     R2
   \   00020C   EB           MOV     A,R3
   \   00020D   34FF         ADDC    A,#-0x1
   \   00020F   FB           MOV     R3,A
   \   000210   8882         MOV     DPL,R0
   \   000212   8983         MOV     DPH,R1
   \   000214   EA           MOV     A,R2
   \   000215   F0           MOVX    @DPTR,A
   \   000216   A3           INC     DPTR
   \   000217   EB           MOV     A,R3
   \   000218   F0           MOVX    @DPTR,A
   \   000219   75..01       MOV     ?V4,#0x1
   \   00021C   8088         SJMP    ??bdb_event_loop_25
   2640              }
   2641              
   2642              //If any endpoint has identify running, keep the timer on
   2643              if(KeepIdentifyTimerRunning)
   \                     ??bdb_event_loop_26:
   \   00021E   E5..         MOV     A,?V4
   \   000220   6019         JZ      ??bdb_event_loop_27
   2644              {
   2645                osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
   \   000222                ; Setup parameters for call to function osal_start_timerEx
   \   000222   90....       MOV     DPTR,#__Constant_3e8
   \   000225   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000228   7A00         MOV     R2,#0x0
   \   00022A   7B20         MOV     R3,#0x20
   \   00022C   90....       MOV     DPTR,#bdb_TaskID
   \   00022F   E0           MOVX    A,@DPTR
   \   000230   F9           MOV     R1,A
   \   000231   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000234   7404         MOV     A,#0x4
   \   000236   12....       LCALL   ?DEALLOC_XSTACK8
   \   000239   800C         SJMP    ??bdb_event_loop_28
   2646              }
   2647              else
   2648              {
   2649                osal_stop_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT );
   \                     ??bdb_event_loop_27:
   \   00023B                ; Setup parameters for call to function osal_stop_timerEx
   \   00023B   7A00         MOV     R2,#0x0
   \   00023D   7B20         MOV     R3,#0x20
   \   00023F   90....       MOV     DPTR,#bdb_TaskID
   \   000242   E0           MOVX    A,@DPTR
   \   000243   F9           MOV     R1,A
   \   000244   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   2650              }
   2651              
   2652              // Return unprocessed events
   2653              return (events ^ BDB_IDENTIFY_TIMEOUT);
   \                     ??bdb_event_loop_28:
   \   000247   EE           MOV     A,R6
   \   000248   FA           MOV     R2,A
   \   000249   EF           MOV     A,R7
   \   00024A   6420         XRL     A,#0x20
   \   00024C   800D         SJMP    ??bdb_event_loop_8
   2654            }
   2655            
   2656            if(events & BDB_RESPONDENT_SIMPLEDESC_TIMEOUT)
   \                     ??bdb_event_loop_22:
   \   00024E   EF           MOV     A,R7
   \   00024F   5440         ANL     A,#0x40
   \   000251   600B         JZ      ??bdb_event_loop_29
   2657            {
   2658              // Send Simple Descriptor request to a respondent node
   2659              bdb_SendSimpleDescReq();
   \   000253                ; Setup parameters for call to function bdb_SendSimpleDescReq
   \   000253   12....       LCALL   `??bdb_SendSimpleDescReq::?relay`; Banked call to: bdb_SendSimpleDescReq
   2660          
   2661              return (events ^ BDB_RESPONDENT_SIMPLEDESC_TIMEOUT);
   \   000256   EE           MOV     A,R6
   \   000257   FA           MOV     R2,A
   \   000258   EF           MOV     A,R7
   \   000259   6440         XRL     A,#0x40
   \                     ??bdb_event_loop_8:
   \   00025B   FB           MOV     R3,A
   \   00025C   8004         SJMP    ??bdb_event_loop_30
   2662            }
   2663          #endif
   2664            
   2665            return 0;
   \                     ??bdb_event_loop_29:
   \   00025E   7A00         MOV     R2,#0x0
   \   000260   7B00         MOV     R3,#0x0
   \                     ??bdb_event_loop_30:
   \   000262   7408         MOV     A,#0x8
   \   000264   02....       LJMP    ?Subroutine5 & 0xFFFF
   2666          }
   2667          
   2668          
   2669          /*********************************************************************
   2670           * @fn          bdb_touchlinkSendFNReset
   2671           *
   2672           * @brief       Starts the Factory New Procedure for Initiator
   2673           *
   2674           * @param       isOnANetwork - TRUE if the devices is not FN, FALSE otherwise
   2675           *
   2676           * @return      none
   2677           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2678          void bdb_touchlinkSendFNReset( void )
   \                     bdb_touchlinkSendFNReset:
   2679          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2680          #ifdef BDB_TL_INITIATOR
   2681            touchLinkInitiator_ResetToFNProcedure( );
   2682          #endif
   2683          }
   \   000000   02....       LJMP    ?BRET
   2684          
   2685          
   2686          /*********************************************************************
   2687           * @fn          bdb_setNodeIsOnANetwork
   2688           *
   2689           * @brief       Sets and saves in Nv bdbNodeIsOnANetwork attribute
   2690           *
   2691           * @param       isOnANetwork - TRUE if the devices is not FN, FALSE otherwise
   2692           *
   2693           * @return      none
   2694           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2695          void bdb_setNodeIsOnANetwork(bool isOnANetwork)
   \                     bdb_setNodeIsOnANetwork:
   2696          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2697            if((bdbAttributes.bdbNodeIsOnANetwork != isOnANetwork) || (!bdb_initialization))
   \   000007   90....       MOV     DPTR,#bdbAttributes + 14
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6E           XRL     A,R6
   \   00000C   7006         JNZ     ??bdb_setNodeIsOnANetwork_0
   \   00000E   90....       MOV     DPTR,#bdb_initialization
   \   000011   E0           MOVX    A,@DPTR
   \   000012   7033         JNZ     ??bdb_setNodeIsOnANetwork_1
   2698            {
   2699              //We lose our network
   2700              if(!isOnANetwork)
   \                     ??bdb_setNodeIsOnANetwork_0:
   \   000014   EE           MOV     A,R6
   \   000015   7005         JNZ     ??bdb_setNodeIsOnANetwork_2
   2701              {
   2702                bdbAttributes.bdbCommissioningMode = 0;
   \   000017   90....       MOV     DPTR,#bdbAttributes + 11
   \   00001A   E4           CLR     A
   \   00001B   F0           MOVX    @DPTR,A
   2703              }
   2704              
   2705              bdbAttributes.bdbNodeIsOnANetwork = isOnANetwork;
   \                     ??bdb_setNodeIsOnANetwork_2:
   \   00001C   EE           MOV     A,R6
   \   00001D   90....       MOV     DPTR,#bdbAttributes + 14
   \   000020   F0           MOVX    @DPTR,A
   2706              
   2707              osal_nv_write(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
   \   000021                ; Setup parameters for call to function osal_nv_write
   \   000021   75....       MOV     ?V0,#(bdbAttributes + 14) & 0xff
   \   000024   75....       MOV     ?V1,#((bdbAttributes + 14) >> 8) & 0xff
   \   000027   78..         MOV     R0,#?V0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   75..01       MOV     ?V0,#0x1
   \   00002F   75..00       MOV     ?V1,#0x0
   \   000032   78..         MOV     R0,#?V0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   7C00         MOV     R4,#0x0
   \   000039   7D00         MOV     R5,#0x0
   \   00003B   7A55         MOV     R2,#0x55
   \   00003D   7B00         MOV     R3,#0x0
   \   00003F   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000042   7404         MOV     A,#0x4
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
   2708            }
   2709          }
   \                     ??bdb_setNodeIsOnANetwork_1:
   \   000047   02....       LJMP    ??Subroutine31_0 & 0xFFFF
   2710          
   2711          /*********************************************************************
   2712           * @fn          bdb_setCommissioningGroupID
   2713           *
   2714           * @brief       Sets the commissioning groupd ID
   2715           *
   2716           * @param       groupID
   2717           *
   2718           * @return      none
   2719           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004                REQUIRE ??Subroutine34_0
   \   000004                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2720          void bdb_setCommissioningGroupID(uint16 groupID)
   \                     bdb_setCommissioningGroupID:
   2721          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2722            bdbAttributes.bdbCommissioningGroupID = groupID;
   \   000004   90....       MOV     DPTR,#bdbAttributes + 8
   \   000007   02....       LJMP    ?Subroutine3 & 0xFFFF
   2723          }
   2724          
   2725          /*********************************************************************
   2726           * @fn      bdb_CreateRespondentList
   2727           *
   2728           * @brief   Create respondent list for finding and binding if empty
   2729           *
   2730           * @param   pHead - pointer to a pointer of the list head
   2731           *
   2732           * @return  none
   2733           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003                REQUIRE ??Subroutine39_0
   \   000003                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   FF           MOV     R7,A
   \   000001                REQUIRE ??Subroutine40_0
   \   000001                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2734          void bdb_CreateRespondentList( bdbFindingBindingRespondent_t **pHead )
   \                     bdb_CreateRespondentList:
   2735          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine12 & 0xFFFF
   2736          
   2737            // Create the list if empty
   2738            if ( *pHead == NULL )
   \                     ??CrossCallReturnLabel_48:
   \   000008   700F         JNZ     ??CrossCallReturnLabel_28
   2739            {
   2740              *pHead = ( bdbFindingBindingRespondent_t* )osal_mem_alloc( sizeof( bdbFindingBindingRespondent_t ) );
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A0F         MOV     R2,#0xf
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000011   12....       LCALL   ?Subroutine10 & 0xFFFF
   2741              
   2742              if ( *pHead != NULL )
   \                     ??CrossCallReturnLabel_75:
   \   000014   6003         JZ      ??CrossCallReturnLabel_28
   2743              {
   2744                (*pHead)->pNext = NULL;
   \   000016   12....       LCALL   ?Subroutine25 & 0xFFFF
   2745              }
   2746            }
   2747            return;
   \                     ??CrossCallReturnLabel_28:
   \   000019   02....       LJMP    ??Subroutine31_0 & 0xFFFF
   2748          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   8A..         MOV     ?V0,R2
   \   000002   8B..         MOV     ?V1,R3
   \   000004   A8..         MOV     R0,?V0
   \   000006   A9..         MOV     R1,?V1
   \   000008                REQUIRE ??Subroutine43_0
   \   000008                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E8           MOV     A,R0
   \   000001   240D         ADD     A,#0xd
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   39           ADDC    A,R1
   \   000007   F583         MOV     DPH,A
   \   000009   E4           CLR     A
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   22           RET
   2749          
   2750          /*********************************************************************
   2751           * @fn      bdb_AddRespondentNode
   2752           *
   2753           * @brief   Add node to respondent list for finding and binding
   2754           *
   2755           * @param   pHead - pointer to a pointer of the list head
   2756           *
   2757           * @return  pointer to new node
   2758           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2759          bdbFindingBindingRespondent_t* bdb_AddRespondentNode( bdbFindingBindingRespondent_t **pHead, zclIdentifyQueryRsp_t *pCmd )
   \                     bdb_AddRespondentNode:
   2760          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine12 & 0xFFFF
   2761            bdbFindingBindingRespondent_t **pCurr;
   2762            bdbFindingBindingRespondent_t *temp;
   2763            
   2764              // Create respondent list if empty
   2765            if ( *pHead == NULL )
   \                     ??CrossCallReturnLabel_49:
   \   000008   7006         JNZ     ??bdb_AddRespondentNode_0
   2766            {
   2767              bdb_CreateRespondentList( pHead );
   \   00000A                ; Setup parameters for call to function bdb_CreateRespondentList
   \   00000A   12....       LCALL   `??bdb_CreateRespondentList::?relay`; Banked call to: bdb_CreateRespondentList
   2768              return *pHead;
   \   00000D   02....       LJMP    ??CrossCallReturnLabel_29 & 0xFFFF
   2769            }
   2770            else
   2771            {
   2772              // if pCmd is equal to NULL, don't look for duplucates
   2773              if( pCmd != NULL )
   \                     ??bdb_AddRespondentNode_0:
   \   000010   EC           MOV     A,R4
   \   000011   4D           ORL     A,R5
   \   000012   606F         JZ      ??bdb_AddRespondentNode_1
   2774              {
   2775                //Find if any duplicate in the list
   2776                temp = *pHead;
   \   000014   E8           MOV     A,R0
   \   000015   FA           MOV     R2,A
   \   000016   E9           MOV     A,R1
   \   000017   FB           MOV     R3,A
   \   000018   8C82         MOV     DPL,R4
   \   00001A   8D83         MOV     DPH,R5
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FC           MOV     R4,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FD           MOV     R5,A
   2777                
   2778                while(temp != NULL)
   2779                {
   2780                  if((temp->data.endPoint == pCmd->srcAddr->endPoint) && (temp->data.panId == pCmd->srcAddr->panId))
   \                     ??bdb_AddRespondentNode_2:
   \   000021   8A82         MOV     DPL,R2
   \   000023   8B83         MOV     DPH,R3
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FE           MOV     R6,A
   \   000030   8C82         MOV     DPL,R4
   \   000032   8D83         MOV     DPH,R5
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   6E           XRL     A,R6
   \   00003F   7034         JNZ     ??bdb_AddRespondentNode_3
   \   000041   8A82         MOV     DPL,R2
   \   000043   8B83         MOV     DPH,R3
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   6E           XRL     A,R6
   \   00005E   7003         JNZ     ??bdb_AddRespondentNode_4
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   6F           XRL     A,R7
   \                     ??bdb_AddRespondentNode_4:
   \   000063   7010         JNZ     ??bdb_AddRespondentNode_3
   2781                  {
   2782                    //Duplicate
   2783                    if(temp->data.addr.shortAddr == pCmd->srcAddr->addr.shortAddr)
   \   000065   8A82         MOV     DPL,R2
   \   000067   8B83         MOV     DPH,R3
   \   000069   12....       LCALL   ?Subroutine23 & 0xFFFF
   2784                    {
   2785                      return NULL;
   2786                    }
   2787                  }
   \                     ??CrossCallReturnLabel_25:
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   6E           XRL     A,R6
   \   00006E   7003         JNZ     ??bdb_AddRespondentNode_5
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   6F           XRL     A,R7
   \                     ??bdb_AddRespondentNode_5:
   \   000073   6025         JZ      ??bdb_AddRespondentNode_6
   2788                  temp = temp->pNext;
   \                     ??bdb_AddRespondentNode_3:
   \   000075   EA           MOV     A,R2
   \   000076   240D         ADD     A,#0xd
   \   000078   F582         MOV     DPL,A
   \   00007A   E4           CLR     A
   \   00007B   3B           ADDC    A,R3
   \   00007C   F583         MOV     DPH,A
   \   00007E   12....       LCALL   ?Subroutine14 & 0xFFFF
   2789                }
   2790              }
   \                     ??CrossCallReturnLabel_6:
   \   000081   709E         JNZ     ??bdb_AddRespondentNode_2
   2791              
   2792              pCurr = &((*pHead)->pNext);
   2793              
   2794              while ( *pCurr != NULL )
   2795              {
   2796                pCurr = &((*pCurr)->pNext);
   \                     ??bdb_AddRespondentNode_1:
   \   000083   E8           MOV     A,R0
   \   000084   240D         ADD     A,#0xd
   \   000086   FE           MOV     R6,A
   \   000087   E4           CLR     A
   \   000088   39           ADDC    A,R1
   \   000089   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   2797              }
   \                     ??CrossCallReturnLabel_51:
   \   00008C   70F5         JNZ     ??bdb_AddRespondentNode_1
   2798          
   2799              *pCurr = ( bdbFindingBindingRespondent_t* )osal_mem_alloc( sizeof( bdbFindingBindingRespondent_t ) );
   \   00008E                ; Setup parameters for call to function osal_mem_alloc
   \   00008E   7A0F         MOV     R2,#0xf
   \   000090   7B00         MOV     R3,#0x0
   \   000092   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000095   12....       LCALL   ?Subroutine10 & 0xFFFF
   2800              
   2801              if(*pCurr == NULL)
   \                     ??CrossCallReturnLabel_76:
   \   000098   7006         JNZ     ??bdb_AddRespondentNode_7
   2802              {
   2803                //No memory
   2804                return NULL;
   \                     ??bdb_AddRespondentNode_6:
   \   00009A   7A00         MOV     R2,#0x0
   \   00009C   7B00         MOV     R3,#0x0
   \   00009E   800A         SJMP    ??CrossCallReturnLabel_85
   2805              }
   2806              
   2807              (*pCurr)->pNext = NULL;
   \                     ??bdb_AddRespondentNode_7:
   \   0000A0   12....       LCALL   ?Subroutine25 & 0xFFFF
   2808            }
   2809            
   2810            return *pCurr;
   \                     ??CrossCallReturnLabel_29:
   \   0000A3   8E82         MOV     DPL,R6
   \   0000A5   8F83         MOV     DPH,R7
   \   0000A7   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0000AA   02....       LJMP    ??Subroutine31_0 & 0xFFFF
   2811          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   8C82         MOV     DPL,R4
   \   000005   8D83         MOV     DPH,R5
   \   000007   22           RET
   2812          
   2813          /*********************************************************************
   2814           * @fn      bdb_zclRespondentListClean
   2815           *
   2816           * @brief   This function free reserved memory for respondent list
   2817           *
   2818           * @param   pHead - begin of the respondent list
   2819           *
   2820           * @return  status
   2821           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2822          void bdb_zclRespondentListClean( bdbFindingBindingRespondent_t **pHead )
   \                     bdb_zclRespondentListClean:
   2823          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine12 & 0xFFFF
   2824            bdbFindingBindingRespondent_t **pCurr;
   2825            bdbFindingBindingRespondent_t **pNext;
   2826            
   2827            if ( *pHead == NULL )
   \                     ??CrossCallReturnLabel_50:
   \   000008   6035         JZ      ??bdb_zclRespondentListClean_0
   2828            {
   2829              return;
   2830            }
   2831            
   2832            pCurr = pHead;
   \   00000A   8E..         MOV     ?V0,R6
   \   00000C   8F..         MOV     ?V1,R7
   \   00000E   801C         SJMP    ??bdb_zclRespondentListClean_1
   2833            
   2834            while( *pCurr != NULL )
   2835            {
   2836              pNext = &((*pCurr)->pNext);
   \                     ??bdb_zclRespondentListClean_2:
   \   000010   EA           MOV     A,R2
   \   000011   240D         ADD     A,#0xd
   \   000013   F5..         MOV     ?V2,A
   \   000015   E4           CLR     A
   \   000016   3B           ADDC    A,R3
   \   000017   F5..         MOV     ?V3,A
   2837              osal_mem_free( *pCurr );
   \   000019                ; Setup parameters for call to function osal_mem_free
   \   000019   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2838              *pCurr = ( bdbFindingBindingRespondent_t* )NULL;
   \   00001C   85..82       MOV     DPL,?V0
   \   00001F   85..83       MOV     DPH,?V1
   \   000022   E4           CLR     A
   \   000023   F0           MOVX    @DPTR,A
   \   000024   A3           INC     DPTR
   \   000025   F0           MOVX    @DPTR,A
   2839              pCurr = pNext;
   \   000026   85....       MOV     ?V0,?V2
   \   000029   85....       MOV     ?V1,?V3
   2840            }
   \                     ??bdb_zclRespondentListClean_1:
   \   00002C   85..82       MOV     DPL,?V0
   \   00002F   85..83       MOV     DPH,?V1
   \   000032   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000035   70D9         JNZ     ??bdb_zclRespondentListClean_2
   2841            *pHead = NULL;
   \   000037   8E82         MOV     DPL,R6
   \   000039   8F83         MOV     DPH,R7
   \   00003B   E4           CLR     A
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   F0           MOVX    @DPTR,A
   2842          }
   \                     ??bdb_zclRespondentListClean_0:
   \   00003F   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   2843          
   2844           /*********************************************************************
   2845           * PRIVATE FUNCTIONS
   2846           *********************************************************************/
   2847          
   2848          /*********************************************************************
   2849           * @fn      bdb_ProcessOSALMsg
   2850           *
   2851           * @brief   Process the incoming task message.
   2852           *
   2853           * @param   msgPtr - message to process
   2854           *
   2855           * @return  none
   2856           */
   2857          void bdb_ProcessOSALMsg( bdbInMsg_t *msgPtr )
   2858          {
   2859            
   2860            switch(msgPtr->hdr.event)
   2861            {
   2862          #if (ZG_BUILD_JOINING_TYPE)
   2863              case BDB_COMMISSIONING_STATE_JOINING:
   2864                if(ZG_DEVICE_JOINING_TYPE)
   2865                {
   2866                  switch(msgPtr->buf[0])
   2867                  {
   2868                    case BDB_JOIN_EVENT_NWK_DISCOVERY:
   2869                      if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
   2870                      {
   2871                        bdb_filterNwkDisc();
   2872                        bdb_tryNwkAssoc();
   2873                      }
   2874                      else
   2875                      {
   2876                        bdb_nwkDiscoveryAttempt(FALSE);
   2877                      }
   2878                    break;
   2879                    
   2880                    case BDB_JOIN_EVENT_ASSOCIATION:
   2881                      if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
   2882                      {
   2883                        bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_WAITING_NWK_KEY;
   2884                        //Nwk key timeout get right timing
   2885                        osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT, BDB_DEFAULT_DEVICE_UNAUTH_TIMEOUT);
   2886                      }
   2887                      else
   2888                      {
   2889                        if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   2890                             (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   2891                        {
   2892                          uint16 addr = INVALID_NODE_ADDR;
   2893                          // Invalidate nwk addr so end device does not use in its data reqs.
   2894                          _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   2895                          ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   2896                        }
   2897          
   2898                        //Clear the neighbor Table and network discovery tables.
   2899                        nwkNeighborInitTable();
   2900                        NLME_NwkDiscTerm();
   2901                        _NIB.nwkState = NWK_INIT;
   2902                        
   2903                        bdb_tryNwkAssoc();
   2904                      }
   2905                    break;
   2906                  }
   2907                }
   2908              break;
   2909              
   2910              case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
   2911                if(ZG_DEVICE_JOINING_TYPE)
   2912                {
   2913                  if(msgPtr->hdr.status != BDB_MSG_EVENT_SUCCESS)
   2914                  {
   2915                    bdbAttributes.bdbTCLinkKeyExchangeAttempts++;
   2916                    if(bdbAttributes.bdbTCLinkKeyExchangeAttempts > bdbAttributes.bdbTCLinkKeyExchangeAttemptsMax)
   2917                    {
   2918                      //TCLK process fail due to many attempts fails
   2919                      bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, FALSE);
   2920                      return;
   2921                    }
   2922                  }
   2923                  switch(bdbCommissioningProcedureState.bdbTCExchangeState)
   2924                  {
   2925                    case BDB_REQ_TC_STACK_VERSION:
   2926                      bdb_requestTCStackVersion();
   2927                    break;
   2928                    case BDB_REQ_TC_LINK_KEY:
   2929                      bdb_requestTCLinkKey();
   2930                    break;
   2931                    case BDB_REQ_VERIFY_TC_LINK_KEY:
   2932                      bdb_requestVerifyTCLinkKey();
   2933                    break;
   2934                  }
   2935                }
   2936             break;
   2937          #endif
   2938          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
   2939              case BDB_COMMISSIONING_STATE_TL:
   2940              case BDB_COMMISSIONING_STATE_FINDING_BINDING:
   2941                
   2942                if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
   2943                {
   2944                  bdb_BindIfMatch( msgPtr );
   2945                }
   2946              break;
   2947          #endif
   2948             }
   2949          }
   2950          
   2951          
   2952          /*********************************************************************
   2953           * @fn      bdb_processTimeout
   2954           *
   2955           * @brief   Handles timeout of the bdb process
   2956           *
   2957           * @param   msgPtr - message to process
   2958           *
   2959           * @return  none
   2960           */
   2961          void bdb_processTimeout(void)
   2962          {
   2963          #if (ZG_BUILD_JOINING_TYPE)
   2964            if(ZG_DEVICE_JOINING_TYPE)
   2965            {
   2966              switch(bdbCommissioningProcedureState.bdbCommissioningState)
   2967              {
   2968                case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
   2969                  
   2970                  bdb_tcLinkKeyExchangeAttempt(FALSE,bdbCommissioningProcedureState.bdbTCExchangeState);
   2971                break;
   2972                case BDB_COMMISSIONING_STATE_JOINING:
   2973                  if(bdbCommissioningProcedureState.bdbJoinState == BDB_JOIN_STATE_WAITING_NWK_KEY)
   2974                  {
   2975                    //If nwk key fails, then try association again
   2976                    bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_ASSOC;
   2977                    bdb_nwkAssocAttemt(FALSE);
   2978                  }
   2979                break;
   2980              }
   2981            }
   2982          #endif
   2983            
   2984          }
   2985          
   2986          
   2987          /*********************************************************************
   2988           * @fn      bdb_SendMsg
   2989           *
   2990           * @brief   Send messages to bdb processing with the expected format
   2991           *
   2992           * @param   msgPtr - message to process
   2993           *
   2994           * @return  none
   2995           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2996          void bdb_SendMsg(uint8 taskID, uint8 toCommissioningState,uint8 status, uint8 len, uint8 *buf)
   \                     bdb_SendMsg:
   2997          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V7,R2
   \   000009   8B..         MOV     ?V8,R3
   \   00000B   8C..         MOV     ?V3,R4
   2998            bdbInMsg_t *msgPtr = NULL;
   2999          
   3000            if ( (len > 0) && (buf != NULL) )
   \   00000D   EC           MOV     A,R4
   \   00000E   605C         JZ      ??bdb_SendMsg_0
   \   000010   7411         MOV     A,#0x11
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5..         MOV     ?V0,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V1,A
   \   00001C   E5..         MOV     A,?V0
   \   00001E   45..         ORL     A,?V1
   \   000020   604A         JZ      ??bdb_SendMsg_0
   3001            {
   3002              uint8 tmpLength;
   3003              tmpLength = len;
   3004              tmpLength += sizeof(osal_event_hdr_t);
   3005              
   3006              msgPtr = (bdbInMsg_t *)osal_msg_allocate( tmpLength );
   \   000022                ; Setup parameters for call to function osal_msg_allocate
   \   000022   7402         MOV     A,#0x2
   \   000024   2C           ADD     A,R4
   \   000025   FA           MOV     R2,A
   \   000026   7B00         MOV     R3,#0x0
   \   000028   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00002B   8A..         MOV     ?V4,R2
   \   00002D   8B..         MOV     ?V5,R3
   \   00002F   AE..         MOV     R6,?V4
   \   000031   AF..         MOV     R7,?V5
   3007              
   3008              if ( msgPtr )
   \   000033   EE           MOV     A,R6
   \   000034   4F           ORL     A,R7
   \   000035   6035         JZ      ??bdb_SendMsg_0
   3009              {
   3010                osal_memcpy( msgPtr->buf, buf, len );
   \   000037                ; Setup parameters for call to function osal_memcpy
   \   000037   85....       MOV     ?V4,?V0
   \   00003A   85....       MOV     ?V5,?V1
   \   00003D   75..00       MOV     ?V6,#0x0
   \   000040   78..         MOV     R0,#?V4
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000045   AC..         MOV     R4,?V3
   \   000047   7D00         MOV     R5,#0x0
   \   000049   EE           MOV     A,R6
   \   00004A   2402         ADD     A,#0x2
   \   00004C   FA           MOV     R2,A
   \   00004D   E4           CLR     A
   \   00004E   3F           ADDC    A,R7
   \   00004F   FB           MOV     R3,A
   \   000050   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000053   7403         MOV     A,#0x3
   \   000055   12....       LCALL   ?DEALLOC_XSTACK8
   3011              
   3012                msgPtr->hdr.event = toCommissioningState;
   \   000058   8E82         MOV     DPL,R6
   \   00005A   8F83         MOV     DPH,R7
   \   00005C   E5..         MOV     A,?V7
   \   00005E   F0           MOVX    @DPTR,A
   3013                msgPtr->hdr.status = status;
   \   00005F   A3           INC     DPTR
   \   000060   E5..         MOV     A,?V8
   \   000062   F0           MOVX    @DPTR,A
   3014                osal_msg_send( taskID, (uint8 *)msgPtr );
   \   000063                ; Setup parameters for call to function osal_msg_send
   \   000063   EE           MOV     A,R6
   \   000064   FA           MOV     R2,A
   \   000065   EF           MOV     A,R7
   \   000066   FB           MOV     R3,A
   \   000067   A9..         MOV     R1,?V2
   \   000069   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   3015              }
   3016            }
   3017          }
   \                     ??bdb_SendMsg_0:
   \   00006C   7F09         MOV     R7,#0x9
   \   00006E   02....       LJMP    ?BANKED_LEAVE_XDATA
   3018          
   3019          
   3020          /*********************************************************************
   3021           * @fn      bdb_RegisterCommissioningStatusCB
   3022           *
   3023           * @brief   Register a callback in which the status of the procedures done in
   3024           *          BDB commissioning process will be reported
   3025           *
   3026           * @param   bdbGCB_CommissioningStatus - application callback
   3027           *
   3028           * @return  none
   3029           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3030          void bdb_RegisterCommissioningStatusCB(bdbGCB_CommissioningStatus_t bdbGCB_CommissioningStatus)
   \                     bdb_RegisterCommissioningStatusCB:
   3031          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3032            pfnCommissioningStatusCB = bdbGCB_CommissioningStatus;
   \   000004   90....       MOV     DPTR,#pfnCommissioningStatusCB
   \   000007   02....       LJMP    ?Subroutine3 & 0xFFFF
   3033          }
   3034          
   3035          /*********************************************************************
   3036           * @fn      bdb_ClearNetworkParams
   3037           *
   3038           * @brief   Restore nwk parameters to invalid if the device is not on a network
   3039           *
   3040           * @param   void
   3041           *
   3042           * @return  void
   3043           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3044          void bdb_ClearNetworkParams(void)
   \                     bdb_ClearNetworkParams:
   3045          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3046          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
   3047            if ( bdbAttributes.bdbNodeIsOnANetwork == FALSE )
   3048            {
   3049              //Clear the event
   3050              _NIB.nwkPanId = INVALID_NODE_ADDR;
   3051              _NIB.nwkLogicalChannel = 0;
   3052              _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   3053              touchLink_SetMacNwkParams( _NIB.nwkDevAddress, _NIB.nwkPanId, _NIB.nwkLogicalChannel );
   3054            }
   3055          #endif
   3056          }
   \   000000   02....       LJMP    ?BRET
   3057          
   3058          /*********************************************************************
   3059           * @fn      bdb_getZCLFrameCounter
   3060           *
   3061           * @brief   Get the next ZCL Frame Counter for packet sequence number
   3062           *
   3063           * @param   none
   3064           *
   3065           * @return  next ZCL frame counter
   3066           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3067          uint8 bdb_getZCLFrameCounter(void)
   \                     bdb_getZCLFrameCounter:
   3068          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3069            bdb_ZclTransactionSequenceNumber++;
   \   000004   90....       MOV     DPTR,#bdb_ZclTransactionSequenceNumber
   \   000007   E0           MOVX    A,@DPTR
   \   000008   04           INC     A
   \   000009   F0           MOVX    @DPTR,A
   3070            return bdb_ZclTransactionSequenceNumber;
   \   00000A   F9           MOV     R1,A
   \   00000B   02....       LJMP    ??Subroutine35_0 & 0xFFFF
   3071          
   3072          }
   3073          
   3074          
   3075          #if (ZG_BUILD_JOINING_TYPE)
   3076          /*********************************************************************
   3077           * @fn      bdb_RegisterCBKETCLinkKeyExchangeCB
   3078           *
   3079           * @brief   Register a callback in which the TC link key exchange procedure will 
   3080           *          be performed by application.
   3081           *          Upon fail or success bdb must be notified, see bdb_CBKETCLinkKeyExchangeAttempt
   3082           *
   3083           * @param   bdbGCB_TCLinkKeyExchangeMethod - application callback
   3084           *
   3085           * @return  none
   3086           */
   3087          void bdb_RegisterCBKETCLinkKeyExchangeCB(bdbGCB_CBKETCLinkKeyExchange_t bdbGCB_CBKETCLinkKeyExchange)
   3088          {
   3089            if(bdbGCB_CBKETCLinkKeyExchange)
   3090            {
   3091              pfnCBKETCLinkKeyExchange = bdbGCB_CBKETCLinkKeyExchange;
   3092              bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_CBKE;
   3093            }
   3094            else
   3095            {
   3096              pfnCBKETCLinkKeyExchange = NULL;
   3097              bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_APS_KEY;
   3098            }
   3099          }
   3100          
   3101          /*********************************************************************
   3102           * @fn      bdb_RegisterForFilterNwkDescCB
   3103           *
   3104           * @brief   Register a callback in which the application gets the list of network
   3105           *          descriptors got from active scan.
   3106           *          Use bdb_nwkDescFree to release the network descriptors that are not 
   3107           *          of interest and leave those which are to be attempted.
   3108           *
   3109           * @param   bdbGCB_FilterNwkDesc - application callback
   3110           *
   3111           * @return  none
   3112           */
   3113          void bdb_RegisterForFilterNwkDescCB(bdbGCB_FilterNwkDesc_t bdbGCB_FilterNwkDesc)
   3114          {
   3115            if(bdbGCB_FilterNwkDesc)
   3116            {
   3117              pfnFilterNwkDesc = bdbGCB_FilterNwkDesc;
   3118            }
   3119          }
   3120          
   3121          
   3122          /*********************************************************************
   3123           * @fn          bdb_CBKETCLinkKeyExchangeAttempt
   3124           *
   3125           * @brief       Tell BDB module the result of the TC link key exchange, to try
   3126           *              the default process or to keep going with the joining process.
   3127           *
   3128           * @param       didSuccess - TRUE if the process was succes, False otherwise
   3129           *
   3130           * @return      unprocessed events
   3131           */
   3132          void bdb_CBKETCLinkKeyExchangeAttempt(bool didSuccess)
   3133          {
   3134            if(didSuccess)
   3135            {
   3136              bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
   3137              bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, TRUE);
   3138            }
   3139            else
   3140            {
   3141              bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_APS_KEY;
   3142              //We are going back one state to try it again
   3143              bdbCommissioningProcedureState.bdbTCExchangeState -= BDB_TC_EXCHANGE_NEXT_STATE;
   3144              bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_STACK_VERSION);
   3145            }
   3146          
   3147          }
   3148          #endif
   3149          
   3150          //GP_UPDATE
   3151          #if (ZG_BUILD_RTR_TYPE)
   3152          #ifndef ZNP_ENABLED
   3153          /*********************************************************************
   3154           * @fn      gp_ChangeChannelReq
   3155           *
   3156           * @brief   Callback function to notify the BDB about a GP commissioning 
   3157           * request that will change the current channel for at most 
   3158           * gpBirectionalCommissioningChangeChannelTimeout ms
   3159           *
   3160           * @param   channel - Channel in which the commissioning will take place
   3161           *
   3162           * @return  TRUE to allow change channel, FALSE to do not allow
   3163           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3164          static uint8 gp_ChangeChannelReq(void)
   \                     gp_ChangeChannelReq:
   3165          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3166            uint8 allowChangeChannel = TRUE;
   \   000004   7901         MOV     R1,#0x1
   3167            
   3168            //Do not allow changes of channel if any process is in place
   3169            if(bdbAttributes.bdbCommissioningMode)
   \   000006   90....       MOV     DPTR,#bdbAttributes + 11
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   6002         JZ      ??gp_ChangeChannelReq_0
   3170            {
   3171              allowChangeChannel = FALSE;
   \   00000C   7900         MOV     R1,#0x0
   3172            }
   3173            
   3174            //Check application state to decide if allow change channel or not
   3175            
   3176            return allowChangeChannel;
   \                     ??gp_ChangeChannelReq_0:
   \   00000E   02....       LJMP    ??Subroutine35_0 & 0xFFFF
   3177          }
   3178          
   3179          
   3180          /*********************************************************************
   3181           * @fn          gp_CBInit
   3182           *
   3183           * @brief       Register the callbacks for GP endpoint
   3184           *
   3185           * @param       none
   3186           *
   3187           * @return      none
   3188           */
   3189          void gp_CBInit(void)
   3190          {
   3191            GP_DataCnfGCB = GP_DataCnf;
   3192            GP_endpointInitGCB = gp_endpointInit;  
   3193            GP_expireDuplicateFilteringGCB = gp_expireDuplicateFiltering;
   3194            GP_stopCommissioningModeGCB = gp_stopCommissioningMode;
   3195            GP_returnOperationalChannelGCB = gp_returnOperationalChannel;
   3196            GP_DataIndGCB = GP_DataInd;
   3197            GP_SecReqGCB = GP_SecReq;   
   3198            GP_CheckAnnouncedDeviceGCB = gp_CheckAnnouncedDevice;
   3199              
   3200            GP_aliasConflictAnnce = &aliasConflictAnnce;
   3201            
   3202            GP_endpointInitGCB();
   3203          }
   3204          
   3205          #endif
   3206          #endif
   3207          
   3208          
   3209          /*********************************************************************
   3210          *********************************************************************/
   3211          
   3212          
   3213          /******************************************************************************
   3214           * @fn          bdb_GenerateInstallCodeCRC
   3215           *
   3216           * @brief       Creates a CRC for the install code passed.
   3217           *
   3218           * @param       installCode - install code from which CRC will be generated
   3219           *
   3220           * @return      CRC
   3221           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3222          uint16 bdb_GenerateInstallCodeCRC(uint8 *installCode)
   \                     bdb_GenerateInstallCodeCRC:
   3223          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   3224            uint16 CRC;
   3225            
   3226            bdb_calculateCCITT_CRC(installCode, INSTALL_CODE_LEN, &CRC);
   \   000009                ; Setup parameters for call to function bdb_calculateCCITT_CRC
   \   000009   90....       MOV     DPTR,#__Constant_10
   \   00000C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00000F   7404         MOV     A,#0x4
   \   000011   12....       LCALL   ?XSTACK_DISP102_8
   \   000014   12....       LCALL   `??bdb_calculateCCITT_CRC::?relay`; Banked call to: bdb_calculateCCITT_CRC
   \   000017   7404         MOV     A,#0x4
   \   000019   12....       LCALL   ?DEALLOC_XSTACK8
   3227          
   3228            return CRC;
   \   00001C   85..82       MOV     DPL,?XSP + 0
   \   00001F   85..83       MOV     DPH,?XSP + 1
   \   000022   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000025   7402         MOV     A,#0x2
   \   000027   02....       LJMP    ?Subroutine6 & 0xFFFF
   3229          }
   3230          
   3231          /******************************************************************************
   3232           * @fn          bdb_calculateCCITT_CRC
   3233           *
   3234           * @brief       Creates a CRC for the install code passed.
   3235           *
   3236           * @param       Mb - install code from which CRC will be generated
   3237           * @param       msglen - install code length
   3238           * @param       crc - 
   3239           *
   3240           * @return      none
   3241           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3242          void bdb_calculateCCITT_CRC (uint8 *Mb, uint32 msglen, uint16 *crc)
   \                     bdb_calculateCCITT_CRC:
   3243          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0,R4
   \   000010   8D..         MOV     ?V1,R5
   3244            uint16 crcinit_direct; 
   3245            uint16 crcinit_nondirect;
   3246            bdb_crcInit(crc, &crcinit_direct, &crcinit_nondirect);
   \   000012                ; Setup parameters for call to function bdb_crcInit
   \   000012   A8..         MOV     R0,?XSP + 0
   \   000014   A9..         MOV     R1,?XSP + 1
   \   000016   88..         MOV     ?V2,R0
   \   000018   89..         MOV     ?V3,R1
   \   00001A   78..         MOV     R0,#?V2
   \   00001C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001F   7404         MOV     A,#0x4
   \   000021   12....       LCALL   ?XSTACK_DISP102_8
   \   000024   AA..         MOV     R2,?V0
   \   000026   AB..         MOV     R3,?V1
   \   000028   12....       LCALL   `??bdb_crcInit::?relay`; Banked call to: bdb_crcInit
   \   00002B   7402         MOV     A,#0x2
   \   00002D   12....       LCALL   ?DEALLOC_XSTACK8
   3247            *crc = bdb_crcBitByBitFast(Mb, msglen, crcinit_direct, crcinit_nondirect);
   \   000030                ; Setup parameters for call to function bdb_crcBitByBitFast
   \   000030   85..82       MOV     DPL,?XSP + 0
   \   000033   85..83       MOV     DPH,?XSP + 1
   \   000036   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000039   7412         MOV     A,#0x12
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000041   7408         MOV     A,#0x8
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   E0           MOVX    A,@DPTR
   \   000047   FC           MOV     R4,A
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   FD           MOV     R5,A
   \   00004B   EE           MOV     A,R6
   \   00004C   FA           MOV     R2,A
   \   00004D   EF           MOV     A,R7
   \   00004E   FB           MOV     R3,A
   \   00004F   12....       LCALL   `??bdb_crcBitByBitFast::?relay`; Banked call to: bdb_crcBitByBitFast
   \   000052   7406         MOV     A,#0x6
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   \   000057   85..82       MOV     DPL,?V0
   \   00005A   85..83       MOV     DPH,?V1
   \   00005D   EA           MOV     A,R2
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   EB           MOV     A,R3
   \   000061   F0           MOVX    @DPTR,A
   3248          }
   \   000062   02....       LJMP    ?Subroutine2 & 0xFFFF
   3249          
   3250          
   3251          /******************************************************************************
   3252           * @fn          bdb_crcInit
   3253           *
   3254           * @brief       Initialize CRC calculation
   3255           *
   3256           * @param       crc - 
   3257           * @param       crcinit_direct -
   3258           * @param       crcinit_nondirect - 
   3259           *
   3260           * @return      none
   3261           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3262          void bdb_crcInit(uint16 *crc, uint16 *crcinit_direct, uint16 *crcinit_nondirect)
   \                     bdb_crcInit:
   3263          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3264          
   3265            uint16 i;
   3266            uint16 bit;
   3267          
   3268            *crcinit_direct = CRC_INIT;
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   74FF         MOV     A,#-0x1
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   F0           MOVX    @DPTR,A
   3269            *crc = CRC_INIT;
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   F0           MOVX    @DPTR,A
   3270            for (i=0; i<CRC_ORDER; i++) 
   \   000015   7E10         MOV     R6,#0x10
   3271            {
   3272              bit = *crc & 1;
   \                     ??bdb_crcInit_0:
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   5401         ANL     A,#0x1
   \   00001E   F8           MOV     R0,A
   3273              if (bit) *crc^= CRC_POLYNOM;
   \   00001F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000021   5009         JNC     ??bdb_crcInit_1
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6421         XRL     A,#0x21
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6410         XRL     A,#0x10
   \   00002B   F0           MOVX    @DPTR,A
   3274              *crc >>= 1;
   \                     ??bdb_crcInit_1:
   \   00002C   8A82         MOV     DPL,R2
   \   00002E   8B83         MOV     DPH,R3
   \   000030   E0           MOVX    A,@DPTR
   \   000031   FC           MOV     R4,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   C3           CLR     C
   \   000035   13           RRC     A
   \   000036   FD           MOV     R5,A
   \   000037   EC           MOV     A,R4
   \   000038   13           RRC     A
   \   000039   8A82         MOV     DPL,R2
   \   00003B   8B83         MOV     DPH,R3
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   ED           MOV     A,R5
   \   000040   F0           MOVX    @DPTR,A
   3275              if (bit) *crc|= CRC_HIGHBIT;
   \   000041   E8           MOV     A,R0
   \   000042   A2E0         MOV     C,0xE0 /* A   */.0
   \   000044   5009         JNC     ??bdb_crcInit_2
   \   000046   8A82         MOV     DPL,R2
   \   000048   8B83         MOV     DPH,R3
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   4480         ORL     A,#0x80
   \   00004E   F0           MOVX    @DPTR,A
   3276            }	
   \                     ??bdb_crcInit_2:
   \   00004F   1E           DEC     R6
   \   000050   EE           MOV     A,R6
   \   000051   70C4         JNZ     ??bdb_crcInit_0
   3277            *crcinit_nondirect = *crc;
   \   000053   8A82         MOV     DPL,R2
   \   000055   8B83         MOV     DPH,R3
   \   000057   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00005A   7409         MOV     A,#0x9
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F583         MOV     DPH,A
   \   000065   8A82         MOV     DPL,R2
   \   000067   E8           MOV     A,R0
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
   \   00006A   E9           MOV     A,R1
   \   00006B   F0           MOVX    @DPTR,A
   3278          
   3279          }
   \   00006C   02....       LJMP    ?Subroutine0 & 0xFFFF
   3280          
   3281          
   3282          /******************************************************************************
   3283           * @fn          bdb_crcReflect
   3284           *
   3285           * @brief       
   3286           *
   3287           * @param       crc - 
   3288           * @param       bitnum -
   3289           *
   3290           * @return      none
   3291           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3292          uint16 bdb_crcReflect (uint16 crc, uint16 bitnum)
   \                     bdb_crcReflect:
   3293          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3294          
   3295            // reflects the lower 'bitnum' bits of 'crc'
   3296          
   3297            uint16 i, j=1, crcout=0;
   \   000005   7E01         MOV     R6,#0x1
   \   000007   7F00         MOV     R7,#0x0
   \   000009   8F..         MOV     ?V0,R7
   \   00000B   8F..         MOV     ?V1,R7
   3298          
   3299            for (i=(uint16)1<<(bitnum-1); i; i>>=1) {
   \   00000D   8E..         MOV     ?V2,R6
   \   00000F   8F..         MOV     ?V3,R7
   \   000011   EC           MOV     A,R4
   \   000012   14           DEC     A
   \   000013   78..         MOV     R0,#?V2
   \   000015   12....       LCALL   ?S_SHL
   \   000018   A8..         MOV     R0,?V2
   \   00001A   A9..         MOV     R1,?V3
   \   00001C   8022         SJMP    ??bdb_crcReflect_0
   3300              if (crc & i) crcout|=j;
   \                     ??bdb_crcReflect_1:
   \   00001E   EA           MOV     A,R2
   \   00001F   58           ANL     A,R0
   \   000020   FC           MOV     R4,A
   \   000021   EB           MOV     A,R3
   \   000022   59           ANL     A,R1
   \   000023   FD           MOV     R5,A
   \   000024   EC           MOV     A,R4
   \   000025   4D           ORL     A,R5
   \   000026   600A         JZ      ??bdb_crcReflect_2
   \   000028   EE           MOV     A,R6
   \   000029   45..         ORL     A,?V0
   \   00002B   F5..         MOV     ?V0,A
   \   00002D   EF           MOV     A,R7
   \   00002E   45..         ORL     A,?V1
   \   000030   F5..         MOV     ?V1,A
   3301              j<<= 1;
   \                     ??bdb_crcReflect_2:
   \   000032   EE           MOV     A,R6
   \   000033   25E0         ADD     A,0xE0 /* A   */
   \   000035   FE           MOV     R6,A
   \   000036   EF           MOV     A,R7
   \   000037   33           RLC     A
   \   000038   FF           MOV     R7,A
   3302            }
   \   000039   E9           MOV     A,R1
   \   00003A   C3           CLR     C
   \   00003B   13           RRC     A
   \   00003C   F9           MOV     R1,A
   \   00003D   E8           MOV     A,R0
   \   00003E   13           RRC     A
   \   00003F   F8           MOV     R0,A
   \                     ??bdb_crcReflect_0:
   \   000040   E8           MOV     A,R0
   \   000041   49           ORL     A,R1
   \   000042   70DA         JNZ     ??bdb_crcReflect_1
   3303            return (crcout);
   \   000044   AA..         MOV     R2,?V0
   \   000046   AB..         MOV     R3,?V1
   \   000048   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   3304          }
   3305          
   3306          
   3307          /******************************************************************************
   3308           * @fn          bdb_crcBitByBitFast
   3309           *
   3310           * @brief       
   3311           *
   3312           * @param       p - 
   3313           * @param       len -
   3314           * @param       crcinit_direct - 
   3315           * @param       crcinit_nondirect -
   3316           *
   3317           * @return      crc
   3318           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3319          uint16 bdb_crcBitByBitFast(uint8 * p, uint32 len, uint16 crcinit_direct, uint16 crcinit_nondirect) 
   \                     bdb_crcBitByBitFast:
   3320          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   3321            // fast bit by bit algorithm without augmented zero bytes.
   3322            // does not use lookup table, suited for polynom orders between 1...32.
   3323          
   3324            uint16 i, j, c, bit;
   3325            uint16 crc = crcinit_direct;
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   3326          
   3327            for (i=0; i<len; i++) {
   \   00000D   75..00       MOV     ?V0,#0x0
   \   000010   75..00       MOV     ?V1,#0x0
   \   000013   7414         MOV     A,#0x14
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   78..         MOV     R0,#?V8
   \   00001A   12....       LCALL   ?L_MOV_X
   \   00001D   8046         SJMP    ??bdb_crcBitByBitFast_0
   3328          
   3329              c = (uint16)*p++;
   \                     ??bdb_crcBitByBitFast_1:
   \   00001F   85..82       MOV     DPL,?V2
   \   000022   85..83       MOV     DPH,?V3
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FA           MOV     R2,A
   \   000027   7B00         MOV     R3,#0x0
   \   000029   A3           INC     DPTR
   \   00002A   8582..       MOV     ?V2,DPL
   \   00002D   8583..       MOV     ?V3,DPH
   3330              c = bdb_crcReflect(c, 8);
   \   000030                ; Setup parameters for call to function bdb_crcReflect
   \   000030   7C08         MOV     R4,#0x8
   \   000032   7D00         MOV     R5,#0x0
   \   000034   12....       LCALL   `??bdb_crcReflect::?relay`; Banked call to: bdb_crcReflect
   3331          
   3332              for (j=0x80; j; j>>=1) {
   \   000037   7880         MOV     R0,#-0x80
   3333          
   3334                bit = crc & CRC_HIGHBIT;
   \                     ??bdb_crcBitByBitFast_2:
   \   000039   EF           MOV     A,R7
   \   00003A   5480         ANL     A,#0x80
   \   00003C   FD           MOV     R5,A
   3335                crc<<= 1;
   \   00003D   EE           MOV     A,R6
   \   00003E   25E0         ADD     A,0xE0 /* A   */
   \   000040   FE           MOV     R6,A
   \   000041   EF           MOV     A,R7
   \   000042   33           RLC     A
   \   000043   FF           MOV     R7,A
   3336                if (c & j) bit^= CRC_HIGHBIT;
   \   000044   EA           MOV     A,R2
   \   000045   58           ANL     A,R0
   \   000046   6004         JZ      ??bdb_crcBitByBitFast_3
   \   000048   7480         MOV     A,#-0x80
   \   00004A   6D           XRL     A,R5
   \   00004B   FD           MOV     R5,A
   3337                if (bit) crc^= CRC_POLYNOM;
   \                     ??bdb_crcBitByBitFast_3:
   \   00004C   ED           MOV     A,R5
   \   00004D   6008         JZ      ??bdb_crcBitByBitFast_4
   \   00004F   7421         MOV     A,#0x21
   \   000051   6E           XRL     A,R6
   \   000052   FE           MOV     R6,A
   \   000053   7410         MOV     A,#0x10
   \   000055   6F           XRL     A,R7
   \   000056   FF           MOV     R7,A
   3338              }
   \                     ??bdb_crcBitByBitFast_4:
   \   000057   C3           CLR     C
   \   000058   E8           MOV     A,R0
   \   000059   13           RRC     A
   \   00005A   F8           MOV     R0,A
   \   00005B   70DC         JNZ     ??bdb_crcBitByBitFast_2
   3339            }	
   \   00005D   05..         INC     ?V0
   \   00005F   E5..         MOV     A,?V0
   \   000061   7002         JNZ     ??bdb_crcBitByBitFast_0
   \   000063   05..         INC     ?V1
   \                     ??bdb_crcBitByBitFast_0:
   \   000065   85....       MOV     ?V4,?V0
   \   000068   85....       MOV     ?V5,?V1
   \   00006B   E4           CLR     A
   \   00006C   F5..         MOV     ?V6,A
   \   00006E   F5..         MOV     ?V7,A
   \   000070   78..         MOV     R0,#?V8
   \   000072   79..         MOV     R1,#?V4
   \   000074   12....       LCALL   ?UL_GT
   \   000077   40A6         JC      ??bdb_crcBitByBitFast_1
   3340          
   3341            crc=bdb_crcReflect(crc, CRC_ORDER);
   3342            crc^= CRC_XOR;
   3343          
   3344            return(crc);
   \   000079                ; Setup parameters for call to function bdb_crcReflect
   \   000079   7C10         MOV     R4,#0x10
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   EE           MOV     A,R6
   \   00007E   FA           MOV     R2,A
   \   00007F   EF           MOV     A,R7
   \   000080   FB           MOV     R3,A
   \   000081   12....       LCALL   `??bdb_crcReflect::?relay`; Banked call to: bdb_crcReflect
   \   000084   EA           MOV     A,R2
   \   000085   F4           CPL     A
   \   000086   FA           MOV     R2,A
   \   000087   EB           MOV     A,R3
   \   000088   F4           CPL     A
   \   000089   FB           MOV     R3,A
   \   00008A   7F0C         MOV     R7,#0xc
   \   00008C   02....       LJMP    ?BANKED_LEAVE_XDATA
   3345          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for bdbAttributes>`:
   \   000000   00F0FF07     DD 134213632
   \   000004   00080000     DD 2048
   \   000008   FFFF         DW 65535
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   07           DB 7
   \   00000D   04           DB 4
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   0F           DB 15
   \   000011   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for vDoPrimaryScan>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgBdbInstallCodeCRC>`:
   \   000000   83           DB 131
   \   000001   FE           DB 254
   \   000002   D3           DB 211
   \   000003   40           DB 64
   \   000004   7A           DB 122
   \   000005   93           DB 147
   \   000006   97           DB 151
   \   000007   23           DB 35
   \   000008   A5           DB 165
   \   000009   C6           DB 198
   \   00000A   39           DB 57
   \   00000B   B2           DB 178
   \   00000C   69           DB 105
   \   00000D   16           DB 22
   \   00000E   D5           DB 213
   \   00000F   05           DB 5
   \   000010   C3           DB 195
   \   000011   B5           DB 181

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_32:
   \   000000   32000000     DD 50

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_c8:
   \   000000   C8000000     DD 200

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3a98:
   \   000000   983A0000     DD 15000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_10:
   \   000000   10000000     DD 16

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RegisterSimpleDescriptor::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RegisterSimpleDescriptor

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_ZclIdentifyCmdInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_ZclIdentifyCmdInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_addInstallCode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_addInstallCode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RegisterTCLinkKeyExchangeProcessCB::?rela`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RegisterTCLinkKeyExchangeProcessCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_setTCRequireKeyExchange::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_setTCRequireKeyExchange

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_TCAddJoiningDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_TCAddJoiningDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_TCProcessJoiningList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_TCProcessJoiningList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_TCjoiningDeviceComplete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_TCjoiningDeviceComplete

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_TCJoiningDeviceFree::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_TCJoiningDeviceFree

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_setJoinUsesInstallCodeKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_setJoinUsesInstallCodeKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_StartCommissioning::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_StartCommissioning

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_NotifyCommissioningModeStart::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_NotifyCommissioningModeStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_setFN::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_setFN

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_resetLocalAction::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_resetLocalAction

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_parentLost::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_parentLost

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_NetworkRestoredResumeState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_NetworkRestoredResumeState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_reportCommissioningState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_reportCommissioningState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_nwkFormationAttempt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_nwkFormationAttempt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_isDeviceNonFactoryNew::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_isDeviceNonFactoryNew

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_rejoinNwk::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_rejoinNwk

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_setChannelAttribute::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_setChannelAttribute

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_setChannel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_setChannel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_nwkJoiningFormation::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_nwkJoiningFormation

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_nwkSteeringDeviceOnNwk::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_nwkSteeringDeviceOnNwk

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_startResumeCommissioningProcess::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_startResumeCommissioningProcess

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_touchlinkSendFNReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_touchlinkSendFNReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_setNodeIsOnANetwork::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_setNodeIsOnANetwork

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_setCommissioningGroupID::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_setCommissioningGroupID

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_CreateRespondentList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_CreateRespondentList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_AddRespondentNode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_AddRespondentNode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_zclRespondentListClean::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_zclRespondentListClean

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_SendMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RegisterCommissioningStatusCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RegisterCommissioningStatusCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_ClearNetworkParams::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_ClearNetworkParams

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_getZCLFrameCounter::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_getZCLFrameCounter

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_ChangeChannelReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_ChangeChannelReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_GenerateInstallCodeCRC::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_GenerateInstallCodeCRC

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_calculateCCITT_CRC::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_calculateCCITT_CRC

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_crcInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_crcInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_crcReflect::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_crcReflect

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_crcBitByBitFast::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_crcBitByBitFast
   3346          
   3347          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     10   bdb_AddRespondentNode
        0     10   -> bdb_CreateRespondentList
        0     10   -> osal_mem_alloc
      0      0   bdb_ClearNetworkParams
      0     20   bdb_CreateRespondentList
        0     10   -> osal_mem_alloc
      2     36   bdb_GenerateInstallCodeCRC
        2      6   -> bdb_calculateCCITT_CRC
      0      9   bdb_Init
        0      9   -> bdb_RepInit
        0      9   -> gp_RegisterGPChangeChannelReqForBDBCB
        0      9   -> gp_endpointInit
      0      0   bdb_NetworkRestoredResumeState
      1     36   bdb_NotifyCommissioningModeStart
        0     15   -> bdb_SendMsg
      2      0   bdb_RegisterCommissioningStatusCB
      1     10   bdb_RegisterSimpleDescriptor
        0     10   -> afRegister
        0     10   -> osal_mem_alloc
      2      0   bdb_RegisterTCLinkKeyExchangeProcessCB
      1     80   bdb_SendMsg
        0     20   -> osal_memcpy
        0     17   -> osal_msg_allocate
        0     17   -> osal_msg_send
      0     36   bdb_StartCommissioning
        0     32   -> APSME_IsDistributedSecurity
        0     32   -> ZDApp_ReadNetworkRestoreState
        0     32   -> ZDOInitDeviceEx
        0     32   -> bdb_RepConstructReportingData
        0     32   -> bdb_RepUpdateMarkBindings
        0     32   -> bdb_nwkSteeringDeviceOnNwk
        0     32   -> bdb_reportCommissioningState
        0     32   -> bdb_setNodeIsOnANetwork
        0     32   -> osal_get_timeoutEx
        0     32   -> osal_isbufset
        0     32   -> osal_memset
        0     32   -> osal_nv_delete
        0     32   -> osal_nv_item_len
        0     36   -> osal_nv_read
        0     36   -> osal_nv_write
        0     32   -> osal_set_event
        0     32   -> zgWriteStartupOptions
      1     32   bdb_TCAddJoiningDevice
        0     30   -> bdb_SendMsg
        0     28   -> osal_mem_alloc
        0     31   -> osal_memcmp
        0     31   -> osal_memcpy
        0     32   -> osal_start_reload_timer
      0     76   bdb_TCJoiningDeviceFree
        0     15   -> osal_mem_free
        0     18   -> osal_memcmp
      0     86   bdb_TCProcessJoiningList
        0     60   -> APSME_SearchTCLinkKeyEntry
        0     58   -> AddrMgrEntryLookupExt
        0     60   -> ZDSecMgrAPSRemove
        0     58   -> ZDSecMgrAddrClear
        0     60   -> bdb_SendMsg
        0     58   -> bdb_TCJoiningDeviceFree
        0     61   -> osal_memcpy
        0     58   -> osal_memset
        0     62   -> osal_nv_write
        0     58   -> osal_stop_timerEx
      0     31   bdb_TCjoiningDeviceComplete
        0     30   -> bdb_SendMsg
        0     28   -> bdb_TCJoiningDeviceFree
        0     31   -> osal_memcmp
        0     31   -> osal_memcpy
        0     28   -> osal_stop_timerEx
      0     24   bdb_ZclIdentifyCmdInd
        0     24   -> osal_start_timerEx
        0     22   -> zclFindAttrRec
      0     34   bdb_addInstallCode
        0     30   -> APSME_AddTCLinkKey
        0     30   -> bdb_GenerateInstallCodeCRC
        0     30   -> osal_build_uint16
        0     34   -> sspMMOHash
      0     28   bdb_calculateCCITT_CRC
        0     22   -> bdb_crcBitByBitFast
        0     18   -> bdb_crcInit
      0     42   bdb_crcBitByBitFast
        0     20   -> bdb_crcReflect
      0     27   bdb_crcInit
      0     32   bdb_crcReflect
      1     28   bdb_event_loop
        0     24   -> bdb_BindIfMatch
        0     24   -> bdb_RepProcessEvent
        0     24   -> bdb_SendIdentifyQuery
        0     24   -> bdb_SendSimpleDescReq
        0     24   -> bdb_TCProcessJoiningList
        0     24   -> bdb_exitFindingBindingWStatus
        0     24   -> bdb_getRespondentRetry
        0     24   -> bdb_nwkSteeringDeviceOnNwk
        0     24   -> bdb_reportCommissioningState
        0     24   -> bdb_setEpDescListToActiveEndpoint
        0     24   -> bdb_startResumeCommissioningProcess
        0     24   -> osal_get_timeoutEx
        0     24   -> osal_msg_deallocate
        0     24   -> osal_msg_receive
        0     28   -> osal_start_timerEx
        0     24   -> osal_stop_timerEx
        0     26   -> zclFindAttrRec
      2      0   bdb_getZCLFrameCounter
      2      0   bdb_isDeviceNonFactoryNew
      0      9   bdb_nwkFormationAttempt
        0      9   -> bdb_nwkJoiningFormation
        0      9   -> bdb_reportCommissioningState
      0     33   bdb_nwkJoiningFormation
        0     12   -> ZDOInitDeviceEx
        0     12   -> bdb_reportCommissioningState
        0     12   -> bdb_setChannel
      2     41   bdb_nwkSteeringDeviceOnNwk
        2      9   -> ZDP_MgmtPermitJoinReq
      0      0   bdb_parentLost
      0     10   bdb_rejoinNwk
        0     10   -> NLME_ReJoinRequest
        0     10   -> NLME_ReJoinRequestUnsecure
        0     10   -> ZDApp_ChangeState
        0     10   -> ZDApp_RestoreNwkKey
        0     10   -> ZMacSetReq
      1     50   bdb_reportCommissioningState
        0     14   -> NLME_ResetRequest
        0     14   -> ZDApp_ChangeState
        0     14   -> ZDApp_RestoreNwkSecMaterial
        0     14   -> ZMacSetReq
        0     16   -> bdb_SendMsg
        0     14   -> bdb_getRespondentRetry
        0     14   -> bdb_setFN
        0     14   -> bdb_zclRespondentListClean
        0     14   -> nwk_setStateIdle
        0     14   -> osal_get_timeoutEx
        0     18   -> osal_start_timerEx
        0     14   -> osal_stop_timerEx
      2      0   bdb_resetLocalAction
        2      0   -> ZDApp_ResetTimerStart
        2      0   -> bdb_setFN
      0     28   bdb_setChannel
        0     16   -> osal_nv_write
      0     12   bdb_setChannelAttribute
      2      0   bdb_setCommissioningGroupID
      2     14   bdb_setFN
        2      0   -> bdb_setNodeIsOnANetwork
        2      0   -> zgWriteStartupOptions
      2      0   bdb_setJoinUsesInstallCodeKey
      0     46   bdb_setNodeIsOnANetwork
        0     14   -> osal_nv_write
      2      0   bdb_setTCRequireKeyExchange
      0     49   bdb_startResumeCommissioningProcess
        0     21   -> bdb_NotifyCommissioningModeStart
        0     21   -> bdb_SendIdentifyQuery
        0     23   -> bdb_SendMsg
        0     21   -> bdb_exitFindingBindingWStatus
        0     21   -> bdb_nwkJoiningFormation
        0     21   -> bdb_nwkSteeringDeviceOnNwk
        0     21   -> bdb_reportCommissioningState
        0     21   -> bdb_setEpDescListToActiveEndpoint
        0     21   -> osal_memset
        0     25   -> osal_start_timerEx
        0     23   -> zclFindAttrRec
      0      0   bdb_touchlinkSendFNReset
      0     26   bdb_zclRespondentListClean
        0     12   -> osal_mem_free
      2      0   gp_ChangeChannelReq


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      18  ?<Initializer for bdbAttributes>
       1  ?<Initializer for vDoPrimaryScan>
      18  ?<Initializer for zgBdbInstallCodeCRC>
       5  ??Subroutine31_0
      12  ??Subroutine32_0
       8  ??Subroutine33_0
       1  ??Subroutine34_0
       7  ??Subroutine35_0
       8  ??Subroutine36_0
       3  ??Subroutine37_0
       5  ??Subroutine38_0
       1  ??Subroutine39_0
       4  ??Subroutine40_0
       6  ??Subroutine41_0
       6  ??Subroutine42_0
      12  ??Subroutine43_0
       6  ??Subroutine44_0
       6  ??Subroutine45_0
       5  ?Subroutine0
       3  ?Subroutine1
       8  ?Subroutine10
      10  ?Subroutine11
       3  ?Subroutine12
       8  ?Subroutine13
       8  ?Subroutine14
      17  ?Subroutine15
       4  ?Subroutine16
      10  ?Subroutine17
      20  ?Subroutine18
       3  ?Subroutine19
       2  ?Subroutine2
       8  ?Subroutine20
       4  ?Subroutine21
       3  ?Subroutine22
       8  ?Subroutine23
      10  ?Subroutine24
      14  ?Subroutine25
      10  ?Subroutine26
       6  ?Subroutine27
       3  ?Subroutine28
       6  ?Subroutine29
       4  ?Subroutine3
       9  ?Subroutine30
      10  ?Subroutine4
       8  ?Subroutine5
       6  ?Subroutine6
       8  ?Subroutine7
       1  ?Subroutine8
       1  ?Subroutine9
       4  __Constant_10
       4  __Constant_32
       4  __Constant_3a98
       4  __Constant_3e8
       4  __Constant_c8
      18  bdbAttributes
       4  bdbCommissioningProcedureState
     173  bdb_AddRespondentNode
       6  bdb_AddRespondentNode::?relay
       3  bdb_ClearNetworkParams
       6  bdb_ClearNetworkParams::?relay
      28  bdb_CreateRespondentList
       6  bdb_CreateRespondentList::?relay
       2  bdb_CurrEpDescriptorList
       1  bdb_FBStateSuccessLatch
       1  bdb_FB_InitiatorCurrentCyclesNumber
      42  bdb_GenerateInstallCodeCRC
       6  bdb_GenerateInstallCodeCRC::?relay
       2  bdb_HeadEpDescriptorList
     128  bdb_Init
       6  bdb_Init::?relay
       3  bdb_NetworkRestoredResumeState
       6  bdb_NetworkRestoredResumeState::?relay
      47  bdb_NotifyCommissioningModeStart
       6  bdb_NotifyCommissioningModeStart::?relay
      10  bdb_RegisterCommissioningStatusCB
       6  bdb_RegisterCommissioningStatusCB::?relay
      57  bdb_RegisterSimpleDescriptor
       6  bdb_RegisterSimpleDescriptor::?relay
      19  bdb_RegisterTCLinkKeyExchangeProcessCB
       6  bdb_RegisterTCLinkKeyExchangeProcessCB::?relay
     113  bdb_SendMsg
       6  bdb_SendMsg::?relay
     482  bdb_StartCommissioning
       6  bdb_StartCommissioning::?relay
     382  bdb_TCAddJoiningDevice
       6  bdb_TCAddJoiningDevice::?relay
     147  bdb_TCJoiningDeviceFree
       6  bdb_TCJoiningDeviceFree::?relay
     440  bdb_TCProcessJoiningList
       6  bdb_TCProcessJoiningList::?relay
     185  bdb_TCjoiningDeviceComplete
       6  bdb_TCjoiningDeviceComplete::?relay
       1  bdb_TaskID
     158  bdb_ZclIdentifyCmdInd
       6  bdb_ZclIdentifyCmdInd::?relay
       1  bdb_ZclTransactionSequenceNumber
     131  bdb_addInstallCode
       6  bdb_addInstallCode::?relay
     101  bdb_calculateCCITT_CRC
       6  bdb_calculateCCITT_CRC::?relay
     143  bdb_crcBitByBitFast
       6  bdb_crcBitByBitFast::?relay
     111  bdb_crcInit
       6  bdb_crcInit::?relay
      75  bdb_crcReflect
       6  bdb_crcReflect::?relay
     615  bdb_event_loop
       6  bdb_event_loop::?relay
      14  bdb_getZCLFrameCounter
       6  bdb_getZCLFrameCounter::?relay
       1  bdb_initialization
      12  bdb_isDeviceNonFactoryNew
       6  bdb_isDeviceNonFactoryNew::?relay
       2  bdb_joiningDeviceList
      51  bdb_nwkFormationAttempt
       6  bdb_nwkFormationAttempt::?relay
     110  bdb_nwkJoiningFormation
       6  bdb_nwkJoiningFormation::?relay
      45  bdb_nwkSteeringDeviceOnNwk
       6  bdb_nwkSteeringDeviceOnNwk::?relay
       3  bdb_parentLost
       6  bdb_parentLost::?relay
     127  bdb_rejoinNwk
       6  bdb_rejoinNwk::?relay
     595  bdb_reportCommissioningState
       6  bdb_reportCommissioningState::?relay
      16  bdb_resetLocalAction
       6  bdb_resetLocalAction::?relay
      64  bdb_setChannel
       6  bdb_setChannel::?relay
      31  bdb_setChannelAttribute
       6  bdb_setChannelAttribute::?relay
      10  bdb_setCommissioningGroupID
       6  bdb_setCommissioningGroupID::?relay
      18  bdb_setFN
       6  bdb_setFN::?relay
      23  bdb_setJoinUsesInstallCodeKey
       6  bdb_setJoinUsesInstallCodeKey::?relay
      74  bdb_setNodeIsOnANetwork
       6  bdb_setNodeIsOnANetwork::?relay
      11  bdb_setTCRequireKeyExchange
       6  bdb_setTCRequireKeyExchange::?relay
     475  bdb_startResumeCommissioningProcess
       6  bdb_startResumeCommissioningProcess::?relay
       3  bdb_touchlinkSendFNReset
       6  bdb_touchlinkSendFNReset::?relay
      66  bdb_zclRespondentListClean
       6  bdb_zclRespondentListClean::?relay
      17  gp_ChangeChannelReq
       6  gp_ChangeChannelReq::?relay
       2  pRespondentCurr
       2  pRespondentHead
       2  pRespondentNext
       2  pfnCommissioningStatusCB
       2  pfnTCLinkKeyExchangeProcessCB
       1  touchLinkTargetEnabled
       1  vDoPrimaryScan
      18  zgBdbInstallCodeCRC

 
 5 668 bytes in segment BANKED_CODE
   258 bytes in segment BANK_RELAYS
    37 bytes in segment XDATA_I
    37 bytes in segment XDATA_ID
    20 bytes in segment XDATA_ROM_C
    26 bytes in segment XDATA_Z
 
 5 963 bytes of CODE  memory
     0 bytes of CONST memory (+ 20 bytes shared)
    63 bytes of XDATA memory

Errors: none
Warnings: none
