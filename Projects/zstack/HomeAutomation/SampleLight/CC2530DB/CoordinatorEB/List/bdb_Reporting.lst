###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                26/Oct/2017  13:47:14
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack
#        3.0.0\Components\stack\bdb\bdb_Reporting.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack
#        3.0.0\Components\stack\bdb\bdb_Reporting.c" -D BDB_REPORTING -D
#        SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D
#        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D
#        ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D
#        xZCL_LEVEL_CTRL -lC "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
#        "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\List\bdb_Reporting.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\CoordinatorEB\Obj\bdb_Reporting.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack 3.0.0\Components\stack\bdb\bdb_Reporting.c
      1          /**************************************************************************************************
      2            Filename:       bdb_Reporting.c
      3            Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
      4            Revision:       $Revision: - $
      5          
      6            Description:    This file contains the Reporting Attributes functions.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          #ifdef BDB_REPORTING
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44           
     45          #include "bdb.h"
     46          #include "zcl.h"
     47          #include "ZDObject.h"
     48          #include "bdb_Reporting.h"
     49          #include "OSAL.h"
     50          #include "zcl_ms.h"
     51          #include "bdb_interface.h"
     52             
     53          /*********************************************************************
     54           * MACROS
     55           */
     56          #define EQUAL_LLISTITEMDATA( a, b ) ( a.attrID == b.attrID )
     57          #define EQUAL_LLISTCFGATTRITEMDATA( a, b ) ( a.endpoint == b.endpoint &&  a.attrID == b.attrID && a.cluster == b.cluster )
     58          #define FLAGS_TURNOFFALLFLAGS( flags ) ( flags = 0x00 )
     59          #define FLAGS_TURNOFFFLAG( flags, flagMask ) ( flags &= ~flagMask )
     60          #define FLAGS_TURNONFLAG( flags, flagMask ) ( flags |= flagMask )
     61          #define FLAGS_CHECKFLAG( flags, flagMask ) ( (flags & flagMask) > 0? BDBREPORTING_TRUE: BDBREPORTING_FALSE )
     62          
     63           /*********************************************************************
     64           * CONSTANTS
     65           */
     66          #define BDBREPORTING_HASBINDING_FLAG_MASK      0x01
     67          #define BDBREPORTING_NONEXTINCREMENT_FLAG_MASK 0x02
     68          
     69             
     70          #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 8   
     71          #define BDBREPORTING_DEFAULTCHANGEVALUE {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
     72          #endif
     73          #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 4   
     74          #define BDBREPORTING_DEFAULTCHANGEVALUE {0x00, 0x00, 0x00, 0x00}
     75          #endif
     76          #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 2   
     77          #define BDBREPORTING_DEFAULTCHANGEVALUE {0x00, 0x00}
     78          #endif
     79          
     80          #define BDBREPORTING_MAXINTERVAL_DEFAULT 0x0000
     81          #define BDBREPORTING_MININTERVAL_DEFAULT 0xFFFF
     82             
     83          /*********************************************************************
     84           * TYPEDEFS
     85           */
     86          //Data to hold informaation about an attribute in a linked list thats inside
     87          //the cluster-endpoint entry 
     88          typedef struct
     89          {
     90            uint16 attrID;
     91            uint8  lastValueReported[BDBREPORTING_MAX_ANALOG_ATTR_SIZE];
     92            uint8  reportableChange[BDBREPORTING_MAX_ANALOG_ATTR_SIZE];
     93          } bdbReportAttrLive_t;
     94             
     95             
     96          //This structrue holds the data of a attribute reporting configiration that
     97          //is used at runtime and it's saved in the NV
     98          typedef struct
     99          {
    100            uint8 endpoint;
    101            uint16 cluster;
    102            uint16 attrID;
    103            uint16 minReportInt;
    104            uint16 maxReportInt;
    105            uint16 defaultMinReportInt;
    106            uint16 defaultMaxReportInt;
    107            uint8  reportableChange[BDBREPORTING_MAX_ANALOG_ATTR_SIZE];
    108            uint8  defaultReportableChange[BDBREPORTING_MAX_ANALOG_ATTR_SIZE];
    109          } bdbReportAttrCfgData_t;   
    110          
    111          //This structure represents a node in the linked list of the attributes 
    112          //data in the cluster-endpoint entry
    113          typedef struct bdbLinkedListAttrItem
    114          {
    115            bdbReportAttrLive_t* data;
    116            struct bdbLinkedListAttrItem *next;
    117          } bdbLinkedListAttrItem_t;
    118          
    119          
    120          //This structure represents a linked list of the attributes 
    121          //data in the cluster-endpoint entry
    122          typedef struct bdbAttrLinkedListAttr
    123          {
    124            uint8 numItems;
    125            bdbLinkedListAttrItem_t *head;
    126          } bdbAttrLinkedListAttr_t;
    127             
    128          // This structure is an entry of a cluster-endpoint table used by the reporting
    129          //code (the consolidated values) to actually report periodically
    130          typedef struct
    131          {
    132            uint8 flags;
    133            uint8  endpoint;             // status field
    134            uint16  cluster;          // to send or receive reports of the attribute
    135            uint16  consolidatedMinReportInt;             // attribute ID
    136            uint16  consolidatedMaxReportInt;           // attribute data type
    137            uint16  timeSinceLastReport;
    138            bdbAttrLinkedListAttr_t attrLinkedList;
    139          } bdbReportAttrClusterEndpoint_t;   
    140          
    141          
    142          //This structure serves to hold the flags data of a bdbReportAttrClusterEndpoint_t 
    143          //with key =(endpoint,cluster) in instance of the bdb reporting where the table is regenerated
    144          typedef struct
    145          {
    146            uint8 flags;
    147            uint8  endpoint;            
    148            uint16  cluster;
    149          } bdbReportFlagsHolder_t;
    150          
    151          //This structure holds the data of a default attribute reporting configuration
    152          //entered by the application
    153          typedef struct
    154          {
    155            uint8 endpoint; 
    156            uint16 cluster; 
    157            uint16 attrID;
    158            uint16 minReportInt;
    159            uint16 maxReportInt;
    160            uint8  reportableChange[BDBREPORTING_MAX_ANALOG_ATTR_SIZE];
    161          } bdbReportAttrDefaultCfgData_t;
    162             
    163          //This structure represents a node in the linked list of the default attributes 
    164          //configurations entered by the application
    165          typedef struct bdbRepAttrDefaultCfgRecordLinkedListItem
    166          {
    167            bdbReportAttrDefaultCfgData_t* data;
    168            struct bdbRepAttrDefaultCfgRecordLinkedListItem *next;
    169          } bdbRepAttrDefaultCfgRecordLinkedListItem_t;
    170          
    171          //This structure represents the linked list of the default attributes 
    172          //configurations entered by the application
    173          typedef struct bdbRepAttrDefaultCfgRecordLinkedList
    174          {
    175            uint8 numItems;
    176            bdbRepAttrDefaultCfgRecordLinkedListItem_t *head;
    177          } bdbRepAttrDefaultCfgRecordLinkedList_t;
    178          
    179          
    180          
    181          /*********************************************************************
    182           * GLOBAL VARIABLES
    183           */
    184          
    185          /*********************************************************************
    186           * EXTERNAL VARIABLES
    187           */
    188          
    189          /*********************************************************************
    190           * EXTERNAL FUNCTIONS
    191           */
    192          
    193          /*********************************************************************
    194           * LOCAL VARIABLES
    195           */
    196          
    197          //Table of cluster-endpoint entries used to report periodically

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    198          bdbReportAttrClusterEndpoint_t bdb_reportingClusterEndpointArray[BDB_MAX_CLUSTERENDPOINTS_REPORTING];
   \                     bdb_reportingClusterEndpointArray:
   \   000000                DS 65
   \   000041                REQUIRE __INIT_XDATA_Z
    199          //Current size of the cluster-endpoint table  

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    200          uint8 bdb_reportingClusterEndpointArrayCount;
   \                     bdb_reportingClusterEndpointArrayCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    201          //This variable has the timeout value of the currrent timer use to report peridically

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    202          uint16 bdb_reportingNextEventTimeout;
   \                     bdb_reportingNextEventTimeout:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    203          //This variable hasthe index of the cluster-endpoint entry that trigger the current
    204          //timer use to report periodically 

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    205          uint8 bdb_reportingNextClusterEndpointIndex;
   \                     bdb_reportingNextClusterEndpointIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    206          //This is the table that holds in the memory the attribute reporting configurations (dynamic table)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    207          bdbReportAttrCfgData_t* bdb_reportingAttrCfgRecordsArray;
   \                     bdb_reportingAttrCfgRecordsArray:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    208          //Current size of the attribute reporting configurations table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    209          uint8 bdb_reportingAttrCfgRecordsArrayCount;
   \                     bdb_reportingAttrCfgRecordsArrayCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    210          //Max size of the attribute reporting configurations table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    211          uint8 bdb_reportingAttrCfgRecordsArrayMaxSize;
   \                     bdb_reportingAttrCfgRecordsArrayMaxSize:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    212          //Linked list for holding the default attribute reporting configurations
    213          //enteres by the application

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    214          bdbRepAttrDefaultCfgRecordLinkedList_t attrDefaultCfgRecordLinkedList;
   \                     attrDefaultCfgRecordLinkedList:
   \   000000                DS 3
   \   000003                REQUIRE __INIT_XDATA_Z
    215          //Flag used to signal when not to accept more default attribute reporting configurations

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    216          uint8 bdb_reportingAcceptDefaultConfs;
   \                     bdb_reportingAcceptDefaultConfs:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    217          
    218          /*********************************************************************
    219           * PUBLIC FUNCTIONS PROTOYPES
    220           */
    221          
    222          /*********************************************************************
    223           * LOCAL FUNCTIONS PROTOYPES
    224           */
    225          
    226          //Begin: Single linked list for attributes in a cluster-endpoint live entry methods 
    227          static void bdb_InitReportAttrLiveValues( bdbReportAttrLive_t* item );
    228          static void bdb_linkedListAttrInit( bdbAttrLinkedListAttr_t *list );
    229          static uint8 bdb_linkedListAttrAdd( bdbAttrLinkedListAttr_t *list, bdbReportAttrLive_t* data );
    230          static bdbLinkedListAttrItem_t* bdb_linkedListAttrSearch( bdbAttrLinkedListAttr_t *list, bdbReportAttrLive_t* searchdata );
    231          static bdbReportAttrLive_t* bdb_linkedListAttrRemove( bdbAttrLinkedListAttr_t *list );
    232          static uint8 bdb_linkedListAttrFreeAll( bdbAttrLinkedListAttr_t *list );
    233          static void bdb_linkedListAttrClearList( bdbAttrLinkedListAttr_t *list );
    234          static bdbLinkedListAttrItem_t* bdb_linkedListAttrGetAtIndex( bdbAttrLinkedListAttr_t *list, uint8 index );
    235          //End: Single Linked List methods
    236          
    237          //Begin: Cluster-endpoint array live methods
    238          static void bdb_clusterEndpointArrayInit( void );
    239          static uint8 bdb_clusterEndpointArrayAdd( uint8 endpoint, uint16 cluster, uint16 consolidatedMinReportInt, uint16 consolidatedMaxReportInt, uint16 timeSinceLastReport );
    240          static uint8 bdb_clusterEndpointArrayGetMin( void );
    241          static void bdb_clusterEndpointArrayMoveTo( uint8 indexSrc, uint8 indexDest );
    242          static uint8 bdb_clusterEndpointArrayUpdateAt( uint8 index, uint16 newTimeSinceLastReport, uint8 markHasBinding, uint8 noNextIncrement );
    243          static void bdb_clusterEndpointArrayFreeAll( void );
    244          static uint8 bdb_clusterEndpointArraySearch( uint8 endpoint, uint16 cluster );
    245          static uint8 bdb_clusterEndpointArrayRemoveAt( uint8 index );
    246          static void bdb_clusterEndpointArrayIncrementAll( uint16 timeSinceLastReportIncrement, uint8 CheckNoIncrementFlag );
    247          //End: Cluster-endpoint array live methods
    248          
    249          //Begin: Single linked list default attr cfg records methods
    250          static void bdb_repAttrDefaultCfgRecordInitValues( bdbReportAttrDefaultCfgData_t* item );
    251          static void bdb_repAttrDefaultCfgRecordsLinkedListInit( bdbRepAttrDefaultCfgRecordLinkedList_t *list );
    252          static uint8 bdb_repAttrDefaultCfgRecordsLinkedListAdd( bdbRepAttrDefaultCfgRecordLinkedList_t *list, bdbReportAttrDefaultCfgData_t* data );
    253          static bdbRepAttrDefaultCfgRecordLinkedListItem_t* bdb_repAttrDefaultCfgRecordsLinkedListSearch( bdbRepAttrDefaultCfgRecordLinkedList_t *list, 
    254                                                                                                          bdbReportAttrDefaultCfgData_t searchdata );
    255          static bdbReportAttrDefaultCfgData_t* bdb_repAttrDefaultCfgRecordsLinkedListRemove( bdbRepAttrDefaultCfgRecordLinkedList_t *list );
    256          static uint8 bdb_repAttrDefaultCfgRecordsLinkedListFreeAll( bdbRepAttrDefaultCfgRecordLinkedList_t *list );
    257          //End: Single linked list default attr cfg records methods
    258          
    259          //Begin: Reporting attr configuration array methods
    260          static void bdb_repAttrCfgRecordsArrayInit( void );
    261          static uint8 bdb_repAttrCfgRecordsArrayCreate( uint8 maxNumRepAttrConfRecords );
    262          static uint8 bdb_repAttrCfgRecordsArrayAdd( uint8 endpoint, uint16 cluster, uint16 attrID, uint16 minReportInt, 
    263                                                     uint16 maxReportInt, uint8  reportableChange[], uint16 defMinReportInt, uint16 defMaxReportInt, uint8 defReportChange[] );
    264          static void bdb_repAttrCfgRecordsArrayFreeAll( void );
    265          static uint8 bdb_repAttrCfgRecordsArraySearch( uint8 endpoint, uint16 cluster, uint16 attrID );
    266          static uint8 bdb_repAttrCfgRecordsArrayConsolidateValues( uint8 endpoint, uint16 cluster,  uint16* consolidatedMinReportInt, uint16* consolidatedMaxReportInt );
    267          //End: Reporting attr configuration array methods
    268          
    269          
    270          static uint8 bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray( void );
    271          static uint8 bdb_RepConstructAttrCfgArray( void );
    272          static void bdb_RepInitAttrCfgRecords( void );
    273          
    274          static endPointDesc_t* bdb_FindEpDesc( uint8 endPoint );
    275          static uint8 bdb_RepFindAttrEntry( uint8 endpoint, uint16 cluster, uint16 attrID, zclAttribute_t* attrRes );
    276          static uint8 bdb_RepLoadCfgRecords( void );
    277          static uint8 bdb_isAttrValueChangedSurpassDelta( uint8 datatype, uint8* delta, uint8* curValue, uint8* lastValue );
    278          static uint16 bdb_RepCalculateEventElapsedTime( uint32 remainingTimeoutTimer, uint16 nextEventTimeout );
    279          static void bdb_RepRestartNextEventTimer( void );
    280          
    281          static void bdb_RepStartReporting( void );
    282          static void bdb_RepStopEventTimer( void );
    283          static void bdb_RepSetupReporting( void );
    284          static void bdb_RepReport( uint8 indexClusterEndpoint );
    285          
    286          extern zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint ); //Definition is located in zcl.h
    287          
    288          /*********************************************************************
    289           * PUBLIC FUNCTIONS DEFINITIONS
    290           */
    291          
    292           /*********************************************************************
    293           * @fn          bdb_RepInit
    294           *
    295           * @brief       Initiates the tables and linked list used in the reporting code.
    296           *
    297           * @param       none
    298           *
    299           * @return      none
    300           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    301          void bdb_RepInit( void )
   \                     bdb_RepInit:
    302          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    303            bdb_reportingNextEventTimeout = 0;
   \   000004   90....       MOV     DPTR,#bdb_reportingNextEventTimeout
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
    304            bdb_reportingAcceptDefaultConfs = BDBREPORTING_TRUE;
   \   00000B   90....       MOV     DPTR,#bdb_reportingAcceptDefaultConfs
   \   00000E   04           INC     A
   \   00000F   F0           MOVX    @DPTR,A
    305            bdb_repAttrCfgRecordsArrayInit( );
   \   000010   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArray
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   F0           MOVX    @DPTR,A
   \   000017   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   00001A   F0           MOVX    @DPTR,A
    306            bdb_repAttrDefaultCfgRecordsLinkedListInit( &attrDefaultCfgRecordLinkedList );
   \   00001B   90....       MOV     DPTR,#attrDefaultCfgRecordLinkedList + 1
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   F0           MOVX    @DPTR,A
   \   000021   90....       MOV     DPTR,#attrDefaultCfgRecordLinkedList
   \   000024   F0           MOVX    @DPTR,A
    307            bdb_clusterEndpointArrayInit( );
   \   000025   90....       MOV     DPTR,#bdb_reportingClusterEndpointArrayCount
   \   000028   02....       LJMP    ?Subroutine0 & 0xFFFF
    308          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine89_0
   \   000001                ; // Fall through to label ??Subroutine89_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine89_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    309          
    310           /*********************************************************************
    311           * @fn          bdb_RepConstructReportingData
    312           *
    313           * @brief       Creates the attr reporting configurations by looking at 
    314           *              the app endpoints, cluster and attr definitions or loads 
    315           *              from NV the previous configurations.
    316           *
    317           * @param       none
    318           *
    319           * @return      none
    320           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    321          void bdb_RepConstructReportingData( void )
   \                     bdb_RepConstructReportingData:
    322          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    323            //Don't accept anymore default attribute configurations entries
    324            bdb_reportingAcceptDefaultConfs = BDBREPORTING_FALSE;
   \   000004   90....       MOV     DPTR,#bdb_reportingAcceptDefaultConfs
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
    325            //Construct the attr cfg records
    326            bdb_RepInitAttrCfgRecords( );
   \   000009                ; Setup parameters for call to function bdb_RepInitAttrCfgRecords
   \   000009   12....       LCALL   `??bdb_RepInitAttrCfgRecords::?relay`; Banked call to: bdb_RepInitAttrCfgRecords
    327            //Construct the endpoint-cluster array
    328            bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray( );
   \   00000C                ; Setup parameters for call to function bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray
   \   00000C   12....       LCALL   ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo; Banked call to: bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray
    329            //Delete reporting configuration array, it's saved in NV
    330            bdb_repAttrCfgRecordsArrayFreeAll( ); 
   \   00000F                ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayFreeAll
   \   00000F   12....       LCALL   `??bdb_repAttrCfgRecordsArrayFreeAll::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayFreeAll
    331          }
   \   000012   02....       LJMP    ??Subroutine89_0 & 0xFFFF
    332          
    333           /*********************************************************************
    334           * @fn          bdb_RepMarkHasBindingInEndpointClusterArray
    335           *
    336           * @brief       Marks the binding flag as ON at the entry containig the 
    337           *              cluster-endpoint pair.
    338           *
    339           * @param       endpoint - endpoint id of the entry to locate
    340           * @param       cluster - cluster id of the entry to locate
    341           *
    342           * @return      none
    343           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    344          void bdb_RepMarkHasBindingInEndpointClusterArray( uint8 endpoint, uint16 cluster, uint8 unMark, uint8 setNoNextIncrementFlag )
   \                     bdb_RepMarkHasBindingInEndpointClusterArray:
    345          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0,R4
   \   000007   ED           MOV     A,R5
   \   000008   FE           MOV     R6,A
    346            uint8 foundIndex;
    347            if( bdb_reportingClusterEndpointArrayCount > 0 )
   \   000009   90....       MOV     DPTR,#bdb_reportingClusterEndpointArrayCount
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6021         JZ      ??bdb_RepMarkHasBindingInEndpointClusterArray_0
    348            {
    349              foundIndex = bdb_clusterEndpointArraySearch( endpoint, cluster );
   \   00000F                ; Setup parameters for call to function bdb_clusterEndpointArraySearch
   \   00000F   12....       LCALL   `??bdb_clusterEndpointArraySearch::?relay`; Banked call to: bdb_clusterEndpointArraySearch
   \   000012   E9           MOV     A,R1
   \   000013   F9           MOV     R1,A
    350              if( foundIndex != BDBREPORTING_INVALIDINDEX )
   \   000014   74FF         MOV     A,#-0x1
   \   000016   69           XRL     A,R1
   \   000017   6017         JZ      ??bdb_RepMarkHasBindingInEndpointClusterArray_0
    351              {
    352                if( unMark == BDBREPORTING_TRUE )
   \   000019   7401         MOV     A,#0x1
   \   00001B   65..         XRL     A,?V0
   \   00001D   7006         JNZ     ??bdb_RepMarkHasBindingInEndpointClusterArray_1
    353                {
    354                  bdb_clusterEndpointArrayUpdateAt( foundIndex, 0, BDBREPORTING_FALSE, setNoNextIncrementFlag );
   \   00001F                ; Setup parameters for call to function bdb_clusterEndpointArrayUpdateAt
   \   00001F   EE           MOV     A,R6
   \   000020   FD           MOV     R5,A
   \   000021   7C00         MOV     R4,#0x0
   \   000023   8004         SJMP    ??bdb_RepMarkHasBindingInEndpointClusterArray_2
    355                }
    356                else
    357                {
    358                  bdb_clusterEndpointArrayUpdateAt( foundIndex, 0, BDBREPORTING_TRUE, setNoNextIncrementFlag );
   \                     ??bdb_RepMarkHasBindingInEndpointClusterArray_1:
   \   000025                ; Setup parameters for call to function bdb_clusterEndpointArrayUpdateAt
   \   000025   EE           MOV     A,R6
   \   000026   FD           MOV     R5,A
   \   000027   7C01         MOV     R4,#0x1
   \                     ??bdb_RepMarkHasBindingInEndpointClusterArray_2:
   \   000029   7A00         MOV     R2,#0x0
   \   00002B   7B00         MOV     R3,#0x0
   \   00002D   12....       LCALL   `??bdb_clusterEndpointArrayUpdateAt::?relay`; Banked call to: bdb_clusterEndpointArrayUpdateAt
    359                }
    360              }
    361            }
    362          }
   \                     ??bdb_RepMarkHasBindingInEndpointClusterArray_0:
   \   000030   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    363          
    364           /*********************************************************************
    365           * @fn          bdb_RepStartReporting
    366           *
    367           * @brief       Restarts the periodic reporting timer, if the timer was already
    368           *              running it stops it and to before starting timer sets some state 
    369           *              variables.
    370           *
    371           * @return      none
    372           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    373          static void bdb_RepStartReporting( void )
   \                     bdb_RepStartReporting:
    374          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    375            //Stop if reporting timer is active
    376            if( !osal_get_timeoutEx( bdb_TaskID, BDB_REPORT_TIMEOUT ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A80         MOV     R2,#-0x80
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#bdb_TaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   4C           ORL     A,R4
   \   000013   4D           ORL     A,R5
   \   000014   701C         JNZ     ??bdb_RepStartReporting_0
    377            {
    378              //timerElapsedTime is zero
    379              osal_stop_timerEx( bdb_TaskID, BDB_REPORT_TIMEOUT );
   \   000016                ; Setup parameters for call to function osal_stop_timerEx
   \   000016   7A80         MOV     R2,#-0x80
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   90....       MOV     DPTR,#bdb_TaskID
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F9           MOV     R1,A
   \   00001F   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    380              bdb_reportingNextEventTimeout = 0;
   \   000022   90....       MOV     DPTR,#bdb_reportingNextEventTimeout
   \   000025   E4           CLR     A
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   F0           MOVX    @DPTR,A
    381              bdb_reportingNextClusterEndpointIndex = BDBREPORTING_INVALIDINDEX;
   \   000029   90....       MOV     DPTR,#bdb_reportingNextClusterEndpointIndex
   \   00002C   74FF         MOV     A,#-0x1
   \   00002E   F0           MOVX    @DPTR,A
    382              //Start Timer
    383              bdb_RepRestartNextEventTimer( );
   \   00002F                ; Setup parameters for call to function bdb_RepRestartNextEventTimer
   \   00002F   12....       LCALL   `??bdb_RepRestartNextEventTimer::?relay`; Banked call to: bdb_RepRestartNextEventTimer
    384            }
    385          }
   \                     ??bdb_RepStartReporting_0:
   \   000032   02....       LJMP    ??Subroutine89_0 & 0xFFFF
    386          
    387           /*********************************************************************
    388           * @fn          bdb_RepStartOrContinueReporting
    389           *
    390           * @brief       Restarts the periodic reporting timer, if the timer was already
    391           *              running it calculates the remaining time of timer before stopping it,
    392           *              then sustracts this elapsed time from the next event endpoint-cluster 
    393           *              table.
    394           *
    395           * @return      none
    396           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    397          void bdb_RepStartOrContinueReporting( void )
   \                     bdb_RepStartOrContinueReporting:
    398          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    399            //Stop if reporting timer is active
    400            uint32 remainingTimeOfEvent = osal_get_timeoutEx( bdb_TaskID, BDB_REPORT_TIMEOUT );
   \   000005                ; Setup parameters for call to function osal_get_timeoutEx
   \   000005   7A80         MOV     R2,#-0x80
   \   000007   7B00         MOV     R3,#0x0
   \   000009   90....       MOV     DPTR,#bdb_TaskID
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000011   8B..         MOV     ?V1,R3
   \   000013   8C..         MOV     ?V2,R4
   \   000015   8D..         MOV     ?V3,R5
    401            if( remainingTimeOfEvent == 0 )
   \   000017   EA           MOV     A,R2
   \   000018   45..         ORL     A,?V1
   \   00001A   45..         ORL     A,?V2
   \   00001C   45..         ORL     A,?V3
   \   00001E   601E         JZ      ??bdb_RepStartOrContinueReporting_0
    402            {
    403              //Timer was not running
    404              bdb_RepStartReporting( );
   \   000020                ; Setup parameters for call to function bdb_RepStartReporting
    405            }
    406            else
    407            {
    408              uint16 elapsedTime = bdb_RepCalculateEventElapsedTime( remainingTimeOfEvent, bdb_reportingNextEventTimeout );
   \   000020                ; Setup parameters for call to function bdb_RepCalculateEventElapsedTime
   \   000020   90....       MOV     DPTR,#bdb_reportingNextEventTimeout
   \   000023   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000026   12....       LCALL   `??bdb_RepCalculateEventElapsedTime::?relay`; Banked call to: bdb_RepCalculateEventElapsedTime
   \   000029   7402         MOV     A,#0x2
   \   00002B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002E   8A..         MOV     ?V0,R2
   \   000030   8B..         MOV     ?V1,R3
    409              bdb_RepStopEventTimer( );
   \   000032                ; Setup parameters for call to function bdb_RepStopEventTimer
   \   000032   12....       LCALL   `??bdb_RepStopEventTimer::?relay`; Banked call to: bdb_RepStopEventTimer
    410              
    411              bdb_clusterEndpointArrayIncrementAll( elapsedTime, BDBREPORTING_TRUE );
   \   000035                ; Setup parameters for call to function bdb_clusterEndpointArrayIncrementAll
   \   000035   7901         MOV     R1,#0x1
   \   000037   AA..         MOV     R2,?V0
   \   000039   AB..         MOV     R3,?V1
   \   00003B   12....       LCALL   `??bdb_clusterEndpointArrayIncrementAll::?relay`; Banked call to: bdb_clusterEndpointArrayIncrementAll
    412              bdb_RepStartReporting( );
   \   00003E                ; Setup parameters for call to function bdb_RepStartReporting
   \                     ??bdb_RepStartOrContinueReporting_0:
   \   00003E   12....       LCALL   `??bdb_RepStartReporting::?relay`; Banked call to: bdb_RepStartReporting
    413            }
    414            
    415          }
   \   000041                REQUIRE ?Subroutine2
   \   000041                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    416          
    417           /*********************************************************************
    418           * @fn          bdb_RepCalculateEventElapsedTime
    419           *
    420           * @brief       Calculate the elapsed time of the currently running timer, 
    421           *              the remaining time is roundup.
    422           *
    423           * @param       remainingTimeoutTimer - timeout value from the osal_get_timeoutEx method, 
    424           *              its in milliseconds units
    425           * @param       nextEventTimeout - the timeout given to the timer when it started
    426           *
    427           * @return      the elapsed time in seconds
    428           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    429          static uint16 bdb_RepCalculateEventElapsedTime( uint32 remainingTimeoutTimer, uint16 nextEventTimeout )
   \                     bdb_RepCalculateEventElapsedTime:
    430          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V8,R2
   \   000007   8B..         MOV     ?V9,R3
   \   000009   8C..         MOV     ?V10,R4
   \   00000B   8D..         MOV     ?V11,R5
    431            uint32 passTimeOfEvent = 0;
   \   00000D   75..00       MOV     ?V4,#0x0
   \   000010   75..00       MOV     ?V5,#0x0
   \   000013   75..00       MOV     ?V6,#0x0
   \   000016   75..00       MOV     ?V7,#0x0
   \   000019   7414         MOV     A,#0x14
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   12....       LCALL   ?Subroutine29 & 0xFFFF
    432            passTimeOfEvent = nextEventTimeout*1000 >= remainingTimeoutTimer? nextEventTimeout*1000 - remainingTimeoutTimer: 0;
   \                     ??CrossCallReturnLabel_34:
   \   000021   E5..         MOV     A,?V0
   \   000023   75F0E8       MOV     B,#-0x18
   \   000026   A4           MUL     AB
   \   000027   C5..         XCH     A,?V0
   \   000029   A8F0         MOV     R0,B
   \   00002B   75F003       MOV     B,#0x3
   \   00002E   A4           MUL     AB
   \   00002F   28           ADD     A,R0
   \   000030   F8           MOV     R0,A
   \   000031   75F0E8       MOV     B,#-0x18
   \   000034   E5..         MOV     A,?V1
   \   000036   A4           MUL     AB
   \   000037   28           ADD     A,R0
   \   000038   F5..         MOV     ?V1,A
   \   00003A   E4           CLR     A
   \   00003B   F5..         MOV     ?V2,A
   \   00003D   F5..         MOV     ?V3,A
   \   00003F   78..         MOV     R0,#?V8
   \   000041   79..         MOV     R1,#?V0
   \   000043   12....       LCALL   ?UL_GT
   \   000046   400D         JC      ??bdb_RepCalculateEventElapsedTime_0
   \   000048   85....       MOV     ?V4,?V0
   \   00004B   85....       MOV     ?V5,?V1
   \   00004E   78..         MOV     R0,#?V4
   \   000050   79..         MOV     R1,#?V8
   \   000052   12....       LCALL   ?L_SUB
    433            uint16 elapsedTime = passTimeOfEvent / 1000;
   \                     ??bdb_RepCalculateEventElapsedTime_0:
   \   000055   85....       MOV     ?V0,?V4
   \   000058   85....       MOV     ?V1,?V5
   \   00005B   85....       MOV     ?V2,?V6
   \   00005E   85....       MOV     ?V3,?V7
   \   000061   90....       MOV     DPTR,#__Constant_3e8
   \   000064   78..         MOV     R0,#?V8
   \   000066   12....       LCALL   ?L_MOV_X
   \   000069   78..         MOV     R0,#?V0
   \   00006B   79..         MOV     R1,#?V8
   \   00006D   12....       LCALL   ?UL_DIV_MOD
   \   000070   AC..         MOV     R4,?V0
   \   000072   AD..         MOV     R5,?V1
    434            elapsedTime = elapsedTime + ((passTimeOfEvent % 1000) >0 ? 1:0); //roundup
   \   000074   90....       MOV     DPTR,#__Constant_3e8
   \   000077   78..         MOV     R0,#?V0
   \   000079   12....       LCALL   ?L_MOV_X
   \   00007C   78..         MOV     R0,#?V4
   \   00007E   79..         MOV     R1,#?V0
   \   000080   12....       LCALL   ?UL_DIV_MOD
   \   000083   E5..         MOV     A,?V0
   \   000085   45..         ORL     A,?V1
   \   000087   45..         ORL     A,?V2
   \   000089   45..         ORL     A,?V3
   \   00008B   6008         JZ      ??bdb_RepCalculateEventElapsedTime_1
   \   00008D   EC           MOV     A,R4
   \   00008E   2401         ADD     A,#0x1
   \   000090   FA           MOV     R2,A
   \   000091   E4           CLR     A
   \   000092   3D           ADDC    A,R5
   \   000093   8003         SJMP    ??bdb_RepCalculateEventElapsedTime_2
   \                     ??bdb_RepCalculateEventElapsedTime_1:
   \   000095   EC           MOV     A,R4
   \   000096   FA           MOV     R2,A
   \   000097   ED           MOV     A,R5
   \                     ??bdb_RepCalculateEventElapsedTime_2:
   \   000098   FB           MOV     R3,A
    435            return elapsedTime;  
   \   000099                REQUIRE ?Subroutine3
   \   000099                ; // Fall through to label ?Subroutine3
    436          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F0C         MOV     R7,#0xc
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   22           RET
    437          
    438           /*********************************************************************
    439           * @fn          bdb_RepProcessEvent
    440           *
    441           * @brief       Method that process the timer expired event in the reporting 
    442           *              code, it calculate the next cluster-endpoint entry based 
    443           *              on the minimum with consolidatedMaxReportInt - timeSinceLastReport,
    444           *              updates timeSinceLastReport of all entries. If the minimum is zero,
    445           *              report the cluster-endpoint attrs.
    446           *
    447           * @return      none
    448           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    449          void bdb_RepProcessEvent( void )
   \                     bdb_RepProcessEvent:
    450          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    451            bdb_clusterEndpointArrayIncrementAll( bdb_reportingNextEventTimeout, BDBREPORTING_FALSE );
   \   000005                ; Setup parameters for call to function bdb_clusterEndpointArrayIncrementAll
   \   000005   7900         MOV     R1,#0x0
   \   000007   90....       MOV     DPTR,#bdb_reportingNextEventTimeout
   \   00000A   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00000D   12....       LCALL   `??bdb_clusterEndpointArrayIncrementAll::?relay`; Banked call to: bdb_clusterEndpointArrayIncrementAll
    452            uint8 minIndex =  bdb_clusterEndpointArrayGetMin( );
   \   000010   7EFF         MOV     R6,#-0x1
   \   000012   7CFF         MOV     R4,#-0x1
   \   000014   7DFF         MOV     R5,#-0x1
   \   000016   7F00         MOV     R7,#0x0
   \   000018   8018         SJMP    ??bdb_RepProcessEvent_0
   \                     ??bdb_RepProcessEvent_1:
   \   00001A   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   00001D   EA           MOV     A,R2
   \   00001E   C3           CLR     C
   \   00001F   98           SUBB    A,R0
   \   000020   F8           MOV     R0,A
   \   000021   EB           MOV     A,R3
   \   000022   99           SUBB    A,R1
   \   000023   F9           MOV     R1,A
   \   000024   C3           CLR     C
   \   000025   E8           MOV     A,R0
   \   000026   9C           SUBB    A,R4
   \   000027   E9           MOV     A,R1
   \   000028   9D           SUBB    A,R5
   \   000029   5006         JNC     ??bdb_RepProcessEvent_2
   \   00002B   EF           MOV     A,R7
   \   00002C   FE           MOV     R6,A
   \   00002D   E8           MOV     A,R0
   \   00002E   FC           MOV     R4,A
   \   00002F   E9           MOV     A,R1
   \   000030   FD           MOV     R5,A
   \                     ??bdb_RepProcessEvent_2:
   \   000031   0F           INC     R7
   \                     ??bdb_RepProcessEvent_0:
   \   000032   90....       MOV     DPTR,#bdb_reportingClusterEndpointArrayCount
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F8           MOV     R0,A
   \   000037   EF           MOV     A,R7
   \   000038   C3           CLR     C
   \   000039   98           SUBB    A,R0
   \   00003A   5019         JNC     ??bdb_RepProcessEvent_3
   \   00003C   EF           MOV     A,R7
   \   00003D   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000040   50EF         JNC     ??bdb_RepProcessEvent_2
   \   000042   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000045   60EA         JZ      ??bdb_RepProcessEvent_2
   \   000047   74FF         MOV     A,#-0x1
   \   000049   6A           XRL     A,R2
   \   00004A   7003         JNZ     ??bdb_RepProcessEvent_4
   \   00004C   74FF         MOV     A,#-0x1
   \   00004E   6B           XRL     A,R3
   \                     ??bdb_RepProcessEvent_4:
   \   00004F   60E0         JZ      ??bdb_RepProcessEvent_2
   \   000051   EC           MOV     A,R4
   \   000052   4D           ORL     A,R5
   \   000053   70C5         JNZ     ??bdb_RepProcessEvent_1
    453            if( minIndex == BDBREPORTING_INVALIDINDEX )
   \                     ??bdb_RepProcessEvent_3:
   \   000055   74FF         MOV     A,#-0x1
   \   000057   6E           XRL     A,R6
   \   000058   604F         JZ      ??bdb_RepProcessEvent_5
    454            {
    455              return;
    456            }
    457             uint16 minVal = bdb_reportingClusterEndpointArray[minIndex].consolidatedMaxReportInt - bdb_reportingClusterEndpointArray[minIndex].timeSinceLastReport;
   \   00005A   EE           MOV     A,R6
   \   00005B   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00005E   8882         MOV     DPL,R0
   \   000060   8983         MOV     DPH,R1
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   C082         PUSH    DPL
   \   00006A   C083         PUSH    DPH
   \   00006C   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   00006F   D083         POP     DPH
   \   000071   D082         POP     DPL
   \   000073   E0           MOVX    A,@DPTR
   \   000074   C3           CLR     C
   \   000075   98           SUBB    A,R0
   \   000076   F8           MOV     R0,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   99           SUBB    A,R1
   \   00007A   F9           MOV     R1,A
    458             if( minVal>0 )
   \   00007B   E8           MOV     A,R0
   \   00007C   49           ORL     A,R1
   \   00007D   6009         JZ      ??bdb_RepProcessEvent_6
    459             { 
    460               bdb_reportingNextEventTimeout = minVal;
   \   00007F   90....       MOV     DPTR,#bdb_reportingNextEventTimeout
   \   000082   E8           MOV     A,R0
   \   000083   F0           MOVX    @DPTR,A
   \   000084   A3           INC     DPTR
   \   000085   E9           MOV     A,R1
   \   000086   801D         SJMP    ??bdb_RepProcessEvent_7
    461             }
    462             else
    463             {
    464               //Something was triggered, report clusterEndpoint with minIndex 
    465               bdb_reportingNextClusterEndpointIndex = minIndex;
   \                     ??bdb_RepProcessEvent_6:
   \   000088   EE           MOV     A,R6
   \   000089   90....       MOV     DPTR,#bdb_reportingNextClusterEndpointIndex
   \   00008C   F0           MOVX    @DPTR,A
    466               bdb_RepReport( BDBREPORTING_INVALIDINDEX );
   \   00008D                ; Setup parameters for call to function bdb_RepReport
   \   00008D   79FF         MOV     R1,#-0x1
   \   00008F   12....       LCALL   `??bdb_RepReport::?relay`; Banked call to: bdb_RepReport
    467               bdb_clusterEndpointArrayUpdateAt( minIndex, 0, BDBREPORTING_IGNORE, BDBREPORTING_IGNORE );
   \   000092                ; Setup parameters for call to function bdb_clusterEndpointArrayUpdateAt
   \   000092   7DFF         MOV     R5,#-0x1
   \   000094   7CFF         MOV     R4,#-0x1
   \   000096   7A00         MOV     R2,#0x0
   \   000098   7B00         MOV     R3,#0x0
   \   00009A   EE           MOV     A,R6
   \   00009B   F9           MOV     R1,A
   \   00009C   12....       LCALL   `??bdb_clusterEndpointArrayUpdateAt::?relay`; Banked call to: bdb_clusterEndpointArrayUpdateAt
    468               bdb_reportingNextEventTimeout = 0;  
   \   00009F   90....       MOV     DPTR,#bdb_reportingNextEventTimeout
   \   0000A2   E4           CLR     A
   \   0000A3   F0           MOVX    @DPTR,A
   \   0000A4   A3           INC     DPTR
   \                     ??bdb_RepProcessEvent_7:
   \   0000A5   F0           MOVX    @DPTR,A
    469             }
    470             bdb_RepRestartNextEventTimer( );
   \   0000A6                ; Setup parameters for call to function bdb_RepRestartNextEventTimer
   \   0000A6   12....       LCALL   `??bdb_RepRestartNextEventTimer::?relay`; Banked call to: bdb_RepRestartNextEventTimer
    471          }
   \                     ??bdb_RepProcessEvent_5:
   \   0000A9   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL   ??Subroutine94_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   75F00D       MOV     B,#0xd
   \   000003   A4           MUL     AB
   \   000004   F8           MOV     R0,A
   \   000005   A9F0         MOV     R1,B
   \   000007   74..         MOV     A,#bdb_reportingClusterEndpointArray & 0xff
   \   000009   28           ADD     A,R0
   \   00000A   F8           MOV     R0,A
   \   00000B   74..         MOV     A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
   \   00000D   39           ADDC    A,R1
   \   00000E   F9           MOV     R1,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine94_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A                REQUIRE ??Subroutine95_0
   \   00000A                ; // Fall through to label ??Subroutine95_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine95_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine96_0
   \   000001                ; // Fall through to label ??Subroutine96_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine96_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine97_0
   \   000001                ; // Fall through to label ??Subroutine97_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine97_0:
   \   000000   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    472          
    473          /*********************************************************************
    474           * @fn      bdb_ProcessInConfigReportCmd
    475           *
    476           * @brief   Process the "Profile" Configure Reporting Command
    477           *
    478           * @param   pInMsg - incoming message to process
    479           *
    480           * @return  TRUE if conditions are meet (attr found, memory available, etc.),
    481           *          FALSE if not
    482           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    483          uint8 bdb_ProcessInConfigReportCmd( zclIncomingMsg_t *pInMsg )
   \                     bdb_ProcessInConfigReportCmd:
    484          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   \   00000E                ; Setup parameters for call to function bdb_FindEpDesc
   \   00000E   EA           MOV     A,R2
   \   00000F   12....       LCALL   ?Subroutine57 & 0xFFFF
    485            zclCfgReportCmd_t *cfgReportCmd;
    486            zclCfgReportRec_t *reportRec;
    487            zclCfgReportRspCmd_t *cfgReportRspCmd;
    488            zclAttrRec_t attrRec;
    489            uint8 status = ZCL_STATUS_SUCCESS;
    490            uint8 i;
    491            uint8 iNumRspRecords;
    492          
    493            // Find Ep Descriptor
    494            endPointDesc_t* epDescriptor = bdb_FindEpDesc( pInMsg->endPoint );
    495            if( epDescriptor == NULL )
   \                     ??CrossCallReturnLabel_92:
   \   000012   12....       LCALL   `??bdb_FindEpDesc::?relay`; Banked call to: bdb_FindEpDesc
   \   000015   8B..         MOV     ?V1,R3
   \   000017   EA           MOV     A,R2
   \   000018   45..         ORL     A,?V1
   \   00001A   603F         JZ      ??bdb_ProcessInConfigReportCmd_0
    496            {
    497              return ( FALSE );
    498            }
    499            
    500            // get a pointer to the report configuration record
    501            cfgReportCmd = (zclCfgReportCmd_t *)pInMsg->attrCmd;
   \   00001C   E5..         MOV     A,?V2
   \   00001E   2417         ADD     A,#0x17
   \   000020   F582         MOV     DPL,A
   \   000022   E4           CLR     A
   \   000023   35..         ADDC    A,?V3
   \   000025   F583         MOV     DPH,A
   \   000027   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   00002A   85..82       MOV     DPL,?XSP + 0
   \   00002D   85..83       MOV     DPH,?XSP + 1
   \   000030   E8           MOV     A,R0
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   E9           MOV     A,R1
   \   000034   12....       LCALL   ?Subroutine9 & 0xFFFF
    502            
    503            if( cfgReportCmd->numAttr == 0 )
   \                     ??CrossCallReturnLabel_2:
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F5..         MOV     ?V0,A
   \   00003A   601F         JZ      ??bdb_ProcessInConfigReportCmd_0
    504            {
    505              return ( FALSE );
    506            }
    507            
    508            // Allocate space for the response command
    509            cfgReportRspCmd = (zclCfgReportRspCmd_t *)osal_mem_alloc( sizeof ( zclCfgReportRspCmd_t ) + 
    510                                                                      ( cfgReportCmd->numAttr * sizeof ( zclCfgReportStatus_t) ) );
   \   00003C                ; Setup parameters for call to function osal_mem_alloc
   \   00003C   75..00       MOV     ?V1,#0x0
   \   00003F   7402         MOV     A,#0x2
   \   000041   78..         MOV     R0,#?V0
   \   000043   12....       LCALL   ?S_SHL
   \   000046   E5..         MOV     A,?V0
   \   000048   2401         ADD     A,#0x1
   \   00004A   FA           MOV     R2,A
   \   00004B   E4           CLR     A
   \   00004C   35..         ADDC    A,?V1
   \   00004E   FB           MOV     R3,A
   \   00004F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000052   8A..         MOV     ?V8,R2
   \   000054   8B..         MOV     ?V9,R3
    511            if ( cfgReportRspCmd == NULL )
   \   000056   EA           MOV     A,R2
   \   000057   45..         ORL     A,?V9
   \   000059   7005         JNZ     ??bdb_ProcessInConfigReportCmd_1
    512            {
    513              return ( FALSE );
   \                     ??bdb_ProcessInConfigReportCmd_0:
   \   00005B   7900         MOV     R1,#0x0
   \   00005D   02....       LJMP    ??bdb_ProcessInConfigReportCmd_2 & 0xFFFF
    514            }
    515           
    516            //stop any attribute reporting
    517            bdb_RepStopEventTimer( );
   \                     ??bdb_ProcessInConfigReportCmd_1:
   \   000060                ; Setup parameters for call to function bdb_RepStopEventTimer
   \   000060   12....       LCALL   `??bdb_RepStopEventTimer::?relay`; Banked call to: bdb_RepStopEventTimer
    518            
    519            //Load cfg records from NV
    520            status = bdb_RepLoadCfgRecords( );
    521            if( status != BDBREPORTING_SUCCESS )
   \   000063                ; Setup parameters for call to function bdb_RepLoadCfgRecords
   \   000063   12....       LCALL   `??bdb_RepLoadCfgRecords::?relay`; Banked call to: bdb_RepLoadCfgRecords
   \   000066   E9           MOV     A,R1
   \   000067   6009         JZ      ??bdb_ProcessInConfigReportCmd_3
    522            {
    523              osal_mem_free( cfgReportRspCmd );
   \   000069                ; Setup parameters for call to function osal_mem_free
   \   000069   AA..         MOV     R2,?V8
   \   00006B   AB..         MOV     R3,?V9
   \   00006D   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000070   80E9         SJMP    ??bdb_ProcessInConfigReportCmd_0
    524              return ( FALSE );
    525            }
    526           
    527            // Process each Attribute Reporting Configuration record
    528            uint8 confchanged = BDBREPORTING_FALSE;
   \                     ??bdb_ProcessInConfigReportCmd_3:
   \   000072   75..00       MOV     ?V0,#0x0
    529            iNumRspRecords = 0;
   \   000075   75..00       MOV     ?V10,#0x0
    530            for ( i = 0; i < cfgReportCmd->numAttr; i++ )
   \   000078   75..00       MOV     ?V1,#0x0
   \   00007B   803C         SJMP    ??bdb_ProcessInConfigReportCmd_4
    531            {
    532              reportRec = &(cfgReportCmd->attrList[i]);
    533          
    534              status = ZCL_STATUS_SUCCESS;  // assume success for this rsp record
    535              
    536              uint8 atrrCfgRecordIndex =  bdb_repAttrCfgRecordsArraySearch( pInMsg->endPoint, pInMsg->clusterId, reportRec->attrID );
    537              uint8 status2 = zclFindAttrRec( pInMsg->endPoint, pInMsg->clusterId, reportRec->attrID, &attrRec );
    538              if( atrrCfgRecordIndex == BDBREPORTING_INVALIDINDEX || status2 == 0 )
    539              {
    540                //No cfg record found, 
    541                status = ZCL_STATUS_INVALID_VALUE;
    542              }
    543              else
    544              {
    545                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
    546                {
    547                  if ( reportRec->dataType == attrRec.attr.dataType )
    548                  {
    549                    // This the attribute that is to be reported, for now pass all attrs
    550                    if ( attrRec.attr.accessControl & ACCESS_REPORTABLE )
    551                    {
    552                      if ( reportRec->minReportInt == BDBREPORTING_MININTERVAL_DEFAULT && reportRec->maxReportInt == BDBREPORTING_MAXINTERVAL_DEFAULT )
    553                      {
    554                        //Set the saved default configuration
    555                        confchanged = BDBREPORTING_TRUE;
    556                        bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].minReportInt = bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].defaultMinReportInt;
    557                        bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].maxReportInt = bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].defaultMaxReportInt;
    558                        osal_memset( bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].reportableChange, 0x00, BDBREPORTING_MAX_ANALOG_ATTR_SIZE );
    559                        osal_memcpy( bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].reportableChange, bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].defaultReportableChange, BDBREPORTING_MAX_ANALOG_ATTR_SIZE );
    560                        status = ZCL_STATUS_SUCCESS;  
    561                      }
    562                      else
    563                      {
    564                        // valid configuration, change values
    565                        confchanged = BDBREPORTING_TRUE;
    566                        bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].minReportInt = reportRec->minReportInt;
    567                        bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].maxReportInt = reportRec->maxReportInt;
    568                        // For attributes of 'discrete' data types this field is omitted
    569                        if ( zclAnalogDataType( reportRec->dataType ) )
    570                        {
    571                          osal_memset( bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].reportableChange, 0x00, BDBREPORTING_MAX_ANALOG_ATTR_SIZE );
    572                          osal_memcpy( bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].reportableChange, reportRec->reportableChange, zclGetDataTypeLength( reportRec->dataType ) );
    573                        }
    574                        status = ZCL_STATUS_SUCCESS;             
    575                      }
    576                    }
    577                    else
    578                    {
    579                      // Attribute cannot be reported
    580                      status = ZCL_STATUS_UNREPORTABLE_ATTRIBUTE;
    581                    }
    582                  }
    583                  else
    584                  {
    585                    // Attribute data type is incorrect
    586                    status = ZCL_STATUS_INVALID_DATA_TYPE;
   \                     ??bdb_ProcessInConfigReportCmd_5:
   \   00007D   798D         MOV     R1,#-0x73
    587                  }
    588                }
    589                // receiving reports
    590                else
    591                {
    592                  status = ZCL_STATUS_SUCCESS;
    593                }
    594              
    595              }
    596          
    597              // If not successful then record the status
    598              if ( status != ZCL_STATUS_SUCCESS )
    599              {
    600                cfgReportRspCmd->attrList[iNumRspRecords].status = status;
   \                     ??bdb_ProcessInConfigReportCmd_6:
   \   00007F   85....       MOV     ?V6,?V10
   \   000082   75..00       MOV     ?V7,#0x0
   \   000085   7402         MOV     A,#0x2
   \   000087   78..         MOV     R0,#?V6
   \   000089   12....       LCALL   ?S_SHL
   \   00008C   E5..         MOV     A,?V8
   \   00008E   25..         ADD     A,?V6
   \   000090   FA           MOV     R2,A
   \   000091   E5..         MOV     A,?V9
   \   000093   35..         ADDC    A,?V7
   \   000095   FB           MOV     R3,A
   \   000096   E9           MOV     A,R1
   \   000097   8A82         MOV     DPL,R2
   \   000099   8B83         MOV     DPH,R3
   \   00009B   A3           INC     DPTR
   \   00009C   F0           MOVX    @DPTR,A
    601                cfgReportRspCmd->attrList[iNumRspRecords].direction = reportRec->direction;
   \   00009D   85..82       MOV     DPL,?V4
   \   0000A0   85..83       MOV     DPH,?V5
   \   0000A3   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   F0           MOVX    @DPTR,A
    602                cfgReportRspCmd->attrList[iNumRspRecords].attrID = reportRec->attrID;
   \   0000A9   85..82       MOV     DPL,?V12
   \   0000AC   85..83       MOV     DPH,?V13
   \   0000AF   12....       LCALL   ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   0000B2   12....       LCALL   ??Subroutine101_0 & 0xFFFF
    603                ++iNumRspRecords;
   \                     ??CrossCallReturnLabel_217:
   \   0000B5   05..         INC     ?V10
    604              }
   \                     ??bdb_ProcessInConfigReportCmd_7:
   \   0000B7   05..         INC     ?V1
   \                     ??bdb_ProcessInConfigReportCmd_4:
   \   0000B9   85..82       MOV     DPL,?XSP + 0
   \   0000BC   85..83       MOV     DPH,?XSP + 1
   \   0000BF   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0000C2   F8           MOV     R0,A
   \   0000C3   E5..         MOV     A,?V1
   \   0000C5   C3           CLR     C
   \   0000C6   98           SUBB    A,R0
   \   0000C7   4003         JC      $+5
   \   0000C9   02....       LJMP    ??bdb_ProcessInConfigReportCmd_8 & 0xFFFF
   \   0000CC   E5..         MOV     A,?V1
   \   0000CE   75F00C       MOV     B,#0xc
   \   0000D1   A4           MUL     AB
   \   0000D2   F8           MOV     R0,A
   \   0000D3   A9F0         MOV     R1,B
   \   0000D5   85..82       MOV     DPL,?XSP + 0
   \   0000D8   85..83       MOV     DPH,?XSP + 1
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   28           ADD     A,R0
   \   0000DD   FA           MOV     R2,A
   \   0000DE   A3           INC     DPTR
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   39           ADDC    A,R1
   \   0000E1   8A82         MOV     DPL,R2
   \   0000E3   F583         MOV     DPH,A
   \   0000E5   A3           INC     DPTR
   \   0000E6   8582..       MOV     ?V4,DPL
   \   0000E9   8583..       MOV     ?V5,DPH
   \   0000EC   A3           INC     DPTR
   \   0000ED   8582..       MOV     ?V12,DPL
   \   0000F0   8583..       MOV     ?V13,DPH
   \   0000F3                ; Setup parameters for call to function bdb_repAttrCfgRecordsArraySearch
   \   0000F3   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000F6   12....       LCALL   `??bdb_repAttrCfgRecordsArraySearch::?relay`; Banked call to: bdb_repAttrCfgRecordsArraySearch
   \   0000F9   E9           MOV     A,R1
   \   0000FA   FE           MOV     R6,A
   \   0000FB                ; Setup parameters for call to function zclFindAttrRec
   \   0000FB   7402         MOV     A,#0x2
   \   0000FD   12....       LCALL   ?XSTACK_DISP100_8
   \   000100   88..         MOV     ?V6,R0
   \   000102   89..         MOV     ?V7,R1
   \   000104   78..         MOV     R0,#?V6
   \   000106   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000109   85..82       MOV     DPL,?V12
   \   00010C   85..83       MOV     DPH,?V13
   \   00010F   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000112   12....       LCALL   `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000115   7402         MOV     A,#0x2
   \   000117   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011A   E9           MOV     A,R1
   \   00011B   F8           MOV     R0,A
   \   00011C   74FF         MOV     A,#-0x1
   \   00011E   6E           XRL     A,R6
   \   00011F   6003         JZ      ??bdb_ProcessInConfigReportCmd_9
   \   000121   E8           MOV     A,R0
   \   000122   7005         JNZ     ??bdb_ProcessInConfigReportCmd_10
   \                     ??bdb_ProcessInConfigReportCmd_9:
   \   000124   7987         MOV     R1,#-0x79
   \   000126   02....       LJMP    ??bdb_ProcessInConfigReportCmd_6 & 0xFFFF
   \                     ??bdb_ProcessInConfigReportCmd_10:
   \   000129   85..82       MOV     DPL,?V4
   \   00012C   85..83       MOV     DPH,?V5
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   7085         JNZ     ??bdb_ProcessInConfigReportCmd_7
   \   000132   E5..         MOV     A,?V4
   \   000134   2403         ADD     A,#0x3
   \   000136   F5..         MOV     ?V6,A
   \   000138   E4           CLR     A
   \   000139   35..         ADDC    A,?V5
   \   00013B   F5..         MOV     ?V7,A
   \   00013D   85..82       MOV     DPL,?V6
   \   000140   F583         MOV     DPH,A
   \   000142   E0           MOVX    A,@DPTR
   \   000143   F8           MOV     R0,A
   \   000144   7406         MOV     A,#0x6
   \   000146   12....       LCALL   ?XSTACK_DISP0_8
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   68           XRL     A,R0
   \   00014B   6003         JZ      $+5
   \   00014D   02....       LJMP    ??bdb_ProcessInConfigReportCmd_5 & 0xFFFF
   \   000150   7407         MOV     A,#0x7
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   E0           MOVX    A,@DPTR
   \   000156   A2E2         MOV     C,0xE0 /* A   */.2
   \   000158   4003         JC      $+5
   \   00015A   02....       LJMP    ??bdb_ProcessInConfigReportCmd_11 & 0xFFFF
   \   00015D   EE           MOV     A,R6
   \   00015E   75F015       MOV     B,#0x15
   \   000161   A4           MUL     AB
   \   000162   FE           MOV     R6,A
   \   000163   AFF0         MOV     R7,B
   \   000165   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000168   2405         ADD     A,#0x5
   \   00016A   F8           MOV     R0,A
   \   00016B   E4           CLR     A
   \   00016C   3B           ADDC    A,R3
   \   00016D   F9           MOV     R1,A
   \   00016E   85..82       MOV     DPL,?V4
   \   000171   85..83       MOV     DPH,?V5
   \   000174   A3           INC     DPTR
   \   000175   A3           INC     DPTR
   \   000176   A3           INC     DPTR
   \   000177   A3           INC     DPTR
   \   000178   E0           MOVX    A,@DPTR
   \   000179   F5..         MOV     ?V12,A
   \   00017B   A3           INC     DPTR
   \   00017C   E0           MOVX    A,@DPTR
   \   00017D   F5..         MOV     ?V13,A
   \   00017F   E5..         MOV     A,?V4
   \   000181   2406         ADD     A,#0x6
   \   000183   FC           MOV     R4,A
   \   000184   E4           CLR     A
   \   000185   35..         ADDC    A,?V5
   \   000187   FD           MOV     R5,A
   \   000188   74FF         MOV     A,#-0x1
   \   00018A   65..         XRL     A,?V12
   \   00018C   7004         JNZ     ??bdb_ProcessInConfigReportCmd_12
   \   00018E   74FF         MOV     A,#-0x1
   \   000190   65..         XRL     A,?V13
   \                     ??bdb_ProcessInConfigReportCmd_12:
   \   000192   7063         JNZ     ??bdb_ProcessInConfigReportCmd_13
   \   000194   8C82         MOV     DPL,R4
   \   000196   8D83         MOV     DPH,R5
   \   000198   E0           MOVX    A,@DPTR
   \   000199   F5..         MOV     ?V14,A
   \   00019B   A3           INC     DPTR
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   F5..         MOV     ?V15,A
   \   00019F   E5..         MOV     A,?V14
   \   0001A1   45..         ORL     A,?V15
   \   0001A3   7052         JNZ     ??bdb_ProcessInConfigReportCmd_13
   \   0001A5   75..01       MOV     ?V0,#0x1
   \   0001A8   8A82         MOV     DPL,R2
   \   0001AA   8B83         MOV     DPH,R3
   \   0001AC   A3           INC     DPTR
   \   0001AD   A3           INC     DPTR
   \   0001AE   A3           INC     DPTR
   \   0001AF   A3           INC     DPTR
   \   0001B0   A3           INC     DPTR
   \   0001B1   A3           INC     DPTR
   \   0001B2   A3           INC     DPTR
   \   0001B3   A3           INC     DPTR
   \   0001B4   A3           INC     DPTR
   \   0001B5   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   0001B8   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0001BB   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   0001BE                ; Setup parameters for call to function osal_memset
   \   0001BE   7C04         MOV     R4,#0x4
   \   0001C0   7D00         MOV     R5,#0x0
   \   0001C2   7900         MOV     R1,#0x0
   \   0001C4   EA           MOV     A,R2
   \   0001C5   240D         ADD     A,#0xd
   \   0001C7   FA           MOV     R2,A
   \   0001C8   5001         JNC     ??bdb_ProcessInConfigReportCmd_14
   \   0001CA   0B           INC     R3
   \                     ??bdb_ProcessInConfigReportCmd_14:
   \   0001CB   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   0001CE   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0001D1   2411         ADD     A,#0x11
   \   0001D3   F5..         MOV     ?V4,A
   \   0001D5   E4           CLR     A
   \   0001D6   3B           ADDC    A,R3
   \   0001D7   F5..         MOV     ?V5,A
   \   0001D9   75..00       MOV     ?V6,#0x0
   \   0001DC   78..         MOV     R0,#?V4
   \   0001DE   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001E1   7C04         MOV     R4,#0x4
   \   0001E3   7D00         MOV     R5,#0x0
   \   0001E5   EA           MOV     A,R2
   \   0001E6   240D         ADD     A,#0xd
   \   0001E8   FA           MOV     R2,A
   \   0001E9   5001         JNC     ??bdb_ProcessInConfigReportCmd_15
   \   0001EB   0B           INC     R3
   \                     ??bdb_ProcessInConfigReportCmd_15:
   \   0001EC   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001EF   7403         MOV     A,#0x3
   \   0001F1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F4   02....       LJMP    ??bdb_ProcessInConfigReportCmd_7 & 0xFFFF
   \                     ??bdb_ProcessInConfigReportCmd_13:
   \   0001F7   75..01       MOV     ?V0,#0x1
   \   0001FA   8882         MOV     DPL,R0
   \   0001FC   8983         MOV     DPH,R1
   \   0001FE   E5..         MOV     A,?V12
   \   000200   F0           MOVX    @DPTR,A
   \   000201   A3           INC     DPTR
   \   000202   E5..         MOV     A,?V13
   \   000204   F0           MOVX    @DPTR,A
   \   000205   8C82         MOV     DPL,R4
   \   000207   8D83         MOV     DPH,R5
   \   000209   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   00020C                ; Setup parameters for call to function zclAnalogDataType
   \   00020C   85..82       MOV     DPL,?V6
   \   00020F   85..83       MOV     DPH,?V7
   \   000212   E0           MOVX    A,@DPTR
   \   000213   F9           MOV     R1,A
   \   000214   12....       LCALL   `??zclAnalogDataType::?relay`; Banked call to: zclAnalogDataType
   \   000217   E9           MOV     A,R1
   \   000218   7003         JNZ     $+5
   \   00021A   02....       LJMP    ??bdb_ProcessInConfigReportCmd_7 & 0xFFFF
   \   00021D                ; Setup parameters for call to function osal_memset
   \   00021D   7C04         MOV     R4,#0x4
   \   00021F   7D00         MOV     R5,#0x0
   \   000221   7900         MOV     R1,#0x0
   \   000223   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000226   240D         ADD     A,#0xd
   \   000228   FA           MOV     R2,A
   \   000229   5001         JNC     ??bdb_ProcessInConfigReportCmd_16
   \   00022B   0B           INC     R3
   \                     ??bdb_ProcessInConfigReportCmd_16:
   \   00022C   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   00022F                ; Setup parameters for call to function zclGetDataTypeLength
   \   00022F   85..82       MOV     DPL,?V6
   \   000232   85..83       MOV     DPH,?V7
   \   000235   E0           MOVX    A,@DPTR
   \   000236   F9           MOV     R1,A
   \   000237   12....       LCALL   `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
   \   00023A   E9           MOV     A,R1
   \   00023B   FC           MOV     R4,A
   \   00023C                ; Setup parameters for call to function osal_memcpy
   \   00023C   85..82       MOV     DPL,?V4
   \   00023F   85..83       MOV     DPH,?V5
   \   000242   A3           INC     DPTR
   \   000243   A3           INC     DPTR
   \   000244   A3           INC     DPTR
   \   000245   A3           INC     DPTR
   \   000246   A3           INC     DPTR
   \   000247   A3           INC     DPTR
   \   000248   A3           INC     DPTR
   \   000249   A3           INC     DPTR
   \   00024A   A3           INC     DPTR
   \   00024B   A3           INC     DPTR
   \   00024C   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00024F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000252   7D00         MOV     R5,#0x0
   \   000254   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArray
   \   000257   E0           MOVX    A,@DPTR
   \   000258   2E           ADD     A,R6
   \   000259   F8           MOV     R0,A
   \   00025A   A3           INC     DPTR
   \   00025B   E0           MOVX    A,@DPTR
   \   00025C   3F           ADDC    A,R7
   \   00025D   F9           MOV     R1,A
   \   00025E   E8           MOV     A,R0
   \   00025F   240D         ADD     A,#0xd
   \   000261   FA           MOV     R2,A
   \   000262   E4           CLR     A
   \   000263   39           ADDC    A,R1
   \   000264   FB           MOV     R3,A
   \   000265   8085         SJMP    ??bdb_ProcessInConfigReportCmd_15
   \                     ??bdb_ProcessInConfigReportCmd_11:
   \   000267   798C         MOV     R1,#-0x74
   \   000269   02....       LJMP    ??bdb_ProcessInConfigReportCmd_6 & 0xFFFF
    605          
    606            } // going through each attribute
    607          
    608            if( confchanged == BDBREPORTING_TRUE )
   \                     ??bdb_ProcessInConfigReportCmd_8:
   \   00026C   E5..         MOV     A,?V0
   \   00026E   6040         JZ      ??bdb_ProcessInConfigReportCmd_17
    609            {
    610             //Write new configs into NV
    611             status = osal_nv_item_init( ZCD_NV_BDBREPORTINGCONFIG, sizeof(bdbReportAttrCfgData_t)*bdb_reportingAttrCfgRecordsArrayCount, bdb_reportingAttrCfgRecordsArray );
    612             if( status == SUCCESS )
   \   000270                ; Setup parameters for call to function osal_nv_item_init
   \   000270   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArray
   \   000273   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000276   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000279   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00027C   7402         MOV     A,#0x2
   \   00027E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000281   E9           MOV     A,R1
   \   000282   7029         JNZ     ??bdb_ProcessInConfigReportCmd_18
    613             {
    614               //Overwrite values
    615               osal_nv_write( ZCD_NV_BDBREPORTINGCONFIG,0, sizeof(bdbReportAttrCfgData_t)*bdb_reportingAttrCfgRecordsArrayCount, bdb_reportingAttrCfgRecordsArray );
   \   000284                ; Setup parameters for call to function osal_nv_write
   \   000284   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArray
   \   000287   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00028A   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   00028D   E0           MOVX    A,@DPTR
   \   00028E   75F015       MOV     B,#0x15
   \   000291   A4           MUL     AB
   \   000292   F5..         MOV     ?V0,A
   \   000294   E5F0         MOV     A,B
   \   000296   F5..         MOV     ?V1,A
   \   000298   78..         MOV     R0,#?V0
   \   00029A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00029D   7C00         MOV     R4,#0x0
   \   00029F   7D00         MOV     R5,#0x0
   \   0002A1   7A56         MOV     R2,#0x56
   \   0002A3   7B00         MOV     R3,#0x0
   \   0002A5   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0002A8   7404         MOV     A,#0x4
   \   0002AA   12....       LCALL   ?DEALLOC_XSTACK8
    616             }
    617          
    618              bdb_RepSetupReporting( );
   \                     ??bdb_ProcessInConfigReportCmd_18:
   \   0002AD                ; Setup parameters for call to function bdb_RepSetupReporting
   \   0002AD   12....       LCALL   `??bdb_RepSetupReporting::?relay`; Banked call to: bdb_RepSetupReporting
    619            }
    620            
    621            // if no response records, then just say 1 with status of success
    622            cfgReportRspCmd->numAttr = iNumRspRecords;
   \                     ??bdb_ProcessInConfigReportCmd_17:
   \   0002B0   85..82       MOV     DPL,?V8
   \   0002B3   85..83       MOV     DPH,?V9
   \   0002B6   E5..         MOV     A,?V10
   \   0002B8   F0           MOVX    @DPTR,A
    623            if ( cfgReportRspCmd->numAttr == 0 )
   \   0002B9   700B         JNZ     ??bdb_ProcessInConfigReportCmd_19
    624            {
    625              // Since all attributes were configured successfully, include a single
    626              // attribute status record in the response command with the status field
    627              // set to SUCCESS and the attribute ID field and direction omitted.
    628              cfgReportRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   0002BB   A3           INC     DPTR
   \   0002BC   E4           CLR     A
   \   0002BD   F0           MOVX    @DPTR,A
    629              cfgReportRspCmd->numAttr = 1;
   \   0002BE   85..82       MOV     DPL,?V8
   \   0002C1   85..83       MOV     DPH,?V9
   \   0002C4   04           INC     A
   \   0002C5   F0           MOVX    @DPTR,A
    630            }
    631          
    632            // Send the response back
    633            zcl_SendConfigReportRspCmd( pInMsg->endPoint, &(pInMsg->srcAddr),
    634                                        pInMsg->clusterId, cfgReportRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR,
    635                                        true, pInMsg->zclHdr.transSeqNum );
   \                     ??bdb_ProcessInConfigReportCmd_19:
   \   0002C6                ; Setup parameters for call to function zcl_SendConfigReportRspCmd
   \   0002C6   85..82       MOV     DPL,?V2
   \   0002C9   85..83       MOV     DPH,?V3
   \   0002CC   A3           INC     DPTR
   \   0002CD   A3           INC     DPTR
   \   0002CE   A3           INC     DPTR
   \   0002CF   A3           INC     DPTR
   \   0002D0   A3           INC     DPTR
   \   0002D1   A3           INC     DPTR
   \   0002D2   E0           MOVX    A,@DPTR
   \   0002D3   F5..         MOV     ?V0,A
   \   0002D5   78..         MOV     R0,#?V0
   \   0002D7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002DA   75..01       MOV     ?V0,#0x1
   \   0002DD   78..         MOV     R0,#?V0
   \   0002DF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002E2   78..         MOV     R0,#?V0
   \   0002E4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002E7   78..         MOV     R0,#?V8
   \   0002E9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002EC   85..82       MOV     DPL,?V2
   \   0002EF   85..83       MOV     DPH,?V3
   \   0002F2   A3           INC     DPTR
   \   0002F3   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   0002F6   E5..         MOV     A,?V2
   \   0002F8   240A         ADD     A,#0xa
   \   0002FA   FA           MOV     R2,A
   \   0002FB   E4           CLR     A
   \   0002FC   35..         ADDC    A,?V3
   \   0002FE   FB           MOV     R3,A
   \   0002FF   E5..         MOV     A,?V2
   \   000301   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000304   12....       LCALL   `??zcl_SendConfigReportRspCmd::?relay`; Banked call to: zcl_SendConfigReportRspCmd
   \   000307   7405         MOV     A,#0x5
   \   000309   12....       LCALL   ?DEALLOC_XSTACK8
    636            osal_mem_free( cfgReportRspCmd );
   \   00030C                ; Setup parameters for call to function osal_mem_free
   \   00030C   AA..         MOV     R2,?V8
   \   00030E   AB..         MOV     R3,?V9
   \   000310   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    637          
    638            bdb_repAttrCfgRecordsArrayFreeAll( ); //Free reporting conf array from memory, its saved in NV
   \   000313                ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayFreeAll
   \   000313   12....       LCALL   `??bdb_repAttrCfgRecordsArrayFreeAll::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayFreeAll
    639          
    640            bdb_RepStartReporting( );
   \   000316                ; Setup parameters for call to function bdb_RepStartReporting
   \   000316   12....       LCALL   `??bdb_RepStartReporting::?relay`; Banked call to: bdb_RepStartReporting
    641          
    642            return ( TRUE ) ;
   \   000319   7901         MOV     R1,#0x1
   \                     ??bdb_ProcessInConfigReportCmd_2:
   \   00031B                REQUIRE ?Subroutine4
   \   00031B                ; // Fall through to label ?Subroutine4
    643          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   740A         MOV     A,#0xa
   \   000002                REQUIRE ??Subroutine77_0
   \   000002                ; // Fall through to label ??Subroutine77_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine77_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F10         MOV     R7,#0x10
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArray
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2E           ADD     A,R6
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   3F           ADDC    A,R7
   \   000009   FB           MOV     R3,A
   \   00000A                ; Setup parameters for call to function osal_memcpy
   \   00000A   EA           MOV     A,R2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000003   85..82       MOV     DPL,?V2
   \   000006   85..83       MOV     DPH,?V3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000011   E5..         MOV     A,?V2
   \   000013   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   2416         ADD     A,#0x16
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   35..         ADDC    A,?V3
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F9           MOV     R1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine86_0:
   \   000000   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   EA           MOV     A,R2
   \   000001   240B         ADD     A,#0xb
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3B           ADDC    A,R3
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000003                REQUIRE ??Subroutine90_0
   \   000003                ; // Fall through to label ??Subroutine90_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine90_0:
   \   000000   EC           MOV     A,R4
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   ED           MOV     A,R5
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   000003   E0           MOVX    A,@DPTR
   \   000004   75F015       MOV     B,#0x15
   \   000007   A4           MUL     AB
   \   000008   FC           MOV     R4,A
   \   000009   ADF0         MOV     R5,B
   \   00000B   7A56         MOV     R2,#0x56
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V5,A
   \   000007   75..00       MOV     ?V6,#0x0
   \   00000A   78..         MOV     R0,#?V4
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine94_0
   \   000003                ; // Fall through to label ??Subroutine94_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000003                REQUIRE ??Subroutine98_0
   \   000003                ; // Fall through to label ??Subroutine98_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine98_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine99_0
   \   000002                ; // Fall through to label ??Subroutine99_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine99_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine100_0
   \   000001                ; // Fall through to label ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine100_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine101_0
   \   000001                ; // Fall through to label ??Subroutine101_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine102_0
   \   000001                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine103_0
   \   000002                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine106_0
   \   000004                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine107_0
   \   000003                ; // Fall through to label ??Subroutine107_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET
    644          
    645          
    646          /*********************************************************************
    647           * @fn      bdb_ProcessInReadReportCfgCmd
    648           *
    649           * @brief   Process the "Profile" Read Reporting Configuration Command
    650           *
    651           * @param   pInMsg - incoming message to process
    652           *
    653           * @return  TRUE if conditions are meet (attr found, memory available, etc.) or FALSE
    654           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    655          uint8 bdb_ProcessInReadReportCfgCmd( zclIncomingMsg_t *pInMsg )
   \                     bdb_ProcessInReadReportCfgCmd:
    656          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
    657            zclReadReportCfgCmd_t *readReportCfgCmd;
    658            zclReadReportCfgRspCmd_t *readReportCfgRspCmd;
    659            zclReportCfgRspRec_t *reportRspRec;
    660            uint8 hdrLen;
    661            uint8 dataLen = 0;
   \   00000E   7F00         MOV     R7,#0x0
   \   000010                ; Setup parameters for call to function bdb_FindEpDesc
   \   000010   EA           MOV     A,R2
   \   000011   12....       LCALL   ??Subroutine78_0 & 0xFFFF
    662            zclAttrRec_t attrRec;
    663            uint8 i;
    664            uint8 reportChangeLen;
    665            uint8 status;
    666            
    667            // Find Ep Descriptor
    668            endPointDesc_t* epDescriptor = bdb_FindEpDesc( pInMsg->endPoint );
   \                     ??CrossCallReturnLabel_125:
   \   000014   12....       LCALL   `??bdb_FindEpDesc::?relay`; Banked call to: bdb_FindEpDesc
   \   000017   8A..         MOV     ?V0,R2
   \   000019   8B..         MOV     ?V1,R3
    669            if( epDescriptor==NULL )
   \   00001B   EA           MOV     A,R2
   \   00001C   45..         ORL     A,?V1
   \   00001E   7003         JNZ     $+5
   \   000020   02....       LJMP    ??bdb_ProcessInReadReportCfgCmd_0 & 0xFFFF
    670            {
    671              return ( FALSE ); // EMBEDDED RETURN
    672            }
    673            
    674            readReportCfgCmd = (zclReadReportCfgCmd_t *)pInMsg->attrCmd;
   \   000023   E5..         MOV     A,?V4
   \   000025   2417         ADD     A,#0x17
   \   000027   F582         MOV     DPL,A
   \   000029   E4           CLR     A
   \   00002A   35..         ADDC    A,?V5
   \   00002C   F583         MOV     DPH,A
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F5..         MOV     ?V12,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F5..         MOV     ?V13,A
    675            
    676            // Find out the response length (Reportable Change field is of variable length)
    677            for ( i = 0; i < readReportCfgCmd->numAttr; i++ )
   \   000035   7E00         MOV     R6,#0x0
   \   000037   E5..         MOV     A,?V4
   \   000039   2408         ADD     A,#0x8
   \   00003B   F5..         MOV     ?V14,A
   \   00003D   E4           CLR     A
   \   00003E   35..         ADDC    A,?V5
   \   000040   F5..         MOV     ?V15,A
   \   000042   805A         SJMP    ??bdb_ProcessInReadReportCfgCmd_1
    678            {
    679              // For supported attributes with 'analog' data type, find out the length of
    680              // the Reportable Change field
    681              if ( zclFindAttrRec( epDescriptor->endPoint, pInMsg->clusterId,
    682                                   readReportCfgCmd->attrList[i].attrID, &attrRec ) )
   \                     ??bdb_ProcessInReadReportCfgCmd_2:
   \   000044                ; Setup parameters for call to function zclFindAttrRec
   \   000044   7402         MOV     A,#0x2
   \   000046   12....       LCALL   ?XSTACK_DISP100_8
   \   000049   88..         MOV     ?V2,R0
   \   00004B   89..         MOV     ?V3,R1
   \   00004D   78..         MOV     R0,#?V2
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   EE           MOV     A,R6
   \   000053   75F003       MOV     B,#0x3
   \   000056   A4           MUL     AB
   \   000057   F8           MOV     R0,A
   \   000058   A9F0         MOV     R1,B
   \   00005A   E5..         MOV     A,?V12
   \   00005C   28           ADD     A,R0
   \   00005D   F582         MOV     DPL,A
   \   00005F   E5..         MOV     A,?V13
   \   000061   39           ADDC    A,R1
   \   000062   F583         MOV     DPH,A
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000069   85..82       MOV     DPL,?V0
   \   00006C   85..83       MOV     DPH,?V1
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F9           MOV     R1,A
   \   000071   12....       LCALL   `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000074   7402         MOV     A,#0x2
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
   \   000079   E9           MOV     A,R1
   \   00007A   6021         JZ      ??bdb_ProcessInReadReportCfgCmd_3
    683              {
    684                if ( zclAnalogDataType( attrRec.attr.dataType ) )
   \   00007C                ; Setup parameters for call to function zclAnalogDataType
   \   00007C   7406         MOV     A,#0x6
   \   00007E   12....       LCALL   ?XSTACK_DISP0_8
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F9           MOV     R1,A
   \   000083   12....       LCALL   `??zclAnalogDataType::?relay`; Banked call to: zclAnalogDataType
   \   000086   E9           MOV     A,R1
   \   000087   6014         JZ      ??bdb_ProcessInReadReportCfgCmd_3
    685                {
    686                   reportChangeLen = zclGetDataTypeLength( attrRec.attr.dataType );
   \   000089                ; Setup parameters for call to function zclGetDataTypeLength
   \   000089   7406         MOV     A,#0x6
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   F9           MOV     R1,A
   \   000090   12....       LCALL   `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
   \   000093   E9           MOV     A,R1
   \   000094   F8           MOV     R0,A
    687          
    688                   // add padding if needed
    689                   if ( PADDING_NEEDED( reportChangeLen ) )
   \   000095   A2E0         MOV     C,0xE0 /* A   */.0
   \   000097   5001         JNC     ??bdb_ProcessInReadReportCfgCmd_4
    690                   {
    691                     reportChangeLen++;
   \   000099   08           INC     R0
    692                   }
    693                   dataLen += reportChangeLen;
   \                     ??bdb_ProcessInReadReportCfgCmd_4:
   \   00009A   E8           MOV     A,R0
   \   00009B   2F           ADD     A,R7
   \   00009C   FF           MOV     R7,A
    694                }
    695              }
    696            }
   \                     ??bdb_ProcessInReadReportCfgCmd_3:
   \   00009D   0E           INC     R6
   \                     ??bdb_ProcessInReadReportCfgCmd_1:
   \   00009E   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   0000A1   40A1         JC      ??bdb_ProcessInReadReportCfgCmd_2
    697          
    698            hdrLen = sizeof( zclReadReportCfgRspCmd_t ) + ( readReportCfgCmd->numAttr * sizeof( zclReportCfgRspRec_t ) );
    699          
    700            // Allocate space for the response command
    701            readReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   \   0000A3                ; Setup parameters for call to function osal_mem_alloc
   \   0000A3   75F00D       MOV     B,#0xd
   \   0000A6   E8           MOV     A,R0
   \   0000A7   A4           MUL     AB
   \   0000A8   04           INC     A
   \   0000A9   FA           MOV     R2,A
   \   0000AA   EF           MOV     A,R7
   \   0000AB   F8           MOV     R0,A
   \   0000AC   EA           MOV     A,R2
   \   0000AD   28           ADD     A,R0
   \   0000AE   FA           MOV     R2,A
   \   0000AF   E4           CLR     A
   \   0000B0   3400         ADDC    A,#0x0
   \   0000B2   FB           MOV     R3,A
   \   0000B3   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000B6   8A..         MOV     ?V0,R2
   \   0000B8   8B..         MOV     ?V1,R3
    702            if ( readReportCfgRspCmd == NULL )
   \   0000BA   EA           MOV     A,R2
   \   0000BB   45..         ORL     A,?V1
   \   0000BD   7005         JNZ     ??bdb_ProcessInReadReportCfgCmd_5
    703            {
    704              return ( FALSE ); // Out of memory
   \                     ??bdb_ProcessInReadReportCfgCmd_0:
   \   0000BF   7900         MOV     R1,#0x0
   \   0000C1   02....       LJMP    ??bdb_ProcessInReadReportCfgCmd_6 & 0xFFFF
    705            }
    706            
    707            //Load cfg records from NV
    708            status = bdb_RepLoadCfgRecords( );
    709            if( status != BDBREPORTING_SUCCESS )
   \                     ??bdb_ProcessInReadReportCfgCmd_5:
   \   0000C4                ; Setup parameters for call to function bdb_RepLoadCfgRecords
   \   0000C4   12....       LCALL   `??bdb_RepLoadCfgRecords::?relay`; Banked call to: bdb_RepLoadCfgRecords
   \   0000C7   E9           MOV     A,R1
   \   0000C8   6009         JZ      ??bdb_ProcessInReadReportCfgCmd_7
    710            {
    711              osal_mem_free(readReportCfgRspCmd);
   \   0000CA                ; Setup parameters for call to function osal_mem_free
   \   0000CA   AA..         MOV     R2,?V0
   \   0000CC   AB..         MOV     R3,?V1
   \   0000CE   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000D1   80EC         SJMP    ??bdb_ProcessInReadReportCfgCmd_0
    712              return ( FALSE ); //Out of memory
    713            }
    714          
    715            readReportCfgRspCmd->numAttr=0;
   \                     ??bdb_ProcessInReadReportCfgCmd_7:
   \   0000D3   85..82       MOV     DPL,?V0
   \   0000D6   85..83       MOV     DPH,?V1
   \   0000D9   E4           CLR     A
   \   0000DA   F0           MOVX    @DPTR,A
    716            for ( i = 0; i < readReportCfgCmd->numAttr; i++ )
   \   0000DB   7E00         MOV     R6,#0x0
   \   0000DD   8027         SJMP    ??bdb_ProcessInReadReportCfgCmd_8
    717            {
    718              reportRspRec = &(readReportCfgRspCmd->attrList[i]);
    719              status = ZCL_STATUS_SUCCESS;  // assume success for this rsp record
    720              
    721              uint8 atrrCfgRecordIndex =  bdb_repAttrCfgRecordsArraySearch( pInMsg->endPoint, pInMsg->clusterId, readReportCfgCmd->attrList[i].attrID );
    722              uint8 status2 = zclFindAttrRec( pInMsg->endPoint, pInMsg->clusterId, readReportCfgCmd->attrList[i].attrID, &attrRec );
    723              if( atrrCfgRecordIndex != BDBREPORTING_INVALIDINDEX && status2 )
    724              {
    725                if ( attrRec.attr.accessControl & ACCESS_REPORTABLE )
    726                {
    727                  // Get the Reporting Configuration
    728                  reportRspRec->dataType = attrRec.attr.dataType;
    729                  reportRspRec->minReportInt = bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].minReportInt;
    730                  reportRspRec->maxReportInt = bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].maxReportInt;
    731                  reportRspRec->reportableChange = bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].reportableChange;
    732                }
    733                else
    734                {
    735                  // Attribute not in the Mandatory Reportable Attribute list
    736                  status = ZCL_STATUS_UNREPORTABLE_ATTRIBUTE;
    737                }      
    738              }
    739              else
    740              {
    741                // Attribute not found
    742                status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \                     ??bdb_ProcessInReadReportCfgCmd_9:
   \   0000DF   7F86         MOV     R7,#-0x7a
    743              }
    744              reportRspRec->status = status;
   \                     ??bdb_ProcessInReadReportCfgCmd_10:
   \   0000E1   EF           MOV     A,R7
   \   0000E2   85..82       MOV     DPL,?V2
   \   0000E5   85..83       MOV     DPH,?V3
   \   0000E8   12....       LCALL   ?Subroutine9 & 0xFFFF
    745              reportRspRec->direction = readReportCfgCmd->attrList[i].direction;
   \                     ??CrossCallReturnLabel_3:
   \   0000EB   A3           INC     DPTR
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   85..82       MOV     DPL,?V2
   \   0000F0   85..83       MOV     DPH,?V3
   \   0000F3   12....       LCALL   ?Subroutine11 & 0xFFFF
    746              reportRspRec->attrID = readReportCfgCmd->attrList[i].attrID;
   \                     ??CrossCallReturnLabel_128:
   \   0000F6   F8           MOV     R0,A
   \   0000F7   A3           INC     DPTR
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   F9           MOV     R1,A
   \   0000FA   85..82       MOV     DPL,?V2
   \   0000FD   85..83       MOV     DPH,?V3
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   12....       LCALL   ?Subroutine10 & 0xFFFF
    747              readReportCfgRspCmd->numAttr++;
   \                     ??CrossCallReturnLabel_4:
   \   000105   0E           INC     R6
   \                     ??bdb_ProcessInReadReportCfgCmd_8:
   \   000106   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000109   85..82       MOV     DPL,?V14
   \   00010C   85..83       MOV     DPH,?V15
   \   00010F   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000112   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000115   4003         JC      $+5
   \   000117   02....       LJMP    ??bdb_ProcessInReadReportCfgCmd_11 & 0xFFFF
   \   00011A   EE           MOV     A,R6
   \   00011B   FC           MOV     R4,A
   \   00011C   75F00D       MOV     B,#0xd
   \   00011F   A4           MUL     AB
   \   000120   F5..         MOV     ?V2,A
   \   000122   E5F0         MOV     A,B
   \   000124   F5..         MOV     ?V3,A
   \   000126   E5..         MOV     A,?V0
   \   000128   25..         ADD     A,?V2
   \   00012A   F582         MOV     DPL,A
   \   00012C   E5..         MOV     A,?V1
   \   00012E   35..         ADDC    A,?V3
   \   000130   F583         MOV     DPH,A
   \   000132   A3           INC     DPTR
   \   000133   8582..       MOV     ?V2,DPL
   \   000136   8583..       MOV     ?V3,DPH
   \   000139   7F00         MOV     R7,#0x0
   \   00013B   EC           MOV     A,R4
   \   00013C   75F003       MOV     B,#0x3
   \   00013F   A4           MUL     AB
   \   000140   FC           MOV     R4,A
   \   000141   ADF0         MOV     R5,B
   \   000143   E5..         MOV     A,?V12
   \   000145   2C           ADD     A,R4
   \   000146   FC           MOV     R4,A
   \   000147   E5..         MOV     A,?V13
   \   000149   3D           ADDC    A,R5
   \   00014A   FD           MOV     R5,A
   \   00014B   85..82       MOV     DPL,?XSP + 0
   \   00014E   85..83       MOV     DPH,?XSP + 1
   \   000151   12....       LCALL   ??Subroutine90_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000154   85..82       MOV     DPL,?XSP + 0
   \   000157   85..83       MOV     DPH,?XSP + 1
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   2402         ADD     A,#0x2
   \   00015D   F5..         MOV     ?V8,A
   \   00015F   A3           INC     DPTR
   \   000160   E0           MOVX    A,@DPTR
   \   000161   3400         ADDC    A,#0x0
   \   000163   F5..         MOV     ?V9,A
   \   000165                ; Setup parameters for call to function bdb_repAttrCfgRecordsArraySearch
   \   000165   85..82       MOV     DPL,?V8
   \   000168   F583         MOV     DPH,A
   \   00016A   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   00016D   12....       LCALL   `??bdb_repAttrCfgRecordsArraySearch::?relay`; Banked call to: bdb_repAttrCfgRecordsArraySearch
   \   000170   E9           MOV     A,R1
   \   000171   F5..         MOV     ?V6,A
   \   000173                ; Setup parameters for call to function zclFindAttrRec
   \   000173   7402         MOV     A,#0x2
   \   000175   12....       LCALL   ?XSTACK_DISP100_8
   \   000178   88..         MOV     ?V10,R0
   \   00017A   89..         MOV     ?V11,R1
   \   00017C   78..         MOV     R0,#?V10
   \   00017E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000181   85..82       MOV     DPL,?V8
   \   000184   85..83       MOV     DPH,?V9
   \   000187   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00018A   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   00018D   12....       LCALL   `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000190   7402         MOV     A,#0x2
   \   000192   12....       LCALL   ?DEALLOC_XSTACK8
   \   000195   E9           MOV     A,R1
   \   000196   F8           MOV     R0,A
   \   000197   74FF         MOV     A,#-0x1
   \   000199   65..         XRL     A,?V6
   \   00019B   7003         JNZ     $+5
   \   00019D   02....       LJMP    ??bdb_ProcessInReadReportCfgCmd_9 & 0xFFFF
   \   0001A0   E8           MOV     A,R0
   \   0001A1   7003         JNZ     $+5
   \   0001A3   02....       LJMP    ??bdb_ProcessInReadReportCfgCmd_9 & 0xFFFF
   \   0001A6   7407         MOV     A,#0x7
   \   0001A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AB   E0           MOVX    A,@DPTR
   \   0001AC   A2E2         MOV     C,0xE0 /* A   */.2
   \   0001AE   503E         JNC     ??bdb_ProcessInReadReportCfgCmd_12
   \   0001B0   7406         MOV     A,#0x6
   \   0001B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B5   E0           MOVX    A,@DPTR
   \   0001B6   85..82       MOV     DPL,?V2
   \   0001B9   85..83       MOV     DPH,?V3
   \   0001BC   A3           INC     DPTR
   \   0001BD   A3           INC     DPTR
   \   0001BE   A3           INC     DPTR
   \   0001BF   A3           INC     DPTR
   \   0001C0   F0           MOVX    @DPTR,A
   \   0001C1   E5..         MOV     A,?V6
   \   0001C3   75F015       MOV     B,#0x15
   \   0001C6   A4           MUL     AB
   \   0001C7   F8           MOV     R0,A
   \   0001C8   A9F0         MOV     R1,B
   \   0001CA   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   0001CD   A3           INC     DPTR
   \   0001CE   A3           INC     DPTR
   \   0001CF   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0001D2   A3           INC     DPTR
   \   0001D3   A3           INC     DPTR
   \   0001D4   A3           INC     DPTR
   \   0001D5   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0001D8   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0001DB   12....       LCALL   ??Subroutine82_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   0001DE   E8           MOV     A,R0
   \   0001DF   240D         ADD     A,#0xd
   \   0001E1   F8           MOV     R0,A
   \   0001E2   5001         JNC     ??bdb_ProcessInReadReportCfgCmd_13
   \   0001E4   09           INC     R1
   \                     ??bdb_ProcessInReadReportCfgCmd_13:
   \   0001E5   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   0001E8   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   0001EB   02....       LJMP    ??bdb_ProcessInReadReportCfgCmd_10 & 0xFFFF
   \                     ??bdb_ProcessInReadReportCfgCmd_12:
   \   0001EE   7F8C         MOV     R7,#-0x74
   \   0001F0   02....       LJMP    ??bdb_ProcessInReadReportCfgCmd_10 & 0xFFFF
    748            }
    749            
    750            // Send the response back
    751            zcl_SendReadReportCfgRspCmd( pInMsg->endPoint, &(pInMsg->srcAddr),
    752                                         pInMsg->clusterId, readReportCfgRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR,
    753                                         true, pInMsg->zclHdr.transSeqNum );
   \                     ??bdb_ProcessInReadReportCfgCmd_11:
   \   0001F3                ; Setup parameters for call to function zcl_SendReadReportCfgRspCmd
   \   0001F3   85..82       MOV     DPL,?V4
   \   0001F6   85..83       MOV     DPH,?V5
   \   0001F9   A3           INC     DPTR
   \   0001FA   A3           INC     DPTR
   \   0001FB   A3           INC     DPTR
   \   0001FC   A3           INC     DPTR
   \   0001FD   A3           INC     DPTR
   \   0001FE   A3           INC     DPTR
   \   0001FF   E0           MOVX    A,@DPTR
   \   000200   F5..         MOV     ?V2,A
   \   000202   78..         MOV     R0,#?V2
   \   000204   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000207   75..01       MOV     ?V2,#0x1
   \   00020A   78..         MOV     R0,#?V2
   \   00020C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00020F   78..         MOV     R0,#?V2
   \   000211   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000214   78..         MOV     R0,#?V0
   \   000216   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000219   EA           MOV     A,R2
   \   00021A   FC           MOV     R4,A
   \   00021B   EB           MOV     A,R3
   \   00021C   FD           MOV     R5,A
   \   00021D   E5..         MOV     A,?V4
   \   00021F   240A         ADD     A,#0xa
   \   000221   FA           MOV     R2,A
   \   000222   E4           CLR     A
   \   000223   35..         ADDC    A,?V5
   \   000225   FB           MOV     R3,A
   \   000226   12....       LCALL   `??zcl_SendReadReportCfgRspCmd::?relay`; Banked call to: zcl_SendReadReportCfgRspCmd
   \   000229   7405         MOV     A,#0x5
   \   00022B   12....       LCALL   ?DEALLOC_XSTACK8
    754            osal_mem_free( readReportCfgRspCmd );
   \   00022E                ; Setup parameters for call to function osal_mem_free
   \   00022E   AA..         MOV     R2,?V0
   \   000230   AB..         MOV     R3,?V1
   \   000232   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    755            
    756            bdb_repAttrCfgRecordsArrayFreeAll( );//Free reporting cfg array from memory, its saved in NV
   \   000235                ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayFreeAll
   \   000235   12....       LCALL   `??bdb_repAttrCfgRecordsArrayFreeAll::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayFreeAll
    757          
    758            return ( TRUE );
   \   000238   7901         MOV     R1,#0x1
   \                     ??bdb_ProcessInReadReportCfgCmd_6:
   \   00023A   02....       LJMP    ?Subroutine4 & 0xFFFF
    759          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   E5..         MOV     A,?V4
   \   000002                REQUIRE ??Subroutine78_0
   \   000002                ; // Fall through to label ??Subroutine78_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine78_0:
   \   000000   2416         ADD     A,#0x16
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   35..         ADDC    A,?V5
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F9           MOV     R1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000003   85..82       MOV     DPL,?V2
   \   000006   85..83       MOV     DPH,?V3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine79_0
   \   000001                ; // Fall through to label ??Subroutine79_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine79_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_mem_alloc
   \   000001   85..82       MOV     DPL,?V8
   \   000004   85..83       MOV     DPH,?V9
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   85..82       MOV     DPL,?V0
   \   000008   85..83       MOV     DPH,?V1
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   04           INC     A
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine82_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine83_0
   \   000001                ; // Fall through to label ??Subroutine83_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine83_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine84_0
   \   000004                ; // Fall through to label ??Subroutine84_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine84_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine85_0
   \   000002                ; // Fall through to label ??Subroutine85_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine85_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   EA           MOV     A,R2
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   EB           MOV     A,R3
   \   000006   F0           MOVX    @DPTR,A
   \   000007   8882         MOV     DPL,R0
   \   000009   8983         MOV     DPH,R1
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArray
   \   000003   E0           MOVX    A,@DPTR
   \   000004   28           ADD     A,R0
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   39           ADDC    A,R1
   \   000009   F9           MOV     R1,A
   \   00000A   8882         MOV     DPL,R0
   \   00000C   8983         MOV     DPH,R1
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   85..82       MOV     DPL,?V12
   \   000003   85..83       MOV     DPH,?V13
   \   000006                REQUIRE ??Subroutine92_0
   \   000006                ; // Fall through to label ??Subroutine92_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine92_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   EE           MOV     A,R6
   \   000003   C3           CLR     C
   \   000004   98           SUBB    A,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000003   85..82       MOV     DPL,?V14
   \   000006   85..83       MOV     DPH,?V15
   \   000009   12....       LCALL   ??Subroutine94_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   E5..         MOV     A,?V2
   \   000002   240B         ADD     A,#0xb
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V3
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET
    760          
    761          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    762          void bdb_RepUpdateMarkBindings( void )
   \                     bdb_RepUpdateMarkBindings:
    763          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    764            uint8 numMarkedEntries = 0;
   \   000005   75..00       MOV     ?V4,#0x0
    765            uint8 i;
    766            for(i=0; i<bdb_reportingClusterEndpointArrayCount; i++)
   \   000008   75..00       MOV     ?V5,#0x0
   \   00000B   8011         SJMP    ??bdb_RepUpdateMarkBindings_0
    767            {
    768              BindingEntry_t* bEntry = bindFind( bdb_reportingClusterEndpointArray[i].endpoint,bdb_reportingClusterEndpointArray[i].cluster,0 ); 
    769              if(bEntry !=  NULL)
    770              { //Found a binding with the given cluster and endpoint, mark the Endpoint-cluster entry (this activates reporting)
    771                if( FLAGS_CHECKFLAG( bdb_reportingClusterEndpointArray[i].flags, BDBREPORTING_HASBINDING_FLAG_MASK ) == BDBREPORTING_FALSE )
    772                {
    773                  bdb_RepMarkHasBindingInEndpointClusterArray( bdb_reportingClusterEndpointArray[i].endpoint, bdb_reportingClusterEndpointArray[i].cluster, BDBREPORTING_FALSE, BDBREPORTING_IGNORE );
    774                }
    775                numMarkedEntries++;
    776              }
    777              else
    778              {
    779                if( FLAGS_CHECKFLAG( bdb_reportingClusterEndpointArray[i].flags, BDBREPORTING_HASBINDING_FLAG_MASK) == BDBREPORTING_TRUE )
   \                     ??bdb_RepUpdateMarkBindings_1:
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000010   500A         JNC     ??bdb_RepUpdateMarkBindings_2
    780                {
    781                  bdb_RepMarkHasBindingInEndpointClusterArray( bdb_reportingClusterEndpointArray[i].endpoint, bdb_reportingClusterEndpointArray[i].cluster, BDBREPORTING_TRUE, BDBREPORTING_IGNORE );
   \   000012                ; Setup parameters for call to function bdb_RepMarkHasBindingInEndpointClusterArray
   \   000012   7DFF         MOV     R5,#-0x1
   \   000014   7C01         MOV     R4,#0x1
   \   000016   12....       LCALL   ?Subroutine30 & 0xFFFF
    782                }
    783              }
   \                     ??CrossCallReturnLabel_132:
   \   000019   12....       LCALL   `??bdb_RepMarkHasBindingInEndpointClusterArray::`; Banked call to: bdb_RepMarkHasBindingInEndpointClusterArray
   \                     ??bdb_RepUpdateMarkBindings_2:
   \   00001C   05..         INC     ?V5
   \                     ??bdb_RepUpdateMarkBindings_0:
   \   00001E   90....       MOV     DPTR,#bdb_reportingClusterEndpointArrayCount
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F8           MOV     R0,A
   \   000023   E5..         MOV     A,?V5
   \   000025   C3           CLR     C
   \   000026   98           SUBB    A,R0
   \   000027   5042         JNC     ??bdb_RepUpdateMarkBindings_3
   \   000029   E5..         MOV     A,?V5
   \   00002B   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00002E   A3           INC     DPTR
   \   00002F   AE82         MOV     R6,DPL
   \   000031   AF83         MOV     R7,DPH
   \   000033   E5..         MOV     A,?V2
   \   000035   2402         ADD     A,#0x2
   \   000037   F5..         MOV     ?V0,A
   \   000039   E4           CLR     A
   \   00003A   35..         ADDC    A,?V3
   \   00003C   F5..         MOV     ?V1,A
   \   00003E                ; Setup parameters for call to function bindFind
   \   00003E   7C00         MOV     R4,#0x0
   \   000040   85..82       MOV     DPL,?V0
   \   000043   F583         MOV     DPH,A
   \   000045   12....       LCALL   ??Subroutine80_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000048   12....       LCALL   `??bindFind::?relay` ; Banked call to: bindFind
   \   00004B   8B..         MOV     ?V7,R3
   \   00004D   EA           MOV     A,R2
   \   00004E   45..         ORL     A,?V7
   \   000050   85..82       MOV     DPL,?V2
   \   000053   85..83       MOV     DPH,?V3
   \   000056   60B5         JZ      ??bdb_RepUpdateMarkBindings_1
   \   000058   E0           MOVX    A,@DPTR
   \   000059   A2E0         MOV     C,0xE0 /* A   */.0
   \   00005B   400A         JC      ??bdb_RepUpdateMarkBindings_4
   \   00005D                ; Setup parameters for call to function bdb_RepMarkHasBindingInEndpointClusterArray
   \   00005D   7DFF         MOV     R5,#-0x1
   \   00005F   7C00         MOV     R4,#0x0
   \   000061   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000064   12....       LCALL   `??bdb_RepMarkHasBindingInEndpointClusterArray::`; Banked call to: bdb_RepMarkHasBindingInEndpointClusterArray
   \                     ??bdb_RepUpdateMarkBindings_4:
   \   000067   05..         INC     ?V4
   \   000069   80B1         SJMP    ??bdb_RepUpdateMarkBindings_2
    784            }
    785            
    786            //Checking is bdb_reporting timer is active
    787            if( osal_get_timeoutEx( bdb_TaskID, BDB_REPORT_TIMEOUT) > 0 )
   \                     ??bdb_RepUpdateMarkBindings_3:
   \   00006B                ; Setup parameters for call to function osal_get_timeoutEx
   \   00006B   7A80         MOV     R2,#-0x80
   \   00006D   7B00         MOV     R3,#0x0
   \   00006F   90....       MOV     DPTR,#bdb_TaskID
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F9           MOV     R1,A
   \   000074   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000077   EA           MOV     A,R2
   \   000078   4B           ORL     A,R3
   \   000079   4C           ORL     A,R4
   \   00007A   4D           ORL     A,R5
   \   00007B   6012         JZ      ??bdb_RepUpdateMarkBindings_5
    788            {
    789              //If timer is active
    790              if( numMarkedEntries == 0 ) //No entries
   \   00007D   E5..         MOV     A,?V4
   \   00007F   7015         JNZ     ??bdb_RepUpdateMarkBindings_6
    791              {
    792                //Stop Timer
    793                osal_stop_timerEx( bdb_TaskID, BDB_REPORT_TIMEOUT );
   \   000081                ; Setup parameters for call to function osal_stop_timerEx
   \   000081   7A80         MOV     R2,#-0x80
   \   000083   7B00         MOV     R3,#0x0
   \   000085   90....       MOV     DPTR,#bdb_TaskID
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F9           MOV     R1,A
   \   00008A   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   00008D   8007         SJMP    ??bdb_RepUpdateMarkBindings_6
    794              }
    795            }
    796            else
    797            {
    798              if( numMarkedEntries > 0 )
   \                     ??bdb_RepUpdateMarkBindings_5:
   \   00008F   E5..         MOV     A,?V4
   \   000091   6003         JZ      ??bdb_RepUpdateMarkBindings_6
    799              {
    800                //Start timer
    801                bdb_RepStartReporting( );      
   \   000093                ; Setup parameters for call to function bdb_RepStartReporting
   \   000093   12....       LCALL   `??bdb_RepStartReporting::?relay`; Banked call to: bdb_RepStartReporting
    802              }
    803            }
    804          }
   \                     ??bdb_RepUpdateMarkBindings_6:
   \   000096   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   85..82       MOV     DPL,?V0
   \   000003   85..83       MOV     DPH,?V1
   \   000006                REQUIRE ??Subroutine80_0
   \   000006                ; // Fall through to label ??Subroutine80_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine80_0:
   \   000000   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   8E82         MOV     DPL,R6
   \   000007   8F83         MOV     DPH,R7
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   75F00D       MOV     B,#0xd
   \   000003   A4           MUL     AB
   \   000004   F8           MOV     R0,A
   \   000005   A9F0         MOV     R1,B
   \   000007   74..         MOV     A,#bdb_reportingClusterEndpointArray & 0xff
   \   000009   28           ADD     A,R0
   \   00000A   F5..         MOV     ?V2,A
   \   00000C   74..         MOV     A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
   \   00000E   39           ADDC    A,R1
   \   00000F   F5..         MOV     ?V3,A
   \   000011   85..82       MOV     DPL,?V2
   \   000014   F583         MOV     DPH,A
   \   000016   22           RET
    805          
    806          /*********************************************************************
    807           * LOCAL FUNCTIONS DEFINITIONS
    808           */
    809          
    810          /*
    811          * Begin: Single linked list for attributes in a cluster-endpoint live entry methods 
    812          */
    813          
    814          /*********************************************************************
    815           * @fn      bdb_InitReportAttrLiveValues
    816           *
    817           * @brief   Set the bdbReportAttrLive_t fields to initiation values
    818           *
    819           * @param   item - Data to initiate
    820           *
    821           * @return 
    822           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    823          static void bdb_InitReportAttrLiveValues( bdbReportAttrLive_t* item )
   \                     bdb_InitReportAttrLiveValues:
    824          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    825            uint8 i;
    826            for( i=0; i<BDBREPORTING_MAX_ANALOG_ATTR_SIZE; i++ )
   \   000004   7C00         MOV     R4,#0x0
    827            {
    828              item->lastValueReported[i] = 0x00;
   \                     ??bdb_InitReportAttrLiveValues_0:
   \   000006   EC           MOV     A,R4
   \   000007   F8           MOV     R0,A
   \   000008   EA           MOV     A,R2
   \   000009   28           ADD     A,R0
   \   00000A   F8           MOV     R0,A
   \   00000B   E4           CLR     A
   \   00000C   3B           ADDC    A,R3
   \   00000D   F9           MOV     R1,A
   \   00000E   8882         MOV     DPL,R0
   \   000010   8983         MOV     DPH,R1
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E4           CLR     A
   \   000015   12....       LCALL   ??Subroutine105_0 & 0xFFFF
    829              item->reportableChange[i] = 0x00;
    830            }
   \                     ??CrossCallReturnLabel_228:
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   0C           INC     R4
   \   000020   EC           MOV     A,R4
   \   000021   C3           CLR     C
   \   000022   9404         SUBB    A,#0x4
   \   000024   40E0         JC      ??bdb_InitReportAttrLiveValues_0
    831            item->attrID = 0x0000;
   \   000026   8A82         MOV     DPL,R2
   \   000028   8B83         MOV     DPH,R3
   \   00002A   E4           CLR     A
   \   00002B   F0           MOVX    @DPTR,A
   \   00002C   A3           INC     DPTR
   \   00002D   02....       LJMP    ?Subroutine0 & 0xFFFF
    832          
    833          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET
    834          
    835          /*********************************************************************
    836           * @fn      bdb_linkedListAttrInit
    837           *
    838           * @brief   Initates a linked list for the attrs in the cluster-endpoint entry
    839           *
    840           * @param   list - Pointer to linked list
    841           *
    842           * @return 
    843           */
    844          static void bdb_linkedListAttrInit( bdbAttrLinkedListAttr_t *list )
    845          {
    846            list->head = NULL;
    847            list->numItems = 0;
    848          }
    849          
    850          /*********************************************************************
    851           * @fn      bdb_linkedListAttrAdd
    852           *
    853           * @brief   Initates a linked list for the attrs in the cluster-endpoint entry
    854           *
    855           * @param   list - Pointer to linked list
    856           *
    857           * @return  Status code (BDBREPORTING_SUCCESS or BDBREPORTING_ERROR)
    858           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    859          static uint8 bdb_linkedListAttrAdd( bdbAttrLinkedListAttr_t *list, bdbReportAttrLive_t* data )
   \                     bdb_linkedListAttrAdd:
    860          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    861            bdbLinkedListAttrItem_t* newItem = (bdbLinkedListAttrItem_t *)osal_mem_alloc( sizeof(bdbLinkedListAttrItem_t) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A04         MOV     R2,#0x4
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV     ?V2,R2
   \   000016   8B..         MOV     ?V3,R3
   \   000018   A8..         MOV     R0,?V2
   \   00001A   A9..         MOV     R1,?V3
    862            if( newItem == NULL )
   \   00001C   E8           MOV     A,R0
   \   00001D   49           ORL     A,R1
   \   00001E   7004         JNZ     ??bdb_linkedListAttrAdd_0
    863            {
    864              return BDBREPORTING_ERROR;
   \   000020   7901         MOV     R1,#0x1
   \   000022   801C         SJMP    ??bdb_linkedListAttrAdd_1
    865            }
    866            newItem->data = data;
   \                     ??bdb_linkedListAttrAdd_0:
   \   000024   8882         MOV     DPL,R0
   \   000026   8983         MOV     DPH,R1
   \   000028   EE           MOV     A,R6
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   EF           MOV     A,R7
   \   00002C   F0           MOVX    @DPTR,A
    867            newItem->next = list->head;
   \   00002D   85..82       MOV     DPL,?V0
   \   000030   85..83       MOV     DPH,?V1
   \   000033   A3           INC     DPTR
   \   000034   AA82         MOV     R2,DPL
   \   000036   AB83         MOV     R3,DPH
   \   000038   12....       LCALL   ?Subroutine19 & 0xFFFF
    868            list->head = newItem;
   \                     ??CrossCallReturnLabel_136:
   \   00003B   12....       LCALL   ?Subroutine10 & 0xFFFF
    869            list->numItems++;
    870            return BDBREPORTING_SUCCESS;
   \                     ??CrossCallReturnLabel_5:
   \   00003E   7900         MOV     R1,#0x0
   \                     ??bdb_linkedListAttrAdd_1:
   \   000040   02....       LJMP    ?Subroutine2 & 0xFFFF
    871          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   EC           MOV     A,R4
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   ED           MOV     A,R5
   \   000009                REQUIRE ??Subroutine81_0
   \   000009                ; // Fall through to label ??Subroutine81_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine81_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET
    872          
    873          /*********************************************************************
    874           * @fn      bdb_linkedListAttrSearch
    875           *
    876           * @brief   Travers the linked list and search for a node (bdbReportAttrLive_t 
    877           *          data) with a specific attrID
    878           *
    879           * @param   list - Pointer to linked list
    880           * @param   searchdata - data to search the list (has a specific attrID)
    881           *
    882           * @return  A pointer to the node in the list has the searched data, NULL if 
    883           *          not found
    884           */
    885          static bdbLinkedListAttrItem_t* bdb_linkedListAttrSearch( bdbAttrLinkedListAttr_t *list, bdbReportAttrLive_t* searchdata )
    886          {
    887            bdbLinkedListAttrItem_t* cur = list->head;
    888            while( cur != NULL )
    889            {
    890              if( EQUAL_LLISTITEMDATA( (*(cur->data)), (*searchdata) ) )
    891              {
    892                return cur;
    893              }
    894              cur = cur->next;
    895            }
    896            return NULL;
    897          }
    898          
    899          /*********************************************************************
    900           * @fn      bdb_linkedListAttrRemove
    901           *
    902           * @brief   Remove the head node from the list
    903           *
    904           * @param   list - Pointer to linked list
    905           *
    906           * @return  A pointer to the data part of the deleted node, NULL if no node was deleted
    907           */
    908          static bdbReportAttrLive_t* bdb_linkedListAttrRemove( bdbAttrLinkedListAttr_t *list )
    909          {
    910            bdbReportAttrLive_t* resdata = NULL;
    911            bdbLinkedListAttrItem_t* cur = list->head;
    912            if( list->head == NULL )
    913            {
    914              return NULL;
    915            }
    916            list->head = cur->next;
    917            resdata =cur->data;
    918            osal_mem_free( cur );
    919            list->numItems--;
    920            return resdata;
    921          }
    922          
    923          /*********************************************************************
    924           * @fn      bdb_linkedListAttrFreeAll
    925           *
    926           * @brief   Deletes and deallocates all the memory from the linked list
    927           *
    928           * @param   list - Pointer to linked list
    929           *
    930           * @return  BDBREPORTING_SUCCESS if operation was successful
    931           */
    932          static uint8 bdb_linkedListAttrFreeAll( bdbAttrLinkedListAttr_t *list )
    933          {
    934            bdbReportAttrLive_t* toremovedata;
    935            while( list->head != NULL  )
    936            {
    937              toremovedata = bdb_linkedListAttrRemove( list );
    938              osal_mem_free( toremovedata );
    939            }
    940            return BDBREPORTING_SUCCESS;
    941          }
    942          
    943          /*********************************************************************
    944           * @fn      bdb_linkedListAttrClearList
    945           *
    946           * @brief   Clears the list without freeing the nodes memory
    947           *
    948           * @param   list - Pointer to linked list
    949           *
    950           * @return 
    951           */
    952          static void bdb_linkedListAttrClearList( bdbAttrLinkedListAttr_t *list )
    953          {
    954            list->head = NULL;
    955            list->numItems = 0;
    956          }
    957          
    958          /*********************************************************************
    959           * @fn      bdb_linkedListAttrGetAtIndex
    960           *
    961           * @brief   Returns the ith element of the list starting from the head
    962           *
    963           * @param   list - Pointer to linked list
    964           *
    965           * @return  A pointer to the ith node element
    966           */
    967          static bdbLinkedListAttrItem_t* bdb_linkedListAttrGetAtIndex( bdbAttrLinkedListAttr_t *list, uint8 index )
    968          {
    969            if( index > list->numItems-1 )
    970            {
    971              return NULL;
    972            }
    973            bdbLinkedListAttrItem_t* cur = list->head;
    974            uint8 i;
    975            for( i=0; i<=index; i++ )
    976            {
    977              if( cur == NULL )
    978              {
    979                return NULL;
    980              }
    981              if( i < index )
    982              {
    983                cur = cur->next;
    984              }
    985            }
    986            return cur;
    987          }
    988          
    989          /*
    990          * End: Single linked list for attributes in a cluster-endpoint entry methods
    991          */
    992          
    993          
    994          /*
    995          * Begin: Cluster-endpoint array live methods
    996          */
    997          
    998          /*********************************************************************
    999           * @fn      bdb_clusterEndpointArrayInit
   1000           *
   1001           * @brief   Initiates the clusterEndpoint array variables
   1002           *
   1003           * @return  
   1004           */
   1005          static void bdb_clusterEndpointArrayInit( void )
   1006          {
   1007            bdb_reportingClusterEndpointArrayCount = 0;
   1008          }
   1009          
   1010          /*********************************************************************
   1011           * @fn      bdb_clusterEndpointArrayAdd
   1012           *
   1013           * @brief   Adds a new entry to the clusterEndpoint array
   1014           *
   1015           * @param   endpoint - Endpoint ID of the entry
   1016           * @param   cluster - Cluster ID of the entry
   1017           * @param   consolidatedMinReportInterval - Cluster ID of the entry
   1018          
   1019           *
   1020           * @return  A pointer to the ith node element
   1021           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1022          static uint8 bdb_clusterEndpointArrayAdd( uint8 endpoint, uint16 cluster, uint16 consolidatedMinReportInt, uint16 consolidatedMaxReportInt, uint16 timeSinceLastReport )
   \                     bdb_clusterEndpointArrayAdd:
   1023          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1024            if( bdb_reportingClusterEndpointArrayCount>=BDB_MAX_CLUSTERENDPOINTS_REPORTING )
   \   000007   90....       MOV     DPTR,#bdb_reportingClusterEndpointArrayCount
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   C3           CLR     C
   \   00000C   9405         SUBB    A,#0x5
   \   00000E   4004         JC      ??bdb_clusterEndpointArrayAdd_0
   1025            {
   1026              return BDBREPORTING_ERROR;
   \   000010   7901         MOV     R1,#0x1
   \   000012   8052         SJMP    ??bdb_clusterEndpointArrayAdd_1
   1027            }
   1028            bdb_reportingClusterEndpointArray[bdb_reportingClusterEndpointArrayCount].endpoint = endpoint;
   \                     ??bdb_clusterEndpointArrayAdd_0:
   \   000014   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000017   F8           MOV     R0,A
   \   000018   74..         MOV     A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
   \   00001A   39           ADDC    A,R1
   \   00001B   F9           MOV     R1,A
   \   00001C   EE           MOV     A,R6
   \   00001D   8882         MOV     DPL,R0
   \   00001F   8983         MOV     DPH,R1
   \   000021   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   1029            bdb_reportingClusterEndpointArray[bdb_reportingClusterEndpointArrayCount].cluster = cluster;
   \                     ??CrossCallReturnLabel_227:
   \   000024   12....       LCALL   ?Subroutine13 & 0xFFFF
   1030          
   1031            bdb_reportingClusterEndpointArray[bdb_reportingClusterEndpointArrayCount].consolidatedMinReportInt = consolidatedMinReportInt;
   \                     ??CrossCallReturnLabel_9:
   \   000027   12....       LCALL   ??Subroutine90_0 & 0xFFFF
   1032            bdb_reportingClusterEndpointArray[bdb_reportingClusterEndpointArrayCount].consolidatedMaxReportInt = consolidatedMaxReportInt;
   \                     ??CrossCallReturnLabel_162:
   \   00002A   7409         MOV     A,#0x9
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   12....       LCALL   ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000032   12....       LCALL   ??Subroutine83_0 & 0xFFFF
   1033            bdb_reportingClusterEndpointArray[bdb_reportingClusterEndpointArrayCount].timeSinceLastReport = timeSinceLastReport;
   \                     ??CrossCallReturnLabel_142:
   \   000035   740B         MOV     A,#0xb
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00003D   12....       LCALL   ?Subroutine21 & 0xFFFF
   1034            bdb_linkedListAttrInit( &bdb_reportingClusterEndpointArray[bdb_reportingClusterEndpointArrayCount].attrLinkedList );
   \                     ??CrossCallReturnLabel_144:
   \   000040   E8           MOV     A,R0
   \   000041   240A         ADD     A,#0xa
   \   000043   F8           MOV     R0,A
   \   000044   5001         JNC     ??bdb_clusterEndpointArrayAdd_2
   \   000046   09           INC     R1
   \                     ??bdb_clusterEndpointArrayAdd_2:
   \   000047   8882         MOV     DPL,R0
   \   000049   8983         MOV     DPH,R1
   \   00004B   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   00004E   F0           MOVX    @DPTR,A
   1035            FLAGS_TURNOFFALLFLAGS( bdb_reportingClusterEndpointArray[bdb_reportingClusterEndpointArrayCount].flags );
   \   00004F   90....       MOV     DPTR,#bdb_reportingClusterEndpointArrayCount
   \   000052   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000055   F582         MOV     DPL,A
   \   000057   74..         MOV     A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
   \   000059   39           ADDC    A,R1
   \   00005A   F583         MOV     DPH,A
   \   00005C   E4           CLR     A
   \   00005D   F0           MOVX    @DPTR,A
   1036            
   1037            bdb_reportingClusterEndpointArrayCount++;
   \   00005E   90....       MOV     DPTR,#bdb_reportingClusterEndpointArrayCount
   \   000061   E0           MOVX    A,@DPTR
   \   000062   04           INC     A
   \   000063   F0           MOVX    @DPTR,A
   1038            return BDBREPORTING_SUCCESS;
   \   000064   7900         MOV     R1,#0x0
   \                     ??bdb_clusterEndpointArrayAdd_1:
   \   000066   02....       LJMP    ?Subroutine1 & 0xFFFF
   1039          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000003   74..         MOV     A,#bdb_reportingClusterEndpointArray & 0xff
   \   000005   28           ADD     A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   A3           INC     DPTR
   \   000005                REQUIRE ??Subroutine82_0
   \   000005                ; // Fall through to label ??Subroutine82_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   75F00D       MOV     B,#0xd
   \   000004   A4           MUL     AB
   \   000005   F8           MOV     R0,A
   \   000006   A9F0         MOV     R1,B
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine93_0:
   \   000000   12....       LCALL   ??Subroutine94_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine105_0
   \   000001                ; // Fall through to label ??Subroutine105_0
   1040          
   1041          static uint8 bdb_clusterEndpointArrayGetMin( void )
   1042          {
   1043            uint8 indexMin = 0xFF;
   1044            uint16 ValueMin = 0xFFFF;
   1045            uint16 possibleMin;
   1046            uint8 i;
   1047            for( i=0; i<bdb_reportingClusterEndpointArrayCount; i++ )
   1048            {
   1049              if( FLAGS_CHECKFLAG( bdb_reportingClusterEndpointArray[i].flags, BDBREPORTING_HASBINDING_FLAG_MASK ) == BDBREPORTING_TRUE )
   1050              { //Only do with valid entries (HasBinding==true)
   1051                if( bdb_reportingClusterEndpointArray[i].consolidatedMaxReportInt != BDBREPORTING_NOPERIODIC &&  
   1052                   bdb_reportingClusterEndpointArray[i].consolidatedMaxReportInt != BDBREPORTING_REPORTOFF )
   1053                {
   1054                  //If maxInterval is BDBREPORTING_NOPERIODIC=0x0000 or BDBREPORTING_REPORTOFF=0xFFFF, ignore to calculate min
   1055                  if( ValueMin == 0 )
   1056                  {
   1057                    //stop if we find a minValue of zero because there no other Min less than that
   1058                    break;
   1059                  }
   1060                  possibleMin = bdb_reportingClusterEndpointArray[i].consolidatedMaxReportInt - bdb_reportingClusterEndpointArray[i].timeSinceLastReport;
   1061                  if( possibleMin<ValueMin )
   1062                  {
   1063                    indexMin = i;
   1064                    ValueMin = possibleMin;
   1065                  }
   1066                }
   1067              }
   1068            }
   1069            return indexMin;
   1070          
   1071          }
   1072          
   1073          static uint8 bdb_clusterEndpointArrayRemoveAt( uint8 index )
   1074          {
   1075            if( index>=bdb_reportingClusterEndpointArrayCount )
   1076            {
   1077              return BDBREPORTING_ERROR;
   1078            }
   1079            //Freeing list, all the other fields are not dynamic
   1080            bdb_linkedListAttrFreeAll( &bdb_reportingClusterEndpointArray[index].attrLinkedList );
   1081            //moving last element to free slot
   1082            bdb_clusterEndpointArrayMoveTo( index, bdb_reportingClusterEndpointArrayCount-1 );
   1083            bdb_reportingClusterEndpointArrayCount--;
   1084            return BDBREPORTING_SUCCESS;
   1085          }
   1086          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1087          static void bdb_clusterEndpointArrayMoveTo( uint8 indexSrc, uint8 indexDest )
   \                     bdb_clusterEndpointArrayMoveTo:
   1088          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V1,R2
   1089            bdb_reportingClusterEndpointArray[indexSrc].cluster = bdb_reportingClusterEndpointArray[indexDest].cluster;
   \   000007   E9           MOV     A,R1
   \   000008   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00000B   E8           MOV     A,R0
   \   00000C   FA           MOV     R2,A
   \   00000D   E9           MOV     A,R1
   \   00000E   FB           MOV     R3,A
   \   00000F   E5..         MOV     A,?V1
   \   000011   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000014   E8           MOV     A,R0
   \   000015   FE           MOV     R6,A
   \   000016   E9           MOV     A,R1
   \   000017   FF           MOV     R7,A
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   00001F   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   1090            bdb_reportingClusterEndpointArray[indexSrc].endpoint = bdb_reportingClusterEndpointArray[indexDest].endpoint;
   \                     ??CrossCallReturnLabel_216:
   \   000022   8E82         MOV     DPL,R6
   \   000024   8F83         MOV     DPH,R7
   \   000026   A3           INC     DPTR
   \   000027   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00002A   A3           INC     DPTR
   \   00002B   12....       LCALL   ?Subroutine61 & 0xFFFF
   1091            bdb_reportingClusterEndpointArray[indexSrc].consolidatedMaxReportInt = bdb_reportingClusterEndpointArray[indexDest].consolidatedMaxReportInt;
   \                     ??CrossCallReturnLabel_102:
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000033   12....       LCALL   ?Subroutine12 & 0xFFFF
   1092            bdb_reportingClusterEndpointArray[indexSrc].consolidatedMinReportInt = bdb_reportingClusterEndpointArray[indexDest].consolidatedMinReportInt;
   \                     ??CrossCallReturnLabel_6:
   \   000036   12....       LCALL   ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000039   12....       LCALL   ?Subroutine12 & 0xFFFF
   1093            bdb_reportingClusterEndpointArray[indexSrc].timeSinceLastReport = bdb_reportingClusterEndpointArray[indexDest].timeSinceLastReport;
   \                     ??CrossCallReturnLabel_7:
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000041   A3           INC     DPTR
   \   000042   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   1094            bdb_reportingClusterEndpointArray[indexSrc].attrLinkedList = bdb_reportingClusterEndpointArray[indexDest].attrLinkedList;
   \                     ??CrossCallReturnLabel_220:
   \   000045   EE           MOV     A,R6
   \   000046   240A         ADD     A,#0xa
   \   000048   F8           MOV     R0,A
   \   000049   E4           CLR     A
   \   00004A   3F           ADDC    A,R7
   \   00004B   F9           MOV     R1,A
   \   00004C   8882         MOV     DPL,R0
   \   00004E   8983         MOV     DPH,R1
   \   000050   EA           MOV     A,R2
   \   000051   240A         ADD     A,#0xa
   \   000053   FC           MOV     R4,A
   \   000054   E4           CLR     A
   \   000055   3B           ADDC    A,R3
   \   000056   FD           MOV     R5,A
   \   000057   7403         MOV     A,#0x3
   \   000059   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1095            bdb_reportingClusterEndpointArray[indexSrc].flags = bdb_reportingClusterEndpointArray[indexDest].flags;
   \   00005C   8E82         MOV     DPL,R6
   \   00005E   8F83         MOV     DPH,R7
   \   000060   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000063   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000066   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000069   F0           MOVX    @DPTR,A
   1096            bdb_linkedListAttrClearList( &bdb_reportingClusterEndpointArray[indexDest].attrLinkedList );
   1097          }
   \   00006A                REQUIRE ?Subroutine6
   \   00006A                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine86_0
   \   000002                ; // Fall through to label ??Subroutine86_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   E8           MOV     A,R0
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   E9           MOV     A,R1
   \   000008   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET
   1098          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1099          static uint8 bdb_clusterEndpointArrayUpdateAt( uint8 index, uint16 newTimeSinceLastReport, uint8 markHasBinding, uint8 markNoNextIncrement )
   \                     bdb_clusterEndpointArrayUpdateAt:
   1100          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   1101            if( index >= bdb_reportingClusterEndpointArrayCount )
   \   000007   90....       MOV     DPTR,#bdb_reportingClusterEndpointArrayCount
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   EF           MOV     A,R7
   \   00000D   C3           CLR     C
   \   00000E   98           SUBB    A,R0
   \   00000F   4004         JC      ??bdb_clusterEndpointArrayUpdateAt_0
   1102            {
   1103              return BDBREPORTING_ERROR;
   \   000011   7901         MOV     R1,#0x1
   \   000013   8037         SJMP    ??bdb_clusterEndpointArrayUpdateAt_1
   1104            }
   1105            bdb_reportingClusterEndpointArray[index].timeSinceLastReport = newTimeSinceLastReport;
   \                     ??bdb_clusterEndpointArrayUpdateAt_0:
   \   000015   EF           MOV     A,R7
   \   000016   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000019   12....       LCALL   ?Subroutine21 & 0xFFFF
   1106            if( markHasBinding != BDBREPORTING_IGNORE )
   \                     ??CrossCallReturnLabel_145:
   \   00001C   74FF         MOV     A,#-0x1
   \   00001E   6C           XRL     A,R4
   \   00001F   6012         JZ      ??bdb_clusterEndpointArrayUpdateAt_2
   1107            {
   1108              if( markHasBinding == BDBREPORTING_TRUE )
   \   000021   7401         MOV     A,#0x1
   \   000023   6C           XRL     A,R4
   \   000024   8882         MOV     DPL,R0
   \   000026   8983         MOV     DPH,R1
   \   000028   7005         JNZ     ??bdb_clusterEndpointArrayUpdateAt_3
   1109              {
   1110                FLAGS_TURNONFLAG( bdb_reportingClusterEndpointArray[index].flags, BDBREPORTING_HASBINDING_FLAG_MASK );
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   D2E0         SETB    0xE0 /* A   */.0
   \   00002D   8003         SJMP    ??bdb_clusterEndpointArrayUpdateAt_4
   1111              }
   1112              else
   1113              {
   1114                FLAGS_TURNOFFFLAG( bdb_reportingClusterEndpointArray[index].flags, BDBREPORTING_HASBINDING_FLAG_MASK );
   \                     ??bdb_clusterEndpointArrayUpdateAt_3:
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   C2E0         CLR     0xE0 /* A   */.0
   \                     ??bdb_clusterEndpointArrayUpdateAt_4:
   \   000032   F0           MOVX    @DPTR,A
   1115              }
   1116            }
   1117            if( markNoNextIncrement != BDBREPORTING_IGNORE )
   \                     ??bdb_clusterEndpointArrayUpdateAt_2:
   \   000033   74FF         MOV     A,#-0x1
   \   000035   6D           XRL     A,R5
   \   000036   6012         JZ      ??bdb_clusterEndpointArrayUpdateAt_5
   1118            {
   1119              if( markNoNextIncrement == BDBREPORTING_TRUE )
   \   000038   7401         MOV     A,#0x1
   \   00003A   6D           XRL     A,R5
   \   00003B   8882         MOV     DPL,R0
   \   00003D   8983         MOV     DPH,R1
   \   00003F   7005         JNZ     ??bdb_clusterEndpointArrayUpdateAt_6
   1120              {
   1121                FLAGS_TURNONFLAG( bdb_reportingClusterEndpointArray[index].flags, BDBREPORTING_NONEXTINCREMENT_FLAG_MASK );
   \   000041   E0           MOVX    A,@DPTR
   \   000042   D2E1         SETB    0xE0 /* A   */.1
   \   000044   8003         SJMP    ??bdb_clusterEndpointArrayUpdateAt_7
   1122              }
   1123              else
   1124              {
   1125                FLAGS_TURNOFFFLAG( bdb_reportingClusterEndpointArray[index].flags, BDBREPORTING_NONEXTINCREMENT_FLAG_MASK );
   \                     ??bdb_clusterEndpointArrayUpdateAt_6:
   \   000046   E0           MOVX    A,@DPTR
   \   000047   C2E1         CLR     0xE0 /* A   */.1
   \                     ??bdb_clusterEndpointArrayUpdateAt_7:
   \   000049   F0           MOVX    @DPTR,A
   1126              }
   1127            }
   1128            return BDBREPORTING_SUCCESS;
   \                     ??bdb_clusterEndpointArrayUpdateAt_5:
   \   00004A   7900         MOV     R1,#0x0
   \                     ??bdb_clusterEndpointArrayUpdateAt_1:
   \   00004C                REQUIRE ?Subroutine1
   \   00004C                ; // Fall through to label ?Subroutine1
   1129          }
   1130          
   1131          static void bdb_clusterEndpointArrayFreeAll( )
   1132          {
   1133            uint8 i;
   1134            uint8 numElements = bdb_reportingClusterEndpointArrayCount;
   1135            for( i=0; i<numElements; i++ )
   1136            {
   1137              bdb_clusterEndpointArrayRemoveAt( 0 );
   1138            }
   1139          }
   1140          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1141          static uint8 bdb_clusterEndpointArraySearch( uint8 endpoint, uint16 cluster )
   \                     bdb_clusterEndpointArraySearch:
   1142          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   1143            uint8 i;
   1144            uint8 foundIndex = BDBREPORTING_INVALIDINDEX;
   \   000007   79FF         MOV     R1,#-0x1
   1145            for( i=0; i<bdb_reportingClusterEndpointArrayCount; i++ )
   \   000009   7800         MOV     R0,#0x0
   \   00000B   8001         SJMP    ??bdb_clusterEndpointArraySearch_0
   \                     ??bdb_clusterEndpointArraySearch_1:
   \   00000D   08           INC     R0
   \                     ??bdb_clusterEndpointArraySearch_0:
   \   00000E   90....       MOV     DPTR,#bdb_reportingClusterEndpointArrayCount
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FC           MOV     R4,A
   \   000013   E8           MOV     A,R0
   \   000014   C3           CLR     C
   \   000015   9C           SUBB    A,R4
   \   000016   502A         JNC     ??bdb_clusterEndpointArraySearch_2
   1146            {
   1147              if( bdb_reportingClusterEndpointArray[i].endpoint == endpoint && bdb_reportingClusterEndpointArray[i].cluster == cluster )
   \   000018   E8           MOV     A,R0
   \   000019   75F00D       MOV     B,#0xd
   \   00001C   A4           MUL     AB
   \   00001D   FC           MOV     R4,A
   \   00001E   ADF0         MOV     R5,B
   \   000020   74..         MOV     A,#bdb_reportingClusterEndpointArray & 0xff
   \   000022   2C           ADD     A,R4
   \   000023   FC           MOV     R4,A
   \   000024   74..         MOV     A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
   \   000026   3D           ADDC    A,R5
   \   000027   FD           MOV     R5,A
   \   000028   8C82         MOV     DPL,R4
   \   00002A   8D83         MOV     DPH,R5
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6F           XRL     A,R7
   \   00002F   70DC         JNZ     ??bdb_clusterEndpointArraySearch_1
   \   000031   8C82         MOV     DPL,R4
   \   000033   8D83         MOV     DPH,R5
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   6A           XRL     A,R2
   \   000039   7003         JNZ     ??bdb_clusterEndpointArraySearch_3
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   6B           XRL     A,R3
   \                     ??bdb_clusterEndpointArraySearch_3:
   \   00003E   70CD         JNZ     ??bdb_clusterEndpointArraySearch_1
   1148              {
   1149                foundIndex = i;
   \   000040   E8           MOV     A,R0
   \   000041   F9           MOV     R1,A
   1150                break;
   1151              }
   1152            }
   1153            return foundIndex;
   \                     ??bdb_clusterEndpointArraySearch_2:
   \   000042   80..         SJMP    ?Subroutine1
   1154          }
   1155          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1156          static void bdb_clusterEndpointArrayIncrementAll( uint16 timeSinceLastReportIncrement, uint8 CheckNoIncrementFlag )
   \                     bdb_clusterEndpointArrayIncrementAll:
   1157          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V3,R1
   1158            uint8 i;
   1159            uint8 doIncrement;
   1160            for( i=0; i<bdb_reportingClusterEndpointArrayCount; i++ )
   \   000007   75..00       MOV     ?V2,#0x0
   \   00000A   801C         SJMP    ??bdb_clusterEndpointArrayIncrementAll_0
   1161            {
   1162              doIncrement = BDBREPORTING_FALSE;
   1163              if( FLAGS_CHECKFLAG( bdb_reportingClusterEndpointArray[i].flags, BDBREPORTING_HASBINDING_FLAG_MASK ) == BDBREPORTING_TRUE )
   1164              { 
   1165                //Only do with valid entries (HasBinding==true)
   1166                if( CheckNoIncrementFlag == BDBREPORTING_FALSE )
   1167                {
   1168                  doIncrement = BDBREPORTING_TRUE;
   1169                }
   1170                else
   1171                {
   1172                  if( FLAGS_CHECKFLAG( bdb_reportingClusterEndpointArray[i].flags, BDBREPORTING_NONEXTINCREMENT_FLAG_MASK ) == BDBREPORTING_FALSE )
   1173                  {
   1174                    doIncrement = BDBREPORTING_TRUE;
   1175                  }
   1176                }
   1177                if( doIncrement == BDBREPORTING_TRUE )
   1178                {
   1179                  if( bdb_reportingClusterEndpointArray[i].consolidatedMaxReportInt != BDBREPORTING_NOPERIODIC &&  bdb_reportingClusterEndpointArray[i].consolidatedMaxReportInt != BDBREPORTING_REPORTOFF )
   1180                  {
   1181                    bdb_reportingClusterEndpointArray[i].timeSinceLastReport = (bdb_reportingClusterEndpointArray[i].timeSinceLastReport+timeSinceLastReportIncrement 
   1182                                                                                > bdb_reportingClusterEndpointArray[i].consolidatedMaxReportInt)? 
   1183                                                                                bdb_reportingClusterEndpointArray[i].consolidatedMaxReportInt: 
   1184                                                                                bdb_reportingClusterEndpointArray[i].timeSinceLastReport+timeSinceLastReportIncrement;
   \                     ??bdb_clusterEndpointArrayIncrementAll_1:
   \   00000C   8E82         MOV     DPL,R6
   \   00000E   8F83         MOV     DPH,R7
   \   000010   E0           MOVX    A,@DPTR
   \   000011   2A           ADD     A,R2
   \   000012   FC           MOV     R4,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   3B           ADDC    A,R3
   \                     ??bdb_clusterEndpointArrayIncrementAll_2:
   \   000016   FD           MOV     R5,A
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   12....       LCALL   ??Subroutine90_0 & 0xFFFF
   1185                  }
   1186                }
   1187                FLAGS_TURNOFFFLAG( bdb_reportingClusterEndpointArray[i].flags, BDBREPORTING_NONEXTINCREMENT_FLAG_MASK ); //Always turn off, one shot functionality
   \                     ??CrossCallReturnLabel_163:
   \   00001E   8882         MOV     DPL,R0
   \   000020   8983         MOV     DPH,R1
   \   000022   E0           MOVX    A,@DPTR
   \   000023   C2E1         CLR     0xE0 /* A   */.1
   \   000025   F0           MOVX    @DPTR,A
   \                     ??bdb_clusterEndpointArrayIncrementAll_3:
   \   000026   05..         INC     ?V2
   \                     ??bdb_clusterEndpointArrayIncrementAll_0:
   \   000028   90....       MOV     DPTR,#bdb_reportingClusterEndpointArrayCount
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F8           MOV     R0,A
   \   00002D   E5..         MOV     A,?V2
   \   00002F   C3           CLR     C
   \   000030   98           SUBB    A,R0
   \   000031   505E         JNC     ??bdb_clusterEndpointArrayIncrementAll_4
   \   000033   E5..         MOV     A,?V2
   \   000035   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000038   50EC         JNC     ??bdb_clusterEndpointArrayIncrementAll_3
   \   00003A   E5..         MOV     A,?V3
   \   00003C   600E         JZ      ??bdb_clusterEndpointArrayIncrementAll_5
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   5402         ANL     A,#0x2
   \   000041   C3           CLR     C
   \   000042   9401         SUBB    A,#0x1
   \   000044   95E0         SUBB    A,0xE0 /* A   */
   \   000046   C3           CLR     C
   \   000047   65D0         XRL     A,PSW
   \   000049   33           RLC     A
   \   00004A   50D2         JNC     ??CrossCallReturnLabel_163
   \                     ??bdb_clusterEndpointArrayIncrementAll_5:
   \   00004C   E8           MOV     A,R0
   \   00004D   2406         ADD     A,#0x6
   \   00004F   FC           MOV     R4,A
   \   000050   E4           CLR     A
   \   000051   39           ADDC    A,R1
   \   000052   FD           MOV     R5,A
   \   000053   8C82         MOV     DPL,R4
   \   000055   8D83         MOV     DPH,R5
   \   000057   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00005A   60C2         JZ      ??CrossCallReturnLabel_163
   \   00005C   74FF         MOV     A,#-0x1
   \   00005E   65..         XRL     A,?V0
   \   000060   7004         JNZ     ??bdb_clusterEndpointArrayIncrementAll_6
   \   000062   74FF         MOV     A,#-0x1
   \   000064   65..         XRL     A,?V1
   \                     ??bdb_clusterEndpointArrayIncrementAll_6:
   \   000066   60B6         JZ      ??CrossCallReturnLabel_163
   \   000068   E8           MOV     A,R0
   \   000069   2408         ADD     A,#0x8
   \   00006B   FE           MOV     R6,A
   \   00006C   E4           CLR     A
   \   00006D   39           ADDC    A,R1
   \   00006E   FF           MOV     R7,A
   \   00006F   8E82         MOV     DPL,R6
   \   000071   8F83         MOV     DPH,R7
   \   000073   E0           MOVX    A,@DPTR
   \   000074   2A           ADD     A,R2
   \   000075   F5..         MOV     ?V4,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   3B           ADDC    A,R3
   \   00007A   F5..         MOV     ?V5,A
   \   00007C   C3           CLR     C
   \   00007D   E5..         MOV     A,?V0
   \   00007F   95..         SUBB    A,?V4
   \   000081   E5..         MOV     A,?V1
   \   000083   95..         SUBB    A,?V5
   \   000085   5085         JNC     ??bdb_clusterEndpointArrayIncrementAll_1
   \   000087   8C82         MOV     DPL,R4
   \   000089   8D83         MOV     DPH,R5
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   FC           MOV     R4,A
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   8085         SJMP    ??bdb_clusterEndpointArrayIncrementAll_2
   1188                
   1189              }
   1190            }
   1191          }
   \                     ??bdb_clusterEndpointArrayIncrementAll_4:
   \   000091   7F06         MOV     R7,#0x6
   \   000093   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   75F00D       MOV     B,#0xd
   \   000003   A4           MUL     AB
   \   000004   F8           MOV     R0,A
   \   000005   A9F0         MOV     R1,B
   \   000007   74..         MOV     A,#bdb_reportingClusterEndpointArray & 0xff
   \   000009   28           ADD     A,R0
   \   00000A   F8           MOV     R0,A
   \   00000B   74..         MOV     A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
   \   00000D   39           ADDC    A,R1
   \   00000E   F9           MOV     R1,A
   \   00000F   8882         MOV     DPL,R0
   \   000011   8983         MOV     DPH,R1
   \   000013   E0           MOVX    A,@DPTR
   \   000014   A2E0         MOV     C,0xE0 /* A   */.0
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000003   E5..         MOV     A,?V0
   \   000005   45..         ORL     A,?V1
   \   000007   22           RET
   1192          
   1193          /*
   1194          * End: Cluster-endpoint array live data methods
   1195          */
   1196          
   1197          
   1198          /* 
   1199          * Begin: Single linked list default attr cfg records methods
   1200          */
   1201          
   1202          static void bdb_repAttrDefaultCfgRecordInitValues( bdbReportAttrDefaultCfgData_t* item )
   1203          {
   1204            uint8 i;
   1205            for( i=0; i<BDBREPORTING_MAX_ANALOG_ATTR_SIZE; i++ )
   1206            {
   1207              item->reportableChange[i] = 0x00;
   1208            }
   1209            item->attrID = 0x0000;
   1210            item->endpoint = 0xFF;
   1211            item->cluster = 0xFFFF;
   1212            item->maxReportInt = 0x0000;
   1213            item->minReportInt = 0x0000;
   1214          }
   1215          
   1216          static void bdb_repAttrDefaultCfgRecordsLinkedListInit( bdbRepAttrDefaultCfgRecordLinkedList_t *list )
   1217          {
   1218            list->head = NULL;
   1219            list->numItems = 0;
   1220          }
   1221          
   1222          static uint8 bdb_repAttrDefaultCfgRecordsLinkedListAdd( bdbRepAttrDefaultCfgRecordLinkedList_t *list, bdbReportAttrDefaultCfgData_t* data )
   1223          {
   1224            bdbRepAttrDefaultCfgRecordLinkedListItem_t* newItem = (bdbRepAttrDefaultCfgRecordLinkedListItem_t *)osal_mem_alloc( sizeof(bdbRepAttrDefaultCfgRecordLinkedListItem_t ) );
   1225            if( newItem == NULL )
   1226            {
   1227              return BDBREPORTING_ERROR;
   1228            }
   1229            newItem->data = data;
   1230            newItem->next = list->head;
   1231            list->head = newItem;
   1232            list->numItems++;
   1233            return BDBREPORTING_SUCCESS;
   1234          }
   1235          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1236          static bdbRepAttrDefaultCfgRecordLinkedListItem_t* bdb_repAttrDefaultCfgRecordsLinkedListSearch( bdbRepAttrDefaultCfgRecordLinkedList_t *list, bdbReportAttrDefaultCfgData_t searchdata )
   \                     bdb_repAttrDefaultCfgRecordsLinkedListSearch:
   1237          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1238            bdbRepAttrDefaultCfgRecordLinkedListItem_t* cur = list->head;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   8005         SJMP    ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_0
   1239            while( cur != NULL )
   1240            {
   1241              if( EQUAL_LLISTCFGATTRITEMDATA( (*(cur->data)), searchdata) )
   1242              {
   1243                return cur;
   1244              }
   1245              cur = cur->next;
   \                     ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_1:
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \                     ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_0:
   \   00000F   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000012   603F         JZ      ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_2
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FC           MOV     R4,A
   \   00001D   85..82       MOV     DPL,?XSP + 0
   \   000020   85..83       MOV     DPH,?XSP + 1
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6C           XRL     A,R4
   \   000025   70E3         JNZ     ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_1
   \   000027   8882         MOV     DPL,R0
   \   000029   8983         MOV     DPH,R1
   \   00002B   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   00002E   7403         MOV     A,#0x3
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E0           MOVX    A,@DPTR
   \   000034   6C           XRL     A,R4
   \   000035   7003         JNZ     ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_3
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   6D           XRL     A,R5
   \                     ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_3:
   \   00003A   70CE         JNZ     ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_1
   \   00003C   8882         MOV     DPL,R0
   \   00003E   8983         MOV     DPH,R1
   \   000040   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000043   7401         MOV     A,#0x1
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E0           MOVX    A,@DPTR
   \   000049   68           XRL     A,R0
   \   00004A   7003         JNZ     ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_4
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   69           XRL     A,R1
   \                     ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_4:
   \   00004F   70B9         JNZ     ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_1
   \   000051   8004         SJMP    ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_5
   1246            }
   1247            return NULL;
   \                     ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_2:
   \   000053   7A00         MOV     R2,#0x0
   \   000055   7B00         MOV     R3,#0x0
   \                     ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_5:
   \   000057   80..         SJMP    ??Subroutine89_0
   1248          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine87_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine88_0
   \   000001                ; // Fall through to label ??Subroutine88_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine88_0:
   \   000000   12....       LCALL   ??Subroutine94_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000003   EA           MOV     A,R2
   \   000004   4B           ORL     A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   22           RET
   1249          
   1250          static bdbReportAttrDefaultCfgData_t* bdb_repAttrDefaultCfgRecordsLinkedListRemove( bdbRepAttrDefaultCfgRecordLinkedList_t *list )
   1251          {
   1252            bdbReportAttrDefaultCfgData_t* resdata = NULL;
   1253            bdbRepAttrDefaultCfgRecordLinkedListItem_t* cur = list->head;
   1254            if( list->head == NULL )
   1255            {
   1256              return NULL;
   1257            }
   1258            list->head = cur->next;
   1259            resdata =cur->data;
   1260            osal_mem_free( cur );
   1261            list->numItems--;
   1262            return resdata;
   1263          }
   1264          
   1265          static uint8 bdb_repAttrDefaultCfgRecordsLinkedListFreeAll( bdbRepAttrDefaultCfgRecordLinkedList_t *list )
   1266          {
   1267            bdbReportAttrDefaultCfgData_t* toremovedata;
   1268            while( list->head != NULL )
   1269            {
   1270              toremovedata = bdb_repAttrDefaultCfgRecordsLinkedListRemove( list );
   1271              osal_mem_free( toremovedata );
   1272            }
   1273            return BDBREPORTING_SUCCESS;
   1274          }
   1275          
   1276          /* 
   1277          * End: Single linked list default attr cfg records methods
   1278          */
   1279          
   1280          
   1281          /*
   1282          * Begin: Reporting attr configuration array methods
   1283          */
   1284          
   1285          static void bdb_repAttrCfgRecordsArrayInit( void )
   1286          {
   1287            bdb_reportingAttrCfgRecordsArray = NULL;
   1288            bdb_reportingAttrCfgRecordsArrayCount = 0;
   1289          }
   1290          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1291          static uint8 bdb_repAttrCfgRecordsArrayCreate( uint8 maxNumRepAttrConfRecords )
   \                     bdb_repAttrCfgRecordsArrayCreate:
   1292          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   1293            if( maxNumRepAttrConfRecords==0 )
   \   000006   6022         JZ      ??bdb_repAttrCfgRecordsArrayCreate_0
   1294            {
   1295              return BDBREPORTING_SUCCESS;
   1296            }
   1297          
   1298            bdb_reportingAttrCfgRecordsArrayMaxSize = maxNumRepAttrConfRecords;
   \   000008   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArrayMaxSize
   \   00000B   F0           MOVX    @DPTR,A
   1299            bdb_reportingAttrCfgRecordsArray= (bdbReportAttrCfgData_t *)osal_mem_alloc( sizeof( bdbReportAttrCfgData_t )*bdb_reportingAttrCfgRecordsArrayMaxSize );
   \   00000C                ; Setup parameters for call to function osal_mem_alloc
   \   00000C   75F015       MOV     B,#0x15
   \   00000F   A4           MUL     AB
   \   000010   FA           MOV     R2,A
   \   000011   ABF0         MOV     R3,B
   \   000013   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000016   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArray
   \   000019   12....       LCALL   ??Subroutine85_0 & 0xFFFF
   1300            bdb_reportingAttrCfgRecordsArrayCount = 0;
   \                     ??CrossCallReturnLabel_140:
   \   00001C   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   00001F   E4           CLR     A
   \   000020   F0           MOVX    @DPTR,A
   1301            if( bdb_reportingAttrCfgRecordsArray==NULL )
   \   000021   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000024   7004         JNZ     ??bdb_repAttrCfgRecordsArrayCreate_0
   1302            {
   1303              return BDBREPORTING_ERROR;
   \   000026   7901         MOV     R1,#0x1
   \   000028   8002         SJMP    ??bdb_repAttrCfgRecordsArrayCreate_1
   1304            }
   1305            return BDBREPORTING_SUCCESS;
   \                     ??bdb_repAttrCfgRecordsArrayCreate_0:
   \   00002A   7900         MOV     R1,#0x0
   \                     ??bdb_repAttrCfgRecordsArrayCreate_1:
   \   00002C   02....       LJMP    ?Subroutine1 & 0xFFFF
   1306          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArray
   \   000003                REQUIRE ??Subroutine91_0
   \   000003                ; // Fall through to label ??Subroutine91_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine91_0:
   \   000000   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET
   1307          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1308          static uint8 bdb_repAttrCfgRecordsArrayAdd( uint8 endpoint, uint16 cluster, uint16 attrID, uint16 minReportInt, uint16 maxReportInt, uint8  reportableChange[], 
   \                     bdb_repAttrCfgRecordsArrayAdd:
   1309                                                     uint16 defMinReportInt, uint16 defMaxReportInt, uint8 defReportChange[] )
   1310          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   1311            if( bdb_reportingAttrCfgRecordsArray==NULL )
   \   00000B   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   00000E   600D         JZ      ??bdb_repAttrCfgRecordsArrayAdd_0
   1312            {
   1313              return BDBREPORTING_ERROR;
   1314            }
   1315            if( bdb_reportingAttrCfgRecordsArrayCount>=bdb_reportingAttrCfgRecordsArrayMaxSize )
   \   000010   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArrayMaxSize
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   000018   E0           MOVX    A,@DPTR
   \   000019   C3           CLR     C
   \   00001A   98           SUBB    A,R0
   \   00001B   4005         JC      ??bdb_repAttrCfgRecordsArrayAdd_1
   1316            {
   1317              return BDBREPORTING_ERROR;
   \                     ??bdb_repAttrCfgRecordsArrayAdd_0:
   \   00001D   7901         MOV     R1,#0x1
   \   00001F   02....       LJMP    ??bdb_repAttrCfgRecordsArrayAdd_2 & 0xFFFF
   1318            }
   1319            
   1320            bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].endpoint = endpoint;
   \                     ??bdb_repAttrCfgRecordsArrayAdd_1:
   \   000022   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000025   8A82         MOV     DPL,R2
   \   000027   F583         MOV     DPH,A
   \   000029   EE           MOV     A,R6
   \   00002A   F0           MOVX    @DPTR,A
   1321            bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].cluster = cluster;
   \   00002B   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   00002E   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000031   F8           MOV     R0,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   39           ADDC    A,R1
   \   000035   F9           MOV     R1,A
   \   000036   E8           MOV     A,R0
   \   000037   FA           MOV     R2,A
   \   000038   E9           MOV     A,R1
   \   000039   FB           MOV     R3,A
   \   00003A   8A82         MOV     DPL,R2
   \   00003C   8B83         MOV     DPH,R3
   \   00003E   A3           INC     DPTR
   \   00003F   E5..         MOV     A,?V0
   \   000041   F0           MOVX    @DPTR,A
   \   000042   A3           INC     DPTR
   \   000043   E5..         MOV     A,?V1
   \   000045   12....       LCALL   ?Subroutine16 & 0xFFFF
   1322            bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].attrID = attrID;
   \                     ??CrossCallReturnLabel_13:
   \   000048   A3           INC     DPTR
   \   000049   12....       LCALL   ??Subroutine90_0 & 0xFFFF
   1323            bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].minReportInt = minReportInt;
   \                     ??CrossCallReturnLabel_164:
   \   00004C   740B         MOV     A,#0xb
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   12....       LCALL   ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000054   12....       LCALL   ??Subroutine99_0 & 0xFFFF
   1324            bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].maxReportInt = maxReportInt;
   \                     ??CrossCallReturnLabel_219:
   \   000057   740D         MOV     A,#0xd
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   00005F   740F         MOV     A,#0xf
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   12....       LCALL   ?Subroutine22 & 0xFFFF
   1325            if( reportableChange!=NULL )
   \                     ??CrossCallReturnLabel_18:
   \   000067   601B         JZ      ??bdb_repAttrCfgRecordsArrayAdd_3
   1326            {
   1327              osal_memcpy( bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].reportableChange, reportableChange, BDBREPORTING_MAX_ANALOG_ATTR_SIZE );
   \   000069                ; Setup parameters for call to function osal_memcpy
   \   000069   75..00       MOV     ?V2,#0x0
   \   00006C   78..         MOV     R0,#?V0
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000071   7C04         MOV     R4,#0x4
   \   000073   7D00         MOV     R5,#0x0
   \   000075   EA           MOV     A,R2
   \   000076   240D         ADD     A,#0xd
   \   000078   FA           MOV     R2,A
   \   000079   5001         JNC     ??bdb_repAttrCfgRecordsArrayAdd_4
   \   00007B   0B           INC     R3
   \                     ??bdb_repAttrCfgRecordsArrayAdd_4:
   \   00007C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00007F   7403         MOV     A,#0x3
   \   000081   12....       LCALL   ?DEALLOC_XSTACK8
   1328            }
   1329            bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].defaultMinReportInt = defMinReportInt;
   \                     ??bdb_repAttrCfgRecordsArrayAdd_3:
   \   000084   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   000087   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00008A   FB           MOV     R3,A
   \   00008B   7411         MOV     A,#0x11
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000093   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   1330            bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].defaultMaxReportInt = defMaxReportInt;
   \                     ??CrossCallReturnLabel_221:
   \   000096   7413         MOV     A,#0x13
   \   000098   12....       LCALL   ?XSTACK_DISP0_8
   \   00009B   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   00009E   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   0000A1   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   0000A4   7415         MOV     A,#0x15
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   12....       LCALL   ?Subroutine22 & 0xFFFF
   1331            if( defReportChange != NULL )
   \                     ??CrossCallReturnLabel_19:
   \   0000AC   601B         JZ      ??bdb_repAttrCfgRecordsArrayAdd_5
   1332            {
   1333              osal_memcpy( bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].defaultReportableChange, defReportChange, BDBREPORTING_MAX_ANALOG_ATTR_SIZE );   
   \   0000AE                ; Setup parameters for call to function osal_memcpy
   \   0000AE   75..00       MOV     ?V2,#0x0
   \   0000B1   78..         MOV     R0,#?V0
   \   0000B3   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B6   7C04         MOV     R4,#0x4
   \   0000B8   7D00         MOV     R5,#0x0
   \   0000BA   EA           MOV     A,R2
   \   0000BB   2411         ADD     A,#0x11
   \   0000BD   FA           MOV     R2,A
   \   0000BE   5001         JNC     ??bdb_repAttrCfgRecordsArrayAdd_6
   \   0000C0   0B           INC     R3
   \                     ??bdb_repAttrCfgRecordsArrayAdd_6:
   \   0000C1   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000C4   7403         MOV     A,#0x3
   \   0000C6   12....       LCALL   ?DEALLOC_XSTACK8
   1334            }
   1335            bdb_reportingAttrCfgRecordsArrayCount++;
   \                     ??bdb_repAttrCfgRecordsArrayAdd_5:
   \   0000C9   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   04           INC     A
   \   0000CE   F0           MOVX    @DPTR,A
   1336            return BDBREPORTING_SUCCESS;
   \   0000CF   7900         MOV     R1,#0x0
   \                     ??bdb_repAttrCfgRecordsArrayAdd_2:
   \   0000D1   7F03         MOV     R7,#0x3
   \   0000D3   02....       LJMP    ?BANKED_LEAVE_XDATA
   1337          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   39           ADDC    A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   75F015       MOV     B,#0x15
   \   000004   A4           MUL     AB
   \   000005   F8           MOV     R0,A
   \   000006   A9F0         MOV     R1,B
   \   000008   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArray
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   28           ADD     A,R0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET
   1338          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1339          static void bdb_repAttrCfgRecordsArrayFreeAll( void )
   \                     bdb_repAttrCfgRecordsArrayFreeAll:
   1340          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1341            if( bdb_reportingAttrCfgRecordsArray==NULL )
   \   000004   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000007   6014         JZ      ??bdb_repAttrCfgRecordsArrayFreeAll_0
   1342            {
   1343              return;
   1344            }
   1345            osal_mem_free( bdb_reportingAttrCfgRecordsArray );
   \   000009                ; Setup parameters for call to function osal_mem_free
   \   000009   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArray
   \   00000C   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00000F   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1346            bdb_reportingAttrCfgRecordsArrayCount = 0;
   \   000012   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   000015   E4           CLR     A
   \   000016   F0           MOVX    @DPTR,A
   1347            bdb_reportingAttrCfgRecordsArray=NULL;
   \   000017   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArray
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   F0           MOVX    @DPTR,A
   1348          }
   \                     ??bdb_repAttrCfgRecordsArrayFreeAll_0:
   \   00001D   02....       LJMP    ??Subroutine89_0 & 0xFFFF
   1349          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1350          static uint8 bdb_repAttrCfgRecordsArraySearch( uint8 endpoint, uint16 cluster, uint16 attrID )
   \                     bdb_repAttrCfgRecordsArraySearch:
   1351          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   1352            uint8 i;
   1353            if( bdb_reportingAttrCfgRecordsArray == NULL )
   \   000007   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   00000A   603A         JZ      ??bdb_repAttrCfgRecordsArraySearch_0
   1354            {
   1355              return BDBREPORTING_INVALIDINDEX;
   1356            }
   1357            for( i=0; i<bdb_reportingAttrCfgRecordsArrayCount; i++ )
   \   00000C   7E00         MOV     R6,#0x0
   \   00000E   8001         SJMP    ??bdb_repAttrCfgRecordsArraySearch_1
   \                     ??bdb_repAttrCfgRecordsArraySearch_2:
   \   000010   0E           INC     R6
   \                     ??bdb_repAttrCfgRecordsArraySearch_1:
   \   000011   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   000014   12....       LCALL   ??Subroutine92_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000017   502D         JNC     ??bdb_repAttrCfgRecordsArraySearch_0
   1358            {
   1359              if( bdb_reportingAttrCfgRecordsArray[i].endpoint == endpoint && bdb_reportingAttrCfgRecordsArray[i].cluster == cluster && bdb_reportingAttrCfgRecordsArray[i].attrID == attrID )
   \   000019   EE           MOV     A,R6
   \   00001A   75F015       MOV     B,#0x15
   \   00001D   A4           MUL     AB
   \   00001E   F8           MOV     R0,A
   \   00001F   A9F0         MOV     R1,B
   \   000021   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000024   65..         XRL     A,?V0
   \   000026   70E8         JNZ     ??bdb_repAttrCfgRecordsArraySearch_2
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   6A           XRL     A,R2
   \   00002B   7003         JNZ     ??bdb_repAttrCfgRecordsArraySearch_3
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   6B           XRL     A,R3
   \                     ??bdb_repAttrCfgRecordsArraySearch_3:
   \   000030   70DE         JNZ     ??bdb_repAttrCfgRecordsArraySearch_2
   \   000032   8882         MOV     DPL,R0
   \   000034   8983         MOV     DPH,R1
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6C           XRL     A,R4
   \   00003B   7003         JNZ     ??bdb_repAttrCfgRecordsArraySearch_4
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   6D           XRL     A,R5
   \                     ??bdb_repAttrCfgRecordsArraySearch_4:
   \   000040   70CE         JNZ     ??bdb_repAttrCfgRecordsArraySearch_2
   1360              {
   1361                return i;
   \   000042   EE           MOV     A,R6
   \   000043   F9           MOV     R1,A
   \   000044   8002         SJMP    ??bdb_repAttrCfgRecordsArraySearch_5
   1362              }
   1363            }
   1364            return BDBREPORTING_INVALIDINDEX;
   \                     ??bdb_repAttrCfgRecordsArraySearch_0:
   \   000046   79FF         MOV     R1,#-0x1
   \                     ??bdb_repAttrCfgRecordsArraySearch_5:
   \   000048   02....       LJMP    ?Subroutine1 & 0xFFFF
   1365          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
   1366          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1367          static uint8 bdb_repAttrCfgRecordsArrayConsolidateValues( uint8 endpoint, uint16 cluster,  uint16* consolidatedMinReportInt, uint16* consolidatedMaxReportInt )
   \                     bdb_repAttrCfgRecordsArrayConsolidateValues:
   1368          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   1369            uint8 i;
   1370            *consolidatedMinReportInt =0xFFFF;
   \   000007   8C82         MOV     DPL,R4
   \   000009   8D83         MOV     DPH,R5
   \   00000B   74FF         MOV     A,#-0x1
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   7410         MOV     A,#0x10
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000018   E8           MOV     A,R0
   \   000019   FE           MOV     R6,A
   \   00001A   E9           MOV     A,R1
   \   00001B   FF           MOV     R7,A
   1371            *consolidatedMaxReportInt = 0xFFFF;
   \   00001C   8E82         MOV     DPL,R6
   \   00001E   8F83         MOV     DPH,R7
   \   000020   74FF         MOV     A,#-0x1
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   F0           MOVX    @DPTR,A
   1372            uint8 foundAttr = 0;
   \   000025   75..00       MOV     ?V2,#0x0
   1373            if( bdb_reportingAttrCfgRecordsArray == NULL )
   \   000028   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   00002B   7003         JNZ     $+5
   \   00002D   02....       LJMP    ??bdb_repAttrCfgRecordsArrayConsolidateValues_0 & 0xFFFF
   1374            {
   1375              return BDBREPORTING_ERROR;
   1376            }
   1377            for( i=0; i<bdb_reportingAttrCfgRecordsArrayCount; i++ )
   \   000030   75..00       MOV     ?V3,#0x0
   \   000033   8077         SJMP    ??bdb_repAttrCfgRecordsArrayConsolidateValues_1
   1378            {
   1379              if( bdb_reportingAttrCfgRecordsArray[i].endpoint == endpoint && bdb_reportingAttrCfgRecordsArray[i].cluster == cluster )
   \                     ??bdb_repAttrCfgRecordsArrayConsolidateValues_2:
   \   000035   E5..         MOV     A,?V3
   \   000037   75F015       MOV     B,#0x15
   \   00003A   A4           MUL     AB
   \   00003B   F8           MOV     R0,A
   \   00003C   85F0..       MOV     ?V0,B
   \   00003F   A9..         MOV     R1,?V0
   \   000041   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000044   65..         XRL     A,?V4
   \   000046   7062         JNZ     ??bdb_repAttrCfgRecordsArrayConsolidateValues_3
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   6A           XRL     A,R2
   \   00004B   7003         JNZ     ??bdb_repAttrCfgRecordsArrayConsolidateValues_4
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   6B           XRL     A,R3
   \                     ??bdb_repAttrCfgRecordsArrayConsolidateValues_4:
   \   000050   7058         JNZ     ??bdb_repAttrCfgRecordsArrayConsolidateValues_3
   1380              {
   1381                foundAttr++;
   \   000052   05..         INC     ?V2
   \   000054   8882         MOV     DPL,R0
   \   000056   8983         MOV     DPH,R1
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F5..         MOV     ?V6,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F5..         MOV     ?V7,A
   \   000064   8C82         MOV     DPL,R4
   \   000066   8D83         MOV     DPH,R5
   \   000068   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00006B   C3           CLR     C
   \   00006C   E5..         MOV     A,?V6
   \   00006E   95..         SUBB    A,?V0
   \   000070   E5..         MOV     A,?V7
   \   000072   95..         SUBB    A,?V1
   \   000074   500B         JNC     ??bdb_repAttrCfgRecordsArrayConsolidateValues_5
   1382                //Consolidate min value
   1383                if( bdb_reportingAttrCfgRecordsArray[i].minReportInt < *consolidatedMinReportInt )
   1384                {
   1385                  *consolidatedMinReportInt = bdb_reportingAttrCfgRecordsArray[i].minReportInt;
   \   000076   8C82         MOV     DPL,R4
   \   000078   8D83         MOV     DPH,R5
   \   00007A   E5..         MOV     A,?V6
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   A3           INC     DPTR
   \   00007E   E5..         MOV     A,?V7
   \   000080   F0           MOVX    @DPTR,A
   \                     ??bdb_repAttrCfgRecordsArrayConsolidateValues_5:
   \   000081   8882         MOV     DPL,R0
   \   000083   8983         MOV     DPH,R1
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   1386                }
   \   00008C   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00008F   8E82         MOV     DPL,R6
   \   000091   8F83         MOV     DPH,R7
   \   000093   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000096   C3           CLR     C
   \   000097   E5..         MOV     A,?V0
   \   000099   98           SUBB    A,R0
   \   00009A   E5..         MOV     A,?V1
   \   00009C   99           SUBB    A,R1
   \   00009D   500B         JNC     ??bdb_repAttrCfgRecordsArrayConsolidateValues_3
   1387                
   1388                //Consolidate max value
   1389                if( bdb_reportingAttrCfgRecordsArray[i].maxReportInt < *consolidatedMaxReportInt )
   1390                {
   1391                  *consolidatedMaxReportInt = bdb_reportingAttrCfgRecordsArray[i].maxReportInt;
   \   00009F   8E82         MOV     DPL,R6
   \   0000A1   8F83         MOV     DPH,R7
   \   0000A3   E5..         MOV     A,?V0
   \   0000A5   F0           MOVX    @DPTR,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E5..         MOV     A,?V1
   \   0000A9   F0           MOVX    @DPTR,A
   1392                }
   1393              }
   1394            }
   \                     ??bdb_repAttrCfgRecordsArrayConsolidateValues_3:
   \   0000AA   05..         INC     ?V3
   \                     ??bdb_repAttrCfgRecordsArrayConsolidateValues_1:
   \   0000AC   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F8           MOV     R0,A
   \   0000B1   E5..         MOV     A,?V3
   \   0000B3   C3           CLR     C
   \   0000B4   98           SUBB    A,R0
   \   0000B5   5003         JNC     $+5
   \   0000B7   02....       LJMP    ??bdb_repAttrCfgRecordsArrayConsolidateValues_2 & 0xFFFF
   1395            if( foundAttr==0 )
   \   0000BA   E5..         MOV     A,?V2
   \   0000BC   7004         JNZ     ??bdb_repAttrCfgRecordsArrayConsolidateValues_6
   1396            {
   1397              return BDBREPORTING_ERROR;
   \                     ??bdb_repAttrCfgRecordsArrayConsolidateValues_0:
   \   0000BE   7901         MOV     R1,#0x1
   \   0000C0   8002         SJMP    ??bdb_repAttrCfgRecordsArrayConsolidateValues_7
   1398            }
   1399            return BDBREPORTING_SUCCESS;
   \                     ??bdb_repAttrCfgRecordsArrayConsolidateValues_6:
   \   0000C2   7900         MOV     R1,#0x0
   \                     ??bdb_repAttrCfgRecordsArrayConsolidateValues_7:
   \   0000C4   02....       LJMP    ?Subroutine5 & 0xFFFF
   1400          }
   1401          
   1402          /*
   1403          * End: Reporting attr configuration array methods
   1404          */
   1405                            
   1406          
   1407          /*
   1408          * Begin: Helper methods
   1409          */
   1410          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1411          static uint8 bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray( void )
   \                     bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray:
   1412          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1413            uint8 i;
   1414            uint16 consolidatedMinReportInt =0xFFFF;
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   74FF         MOV     A,#-0x1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   F0           MOVX    @DPTR,A
   1415            uint16 consolidatedMaxReportInt = 0xFFFF;
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   F0           MOVX    @DPTR,A
   1416            uint8 status;
   1417            uint8 returnStatus = BDBREPORTING_SUCCESS;
   \   00001D   75..00       MOV     ?V6,#0x0
   1418            if( bdb_reportingAttrCfgRecordsArray == NULL )
   \   000020   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000023   7005         JNZ     ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_1
   1419            {
   1420              return BDBREPORTING_ERROR;
   \   000025   7901         MOV     R1,#0x1
   \   000027   02....       LJMP    ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_2 & 0xFFFF
   1421            }
   1422            for( i=0; i<bdb_reportingAttrCfgRecordsArrayCount; i++ )
   \                     ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_1:
   \   00002A   75..00       MOV     ?V4,#0x0
   \   00002D   02....       LJMP    ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_3 & 0xFFFF
   1423            {
   1424              uint16 curEndpoint = bdb_reportingAttrCfgRecordsArray[i].endpoint;
   1425              uint16 curCluster = bdb_reportingAttrCfgRecordsArray[i].cluster;
   1426              //See if there is already a cluster endpoint item
   1427              uint8 searchedIndex = bdb_clusterEndpointArraySearch( curEndpoint, curCluster );
   1428              if(searchedIndex == BDBREPORTING_INVALIDINDEX)
   1429              {
   1430                //Not found, add entry
   1431                status = bdb_repAttrCfgRecordsArrayConsolidateValues( curEndpoint, curCluster, &consolidatedMinReportInt, &consolidatedMaxReportInt );
   1432                if( status == BDBREPORTING_SUCCESS )
   \                     ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_4:
   \   000030                ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayConsolidateValues
   \   000030   A8..         MOV     R0,?XSP + 0
   \   000032   A9..         MOV     R1,?XSP + 1
   \   000034   88..         MOV     ?V8,R0
   \   000036   89..         MOV     ?V9,R1
   \   000038   78..         MOV     R0,#?V8
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   7404         MOV     A,#0x4
   \   00003F   12....       LCALL   ?XSTACK_DISP102_8
   \   000042   AA..         MOV     R2,?V2
   \   000044   AB..         MOV     R3,?V3
   \   000046   EE           MOV     A,R6
   \   000047   F9           MOV     R1,A
   \   000048   12....       LCALL   `??bdb_repAttrCfgRecordsArrayConsolidateValues::`; Banked call to: bdb_repAttrCfgRecordsArrayConsolidateValues
   \   00004B   7402         MOV     A,#0x2
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000050   E9           MOV     A,R1
   \   000051   707D         JNZ     ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_5
   1433                {
   1434                  status = bdb_clusterEndpointArrayAdd( curEndpoint, curCluster, consolidatedMinReportInt, consolidatedMaxReportInt, 0 );
   1435                  if( status == BDBREPORTING_SUCCESS )
   \   000053                ; Setup parameters for call to function bdb_clusterEndpointArrayAdd
   \   000053   E4           CLR     A
   \   000054   F5..         MOV     ?V8,A
   \   000056   F5..         MOV     ?V9,A
   \   000058   78..         MOV     R0,#?V8
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   7402         MOV     A,#0x2
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000065   7406         MOV     A,#0x6
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   00006D   AA..         MOV     R2,?V2
   \   00006F   AB..         MOV     R3,?V3
   \   000071   EE           MOV     A,R6
   \   000072   F9           MOV     R1,A
   \   000073   12....       LCALL   `??bdb_clusterEndpointArrayAdd::?relay`; Banked call to: bdb_clusterEndpointArrayAdd
   \   000076   7404         MOV     A,#0x4
   \   000078   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007B   E9           MOV     A,R1
   \   00007C   6003         JZ      $+5
   \   00007E   02....       LJMP    ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_6 & 0xFFFF
   1436                  {
   1437                    //Add attr value
   1438                    bdbReportAttrLive_t* newItemData;
   1439                    newItemData = (bdbReportAttrLive_t *)osal_mem_alloc( sizeof(bdbReportAttrLive_t) );
   \   000081                ; Setup parameters for call to function osal_mem_alloc
   \   000081   7A0A         MOV     R2,#0xa
   \   000083   7B00         MOV     R3,#0x0
   \   000085   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000088   8A..         MOV     ?V2,R2
   \   00008A   8B..         MOV     ?V3,R3
   \   00008C   AE..         MOV     R6,?V2
   \   00008E   AF..         MOV     R7,?V3
   1440                    if( newItemData == NULL )
   \   000090   EE           MOV     A,R6
   \   000091   4F           ORL     A,R7
   \   000092   7003         JNZ     $+5
   \   000094   02....       LJMP    ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_6 & 0xFFFF
   1441                    {
   1442                      //Out of memory
   1443                      returnStatus = BDBREPORTING_OUTOFMEMORYERROR;
   1444                      break;
   1445                    }
   1446                    bdb_InitReportAttrLiveValues( newItemData );
   \   000097                ; Setup parameters for call to function bdb_InitReportAttrLiveValues
   \   000097   12....       LCALL   `??bdb_InitReportAttrLiveValues::?relay`; Banked call to: bdb_InitReportAttrLiveValues
   1447                    newItemData->attrID = bdb_reportingAttrCfgRecordsArray[i].attrID;
   \   00009A   12....       LCALL   ?Subroutine8 & 0xFFFF
   1448                    osal_memcpy( newItemData->reportableChange, bdb_reportingAttrCfgRecordsArray[i].reportableChange, BDBREPORTING_MAX_ANALOG_ATTR_SIZE );
   \                     ??CrossCallReturnLabel_0:
   \   00009D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A0   7C04         MOV     R4,#0x4
   \   0000A2   7D00         MOV     R5,#0x0
   \   0000A4   EE           MOV     A,R6
   \   0000A5   2406         ADD     A,#0x6
   \   0000A7   FA           MOV     R2,A
   \   0000A8   E4           CLR     A
   \   0000A9   3F           ADDC    A,R7
   \   0000AA   FB           MOV     R3,A
   \   0000AB   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000AE   7403         MOV     A,#0x3
   \   0000B0   12....       LCALL   ?DEALLOC_XSTACK8
   1449                    
   1450                    status = bdb_linkedListAttrAdd( &(bdb_reportingClusterEndpointArray[bdb_reportingClusterEndpointArrayCount-1].attrLinkedList), newItemData );
   1451                    if( status == BDBREPORTING_ERROR )
   \   0000B3                ; Setup parameters for call to function bdb_linkedListAttrAdd
   \   0000B3   EE           MOV     A,R6
   \   0000B4   FC           MOV     R4,A
   \   0000B5   EF           MOV     A,R7
   \   0000B6   FD           MOV     R5,A
   \   0000B7   90....       MOV     DPTR,#bdb_reportingClusterEndpointArrayCount
   \   0000BA   12....       LCALL   ?Subroutine72 & 0xFFFF
   1452                    {
   1453                      returnStatus = BDBREPORTING_OUTOFMEMORYERROR;
   1454                      break;
   1455                    }
   1456                  }
   1457                  else
   1458                  {
   1459                    //Out of memory,
   1460                    returnStatus = BDBREPORTING_OUTOFMEMORYERROR;
   1461                    break;
   1462                  }
   1463                }
   1464              }
   \                     ??CrossCallReturnLabel_119:
   \   0000BD   74..         MOV     A,#(bdb_reportingClusterEndpointArray + 253) & 0xff
   \   0000BF   28           ADD     A,R0
   \   0000C0   FA           MOV     R2,A
   \   0000C1   74..         MOV     A,#((bdb_reportingClusterEndpointArray - 3) >> 8) & 0xff
   \   0000C3   39           ADDC    A,R1
   \   0000C4   FB           MOV     R3,A
   \   0000C5   12....       LCALL   `??bdb_linkedListAttrAdd::?relay`; Banked call to: bdb_linkedListAttrAdd
   \   0000C8   E9           MOV     A,R1
   \   0000C9   6401         XRL     A,#0x1
   \   0000CB   7003         JNZ     $+5
   \   0000CD   02....       LJMP    ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_6 & 0xFFFF
   \                     ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_5:
   \   0000D0   05..         INC     ?V4
   \                     ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_3:
   \   0000D2   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   F8           MOV     R0,A
   \   0000D7   E5..         MOV     A,?V4
   \   0000D9   C3           CLR     C
   \   0000DA   98           SUBB    A,R0
   \   0000DB   4003         JC      $+5
   \   0000DD   02....       LJMP    ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_7 & 0xFFFF
   \   0000E0   85....       MOV     ?V0,?V4
   \   0000E3   E5..         MOV     A,?V0
   \   0000E5   75F015       MOV     B,#0x15
   \   0000E8   A4           MUL     AB
   \   0000E9   F5..         MOV     ?V0,A
   \   0000EB   E5F0         MOV     A,B
   \   0000ED   F5..         MOV     ?V1,A
   \   0000EF   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   FE           MOV     R6,A
   \   0000F4   A3           INC     DPTR
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   F5..         MOV     ?V2,A
   \   0000F8   A3           INC     DPTR
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   F5..         MOV     ?V3,A
   \   0000FC                ; Setup parameters for call to function bdb_clusterEndpointArraySearch
   \   0000FC   AA..         MOV     R2,?V2
   \   0000FE   FB           MOV     R3,A
   \   0000FF   EE           MOV     A,R6
   \   000100   F9           MOV     R1,A
   \   000101   12....       LCALL   `??bdb_clusterEndpointArraySearch::?relay`; Banked call to: bdb_clusterEndpointArraySearch
   \   000104   E9           MOV     A,R1
   \   000105   F5..         MOV     ?V5,A
   \   000107   74FF         MOV     A,#-0x1
   \   000109   65..         XRL     A,?V5
   \   00010B   7003         JNZ     $+5
   \   00010D   02....       LJMP    ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_4 & 0xFFFF
   1465              else
   1466              {
   1467                //Entry found, just add attr data to linked list
   1468                bdbReportAttrLive_t* newItemData;
   1469                newItemData = (bdbReportAttrLive_t *)osal_mem_alloc( sizeof( bdbReportAttrLive_t ) );
   \   000110                ; Setup parameters for call to function osal_mem_alloc
   \   000110   7A0A         MOV     R2,#0xa
   \   000112   7B00         MOV     R3,#0x0
   \   000114   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000117   8A..         MOV     ?V2,R2
   \   000119   8B..         MOV     ?V3,R3
   \   00011B   AE..         MOV     R6,?V2
   \   00011D   AF..         MOV     R7,?V3
   1470                if( newItemData == NULL )
   \   00011F   EE           MOV     A,R6
   \   000120   4F           ORL     A,R7
   \   000121   603C         JZ      ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_6
   1471                {
   1472                  returnStatus = BDBREPORTING_OUTOFMEMORYERROR;
   1473                  break;
   1474                }
   1475                bdb_InitReportAttrLiveValues( newItemData );
   \   000123                ; Setup parameters for call to function bdb_InitReportAttrLiveValues
   \   000123   12....       LCALL   `??bdb_InitReportAttrLiveValues::?relay`; Banked call to: bdb_InitReportAttrLiveValues
   1476                newItemData->attrID = bdb_reportingAttrCfgRecordsArray[i].attrID;
   \   000126   12....       LCALL   ?Subroutine8 & 0xFFFF
   1477                osal_memcpy( newItemData->reportableChange, bdb_reportingAttrCfgRecordsArray[i].reportableChange, BDBREPORTING_MAX_ANALOG_ATTR_SIZE );
   \                     ??CrossCallReturnLabel_1:
   \   000129   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00012C   7C04         MOV     R4,#0x4
   \   00012E   7D00         MOV     R5,#0x0
   \   000130   EE           MOV     A,R6
   \   000131   2406         ADD     A,#0x6
   \   000133   FA           MOV     R2,A
   \   000134   E4           CLR     A
   \   000135   3F           ADDC    A,R7
   \   000136   FB           MOV     R3,A
   \   000137   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00013A   7403         MOV     A,#0x3
   \   00013C   12....       LCALL   ?DEALLOC_XSTACK8
   1478                
   1479                status = bdb_linkedListAttrAdd( &(bdb_reportingClusterEndpointArray[searchedIndex].attrLinkedList), newItemData );
   1480                if( status == BDBREPORTING_ERROR )
   \   00013F                ; Setup parameters for call to function bdb_linkedListAttrAdd
   \   00013F   EE           MOV     A,R6
   \   000140   FC           MOV     R4,A
   \   000141   EF           MOV     A,R7
   \   000142   FD           MOV     R5,A
   \   000143   E5..         MOV     A,?V5
   \   000145   75F00D       MOV     B,#0xd
   \   000148   A4           MUL     AB
   \   000149   F8           MOV     R0,A
   \   00014A   A9F0         MOV     R1,B
   \   00014C   74..         MOV     A,#(bdb_reportingClusterEndpointArray + 10) & 0xff
   \   00014E   28           ADD     A,R0
   \   00014F   FA           MOV     R2,A
   \   000150   74..         MOV     A,#((bdb_reportingClusterEndpointArray + 10) >> 8) & 0xff
   \   000152   39           ADDC    A,R1
   \   000153   FB           MOV     R3,A
   \   000154   12....       LCALL   `??bdb_linkedListAttrAdd::?relay`; Banked call to: bdb_linkedListAttrAdd
   \   000157   E9           MOV     A,R1
   \   000158   6401         XRL     A,#0x1
   \   00015A   6003         JZ      $+5
   \   00015C   02....       LJMP    ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_5 & 0xFFFF
   1481                {
   1482                  returnStatus = BDBREPORTING_OUTOFMEMORYERROR;
   \                     ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_6:
   \   00015F   75..02       MOV     ?V6,#0x2
   1483                  break;
   1484                }
   1485              
   1486              }
   1487            }
   1488            return returnStatus;
   \                     ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_7:
   \   000162   A9..         MOV     R1,?V6
   \                     ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_2:
   \   000164   7404         MOV     A,#0x4
   \   000166   12....       LCALL   ?DEALLOC_XSTACK8
   \   000169   7F0A         MOV     R7,#0xa
   \   00016B   02....       LJMP    ?BANKED_LEAVE_XDATA
   1489          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000009   EA           MOV     A,R2
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   EB           MOV     A,R3
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E                ; Setup parameters for call to function osal_memcpy
   \   00000E                ; Setup parameters for call to function osal_memcpy
   \   00000E   E8           MOV     A,R0
   \   00000F   240D         ADD     A,#0xd
   \   000011   F5..         MOV     ?V0,A
   \   000013   E4           CLR     A
   \   000014   39           ADDC    A,R1
   \   000015   F5..         MOV     ?V1,A
   \   000017   75..00       MOV     ?V2,#0x0
   \   00001A   78..         MOV     R0,#?V0
   \   00001C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArray
   \   000003   E0           MOVX    A,@DPTR
   \   000004   25..         ADD     A,?V0
   \   000006   F8           MOV     R0,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   35..         ADDC    A,?V1
   \   00000B   F9           MOV     R1,A
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \   000010   22           RET
   1490          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1491          static void bdb_RepInitAttrCfgRecords( void )
   \                     bdb_RepInitAttrCfgRecords:
   1492          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1493            bdb_RepConstructAttrCfgArray( ); //Here bdb_reportingAttrCfgRecordsArray is filled
   \   000005                ; Setup parameters for call to function bdb_RepConstructAttrCfgArray
   \   000005   12....       LCALL   `??bdb_RepConstructAttrCfgArray::?relay`; Banked call to: bdb_RepConstructAttrCfgArray
   1494            
   1495            uint8 status = osal_nv_item_init( ZCD_NV_BDBREPORTINGCONFIG, sizeof( bdbReportAttrCfgData_t )*bdb_reportingAttrCfgRecordsArrayCount, bdb_reportingAttrCfgRecordsArray );
   \   000008                ; Setup parameters for call to function osal_nv_item_init
   \   000008   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArray
   \   00000B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00000E   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000011   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000014   7402         MOV     A,#0x2
   \   000016   12....       LCALL   ?DEALLOC_XSTACK8
   \   000019   E9           MOV     A,R1
   \   00001A   F8           MOV     R0,A
   1496            if( status == NV_OPER_FAILED )
   \   00001B   740A         MOV     A,#0xa
   \   00001D   68           XRL     A,R0
   \   00001E   607B         JZ      ??bdb_RepInitAttrCfgRecords_0
   1497            {
   1498              return;
   1499            }
   1500            else
   1501            {
   1502                if( status == NV_ITEM_UNINIT )
   \   000020   7409         MOV     A,#0x9
   \   000022   68           XRL     A,R0
   \   000023   606E         JZ      ??bdb_RepInitAttrCfgRecords_1
   1503                {
   1504                  //Do nothing because the reporting cf array data was written in the osal_nv_item method
   1505                }
   1506                else
   1507                {
   1508                  //SUCCESS, There is NV data, read the data
   1509                  bdb_repAttrCfgRecordsArrayFreeAll(); //Clear previous cfg data
   \   000025                ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayFreeAll
   \   000025   12....       LCALL   `??bdb_repAttrCfgRecordsArrayFreeAll::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayFreeAll
   1510                  uint16 sizeNVRecord = osal_nv_item_len(ZCD_NV_BDBREPORTINGCONFIG);
   1511                  uint8 attrCfgRecordsArrayCount = sizeNVRecord / sizeof(bdbReportAttrCfgData_t);
   \   000028                ; Setup parameters for call to function osal_nv_item_len
   \   000028   7A56         MOV     R2,#0x56
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   00002F   EA           MOV     A,R2
   \   000030   F8           MOV     R0,A
   \   000031   EB           MOV     A,R3
   \   000032   F9           MOV     R1,A
   \   000033   7A15         MOV     R2,#0x15
   \   000035   7B00         MOV     R3,#0x0
   \   000037   12....       LCALL   ?US_DIV_MOD
   \   00003A   E8           MOV     A,R0
   \   00003B   FE           MOV     R6,A
   1512                  
   1513                  status =  bdb_repAttrCfgRecordsArrayCreate(attrCfgRecordsArrayCount);
   1514                  if( status == BDBREPORTING_ERROR )
   \   00003C                ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayCreate
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   `??bdb_repAttrCfgRecordsArrayCreate::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayCreate
   \   000040   E9           MOV     A,R1
   \   000041   6401         XRL     A,#0x1
   \   000043   6056         JZ      ??bdb_RepInitAttrCfgRecords_0
   1515                  {
   1516                    return; // No memory
   1517                  }
   1518                  osal_nv_read( ZCD_NV_BDBREPORTINGCONFIG,0, sizeof( bdbReportAttrCfgData_t )*attrCfgRecordsArrayCount ,bdb_reportingAttrCfgRecordsArray );
   \   000045                ; Setup parameters for call to function osal_nv_read
   \   000045   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArray
   \   000048   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00004B   EE           MOV     A,R6
   \   00004C   75F015       MOV     B,#0x15
   \   00004F   A4           MUL     AB
   \   000050   F5..         MOV     ?V0,A
   \   000052   E5F0         MOV     A,B
   \   000054   F5..         MOV     ?V1,A
   \   000056   78..         MOV     R0,#?V0
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005B   7C00         MOV     R4,#0x0
   \   00005D   7D00         MOV     R5,#0x0
   \   00005F   7A56         MOV     R2,#0x56
   \   000061   7B00         MOV     R3,#0x0
   \   000063   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000066   7404         MOV     A,#0x4
   \   000068   12....       LCALL   ?DEALLOC_XSTACK8
   1519                  bdb_reportingAttrCfgRecordsArrayCount = attrCfgRecordsArrayCount;
   \   00006B   EE           MOV     A,R6
   \   00006C   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   8021         SJMP    ??bdb_RepInitAttrCfgRecords_1
   1520                }     
   1521            }  
   \                     ??bdb_RepInitAttrCfgRecords_2:
   \   000072   8A82         MOV     DPL,R2
   \   000074   8B83         MOV     DPH,R3
   \   000076   12....       LCALL   ??Subroutine95_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000079   90....       MOV     DPTR,#attrDefaultCfgRecordLinkedList + 1
   \   00007C   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00007F   FE           MOV     R6,A
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   FF           MOV     R7,A
   \   000083                ; Setup parameters for call to function osal_mem_free
   \   000083   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000086   90....       MOV     DPTR,#attrDefaultCfgRecordLinkedList
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   14           DEC     A
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C                ; Setup parameters for call to function osal_mem_free
   \   00008C   EE           MOV     A,R6
   \   00008D   FA           MOV     R2,A
   \   00008E   EF           MOV     A,R7
   \   00008F   FB           MOV     R3,A
   \   000090   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??bdb_RepInitAttrCfgRecords_1:
   \   000093   90....       MOV     DPTR,#attrDefaultCfgRecordLinkedList + 1
   \   000096   12....       LCALL   ??Subroutine88_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000099   70D7         JNZ     ??bdb_RepInitAttrCfgRecords_2
   1522            
   1523            bdb_repAttrDefaultCfgRecordsLinkedListFreeAll( &attrDefaultCfgRecordLinkedList ); //Free the attr default cfg list
   1524          }
   \                     ??bdb_RepInitAttrCfgRecords_0:
   \   00009B   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET
   1525          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1526          static uint8 bdb_RepConstructAttrCfgArray( void )
   \                     bdb_RepConstructAttrCfgArray:
   1527          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1528             epList_t *epCur =  epList;
   1529             uint8 status;
   1530             uint8 i;
   1531             
   1532             if( bdb_reportingAttrCfgRecordsArray != NULL )
   \   00000A   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   00000D   6003         JZ      ??bdb_RepConstructAttrCfgArray_0
   1533             {
   1534               bdb_repAttrCfgRecordsArrayFreeAll( );
   \   00000F                ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayFreeAll
   \   00000F   12....       LCALL   `??bdb_repAttrCfgRecordsArrayFreeAll::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayFreeAll
   1535             }
   1536             
   1537             uint8 numRepAttr = 0;
   \                     ??bdb_RepConstructAttrCfgArray_0:
   \   000012   7F00         MOV     R7,#0x0
   1538             //First count the number of reportable attributes accross all endpoints
   1539             for ( epCur = epList; epCur != NULL; epCur = epCur->nextDesc )
   \   000014   90....       MOV     DPTR,#epList
   \   000017   805F         SJMP    ??bdb_RepConstructAttrCfgArray_1
   1540             {
   1541               zclAttrRecsList* attrItem = zclFindAttrRecsList( epCur->epDesc->endPoint );
   \                     ??bdb_RepConstructAttrCfgArray_2:
   \   000019                ; Setup parameters for call to function zclFindAttrRecsList
   \   000019   85..82       MOV     DPL,?V0
   \   00001C   85..83       MOV     DPH,?V1
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000024   12....       LCALL   `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   1542               if( attrItem== NULL )
   \   000027   EA           MOV     A,R2
   \   000028   4B           ORL     A,R3
   \   000029   6047         JZ      ??bdb_RepConstructAttrCfgArray_3
   1543               {
   1544                 continue;
   1545               }
   1546               if( attrItem->numAttributes > 0 )
   \   00002B   8A82         MOV     DPL,R2
   \   00002D   8B83         MOV     DPH,R3
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   6038         JZ      ??bdb_RepConstructAttrCfgArray_3
   1547               {
   1548                   for ( i = 0; i < attrItem->numAttributes; i++ )
   \   00003A   7E00         MOV     R6,#0x0
   1549                   {
   1550                     if( attrItem->attrs[i].attr.accessControl & ACCESS_REPORTABLE )
   \                     ??bdb_RepConstructAttrCfgArray_4:
   \   00003C   8E..         MOV     ?V2,R6
   \   00003E   75..00       MOV     ?V3,#0x0
   \   000041   7403         MOV     A,#0x3
   \   000043   78..         MOV     R0,#?V2
   \   000045   12....       LCALL   ?S_SHL
   \   000048   8A82         MOV     DPL,R2
   \   00004A   8B83         MOV     DPH,R3
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   25..         ADD     A,?V2
   \   000057   F8           MOV     R0,A
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   35..         ADDC    A,?V3
   \   00005C   8882         MOV     DPL,R0
   \   00005E   F583         MOV     DPH,A
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   E4           CLR     A
   \   000066   93           MOVC    A,@A+DPTR
   \   000067   A2E2         MOV     C,0xE0 /* A   */.2
   \   000069   5001         JNC     ??bdb_RepConstructAttrCfgArray_5
   1551                     {
   1552                       numRepAttr++;  
   \   00006B   0F           INC     R7
   1553                     }
   1554                   }
   \                     ??bdb_RepConstructAttrCfgArray_5:
   \   00006C   0E           INC     R6
   \   00006D   EE           MOV     A,R6
   \   00006E   C3           CLR     C
   \   00006F   99           SUBB    A,R1
   \   000070   40CA         JC      ??bdb_RepConstructAttrCfgArray_4
   1555               }
   1556             }
   \                     ??bdb_RepConstructAttrCfgArray_3:
   \   000072   85..82       MOV     DPL,?V0
   \   000075   85..83       MOV     DPH,?V1
   \                     ??bdb_RepConstructAttrCfgArray_1:
   \   000078   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00007B   709C         JNZ     ??bdb_RepConstructAttrCfgArray_2
   1557             status =  bdb_repAttrCfgRecordsArrayCreate( numRepAttr );
   \   00007D                ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayCreate
   \   00007D   EF           MOV     A,R7
   \   00007E   F9           MOV     R1,A
   \   00007F   12....       LCALL   `??bdb_repAttrCfgRecordsArrayCreate::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayCreate
   \   000082   E9           MOV     A,R1
   \   000083   F9           MOV     R1,A
   1558             if( status != BDBREPORTING_SUCCESS )
   \   000084   6003         JZ      $+5
   \   000086   02....       LJMP    ??bdb_RepConstructAttrCfgArray_6 & 0xFFFF
   1559             {
   1560               return status;
   1561             }
   1562               
   1563             
   1564             for ( epCur = epList; epCur != NULL; epCur = epCur->nextDesc )
   \   000089   90....       MOV     DPTR,#epList
   \   00008C   8006         SJMP    ??bdb_RepConstructAttrCfgArray_7
   \                     ??bdb_RepConstructAttrCfgArray_8:
   \   00008E   85..82       MOV     DPL,?V0
   \   000091   85..83       MOV     DPH,?V1
   \                     ??bdb_RepConstructAttrCfgArray_7:
   \   000094   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000097   7003         JNZ     $+5
   \   000099   02....       LJMP    ??bdb_RepConstructAttrCfgArray_9 & 0xFFFF
   1565             {
   1566               zclAttrRecsList* attrItem = zclFindAttrRecsList( epCur->epDesc->endPoint );
   \   00009C   E5..         MOV     A,?V0
   \   00009E   2402         ADD     A,#0x2
   \   0000A0   F5..         MOV     ?V2,A
   \   0000A2   E4           CLR     A
   \   0000A3   35..         ADDC    A,?V1
   \   0000A5   F5..         MOV     ?V3,A
   \   0000A7                ; Setup parameters for call to function zclFindAttrRecsList
   \   0000A7   85..82       MOV     DPL,?V2
   \   0000AA   F583         MOV     DPH,A
   \   0000AC   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0000AF   12....       LCALL   `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   0000B2   8A..         MOV     ?V4,R2
   \   0000B4   8B..         MOV     ?V5,R3
   \   0000B6   A8..         MOV     R0,?V4
   \   0000B8   A9..         MOV     R1,?V5
   1567               if( attrItem== NULL )
   \   0000BA   E8           MOV     A,R0
   \   0000BB   49           ORL     A,R1
   \   0000BC   60D0         JZ      ??bdb_RepConstructAttrCfgArray_8
   1568               {
   1569                 continue;
   1570               }
   1571               if( attrItem->numAttributes > 0 )
   \   0000BE   E8           MOV     A,R0
   \   0000BF   2407         ADD     A,#0x7
   \   0000C1   F5..         MOV     ?V8,A
   \   0000C3   E4           CLR     A
   \   0000C4   39           ADDC    A,R1
   \   0000C5   F5..         MOV     ?V9,A
   \   0000C7   85..82       MOV     DPL,?V8
   \   0000CA   F583         MOV     DPH,A
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   60BF         JZ      ??bdb_RepConstructAttrCfgArray_8
   1572               {
   1573                 for ( i = 0; i < attrItem->numAttributes; i++ )
   \   0000CF   7E00         MOV     R6,#0x0
   \   0000D1   E8           MOV     A,R0
   \   0000D2   2408         ADD     A,#0x8
   \   0000D4   F5..         MOV     ?V6,A
   \   0000D6   E4           CLR     A
   \   0000D7   39           ADDC    A,R1
   \   0000D8   F5..         MOV     ?V7,A
   \   0000DA   807F         SJMP    ??bdb_RepConstructAttrCfgArray_10
   1574                 {
   1575                   if( attrItem->attrs[i].attr.accessControl & ACCESS_REPORTABLE )
   1576                   {
   1577                     bdbReportAttrDefaultCfgData_t toSearch;
   1578                     toSearch.endpoint = epCur->epDesc->endPoint;
   1579                     toSearch.cluster = attrItem->attrs[i].clusterID;
   1580                     toSearch.attrID = attrItem->attrs[i].attr.attrId;
   1581                     bdbRepAttrDefaultCfgRecordLinkedListItem_t* lLItemFound = bdb_repAttrDefaultCfgRecordsLinkedListSearch( &attrDefaultCfgRecordLinkedList, toSearch );
   1582                     if( lLItemFound == NULL )
   1583                     {
   1584                       //Add with default static values
   1585                       uint8 changeValue[] = BDBREPORTING_DEFAULTCHANGEVALUE; 
   1586                       status = bdb_repAttrCfgRecordsArrayAdd( epCur->epDesc->endPoint, attrItem->attrs[i].clusterID, 
   1587                                                              attrItem->attrs[i].attr.attrId, BDBREPORTING_DEFAULTMININTERVAL, BDBREPORTING_DEFAULTMAXINTERVAL, 
   1588                                                              changeValue, BDBREPORTING_DEFAULTMININTERVAL, BDBREPORTING_DEFAULTMAXINTERVAL, changeValue );
   1589                     }
   1590                     else
   1591                     {
   1592                       //Add with user defined default values
   1593                       status = bdb_repAttrCfgRecordsArrayAdd( epCur->epDesc->endPoint, attrItem->attrs[i].clusterID, 
   1594                                                              attrItem->attrs[i].attr.attrId, lLItemFound->data->minReportInt, lLItemFound->data->maxReportInt, 
   1595                                                              lLItemFound->data->reportableChange, lLItemFound->data->minReportInt, lLItemFound->data->maxReportInt, 
   1596                                                              lLItemFound->data->reportableChange );
   \                     ??bdb_RepConstructAttrCfgArray_11:
   \   0000DC   12....       LCALL   ?Subroutine36 & 0xFFFF
   1597                     }
   \                     ??CrossCallReturnLabel_48:
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   0000E5   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   0000E8   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0000EB   E8           MOV     A,R0
   \   0000EC   2409         ADD     A,#0x9
   \   0000EE   F5..         MOV     ?V12,A
   \   0000F0   E4           CLR     A
   \   0000F1   39           ADDC    A,R1
   \   0000F2   F5..         MOV     ?V13,A
   \   0000F4                ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayAdd
   \   0000F4   85....       MOV     ?V10,?V12
   \   0000F7   F5..         MOV     ?V11,A
   \   0000F9   78..         MOV     R0,#?V10
   \   0000FB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FE   8C..         MOV     ?V10,R4
   \   000100   8D..         MOV     ?V11,R5
   \   000102   78..         MOV     R0,#?V10
   \   000104   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000107   8A..         MOV     ?V10,R2
   \   000109   8B..         MOV     ?V11,R3
   \   00010B   78..         MOV     R0,#?V10
   \   00010D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000110   85....       MOV     ?V10,?V12
   \   000113   85....       MOV     ?V11,?V13
   \   000116   78..         MOV     R0,#?V10
   \   000118   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011B   8C..         MOV     ?V10,R4
   \   00011D   8D..         MOV     ?V11,R5
   \   00011F   78..         MOV     R0,#?V10
   \   000121   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000124   8A..         MOV     ?V10,R2
   \   000126   8B..         MOV     ?V11,R3
   \                     ??bdb_RepConstructAttrCfgArray_12:
   \   000128   78..         MOV     R0,#?V10
   \   00012A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012D   85..82       MOV     DPL,?V4
   \   000130   85..83       MOV     DPH,?V5
   \   000133   A3           INC     DPTR
   \   000134   A3           INC     DPTR
   \   000135   E4           CLR     A
   \   000136   93           MOVC    A,@A+DPTR
   \   000137   FC           MOV     R4,A
   \   000138   7401         MOV     A,#0x1
   \   00013A   93           MOVC    A,@A+DPTR
   \   00013B   FD           MOV     R5,A
   \   00013C   85..82       MOV     DPL,?V4
   \   00013F   85..83       MOV     DPH,?V5
   \   000142   E4           CLR     A
   \   000143   93           MOVC    A,@A+DPTR
   \   000144   FA           MOV     R2,A
   \   000145   7401         MOV     A,#0x1
   \   000147   93           MOVC    A,@A+DPTR
   \   000148   FB           MOV     R3,A
   \   000149   85..82       MOV     DPL,?V2
   \   00014C   85..83       MOV     DPH,?V3
   \   00014F   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000152   12....       LCALL   `??bdb_repAttrCfgRecordsArrayAdd::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayAdd
   \   000155   740C         MOV     A,#0xc
   \   000157   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??bdb_RepConstructAttrCfgArray_13:
   \   00015A   0E           INC     R6
   \                     ??bdb_RepConstructAttrCfgArray_10:
   \   00015B   85..82       MOV     DPL,?V8
   \   00015E   85..83       MOV     DPH,?V9
   \   000161   12....       LCALL   ??Subroutine92_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000164   4003         JC      $+5
   \   000166   02....       LJMP    ??bdb_RepConstructAttrCfgArray_8 & 0xFFFF
   \   000169   8E..         MOV     ?V4,R6
   \   00016B   85....       MOV     ?V10,?V4
   \   00016E   75..00       MOV     ?V11,#0x0
   \   000171   7403         MOV     A,#0x3
   \   000173   78..         MOV     R0,#?V10
   \   000175   12....       LCALL   ?S_SHL
   \   000178   85....       MOV     ?V4,?V10
   \   00017B   85....       MOV     ?V5,?V11
   \   00017E   85..82       MOV     DPL,?V6
   \   000181   85..83       MOV     DPH,?V7
   \   000184   E0           MOVX    A,@DPTR
   \   000185   25..         ADD     A,?V4
   \   000187   F8           MOV     R0,A
   \   000188   A3           INC     DPTR
   \   000189   E0           MOVX    A,@DPTR
   \   00018A   35..         ADDC    A,?V5
   \   00018C   F9           MOV     R1,A
   \   00018D   E8           MOV     A,R0
   \   00018E   FA           MOV     R2,A
   \   00018F   E9           MOV     A,R1
   \   000190   FB           MOV     R3,A
   \   000191   8A82         MOV     DPL,R2
   \   000193   8B83         MOV     DPH,R3
   \   000195   A3           INC     DPTR
   \   000196   A3           INC     DPTR
   \   000197   A3           INC     DPTR
   \   000198   A3           INC     DPTR
   \   000199   A3           INC     DPTR
   \   00019A   E4           CLR     A
   \   00019B   93           MOVC    A,@A+DPTR
   \   00019C   A2E2         MOV     C,0xE0 /* A   */.2
   \   00019E   50BA         JNC     ??bdb_RepConstructAttrCfgArray_13
   \   0001A0   85..82       MOV     DPL,?V2
   \   0001A3   85..83       MOV     DPH,?V3
   \   0001A6   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0001A9   C0E0         PUSH    A
   \   0001AB   7404         MOV     A,#0x4
   \   0001AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B0   D0E0         POP     A
   \   0001B2   12....       LCALL   ??Subroutine81_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   0001B5   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0001B8   7405         MOV     A,#0x5
   \   0001BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BD   E8           MOV     A,R0
   \   0001BE   F0           MOVX    @DPTR,A
   \   0001BF   A3           INC     DPTR
   \   0001C0   E9           MOV     A,R1
   \   0001C1   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0001C4   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   0001C7   7407         MOV     A,#0x7
   \   0001C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CC   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   0001CF                ; Setup parameters for call to function bdb_repAttrDefaultCfgRecordsLinkedListSearch
   \   0001CF   7404         MOV     A,#0x4
   \   0001D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D4   740D         MOV     A,#0xd
   \   0001D6   12....       LCALL   ?PUSH_XSTACK8_X
   \   0001D9   7A..         MOV     R2,#attrDefaultCfgRecordLinkedList & 0xff
   \   0001DB   7B..         MOV     R3,#(attrDefaultCfgRecordLinkedList >> 8) & 0xff
   \   0001DD   12....       LCALL   `??bdb_repAttrDefaultCfgRecordsLinkedListSearch:`; Banked call to: bdb_repAttrDefaultCfgRecordsLinkedListSearch
   \   0001E0   740D         MOV     A,#0xd
   \   0001E2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001E5   8A82         MOV     DPL,R2
   \   0001E7   8B83         MOV     DPH,R3
   \   0001E9   E582         MOV     A,DPL
   \   0001EB   4583         ORL     A,DPH
   \   0001ED   6003         JZ      $+5
   \   0001EF   02....       LJMP    ??bdb_RepConstructAttrCfgArray_11 & 0xFFFF
   \   0001F2   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0}>`
   \   0001F5   AC..         MOV     R4,?XSP + 0
   \   0001F7   AD..         MOV     R5,?XSP + 1
   \   0001F9   7404         MOV     A,#0x4
   \   0001FB   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   0001FE   12....       LCALL   ?Subroutine49 & 0xFFFF
   1598                   }
   1599                 }
   1600               }
   1601               
   1602             }
   \                     ??CrossCallReturnLabel_77:
   \   000201                ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayAdd
   \   000201   A8..         MOV     R0,?XSP + 0
   \   000203   A9..         MOV     R1,?XSP + 1
   \   000205   88..         MOV     ?V10,R0
   \   000207   89..         MOV     ?V11,R1
   \   000209   78..         MOV     R0,#?V10
   \   00020B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00020E   75..FF       MOV     ?V10,#-0x1
   \   000211   75..FF       MOV     ?V11,#-0x1
   \   000214   78..         MOV     R0,#?V10
   \   000216   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000219   75..0A       MOV     ?V10,#0xa
   \   00021C   75..00       MOV     ?V11,#0x0
   \   00021F   78..         MOV     R0,#?V10
   \   000221   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000224   7406         MOV     A,#0x6
   \   000226   12....       LCALL   ?XSTACK_DISP100_8
   \   000229   88..         MOV     ?V10,R0
   \   00022B   89..         MOV     ?V11,R1
   \   00022D   78..         MOV     R0,#?V10
   \   00022F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000232   75..FF       MOV     ?V10,#-0x1
   \   000235   75..FF       MOV     ?V11,#-0x1
   \   000238   78..         MOV     R0,#?V10
   \   00023A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00023D   75..0A       MOV     ?V10,#0xa
   \   000240   75..00       MOV     ?V11,#0x0
   \   000243   02....       LJMP    ??bdb_RepConstructAttrCfgArray_12 & 0xFFFF
   1603             return BDBREPORTING_SUCCESS;
   \                     ??bdb_RepConstructAttrCfgArray_9:
   \   000246   7900         MOV     R1,#0x0
   \                     ??bdb_RepConstructAttrCfgArray_6:
   \   000248   7411         MOV     A,#0x11
   \   00024A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00024D   7F0E         MOV     R7,#0xe
   \   00024F   02....       LJMP    ?BANKED_LEAVE_XDATA
   1604             
   1605          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   85..82       MOV     DPL,?V6
   \   000003   85..83       MOV     DPH,?V7
   \   000006   E0           MOVX    A,@DPTR
   \   000007   25..         ADD     A,?V4
   \   000009   F5..         MOV     ?V4,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   35..         ADDC    A,?V5
   \   00000F   F5..         MOV     ?V5,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine93_0
   \   000002                ; // Fall through to label ??Subroutine93_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   E4           CLR     A
   \   000001   93           MOVC    A,@A+DPTR
   \   000002   F8           MOV     R0,A
   \   000003   7401         MOV     A,#0x1
   \   000005   93           MOVC    A,@A+DPTR
   \   000006   F9           MOV     R1,A
   \   000007   22           RET
   1606          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1607          static uint8 bdb_RepLoadCfgRecords( void )
   \                     bdb_RepLoadCfgRecords:
   1608          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1609            uint8 status; 
   1610            if( bdb_reportingAttrCfgRecordsArrayCount>0 && bdb_reportingAttrCfgRecordsArray == NULL )
   \   000005   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   000008   E0           MOVX    A,@DPTR
   \   000009   6008         JZ      ??bdb_RepLoadCfgRecords_0
   \   00000B   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   00000E   7003         JNZ     ??bdb_RepLoadCfgRecords_0
   1611            {
   1612              bdb_repAttrCfgRecordsArrayFreeAll( );
   \   000010                ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayFreeAll
   \   000010   12....       LCALL   `??bdb_repAttrCfgRecordsArrayFreeAll::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayFreeAll
   1613            }
   1614            
   1615            status = osal_nv_item_init( ZCD_NV_BDBREPORTINGCONFIG, sizeof( bdbReportAttrCfgData_t )*bdb_reportingAttrCfgRecordsArrayCount, bdb_reportingAttrCfgRecordsArray );
   \                     ??bdb_RepLoadCfgRecords_0:
   \   000013                ; Setup parameters for call to function osal_nv_item_init
   \   000013   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArray
   \   000016   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000019   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00001C   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   E9           MOV     A,R1
   \   000025   F8           MOV     R0,A
   1616            if( status == NV_OPER_FAILED )
   \   000026   740A         MOV     A,#0xa
   \   000028   68           XRL     A,R0
   \   000029   6005         JZ      ??bdb_RepLoadCfgRecords_1
   1617            {
   1618              return BDBREPORTING_ERROR;
   1619            }
   1620            else
   1621            {
   1622                if( status == NV_ITEM_UNINIT )
   \   00002B   7409         MOV     A,#0x9
   \   00002D   68           XRL     A,R0
   \   00002E   7004         JNZ     ??bdb_RepLoadCfgRecords_2
   1623                {
   1624                  //was written, this is an error
   1625                  return BDBREPORTING_ERROR;
   \                     ??bdb_RepLoadCfgRecords_1:
   \   000030   7901         MOV     R1,#0x1
   \   000032   804E         SJMP    ??bdb_RepLoadCfgRecords_3
   1626                }
   1627                else
   1628                {
   1629                  //SUCCESS, There is NV data, read the data
   1630                  uint16 sizeNVRecord = osal_nv_item_len( ZCD_NV_BDBREPORTINGCONFIG );
   1631                  uint8 attrCfgRecordsArrayCount = sizeNVRecord / sizeof( bdbReportAttrCfgData_t );
   \                     ??bdb_RepLoadCfgRecords_2:
   \   000034                ; Setup parameters for call to function osal_nv_item_len
   \   000034   7A56         MOV     R2,#0x56
   \   000036   7B00         MOV     R3,#0x0
   \   000038   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   00003B   EA           MOV     A,R2
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   F9           MOV     R1,A
   \   00003F   7A15         MOV     R2,#0x15
   \   000041   7B00         MOV     R3,#0x0
   \   000043   12....       LCALL   ?US_DIV_MOD
   \   000046   E8           MOV     A,R0
   \   000047   FE           MOV     R6,A
   1632                  
   1633                  status =  bdb_repAttrCfgRecordsArrayCreate( attrCfgRecordsArrayCount );
   1634                  if( status == BDBREPORTING_ERROR )
   \   000048                ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayCreate
   \   000048   F9           MOV     R1,A
   \   000049   12....       LCALL   `??bdb_repAttrCfgRecordsArrayCreate::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayCreate
   \   00004C   E9           MOV     A,R1
   \   00004D   6401         XRL     A,#0x1
   \   00004F   7004         JNZ     ??bdb_RepLoadCfgRecords_4
   1635                  {
   1636                    return BDBREPORTING_OUTOFMEMORYERROR;
   \   000051   7902         MOV     R1,#0x2
   \   000053   802D         SJMP    ??bdb_RepLoadCfgRecords_3
   1637                  }
   1638                  osal_nv_read( ZCD_NV_BDBREPORTINGCONFIG,0,sizeof( bdbReportAttrCfgData_t )*attrCfgRecordsArrayCount ,bdb_reportingAttrCfgRecordsArray );
   \                     ??bdb_RepLoadCfgRecords_4:
   \   000055                ; Setup parameters for call to function osal_nv_read
   \   000055   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArray
   \   000058   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00005B   EE           MOV     A,R6
   \   00005C   75F015       MOV     B,#0x15
   \   00005F   A4           MUL     AB
   \   000060   F5..         MOV     ?V0,A
   \   000062   E5F0         MOV     A,B
   \   000064   F5..         MOV     ?V1,A
   \   000066   78..         MOV     R0,#?V0
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006B   7C00         MOV     R4,#0x0
   \   00006D   7D00         MOV     R5,#0x0
   \   00006F   7A56         MOV     R2,#0x56
   \   000071   7B00         MOV     R3,#0x0
   \   000073   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000076   7404         MOV     A,#0x4
   \   000078   12....       LCALL   ?DEALLOC_XSTACK8
   1639                  bdb_reportingAttrCfgRecordsArrayCount = attrCfgRecordsArrayCount;
   \   00007B   EE           MOV     A,R6
   \   00007C   90....       MOV     DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   00007F   F0           MOVX    @DPTR,A
   1640                  return BDBREPORTING_SUCCESS;
   \   000080   7900         MOV     R1,#0x0
   1641                }     
   1642            }  
   \                     ??bdb_RepLoadCfgRecords_3:
   \   000082   02....       LJMP    ?Subroutine6 & 0xFFFF
   1643          }
   1644          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1645          static void bdb_RepReport( uint8 specificCLusterEndpointIndex )
   \                     bdb_RepReport:
   1646          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V1,R1
   1647            afAddrType_t dstAddr;
   1648            zclReportCmd_t *pReportCmd;
   1649            uint8 i;
   1650            
   1651            bdbReportAttrClusterEndpoint_t* clusterEndpointItem = NULL;
   \   00000C   7E00         MOV     R6,#0x0
   \   00000E   7F00         MOV     R7,#0x0
   1652            if( specificCLusterEndpointIndex == BDBREPORTING_INVALIDINDEX )
   \   000010   74FF         MOV     A,#-0x1
   \   000012   65..         XRL     A,?V1
   \   000014   7010         JNZ     ??bdb_RepReport_0
   1653            {
   1654              if( bdb_reportingNextClusterEndpointIndex < bdb_reportingClusterEndpointArrayCount )
   \   000016   90....       MOV     DPTR,#bdb_reportingClusterEndpointArrayCount
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F8           MOV     R0,A
   \   00001B   90....       MOV     DPTR,#bdb_reportingNextClusterEndpointIndex
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   C3           CLR     C
   \   000020   98           SUBB    A,R0
   \   000021   5013         JNC     ??bdb_RepReport_1
   1655              {
   1656                clusterEndpointItem = &(bdb_reportingClusterEndpointArray[bdb_reportingNextClusterEndpointIndex]);
   \   000023   E0           MOVX    A,@DPTR
   \   000024   8001         SJMP    ??bdb_RepReport_2
   1657              }
   1658            }
   1659            else
   1660            {
   1661              clusterEndpointItem = &(bdb_reportingClusterEndpointArray[specificCLusterEndpointIndex]);
   \                     ??bdb_RepReport_0:
   \   000026   E9           MOV     A,R1
   \                     ??bdb_RepReport_2:
   \   000027   75F00D       MOV     B,#0xd
   \   00002A   A4           MUL     AB
   \   00002B   F8           MOV     R0,A
   \   00002C   A9F0         MOV     R1,B
   \   00002E   74..         MOV     A,#bdb_reportingClusterEndpointArray & 0xff
   \   000030   28           ADD     A,R0
   \   000031   FE           MOV     R6,A
   \   000032   74..         MOV     A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
   \   000034   39           ADDC    A,R1
   \   000035   FF           MOV     R7,A
   1662            }
   1663          
   1664            // actually send the report
   1665            if( clusterEndpointItem->consolidatedMaxReportInt != ZCL_REPORTING_OFF && clusterEndpointItem->attrLinkedList.numItems )
   \                     ??bdb_RepReport_1:
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F4           CPL     A
   \   000042   7003         JNZ     ??bdb_RepReport_3
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F4           CPL     A
   \                     ??bdb_RepReport_3:
   \   000047   7003         JNZ     $+5
   \   000049   02....       LJMP    ??bdb_RepReport_4 & 0xFFFF
   \   00004C   EE           MOV     A,R6
   \   00004D   240A         ADD     A,#0xa
   \   00004F   F5..         MOV     ?V8,A
   \   000051   E4           CLR     A
   \   000052   3F           ADDC    A,R7
   \   000053   F5..         MOV     ?V9,A
   \   000055   85..82       MOV     DPL,?V8
   \   000058   F583         MOV     DPH,A
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   7003         JNZ     $+5
   \   00005D   02....       LJMP    ??bdb_RepReport_4 & 0xFFFF
   1666            {
   1667              dstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   000060   740E         MOV     A,#0xe
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   E4           CLR     A
   \   000066   F0           MOVX    @DPTR,A
   1668              dstAddr.addr.shortAddr = 0;
   \   000067   7406         MOV     A,#0x6
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   12....       LCALL   ?Subroutine15 & 0xFFFF
   1669              dstAddr.endPoint = clusterEndpointItem->endpoint;
   \                     ??CrossCallReturnLabel_10:
   \   00006F   A3           INC     DPTR
   \   000070   8582..       MOV     ?V12,DPL
   \   000073   8583..       MOV     ?V13,DPH
   \   000076   E0           MOVX    A,@DPTR
   \   000077   C0E0         PUSH    A
   \   000079   740F         MOV     A,#0xf
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   D0E0         POP     A
   \   000080   F0           MOVX    @DPTR,A
   1670              dstAddr.panId = _NIB.nwkPanId;
   \   000081   90....       MOV     DPTR,#_NIB + 33
   \   000084   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000087   7410         MOV     A,#0x10
   \   000089   12....       LCALL   ?XSTACK_DISP0_8
   \   00008C   E8           MOV     A,R0
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   E9           MOV     A,R1
   \   000090   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   1671              
   1672              pReportCmd = osal_mem_alloc( sizeof( zclReportCmd_t ) + (clusterEndpointItem->attrLinkedList.numItems * sizeof( zclReport_t )) );
   \                     ??CrossCallReturnLabel_130:
   \   000093   75F005       MOV     B,#0x5
   \   000096   A4           MUL     AB
   \   000097   A9F0         MOV     R1,B
   \   000099   2401         ADD     A,#0x1
   \   00009B   FA           MOV     R2,A
   \   00009C   E4           CLR     A
   \   00009D   39           ADDC    A,R1
   \   00009E   FB           MOV     R3,A
   \   00009F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000A2   8A..         MOV     ?V2,R2
   \   0000A4   8B..         MOV     ?V3,R3
   1673              if ( pReportCmd != NULL )
   \   0000A6   EA           MOV     A,R2
   \   0000A7   45..         ORL     A,?V3
   \   0000A9   7003         JNZ     $+5
   \   0000AB   02....       LJMP    ??bdb_RepReport_4 & 0xFFFF
   1674              {
   1675                pReportCmd->numAttr = clusterEndpointItem->attrLinkedList.numItems;
   \   0000AE   85..82       MOV     DPL,?V8
   \   0000B1   85..83       MOV     DPH,?V9
   \   0000B4   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0000B7   F0           MOVX    @DPTR,A
   1676                for ( i = 0; i < clusterEndpointItem->attrLinkedList.numItems; ++ i )
   \   0000B8   75..00       MOV     ?V0,#0x0
   \   0000BB   EE           MOV     A,R6
   \   0000BC   2402         ADD     A,#0x2
   \   0000BE   F5..         MOV     ?V14,A
   \   0000C0   E4           CLR     A
   \   0000C1   3F           ADDC    A,R7
   \   0000C2   F5..         MOV     ?V15,A
   \   0000C4   02....       LJMP    ??bdb_RepReport_5 & 0xFFFF
   1677                {
   \                     ??bdb_RepReport_6:
   \   0000C7   A3           INC     DPTR
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   FE           MOV     R6,A
   \   0000CA   A3           INC     DPTR
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   FF           MOV     R7,A
   \   0000CD   7A00         MOV     R2,#0x0
   \                     ??bdb_RepReport_7:
   \   0000CF   EE           MOV     A,R6
   \   0000D0   4F           ORL     A,R7
   \   0000D1   7003         JNZ     $+5
   \   0000D3   02....       LJMP    ??bdb_RepReport_8 & 0xFFFF
   \   0000D6   EA           MOV     A,R2
   \   0000D7   C3           CLR     C
   \   0000D8   95..         SUBB    A,?V0
   \   0000DA   500B         JNC     ??bdb_RepReport_9
   \   0000DC   8E82         MOV     DPL,R6
   \   0000DE   8F83         MOV     DPH,R7
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   FE           MOV     R6,A
   \   0000E4   A3           INC     DPTR
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   FF           MOV     R7,A
   \                     ??bdb_RepReport_9:
   \   0000E7   0A           INC     R2
   \   0000E8   E5..         MOV     A,?V0
   \   0000EA   C3           CLR     C
   \   0000EB   9A           SUBB    A,R2
   \   0000EC   50E1         JNC     ??bdb_RepReport_7
   1678                  pReportCmd->attrList[i].attrID   = 0xFFFF;
   1679                  pReportCmd->attrList[i].dataType = 0xFF;
   1680                  pReportCmd->attrList[i].attrData = NULL;
   1681                  
   1682                  bdbLinkedListAttrItem_t* attrListItem = bdb_linkedListAttrGetAtIndex( &clusterEndpointItem->attrLinkedList, i );      
   1683                  if(attrListItem!=NULL)
   \   0000EE   EE           MOV     A,R6
   \   0000EF   4F           ORL     A,R7
   \   0000F0   7003         JNZ     $+5
   \   0000F2   02....       LJMP    ??bdb_RepReport_8 & 0xFFFF
   1684                  {
   1685                    pReportCmd->attrList[i].attrID = attrListItem->data->attrID;   
   \   0000F5   8E82         MOV     DPL,R6
   \   0000F7   8F83         MOV     DPH,R7
   \   0000F9   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0000FC   12....       LCALL   ?Subroutine20 & 0xFFFF
   1686                    zclAttribute_t attrRec;
   1687                    uint8 attrRes = bdb_RepFindAttrEntry( clusterEndpointItem->endpoint, clusterEndpointItem->cluster, attrListItem->data->attrID, &attrRec );
   1688                    if( attrRes == BDBREPORTING_TRUE )
   \                     ??CrossCallReturnLabel_166:
   \   0000FF                ; Setup parameters for call to function bdb_RepFindAttrEntry
   \   0000FF   A8..         MOV     R0,?XSP + 0
   \   000101   A9..         MOV     R1,?XSP + 1
   \   000103   88..         MOV     ?V10,R0
   \   000105   89..         MOV     ?V11,R1
   \   000107   78..         MOV     R0,#?V10
   \   000109   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010C   8A82         MOV     DPL,R2
   \   00010E   8B83         MOV     DPH,R3
   \   000110   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000113   85..82       MOV     DPL,?V12
   \   000116   85..83       MOV     DPH,?V13
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   F9           MOV     R1,A
   \   00011B   12....       LCALL   `??bdb_RepFindAttrEntry::?relay`; Banked call to: bdb_RepFindAttrEntry
   \   00011E   7402         MOV     A,#0x2
   \   000120   12....       LCALL   ?DEALLOC_XSTACK8
   \   000123   E9           MOV     A,R1
   \   000124   6401         XRL     A,#0x1
   \   000126   705B         JNZ     ??bdb_RepReport_8
   1689                    {
   1690                      pReportCmd->attrList[i].dataType = attrRec.dataType;          
   \   000128   7402         MOV     A,#0x2
   \   00012A   12....       LCALL   ?XSTACK_DISP0_8
   \   00012D   E0           MOVX    A,@DPTR
   \   00012E   85..82       MOV     DPL,?V6
   \   000131   85..83       MOV     DPH,?V7
   \   000134   F0           MOVX    @DPTR,A
   1691                      pReportCmd->attrList[i].attrData = attrRec.dataPtr;          
   \   000135   7404         MOV     A,#0x4
   \   000137   12....       LCALL   ?XSTACK_DISP0_8
   \   00013A   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   00013D   85..82       MOV     DPL,?V4
   \   000140   85..83       MOV     DPH,?V5
   \   000143   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   1692                      //Update last value reported
   1693                      if( zclAnalogDataType( attrRec.dataType ) )
   \                     ??CrossCallReturnLabel_212:
   \   000146                ; Setup parameters for call to function zclAnalogDataType
   \   000146   7402         MOV     A,#0x2
   \   000148   12....       LCALL   ?XSTACK_DISP0_8
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   F9           MOV     R1,A
   \   00014D   12....       LCALL   `??zclAnalogDataType::?relay`; Banked call to: zclAnalogDataType
   \   000150   E9           MOV     A,R1
   \   000151   6030         JZ      ??bdb_RepReport_8
   1694                      { 
   1695                        //Only if the datatype is analog
   1696                        osal_memset( attrListItem->data->lastValueReported,0x00, BDBREPORTING_MAX_ANALOG_ATTR_SIZE );
   \   000153                ; Setup parameters for call to function osal_memset
   \   000153   7C04         MOV     R4,#0x4
   \   000155   7D00         MOV     R5,#0x0
   \   000157   7900         MOV     R1,#0x0
   \   000159   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00015C   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1697                        osal_memcpy( attrListItem->data->lastValueReported, attrRec.dataPtr, zclGetDataTypeLength( attrRec.dataType ) );
   \   00015F                ; Setup parameters for call to function zclGetDataTypeLength
   \   00015F   7402         MOV     A,#0x2
   \   000161   12....       LCALL   ?XSTACK_DISP0_8
   \   000164   E0           MOVX    A,@DPTR
   \   000165   F9           MOV     R1,A
   \   000166   12....       LCALL   `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
   \   000169   E9           MOV     A,R1
   \   00016A   FC           MOV     R4,A
   \   00016B                ; Setup parameters for call to function osal_memcpy
   \   00016B   7404         MOV     A,#0x4
   \   00016D   12....       LCALL   ?XSTACK_DISP0_8
   \   000170   12....       LCALL   ?Subroutine42 & 0xFFFF
   1698                      }
   1699                    }
   1700                  }
   \                     ??CrossCallReturnLabel_64:
   \   000173   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000176   7D00         MOV     R5,#0x0
   \   000178   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00017B   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00017E   7403         MOV     A,#0x3
   \   000180   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??bdb_RepReport_8:
   \   000183   05..         INC     ?V0
   \                     ??bdb_RepReport_5:
   \   000185   85..82       MOV     DPL,?V8
   \   000188   85..83       MOV     DPH,?V9
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   F8           MOV     R0,A
   \   00018D   E5..         MOV     A,?V0
   \   00018F   C3           CLR     C
   \   000190   98           SUBB    A,R0
   \   000191   505D         JNC     ??bdb_RepReport_10
   \   000193   AA..         MOV     R2,?V0
   \   000195   EA           MOV     A,R2
   \   000196   75F005       MOV     B,#0x5
   \   000199   A4           MUL     AB
   \   00019A   F8           MOV     R0,A
   \   00019B   A9F0         MOV     R1,B
   \   00019D   E5..         MOV     A,?V2
   \   00019F   28           ADD     A,R0
   \   0001A0   FC           MOV     R4,A
   \   0001A1   E5..         MOV     A,?V3
   \   0001A3   39           ADDC    A,R1
   \   0001A4   FD           MOV     R5,A
   \   0001A5   8C82         MOV     DPL,R4
   \   0001A7   8D83         MOV     DPH,R5
   \   0001A9   A3           INC     DPTR
   \   0001AA   A882         MOV     R0,DPL
   \   0001AC   A983         MOV     R1,DPH
   \   0001AE   74FF         MOV     A,#-0x1
   \   0001B0   F0           MOVX    @DPTR,A
   \   0001B1   A3           INC     DPTR
   \   0001B2   F0           MOVX    @DPTR,A
   \   0001B3   EC           MOV     A,R4
   \   0001B4   2403         ADD     A,#0x3
   \   0001B6   F5..         MOV     ?V6,A
   \   0001B8   E4           CLR     A
   \   0001B9   3D           ADDC    A,R5
   \   0001BA   F5..         MOV     ?V7,A
   \   0001BC   85..82       MOV     DPL,?V6
   \   0001BF   F583         MOV     DPH,A
   \   0001C1   74FF         MOV     A,#-0x1
   \   0001C3   F0           MOVX    @DPTR,A
   \   0001C4   EC           MOV     A,R4
   \   0001C5   2404         ADD     A,#0x4
   \   0001C7   F5..         MOV     ?V4,A
   \   0001C9   E4           CLR     A
   \   0001CA   3D           ADDC    A,R5
   \   0001CB   F5..         MOV     ?V5,A
   \   0001CD   85..82       MOV     DPL,?V4
   \   0001D0   F583         MOV     DPH,A
   \   0001D2   E4           CLR     A
   \   0001D3   F0           MOVX    @DPTR,A
   \   0001D4   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   0001D7   24FF         ADD     A,#-0x1
   \   0001D9   FC           MOV     R4,A
   \   0001DA   E4           CLR     A
   \   0001DB   34FF         ADDC    A,#-0x1
   \   0001DD   FD           MOV     R5,A
   \   0001DE   C3           CLR     C
   \   0001DF   EC           MOV     A,R4
   \   0001E0   9A           SUBB    A,R2
   \   0001E1   ED           MOV     A,R5
   \   0001E2   9400         SUBB    A,#0x0
   \   0001E4   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0001E6   65D0         XRL     A,PSW
   \   0001E8   33           RLC     A
   \   0001E9   4003         JC      $+5
   \   0001EB   02....       LJMP    ??bdb_RepReport_6 & 0xFFFF
   \   0001EE   8093         SJMP    ??bdb_RepReport_8
   1701                }
   1702          
   1703                zcl_SendReportCmd( clusterEndpointItem->endpoint, &dstAddr,
   1704                                   clusterEndpointItem->cluster, pReportCmd,
   1705                                   ZCL_FRAME_SERVER_CLIENT_DIR, BDB_REPORTING_DISABLE_DEFAULT_RSP, bdb_getZCLFrameCounter( ) );
   \                     ??bdb_RepReport_10:
   \   0001F0                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   0001F0   12....       LCALL   `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
   \   0001F3   E9           MOV     A,R1
   \   0001F4                ; Setup parameters for call to function zcl_SendReportCmd
   \   0001F4   F5..         MOV     ?V0,A
   \   0001F6   78..         MOV     R0,#?V0
   \   0001F8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001FB   75..00       MOV     ?V0,#0x0
   \   0001FE   78..         MOV     R0,#?V0
   \   000200   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000203   75..01       MOV     ?V0,#0x1
   \   000206   78..         MOV     R0,#?V0
   \   000208   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00020B   78..         MOV     R0,#?V2
   \   00020D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000210   85..82       MOV     DPL,?V14
   \   000213   85..83       MOV     DPH,?V15
   \   000216   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000219   740B         MOV     A,#0xb
   \   00021B   12....       LCALL   ?XSTACK_DISP101_8
   \   00021E   85..82       MOV     DPL,?V12
   \   000221   85..83       MOV     DPH,?V13
   \   000224   E0           MOVX    A,@DPTR
   \   000225   F9           MOV     R1,A
   \   000226   12....       LCALL   `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
   \   000229   7405         MOV     A,#0x5
   \   00022B   12....       LCALL   ?DEALLOC_XSTACK8
   1706          
   1707                osal_mem_free( pReportCmd );
   \   00022E                ; Setup parameters for call to function osal_mem_free
   \   00022E   AA..         MOV     R2,?V2
   \   000230   AB..         MOV     R3,?V3
   \   000232   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1708              }
   1709            }
   1710          }
   \                     ??bdb_RepReport_4:
   \   000235   7412         MOV     A,#0x12
   \   000237   02....       LJMP    ??Subroutine77_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   2402         ADD     A,#0x2
   \   000007   FA           MOV     R2,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   FB           MOV     R3,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ??Subroutine94_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E4           CLR     A
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   F0           MOVX    @DPTR,A
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   22           RET
   1711          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1712          static uint8 bdb_isAttrValueChangedSurpassDelta( uint8 datatype, uint8* delta, uint8* curValue, uint8* lastValue )
   \                     bdb_isAttrValueChangedSurpassDelta:
   1713          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   1714            uint8 res = BDBREPORTING_FALSE;
   \   000007   7E00         MOV     R6,#0x0
   \   000009   7414         MOV     A,#0x14
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ?Subroutine36 & 0xFFFF
   1715            switch ( datatype )
   \                     ??CrossCallReturnLabel_49:
   \   000011   EF           MOV     A,R7
   \   000012   24E0         ADD     A,#-0x20
   \   000014   6035         JZ      ??bdb_isAttrValueChangedSurpassDelta_0
   \   000016   14           DEC     A
   \   000017   6054         JZ      ??bdb_isAttrValueChangedSurpassDelta_1
   \   000019   14           DEC     A
   \   00001A   606F         JZ      ??bdb_isAttrValueChangedSurpassDelta_2
   \   00001C   14           DEC     A
   \   00001D   7003         JNZ     $+5
   \   00001F   02....       LJMP    ??bdb_isAttrValueChangedSurpassDelta_3 & 0xFFFF
   \   000022   24FB         ADD     A,#-0x5
   \   000024   7003         JNZ     $+5
   \   000026   02....       LJMP    ??bdb_isAttrValueChangedSurpassDelta_4 & 0xFFFF
   \   000029   14           DEC     A
   \   00002A   7003         JNZ     $+5
   \   00002C   02....       LJMP    ??bdb_isAttrValueChangedSurpassDelta_5 & 0xFFFF
   \   00002F   14           DEC     A
   \   000030   7003         JNZ     $+5
   \   000032   02....       LJMP    ??bdb_isAttrValueChangedSurpassDelta_6 & 0xFFFF
   \   000035   14           DEC     A
   \   000036   7003         JNZ     $+5
   \   000038   02....       LJMP    ??bdb_isAttrValueChangedSurpassDelta_6 & 0xFFFF
   \   00003B   24F2         ADD     A,#-0xe
   \   00003D   7003         JNZ     $+5
   \   00003F   02....       LJMP    ??bdb_isAttrValueChangedSurpassDelta_7 & 0xFFFF
   \   000042   14           DEC     A
   \   000043   7003         JNZ     $+5
   \   000045   02....       LJMP    ??bdb_isAttrValueChangedSurpassDelta_8 & 0xFFFF
   \   000048   02....       LJMP    ??bdb_isAttrValueChangedSurpassDelta_9 & 0xFFFF
   1716            {
   1717              case ZCL_DATATYPE_UINT8:
   1718              {
   1719                uint8 L = *((uint8*)lastValue);
   \                     ??bdb_isAttrValueChangedSurpassDelta_0:
   \   00004B   12....       LCALL   ?Subroutine31 & 0xFFFF
   1720                uint8 D = *((uint8*)delta);
   1721                uint8 C = *((uint8*)curValue);
   1722                if( L >= C )
   \                     ??CrossCallReturnLabel_39:
   \   00004E   AA..         MOV     R2,?V1
   \   000050   A8..         MOV     R0,?V0
   \   000052   E8           MOV     A,R0
   \   000053   C3           CLR     C
   \   000054   95..         SUBB    A,?V1
   \   000056   4005         JC      ??bdb_isAttrValueChangedSurpassDelta_10
   1723                {
   1724                  res = ( L-C >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
   \   000058   E8           MOV     A,R0
   \   000059   C3           CLR     C
   \   00005A   9A           SUBB    A,R2
   \   00005B   8003         SJMP    ??bdb_isAttrValueChangedSurpassDelta_11
   1725                }
   1726                else
   1727                {
   1728                  res = ( C-L >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
   \                     ??bdb_isAttrValueChangedSurpassDelta_10:
   \   00005D   EA           MOV     A,R2
   \   00005E   C3           CLR     C
   \   00005F   98           SUBB    A,R0
   \                     ??bdb_isAttrValueChangedSurpassDelta_11:
   \   000060   F8           MOV     R0,A
   \   000061   95E0         SUBB    A,0xE0 /* A   */
   \   000063   F9           MOV     R1,A
   \   000064   C3           CLR     C
   \   000065   E8           MOV     A,R0
   \   000066   9C           SUBB    A,R4
   \   000067   E9           MOV     A,R1
   \   000068   9400         SUBB    A,#0x0
   \   00006A   02....       LJMP    ??bdb_isAttrValueChangedSurpassDelta_12 & 0xFFFF
   1729                }
   1730                break;
   1731              }
   1732              case ZCL_DATATYPE_UINT16:
   1733              {
   1734                uint16 L = *((uint16*)lastValue);
   \                     ??bdb_isAttrValueChangedSurpassDelta_1:
   \   00006D   12....       LCALL   ?Subroutine25 & 0xFFFF
   1735                uint16 D = *((uint16*)delta);
   1736                uint16 C = *((uint16*)curValue);
   1737                if(L>=C)
   \                     ??CrossCallReturnLabel_26:
   \   000070   4008         JC      ??bdb_isAttrValueChangedSurpassDelta_13
   1738                {
   1739                  res = ( L-C >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
   \   000072   E8           MOV     A,R0
   \   000073   C3           CLR     C
   \   000074   9A           SUBB    A,R2
   \   000075   F8           MOV     R0,A
   \   000076   E9           MOV     A,R1
   \   000077   9B           SUBB    A,R3
   \   000078   8006         SJMP    ??bdb_isAttrValueChangedSurpassDelta_14
   1740                }
   1741                else
   1742                {
   1743                  res = ( C-L >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
   \                     ??bdb_isAttrValueChangedSurpassDelta_13:
   \   00007A   EA           MOV     A,R2
   \   00007B   C3           CLR     C
   \   00007C   98           SUBB    A,R0
   \   00007D   F8           MOV     R0,A
   \   00007E   EB           MOV     A,R3
   \   00007F   99           SUBB    A,R1
   \                     ??bdb_isAttrValueChangedSurpassDelta_14:
   \   000080   F9           MOV     R1,A
   \   000081   C3           CLR     C
   \   000082   E8           MOV     A,R0
   \   000083   95..         SUBB    A,?V0
   \   000085   E9           MOV     A,R1
   \   000086   95..         SUBB    A,?V1
   \   000088   02....       LJMP    ??bdb_isAttrValueChangedSurpassDelta_15 & 0xFFFF
   1744                }
   1745                break;
   1746              }
   1747              case ZCL_DATATYPE_UINT24:
   1748              {
   1749                uint24 L = *((uint24*)lastValue);
   \                     ??bdb_isAttrValueChangedSurpassDelta_2:
   \   00008B   78..         MOV     R0,#?V0
   \   00008D   12....       LCALL   ?L_MOV_X
   1750                uint24 D = *((uint24*)delta);
   \   000090   8A82         MOV     DPL,R2
   \   000092   8B83         MOV     DPH,R3
   \   000094   78..         MOV     R0,#?V4
   \   000096   12....       LCALL   ?L_MOV_X
   1751                uint24 C = *((uint24*)curValue);
   \   000099   8C82         MOV     DPL,R4
   \   00009B   8D83         MOV     DPH,R5
   \   00009D   78..         MOV     R0,#?V8
   \   00009F   12....       LCALL   ?L_MOV_X
   1752                if(L>=C)
   \   0000A2   78..         MOV     R0,#?V8
   \   0000A4   79..         MOV     R1,#?V0
   \   0000A6   12....       LCALL   ?UL_GT
   \   0000A9   4033         JC      ??bdb_isAttrValueChangedSurpassDelta_16
   1753                {
   1754                  res = ( L-C >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
   \   0000AB   8020         SJMP    ??bdb_isAttrValueChangedSurpassDelta_17
   1755                }
   1756                else
   1757                {
   1758                  res = ( C-L >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
   1759                }
   1760                break;
   1761              }
   1762              case ZCL_DATATYPE_UINT32:
   1763              {
   1764                uint32 L = *((uint32*)lastValue);
   \                     ??bdb_isAttrValueChangedSurpassDelta_3:
   \   0000AD   78..         MOV     R0,#?V0
   \   0000AF   12....       LCALL   ?L_MOV_X
   1765                uint32 D = *((uint32*)delta);
   \   0000B2   8A82         MOV     DPL,R2
   \   0000B4   8B83         MOV     DPH,R3
   \   0000B6   78..         MOV     R0,#?V4
   \   0000B8   12....       LCALL   ?L_MOV_X
   1766                uint32 C = *((uint32*)curValue);
   \   0000BB   8C82         MOV     DPL,R4
   \   0000BD   8D83         MOV     DPH,R5
   \   0000BF   78..         MOV     R0,#?V8
   \   0000C1   12....       LCALL   ?L_MOV_X
   1767                if(L>=C)
   \   0000C4   78..         MOV     R0,#?V8
   \   0000C6   79..         MOV     R1,#?V0
   \   0000C8   12....       LCALL   ?UL_GT
   \   0000CB   4011         JC      ??bdb_isAttrValueChangedSurpassDelta_16
   1768                {
   1769                  res = ( L-C >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
   \                     ??bdb_isAttrValueChangedSurpassDelta_17:
   \   0000CD   78..         MOV     R0,#?V0
   \   0000CF   79..         MOV     R1,#?V8
   \   0000D1   12....       LCALL   ?L_SUB
   \   0000D4   78..         MOV     R0,#?V4
   \   0000D6   79..         MOV     R1,#?V0
   \   0000D8   12....       LCALL   ?UL_GT
   \   0000DB   02....       LJMP    ??bdb_isAttrValueChangedSurpassDelta_15 & 0xFFFF
   1770                }
   1771                else
   1772                {
   1773                  res = ( C-L >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
   \                     ??bdb_isAttrValueChangedSurpassDelta_16:
   \   0000DE   78..         MOV     R0,#?V8
   \   0000E0   79..         MOV     R1,#?V0
   \   0000E2   12....       LCALL   ?L_SUB
   \   0000E5   78..         MOV     R0,#?V4
   \   0000E7   79..         MOV     R1,#?V8
   \   0000E9   12....       LCALL   ?UL_GT
   \   0000EC   02....       LJMP    ??bdb_isAttrValueChangedSurpassDelta_15 & 0xFFFF
   1774                }
   1775                break;
   1776              }
   1777              case ZCL_DATATYPE_INT8:
   1778              {
   1779                int8 L = *((int8*)lastValue);
   \                     ??bdb_isAttrValueChangedSurpassDelta_4:
   \   0000EF   12....       LCALL   ?Subroutine31 & 0xFFFF
   1780                int8 D = *((int8*)delta);
   1781                int8 C = *((int8*)curValue);
   1782                if(L>=C)
   \                     ??CrossCallReturnLabel_40:
   \   0000F2   33           RLC     A
   \   0000F3   95E0         SUBB    A,0xE0 /* A   */
   \   0000F5   FD           MOV     R5,A
   \   0000F6   E5..         MOV     A,?V1
   \   0000F8   FA           MOV     R2,A
   \   0000F9   33           RLC     A
   \   0000FA   95E0         SUBB    A,0xE0 /* A   */
   \   0000FC   FB           MOV     R3,A
   \   0000FD   E5..         MOV     A,?V0
   \   0000FF   F8           MOV     R0,A
   \   000100   33           RLC     A
   \   000101   95E0         SUBB    A,0xE0 /* A   */
   \   000103   F9           MOV     R1,A
   \   000104   E8           MOV     A,R0
   \   000105   C3           CLR     C
   \   000106   95..         SUBB    A,?V1
   \   000108   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00010A   65D0         XRL     A,PSW
   \   00010C   33           RLC     A
   \   00010D   4008         JC      ??bdb_isAttrValueChangedSurpassDelta_18
   1783                {
   1784                  res = ( L-C >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
   \   00010F   E8           MOV     A,R0
   \   000110   C3           CLR     C
   \   000111   9A           SUBB    A,R2
   \   000112   F8           MOV     R0,A
   \   000113   E9           MOV     A,R1
   \   000114   9B           SUBB    A,R3
   \   000115   8006         SJMP    ??bdb_isAttrValueChangedSurpassDelta_19
   1785                }
   1786                else
   1787                {
   1788                  res = ( C-L >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
   \                     ??bdb_isAttrValueChangedSurpassDelta_18:
   \   000117   EA           MOV     A,R2
   \   000118   C3           CLR     C
   \   000119   98           SUBB    A,R0
   \   00011A   F8           MOV     R0,A
   \   00011B   EB           MOV     A,R3
   \   00011C   99           SUBB    A,R1
   \                     ??bdb_isAttrValueChangedSurpassDelta_19:
   \   00011D   F9           MOV     R1,A
   \   00011E   C3           CLR     C
   \   00011F   E8           MOV     A,R0
   \   000120   9C           SUBB    A,R4
   \   000121   E9           MOV     A,R1
   \   000122   9D           SUBB    A,R5
   \   000123   8020         SJMP    ??bdb_isAttrValueChangedSurpassDelta_12
   1789                }
   1790                break;
   1791              }
   1792              case ZCL_DATATYPE_INT16:
   1793              {
   1794                int16 L = *((int16*)lastValue);
   \                     ??bdb_isAttrValueChangedSurpassDelta_5:
   \   000125   12....       LCALL   ?Subroutine25 & 0xFFFF
   1795                int16 D = *((int16*)delta);
   1796                int16 C = *((int16*)curValue);
   1797                if(L>=C)
   \                     ??CrossCallReturnLabel_27:
   \   000128   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00012A   65D0         XRL     A,PSW
   \   00012C   33           RLC     A
   \   00012D   4008         JC      ??bdb_isAttrValueChangedSurpassDelta_20
   1798                {
   1799                  res = ( L-C >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
   \   00012F   E8           MOV     A,R0
   \   000130   C3           CLR     C
   \   000131   9A           SUBB    A,R2
   \   000132   F8           MOV     R0,A
   \   000133   E9           MOV     A,R1
   \   000134   9B           SUBB    A,R3
   \   000135   8006         SJMP    ??bdb_isAttrValueChangedSurpassDelta_21
   1800                }
   1801                else
   1802                {
   1803                  res = ( C-L >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
   \                     ??bdb_isAttrValueChangedSurpassDelta_20:
   \   000137   EA           MOV     A,R2
   \   000138   C3           CLR     C
   \   000139   98           SUBB    A,R0
   \   00013A   F8           MOV     R0,A
   \   00013B   EB           MOV     A,R3
   \   00013C   99           SUBB    A,R1
   \                     ??bdb_isAttrValueChangedSurpassDelta_21:
   \   00013D   F9           MOV     R1,A
   \   00013E   C3           CLR     C
   \   00013F   E8           MOV     A,R0
   \   000140   95..         SUBB    A,?V0
   \   000142   E9           MOV     A,R1
   \   000143   95..         SUBB    A,?V1
   \                     ??bdb_isAttrValueChangedSurpassDelta_12:
   \   000145   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000147   65D0         XRL     A,PSW
   \   000149   33           RLC     A
   \   00014A   803E         SJMP    ??bdb_isAttrValueChangedSurpassDelta_15
   1804                }
   1805                break;
   1806              }
   1807              case ZCL_DATATYPE_INT24:
   1808              {
   1809                int24 L = *((int24*)lastValue);
   1810                int24 D = *((int24*)delta);
   1811                int24 C = *((int24*)curValue);
   1812                if(L>=C)
   1813                {
   1814                  res = ( L-C >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
   1815                }
   1816                else
   1817                {
   1818                  res = ( C-L >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
   1819                }
   1820                break;
   1821              }
   1822              case ZCL_DATATYPE_INT32:
   1823              {
   1824                int32 L = *((int32*)lastValue);
   \                     ??bdb_isAttrValueChangedSurpassDelta_6:
   \   00014C   78..         MOV     R0,#?V0
   \   00014E   12....       LCALL   ?L_MOV_X
   1825                int32 D = *((int32*)delta);
   \   000151   8A82         MOV     DPL,R2
   \   000153   8B83         MOV     DPH,R3
   \   000155   78..         MOV     R0,#?V4
   \   000157   12....       LCALL   ?L_MOV_X
   1826                int32 C = *((int32*)curValue);
   \   00015A   8C82         MOV     DPL,R4
   \   00015C   8D83         MOV     DPH,R5
   \   00015E   78..         MOV     R0,#?V8
   \   000160   12....       LCALL   ?L_MOV_X
   1827                if(L>=C)
   \   000163   78..         MOV     R0,#?V8
   \   000165   79..         MOV     R1,#?V0
   \   000167   12....       LCALL   ?SL_GT
   \   00016A   4010         JC      ??bdb_isAttrValueChangedSurpassDelta_22
   1828                {
   1829                  res = ( L-C >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
   \   00016C   78..         MOV     R0,#?V0
   \   00016E   79..         MOV     R1,#?V8
   \   000170   12....       LCALL   ?L_SUB
   \   000173   78..         MOV     R0,#?V4
   \   000175   79..         MOV     R1,#?V0
   \   000177   12....       LCALL   ?SL_GT
   \   00017A   800E         SJMP    ??bdb_isAttrValueChangedSurpassDelta_15
   1830                }
   1831                else
   1832                {
   1833                  res = ( C-L >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
   \                     ??bdb_isAttrValueChangedSurpassDelta_22:
   \   00017C   78..         MOV     R0,#?V8
   \   00017E   79..         MOV     R1,#?V0
   \   000180   12....       LCALL   ?L_SUB
   \   000183   78..         MOV     R0,#?V4
   \   000185   79..         MOV     R1,#?V8
   \   000187   12....       LCALL   ?SL_GT
   \                     ??bdb_isAttrValueChangedSurpassDelta_15:
   \   00018A   4076         JC      ??bdb_isAttrValueChangedSurpassDelta_9
   \   00018C   8072         SJMP    ??bdb_isAttrValueChangedSurpassDelta_23
   1834                }
   1835                break;
   1836              }
   1837              case ZCL_DATATYPE_SINGLE_PREC:
   1838              {
   1839                float L = *((float*)lastValue);
   \                     ??bdb_isAttrValueChangedSurpassDelta_7:
   \   00018E   78..         MOV     R0,#?V0
   \   000190   12....       LCALL   ?L_MOV_X
   1840                float D = *((float*)delta);
   \   000193   8A82         MOV     DPL,R2
   \   000195   8B83         MOV     DPH,R3
   \   000197   78..         MOV     R0,#?V4
   \   000199   12....       LCALL   ?L_MOV_X
   1841                float C = *((float*)curValue);
   \   00019C   8C82         MOV     DPL,R4
   \   00019E   8D83         MOV     DPH,R5
   \   0001A0   78..         MOV     R0,#?V8
   \   0001A2   12....       LCALL   ?L_MOV_X
   1842                if(L>=C)
   \   0001A5   78..         MOV     R0,#?V0
   \   0001A7   79..         MOV     R1,#?V8
   \   0001A9   12....       LCALL   ?FLT_GE
   \   0001AC   4030         JC      ??bdb_isAttrValueChangedSurpassDelta_24
   1843                {
   1844                  res = ( L-C >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
   1845                }
   1846                else
   1847                {
   1848                  res = ( C-L >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
   \   0001AE   78..         MOV     R0,#?V8
   \   0001B0   79..         MOV     R1,#?V0
   \   0001B2   12....       LCALL   ?FLT_SUB
   \   0001B5   78..         MOV     R0,#?V8
   \   0001B7   79..         MOV     R1,#?V4
   \   0001B9   12....       LCALL   ?FLT_GE
   \   0001BC   802E         SJMP    ??bdb_isAttrValueChangedSurpassDelta_25
   1849                }
   1850                break;
   1851              }
   1852              case ZCL_DATATYPE_DOUBLE_PREC:
   1853              {
   1854                double L = *((double*)lastValue);
   \                     ??bdb_isAttrValueChangedSurpassDelta_8:
   \   0001BE   78..         MOV     R0,#?V0
   \   0001C0   12....       LCALL   ?L_MOV_X
   1855                double D = *((double*)delta);
   \   0001C3   8A82         MOV     DPL,R2
   \   0001C5   8B83         MOV     DPH,R3
   \   0001C7   78..         MOV     R0,#?V4
   \   0001C9   12....       LCALL   ?L_MOV_X
   1856                double C = *((double*)curValue);
   \   0001CC   8C82         MOV     DPL,R4
   \   0001CE   8D83         MOV     DPH,R5
   \   0001D0   78..         MOV     R0,#?V8
   \   0001D2   12....       LCALL   ?L_MOV_X
   1857                if(L>=C)
   \   0001D5   78..         MOV     R0,#?V0
   \   0001D7   79..         MOV     R1,#?V8
   \   0001D9   12....       LCALL   ?FLT_GE
   \   0001DC   5012         JNC     ??bdb_isAttrValueChangedSurpassDelta_26
   1858                {
   1859                  res = ( L-C >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
   \                     ??bdb_isAttrValueChangedSurpassDelta_24:
   \   0001DE   78..         MOV     R0,#?V0
   \   0001E0   79..         MOV     R1,#?V8
   \   0001E2   12....       LCALL   ?FLT_SUB
   \   0001E5   78..         MOV     R0,#?V0
   \   0001E7   79..         MOV     R1,#?V4
   \   0001E9   12....       LCALL   ?FLT_GE
   \                     ??bdb_isAttrValueChangedSurpassDelta_25:
   \   0001EC   5014         JNC     ??bdb_isAttrValueChangedSurpassDelta_9
   \   0001EE   8010         SJMP    ??bdb_isAttrValueChangedSurpassDelta_23
   1860                }
   1861                else
   1862                {
   1863                  res = ( C-L >= D) ? BDBREPORTING_TRUE:BDBREPORTING_FALSE;
   \                     ??bdb_isAttrValueChangedSurpassDelta_26:
   \   0001F0   78..         MOV     R0,#?V8
   \   0001F2   79..         MOV     R1,#?V0
   \   0001F4   12....       LCALL   ?FLT_SUB
   \   0001F7   78..         MOV     R0,#?V8
   \   0001F9   79..         MOV     R1,#?V4
   \   0001FB   12....       LCALL   ?FLT_GE
   \   0001FE   5002         JNC     ??bdb_isAttrValueChangedSurpassDelta_9
   \                     ??bdb_isAttrValueChangedSurpassDelta_23:
   \   000200   7E01         MOV     R6,#0x1
   1864                }
   1865                break;
   1866              }
   1867              case ZCL_DATATYPE_INT40:
   1868              case ZCL_DATATYPE_INT48:
   1869              case ZCL_DATATYPE_INT56:
   1870              case ZCL_DATATYPE_UINT64:
   1871              case ZCL_DATATYPE_INT64:
   1872              case ZCL_DATATYPE_SEMI_PREC:
   1873              case ZCL_DATATYPE_UINT40:
   1874              case ZCL_DATATYPE_UINT48:
   1875              case ZCL_DATATYPE_UINT56:
   1876              case ZCL_DATATYPE_TOD:
   1877              case ZCL_DATATYPE_DATE:
   1878              case ZCL_DATATYPE_UTC:
   1879              {
   1880                // Not implemented
   1881                res = BDBREPORTING_FALSE;
   1882                break;
   1883              }
   1884              default:
   1885              {
   1886                res = BDBREPORTING_FALSE;
   1887                break;
   1888              }
   1889            }
   1890            return res;
   \                     ??bdb_isAttrValueChangedSurpassDelta_9:
   \   000202   EE           MOV     A,R6
   \   000203   F9           MOV     R1,A
   \   000204   02....       LJMP    ?Subroutine3 & 0xFFFF
   1891          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   8C82         MOV     DPL,R4
   \   00000B   8D83         MOV     DPH,R5
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V1,A
   \   000010   E8           MOV     A,R0
   \   000011   FC           MOV     R4,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000003   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000006   8C82         MOV     DPL,R4
   \   000008   8D83         MOV     DPH,R5
   \   00000A   12....       LCALL   ??Subroutine94_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   00000D   C3           CLR     C
   \   00000E   E8           MOV     A,R0
   \   00000F   9A           SUBB    A,R2
   \   000010   E9           MOV     A,R1
   \   000011   9B           SUBB    A,R3
   \   000012   22           RET
   1892          
   1893          /*
   1894          * End: Helper methods
   1895          */
   1896          
   1897          
   1898          /*
   1899          * Begin: Reporting timer related methods
   1900          */
   1901          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1902          static void bdb_RepRestartNextEventTimer( void )
   \                     bdb_RepRestartNextEventTimer:
   1903          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   1904            uint32 timeMs;
   1905            // convert from seconds to milliseconds
   1906            timeMs = 1000L * (bdb_reportingNextEventTimeout); 
   1907            osal_start_timerEx( bdb_TaskID, BDB_REPORT_TIMEOUT, timeMs );
   \   000005                ; Setup parameters for call to function osal_start_timerEx
   \   000005   90....       MOV     DPTR,#bdb_reportingNextEventTimeout
   \   000008   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00000B   E4           CLR     A
   \   00000C   F5..         MOV     ?V2,A
   \   00000E   F5..         MOV     ?V3,A
   \   000010   90....       MOV     DPTR,#__Constant_3e8
   \   000013   78..         MOV     R0,#?V4
   \   000015   12....       LCALL   ?L_MOV_X
   \   000018   78..         MOV     R0,#?V0
   \   00001A   79..         MOV     R1,#?V4
   \   00001C   12....       LCALL   ?L_MUL
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000024   7A80         MOV     R2,#-0x80
   \   000026   7B00         MOV     R3,#0x0
   \   000028   90....       MOV     DPTR,#bdb_TaskID
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000030   7404         MOV     A,#0x4
   \   000032   12....       LCALL   ?DEALLOC_XSTACK8
   1908          }
   \   000035                REQUIRE ?Subroutine5
   \   000035                ; // Fall through to label ?Subroutine5
   1909          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1910          static void bdb_RepSetupReporting( void )
   \                     bdb_RepSetupReporting:
   1911          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   1912            uint8 numArrayFlags, i;
   1913            //Stop if reporting timer is active
   1914            osal_stop_timerEx( bdb_TaskID, BDB_REPORT_TIMEOUT );
   \   000005                ; Setup parameters for call to function osal_stop_timerEx
   \   000005   7A80         MOV     R2,#-0x80
   \   000007   7B00         MOV     R3,#0x0
   \   000009   90....       MOV     DPTR,#bdb_TaskID
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1915            
   1916            numArrayFlags = bdb_reportingClusterEndpointArrayCount;
   \   000011   90....       MOV     DPTR,#bdb_reportingClusterEndpointArrayCount
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V2,A
   1917            bdbReportFlagsHolder_t* arrayFlags = (bdbReportFlagsHolder_t *)osal_mem_alloc( sizeof( bdbReportFlagsHolder_t )*numArrayFlags );
   \   000017                ; Setup parameters for call to function osal_mem_alloc
   \   000017   F5..         MOV     ?V0,A
   \   000019   75..00       MOV     ?V1,#0x0
   \   00001C   7402         MOV     A,#0x2
   \   00001E   78..         MOV     R0,#?V0
   \   000020   12....       LCALL   ?S_SHL
   \   000023   AA..         MOV     R2,?V0
   \   000025   AB..         MOV     R3,?V1
   \   000027   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002A   8A..         MOV     ?V0,R2
   \   00002C   8B..         MOV     ?V1,R3
   \   00002E   AE..         MOV     R6,?V0
   \   000030   AF..         MOV     R7,?V1
   1918            if( arrayFlags==NULL )
   \   000032   EE           MOV     A,R6
   \   000033   4F           ORL     A,R7
   \   000034   7003         JNZ     $+5
   \   000036   02....       LJMP    ??bdb_RepSetupReporting_0 & 0xFFFF
   1919            {
   1920              return;
   1921            }
   1922            for( i=0; i<numArrayFlags; i++ )
   \   000039   75..00       MOV     ?V3,#0x0
   \   00003C   803F         SJMP    ??bdb_RepSetupReporting_1
   1923            {
   1924              arrayFlags[i].endpoint =  bdb_reportingClusterEndpointArray[i].endpoint;
   \                     ??bdb_RepSetupReporting_2:
   \   00003E   AA..         MOV     R2,?V3
   \   000040   8A..         MOV     ?V0,R2
   \   000042   75..00       MOV     ?V1,#0x0
   \   000045   7402         MOV     A,#0x2
   \   000047   78..         MOV     R0,#?V0
   \   000049   12....       LCALL   ?S_SHL
   \   00004C   EE           MOV     A,R6
   \   00004D   25..         ADD     A,?V0
   \   00004F   F8           MOV     R0,A
   \   000050   EF           MOV     A,R7
   \   000051   35..         ADDC    A,?V1
   \   000053   F9           MOV     R1,A
   \   000054   EA           MOV     A,R2
   \   000055   75F00D       MOV     B,#0xd
   \   000058   A4           MUL     AB
   \   000059   FA           MOV     R2,A
   \   00005A   ABF0         MOV     R3,B
   \   00005C   74..         MOV     A,#bdb_reportingClusterEndpointArray & 0xff
   \   00005E   2A           ADD     A,R2
   \   00005F   FA           MOV     R2,A
   \   000060   74..         MOV     A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
   \   000062   3B           ADDC    A,R3
   \   000063   FB           MOV     R3,A
   \   000064   8A82         MOV     DPL,R2
   \   000066   8B83         MOV     DPH,R3
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   8882         MOV     DPL,R0
   \   00006C   8983         MOV     DPH,R1
   \   00006E   A3           INC     DPTR
   \   00006F   12....       LCALL   ?Subroutine16 & 0xFFFF
   1925              arrayFlags[i].cluster =  bdb_reportingClusterEndpointArray[i].cluster;
   1926              arrayFlags[i].flags =  bdb_reportingClusterEndpointArray[i].flags;
   1927            }
   \                     ??CrossCallReturnLabel_15:
   \   000072   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000075   E0           MOVX    A,@DPTR
   \   000076   8882         MOV     DPL,R0
   \   000078   8983         MOV     DPH,R1
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   05..         INC     ?V3
   \                     ??bdb_RepSetupReporting_1:
   \   00007D   E5..         MOV     A,?V3
   \   00007F   C3           CLR     C
   \   000080   95..         SUBB    A,?V2
   \   000082   40BA         JC      ??bdb_RepSetupReporting_2
   1928            
   1929            if( bdb_reportingClusterEndpointArrayCount > 0 )
   \   000084   90....       MOV     DPTR,#bdb_reportingClusterEndpointArrayCount
   \   000087   E0           MOVX    A,@DPTR
   \   000088   6051         JZ      ??bdb_RepSetupReporting_3
   1930            {
   1931              bdb_clusterEndpointArrayFreeAll( );
   \   00008A   F5..         MOV     ?V4,A
   \   00008C   75..00       MOV     ?V3,#0x0
   \   00008F   803E         SJMP    ??bdb_RepSetupReporting_4
   1932            }
   \                     ??bdb_RepSetupReporting_5:
   \   000091   8A82         MOV     DPL,R2
   \   000093   8B83         MOV     DPH,R3
   \   000095   12....       LCALL   ??Subroutine95_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000098   90....       MOV     DPTR,#bdb_reportingClusterEndpointArray + 11
   \   00009B   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00009E   F5..         MOV     ?V0,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   F5..         MOV     ?V1,A
   \   0000A4                ; Setup parameters for call to function osal_mem_free
   \   0000A4   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000A7   90....       MOV     DPTR,#bdb_reportingClusterEndpointArray + 10
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   14           DEC     A
   \   0000AC   F0           MOVX    @DPTR,A
   \   0000AD                ; Setup parameters for call to function osal_mem_free
   \   0000AD   AA..         MOV     R2,?V0
   \   0000AF   AB..         MOV     R3,?V1
   \   0000B1   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??bdb_RepSetupReporting_6:
   \   0000B4   90....       MOV     DPTR,#bdb_reportingClusterEndpointArray + 11
   \   0000B7   12....       LCALL   ??Subroutine88_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   0000BA   70D5         JNZ     ??bdb_RepSetupReporting_5
   \   0000BC                ; Setup parameters for call to function bdb_clusterEndpointArrayMoveTo
   \   0000BC   90....       MOV     DPTR,#bdb_reportingClusterEndpointArrayCount
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   14           DEC     A
   \   0000C1   FA           MOV     R2,A
   \   0000C2   7900         MOV     R1,#0x0
   \   0000C4   12....       LCALL   `??bdb_clusterEndpointArrayMoveTo::?relay`; Banked call to: bdb_clusterEndpointArrayMoveTo
   \   0000C7   90....       MOV     DPTR,#bdb_reportingClusterEndpointArrayCount
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   14           DEC     A
   \   0000CC   F0           MOVX    @DPTR,A
   \                     ??bdb_RepSetupReporting_7:
   \   0000CD   05..         INC     ?V3
   \                     ??bdb_RepSetupReporting_4:
   \   0000CF   E5..         MOV     A,?V3
   \   0000D1   C3           CLR     C
   \   0000D2   95..         SUBB    A,?V4
   \   0000D4   5005         JNC     ??bdb_RepSetupReporting_3
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   70DB         JNZ     ??bdb_RepSetupReporting_6
   \   0000D9   80F2         SJMP    ??bdb_RepSetupReporting_7
   1933            
   1934            //Bult or rebuilt the clusterEndpoint array
   1935            bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray( );
   \                     ??bdb_RepSetupReporting_3:
   \   0000DB                ; Setup parameters for call to function bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray
   \   0000DB   12....       LCALL   ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo; Banked call to: bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray
   1936            
   1937            for( i=0; i<numArrayFlags;i++ )
   \   0000DE   75..00       MOV     ?V3,#0x0
   \   0000E1   804D         SJMP    ??bdb_RepSetupReporting_8
   1938            {
   1939               uint8 clusterEndpointIndex = bdb_clusterEndpointArraySearch( arrayFlags[i].endpoint, arrayFlags[i].cluster );
   \                     ??bdb_RepSetupReporting_9:
   \   0000E3   85....       MOV     ?V0,?V3
   \   0000E6   75..00       MOV     ?V1,#0x0
   \   0000E9   7402         MOV     A,#0x2
   \   0000EB   78..         MOV     R0,#?V0
   \   0000ED   12....       LCALL   ?S_SHL
   \   0000F0   EE           MOV     A,R6
   \   0000F1   25..         ADD     A,?V0
   \   0000F3   F8           MOV     R0,A
   \   0000F4   EF           MOV     A,R7
   \   0000F5   35..         ADDC    A,?V1
   \   0000F7   F9           MOV     R1,A
   \   0000F8   88..         MOV     ?V0,R0
   \   0000FA   89..         MOV     ?V1,R1
   \   0000FC                ; Setup parameters for call to function bdb_clusterEndpointArraySearch
   \   0000FC   8882         MOV     DPL,R0
   \   0000FE   F583         MOV     DPH,A
   \   000100   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000103   A3           INC     DPTR
   \   000104   E0           MOVX    A,@DPTR
   \   000105   F9           MOV     R1,A
   \   000106   12....       LCALL   `??bdb_clusterEndpointArraySearch::?relay`; Banked call to: bdb_clusterEndpointArraySearch
   \   000109   E9           MOV     A,R1
   \   00010A   F8           MOV     R0,A
   1940               if( clusterEndpointIndex != BDBREPORTING_INVALIDINDEX )
   \   00010B   74FF         MOV     A,#-0x1
   \   00010D   68           XRL     A,R0
   \   00010E   601E         JZ      ??bdb_RepSetupReporting_10
   1941               {
   1942                 bdb_reportingClusterEndpointArray[clusterEndpointIndex].flags = arrayFlags[i].flags;
   \   000110   85..82       MOV     DPL,?V0
   \   000113   85..83       MOV     DPH,?V1
   \   000116   E0           MOVX    A,@DPTR
   \   000117   C0E0         PUSH    A
   \   000119   E8           MOV     A,R0
   \   00011A   75F00D       MOV     B,#0xd
   \   00011D   A4           MUL     AB
   \   00011E   F8           MOV     R0,A
   \   00011F   A9F0         MOV     R1,B
   \   000121   74..         MOV     A,#bdb_reportingClusterEndpointArray & 0xff
   \   000123   28           ADD     A,R0
   \   000124   F582         MOV     DPL,A
   \   000126   74..         MOV     A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
   \   000128   39           ADDC    A,R1
   \   000129   F583         MOV     DPH,A
   \   00012B   D0E0         POP     A
   \   00012D   F0           MOVX    @DPTR,A
   1943               }
   1944            }
   \                     ??bdb_RepSetupReporting_10:
   \   00012E   05..         INC     ?V3
   \                     ??bdb_RepSetupReporting_8:
   \   000130   E5..         MOV     A,?V3
   \   000132   C3           CLR     C
   \   000133   95..         SUBB    A,?V2
   \   000135   40AC         JC      ??bdb_RepSetupReporting_9
   1945            osal_mem_free( arrayFlags );
   \   000137                ; Setup parameters for call to function osal_mem_free
   \   000137   EE           MOV     A,R6
   \   000138   FA           MOV     R2,A
   \   000139   EF           MOV     A,R7
   \   00013A   FB           MOV     R3,A
   \   00013B   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1946          }
   \                     ??bdb_RepSetupReporting_0:
   \   00013E   7F05         MOV     R7,#0x5
   \   000140   02....       LJMP    ?BANKED_LEAVE_XDATA
   1947          
   1948                                         

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1949          static void bdb_RepStopEventTimer( void )
   \                     bdb_RepStopEventTimer:
   1950          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1951            osal_stop_timerEx( bdb_TaskID, BDB_REPORT_TIMEOUT );
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A80         MOV     R2,#-0x80
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#bdb_TaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1952          }
   \   000010   02....       LJMP    ??Subroutine89_0 & 0xFFFF
   1953          
   1954          /*
   1955          * End: Reporting timer related methods
   1956          */
   1957          
   1958          /*
   1959          * Begin: Ztack zcl helper methods
   1960          */
   1961          
   1962          /*********************************************************************
   1963           * @fn      bdb_FindEpDesc
   1964           *
   1965           * @brief   Find the EndPoint descriptor pointer
   1966           *
   1967           * @param   endPoint - EndPoint Id
   1968           *
   1969           * @return  CurrEpDescriptor - Pointer to found Simple Descriptor, NULL otherwise
   1970           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1971          static endPointDesc_t* bdb_FindEpDesc( uint8 endPoint )
   \                     bdb_FindEpDesc:
   1972          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1973            endPointDesc_t *CurrEpDescriptor = NULL;
   1974            
   1975            epList_t *bdb_CurrEpDescriptorNextInList;
   1976            
   1977            bdb_CurrEpDescriptorNextInList = bdb_HeadEpDescriptorList;
   \   000004   90....       MOV     DPTR,#bdb_HeadEpDescriptorList
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FC           MOV     R4,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   8003         SJMP    ??bdb_FindEpDesc_0
   1978            CurrEpDescriptor = bdb_CurrEpDescriptorNextInList->epDesc;
   1979            
   1980            while ( CurrEpDescriptor->endPoint != endPoint )
   1981            {
   1982              if ( bdb_CurrEpDescriptorNextInList->nextDesc->nextDesc != NULL )
   1983              {
   1984                bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
   \                     ??bdb_FindEpDesc_1:
   \   00000D   EA           MOV     A,R2
   \   00000E   FC           MOV     R4,A
   \   00000F   EB           MOV     A,R3
   \                     ??bdb_FindEpDesc_0:
   \   000010   FD           MOV     R5,A
   1985                CurrEpDescriptor = bdb_CurrEpDescriptorNextInList->epDesc;
   \   000011   8C82         MOV     DPL,R4
   \   000013   8D83         MOV     DPH,R5
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   12....       LCALL   ?Subroutine35 & 0xFFFF
   1986              }
   \                     ??CrossCallReturnLabel_45:
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   69           XRL     A,R1
   \   00001C   6014         JZ      ??bdb_FindEpDesc_2
   \   00001E   8C82         MOV     DPL,R4
   \   000020   8D83         MOV     DPH,R5
   \   000022   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000025   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000028   EC           MOV     A,R4
   \   000029   4D           ORL     A,R5
   \   00002A   70E1         JNZ     ??bdb_FindEpDesc_1
   1987              else
   1988              {
   1989                return ( NULL );
   \   00002C   7A00         MOV     R2,#0x0
   \   00002E   7B00         MOV     R3,#0x0
   \   000030   8004         SJMP    ??bdb_FindEpDesc_3
   1990              }
   1991            }
   1992            return CurrEpDescriptor;
   \                     ??bdb_FindEpDesc_2:
   \   000032   AA82         MOV     R2,DPL
   \   000034   AB83         MOV     R3,DPH
   \                     ??bdb_FindEpDesc_3:
   \   000036   02....       LJMP    ??Subroutine89_0 & 0xFFFF
   1993          }
   1994          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1995          static uint8 bdb_RepFindAttrEntry( uint8 endpoint, uint16 cluster, uint16 attrID, zclAttribute_t* attrRes )
   \                     bdb_RepFindAttrEntry:
   1996          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V2,R4
   \   00000D   8D..         MOV     ?V3,R5
   1997            epList_t *epCur = epList;
   \   00000F   90....       MOV     DPTR,#epList
   \   000012   8006         SJMP    ??bdb_RepFindAttrEntry_0
   1998            uint8 i;
   1999            uint8 found = BDBREPORTING_FALSE;
   2000            for ( epCur = epList; epCur != NULL; epCur = epCur->nextDesc )
   \                     ??bdb_RepFindAttrEntry_1:
   \   000014   85..82       MOV     DPL,?V0
   \   000017   85..83       MOV     DPH,?V1
   \                     ??bdb_RepFindAttrEntry_0:
   \   00001A   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00001D   7003         JNZ     $+5
   \   00001F   02....       LJMP    ??bdb_RepFindAttrEntry_2 & 0xFFFF
   2001            {
   2002              if( epCur->epDesc->endPoint == endpoint )
   \   000022   85..82       MOV     DPL,?V0
   \   000025   85..83       MOV     DPH,?V1
   \   000028   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00002B   70E7         JNZ     ??bdb_RepFindAttrEntry_1
   2003              {
   2004                zclAttrRecsList* attrItem = zclFindAttrRecsList( epCur->epDesc->endPoint );
   \   00002D                ; Setup parameters for call to function zclFindAttrRecsList
   \   00002D   12....       LCALL   `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000030   8A..         MOV     ?V6,R2
   \   000032   8B..         MOV     ?V7,R3
   \   000034   A8..         MOV     R0,?V6
   \   000036   A9..         MOV     R1,?V7
   2005                
   2006                if( (attrItem != NULL) && ( (attrItem->numAttributes > 0) && (attrItem->attrs != NULL) ) )
   \   000038   E8           MOV     A,R0
   \   000039   49           ORL     A,R1
   \   00003A   60D8         JZ      ??bdb_RepFindAttrEntry_1
   \   00003C   8882         MOV     DPL,R0
   \   00003E   8983         MOV     DPH,R1
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F5..         MOV     ?V5,A
   \   00004A   60C8         JZ      ??bdb_RepFindAttrEntry_1
   \   00004C   E8           MOV     A,R0
   \   00004D   2408         ADD     A,#0x8
   \   00004F   5001         JNC     ??bdb_RepFindAttrEntry_3
   \   000051   09           INC     R1
   \                     ??bdb_RepFindAttrEntry_3:
   \   000052   FC           MOV     R4,A
   \   000053   E9           MOV     A,R1
   \   000054   FD           MOV     R5,A
   \   000055   8C82         MOV     DPL,R4
   \   000057   8D83         MOV     DPH,R5
   \   000059   12....       LCALL   ??Subroutine88_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   00005C   60B6         JZ      ??bdb_RepFindAttrEntry_1
   2007                {
   2008                  for ( i = 0; i < attrItem->numAttributes; i++ )
   \   00005E   75..00       MOV     ?V10,#0x0
   \   000061   8002         SJMP    ??bdb_RepFindAttrEntry_4
   \                     ??bdb_RepFindAttrEntry_5:
   \   000063   05..         INC     ?V10
   \                     ??bdb_RepFindAttrEntry_4:
   \   000065   E5..         MOV     A,?V10
   \   000067   C3           CLR     C
   \   000068   95..         SUBB    A,?V5
   \   00006A   50A8         JNC     ??bdb_RepFindAttrEntry_1
   2009                  {
   2010                    if ( ( attrItem->attrs[i].clusterID == cluster ) && ( attrItem->attrs[i].attr.attrId ==  attrID ) )
   \   00006C   85....       MOV     ?V6,?V10
   \   00006F   75..00       MOV     ?V7,#0x0
   \   000072   7403         MOV     A,#0x3
   \   000074   78..         MOV     R0,#?V6
   \   000076   12....       LCALL   ?S_SHL
   \   000079   A8..         MOV     R0,?V6
   \   00007B   A9..         MOV     R1,?V7
   \   00007D   EA           MOV     A,R2
   \   00007E   28           ADD     A,R0
   \   00007F   F5..         MOV     ?V6,A
   \   000081   EB           MOV     A,R3
   \   000082   39           ADDC    A,R1
   \   000083   F5..         MOV     ?V7,A
   \   000085   85..82       MOV     DPL,?V6
   \   000088   F583         MOV     DPH,A
   \   00008A   E4           CLR     A
   \   00008B   93           MOVC    A,@A+DPTR
   \   00008C   F5..         MOV     ?V8,A
   \   00008E   7401         MOV     A,#0x1
   \   000090   93           MOVC    A,@A+DPTR
   \   000091   F5..         MOV     ?V9,A
   \   000093   EE           MOV     A,R6
   \   000094   65..         XRL     A,?V8
   \   000096   7003         JNZ     ??bdb_RepFindAttrEntry_6
   \   000098   EF           MOV     A,R7
   \   000099   65..         XRL     A,?V9
   \                     ??bdb_RepFindAttrEntry_6:
   \   00009B   70C6         JNZ     ??bdb_RepFindAttrEntry_5
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   E4           CLR     A
   \   0000A0   93           MOVC    A,@A+DPTR
   \   0000A1   C0E0         PUSH    A
   \   0000A3   7401         MOV     A,#0x1
   \   0000A5   93           MOVC    A,@A+DPTR
   \   0000A6   F583         MOV     DPH,A
   \   0000A8   D082         POP     DPL
   \   0000AA   8582..       MOV     ?V8,DPL
   \   0000AD   8583..       MOV     ?V9,DPH
   \   0000B0   E5..         MOV     A,?V2
   \   0000B2   65..         XRL     A,?V8
   \   0000B4   7004         JNZ     ??bdb_RepFindAttrEntry_7
   \   0000B6   E5..         MOV     A,?V3
   \   0000B8   65..         XRL     A,?V9
   \                     ??bdb_RepFindAttrEntry_7:
   \   0000BA   70A7         JNZ     ??bdb_RepFindAttrEntry_5
   \   0000BC   7413         MOV     A,#0x13
   \   0000BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C1   12....       LCALL   ?Subroutine35 & 0xFFFF
   2011                    {
   2012                      attrRes->attrId = attrItem->attrs[i].attr.attrId;
   \                     ??CrossCallReturnLabel_43:
   \   0000C4   E5..         MOV     A,?V8
   \   0000C6   F0           MOVX    @DPTR,A
   \   0000C7   A3           INC     DPTR
   \   0000C8   E5..         MOV     A,?V9
   \   0000CA   F0           MOVX    @DPTR,A
   2013                      attrRes->dataType = attrItem->attrs[i].attr.dataType;
   \   0000CB   85..82       MOV     DPL,?V6
   \   0000CE   85..83       MOV     DPH,?V7
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   E4           CLR     A
   \   0000D6   93           MOVC    A,@A+DPTR
   \   0000D7   8A82         MOV     DPL,R2
   \   0000D9   8B83         MOV     DPH,R3
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   F0           MOVX    @DPTR,A
   2014                      attrRes->accessControl = attrItem->attrs[i].attr.accessControl;
   \   0000DE   8C82         MOV     DPL,R4
   \   0000E0   8D83         MOV     DPH,R5
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   28           ADD     A,R0
   \   0000E4   FE           MOV     R6,A
   \   0000E5   A3           INC     DPTR
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   39           ADDC    A,R1
   \   0000E8   8E82         MOV     DPL,R6
   \   0000EA   F583         MOV     DPH,A
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   E4           CLR     A
   \   0000F2   93           MOVC    A,@A+DPTR
   \   0000F3   8A82         MOV     DPL,R2
   \   0000F5   8B83         MOV     DPH,R3
   \   0000F7   A3           INC     DPTR
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   F0           MOVX    @DPTR,A
   2015                      attrRes->dataPtr = attrItem->attrs[i].attr.dataPtr;
   \   0000FB   8C82         MOV     DPL,R4
   \   0000FD   8D83         MOV     DPH,R5
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   28           ADD     A,R0
   \   000101   FC           MOV     R4,A
   \   000102   A3           INC     DPTR
   \   000103   E0           MOVX    A,@DPTR
   \   000104   39           ADDC    A,R1
   \   000105   8C82         MOV     DPL,R4
   \   000107   F583         MOV     DPH,A
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000112   8A82         MOV     DPL,R2
   \   000114   8B83         MOV     DPH,R3
   \   000116   12....       LCALL   ??Subroutine100_0 & 0xFFFF
   2016                      return BDBREPORTING_TRUE;
   \                     ??CrossCallReturnLabel_218:
   \   000119   7901         MOV     R1,#0x1
   \   00011B   8002         SJMP    ??bdb_RepFindAttrEntry_8
   2017                    }
   2018                  }
   2019                }
   2020              }
   2021            }
   2022            return found;
   \                     ??bdb_RepFindAttrEntry_2:
   \   00011D   7900         MOV     R1,#0x0
   \                     ??bdb_RepFindAttrEntry_8:
   \   00011F                REQUIRE ?Subroutine7
   \   00011F                ; // Fall through to label ?Subroutine7
   2023           }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7F0B         MOV     R7,#0xb
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000005   E5..         MOV     A,?V4
   \   000007   69           XRL     A,R1
   \   000008   22           RET
   2024          
   2025          /*
   2026          * End: Ztack zcl helper methods
   2027          */                   
   2028          
   2029          
   2030          
   2031          
   2032          /*********************************************************************
   2033          *********************************************************************/
   2034          
   2035          /*
   2036          * Begin: Reporting attr app API methods 
   2037          */
   2038          
   2039          
   2040          
   2041           /*********************************************************************
   2042           * @fn          bdb_RepAddAttrCfgRecordDefaultToList
   2043           *
   2044           * @brief       Adds default configuration values for a Reportable Attribute Record
   2045           *
   2046           * @param       endpoint
   2047           * @param       cluster
   2048           * @param       attrID - Reporable attribute ID
   2049           * @param       minReportInt - Default value for minimum reportable interval
   2050           * @param       maxReportInt - Default value for maximum reportable interval
   2051           * @param       reportableChange - buffer containing attribute value that is the 
   2052           *              delta change to trigger a report
   2053           *
   2054           * @return      ZInvalidParameter - No endpoint, cluster, attribute ID found in simple desc
   2055           *              ZFailure - No memory to allocate entry
   2056           *              ZSuccess
   2057           *              
   2058           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005                REQUIRE ??Subroutine87_0
   \   000005                ; // Fall through to label ??Subroutine87_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2059          ZStatus_t bdb_RepAddAttrCfgRecordDefaultToList( uint8 endpoint, uint16 cluster, uint16 attrID, uint16 minReportInt, uint16 maxReportInt, uint8* reportableChange )
   \                     bdb_RepAddAttrCfgRecordDefaultToList:
   2060          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   \   000007   8A..         MOV     ?V2,R2
   \   000009   8B..         MOV     ?V3,R3
   \   00000B   8C..         MOV     ?V0,R4
   \   00000D   8D..         MOV     ?V1,R5
   2061            uint8 status;
   2062            epList_t *epCur;
   2063            uint8 i;
   2064            
   2065            if( bdb_reportingAcceptDefaultConfs == BDBREPORTING_FALSE )
   \   00000F   90....       MOV     DPTR,#bdb_reportingAcceptDefaultConfs
   \   000012   E0           MOVX    A,@DPTR
   \   000013   7003         JNZ     $+5
   \   000015   02....       LJMP    ??bdb_RepAddAttrCfgRecordDefaultToList_0 & 0xFFFF
   2066            {
   2067              //Don't accept anymore default attribute configurations
   2068              return ZFailure;
   2069            }
   2070            
   2071            //Find if endpoint and cluster values are valid
   2072            uint8 foundEndpCluster = BDBREPORTING_FALSE;
   2073            for ( epCur = epList; epCur != NULL; epCur = epCur->nextDesc )
   \   000018   90....       MOV     DPTR,#epList
   \   00001B   8004         SJMP    ??bdb_RepAddAttrCfgRecordDefaultToList_1
   \                     ??bdb_RepAddAttrCfgRecordDefaultToList_2:
   \   00001D   8E82         MOV     DPL,R6
   \   00001F   8F83         MOV     DPH,R7
   \                     ??bdb_RepAddAttrCfgRecordDefaultToList_1:
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FE           MOV     R6,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FF           MOV     R7,A
   \   000026   EE           MOV     A,R6
   \   000027   4F           ORL     A,R7
   \   000028   6077         JZ      ??bdb_RepAddAttrCfgRecordDefaultToList_3
   2074            {
   2075              if( epCur->epDesc->endPoint != endpoint )
   \   00002A   8E82         MOV     DPL,R6
   \   00002C   8F83         MOV     DPH,R7
   \   00002E   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000031   70EA         JNZ     ??bdb_RepAddAttrCfgRecordDefaultToList_2
   2076              {
   2077                continue;
   2078              }
   2079              zclAttrRecsList* attrItem = zclFindAttrRecsList( epCur->epDesc->endPoint );
   \   000033                ; Setup parameters for call to function zclFindAttrRecsList
   \   000033   12....       LCALL   `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000036   8A..         MOV     ?V6,R2
   \   000038   8B..         MOV     ?V7,R3
   \   00003A   A8..         MOV     R0,?V6
   \   00003C   A9..         MOV     R1,?V7
   2080              if( attrItem== NULL )
   \   00003E   E8           MOV     A,R0
   \   00003F   49           ORL     A,R1
   \   000040   60DB         JZ      ??bdb_RepAddAttrCfgRecordDefaultToList_2
   2081              {
   2082                continue;
   2083              }
   2084              if( attrItem->numAttributes == 0 || attrItem->attrs == NULL )
   \   000042   8882         MOV     DPL,R0
   \   000044   8983         MOV     DPH,R1
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   FD           MOV     R5,A
   \   00004F   60CC         JZ      ??bdb_RepAddAttrCfgRecordDefaultToList_2
   \   000051   8882         MOV     DPL,R0
   \   000053   8983         MOV     DPH,R1
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   00005A   60C1         JZ      ??bdb_RepAddAttrCfgRecordDefaultToList_2
   2085              {
   2086                continue;
   2087              }
   2088              for ( i = 0; i < attrItem->numAttributes; i++ )
   \   00005C   7C00         MOV     R4,#0x0
   \   00005E   8001         SJMP    ??bdb_RepAddAttrCfgRecordDefaultToList_4
   2089              {
   2090                if( attrItem->attrs[i].clusterID != cluster )
   2091                {
   2092                  continue;
   \                     ??bdb_RepAddAttrCfgRecordDefaultToList_5:
   \   000060   0C           INC     R4
   \                     ??bdb_RepAddAttrCfgRecordDefaultToList_4:
   \   000061   EC           MOV     A,R4
   \   000062   C3           CLR     C
   \   000063   9D           SUBB    A,R5
   \   000064   503B         JNC     ??bdb_RepAddAttrCfgRecordDefaultToList_3
   \   000066   8C..         MOV     ?V6,R4
   \   000068   75..00       MOV     ?V7,#0x0
   \   00006B   7403         MOV     A,#0x3
   \   00006D   78..         MOV     R0,#?V6
   \   00006F   12....       LCALL   ?S_SHL
   \   000072   EA           MOV     A,R2
   \   000073   25..         ADD     A,?V6
   \   000075   F582         MOV     DPL,A
   \   000077   EB           MOV     A,R3
   \   000078   35..         ADDC    A,?V7
   \   00007A   F583         MOV     DPH,A
   \   00007C   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   00007F   E5..         MOV     A,?V2
   \   000081   68           XRL     A,R0
   \   000082   7003         JNZ     ??bdb_RepAddAttrCfgRecordDefaultToList_6
   \   000084   E5..         MOV     A,?V3
   \   000086   69           XRL     A,R1
   \                     ??bdb_RepAddAttrCfgRecordDefaultToList_6:
   \   000087   70D7         JNZ     ??bdb_RepAddAttrCfgRecordDefaultToList_5
   2093                }
   2094                foundEndpCluster = BDBREPORTING_TRUE;
   2095                break;
   2096              }
   2097              break;
   2098            }
   2099            if( foundEndpCluster==BDBREPORTING_FALSE )
   2100            {
   2101              return ZInvalidParameter;
   2102            }
   2103            
   2104            //Add default cfg values to list
   2105            bdbReportAttrDefaultCfgData_t* record = (bdbReportAttrDefaultCfgData_t *)osal_mem_alloc( sizeof( bdbReportAttrDefaultCfgData_t ) );
   \   000089                ; Setup parameters for call to function osal_mem_alloc
   \   000089   7A0D         MOV     R2,#0xd
   \   00008B   7B00         MOV     R3,#0x0
   \   00008D   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000090   8A..         MOV     ?V6,R2
   \   000092   8B..         MOV     ?V7,R3
   \   000094   AE..         MOV     R6,?V6
   \   000096   AF..         MOV     R7,?V7
   2106            if( record == NULL)
   \   000098   EE           MOV     A,R6
   \   000099   4F           ORL     A,R7
   \   00009A   700A         JNZ     ??bdb_RepAddAttrCfgRecordDefaultToList_7
   2107            {
   2108              return ZFailure; //Out of memory
   \                     ??bdb_RepAddAttrCfgRecordDefaultToList_0:
   \   00009C   7901         MOV     R1,#0x1
   \   00009E   02....       LJMP    ??bdb_RepAddAttrCfgRecordDefaultToList_8 & 0xFFFF
   2109            }
   \                     ??bdb_RepAddAttrCfgRecordDefaultToList_3:
   \   0000A1   7902         MOV     R1,#0x2
   \   0000A3   02....       LJMP    ??bdb_RepAddAttrCfgRecordDefaultToList_8 & 0xFFFF
   2110            bdb_repAttrDefaultCfgRecordInitValues( record );
   \                     ??bdb_RepAddAttrCfgRecordDefaultToList_7:
   \   0000A6   E4           CLR     A
   \   0000A7   8E82         MOV     DPL,R6
   \   0000A9   8F83         MOV     DPH,R7
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   7804         MOV     R0,#0x4
   \                     ??bdb_RepAddAttrCfgRecordDefaultToList_9:
   \   0000B6   F0           MOVX    @DPTR,A
   \   0000B7   A3           INC     DPTR
   \   0000B8   D8FC         DJNZ    R0,??bdb_RepAddAttrCfgRecordDefaultToList_9
   \   0000BA   EE           MOV     A,R6
   \   0000BB   2403         ADD     A,#0x3
   \   0000BD   F8           MOV     R0,A
   \   0000BE   E4           CLR     A
   \   0000BF   3F           ADDC    A,R7
   \   0000C0   F9           MOV     R1,A
   \   0000C1   8882         MOV     DPL,R0
   \   0000C3   8983         MOV     DPH,R1
   \   0000C5   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000C8   74FF         MOV     A,#-0x1
   \   0000CA   F0           MOVX    @DPTR,A
   \   0000CB   A3           INC     DPTR
   \   0000CC   AA82         MOV     R2,DPL
   \   0000CE   AB83         MOV     R3,DPH
   \   0000D0   F0           MOVX    @DPTR,A
   \   0000D1   A3           INC     DPTR
   \   0000D2   F0           MOVX    @DPTR,A
   \   0000D3   EE           MOV     A,R6
   \   0000D4   2407         ADD     A,#0x7
   \   0000D6   FC           MOV     R4,A
   \   0000D7   E4           CLR     A
   \   0000D8   3F           ADDC    A,R7
   \   0000D9   FD           MOV     R5,A
   \   0000DA   8C82         MOV     DPL,R4
   \   0000DC   8D83         MOV     DPH,R5
   \   0000DE   E4           CLR     A
   \   0000DF   F0           MOVX    @DPTR,A
   \   0000E0   A3           INC     DPTR
   \   0000E1   F0           MOVX    @DPTR,A
   \   0000E2   EE           MOV     A,R6
   \   0000E3   2405         ADD     A,#0x5
   \   0000E5   F5..         MOV     ?V6,A
   \   0000E7   E4           CLR     A
   \   0000E8   3F           ADDC    A,R7
   \   0000E9   F5..         MOV     ?V7,A
   \   0000EB   85..82       MOV     DPL,?V6
   \   0000EE   F583         MOV     DPH,A
   \   0000F0   12....       LCALL   ?Subroutine15 & 0xFFFF
   2111            
   2112            record->endpoint = endpoint;
   \                     ??CrossCallReturnLabel_12:
   \   0000F3   E5..         MOV     A,?V4
   \   0000F5   12....       LCALL   ??Subroutine81_0 & 0xFFFF
   2113            record->cluster = cluster;
   \                     ??CrossCallReturnLabel_139:
   \   0000F8   E5..         MOV     A,?V2
   \   0000FA   F0           MOVX    @DPTR,A
   \   0000FB   A3           INC     DPTR
   \   0000FC   E5..         MOV     A,?V3
   \   0000FE   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   2114            record->attrID = attrID;
   \                     ??CrossCallReturnLabel_230:
   \   000101   E5..         MOV     A,?V0
   \   000103   F0           MOVX    @DPTR,A
   \   000104   A3           INC     DPTR
   \   000105   E5..         MOV     A,?V1
   \   000107   F0           MOVX    @DPTR,A
   2115            record->minReportInt = minReportInt;
   \   000108   7410         MOV     A,#0x10
   \   00010A   12....       LCALL   ?XSTACK_DISP0_8
   \   00010D   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000110   85..82       MOV     DPL,?V6
   \   000113   85..83       MOV     DPH,?V7
   \   000116   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   2116            record->maxReportInt = maxReportInt;
   \                     ??CrossCallReturnLabel_213:
   \   000119   7412         MOV     A,#0x12
   \   00011B   12....       LCALL   ?XSTACK_DISP0_8
   \   00011E   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000121   8C82         MOV     DPL,R4
   \   000123   8D83         MOV     DPH,R5
   \   000125   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   2117            osal_memcpy( record->reportableChange, reportableChange, BDBREPORTING_MAX_ANALOG_ATTR_SIZE );
   \                     ??CrossCallReturnLabel_214:
   \   000128                ; Setup parameters for call to function osal_memcpy
   \   000128   7414         MOV     A,#0x14
   \   00012A   12....       LCALL   ?XSTACK_DISP0_8
   \   00012D   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000130   75..00       MOV     ?V2,#0x0
   \   000133   78..         MOV     R0,#?V0
   \   000135   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000138   7C04         MOV     R4,#0x4
   \   00013A   7D00         MOV     R5,#0x0
   \   00013C   EE           MOV     A,R6
   \   00013D   2409         ADD     A,#0x9
   \   00013F   FA           MOV     R2,A
   \   000140   E4           CLR     A
   \   000141   3F           ADDC    A,R7
   \   000142   FB           MOV     R3,A
   \   000143   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000146   7403         MOV     A,#0x3
   \   000148   12....       LCALL   ?DEALLOC_XSTACK8
   2118            
   2119            status = bdb_repAttrDefaultCfgRecordsLinkedListAdd( &attrDefaultCfgRecordLinkedList, record );
   \   00014B                ; Setup parameters for call to function osal_mem_alloc
   \   00014B   7A04         MOV     R2,#0x4
   \   00014D   7B00         MOV     R3,#0x0
   \   00014F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000152   8A..         MOV     ?V0,R2
   \   000154   8B..         MOV     ?V1,R3
   \   000156   A8..         MOV     R0,?V0
   \   000158   A9..         MOV     R1,?V1
   \   00015A   E8           MOV     A,R0
   \   00015B   49           ORL     A,R1
   \   00015C   700A         JNZ     ??bdb_RepAddAttrCfgRecordDefaultToList_10
   2120            if( status != BDBREPORTING_SUCCESS )
   2121            {
   2122              osal_mem_free( record );
   \   00015E                ; Setup parameters for call to function osal_mem_free
   \   00015E   EE           MOV     A,R6
   \   00015F   FA           MOV     R2,A
   \   000160   EF           MOV     A,R7
   \   000161   FB           MOV     R3,A
   \   000162   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000165   02....       LJMP    ??bdb_RepAddAttrCfgRecordDefaultToList_0 & 0xFFFF
   2123              return ZFailure; //Out of memory
   2124            }
   \                     ??bdb_RepAddAttrCfgRecordDefaultToList_10:
   \   000168   8882         MOV     DPL,R0
   \   00016A   8983         MOV     DPH,R1
   \   00016C   EE           MOV     A,R6
   \   00016D   F0           MOVX    @DPTR,A
   \   00016E   A3           INC     DPTR
   \   00016F   EF           MOV     A,R7
   \   000170   F0           MOVX    @DPTR,A
   \   000171   90....       MOV     DPTR,#attrDefaultCfgRecordLinkedList + 1
   \   000174   12....       LCALL   ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000177   12....       LCALL   ??Subroutine84_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   00017A   90....       MOV     DPTR,#attrDefaultCfgRecordLinkedList + 1
   \   00017D   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000180   90....       MOV     DPTR,#attrDefaultCfgRecordLinkedList
   \   000183   E0           MOVX    A,@DPTR
   \   000184   04           INC     A
   \   000185   F0           MOVX    @DPTR,A
   2125            
   2126            return ZSuccess;
   \   000186   7900         MOV     R1,#0x0
   \                     ??bdb_RepAddAttrCfgRecordDefaultToList_8:
   \   000188   02....       LJMP    ?Subroutine5 & 0xFFFF
   2127          }
   2128          
   2129          
   2130          
   2131           /*********************************************************************
   2132           * @fn          bdb_RepChangedAttrValue
   2133           *
   2134           * @brief       Notify BDB reporting attribute module about the change of an 
   2135           *              attribute value to validate the triggering of a reporting attribute message.
   2136           *
   2137           * @param       endpoint
   2138           * @param       cluster
   2139           * @param       attrID - Reporable attribute ID
   2140           *
   2141           * @return      ZInvalidParameter - No endpoint, cluster, attribute ID found in simple desc
   2142           *              ZSuccess
   2143           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2144          ZStatus_t bdb_RepChangedAttrValue( uint8 endpoint, uint16 cluster, uint16 attrID )
   \                     bdb_RepChangedAttrValue:
   2145          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V10,R1
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FF           MOV     R7,A
   \   000010   8C..         MOV     ?V4,R4
   \   000012   8D..         MOV     ?V5,R5
   2146            uint8 indexClusterEndpoint = bdb_clusterEndpointArraySearch( endpoint, cluster );
   \   000014                ; Setup parameters for call to function bdb_clusterEndpointArraySearch
   \   000014   12....       LCALL   `??bdb_clusterEndpointArraySearch::?relay`; Banked call to: bdb_clusterEndpointArraySearch
   \   000017   E9           MOV     A,R1
   \   000018   F5..         MOV     ?V0,A
   2147            if( indexClusterEndpoint == BDBREPORTING_INVALIDINDEX ) 
   \   00001A   74FF         MOV     A,#-0x1
   \   00001C   65..         XRL     A,?V0
   \   00001E   6075         JZ      ??bdb_RepChangedAttrValue_0
   2148            {
   2149              //cluter-endpoint not found
   2150              return ZInvalidParameter;
   2151            }
   2152            if( FLAGS_CHECKFLAG( bdb_reportingClusterEndpointArray[indexClusterEndpoint].flags, BDBREPORTING_HASBINDING_FLAG_MASK ) == BDBREPORTING_FALSE ) 
   \   000020   E9           MOV     A,R1
   \   000021   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000024   E0           MOVX    A,@DPTR
   \   000025   A2E0         MOV     C,0xE0 /* A   */.0
   \   000027   4003         JC      $+5
   \   000029   02....       LJMP    ??bdb_RepChangedAttrValue_1 & 0xFFFF
   2153            {
   2154              //record has no binding
   2155              return ZSuccess;
   2156            }
   2157            if( bdb_reportingClusterEndpointArray[indexClusterEndpoint].consolidatedMaxReportInt == BDBREPORTING_REPORTOFF ) 
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F4           CPL     A
   \   000034   7003         JNZ     ??bdb_RepChangedAttrValue_2
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F4           CPL     A
   \                     ??bdb_RepChangedAttrValue_2:
   \   000039   7003         JNZ     $+5
   \   00003B   02....       LJMP    ??bdb_RepChangedAttrValue_1 & 0xFFFF
   2158            {
   2159              //reporting if off for this cluster
   2160              return ZSuccess;
   2161            }
   2162            
   2163            bdbReportAttrLive_t searchdata;
   2164            searchdata.attrID = attrID;
   2165            bdbLinkedListAttrItem_t* attrNodeFound = bdb_linkedListAttrSearch( &(bdb_reportingClusterEndpointArray[indexClusterEndpoint].attrLinkedList), &searchdata );
   \   00003E   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000041   8001         SJMP    ??bdb_RepChangedAttrValue_3
   \                     ??bdb_RepChangedAttrValue_4:
   \   000043   A3           INC     DPTR
   \                     ??bdb_RepChangedAttrValue_3:
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F5..         MOV     ?V8,A
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F5..         MOV     ?V9,A
   \   00004B   E5..         MOV     A,?V8
   \   00004D   45..         ORL     A,?V9
   \   00004F   6044         JZ      ??bdb_RepChangedAttrValue_0
   \   000051   85..82       MOV     DPL,?V8
   \   000054   85..83       MOV     DPH,?V9
   \   000057   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00005A   65..         XRL     A,?V4
   \   00005C   7004         JNZ     ??bdb_RepChangedAttrValue_5
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   65..         XRL     A,?V5
   \                     ??bdb_RepChangedAttrValue_5:
   \   000062   85..82       MOV     DPL,?V8
   \   000065   85..83       MOV     DPH,?V9
   \   000068   A3           INC     DPTR
   \   000069   70D8         JNZ     ??bdb_RepChangedAttrValue_4
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F9           MOV     R1,A
   \   00006D   E8           MOV     A,R0
   \   00006E   49           ORL     A,R1
   \   00006F   6024         JZ      ??bdb_RepChangedAttrValue_0
   2166            if( attrNodeFound == NULL || attrNodeFound->data == NULL )
   2167            {
   2168              return ZInvalidParameter; //Attr not found in cluster-endpoint array
   2169            }
   2170            
   2171            zclAttribute_t attrRec;
   2172            uint8 attrRes = bdb_RepFindAttrEntry( endpoint, cluster, attrID, &attrRec );
   2173            if( attrRes != BDBREPORTING_TRUE )
   \   000071                ; Setup parameters for call to function bdb_RepFindAttrEntry
   \   000071   A8..         MOV     R0,?XSP + 0
   \   000073   A9..         MOV     R1,?XSP + 1
   \   000075   88..         MOV     ?V6,R0
   \   000077   89..         MOV     ?V7,R1
   \   000079   78..         MOV     R0,#?V6
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007E   AC..         MOV     R4,?V4
   \   000080   AD..         MOV     R5,?V5
   \   000082   EE           MOV     A,R6
   \   000083   FA           MOV     R2,A
   \   000084   EF           MOV     A,R7
   \   000085   FB           MOV     R3,A
   \   000086   A9..         MOV     R1,?V10
   \   000088   12....       LCALL   `??bdb_RepFindAttrEntry::?relay`; Banked call to: bdb_RepFindAttrEntry
   \   00008B   7402         MOV     A,#0x2
   \   00008D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000090   E9           MOV     A,R1
   \   000091   6401         XRL     A,#0x1
   \   000093   600A         JZ      ??bdb_RepChangedAttrValue_6
   2174            {
   2175              return ZInvalidParameter; //Attr not found in attributes app data
   \                     ??bdb_RepChangedAttrValue_0:
   \   000095   7902         MOV     R1,#0x2
   \                     ??bdb_RepChangedAttrValue_7:
   \   000097   7406         MOV     A,#0x6
   \   000099   12....       LCALL   ?DEALLOC_XSTACK8
   2176            }
   \   00009C   02....       LJMP    ?Subroutine7 & 0xFFFF
   2177            
   2178            //Get time of timer if active
   2179            uint32 remainingTimeOfEvent = osal_get_timeoutEx( bdb_TaskID, BDB_REPORT_TIMEOUT );
   \                     ??bdb_RepChangedAttrValue_6:
   \   00009F                ; Setup parameters for call to function osal_get_timeoutEx
   \   00009F   7A80         MOV     R2,#-0x80
   \   0000A1   7B00         MOV     R3,#0x0
   \   0000A3   90....       MOV     DPTR,#bdb_TaskID
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   F9           MOV     R1,A
   \   0000A8   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   0000AB   8B..         MOV     ?V5,R3
   \   0000AD   8C..         MOV     ?V6,R4
   \   0000AF   8D..         MOV     ?V7,R5
   2180            uint16 elapsedTime = 0;
   \   0000B1   7E00         MOV     R6,#0x0
   \   0000B3   7F00         MOV     R7,#0x0
   2181            uint8 isTimeRemaining = BDBREPORTING_FALSE;
   \   0000B5   75..00       MOV     ?V1,#0x0
   2182            if( remainingTimeOfEvent > 0 )
   \   0000B8   EA           MOV     A,R2
   \   0000B9   45..         ORL     A,?V5
   \   0000BB   45..         ORL     A,?V6
   \   0000BD   45..         ORL     A,?V7
   \   0000BF   6019         JZ      ??bdb_RepChangedAttrValue_8
   2183            {
   2184              elapsedTime = bdb_RepCalculateEventElapsedTime( remainingTimeOfEvent, bdb_reportingNextEventTimeout );
   \   0000C1                ; Setup parameters for call to function bdb_RepCalculateEventElapsedTime
   \   0000C1   90....       MOV     DPTR,#bdb_reportingNextEventTimeout
   \   0000C4   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000C7   12....       LCALL   `??bdb_RepCalculateEventElapsedTime::?relay`; Banked call to: bdb_RepCalculateEventElapsedTime
   \   0000CA   7402         MOV     A,#0x2
   \   0000CC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CF   8A..         MOV     ?V4,R2
   \   0000D1   8B..         MOV     ?V5,R3
   \   0000D3   AE..         MOV     R6,?V4
   \   0000D5   AF..         MOV     R7,?V5
   2185              isTimeRemaining =  BDBREPORTING_TRUE;
   \   0000D7   75..01       MOV     ?V1,#0x1
   \                     ??bdb_RepChangedAttrValue_8:
   \   0000DA   85..82       MOV     DPL,?V2
   \   0000DD   85..83       MOV     DPH,?V3
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   2186            }
   \   0000E4   12....       LCALL   ??Subroutine91_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   0000E7   601C         JZ      ??bdb_RepChangedAttrValue_9
   \   0000E9   85..82       MOV     DPL,?V2
   \   0000EC   85..83       MOV     DPH,?V3
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   A3           INC     DPTR
   \   0000F6   A3           INC     DPTR
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   2E           ADD     A,R6
   \   0000F9   FA           MOV     R2,A
   \   0000FA   A3           INC     DPTR
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   3F           ADDC    A,R7
   \   0000FD   FB           MOV     R3,A
   \   0000FE   C3           CLR     C
   \   0000FF   E8           MOV     A,R0
   \   000100   9A           SUBB    A,R2
   \   000101   E9           MOV     A,R1
   \   000102   9B           SUBB    A,R3
   \   000103   5045         JNC     ??bdb_RepChangedAttrValue_1
   2187            
   2188            if( bdb_reportingClusterEndpointArray[indexClusterEndpoint].consolidatedMinReportInt != BDBREPORTING_NOLIMIT &&
   2189               (bdb_reportingClusterEndpointArray[indexClusterEndpoint].timeSinceLastReport + elapsedTime) <= bdb_reportingClusterEndpointArray[indexClusterEndpoint].consolidatedMinReportInt)
   2190            {
   2191                //Attr value has changed before minInterval, ommit reporting
   2192                return ZSuccess;
   2193            }
   2194           
   2195            
   2196            if( zclAnalogDataType(attrRec.dataType) )
   \                     ??bdb_RepChangedAttrValue_9:
   \   000105                ; Setup parameters for call to function zclAnalogDataType
   \   000105   7402         MOV     A,#0x2
   \   000107   12....       LCALL   ?XSTACK_DISP0_8
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   F9           MOV     R1,A
   \   00010C   12....       LCALL   `??zclAnalogDataType::?relay`; Banked call to: zclAnalogDataType
   \   00010F   E9           MOV     A,R1
   \   000110   603D         JZ      ??bdb_RepChangedAttrValue_10
   2197            {
   2198              //Checking if   | lastvaluereported - currentvalue | >=  | changevalue |
   2199              if( bdb_isAttrValueChangedSurpassDelta(attrRec.dataType, attrNodeFound->data->reportableChange, attrRec.dataPtr, attrNodeFound->data->lastValueReported ) == BDBREPORTING_FALSE )
   \   000112   85..82       MOV     DPL,?V8
   \   000115   85..83       MOV     DPH,?V9
   \   000118   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00011B                ; Setup parameters for call to function bdb_isAttrValueChangedSurpassDelta
   \   00011B   EA           MOV     A,R2
   \   00011C   2402         ADD     A,#0x2
   \   00011E   F5..         MOV     ?V2,A
   \   000120   E4           CLR     A
   \   000121   3B           ADDC    A,R3
   \   000122   F5..         MOV     ?V3,A
   \   000124   78..         MOV     R0,#?V2
   \   000126   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000129   7406         MOV     A,#0x6
   \   00012B   12....       LCALL   ?XSTACK_DISP0_8
   \   00012E   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000131   EA           MOV     A,R2
   \   000132   2406         ADD     A,#0x6
   \   000134   FA           MOV     R2,A
   \   000135   5001         JNC     ??bdb_RepChangedAttrValue_11
   \   000137   0B           INC     R3
   \                     ??bdb_RepChangedAttrValue_11:
   \   000138   7404         MOV     A,#0x4
   \   00013A   12....       LCALL   ?XSTACK_DISP0_8
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   F9           MOV     R1,A
   \   00013F   12....       LCALL   `??bdb_isAttrValueChangedSurpassDelta::?relay`; Banked call to: bdb_isAttrValueChangedSurpassDelta
   \   000142   7402         MOV     A,#0x2
   \   000144   12....       LCALL   ?DEALLOC_XSTACK8
   \   000147   E9           MOV     A,R1
   \   000148   7005         JNZ     ??bdb_RepChangedAttrValue_10
   2200              {
   2201                //current value does not excced the delta, dont report
   2202                return ZSuccess;
   \                     ??bdb_RepChangedAttrValue_1:
   \   00014A   7900         MOV     R1,#0x0
   \   00014C   02....       LJMP    ??bdb_RepChangedAttrValue_7 & 0xFFFF
   2203              }
   2204            }
   2205            else
   2206            {
   2207              //Attr is discrete, just report without checking the changeValue
   2208            }
   2209            
   2210            //Stop reporting  
   2211            bdb_RepStopEventTimer( );
   \                     ??bdb_RepChangedAttrValue_10:
   \   00014F                ; Setup parameters for call to function bdb_RepStopEventTimer
   \   00014F   12....       LCALL   `??bdb_RepStopEventTimer::?relay`; Banked call to: bdb_RepStopEventTimer
   2212            bdb_RepReport( indexClusterEndpoint );
   \   000152                ; Setup parameters for call to function bdb_RepReport
   \   000152   A9..         MOV     R1,?V0
   \   000154   12....       LCALL   `??bdb_RepReport::?relay`; Banked call to: bdb_RepReport
   2213            if( isTimeRemaining == BDBREPORTING_TRUE )
   \   000157   E5..         MOV     A,?V1
   \   000159   A2E0         MOV     C,0xE0 /* A   */.0
   \   00015B   5009         JNC     ??bdb_RepChangedAttrValue_12
   2214            {
   2215              bdb_clusterEndpointArrayIncrementAll( elapsedTime, BDBREPORTING_FALSE );
   \   00015D                ; Setup parameters for call to function bdb_clusterEndpointArrayIncrementAll
   \   00015D   7900         MOV     R1,#0x0
   \   00015F   EE           MOV     A,R6
   \   000160   FA           MOV     R2,A
   \   000161   EF           MOV     A,R7
   \   000162   FB           MOV     R3,A
   \   000163   12....       LCALL   `??bdb_clusterEndpointArrayIncrementAll::?relay`; Banked call to: bdb_clusterEndpointArrayIncrementAll
   2216            }
   2217            bdb_clusterEndpointArrayUpdateAt( indexClusterEndpoint, 0, BDBREPORTING_IGNORE, BDBREPORTING_IGNORE ); //return time since last report to zero
   \                     ??bdb_RepChangedAttrValue_12:
   \   000166                ; Setup parameters for call to function bdb_clusterEndpointArrayUpdateAt
   \   000166   7DFF         MOV     R5,#-0x1
   \   000168   7CFF         MOV     R4,#-0x1
   \   00016A   7A00         MOV     R2,#0x0
   \   00016C   7B00         MOV     R3,#0x0
   \   00016E   A9..         MOV     R1,?V0
   \   000170   12....       LCALL   `??bdb_clusterEndpointArrayUpdateAt::?relay`; Banked call to: bdb_clusterEndpointArrayUpdateAt
   2218            //Restart reporting
   2219            bdb_RepStartReporting( );
   \   000173                ; Setup parameters for call to function bdb_RepStartReporting
   \   000173   12....       LCALL   `??bdb_RepStartReporting::?relay`; Banked call to: bdb_RepStartReporting
   \   000176   80D2         SJMP    ??bdb_RepChangedAttrValue_1
   2220            
   2221            return ZSuccess;
   2222          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   A3           INC     DPTR
   \   000001   E4           CLR     A
   \   000002   F0           MOVX    @DPTR,A
   \   000003                REQUIRE ??Subroutine104_0
   \   000003                ; // Fall through to label ??Subroutine104_0

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RepInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RepInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RepConstructReportingData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RepConstructReportingData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RepMarkHasBindingInEndpointClusterArray::`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RepMarkHasBindingInEndpointClusterArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RepStartReporting::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RepStartReporting

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RepStartOrContinueReporting::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RepStartOrContinueReporting

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RepCalculateEventElapsedTime::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RepCalculateEventElapsedTime

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RepProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RepProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_ProcessInConfigReportCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_ProcessInConfigReportCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_ProcessInReadReportCfgCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_ProcessInReadReportCfgCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RepUpdateMarkBindings::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RepUpdateMarkBindings

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_InitReportAttrLiveValues::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_InitReportAttrLiveValues

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_linkedListAttrAdd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_linkedListAttrAdd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_clusterEndpointArrayAdd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_clusterEndpointArrayAdd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_clusterEndpointArrayMoveTo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_clusterEndpointArrayMoveTo

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_clusterEndpointArrayUpdateAt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_clusterEndpointArrayUpdateAt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_clusterEndpointArraySearch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_clusterEndpointArraySearch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_clusterEndpointArrayIncrementAll::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_clusterEndpointArrayIncrementAll

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_repAttrDefaultCfgRecordsLinkedListSearch:`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_repAttrDefaultCfgRecordsLinkedListSearch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_repAttrCfgRecordsArrayCreate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_repAttrCfgRecordsArrayCreate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_repAttrCfgRecordsArrayAdd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_repAttrCfgRecordsArrayAdd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_repAttrCfgRecordsArrayFreeAll::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_repAttrCfgRecordsArrayFreeAll

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_repAttrCfgRecordsArraySearch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_repAttrCfgRecordsArraySearch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_repAttrCfgRecordsArrayConsolidateValues::`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_repAttrCfgRecordsArrayConsolidateValues

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RepInitAttrCfgRecords::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RepInitAttrCfgRecords

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RepConstructAttrCfgArray::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RepConstructAttrCfgArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RepLoadCfgRecords::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RepLoadCfgRecords

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RepReport::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RepReport

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_isAttrValueChangedSurpassDelta::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_isAttrValueChangedSurpassDelta

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RepRestartNextEventTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RepRestartNextEventTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RepSetupReporting::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RepSetupReporting

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RepStopEventTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RepStopEventTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_FindEpDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_FindEpDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RepFindAttrEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RepFindAttrEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RepAddAttrCfgRecordDefaultToList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RepAddAttrCfgRecordDefaultToList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RepChangedAttrValue::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RepChangedAttrValue

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000
   2223          
   2224          #endif //BDB_REPORTING
   2225          
   2226          /*
   2227          * End: Reporting attr app API methods 
   2228          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     34   bdb_FindEpDesc
      2     22   bdb_InitReportAttrLiveValues
      1     39   bdb_ProcessInConfigReportCmd
        0     34   -> bdb_FindEpDesc
        0     34   -> bdb_RepLoadCfgRecords
        0     34   -> bdb_RepSetupReporting
        0     34   -> bdb_RepStartReporting
        0     34   -> bdb_RepStopEventTimer
        0     34   -> bdb_repAttrCfgRecordsArrayFreeAll
        0     34   -> bdb_repAttrCfgRecordsArraySearch
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     37   -> osal_memcpy
        0     34   -> osal_memset
        0     36   -> osal_nv_item_init
        0     38   -> osal_nv_write
        0     34   -> zclAnalogDataType
        0     36   -> zclFindAttrRec
        0     34   -> zclGetDataTypeLength
        0     39   -> zcl_SendConfigReportRspCmd
      1     39   bdb_ProcessInReadReportCfgCmd
        0     34   -> bdb_FindEpDesc
        0     34   -> bdb_RepLoadCfgRecords
        0     34   -> bdb_repAttrCfgRecordsArrayFreeAll
        0     34   -> bdb_repAttrCfgRecordsArraySearch
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     34   -> zclAnalogDataType
        0     36   -> zclFindAttrRec
        0     34   -> zclGetDataTypeLength
        0     39   -> zcl_SendReadReportCfgRspCmd
      1     25   bdb_RepAddAttrCfgRecordDefaultToList
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
        0     19   -> osal_memcpy
        0     16   -> zclFindAttrRecsList
      0     47   bdb_RepCalculateEventElapsedTime
      0     27   bdb_RepChangedAttrValue
        0     27   -> bdb_RepCalculateEventElapsedTime
        0     27   -> bdb_RepFindAttrEntry
        0     25   -> bdb_RepReport
        0     25   -> bdb_RepStartReporting
        0     25   -> bdb_RepStopEventTimer
        0     25   -> bdb_clusterEndpointArrayIncrementAll
        0     25   -> bdb_clusterEndpointArraySearch
        0     25   -> bdb_clusterEndpointArrayUpdateAt
        0     27   -> bdb_isAttrValueChangedSurpassDelta
        0     25   -> osal_get_timeoutEx
        0     25   -> zclAnalogDataType
      1     62   bdb_RepConstructAttrCfgArray
        0     51   -> bdb_repAttrCfgRecordsArrayAdd
        0     39   -> bdb_repAttrCfgRecordsArrayCreate
        0     39   -> bdb_repAttrCfgRecordsArrayFreeAll
        0     52   -> bdb_repAttrDefaultCfgRecordsLinkedListSearch
        0     39   -> zclFindAttrRecsList
      2      0   bdb_RepConstructReportingData
        2      0   -> bdb_RepInitAttrCfgRecords
        2      0   -> bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray
        2      0   -> bdb_repAttrCfgRecordsArrayFreeAll
      1     63   bdb_RepFindAttrEntry
        0     19   -> zclFindAttrRecsList
      2      0   bdb_RepInit
      0     14   bdb_RepInitAttrCfgRecords
        0     10   -> bdb_RepConstructAttrCfgArray
        0     10   -> bdb_repAttrCfgRecordsArrayCreate
        0     10   -> bdb_repAttrCfgRecordsArrayFreeAll
        0     10   -> osal_mem_free
        0     12   -> osal_nv_item_init
        0     10   -> osal_nv_item_len
        0     14   -> osal_nv_read
      0     48   bdb_RepLoadCfgRecords
        0     10   -> bdb_repAttrCfgRecordsArrayCreate
        0     10   -> bdb_repAttrCfgRecordsArrayFreeAll
        0     12   -> osal_nv_item_init
        0     10   -> osal_nv_item_len
        0     14   -> osal_nv_read
      0     25   bdb_RepMarkHasBindingInEndpointClusterArray
        0      9   -> bdb_clusterEndpointArraySearch
        0      9   -> bdb_clusterEndpointArrayUpdateAt
      2      9   bdb_RepProcessEvent
        0      9   -> bdb_RepReport
        0      9   -> bdb_RepRestartNextEventTimer
        0      9   -> bdb_clusterEndpointArrayIncrementAll
        0      9   -> bdb_clusterEndpointArrayUpdateAt
      1     72   bdb_RepReport
        0     44   -> bdb_RepFindAttrEntry
        0     42   -> bdb_getZCLFrameCounter
        0     42   -> osal_mem_alloc
        0     42   -> osal_mem_free
        0     45   -> osal_memcpy
        0     42   -> osal_memset
        0     42   -> zclAnalogDataType
        0     42   -> zclGetDataTypeLength
        0     47   -> zcl_SendReportCmd
      0     29   bdb_RepRestartNextEventTimer
        0     20   -> osal_start_timerEx
      1     47   bdb_RepSetupReporting
        0     13   -> bdb_clusterEndpointArrayMoveTo
        0     13   -> bdb_clusterEndpointArraySearch
        0     13   -> bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray
        0     13   -> osal_mem_alloc
        0     13   -> osal_mem_free
        0     13   -> osal_stop_timerEx
      0     14   bdb_RepStartOrContinueReporting
        0     14   -> bdb_RepCalculateEventElapsedTime
        0     12   -> bdb_RepStartReporting
        0     12   -> bdb_RepStopEventTimer
        0     12   -> bdb_clusterEndpointArrayIncrementAll
        0     12   -> osal_get_timeoutEx
      2     34   bdb_RepStartReporting
        2      0   -> bdb_RepRestartNextEventTimer
        2      0   -> osal_get_timeoutEx
        2      0   -> osal_stop_timerEx
      2     34   bdb_RepStopEventTimer
        2      0   -> osal_stop_timerEx
      0     16   bdb_RepUpdateMarkBindings
        0     16   -> bdb_RepMarkHasBindingInEndpointClusterArray
        0     16   -> bdb_RepStartReporting
        0     16   -> bindFind
        0     16   -> osal_get_timeoutEx
        0     16   -> osal_stop_timerEx
      1     35   bdb_clusterEndpointArrayAdd
      0     39   bdb_clusterEndpointArrayIncrementAll
      1     23   bdb_clusterEndpointArrayMoveTo
      0     34   bdb_clusterEndpointArraySearch
      0     34   bdb_clusterEndpointArrayUpdateAt
      0     47   bdb_isAttrValueChangedSurpassDelta
      0     34   bdb_linkedListAttrAdd
        0     12   -> osal_mem_alloc
      0     39   bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray
        0     22   -> bdb_InitReportAttrLiveValues
        0     26   -> bdb_clusterEndpointArrayAdd
        0     22   -> bdb_clusterEndpointArraySearch
        0     22   -> bdb_linkedListAttrAdd
        0     24   -> bdb_repAttrCfgRecordsArrayConsolidateValues
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
      1     65   bdb_repAttrCfgRecordsArrayAdd
        0     14   -> osal_memcpy
      0     40   bdb_repAttrCfgRecordsArrayConsolidateValues
      0     48   bdb_repAttrCfgRecordsArrayCreate
        0      9   -> osal_mem_alloc
      2     39   bdb_repAttrCfgRecordsArrayFreeAll
        2      0   -> osal_mem_free
      0     43   bdb_repAttrCfgRecordsArraySearch
      2     52   bdb_repAttrDefaultCfgRecordsLinkedListSearch


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant {0, 0, 0, 0}>
       1  ??Subroutine100_0
       1  ??Subroutine101_0
       2  ??Subroutine102_0
       6  ??Subroutine103_0
       1  ??Subroutine104_0
       6  ??Subroutine105_0
       3  ??Subroutine106_0
       4  ??Subroutine107_0
       8  ??Subroutine77_0
      12  ??Subroutine78_0
       9  ??Subroutine79_0
       6  ??Subroutine80_0
       6  ??Subroutine81_0
       1  ??Subroutine82_0
       4  ??Subroutine83_0
       2  ??Subroutine84_0
       6  ??Subroutine85_0
       4  ??Subroutine86_0
       1  ??Subroutine87_0
       6  ??Subroutine88_0
       7  ??Subroutine89_0
       6  ??Subroutine90_0
       6  ??Subroutine91_0
       6  ??Subroutine92_0
       8  ??Subroutine93_0
       6  ??Subroutine94_0
       1  ??Subroutine95_0
       1  ??Subroutine96_0
       4  ??Subroutine97_0
       2  ??Subroutine98_0
       1  ??Subroutine99_0
       1  ?Subroutine0
       5  ?Subroutine1
      15  ?Subroutine10
       1  ?Subroutine11
      12  ?Subroutine12
      16  ?Subroutine13
       3  ?Subroutine14
       9  ?Subroutine15
       8  ?Subroutine16
      11  ?Subroutine17
       3  ?Subroutine18
       9  ?Subroutine19
       5  ?Subroutine2
       3  ?Subroutine20
       5  ?Subroutine21
       8  ?Subroutine22
      23  ?Subroutine23
       3  ?Subroutine24
      19  ?Subroutine25
      13  ?Subroutine26
       5  ?Subroutine27
      16  ?Subroutine28
       4  ?Subroutine29
       5  ?Subroutine3
       6  ?Subroutine30
      19  ?Subroutine31
       8  ?Subroutine32
       4  ?Subroutine33
       2  ?Subroutine34
       8  ?Subroutine35
       8  ?Subroutine36
       9  ?Subroutine37
       4  ?Subroutine38
       5  ?Subroutine39
       2  ?Subroutine4
      12  ?Subroutine40
       5  ?Subroutine41
      13  ?Subroutine42
      10  ?Subroutine43
       4  ?Subroutine44
       6  ?Subroutine45
       2  ?Subroutine46
      10  ?Subroutine47
       7  ?Subroutine48
      18  ?Subroutine49
       5  ?Subroutine5
       6  ?Subroutine50
       6  ?Subroutine51
      14  ?Subroutine52
      23  ?Subroutine53
      23  ?Subroutine54
      16  ?Subroutine55
       2  ?Subroutine56
       4  ?Subroutine57
      12  ?Subroutine58
      10  ?Subroutine59
       5  ?Subroutine6
       8  ?Subroutine60
      10  ?Subroutine61
       8  ?Subroutine62
      14  ?Subroutine63
      17  ?Subroutine64
       8  ?Subroutine65
      15  ?Subroutine66
       6  ?Subroutine67
       8  ?Subroutine68
      10  ?Subroutine69
       5  ?Subroutine7
       3  ?Subroutine70
       4  ?Subroutine71
       9  ?Subroutine72
      12  ?Subroutine73
       6  ?Subroutine74
       6  ?Subroutine75
       9  ?Subroutine76
      29  ?Subroutine8
      11  ?Subroutine9
       4  __Constant_3e8
       3  attrDefaultCfgRecordLinkedList
      57  bdb_FindEpDesc
       6  bdb_FindEpDesc::?relay
      48  bdb_InitReportAttrLiveValues
       6  bdb_InitReportAttrLiveValues::?relay
     795  bdb_ProcessInConfigReportCmd
       6  bdb_ProcessInConfigReportCmd::?relay
     573  bdb_ProcessInReadReportCfgCmd
       6  bdb_ProcessInReadReportCfgCmd::?relay
     395  bdb_RepAddAttrCfgRecordDefaultToList
       6  bdb_RepAddAttrCfgRecordDefaultToList::?relay
     153  bdb_RepCalculateEventElapsedTime
       6  bdb_RepCalculateEventElapsedTime::?relay
     376  bdb_RepChangedAttrValue
       6  bdb_RepChangedAttrValue::?relay
     594  bdb_RepConstructAttrCfgArray
       6  bdb_RepConstructAttrCfgArray::?relay
      21  bdb_RepConstructReportingData
       6  bdb_RepConstructReportingData::?relay
     287  bdb_RepFindAttrEntry
       6  bdb_RepFindAttrEntry::?relay
      43  bdb_RepInit
       6  bdb_RepInit::?relay
     158  bdb_RepInitAttrCfgRecords
       6  bdb_RepInitAttrCfgRecords::?relay
     133  bdb_RepLoadCfgRecords
       6  bdb_RepLoadCfgRecords::?relay
      51  bdb_RepMarkHasBindingInEndpointClusterArray
       6  bdb_RepMarkHasBindingInEndpointClusterArray::?relay
     172  bdb_RepProcessEvent
       6  bdb_RepProcessEvent::?relay
     570  bdb_RepReport
       6  bdb_RepReport::?relay
      53  bdb_RepRestartNextEventTimer
       6  bdb_RepRestartNextEventTimer::?relay
     323  bdb_RepSetupReporting
       6  bdb_RepSetupReporting::?relay
      65  bdb_RepStartOrContinueReporting
       6  bdb_RepStartOrContinueReporting::?relay
      53  bdb_RepStartReporting
       6  bdb_RepStartReporting::?relay
      19  bdb_RepStopEventTimer
       6  bdb_RepStopEventTimer::?relay
     153  bdb_RepUpdateMarkBindings
       6  bdb_RepUpdateMarkBindings::?relay
     105  bdb_clusterEndpointArrayAdd
       6  bdb_clusterEndpointArrayAdd::?relay
     150  bdb_clusterEndpointArrayIncrementAll
       6  bdb_clusterEndpointArrayIncrementAll::?relay
     106  bdb_clusterEndpointArrayMoveTo
       6  bdb_clusterEndpointArrayMoveTo::?relay
      68  bdb_clusterEndpointArraySearch
       6  bdb_clusterEndpointArraySearch::?relay
      76  bdb_clusterEndpointArrayUpdateAt
       6  bdb_clusterEndpointArrayUpdateAt::?relay
     519  bdb_isAttrValueChangedSurpassDelta
       6  bdb_isAttrValueChangedSurpassDelta::?relay
      67  bdb_linkedListAttrAdd
       6  bdb_linkedListAttrAdd::?relay
     366  bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray
       6  bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray::?relay
     214  bdb_repAttrCfgRecordsArrayAdd
       6  bdb_repAttrCfgRecordsArrayAdd::?relay
     199  bdb_repAttrCfgRecordsArrayConsolidateValues
       6  bdb_repAttrCfgRecordsArrayConsolidateValues::?relay
      47  bdb_repAttrCfgRecordsArrayCreate
       6  bdb_repAttrCfgRecordsArrayCreate::?relay
      32  bdb_repAttrCfgRecordsArrayFreeAll
       6  bdb_repAttrCfgRecordsArrayFreeAll::?relay
      75  bdb_repAttrCfgRecordsArraySearch
       6  bdb_repAttrCfgRecordsArraySearch::?relay
      89  bdb_repAttrDefaultCfgRecordsLinkedListSearch
       6  bdb_repAttrDefaultCfgRecordsLinkedListSearch::?relay
       1  bdb_reportingAcceptDefaultConfs
       2  bdb_reportingAttrCfgRecordsArray
       1  bdb_reportingAttrCfgRecordsArrayCount
       1  bdb_reportingAttrCfgRecordsArrayMaxSize
      65  bdb_reportingClusterEndpointArray
       1  bdb_reportingClusterEndpointArrayCount
       1  bdb_reportingNextClusterEndpointIndex
       2  bdb_reportingNextEventTimeout

 
 8 030 bytes in segment BANKED_CODE
   216 bytes in segment BANK_RELAYS
     8 bytes in segment XDATA_ROM_C
    77 bytes in segment XDATA_Z
 
 8 246 bytes of CODE  memory
     4 bytes of CONST memory (+ 4 bytes shared)
    77 bytes of XDATA memory

Errors: none
Warnings: none
