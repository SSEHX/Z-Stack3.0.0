///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               26/Oct/2017  14:48:35
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\Source\zcl_sampleapps_ui.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
//        Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\Source\zcl_sampleapps_ui.c" -D
//        BDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE
//        -D xPOWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D
//        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
//        xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
//        ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D
//        ZCL_SCENES -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -lC "C:\Texas
//        Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
//        -lA "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
//        Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
//        "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List\zcl_sampleapps_ui.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_sampleapps_ui

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_AND
        EXTERN ?L_AND_TO_X
        EXTERN ?L_IOR_TO_X
        EXTERN ?L_NOT
        EXTERN ?L_SHL
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?SS_SHR
        EXTERN ?S_DIV_MOD
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?UL_DIV_MOD
        EXTERN ?US_SHR
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??UI_ActionBackFromAppMenu::?relay`
        FUNCTION `??UI_ActionBackFromAppMenu::?relay`,0203H
        PUBLIC `??UI_DeviceStateUpdated::?relay`
        FUNCTION `??UI_DeviceStateUpdated::?relay`,0203H
        PUBLIC `??UI_Init::?relay`
        FUNCTION `??UI_Init::?relay`,0203H
        PUBLIC `??UI_MainStateMachine::?relay`
        FUNCTION `??UI_MainStateMachine::?relay`,0203H
        PUBLIC `??UI_UpdateComissioningStatus::?relay`
        FUNCTION `??UI_UpdateComissioningStatus::?relay`,0203H
        PUBLIC `??UI_UpdateLcd::?relay`
        FUNCTION `??UI_UpdateLcd::?relay`,0203H
        FUNCTION `??uiActionAppSecificMenu::?relay`,0203H
        FUNCTION `??uiActionConfigureEnables::?relay`,0203H
        FUNCTION `??uiActionMenuJump::?relay`,0203H
        FUNCTION `??uiActionProcessConfigureChannels::?relay`,0203H
        FUNCTION `??uiActionProcessConfigurePanId::?relay`,0203H
        FUNCTION `??uiActionProcessPrepareInstallCode::?relay`,0203H
        FUNCTION `??uiActionResetToFactoryNew::?relay`,0203H
        FUNCTION `??uiActionSetInstallCode::?relay`,0203H
        FUNCTION `??uiActionStartComissioning::?relay`,0203H
        FUNCTION `??uiArrayToString::?relay`,0203H
        FUNCTION `??uiCreateChannelMaskString::?relay`,0203H
        FUNCTION `??uiProcessBindNotification::?relay`,0203H
        FUNCTION `??uiProcessIdentifyTimeChange::?relay`,0203H
        FUNCTION `??uiProcessPermitJoin::?relay`,0203H
        FUNCTION `??uiUintToString::?relay`,0203H
        PUBLIC UI_ActionBackFromAppMenu
        FUNCTION UI_ActionBackFromAppMenu,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC UI_DeviceStateUpdated
        FUNCTION UI_DeviceStateUpdated,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC UI_Init
        FUNCTION UI_Init,021203H
        ARGFRAME XSTACK, 8, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC UI_MainStateMachine
        FUNCTION UI_MainStateMachine,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC UI_UpdateComissioningStatus
        FUNCTION UI_UpdateComissioningStatus,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC UI_UpdateLcd
        FUNCTION UI_UpdateLcd,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 81, STACK
        PUBWEAK __Constant_1f4
        PUBWEAK __Constant_fa
        FUNCTION uiActionAppSecificMenu,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION uiActionConfigureEnables,080603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION uiActionMenuJump,080603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION uiActionProcessConfigureChannels,080603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION uiActionProcessConfigurePanId,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION uiActionProcessPrepareInstallCode,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION uiActionResetToFactoryNew,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION uiActionSetInstallCode,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION uiActionStartComissioning,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION uiArrayToString,080203H
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        FUNCTION uiCreateChannelMaskString,080203H
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        FUNCTION uiProcessBindNotification,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION uiProcessIdentifyTimeChange,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION uiProcessPermitJoin,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION uiUintToString,080203H
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
APSME_IsDistributedSecurity SYMBOL "APSME_IsDistributedSecurity"
`??APSME_IsDistributedSecurity::?relay` SYMBOL "?relay", APSME_IsDistributedSecurity
HalLcdWriteString   SYMBOL "HalLcdWriteString"
`??HalLcdWriteString::?relay` SYMBOL "?relay", HalLcdWriteString
HalLcd_HW_Clear     SYMBOL "HalLcd_HW_Clear"
`??HalLcd_HW_Clear::?relay` SYMBOL "?relay", HalLcd_HW_Clear
HalLedBlink         SYMBOL "HalLedBlink"
`??HalLedBlink::?relay` SYMBOL "?relay", HalLedBlink
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
NLME_GetRemainingPermitJoiningDuration SYMBOL "NLME_GetRemainingPermitJoiningDuration"
`??NLME_GetRemainingPermitJoiningDuration::?rela` SYMBOL "?relay", NLME_GetRemainingPermitJoiningDuration
ZDO_RegisterForZdoCB SYMBOL "ZDO_RegisterForZdoCB"
`??ZDO_RegisterForZdoCB::?relay` SYMBOL "?relay", ZDO_RegisterForZdoCB
bdb_GenerateInstallCodeCRC SYMBOL "bdb_GenerateInstallCodeCRC"
`??bdb_GenerateInstallCodeCRC::?relay` SYMBOL "?relay", bdb_GenerateInstallCodeCRC
bdb_GetFBInitiatorStatus SYMBOL "bdb_GetFBInitiatorStatus"
`??bdb_GetFBInitiatorStatus::?relay` SYMBOL "?relay", bdb_GetFBInitiatorStatus
bdb_RegisterBindNotificationCB SYMBOL "bdb_RegisterBindNotificationCB"
`??bdb_RegisterBindNotificationCB::?relay` SYMBOL "?relay", bdb_RegisterBindNotificationCB
bdb_RegisterIdentifyTimeChangeCB SYMBOL "bdb_RegisterIdentifyTimeChangeCB"
`??bdb_RegisterIdentifyTimeChangeCB::?relay` SYMBOL "?relay", bdb_RegisterIdentifyTimeChangeCB
bdb_StartCommissioning SYMBOL "bdb_StartCommissioning"
`??bdb_StartCommissioning::?relay` SYMBOL "?relay", bdb_StartCommissioning
bdb_resetLocalAction SYMBOL "bdb_resetLocalAction"
`??bdb_resetLocalAction::?relay` SYMBOL "?relay", bdb_resetLocalAction
bdb_setActiveCentralizedLinkKey SYMBOL "bdb_setActiveCentralizedLinkKey"
`??bdb_setActiveCentralizedLinkKey::?relay` SYMBOL "?relay", bdb_setActiveCentralizedLinkKey
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_nv_item_len    SYMBOL "osal_nv_item_len"
`??osal_nv_item_len::?relay` SYMBOL "?relay", osal_nv_item_len
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
UI_ActionBackFromAppMenu SYMBOL "UI_ActionBackFromAppMenu"
`??UI_ActionBackFromAppMenu::?relay` SYMBOL "?relay", UI_ActionBackFromAppMenu
UI_DeviceStateUpdated SYMBOL "UI_DeviceStateUpdated"
`??UI_DeviceStateUpdated::?relay` SYMBOL "?relay", UI_DeviceStateUpdated
UI_Init             SYMBOL "UI_Init"
`??UI_Init::?relay` SYMBOL "?relay", UI_Init
UI_MainStateMachine SYMBOL "UI_MainStateMachine"
`??UI_MainStateMachine::?relay` SYMBOL "?relay", UI_MainStateMachine
UI_UpdateComissioningStatus SYMBOL "UI_UpdateComissioningStatus"
`??UI_UpdateComissioningStatus::?relay` SYMBOL "?relay", UI_UpdateComissioningStatus
UI_UpdateLcd        SYMBOL "UI_UpdateLcd"
`??UI_UpdateLcd::?relay` SYMBOL "?relay", UI_UpdateLcd

        EXTERN `??APSME_IsDistributedSecurity::?relay`
        FUNCTION `??APSME_IsDistributedSecurity::?relay`,00H
        EXTERN `??HalLcdWriteString::?relay`
        FUNCTION `??HalLcdWriteString::?relay`,00H
        EXTERN `??HalLcd_HW_Clear::?relay`
        FUNCTION `??HalLcd_HW_Clear::?relay`,00H
        EXTERN `??HalLedBlink::?relay`
        FUNCTION `??HalLedBlink::?relay`,00H
        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??NLME_GetRemainingPermitJoiningDuration::?rela`
        FUNCTION `??NLME_GetRemainingPermitJoiningDuration::?rela`,00H
        EXTERN `??ZDO_RegisterForZdoCB::?relay`
        FUNCTION `??ZDO_RegisterForZdoCB::?relay`,00H
        EXTERN `??bdb_GenerateInstallCodeCRC::?relay`
        FUNCTION `??bdb_GenerateInstallCodeCRC::?relay`,00H
        EXTERN `??bdb_GetFBInitiatorStatus::?relay`
        FUNCTION `??bdb_GetFBInitiatorStatus::?relay`,00H
        EXTERN `??bdb_RegisterBindNotificationCB::?relay`
        FUNCTION `??bdb_RegisterBindNotificationCB::?relay`,00H
        EXTERN `??bdb_RegisterIdentifyTimeChangeCB::?relay`
        FUNCTION `??bdb_RegisterIdentifyTimeChangeCB::?relay`,00H
        EXTERN `??bdb_StartCommissioning::?relay`
        FUNCTION `??bdb_StartCommissioning::?relay`,00H
        EXTERN `??bdb_resetLocalAction::?relay`
        FUNCTION `??bdb_resetLocalAction::?relay`,00H
        EXTERN `??bdb_setActiveCentralizedLinkKey::?relay`
        FUNCTION `??bdb_setActiveCentralizedLinkKey::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_nv_item_len::?relay`
        FUNCTION `??osal_nv_item_len::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN APSME_IsDistributedSecurity
        FUNCTION APSME_IsDistributedSecurity,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcd_HW_Clear
        FUNCTION HalLcd_HW_Clear,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetRemainingPermitJoiningDuration
        FUNCTION NLME_GetRemainingPermitJoiningDuration,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZdoCB
        FUNCTION ZDO_RegisterForZdoCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN aExtendedAddress
        EXTERN bdbAttributes
        EXTERN bdb_GenerateInstallCodeCRC
        FUNCTION bdb_GenerateInstallCodeCRC,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_GetFBInitiatorStatus
        FUNCTION bdb_GetFBInitiatorStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterBindNotificationCB
        FUNCTION bdb_RegisterBindNotificationCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterIdentifyTimeChangeCB
        FUNCTION bdb_RegisterIdentifyTimeChangeCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_StartCommissioning
        FUNCTION bdb_StartCommissioning,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_resetLocalAction
        FUNCTION bdb_resetLocalAction,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_setActiveCentralizedLinkKey
        FUNCTION bdb_setActiveCentralizedLinkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_len
        FUNCTION osal_nv_item_len,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 80, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgConfigPANID

// C:\Texas Instruments\Z-Stack 3.0.0\Projects\zstack\HomeAutomation\Source\zcl_sampleapps_ui.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_sampleapps_ui.c
//    3   Revised:        $Date: 2016-8-1 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4   Revision:       $Revision: 40796 $
//    5 
//    6 
//    7   Description:    Z-Stack Sample Application User Interface.
//    8 
//    9 
//   10   Copyright 2006-2016 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42   This file implements the user interface that is common to most of the Z-Stack sample applications.
//   43 
//   44   The sample applications are intended for the following platforms:
//   45   - CC2530EM+SmartRF05
//   46   - CC2538EM+SmartRF06
//   47 
//   48   The UI peripherals being used:
//   49 
//   50   - LCD based menu system:
//   51     only using 3 lines of 16 characters each, for compatibility accross platforms.
//   52 
//   53   - Switches: 
//   54     Using 4 directional switches and one selection switch. On SmartRF05, these are implemented by
//   55     the joystick.
//   56 
//   57     - The switches have the following functionality, where applicable:
//   58       - Left/Right: depending on the menu screen, these are used for either:
//   59         - move to the previous/next menu screen
//   60         - move to the previous/next digit/sub-item within a menu screen
//   61       - Up/Down: change the value of the currently selected item
//   62       - Ok (Select): execute the operation associated with the current menu screeen
//   63 
//   64   - LEDs:
//   65     LED1 is used differently by the individual applications.
//   66     the 3 other LEDs are common accross all the applications, and function as follows:
//   67 
//   68     - LED2: device state and type
//   69       - Off: not connected to network
//   70       - Constantly on: connected to the network as an end device
//   71       - Blinking, 4 seconds period, 95% duty cycle: connected to the network as a router
//   72       - Blinking, 4 seconds period, 75% duty cycle: connected to the network as a coordinator
//   73 
//   74     - LED3: identify status
//   75       - Off: device is not identifying
//   76       - Blinking, 1 second period, 50% duty cycle: device is identifying
//   77 
//   78     - LED4: open for joining status
//   79       - Off: other devices cannot join through this device
//   80       - Blinking, 1 second period, 25% duty cycle: other devices can join using standard comissioning
//   81       - Blinking, 1 second period, 75% duty cycle: other devices can join using touchlink (i.e
//   82         touchlink is enabled on the current device as a target)
//   83       - On: device can join using either standard comissioning or touchlink
//   84 
//   85   The menu system:
//   86 
//   87     <HELP> Wellcome screen
//   88       Displays the sample application name.
//   89       Press and hold [OK] to show a simple help screen.
//   90       
//   91       Help screen
//   92       Release [OK] to go back to the welcome screen.
//   93       
//   94     <CONFIGURE> Configuration sub-menu
//   95       Press [OK] to display the configuration sub-menu
//   96       
//   97       <ADD INSTL CODE> install code sub-menu
//   98         Press [OK] to display the install code sub-menu
//   99         
//  100         <SET INSTL CODE> set install code
//  101           Press [OK] to to edit the install code
//  102           
//  103           Install code editing screen
//  104             Press [LEFT] / [RIGHT] to select a digit
//  105             Press [UP] / [DOWN] to change the selected digit
//  106             press [OK] to to go back to the higher menu level
//  107             
//  108         <SET I.C. ADDR> set install code address (coordinator only)
//  109           Press [OK] to to edit the install code address
//  110 
//  111           Install code address editing screen
//  112             Press [LEFT] / [RIGHT] to select a digit
//  113             Press [UP] / [DOWN] to change the selected digit
//  114             press [OK] to to go back to the higher menu level
//  115             
//  116         <APLY INST CODE> apply install code
//  117           Press [OK] to apply the address+Install-Code pair (coordinator) or the Install-Code (Routers and End-Devices)
//  118           This menu screen also displays the status of the last apply-install-code operation
//  119 
//  120         <BACK> go back to higher menu level
//  121           press [OK] to to go back to the higher menu level
//  122         
//  123       <T.L. TRGT TIME> Set the touchlink enable duration
//  124         Press and hold [UP] / [DOWN] to increase / decrease the displayed time. The longer the press, the faster
//  125         the change. 
//  126         The maximum duration is 86400 seconds. Increasing it above this value will display '(forever)' - 
//  127         in this setting, the touchlink target will stay active once started and untill manually stopped.
//  128         The minimum duration is 1 second. Decreasing it below this value sets tohchlink target to always disabled.
//  129         This menu item is only available if BDB_TL_TARGET is defined.
//  130 
//  131       <T.L. STEALING> enable/disable touchlink stealing
//  132         Press [OK] to toggle (enable/disable) touchlink stealing.
//  133         When stealing is enabled, a touchlink target may be 'stolen' by another device acting as a touchlink 
//  134         initiator, which will take it out of its existing network and add it to another network.
//  135         This menu item is only available if BDB_TL_TARGET is defined.
//  136 
//  137       <T.L. INITIATOR> enable/disable touchlink initiator
//  138         Press [OK] to toggle (enable/disable) touchlink initiator.
//  139         When enabled, touchlink initiator functionality will be executed as part of the commissioning procedure.
//  140         This menu item is only available if BDB_TL_INITIATOR is defined.
//  141 
//  142       <NWK FORMATION> enable/disable network formation for when cannot connect to an existing network
//  143         Press [OK] to toggle (enable/disable) network formation.
//  144         When enabled, network formation will be executed as part of the commissioning procedure, unless 
//  145         the device has already joined a network.
//  146 
//  147       <NWK STEERING> enable/disable attempting to connect to an existing network
//  148         Press [OK] to toggle (enable/disable) network steering.
//  149         When enabled, network steering will be executed as part of the commissioning procedure, so the
//  150         device will try to join an existing network, and will open the network for joining of other devices
//  151         once it is joined.
//  152 
//  153       <FINDNG+BINDNG> enable/disable finding and binding
//  154         Press [OK] to toggle (enable/disable) finding and binding (F&B).
//  155         When enabled, finding and binding will be executed as part of the commissioning procedure, so the
//  156         device will either start identifying, look for matchng devices that are currently identifying, or 
//  157         both (depending of whether it is a F&B target, initiator, or both).
//  158       
//  159       <PRI CHANL MASK> set the primary channel mask
//  160         Press [OK] to edit the primary channel list
//  161 
//  162         Primary channel list editing screen
//  163           Press [LEFT] / [RIGHT] to select a channel (from channel 11 to channel 26)
//  164           Press [UP] / [DOWN] to enable / disable the selected channel, accordingly.
//  165           press [OK] to to go back to the higher menu level
//  166 
//  167       <SEC CHANL MASK> set the secondary channel mask
//  168         Press [OK] to edit the secondary channel list
//  169         
//  170         Secondary channel list editing screen
//  171           Press [LEFT] / [RIGHT] to select a channel (from channel 11 to channel 26)
//  172           Press [UP] / [DOWN] to enable / disable the selected channel, accordingly
//  173           press [OK] to to go back to the higher menu level
//  174         
//  175       <PAN ID> set the PAN ID
//  176         Press [OK] to edit the PAN ID to create / connect to
//  177         
//  178         PAN ID editing screen
//  179           Press [LEFT] / [RIGHT] to select the digit to edit
//  180           Press [UP] / [DOWN] to change the selected digit
//  181           press [OK] to to go back to the higher menu level
//  182         
//  183       <BACK> go back to higher menu level
//  184         press [OK] to to go back to the higher menu level
//  185       
//  186     <COMMISSION> start comissionin
//  187       Press [OK] to start the commissioning procedure. (Note: this is disabled if a previous comissioning is
//  188       already on-going).
//  189       This procedure will execute the following methods, depending on whether they are enabled or disabled
//  190       in the respective configuration item):
//  191         - Touchlink (as Touchlink Initiator)
//  192         - Network Steering
//  193         - Network Formation
//  194         - Finding and Binding
//  195       This screen shows the following information
//  196         Line1:
//  197           Current commissioning method being executed:
//  198             TL: Touchlink
//  199             NS: Network Steering
//  200             NF: Network Formation
//  201             FB: Finding And Binding
//  202             PL: Parent Lost (for end devices only)
//  203             -- - idle (commissioning not currently active)
//  204           Network status
//  205             NotOnNwk - not currently connected to a network
//  206             FORM - network was formed by the current device during the latest execution of the NF method
//  207             JOIN - the current device joined an existing network during the latest execution of the NS method
//  208             TCHL - the current device joined a network using touchlink 
//  209             EXST - the device was already connected to a network when the commissioning was started
//  210           Joining permission state (not showing on end devices):
//  211             CLOSED - the current device is closed for joining of other devices
//  212             OpenXXX - the current device is open for joining of other devices, and will close in XXX seconds
//  213         Line2:
//  214           IdXXX - The device is identifying (if XXX > 0), and will stop identifying in XXX seconds.
//  215           SrchXXX/YY - The device is currently performing F&B as an Initiator (if XXX > 0), and will stop in
//  216             XXX seconds. YY is the number of matching endpoints that were foind, for which bindings were 
//  217             successfully created or already existed.
//  218         
//  219     <T.L. TARGET> start touchlink target
//  220       Press [OK] to start / stop touchlink target functionality.
//  221       When not active, pressing [OK] will start touchlink target for the duration defined by the respective
//  222       configuration item.
//  223       When active, pressing OK will immidiately stop touchlink target functionality.
//  224       This menu item is only available if BDB_TL_TARGET is defined.
//  225 
//  226     <APP MENU> application-specific sub-menu
//  227       Press [OK] to enter the application-specific sub-menu.
//  228       See the main comment in the specific application c file for more details.
//  229       
//  230     <INFO> device and network information
//  231       This screen has no operation related to it. It shows the following information:
//  232         Line1:
//  233           Device IEEE address
//  234         Line2: (only meaningful when the device is on a network)
//  235           nXXXX - the Network pan-id
//  236           cXX - the Channel the network is active on
//  237           aXXXX - the short Address of the device
//  238         Line3:
//  239           XXX (YYY) - the device is not connected to a network.
//  240             XXX is either ZR, ZC or ZED, depending on the build configuration.
//  241             YYY is the network-state value (see definition of devStates_t in ZDApp.h).
//  242           ZC - the device is connected to a network as a coordinator.
//  243           ZR CENT - the device is connected to a centralized network as a router.
//  244           ZR DIST - the device is connected to a distributed network as a router.
//  245           ZED pXXXX - the device is connected to a network as an end device. Parent address is XXXX.
//  246 
//  247     <RESET TO FN> reset the device to factory-new
//  248       Press [OK] to reset the device to factory-new. The device will disconnect from the network, and 
//  249       all configurations and network information will be deleted.
//  250 
//  251 *********************************************************************/
//  252 
//  253 #ifdef LEGACY_LCD_DEBUG
//  254 #error Please disable LEGACY_LCD_DEBUG.
//  255 #endif
//  256 
//  257 #if (BDB_INSTALL_CODE_USE!=BDB_INSTALL_CODE_USE_IC_CRC)
//  258 #warning Install-Code functionality is disabled. To enable, make sure BDB_INSTALL_CODE_USE==BDB_INSTALL_CODE_USE_IC_CRC
//  259 #endif
//  260 
//  261 /*********************************************************************
//  262  * INCLUDES
//  263  */
//  264 #include "hal_types.h"
//  265 #include "hal_key.h"
//  266 #include "bdb_interface.h"
//  267 #include "hal_lcd.h"
//  268 #include "hal_led.h"
//  269 #include "zcl.h"
//  270 #include "zdapp.h"
//  271 #include "zcl_sampleapps_ui.h"
//  272 
//  273 #ifdef BDB_TL_TARGET
//  274   #include "bdb_touchlink_target.h"
//  275 #endif
//  276 
//  277 
//  278 /*********************************************************************
//  279  * CONSTANT-MACROS AND ENUMERATIONS
//  280  */
//  281 enum
//  282 {
//  283   UI_STATE_DEFAULT = 0,
//  284   UI_STATE_CONFIGURE,
//  285   UI_STATE_COMMISSION,
//  286 #ifdef BDB_TL_TARGET
//  287   UI_STATE_TOGGLE_TL_TARGET,
//  288 #endif
//  289   UI_STATE_APP_SPECIFIC_MENU,
//  290   UI_STATE_INFO,
//  291   UI_STATE_RESET_TO_FACTORY_NEW,
//  292   UI_STATE_STATE_HELP,
//  293   UI_STATE_SET_INST_CODE,
//  294 #ifdef BDB_TL_TARGET
//  295   UI_STATE_TOUCHLINK_TARGET,
//  296   UI_STATE_TOUCHLINK_STEALING,
//  297 #endif
//  298 #ifdef BDB_TL_INITIATOR
//  299   UI_STATE_TOUCHLINK_INITIATOR,
//  300 #endif
//  301   UI_STATE_NETWORK_FORMATION,
//  302   UI_STATE_NETWORK_STEERING,
//  303   UI_STATE_FINDING_AND_BINDING,
//  304   UI_STATE_SET_PRI_CHANEL_MASK_0,
//  305   UI_STATE_SET_SEC_CHANEL_MASK_0,
//  306   UI_STATE_SET_PAN_ID_0,
//  307   UI_STATE_BACK_FROM_CONFIGURE,
//  308   UI_STATE_SET_PRI_CHANEL_MASK_1,
//  309   UI_STATE_SET_SEC_CHANEL_MASK_1,
//  310   UI_STATE_SET_PAN_ID_1,
//  311   UI_STATE_SET_INST_CODE_0,
//  312 #if (ZG_BUILD_COORDINATOR_TYPE)
//  313   UI_STATE_SET_INST_CODE_ADDR_0,
//  314 #endif
//  315   UI_STATE_SET_INST_CODE_DONE,
//  316   UI_STATE_BACK_FROM_INSTALL_CODE,
//  317   UI_STATE_SET_INST_CODE_1,
//  318 #if (ZG_BUILD_COORDINATOR_TYPE)
//  319   UI_STATE_SET_INST_CODE_ADDR_1,
//  320 #endif
//  321 };
//  322 
//  323 #define DEFAULT_COMISSIONING_MODE (BDB_COMMISSIONING_MODE_NWK_STEERING | BDB_COMMISSIONING_MODE_NWK_FORMATION | BDB_COMMISSIONING_MODE_FINDING_BINDING)
//  324 
//  325 #define TOUCHLINK_TIMEOUT_INCREMENTS_INITIAL 1000
//  326 #define TOUCHLINK_TIMEOUT_INCREMENTS_MAX 10000000
//  327 
//  328 #define DEFAULT_TOUCHLINK_TARGET_TIMEOUT 30000
//  329 
//  330 #define LCD_CURSOR_UPDATE_INTERVAL 500
//  331 
//  332 #define LCD_AUTO_REFRESH_INTERVAL_ON_COMISSIONING_SCREEN 250
//  333 
//  334 #define LCD_AUTO_UPDATE_INTERVAL_ON_TOUCHLINK_TARGET_SCREEN 1000
//  335 #define LCD_AUTO_UPDATE_INTERVAL_ON_TOUCHLINK_TARGET_SCREEN_END 50
//  336 
//  337 #define LCD_LINE_LENGTH 16
//  338 
//  339 #define STATUS_UNKNOWN 0xFF
//  340 
//  341 #define LCD_CURSOR_CHAR ' '
//  342 
//  343 #define UI_INSTALL_CODE_DEFAULT {0x83,0xFE,0xD3,0x40,0x7A,0x93,0x97,0x23,0xA5,0xC6,0x39,0xB2,0x69,0x16,0xD5,0x05,0xC3,0xB5} //This install code produces the key: 66B6900981E1EE3CA4206B6B861C02BB
//  344 #define UI_INSTALL_CODE_ADDR_DEFAULT {0xE7,0xFC,0x0E,0x04,0x00,0x4B,0x12,0x00}
//  345 
//  346 
//  347 #ifdef HAL_BOARD_CC2538
//  348 #define UI_LCD_LINE_1 HAL_LCD_LINE_3
//  349 #define UI_LCD_LINE_2 HAL_LCD_LINE_4
//  350 #define UI_LCD_LINE_3 HAL_LCD_LINE_5
//  351 
//  352 #define LCD_CC2538_PREFIX_COUNT 3
//  353 #else
//  354 #define UI_LCD_LINE_1 HAL_LCD_LINE_1
//  355 #define UI_LCD_LINE_2 HAL_LCD_LINE_2
//  356 #define UI_LCD_LINE_3 HAL_LCD_LINE_3
//  357 
//  358 #define LCD_CC2538_PREFIX_COUNT 0
//  359 #endif
//  360 
//  361 #define UI_LED_IDENTIFY_DUTY_CYCLE    50
//  362 
//  363 #define UI_LED_COORDINATOR_DUTY_CYCLE 75
//  364 #define UI_LED_ROUTER_DUTY_CYCLE      95
//  365 #define UI_LED_END_DEVICE_DUTY_CYCLE 100
//  366 
//  367 #define UI_LED_DEVICE_STATE_FLASH_TIME 4000
//  368 
//  369 #define UI_LED_DEVICE_STATE       HAL_LED_2
//  370 #define UI_LED_IDENTIFY           HAL_LED_3
//  371 #define UI_LED_NETWORK_OPEN_STATE HAL_LED_4
//  372 
//  373 #define NWK_OPEN_FOR_JOINING 0x1
//  374 #define NWK_OPEN_TOUCHLINK_AS_TARGET 0x2
//  375 
//  376 /*********************************************************************
//  377  * TYPEDEFS
//  378  */
//  379    
//  380 /*********************************************************************
//  381 * LOCAL FUNCTIONS DECLARATIONS
//  382 */
//  383 static void uiUintToString(uint32 value, char * str, uint8 base, uint8 num_of_digists, bool pad0, bool reverse);
//  384 static void uiArrayToString(uint8 * buf, char * str, uint8 num_of_digists, bool big_endian);
//  385 static void uiCreateChannelMaskString(uint32 channel_mask, char * str);
//  386 
//  387 
//  388 #ifdef BDB_TL_TARGET
//  389 static void uiActionToggleTlTarget(uint16 keys);
//  390 #endif
//  391 static void uiActionStartComissioning(uint16 keys);
//  392 static void uiActionSetInstallCode(uint16 keys);
//  393 static void uiActionResetToFactoryNew(uint16 keys);
//  394 static void uiActionConfigureEnables(uint16 keys);
//  395 static void uiActionMenuJump(uint16 keys);
//  396 static void uiActionProcessConfigureChannels(uint16 keys);
//  397 static void uiActionProcessConfigurePanId(uint16 keys);
//  398 static void uiActionProcessPrepareInstallCode(uint16 keys);
//  399 static void uiActionAppSecificMenu(uint16 keys);
//  400 
//  401 static void *uiProcessPermitJoin( void *duration );
//  402 
//  403 static void uiProcessIdentifyTimeChange( uint8 endpoint );
//  404 
//  405 static void uiProcessBindNotification( bdbBindNotificationData_t *data );
//  406 
//  407 #ifdef BDB_TL_TARGET
//  408 static void uiProcessTouchlinkTargetEnable( uint8 enable );
//  409 #endif
//  410 
//  411 /*********************************************************************
//  412  * CONSTANTS
//  413  */

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  414 static const uiState_t gui_states_main[] = 
gui_states_main:
        DB 254
        DB 5
        DATA16
        DW 4
        DW `??uiActionMenuJump::?relay`
        DATA8
        DB 254
        DB 254
        DATA16
        DW 4
        DW `??uiActionMenuJump::?relay`
        DATA8
        DB 254
        DB 254
        DATA16
        DW 4
        DW `??uiActionStartComissioning::?relay`
        DATA8
        DB 254
        DB 254
        DATA16
        DW 4
        DW `??uiActionAppSecificMenu::?relay`
        DATA8
        DB 254
        DB 254
        DATA16
        DW 0
        DW 0H
        DATA8
        DB 0
        DB 254
        DATA16
        DW 4
        DW `??uiActionResetToFactoryNew::?relay`
        DATA8
        DB 255
        DB 255
        DATA16
        DW 1024
        DW `??uiActionMenuJump::?relay`
        DATA8
        DB 254
        DB 14
        DATA16
        DW 4
        DW `??uiActionMenuJump::?relay`
        DATA8
        DB 254
        DB 254
        DATA16
        DW 4
        DW `??uiActionConfigureEnables::?relay`
        DATA8
        DB 254
        DB 254
        DATA16
        DW 4
        DW `??uiActionConfigureEnables::?relay`
        DATA8
        DB 254
        DB 254
        DATA16
        DW 4
        DW `??uiActionConfigureEnables::?relay`
        DATA8
        DB 254
        DB 254
        DATA16
        DW 4
        DW `??uiActionMenuJump::?relay`
        DATA8
        DB 254
        DB 254
        DATA16
        DW 4
        DW `??uiActionMenuJump::?relay`
        DATA8
        DB 254
        DB 254
        DATA16
        DW 4
        DW `??uiActionMenuJump::?relay`
        DATA8
        DB 7
        DB 254
        DATA16
        DW 4
        DW `??uiActionMenuJump::?relay`
        DATA8
        DB 255
        DB 255
        DATA16
        DW 1055
        DW `??uiActionProcessConfigureChannels::?relay`
        DATA8
        DB 255
        DB 255
        DATA16
        DW 1055
        DW `??uiActionProcessConfigureChannels::?relay`
        DATA8
        DB 255
        DB 255
        DATA16
        DW 1055
        DW `??uiActionProcessConfigurePanId::?relay`
        DATA8
        DB 254
        DB 20
        DATA16
        DW 4
        DW `??uiActionMenuJump::?relay`
        DATA8
        DB 254
        DB 254
        DATA16
        DW 4
        DW `??uiActionSetInstallCode::?relay`
        DATA8
        DB 18
        DB 254
        DATA16
        DW 4
        DW `??uiActionMenuJump::?relay`
        DATA8
        DB 255
        DB 255
        DATA16
        DW 1055
        DW `??uiActionProcessPrepareInstallCode::?relay`
//  415 {
//  416   /*  UI_STATE_DEFAULT                */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_RESET_TO_FACTORY_NEW,    UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
//  417   /*  UI_STATE_CONFIGURE              */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
//  418   /*  UI_STATE_COMMISSION             */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionStartComissioning},
//  419 #ifdef BDB_TL_TARGET
//  420   /*  UI_STATE_TOGGLE_TL_TARGET       */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionToggleTlTarget},
//  421 #endif
//  422   /*  UI_STATE_APP_SPECIFIC_MENU      */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionAppSecificMenu},
//  423   /*  UI_STATE_INFO                   */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            0, NULL},
//  424   /*  UI_STATE_RESET_TO_FACTORY_NEW   */ {UI_STATE_DEFAULT,               UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionResetToFactoryNew},
//  425 
//  426   /*  UI_STATE_STATE_HELP             */ {UI_STATE_UNCHANGED,             UI_STATE_UNCHANGED,               UI_KEY_SW_5_RELEASED,&uiActionMenuJump},
//  427 
//  428   /*  UI_STATE_SET_INST_CODE          */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_BACK_FROM_CONFIGURE,     UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
//  429 #ifdef BDB_TL_TARGET
//  430   /*  UI_STATE_TOUCHLINK_TARGET       */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED | UI_KEY_SW_1_RELEASED | UI_KEY_SW_3_RELEASED, &uiActionConfigureEnables},
//  431   /*  UI_STATE_TOUCHLINK_STEALING     */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionConfigureEnables},
//  432 #endif
//  433 #ifdef BDB_TL_INITIATOR
//  434   /*  UI_STATE_TOUCHLINK_INITIATOR    */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionConfigureEnables},
//  435 #endif
//  436   /*  UI_STATE_NETWORK_FORMATION      */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionConfigureEnables},
//  437   /*  UI_STATE_NETWORK_STEERING       */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionConfigureEnables},
//  438   /*  UI_STATE_FINDING_AND_BINDING    */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionConfigureEnables},
//  439   /*  UI_STATE_SET_PRI_CHANEL_MASK_0  */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
//  440   /*  UI_STATE_SET_SEC_CHANEL_MASK_0  */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
//  441   /*  UI_STATE_SET_PAN_ID_0           */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
//  442   /*  UI_STATE_BACK_FROM_CONFIGURE    */ {UI_STATE_SET_INST_CODE,         UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
//  443 
//  444   /*  UI_STATE_SET_PRI_CHANEL_MASK_1  */ {UI_STATE_UNCHANGED,             UI_STATE_UNCHANGED,               UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED | UI_KEY_SW_5_PRESSED | UI_KEY_SW_2_PRESSED  | UI_KEY_SW_4_PRESSED | UI_KEY_SW_5_RELEASED , &uiActionProcessConfigureChannels},
//  445   /*  UI_STATE_SET_SEC_CHANEL_MASK_1  */ {UI_STATE_UNCHANGED,             UI_STATE_UNCHANGED,               UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED | UI_KEY_SW_5_PRESSED | UI_KEY_SW_2_PRESSED  | UI_KEY_SW_4_PRESSED | UI_KEY_SW_5_RELEASED , &uiActionProcessConfigureChannels},
//  446   /*  UI_STATE_SET_PAN_ID_1           */ {UI_STATE_UNCHANGED,             UI_STATE_UNCHANGED,               UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED | UI_KEY_SW_5_PRESSED | UI_KEY_SW_2_PRESSED  | UI_KEY_SW_4_PRESSED | UI_KEY_SW_5_RELEASED , &uiActionProcessConfigurePanId},
//  447 
//  448   /*  UI_STATE_SET_INST_CODE_0        */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_BACK_FROM_INSTALL_CODE,  UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
//  449 #if (ZG_BUILD_COORDINATOR_TYPE)
//  450   /*  UI_STATE_SET_INST_CODE_ADDR_0   */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
//  451 #endif  
//  452   /*  UI_STATE_SET_INST_CODE_DONE     */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionSetInstallCode},
//  453   /*  UI_STATE_BACK_FROM_INSTALL_CODE */ {UI_STATE_SET_INST_CODE_0,       UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
//  454 
//  455   /*  UI_STATE_SET_INST_CODE_1        */ {UI_STATE_UNCHANGED,             UI_STATE_UNCHANGED,               UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED | UI_KEY_SW_5_PRESSED | UI_KEY_SW_2_PRESSED  | UI_KEY_SW_4_PRESSED | UI_KEY_SW_5_RELEASED , &uiActionProcessPrepareInstallCode},
//  456 #if (ZG_BUILD_COORDINATOR_TYPE)
//  457   /*  UI_STATE_SET_INST_CODE_ADDR_1   */ {UI_STATE_UNCHANGED,             UI_STATE_UNCHANGED,               UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED | UI_KEY_SW_5_PRESSED | UI_KEY_SW_2_PRESSED  | UI_KEY_SW_4_PRESSED | UI_KEY_SW_5_RELEASED , &uiActionProcessPrepareInstallCode},
//  458 #endif
//  459 };
//  460 
//  461 /*********************************************************************
//  462  * GLOBAL VARIABLES
//  463  */
//  464 
//  465 /*********************************************************************
//  466  * GLOBAL FUNCTIONS
//  467  */
//  468 
//  469 /*********************************************************************
//  470  * EXTERNAL REFERENCES
//  471  */
//  472 extern uint8 aExtendedAddress[];
//  473 
//  474 /*********************************************************************
//  475  * LOCAL VARIABLES
//  476  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  477 static uint8 uiAppTaskId;
uiAppTaskId:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  478 static uint16 uiLcdAutoUpdateEvent;
uiLcdAutoUpdateEvent:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  479 static uint16 * pUiIdentifyTimeAttribute;
pUiIdentifyTimeAttribute:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  480 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  481 static uiAppUpdateLcd_t uiAppUpdateLcd;
uiAppUpdateLcd:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  482 static const uiState_t * uiAppStatesMain = NULL;
uiAppStatesMain:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  483 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  484 static uint8 FBMatchesFound = 0;
FBMatchesFound:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  485 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  486 static int uiCurrentState = UI_STATE_DEFAULT;
uiCurrentState:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  487 static bool uiCommissioningIsInitializing = FALSE;
uiCommissioningIsInitializing:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  488 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  489 static uint8 uiLcdCursorLine = 0xFF;
uiLcdCursorLine:
        DATA8
        DS 1
        REQUIRE `?<Initializer for uiLcdCursorLine>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  490 static uint8 uiLcdCursorCol;
uiLcdCursorCol:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  491 static uint8 uiLcdCursorState;
uiLcdCursorState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  492 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  493 static uint8 uiSelectedBdbComissioningModes = DEFAULT_COMISSIONING_MODE;
uiSelectedBdbComissioningModes:
        DATA8
        DS 1
        REQUIRE `?<Initializer for uiSelectedBdbComissioningMod`
        REQUIRE __INIT_XDATA_I
//  494 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  495 static ZStatus_t uiAddInstallCodeLastStatus = STATUS_UNKNOWN;
uiAddInstallCodeLastStatus:
        DATA8
        DS 1
        REQUIRE `?<Initializer for uiAddInstallCodeLastStatus>`
        REQUIRE __INIT_XDATA_I
//  496 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  497 static char * uiCommissioningStateStr = "--";
uiCommissioningStateStr:
        DATA16
        DS 2
        REQUIRE `?<Initializer for uiCommissioningStateStr>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  498 static char * uiCommissioningNetworkConnrctionStr = NULL;
uiCommissioningNetworkConnrctionStr:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  499 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  500 static bool uiComissioningIsActive = FALSE;
uiComissioningIsActive:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  501 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  502 static bool uiResetInitiated = FALSE;
uiResetInitiated:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  503 
//  504 #ifdef BDB_TL_TARGET
//  505 static uint16 uiKeyAutoRepeatEvent;
//  506 static uint32 uiLcdAutoUpdateInterval;
//  507 
//  508 static uint16 uiAutoKeyRepeatDelay = 500;
//  509 static uint32 uiAutoKeyRepeatCount = 0;
//  510 
//  511 static uint32 uiTouchlinkTargetTimeout = DEFAULT_TOUCHLINK_TARGET_TIMEOUT;
//  512 #endif
//  513 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  514 static uint8 uiInstallCode[] = UI_INSTALL_CODE_DEFAULT;
uiInstallCode:
        DATA8
        DS 18
        REQUIRE `?<Initializer for uiInstallCode>`
        REQUIRE __INIT_XDATA_I
//  515 #if (ZG_BUILD_COORDINATOR_TYPE)
//  516 static uint8 uiInstallCodeAddr[Z_EXTADDR_LEN] = UI_INSTALL_CODE_ADDR_DEFAULT;
//  517 #endif
//  518 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  519 static const uiState_t * uiStates = gui_states_main;
uiStates:
        DATA16
        DS 2
        REQUIRE `?<Initializer for uiStates>`
        REQUIRE __INIT_XDATA_I
//  520 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  521 static char * uiAppTitleStr;
uiAppTitleStr:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  522 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  523 static uint8 uiNetworkOpenStateLedDutyCycle[] = {0, 25, 75, 100}; //25% = open for joining; 75% = touchlink target; 100% = both;
uiNetworkOpenStateLedDutyCycle:
        DATA32
        DS 4
        REQUIRE `?<Initializer for uiNetworkOpenStateLedDutyCyc`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  524 static uint8 uiNwkOpenState = 0x00;
uiNwkOpenState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  525 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  526 static devStates_t uiNwkStateShadow = DEV_HOLD;
uiNwkStateShadow:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  527 
//  528 /*********************************************************************
//  529  * LOCAL UTILITY FUNCTIONS
//  530  */
//  531 
//  532 /*********************************************************************
//  533  * @fn          uiUintToString
//  534  *
//  535  * @brief       format an integer into a string buffer.
//  536  *
//  537  * @param       value - 32bit unsigned int value to be formatted
//  538  *              str - pointer to a buffer to store the formatted bnumber
//  539  *              base - base represenation of the value. currently only tested base 10 and 16
//  540  *              num_of_digists - number of digits to include in the formatted string
//  541  *              pad0 - should be set to TRUE to pad the number with leading 0's as required
//  542  *              reverse - should be set to TRUE to reverse the output string
//  543  *
//  544  * @return      none
//  545  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  546 static void uiUintToString (uint32 value, char * str, uint8 base, uint8 num_of_digists, bool pad0, bool reverse)
uiUintToString:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function uiUintToString
        CODE
//  547 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V6,R4
        MOV     ?V7,R5
//  548   int i;
//  549   uint8 index;
//  550   
//  551   for (i = 0; i < num_of_digists; i++)
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     ?V8,A
        CLR     A
        MOV     ?V9,A
        MOV     ?V10,A
        MOV     ?V11,A
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R5,A
        SJMP    ??uiUintToString_0
??uiUintToString_1:
        INC     R2
        MOV     A,R2
        JNZ     ??uiUintToString_0
        INC     R3
??uiUintToString_0:
        MOV     A,R4
        MOV     R0,A
        CLR     C
        MOV     A,R2
        SUBB    A,R0
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_69:
        JNC     ??uiUintToString_2
//  552   {
//  553     index = (reverse ? i : num_of_digists - 1 - i);
        MOV     A,R5
        JZ      ??uiUintToString_3
        MOV     A,R2
        SJMP    ??uiUintToString_4
??uiUintToString_3:
        MOV     A,R2
        MOV     R0,A
        MOV     A,#-0x1
        ADD     A,R4
        CLR     C
        SUBB    A,R0
??uiUintToString_4:
        MOV     R7,A
//  554     str[index] = '0' + (value % base);
        MOV     ?V12,?V8
        MOV     ?V13,?V9
        MOV     ?V14,?V10
        MOV     ?V15,?V11
        MOV     ?V0,?V4
        MOV     ?V1,?V5
        MOV     ?V2,?V6
        MOV     ?V3,?V7
        MOV     R0,#?V0
        MOV     R1,#?V12
        LCALL   ?UL_DIV_MOD
        MOV     A,?V12
        ADD     A,#0x30
        MOV     ?V0,A
        MOV     A,R7
        MOV     R0,A
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_46:
        MOV     A,?V0
        MOVX    @DPTR,A
//  555     if (str[index] > '9')
        CLR     C
        SUBB    A,#0x3a
        JC      ??uiUintToString_5
//  556     {
//  557       str[index] += 'A' - '0' - 10;
        MOVX    A,@DPTR
        ADD     A,#0x7
        MOVX    @DPTR,A
//  558     }
//  559     value /= base;
??uiUintToString_5:
        MOV     ?V0,?V8
        MOV     ?V1,?V9
        MOV     ?V2,?V10
        MOV     ?V3,?V11
        MOV     R0,#?V4
        MOV     R1,#?V0
        LCALL   ?UL_DIV_MOD
//  560     if ((!pad0) && (value == 0))
        MOV     A,R6
        JNZ     ??uiUintToString_1
        MOV     A,?V4
        ORL     A,?V5
        ORL     A,?V6
        ORL     A,?V7
        JNZ     ??uiUintToString_1
//  561     {
//  562       break;
//  563     }
//  564   }
//  565 }
??uiUintToString_2:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond1 Using cfiCommon0
          CFI Function uiUintToString
          CFI Conditional ??CrossCallReturnLabel_69
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond2 Using cfiCommon0
          CFI (cfiCond2) Function uiCreateChannelMaskString
          CFI (cfiCond2) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond2) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond2) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond2) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond2) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond2) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond2) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond2) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond2) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond2) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond2) CFA_SP SP+-2
          CFI (cfiCond2) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker3 Using cfiCommon1
          CFI (cfiPicker3) NoFunction
          CFI (cfiPicker3) Picker
        MOV     A,R3
          CFI EndBlock cfiCond1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiPicker3
        REQUIRE ??Subroutine32_0
        ; // Fall through to label ??Subroutine32_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine32_0:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function uiArrayToString
          CFI Conditional ??CrossCallReturnLabel_68
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function uiUintToString
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond5) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond5) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond5) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond5) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond5) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond5) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+-2
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function uiCreateChannelMaskString
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond6) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker7 Using cfiCommon1
          CFI (cfiPicker7) NoFunction
          CFI (cfiPicker7) Picker
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiPicker7
//  566 
//  567 /*********************************************************************
//  568  * @fn          uiArrayToString
//  569  *
//  570  * @brief       format a memory buffer into a string buffer in hex representation.
//  571  *
//  572  * @param       buf - pointer to a bufer to be formatted
//  573  *              str - pointer to a buffer to store the formatted string
//  574  *              num_of_digists - number of digits to include in the formatted string
//  575  *              big_endian - whether the memory content should be represented as big or little endian
//  576  *
//  577  * @return      none
//  578  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  579 static void uiArrayToString (uint8 * buf, char * str, uint8 num_of_digists, bool big_endian)
uiArrayToString:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function uiArrayToString
        CODE
//  580 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     ?V6,R1
//  581   int i;
//  582   uint8 stringIndex;
//  583   uint8 value;
//  584   
//  585   for (i = 0; i < num_of_digists; i++)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V3,A
        SJMP    ??uiArrayToString_0
//  586   {
//  587     stringIndex = (big_endian ? i : num_of_digists - 1 - i);
??uiArrayToString_1:
        MOV     A,R4
        MOV     R0,A
        MOV     A,#-0x1
        ADD     A,?V6
        CLR     C
        SUBB    A,R0
??uiArrayToString_2:
        MOV     ?V2,A
//  588     value = (buf[i / 2] >> (4 * (i % 2))) & 0x0F;
//  589     str[stringIndex] = '0' + value;
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     ?V5,R1
        MOV     A,R6
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V5
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V4,A
        MOV     ?V5,#0x0
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R2
        RLC     A
        RLC     A
        ANL     A,#0xfc
        MOV     R0,#?V4
        LCALL   ?SS_SHR
        MOV     A,?V4
        ANL     A,#0xf
        ADD     A,#0x30
        MOV     R2,A
        MOV     R0,?V2
        MOV     A,?V0
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
//  590     if (str[stringIndex] > '9')
        CLR     C
        SUBB    A,#0x3a
        JC      ??uiArrayToString_3
//  591     {
//  592       str[stringIndex] += 'A' - '0' - 10;
        MOVX    A,@DPTR
        ADD     A,#0x7
        MOVX    @DPTR,A
//  593     }
??uiArrayToString_3:
        INC     R4
        MOV     A,R4
        JNZ     ??uiArrayToString_0
        INC     R5
??uiArrayToString_0:
        MOV     R0,?V6
        CLR     C
        MOV     A,R4
        SUBB    A,R0
        MOV     A,R5
        LCALL   ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_68:
        JNC     ??uiArrayToString_4
        MOV     A,?V3
        JZ      ??uiArrayToString_1
        MOV     A,R4
        SJMP    ??uiArrayToString_2
//  594   }
//  595 }
??uiArrayToString_4:
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock8
//  596 
//  597 /*********************************************************************
//  598  * @fn          uiCreateChannelMaskString
//  599  *
//  600  * @brief       format a channel mask into a string bugger
//  601  *
//  602  * @param       channel_mask - bitmask of the enabled / disabled channels (bits 11-26 represent the
//  603  *                respective channels)
//  604  *              str - pointer to a buffer to store the formatted string
//  605  *
//  606  * @return      none
//  607  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  608 static void uiCreateChannelMaskString(uint32 channel_mask, char * str)
uiCreateChannelMaskString:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function uiCreateChannelMaskString
        CODE
//  609 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V6,R4
        MOV     ?V7,R5
//  610   int i;
//  611   uint32 mask = 0x00000800;
        MOV     ?V0,#0x0
        MOV     ?V1,#0x8
        MOV     ?V2,#0x0
        MOV     ?V3,#0x0
//  612   
//  613   for (i = 0; i < 16; i++)
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine33_0 & 0xFFFF
//  614   {
//  615     str[i] = channel_mask & mask ? '*' : '-';
??CrossCallReturnLabel_71:
        MOV     ?V8,?V4
        MOV     ?V9,?V5
        MOV     ?V10,?V6
        MOV     ?V11,?V7
        MOV     R0,#?V8
        MOV     R1,#?V0
        LCALL   ?L_AND
        MOV     A,?V8
        ORL     A,?V9
        ORL     A,?V10
        ORL     A,?V11
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JZ      ??uiCreateChannelMaskString_0
        MOV     A,#0x2a
        SJMP    ??uiCreateChannelMaskString_1
??uiCreateChannelMaskString_0:
        MOV     A,#0x2d
??uiCreateChannelMaskString_1:
        MOVX    @DPTR,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R4
        ADD     A,R2
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,R3
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  616     mask <<= 1;
        MOV     A,#0x1
        MOV     R0,#?V0
        LCALL   ?L_SHL
//  617   }
        INC     R2
        MOV     A,R2
        JNZ     ??uiCreateChannelMaskString_2
        INC     R3
??uiCreateChannelMaskString_2:
        CLR     C
        SUBB    A,#0x10
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_70:
        JC      ??CrossCallReturnLabel_71
//  618   
//  619   str[16] = 0;
        MOV     A,R4
        ADD     A,#0x10
        MOV     DPL,A
        CLR     A
        ADDC    A,R5
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
//  620 }
        INC     A
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock9
//  621 
//  622 
//  623 /*********************************************************************
//  624  * LOCAL FUNCTIONS
//  625  */
//  626 
//  627 /*********************************************************************
//  628  * @fn          uiActionMenuJump
//  629  *
//  630  * @brief       State-machine action for jumping to another state
//  631  *
//  632  * @param       keys - the keypress code that triggered the call to this function
//  633  *
//  634  * @return      none
//  635  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  636 static void uiActionMenuJump(uint16 keys)
uiActionMenuJump:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function uiActionMenuJump
        CODE
//  637 {
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  638   switch (uiCurrentState)
        MOV     DPTR,#uiCurrentState
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_94:
        JNZ     ??uiActionMenuJump_0
        MOV     A,?V0
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for uiActionMenuJump>_0`:
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        0
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        10
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionMenuJump_1
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionMenuJump_2
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        6
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionMenuJump_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        7
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionMenuJump_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        11
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionMenuJump_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        12
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionMenuJump_6
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        13
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionMenuJump_7
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        14
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionMenuJump_8
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        18
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionMenuJump_9
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        20
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionMenuJump_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionMenuJump_0
        CODE
//  639   {
//  640     case UI_STATE_DEFAULT:
//  641       uiCurrentState = UI_STATE_STATE_HELP;
??uiActionMenuJump_1:
        MOV     DPTR,#uiCurrentState
        MOV     A,#0x6
        SJMP    ??uiActionMenuJump_10
//  642       break;
//  643     case UI_STATE_STATE_HELP:
//  644       uiCurrentState = UI_STATE_DEFAULT;
??uiActionMenuJump_3:
        MOV     DPTR,#uiCurrentState
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        SJMP    ??uiActionMenuJump_11
//  645       break;
//  646     case UI_STATE_CONFIGURE:
//  647       uiCurrentState = UI_STATE_SET_INST_CODE;
//  648       break;
//  649     case UI_STATE_BACK_FROM_CONFIGURE:
//  650       uiCurrentState = UI_STATE_CONFIGURE;
??uiActionMenuJump_8:
        MOV     DPTR,#uiCurrentState
        MOV     A,#0x1
        SJMP    ??uiActionMenuJump_10
//  651       break;
//  652     case UI_STATE_SET_PRI_CHANEL_MASK_0:
//  653       uiCurrentState = UI_STATE_SET_PRI_CHANEL_MASK_1;
??uiActionMenuJump_5:
        MOV     DPTR,#uiCurrentState
        MOV     A,#0xf
        SJMP    ??uiActionMenuJump_10
//  654       break;
//  655     case UI_STATE_SET_SEC_CHANEL_MASK_0:
//  656       uiCurrentState = UI_STATE_SET_SEC_CHANEL_MASK_1;
??uiActionMenuJump_6:
        MOV     DPTR,#uiCurrentState
        MOV     A,#0x10
        SJMP    ??uiActionMenuJump_10
//  657       break;
//  658     case UI_STATE_SET_PAN_ID_0:
//  659       uiCurrentState = UI_STATE_SET_PAN_ID_1;
??uiActionMenuJump_7:
        MOV     DPTR,#uiCurrentState
        MOV     A,#0x11
        SJMP    ??uiActionMenuJump_10
//  660       break;
//  661     case UI_STATE_SET_INST_CODE:
//  662       uiCurrentState = UI_STATE_SET_INST_CODE_0;
??uiActionMenuJump_4:
        MOV     DPTR,#uiCurrentState
        MOV     A,#0x12
        SJMP    ??uiActionMenuJump_10
//  663       break;
//  664     case UI_STATE_SET_INST_CODE_0:
//  665       uiCurrentState = UI_STATE_SET_INST_CODE_1;
??uiActionMenuJump_9:
        MOV     DPTR,#uiCurrentState
        MOV     A,#0x15
        SJMP    ??uiActionMenuJump_10
//  666       break;
//  667 #if (ZG_BUILD_COORDINATOR_TYPE)
//  668     case UI_STATE_SET_INST_CODE_ADDR_0:
//  669       uiCurrentState = UI_STATE_SET_INST_CODE_ADDR_1;
//  670       break;
//  671 #endif
//  672     case UI_STATE_BACK_FROM_INSTALL_CODE:
//  673       uiCurrentState = UI_STATE_SET_INST_CODE;
??uiActionMenuJump_2:
        MOV     DPTR,#uiCurrentState
        MOV     A,#0x7
??uiActionMenuJump_10:
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
??uiActionMenuJump_11:
        MOVX    @DPTR,A
//  674       break;
//  675   }
//  676 }
??uiActionMenuJump_0:
          CFI EndBlock cfiBlock10
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock11
//  677 
//  678 /*********************************************************************
//  679  * @fn          uiActionStartComissioning
//  680  *
//  681  * @brief       State-machine action for starting comissioning
//  682  *
//  683  * @param       keys - the keypress code that triggered the call to this function
//  684  *
//  685  * @return      none
//  686  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  687 static void uiActionStartComissioning(uint16 keys)
uiActionStartComissioning:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function uiActionStartComissioning
        CODE
//  688 {
        FUNCALL uiActionStartComissioning, UI_UpdateLcd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uiActionStartComissioning, bdb_StartCommissioning
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  689   if ((!uiComissioningIsActive) && (uiSelectedBdbComissioningModes != 0))
        MOV     DPTR,#uiComissioningIsActive
        MOVX    A,@DPTR
        JNZ     ??uiActionStartComissioning_0
        MOV     DPTR,#uiSelectedBdbComissioningModes
        MOVX    A,@DPTR
        JZ      ??uiActionStartComissioning_0
//  690   {
//  691     uiComissioningIsActive = TRUE;
        MOV     DPTR,#uiComissioningIsActive
        MOV     A,#0x1
        MOVX    @DPTR,A
//  692 
//  693     FBMatchesFound = 0;
        MOV     DPTR,#FBMatchesFound
        CLR     A
        MOVX    @DPTR,A
//  694     
//  695     //update LCD now, since bdb_StartCommissioning() is blocking for a few seconds,
//  696     // and we want to give a prompt response to the user
//  697     uiCommissioningIsInitializing = TRUE;
        MOV     DPTR,#uiCommissioningIsInitializing
        INC     A
        MOVX    @DPTR,A
//  698     UI_UpdateLcd();
        ; Setup parameters for call to function UI_UpdateLcd
        LCALL   `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
//  699 
//  700     //if already on the network - mark it as 'existing connection'
//  701     if ((uiNwkStateShadow == DEV_END_DEVICE) || (uiNwkStateShadow == DEV_ZB_COORD) || (uiNwkStateShadow == DEV_ROUTER))
        MOV     DPTR,#uiNwkStateShadow
        MOVX    A,@DPTR
        XRL     A,#0x6
        JZ      ??uiActionStartComissioning_1
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??uiActionStartComissioning_1
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??uiActionStartComissioning_2
//  702     {
//  703       uiCommissioningNetworkConnrctionStr = "EXST";
??uiActionStartComissioning_1:
        MOV     DPTR,#uiCommissioningNetworkConnrctionStr
        MOV     A,#`?<Constant "EXST">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "EXST">` >> 8) & 0xff
        MOVX    @DPTR,A
//  704     }
//  705     
//  706     bdb_StartCommissioning(uiSelectedBdbComissioningModes);
??uiActionStartComissioning_2:
        ; Setup parameters for call to function bdb_StartCommissioning
        MOV     DPTR,#uiSelectedBdbComissioningModes
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
//  707   }
//  708 }
??uiActionStartComissioning_0:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock12
//  709 
//  710 /*********************************************************************
//  711  * @fn          uiActionSetInstallCode
//  712  *
//  713  * @brief       State-machine action for setting the install code
//  714  *
//  715  * @param       keys - the keypress code that triggered the call to this function
//  716  *
//  717  * @return      none
//  718  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  719 static void uiActionSetInstallCode(uint16 keys)
uiActionSetInstallCode:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function uiActionSetInstallCode
        CODE
//  720 {
        FUNCALL uiActionSetInstallCode, bdb_GenerateInstallCodeCRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uiActionSetInstallCode, bdb_setActiveCentralizedLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  721   uint16 crc = bdb_GenerateInstallCodeCRC(uiInstallCode);
        ; Setup parameters for call to function bdb_GenerateInstallCodeCRC
        MOV     R2,#uiInstallCode & 0xff
        MOV     R3,#(uiInstallCode >> 8) & 0xff
        LCALL   `??bdb_GenerateInstallCodeCRC::?relay`; Banked call to: bdb_GenerateInstallCodeCRC
//  722   uiInstallCode[INSTALL_CODE_LEN] = crc & 0xFF;
        MOV     A,R2
        MOV     DPTR,#uiInstallCode + 16
        MOVX    @DPTR,A
//  723   uiInstallCode[INSTALL_CODE_LEN + 1] = crc >> 8;
        MOV     A,R3
        INC     DPTR
        MOVX    @DPTR,A
//  724 
//  725 #if (ZG_BUILD_COORDINATOR_TYPE)
//  726   if (ZG_DEVICE_COORDINATOR_TYPE)
//  727   {  
//  728     uiAddInstallCodeLastStatus = bdb_addInstallCode(uiInstallCode, uiInstallCodeAddr);
//  729   }
//  730   else
//  731   {
//  732     uiAddInstallCodeLastStatus = bdb_setActiveCentralizedLinkKey(FALSE, uiInstallCode);
//  733   }
//  734 #else
//  735   uiAddInstallCodeLastStatus = bdb_setActiveCentralizedLinkKey(FALSE, uiInstallCode);
        ; Setup parameters for call to function bdb_setActiveCentralizedLinkKey
        MOV     R2,#uiInstallCode & 0xff
        MOV     R3,#(uiInstallCode >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   `??bdb_setActiveCentralizedLinkKey::?relay`; Banked call to: bdb_setActiveCentralizedLinkKey
        MOV     A,R1
        MOV     DPTR,#uiAddInstallCodeLastStatus
        MOVX    @DPTR,A
//  736 #endif
//  737 }
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock13
//  738 
//  739 /*********************************************************************
//  740  * @fn          uiActionAppSecificMenu
//  741  *
//  742  * @brief       State-machine action for executing the application-specific sub-menus
//  743  *
//  744  * @param       keys - the keypress code that triggered the call to this function
//  745  *
//  746  * @return      none
//  747  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  748 void uiActionAppSecificMenu(uint16 keys)
uiActionAppSecificMenu:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function uiActionAppSecificMenu
        CODE
//  749 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  750   if (uiAppStatesMain != NULL)
        MOV     DPTR,#uiAppStatesMain
        LCALL   ??Subroutine34_0 & 0xFFFF
??CrossCallReturnLabel_75:
        JZ      ??uiActionAppSecificMenu_0
//  751   {
//  752     uiStates = uiAppStatesMain;
        MOV     DPTR,#uiStates
        LCALL   ??Subroutine37_0 & 0xFFFF
//  753     uiCurrentState = 1; //do not start from 0, which is the 'back' menu item
??CrossCallReturnLabel_110:
        MOV     DPTR,#uiCurrentState
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  754   }
//  755 }
??uiActionAppSecificMenu_0:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock14
//  756 
//  757 /*********************************************************************
//  758  * @fn          UI_ActionBackFromAppMenu
//  759  *
//  760  * @brief       Application state-machine action for returning to the common menu
//  761  *
//  762  * @param       keys - the keypress code that triggered the call to this function
//  763  *
//  764  * @return      none
//  765  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  766 void UI_ActionBackFromAppMenu(uint16 keys)
UI_ActionBackFromAppMenu:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function UI_ActionBackFromAppMenu
        CODE
//  767 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  768   uiStates = gui_states_main;
        MOV     DPTR,#uiStates
        MOV     A,#gui_states_main & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(gui_states_main >> 8) & 0xff
        MOVX    @DPTR,A
//  769   uiCurrentState = UI_STATE_APP_SPECIFIC_MENU;
        MOV     DPTR,#uiCurrentState
        MOV     A,#0x3
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  770 }
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock15
//  771 
//  772 #ifdef BDB_TL_TARGET
//  773 /*********************************************************************
//  774  * @fn          uiActionToggleTlTarget
//  775  *
//  776  * @brief       State-machine action for toggling touchlink-target functionality
//  777  *
//  778  * @param       keys - the keypress code that triggered the call to this function
//  779  *
//  780  * @return      none
//  781  */
//  782 void uiActionToggleTlTarget(uint16 keys)
//  783 {
//  784   if (!touchLinkTargetEnabled)
//  785   {
//  786     if (uiTouchlinkTargetTimeout > 0)
//  787     {
//  788       touchLinkTarget_EnableCommissioning( uiTouchlinkTargetTimeout );
//  789       uiLcdAutoUpdateInterval = LCD_AUTO_UPDATE_INTERVAL_ON_TOUCHLINK_TARGET_SCREEN;
//  790     }
//  791   }
//  792   else
//  793   {
//  794     touchLinkTarget_DisableCommissioning();
//  795     uiLcdAutoUpdateInterval = LCD_AUTO_UPDATE_INTERVAL_ON_TOUCHLINK_TARGET_SCREEN_END;
//  796   }
//  797 }
//  798 #endif
//  799 
//  800 /*********************************************************************
//  801  * @fn          uiActionProcessConfigureChannels
//  802  *
//  803  * @brief       State-machine action for configuring channel masks
//  804  *
//  805  * @param       keys - the keypress code that triggered the call to this function
//  806  *
//  807  * @return      none
//  808  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  809 static void uiActionProcessConfigureChannels(uint16 keys)
uiActionProcessConfigureChannels:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function uiActionProcessConfigureChannels
        CODE
//  810 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  811   uint32 * channelMask;
//  812   
//  813   uiLcdCursorLine = 1;
        MOV     DPTR,#uiLcdCursorLine
        MOV     A,#0x1
        MOVX    @DPTR,A
//  814   uiLcdCursorState = 0;
        MOV     DPTR,#uiLcdCursorState
        CLR     A
        MOVX    @DPTR,A
//  815 
//  816   if (uiCurrentState == UI_STATE_SET_PRI_CHANEL_MASK_1)
        MOV     DPTR,#uiCurrentState
        MOVX    A,@DPTR
        XRL     A,#0xf
        JNZ     ??uiActionProcessConfigureChannels_0
        INC     DPTR
        MOVX    A,@DPTR
??uiActionProcessConfigureChannels_0:
        JNZ     ??uiActionProcessConfigureChannels_1
//  817   {
//  818     channelMask = &bdbAttributes.bdbPrimaryChannelSet;
        MOV     R4,#(bdbAttributes + 4) & 0xff
        MOV     R5,#((bdbAttributes + 4) >> 8) & 0xff
        SJMP    ??uiActionProcessConfigureChannels_2
//  819   }
//  820   else
//  821   {
//  822     channelMask = &bdbAttributes.bdbSecondaryChannelSet;
??uiActionProcessConfigureChannels_1:
        MOV     R4,#bdbAttributes & 0xff
        MOV     R5,#(bdbAttributes >> 8) & 0xff
//  823   }
//  824 
//  825   if (keys & UI_KEY_SW_5_RELEASED)
??uiActionProcessConfigureChannels_2:
        MOV     A,R3
        ANL     A,#0x4
        JZ      ??uiActionProcessConfigureChannels_3
//  826   {
//  827     uiLcdCursorCol = 0;
        MOV     DPTR,#uiLcdCursorCol
        CLR     A
        MOVX    @DPTR,A
//  828   }
//  829   
//  830   if (keys & UI_KEY_SW_1_PRESSED)
??uiActionProcessConfigureChannels_3:
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        JNC     ??uiActionProcessConfigureChannels_4
//  831   {
//  832     *channelMask |= ((uint32)0x00000800 << uiLcdCursorCol);
        MOV     ?V0,#0x0
        MOV     ?V1,#0x8
        MOV     ?V2,#0x0
        MOV     ?V3,#0x0
        MOV     DPTR,#uiLcdCursorCol
        MOVX    A,@DPTR
        MOV     R0,#?V0
        LCALL   ?L_SHL
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     R0,#?V0
        LCALL   ?L_IOR_TO_X
//  833     uiLcdCursorState = 1;
        SJMP    ??uiActionProcessConfigureChannels_5
//  834   }
//  835   else if (keys & UI_KEY_SW_3_PRESSED)
??uiActionProcessConfigureChannels_4:
        ANL     A,#0x10
        JZ      ??uiActionProcessConfigureChannels_6
//  836   {
//  837     *channelMask &= ~(((uint32)0x00000800 << uiLcdCursorCol));
        MOV     ?V0,#0x0
        MOV     ?V1,#0x8
        MOV     ?V2,#0x0
        MOV     ?V3,#0x0
        MOV     DPTR,#uiLcdCursorCol
        MOVX    A,@DPTR
        MOV     R0,#?V0
        LCALL   ?L_SHL
        MOV     R0,#?V0
        LCALL   ?L_NOT
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     R0,#?V0
        LCALL   ?L_AND_TO_X
//  838     uiLcdCursorState = 1;
??uiActionProcessConfigureChannels_5:
        MOV     DPTR,#uiLcdCursorState
        MOV     A,#0x1
        SJMP    ??CrossCallReturnLabel_0
//  839   }
//  840   else if (keys & UI_KEY_SW_2_PRESSED)
??uiActionProcessConfigureChannels_6:
        MOV     A,R2
        ANL     A,#0x2
        JZ      ??uiActionProcessConfigureChannels_7
//  841   {
//  842     if (uiLcdCursorCol < 15)
        MOV     DPTR,#uiLcdCursorCol
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0xf
        JNC     ??uiActionProcessConfigureChannels_8
//  843     {
//  844       uiLcdCursorCol++;
        MOVX    A,@DPTR
        INC     A
        SJMP    ??CrossCallReturnLabel_0
//  845     }
//  846     else
//  847     {
//  848       uiLcdCursorCol = 0;
??uiActionProcessConfigureChannels_8:
        CLR     A
        SJMP    ??CrossCallReturnLabel_0
//  849     }
//  850   }
//  851   else if (keys & UI_KEY_SW_4_PRESSED)
??uiActionProcessConfigureChannels_7:
        MOV     A,R2
        ANL     A,#0x8
        JZ      ??uiActionProcessConfigureChannels_9
//  852   {
//  853     if (uiLcdCursorCol > 0)
        MOV     DPTR,#uiLcdCursorCol
        MOVX    A,@DPTR
        JZ      ??uiActionProcessConfigureChannels_10
//  854     {
//  855       uiLcdCursorCol--;
        DEC     A
        SJMP    ??CrossCallReturnLabel_0
//  856     }
//  857     else
//  858     {
//  859       uiLcdCursorCol = 15;
??uiActionProcessConfigureChannels_10:
        MOV     A,#0xf
        SJMP    ??CrossCallReturnLabel_0
//  860     }
//  861   }
//  862   else if (keys & UI_KEY_SW_5_PRESSED)
??uiActionProcessConfigureChannels_9:
        MOV     A,R2
        ANL     A,#0x4
        JZ      ??uiActionProcessConfigureChannels_11
//  863   {
//  864     if (uiCurrentState == UI_STATE_SET_PRI_CHANEL_MASK_1)
        MOV     DPTR,#uiCurrentState
        MOVX    A,@DPTR
        XRL     A,#0xf
        JNZ     ??uiActionProcessConfigureChannels_12
        INC     DPTR
        MOVX    A,@DPTR
??uiActionProcessConfigureChannels_12:
        MOV     DPTR,#uiCurrentState
        JNZ     ??uiActionProcessConfigureChannels_13
//  865     {
//  866       uiCurrentState = UI_STATE_SET_PRI_CHANEL_MASK_0;
        MOV     A,#0xb
        SJMP    ??uiActionProcessConfigureChannels_14
//  867     }
//  868     else
//  869     {
//  870       uiCurrentState = UI_STATE_SET_SEC_CHANEL_MASK_0;
??uiActionProcessConfigureChannels_13:
        MOV     A,#0xc
//  871     }
//  872     
//  873     uiLcdCursorLine = 0xFF;
//  874   }
??uiActionProcessConfigureChannels_14:
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_0:
        MOVX    @DPTR,A
//  875 }
??uiActionProcessConfigureChannels_11:
          CFI EndBlock cfiBlock16
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock17
//  876 
//  877 /*********************************************************************
//  878  * @fn          uiActionProcessConfigurePanId
//  879  *
//  880  * @brief       State-machine action for configuring the PAN ID
//  881  *
//  882  * @param       keys - the keypress code that triggered the call to this function
//  883  *
//  884  * @return      none
//  885  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  886 static void uiActionProcessConfigurePanId(uint16 keys)
uiActionProcessConfigurePanId:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function uiActionProcessConfigurePanId
        CODE
//  887 {
        FUNCALL uiActionProcessConfigurePanId, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uiActionProcessConfigurePanId, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  888   uint8 shift;
//  889   uint8 digit;
//  890   
//  891   uiLcdCursorLine = 0;
        MOV     DPTR,#uiLcdCursorLine
        CLR     A
        MOVX    @DPTR,A
//  892   uiLcdCursorState = 0;
        MOV     DPTR,#uiLcdCursorState
        MOVX    @DPTR,A
//  893   
//  894   if (keys & UI_KEY_SW_5_RELEASED)
        MOV     A,R3
        ANL     A,#0x4
        JZ      ??uiActionProcessConfigurePanId_0
//  895   {
//  896     uiLcdCursorCol = 6;
        MOV     DPTR,#uiLcdCursorCol
        MOV     A,#0x6
        MOVX    @DPTR,A
//  897   }
//  898 
//  899   if ((keys & UI_KEY_SW_1_PRESSED) || (keys & UI_KEY_SW_3_PRESSED))
??uiActionProcessConfigurePanId_0:
        MOV     A,R2
        ANL     A,#0x11
        JZ      ??uiActionProcessConfigurePanId_1
//  900   {
//  901     shift = 4 * (9 - uiLcdCursorCol);
        MOV     DPTR,#uiLcdCursorCol
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x9
        CLR     C
        SUBB    A,R0
        RLC     A
        RLC     A
        ANL     A,#0xfc
        MOV     R4,A
//  902     digit = (zgConfigPANID >> shift) & 0xF;
        MOV     DPTR,#zgConfigPANID
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_95:
        MOV     ?V1,A
        MOV     A,R4
        MOV     R0,#?V0
        LCALL   ?US_SHR
        MOV     A,?V0
        ANL     A,#0xf
        MOV     R1,A
//  903     if (keys & UI_KEY_SW_1_PRESSED)
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        JNC     ??uiActionProcessConfigurePanId_2
//  904     {
//  905       if (digit < 15)
        MOV     A,R1
        CLR     C
        SUBB    A,#0xf
        JNC     ??uiActionProcessConfigurePanId_3
//  906       {
//  907         digit++;
        INC     R1
        SJMP    ??uiActionProcessConfigurePanId_4
//  908       }
//  909       else
//  910       {
//  911         digit = 0;
??uiActionProcessConfigurePanId_3:
        MOV     R1,#0x0
        SJMP    ??uiActionProcessConfigurePanId_4
//  912       }
//  913     }
//  914     else if (keys & UI_KEY_SW_3_PRESSED)
??uiActionProcessConfigurePanId_2:
        ANL     A,#0x10
        JZ      ??uiActionProcessConfigurePanId_4
//  915     {
//  916       if (digit > 0)
        MOV     A,R1
        JZ      ??uiActionProcessConfigurePanId_5
//  917       {
//  918         digit--;
        DEC     R1
        SJMP    ??uiActionProcessConfigurePanId_4
//  919       }
//  920       else
//  921       {
//  922         digit = 15;
??uiActionProcessConfigurePanId_5:
        MOV     R1,#0xf
//  923       }
//  924     }
//  925 
//  926     zgConfigPANID &= ~((uint32)0xF << shift);
//  927     zgConfigPANID |= (uint32)digit << shift;
??uiActionProcessConfigurePanId_4:
        MOV     ?V0,#0xf
        MOV     ?V1,#0x0
        MOV     ?V2,#0x0
        MOV     ?V3,#0x0
        MOV     A,R4
        MOV     R0,#?V0
        LCALL   ?L_SHL
        MOV     A,?V0
        CPL     A
        MOV     R2,A
        MOV     A,?V1
        CPL     A
        MOV     R3,A
        MOV     DPTR,#zgConfigPANID
        MOVX    A,@DPTR
        ANL     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,R3
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     A,R4
        MOV     R0,#?V0
        LCALL   ?L_SHL
        MOV     DPTR,#zgConfigPANID
        MOVX    A,@DPTR
        ORL     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,?V1
        MOVX    @DPTR,A
//  928     uiLcdCursorState = 1;
        MOV     DPTR,#uiLcdCursorState
        MOV     A,#0x1
        SJMP    ??CrossCallReturnLabel_1
//  929   }
//  930   else if (keys & UI_KEY_SW_2_PRESSED)
??uiActionProcessConfigurePanId_1:
        MOV     A,R2
        ANL     A,#0x2
        JZ      ??uiActionProcessConfigurePanId_6
//  931   {
//  932     if (uiLcdCursorCol < 9)
        MOV     DPTR,#uiLcdCursorCol
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x9
        JNC     ??uiActionProcessConfigurePanId_7
//  933     {
//  934       uiLcdCursorCol++;
        MOVX    A,@DPTR
        INC     A
        SJMP    ??CrossCallReturnLabel_1
//  935     }
//  936   }
//  937   else if (keys & UI_KEY_SW_4_PRESSED)
??uiActionProcessConfigurePanId_6:
        MOV     A,R2
        ANL     A,#0x8
        JZ      ??uiActionProcessConfigurePanId_8
//  938   {
//  939     if (uiLcdCursorCol > 6)
        MOV     DPTR,#uiLcdCursorCol
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x7
        JC      ??uiActionProcessConfigurePanId_7
//  940     {
//  941       uiLcdCursorCol--;
        MOVX    A,@DPTR
        DEC     A
        SJMP    ??CrossCallReturnLabel_1
//  942     }
//  943   }
//  944   else if (keys & UI_KEY_SW_5_PRESSED)
??uiActionProcessConfigurePanId_8:
        MOV     A,R2
        ANL     A,#0x4
        JZ      ??uiActionProcessConfigurePanId_7
//  945   {
//  946     osal_nv_write(ZCD_NV_PANID, 0, osal_nv_item_len( ZCD_NV_PANID ), &zgConfigPANID); //todo: check and display result of osal_nv_write()
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R2,#-0x7d
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV     ?V0,R2
        MOV     ?V1,R3
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V2,#zgConfigPANID & 0xff
        MOV     ?V3,#(zgConfigPANID >> 8) & 0xff
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7d
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  947 
//  948     uiCurrentState = UI_STATE_SET_PAN_ID_0;
        MOV     DPTR,#uiCurrentState
        MOV     A,#0xd
        LCALL   ?Subroutine4 & 0xFFFF
//  949     
//  950     uiLcdCursorLine = 0xFF;
//  951   }
??CrossCallReturnLabel_1:
        MOVX    @DPTR,A
//  952 }
??uiActionProcessConfigurePanId_7:
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond19 Using cfiCommon0
          CFI Function uiActionProcessConfigureChannels
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function uiActionProcessConfigurePanId
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function uiActionProcessPrepareInstallCode
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        MOV     DPTR,#uiLcdCursorLine
        MOV     A,#-0x1
        RET
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22
//  953 
//  954 /*********************************************************************
//  955  * @fn          uiActionProcessPrepareInstallCode
//  956  *
//  957  * @brief       State-machine action for editing the install-code and the install-code address
//  958  *
//  959  * @param       keys - the keypress code that triggered the call to this function
//  960  *
//  961  * @return      none
//  962  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  963 static void uiActionProcessPrepareInstallCode(uint16 keys)
uiActionProcessPrepareInstallCode:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function uiActionProcessPrepareInstallCode
        CODE
//  964 {
        FUNCALL uiActionProcessPrepareInstallCode, bdb_GenerateInstallCodeCRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uiActionProcessPrepareInstallCode, bdb_GenerateInstallCodeCRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  965   static uint8 * pCurrentModifiedField;
//  966   static uint8 CurrentModifiedFieldLen;
//  967   static bool CurrentModifiedFieldIsBigEndian;
//  968   
//  969   static uint8 index;
//  970 
//  971   uint8 shift;
//  972   uint8 digit;
//  973   uint8 bufIndex;
//  974   uint16 crc;
//  975 
//  976   uiLcdCursorState = 0;
        MOV     DPTR,#uiLcdCursorState
        CLR     A
        MOVX    @DPTR,A
//  977   
//  978   if (keys & UI_KEY_SW_5_RELEASED)
        MOV     A,R7
        ANL     A,#0x4
        JZ      ??uiActionProcessPrepareInstallCode_0
//  979   {
//  980     index = 0;
        MOV     DPTR,#??index
        CLR     A
        MOVX    @DPTR,A
//  981     
//  982 #if (ZG_BUILD_COORDINATOR_TYPE)
//  983     if (uiCurrentState == UI_STATE_SET_INST_CODE_ADDR_1)
//  984     {
//  985       pCurrentModifiedField = uiInstallCodeAddr;
//  986       CurrentModifiedFieldLen = sizeof(uiInstallCodeAddr);
//  987       CurrentModifiedFieldIsBigEndian = FALSE;
//  988     }
//  989     else
//  990 #endif
//  991     {
//  992       pCurrentModifiedField = uiInstallCode;
        MOV     DPTR,#??pCurrentModifiedField
        MOV     A,#uiInstallCode & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(uiInstallCode >> 8) & 0xff
        MOVX    @DPTR,A
//  993       CurrentModifiedFieldLen = INSTALL_CODE_LEN;
        MOV     DPTR,#??CurrentModifiedFieldLen
        MOV     A,#0x10
        MOVX    @DPTR,A
//  994       CurrentModifiedFieldIsBigEndian = TRUE;
        MOV     DPTR,#??CurrentModifiedFieldIsBigEndian
        MOV     A,#0x1
        MOVX    @DPTR,A
//  995 
//  996       crc = bdb_GenerateInstallCodeCRC(uiInstallCode);
        ; Setup parameters for call to function bdb_GenerateInstallCodeCRC
        MOV     R2,#uiInstallCode & 0xff
        MOV     R3,#(uiInstallCode >> 8) & 0xff
        LCALL   `??bdb_GenerateInstallCodeCRC::?relay`; Banked call to: bdb_GenerateInstallCodeCRC
//  997       uiInstallCode[INSTALL_CODE_LEN] = crc & 0xFF;
        MOV     A,R2
        MOV     DPTR,#uiInstallCode + 16
        MOVX    @DPTR,A
//  998       uiInstallCode[INSTALL_CODE_LEN + 1] = crc >> 8;
        MOV     A,R3
        INC     DPTR
        MOVX    @DPTR,A
//  999     }
// 1000   }
// 1001 
// 1002   if ((keys & UI_KEY_SW_1_PRESSED) || (keys & UI_KEY_SW_3_PRESSED))
??uiActionProcessPrepareInstallCode_0:
        MOV     DPTR,#??index
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R6
        ANL     A,#0x11
        MOV     R4,A
        JNZ     $+5
        LJMP    ??uiActionProcessPrepareInstallCode_1 & 0xFFFF
// 1003   {
// 1004     shift = 4 * ((CurrentModifiedFieldIsBigEndian ? index : (index + 1)) % 2);
        MOV     DPTR,#??CurrentModifiedFieldIsBigEndian
        MOVX    A,@DPTR
        JZ      ??uiActionProcessPrepareInstallCode_2
        MOV     A,R2
        MOV     R0,A
        MOV     R1,#0x0
        SJMP    ??uiActionProcessPrepareInstallCode_3
??uiActionProcessPrepareInstallCode_2:
        MOV     A,R2
        ADD     A,#0x1
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
??uiActionProcessPrepareInstallCode_3:
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R2
        RLC     A
        RLC     A
        ANL     A,#0xfc
        MOV     R2,A
// 1005     bufIndex = (CurrentModifiedFieldIsBigEndian ? (index / 2) : (CurrentModifiedFieldLen - 1 - (index / 2)));
        MOVX    A,@DPTR
        MOV     DPTR,#??index
        JZ      ??uiActionProcessPrepareInstallCode_4
        MOVX    A,@DPTR
        CLR     C
        RRC     A
        SJMP    ??uiActionProcessPrepareInstallCode_5
??uiActionProcessPrepareInstallCode_4:
        MOVX    A,@DPTR
        CLR     C
        RRC     A
        MOV     R0,A
        MOV     DPTR,#??CurrentModifiedFieldLen
        MOVX    A,@DPTR
        DEC     A
        CLR     C
        SUBB    A,R0
??uiActionProcessPrepareInstallCode_5:
        MOV     R0,A
// 1006     digit = (pCurrentModifiedField[bufIndex] >> shift) & 0xF;
        MOV     DPTR,#??pCurrentModifiedField
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_47:
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     ?V1,#0x0
        MOV     A,R2
        MOV     R0,#?V0
        LCALL   ?SS_SHR
        MOV     A,?V0
        ANL     A,#0xf
        MOV     R1,A
// 1007 
// 1008     if (keys & UI_KEY_SW_1_PRESSED)
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??uiActionProcessPrepareInstallCode_6
// 1009     {
// 1010       if (digit < 15)
        MOV     A,R1
        CLR     C
        SUBB    A,#0xf
        JNC     ??uiActionProcessPrepareInstallCode_7
// 1011       {
// 1012         digit++;
        INC     R1
        SJMP    ??uiActionProcessPrepareInstallCode_8
// 1013       }
// 1014       else
// 1015       {
// 1016         digit = 0;
??uiActionProcessPrepareInstallCode_7:
        MOV     R1,#0x0
        SJMP    ??uiActionProcessPrepareInstallCode_8
// 1017       }
// 1018     }
// 1019     else if (keys & UI_KEY_SW_3_PRESSED)
??uiActionProcessPrepareInstallCode_6:
        ANL     A,#0x10
        JZ      ??uiActionProcessPrepareInstallCode_8
// 1020     {
// 1021       if (digit > 0)
        MOV     A,R1
        JZ      ??uiActionProcessPrepareInstallCode_9
// 1022       {
// 1023         digit--;
        DEC     R1
        SJMP    ??uiActionProcessPrepareInstallCode_8
// 1024       }
// 1025       else
// 1026       {
// 1027         digit = 15;
??uiActionProcessPrepareInstallCode_9:
        MOV     R1,#0xf
// 1028       }
// 1029     }
// 1030     
// 1031     pCurrentModifiedField[bufIndex] &= ~((uint32)0xF << shift);
??uiActionProcessPrepareInstallCode_8:
        MOV     ?V0,#0xf
        MOV     ?V1,#0x0
        MOV     ?V2,#0x0
        MOV     ?V3,#0x0
        MOV     A,R2
        MOV     R0,#?V0
        LCALL   ?L_SHL
        MOV     A,?V0
        CPL     A
        MOV     R0,A
        MOVX    A,@DPTR
        ANL     A,R0
        LCALL   ?Subroutine6 & 0xFFFF
// 1032     pCurrentModifiedField[bufIndex] |= (uint32)digit << shift;
??CrossCallReturnLabel_7:
        MOV     A,R2
        MOV     R0,#?V0
        LCALL   ?L_SHL
        MOVX    A,@DPTR
        ORL     A,?V0
        MOVX    @DPTR,A
// 1033     uiLcdCursorState = 1;
        MOV     DPTR,#uiLcdCursorState
        MOV     A,#0x1
        SJMP    ??uiActionProcessPrepareInstallCode_10
// 1034   }
// 1035   else if (keys & UI_KEY_SW_2_PRESSED)
??uiActionProcessPrepareInstallCode_1:
        MOV     A,R6
        ANL     A,#0x2
        JZ      ??uiActionProcessPrepareInstallCode_11
// 1036   {
// 1037     if (index < CurrentModifiedFieldLen * 2 - 1)
        MOV     DPTR,#??CurrentModifiedFieldLen
        MOVX    A,@DPTR
        ADD     A,0xE0 /* A   */
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
        CLR     C
        MOV     A,R2
        SUBB    A,R0
        CLR     A
        SUBB    A,R1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        MOV     DPTR,#??index
        JNC     ??uiActionProcessPrepareInstallCode_12
// 1038     {
// 1039       index++;
        MOVX    A,@DPTR
        INC     A
        SJMP    ??uiActionProcessPrepareInstallCode_10
// 1040     }
// 1041     else
// 1042     {
// 1043       index = 0;
??uiActionProcessPrepareInstallCode_12:
        CLR     A
        SJMP    ??uiActionProcessPrepareInstallCode_10
// 1044     }
// 1045   }
// 1046   else if (keys & UI_KEY_SW_4_PRESSED)
??uiActionProcessPrepareInstallCode_11:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??uiActionProcessPrepareInstallCode_13
// 1047   {
// 1048     if (index > 0)
        MOVX    A,@DPTR
        JZ      ??uiActionProcessPrepareInstallCode_14
// 1049     {
// 1050       index --;
        DEC     A
        SJMP    ??uiActionProcessPrepareInstallCode_10
// 1051     }
// 1052     else
// 1053     {
// 1054       index = (CurrentModifiedFieldLen * 2 - 1);
??uiActionProcessPrepareInstallCode_14:
        MOV     DPTR,#??CurrentModifiedFieldLen
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        DEC     A
        MOV     DPTR,#??index
??uiActionProcessPrepareInstallCode_10:
        MOVX    @DPTR,A
// 1055     }
// 1056   }
// 1057   
// 1058   uiLcdCursorLine = index / LCD_LINE_LENGTH;
??uiActionProcessPrepareInstallCode_13:
        MOV     DPTR,#??index
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        MOV     DPTR,#uiLcdCursorLine
        MOVX    @DPTR,A
// 1059   uiLcdCursorCol = index % LCD_LINE_LENGTH;
        MOV     DPTR,#??index
        MOVX    A,@DPTR
        ANL     A,#0xf
        MOV     DPTR,#uiLcdCursorCol
        MOVX    @DPTR,A
// 1060 
// 1061   if ((uiCurrentState == UI_STATE_SET_INST_CODE_1) && ((keys & UI_KEY_SW_1_PRESSED) || (keys & UI_KEY_SW_3_PRESSED)))
        MOV     DPTR,#uiCurrentState
        MOVX    A,@DPTR
        XRL     A,#0x15
        JNZ     ??uiActionProcessPrepareInstallCode_15
        INC     DPTR
        MOVX    A,@DPTR
??uiActionProcessPrepareInstallCode_15:
        JNZ     ??uiActionProcessPrepareInstallCode_16
        MOV     A,R4
        JZ      ??uiActionProcessPrepareInstallCode_16
// 1062   {
// 1063     crc = bdb_GenerateInstallCodeCRC(uiInstallCode);
        ; Setup parameters for call to function bdb_GenerateInstallCodeCRC
        MOV     R2,#uiInstallCode & 0xff
        MOV     R3,#(uiInstallCode >> 8) & 0xff
        LCALL   `??bdb_GenerateInstallCodeCRC::?relay`; Banked call to: bdb_GenerateInstallCodeCRC
// 1064     uiInstallCode[INSTALL_CODE_LEN] = crc & 0xFF;
        MOV     A,R2
        MOV     DPTR,#uiInstallCode + 16
        MOVX    @DPTR,A
// 1065     uiInstallCode[INSTALL_CODE_LEN + 1] = crc >> 8;
        MOV     A,R3
        INC     DPTR
        MOVX    @DPTR,A
// 1066   }
// 1067 
// 1068   if (keys & UI_KEY_SW_5_PRESSED)
??uiActionProcessPrepareInstallCode_16:
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??uiActionProcessPrepareInstallCode_17
// 1069   {
// 1070 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1071     if (uiCurrentState == UI_STATE_SET_INST_CODE_ADDR_1)
// 1072     {
// 1073       uiCurrentState = UI_STATE_SET_INST_CODE_ADDR_0;
// 1074     }
// 1075     else
// 1076 #endif
// 1077     {
// 1078       uiCurrentState = UI_STATE_SET_INST_CODE_0;
        MOV     DPTR,#uiCurrentState
        MOV     A,#0x12
        LCALL   ?Subroutine4 & 0xFFFF
// 1079     }
// 1080     
// 1081     uiLcdCursorLine = 0xFF;
// 1082   }
??CrossCallReturnLabel_2:
        MOVX    @DPTR,A
// 1083 }
??uiActionProcessPrepareInstallCode_17:
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock23

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond24 Using cfiCommon0
          CFI Function uiUintToString
          CFI Conditional ??CrossCallReturnLabel_46
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function uiActionProcessPrepareInstallCode
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker26 Using cfiCommon1
          CFI (cfiPicker26) NoFunction
          CFI (cfiPicker26) Picker
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        RET
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiPicker26

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond27 Using cfiCommon0
          CFI Function uiActionProcessConfigurePanId
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function uiActionProcessPrepareInstallCode
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker29 Using cfiCommon1
          CFI (cfiPicker29) NoFunction
          CFI (cfiPicker29) Picker
        MOVX    @DPTR,A
        MOV     ?V0,R1
        CLR     A
        MOV     ?V1,A
        MOV     ?V2,A
        MOV     ?V3,A
        RET
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiPicker29

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??pCurrentModifiedField:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??CurrentModifiedFieldLen:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??CurrentModifiedFieldIsBigEndian:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??index:
        DS 1
        REQUIRE __INIT_XDATA_Z
// 1084 
// 1085 /*********************************************************************
// 1086  * @fn          uiActionConfigureEnables
// 1087  *
// 1088  * @brief       State-machine action for toggling various configurations on and off
// 1089  *
// 1090  * @param       keys - the keypress code that triggered the call to this function
// 1091  *
// 1092  * @return      none
// 1093  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1094 static void uiActionConfigureEnables(uint16 keys)
uiActionConfigureEnables:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function uiActionConfigureEnables
        CODE
// 1095 {
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1096 #if defined ( BDB_TL_TARGET )
// 1097   static uint32 TouchlinkTimeoutIncements = TOUCHLINK_TIMEOUT_INCREMENTS_INITIAL;
// 1098 #endif
// 1099 
// 1100   switch (uiCurrentState)
        MOV     DPTR,#uiCurrentState
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_40:
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for uiActionConfigureEnables>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        8
        DATA
        DATA8
        DATA
        DATA8
        DB        2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionConfigureEnables_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionConfigureEnables_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionConfigureEnables_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??uiActionConfigureEnables_3
        CODE
// 1101   {
// 1102 #ifdef BDB_TL_TARGET
// 1103     case UI_STATE_TOUCHLINK_TARGET:
// 1104       if (keys & UI_KEY_SW_1_PRESSED)
// 1105       {
// 1106         if (uiTouchlinkTargetTimeout < TOUCHLINK_TARGET_PERPETUAL - TouchlinkTimeoutIncements)
// 1107         {
// 1108           uiTouchlinkTargetTimeout += TouchlinkTimeoutIncements;
// 1109         }
// 1110         else
// 1111         {
// 1112           uiTouchlinkTargetTimeout = TOUCHLINK_TARGET_PERPETUAL;
// 1113         }
// 1114       }
// 1115       else if ((keys & UI_KEY_SW_3_PRESSED) && (uiTouchlinkTargetTimeout >= TouchlinkTimeoutIncements))
// 1116       {
// 1117         if ((uiTouchlinkTargetTimeout % TouchlinkTimeoutIncements) != 0)
// 1118         {
// 1119           uiTouchlinkTargetTimeout -= uiTouchlinkTargetTimeout % TouchlinkTimeoutIncements;
// 1120         }
// 1121         else
// 1122         {
// 1123           uiTouchlinkTargetTimeout -= TouchlinkTimeoutIncements;
// 1124         }
// 1125       }
// 1126 
// 1127       if ((keys & (UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED)) && ((uiTouchlinkTargetTimeout > 0) && (uiTouchlinkTargetTimeout < TOUCHLINK_TARGET_PERPETUAL)))
// 1128       {
// 1129         osal_start_timerEx(uiAppTaskId, uiKeyAutoRepeatEvent, uiAutoKeyRepeatDelay);
// 1130         uiAutoKeyRepeatDelay = 100;
// 1131         if (TouchlinkTimeoutIncements < TOUCHLINK_TIMEOUT_INCREMENTS_MAX)
// 1132         {
// 1133           uiAutoKeyRepeatCount++;
// 1134           if (uiAutoKeyRepeatCount == 3)
// 1135           {
// 1136             uiAutoKeyRepeatCount = 0;
// 1137             TouchlinkTimeoutIncements *= 2;
// 1138           }
// 1139         }
// 1140       }
// 1141       else
// 1142       {
// 1143         osal_stop_timerEx(uiAppTaskId, uiKeyAutoRepeatEvent);
// 1144         uiAutoKeyRepeatDelay = 500;
// 1145         uiAutoKeyRepeatCount = 0;
// 1146         TouchlinkTimeoutIncements = 1000;
// 1147       }
// 1148       break;
// 1149     case UI_STATE_TOUCHLINK_STEALING:
// 1150       bdb_TouchlinkSetAllowStealing( ! bdb_TouchlinkGetAllowStealing() );
// 1151       break;
// 1152 #endif
// 1153 #ifdef BDB_TL_INITIATOR
// 1154     case UI_STATE_TOUCHLINK_INITIATOR:
// 1155       uiSelectedBdbComissioningModes ^= BDB_COMMISSIONING_MODE_INITIATOR_TL;
// 1156       break;
// 1157 #endif
// 1158     case UI_STATE_NETWORK_FORMATION:
// 1159       uiSelectedBdbComissioningModes ^= BDB_COMMISSIONING_MODE_NWK_FORMATION;
??uiActionConfigureEnables_1:
        MOV     DPTR,#uiSelectedBdbComissioningModes
        MOVX    A,@DPTR
        XRL     A,#0x4
        SJMP    ??uiActionConfigureEnables_4
// 1160       break;
// 1161     case UI_STATE_NETWORK_STEERING:
// 1162       uiSelectedBdbComissioningModes ^= BDB_COMMISSIONING_MODE_NWK_STEERING;
??uiActionConfigureEnables_2:
        MOV     DPTR,#uiSelectedBdbComissioningModes
        MOVX    A,@DPTR
        XRL     A,#0x2
        SJMP    ??uiActionConfigureEnables_4
// 1163       break;
// 1164     case UI_STATE_FINDING_AND_BINDING:
// 1165       uiSelectedBdbComissioningModes ^= BDB_COMMISSIONING_MODE_FINDING_BINDING;
??uiActionConfigureEnables_3:
        MOV     DPTR,#uiSelectedBdbComissioningModes
        MOVX    A,@DPTR
        XRL     A,#0x8
??uiActionConfigureEnables_4:
        MOVX    @DPTR,A
// 1166       break;
// 1167   }
// 1168 }
??uiActionConfigureEnables_0:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock30
// 1169 
// 1170 /*********************************************************************
// 1171  * @fn          uiActionResetToFactoryNew
// 1172  *
// 1173  * @brief       State-machine action for resetting the device to factory new
// 1174  *
// 1175  * @param       keys - the keypress code that triggered the call to this function
// 1176  *
// 1177  * @return      none
// 1178  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1179 static void uiActionResetToFactoryNew(uint16 keys)
uiActionResetToFactoryNew:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function uiActionResetToFactoryNew
        CODE
// 1180 {
        FUNCALL uiActionResetToFactoryNew, bdb_resetLocalAction
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1181   uiResetInitiated = TRUE;
        MOV     DPTR,#uiResetInitiated
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1182   bdb_resetLocalAction();
        ; Setup parameters for call to function bdb_resetLocalAction
        LCALL   `??bdb_resetLocalAction::?relay`; Banked call to: bdb_resetLocalAction
// 1183 }
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock31
// 1184   
// 1185 /*********************************************************************
// 1186  * @fn          UI_MainStateMachine
// 1187  *
// 1188  * @brief       This is the main UI state machine engine.
// 1189  *              This function should be called from the application's key handler, and also from its event-loop
// 1190  *              for processing the key-repress event.
// 1191  *
// 1192  * @param       current_keys - a bitmask of the keys that are currently pressed, or 0xFFFF when this function
// 1193  *              is invoked to handle key auto-repeat.
// 1194  *
// 1195  * @return      none
// 1196  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1197 void UI_MainStateMachine( uint16 current_keys ) //argument is uint16 to allow 8 bits for the keys (for future use), and another unique value to mark a re-press of the previous keys.
UI_MainStateMachine:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function UI_MainStateMachine
        CODE
// 1198 {
        FUNCALL UI_MainStateMachine, UI_UpdateLcd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1199   static byte PrevKeys = 0; //holds the keys that were pressed during the previous time this function was called. (Does not hold the keys that were released.)
// 1200 
// 1201   uint8 SavedLcdCursorLine = uiLcdCursorLine;
        MOV     DPTR,#uiLcdCursorLine
        MOVX    A,@DPTR
        MOV     ?V0,A
// 1202   bool LcdUpdateIsRequired = FALSE;
// 1203   uint16 keys; //will hold the bitmask of the currently pressed keys at the lower 8 bits, and the keys that have just been released at the higher 8 bits.
// 1204 
// 1205   if (uiResetInitiated)
        MOV     DPTR,#uiResetInitiated
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??UI_MainStateMachine_0 & 0xFFFF
// 1206   {
// 1207     return;
// 1208   }
// 1209   
// 1210   if (current_keys == UI_KEY_AUTO_PRESSED)
        MOV     DPTR,#??PrevKeys
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#-0x1
        XRL     A,R2
        JNZ     ??UI_MainStateMachine_1
        MOV     A,#-0x1
        XRL     A,R3
??UI_MainStateMachine_1:
        JNZ     ??UI_MainStateMachine_2
// 1211   {
// 1212     keys = PrevKeys;
        MOV     A,R0
        MOV     R6,A
        MOV     R7,#0x0
        SJMP    ??UI_MainStateMachine_3
// 1213   }
// 1214   else
// 1215   {
// 1216     keys = (current_keys | (((PrevKeys ^ current_keys) & PrevKeys) << 8));
??UI_MainStateMachine_2:
        MOV     A,R0
        XRL     A,R2
        ANL     A,R0
        MOV     R1,A
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        ORL     A,R1
        MOV     R7,A
// 1217   }
// 1218   
// 1219   uiLcdCursorLine = 0xFF;
??UI_MainStateMachine_3:
        MOV     DPTR,#uiLcdCursorLine
        MOV     A,#-0x1
        MOVX    @DPTR,A
// 1220 
// 1221   if ((keys & UI_KEY_SW_2_PRESSED) && (uiStates[uiCurrentState].next_state != UI_STATE_UNCHANGED))
        MOV     DPTR,#uiCurrentState
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV     A,R0
        MOV     B,#0x6
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x6
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     DPTR,#uiStates
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R6
        ANL     A,#0x2
        JZ      ??UI_MainStateMachine_4
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#-0x1
        XRL     A,R2
        JZ      ??UI_MainStateMachine_4
// 1222   {
// 1223     if (uiStates[uiCurrentState].next_state == UI_STATE_DEFAULT_MOVE)
        MOV     A,#-0x2
        XRL     A,R2
        JNZ     ??UI_MainStateMachine_5
// 1224     {
// 1225       uiCurrentState++;
        MOV     DPTR,#uiCurrentState
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        SJMP    ??UI_MainStateMachine_6
// 1226     }
// 1227     else
// 1228     {
// 1229       uiCurrentState = uiStates[uiCurrentState].next_state;
// 1230     }
// 1231     
// 1232     LcdUpdateIsRequired = TRUE;
// 1233   }
// 1234   else if ((keys & UI_KEY_SW_4_PRESSED) && (uiStates[uiCurrentState].prev_state != UI_STATE_UNCHANGED))
??UI_MainStateMachine_4:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??UI_MainStateMachine_7
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#-0x1
        XRL     A,R2
        JZ      ??UI_MainStateMachine_7
// 1235   {
// 1236     if (uiStates[uiCurrentState].prev_state == UI_STATE_DEFAULT_MOVE)
        MOV     A,#-0x2
        XRL     A,R2
        JNZ     ??UI_MainStateMachine_5
// 1237     {
// 1238       uiCurrentState--;
        MOV     DPTR,#uiCurrentState
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        SJMP    ??UI_MainStateMachine_6
// 1239     }
// 1240     else
// 1241     {
// 1242       uiCurrentState = uiStates[uiCurrentState].prev_state;
??UI_MainStateMachine_5:
        MOV     A,R2
        MOV     DPTR,#uiCurrentState
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
??UI_MainStateMachine_6:
        MOVX    @DPTR,A
// 1243     }
// 1244     
// 1245     LcdUpdateIsRequired = TRUE;
// 1246   }
// 1247   else if ((keys & uiStates[uiCurrentState].keys_mask) && (uiStates[uiCurrentState].state_func != NULL))
// 1248   {
// 1249     uiStates[uiCurrentState].state_func(keys);
// 1250     
// 1251     LcdUpdateIsRequired = TRUE;
// 1252   }
// 1253 
// 1254   if (LcdUpdateIsRequired)
// 1255   {
// 1256     UI_UpdateLcd();
??UI_MainStateMachine_8:
        ; Setup parameters for call to function UI_UpdateLcd
        LCALL   `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
        SJMP    ??UI_MainStateMachine_9
// 1257   }
??UI_MainStateMachine_7:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,R6
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,R7
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JZ      ??UI_MainStateMachine_10
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??UI_MainStateMachine_10
        ; Setup parameters for indirect call
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ?CALL_IND
        SJMP    ??UI_MainStateMachine_8
// 1258   else
// 1259   {
// 1260     uiLcdCursorLine = SavedLcdCursorLine;
??UI_MainStateMachine_10:
        MOV     A,?V0
        MOV     DPTR,#uiLcdCursorLine
        MOVX    @DPTR,A
// 1261   }
// 1262 
// 1263   PrevKeys = keys & 0xFF; //only remember the keys that are currently pressed. Released keys are irrelevant. the 0xFF is not needed, since the target is uint8, but it is there just so it is clear that this assignment of uint16 into uint8 is intentional.
??UI_MainStateMachine_9:
        MOV     A,R6
        MOV     DPTR,#??PrevKeys
        MOVX    @DPTR,A
// 1264 }
??UI_MainStateMachine_0:
          CFI EndBlock cfiBlock32
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock33

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??PrevKeys:
        DS 1
        REQUIRE __INIT_XDATA_Z
// 1265 
// 1266 /*********************************************************************
// 1267  * @fn          UI_UpdateComissioningStatus
// 1268  *
// 1269  * @brief       Update the comissioning status to be displayed when the respective menu-screen is selected.
// 1270  *              This function should be called from the application, from within the function registered to
// 1271  *              be notified about these events.
// 1272  *
// 1273  * @param       bdbCommissioningModeMsg - comissioning mode and state information
// 1274  *
// 1275  * @return      none
// 1276  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1277 void UI_UpdateComissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
UI_UpdateComissioningStatus:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI Function UI_UpdateComissioningStatus
        CODE
// 1278 {
        FUNCALL UI_UpdateComissioningStatus, UI_UpdateLcd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1279   uiCommissioningIsInitializing = FALSE;
        MOV     DPTR,#uiCommissioningIsInitializing
        CLR     A
        MOVX    @DPTR,A
// 1280   
// 1281   switch(bdbCommissioningModeMsg->bdbCommissioningMode)
        MOV     R0,#`?<Constant "--">` & 0xff
        MOV     R1,#(`?<Constant "--">` >> 8) & 0xff
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??UI_UpdateComissioningStatus_0
        DEC     A
        JZ      ??UI_UpdateComissioningStatus_1
        DEC     A
        JZ      ??UI_UpdateComissioningStatus_2
        DEC     A
        JZ      ??UI_UpdateComissioningStatus_3
        ADD     A,#-0x2
        JZ      ??UI_UpdateComissioningStatus_4
        SJMP    ??UI_UpdateComissioningStatus_5
// 1282   {
// 1283     case BDB_COMMISSIONING_FORMATION:
// 1284       uiCommissioningStateStr = "NF";
??UI_UpdateComissioningStatus_2:
        MOV     DPTR,#uiCommissioningStateStr
        MOV     A,#`?<Constant "NF">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "NF">` >> 8) & 0xff
        LCALL   ?Subroutine9 & 0xFFFF
// 1285       if ((bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS) && (uiCommissioningNetworkConnrctionStr == NULL))
??CrossCallReturnLabel_12:
        JNZ     ??UI_UpdateComissioningStatus_5
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_73:
        MOV     A,R4
        ORL     A,R5
        JNZ     ??UI_UpdateComissioningStatus_6
// 1286       {
// 1287         uiCommissioningNetworkConnrctionStr = "FORM";
        MOV     DPTR,#uiCommissioningNetworkConnrctionStr
        MOV     A,#`?<Constant "FORM">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "FORM">` >> 8) & 0xff
        SJMP    ??UI_UpdateComissioningStatus_7
// 1288       }
// 1289       break;
// 1290     case BDB_COMMISSIONING_NWK_STEERING:
// 1291       uiCommissioningStateStr = "NS";
??UI_UpdateComissioningStatus_1:
        MOV     DPTR,#uiCommissioningStateStr
        MOV     A,#`?<Constant "NS">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "NS">` >> 8) & 0xff
        LCALL   ?Subroutine9 & 0xFFFF
// 1292       if ((bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS) && (uiCommissioningNetworkConnrctionStr == NULL))
??CrossCallReturnLabel_13:
        JNZ     ??UI_UpdateComissioningStatus_5
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_74:
        MOV     A,R4
        ORL     A,R5
        JNZ     ??UI_UpdateComissioningStatus_6
// 1293       {
// 1294         uiCommissioningNetworkConnrctionStr = "JOIN";
        MOV     DPTR,#uiCommissioningNetworkConnrctionStr
        MOV     A,#`?<Constant "JOIN">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "JOIN">` >> 8) & 0xff
        SJMP    ??UI_UpdateComissioningStatus_7
// 1295       }
// 1296       break;
// 1297     case BDB_COMMISSIONING_FINDING_BINDING:
// 1298       uiCommissioningStateStr = "FB";
??UI_UpdateComissioningStatus_3:
        MOV     DPTR,#uiCommissioningStateStr
        MOV     A,#`?<Constant "FB">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "FB">` >> 8) & 0xff
        SJMP    ??UI_UpdateComissioningStatus_7
// 1299       break;
// 1300     case BDB_COMMISSIONING_INITIALIZATION:
// 1301       uiCommissioningStateStr = "IN";
??UI_UpdateComissioningStatus_0:
        MOV     DPTR,#uiCommissioningStateStr
        MOV     A,#`?<Constant "IN">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "IN">` >> 8) & 0xff
        SJMP    ??UI_UpdateComissioningStatus_7
// 1302       break;
// 1303 #if ZG_BUILD_ENDDEVICE_TYPE    
// 1304     case BDB_COMMISSIONING_PARENT_LOST:
// 1305       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
??UI_UpdateComissioningStatus_4:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,#0xd
        MOV     DPTR,#uiCommissioningStateStr
        JNZ     ??UI_UpdateComissioningStatus_8
// 1306       {
// 1307         uiCommissioningStateStr = "--";
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        SJMP    ??UI_UpdateComissioningStatus_7
// 1308       }
// 1309       else
// 1310       {
// 1311         uiCommissioningStateStr = "PL";
??UI_UpdateComissioningStatus_8:
        MOV     A,#`?<Constant "PL">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "PL">` >> 8) & 0xff
??UI_UpdateComissioningStatus_7:
        MOVX    @DPTR,A
// 1312       }
// 1313       break;
// 1314 #endif
// 1315 #if BDB_TOUCHLINK_CAPABILITY_ENABLED
// 1316     case BDB_COMMISSIONING_TOUCHLINK:
// 1317       uiCommissioningStateStr = "TL";
// 1318       if ((bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS) && (uiCommissioningNetworkConnrctionStr == NULL))
// 1319       {
// 1320         uiCommissioningNetworkConnrctionStr = "TCHL";
// 1321       }
// 1322       break;
// 1323 #endif
// 1324   }
// 1325 
// 1326   if ((bdbCommissioningModeMsg->bdbCommissioningStatus != BDB_COMMISSIONING_IN_PROGRESS) && (bdbCommissioningModeMsg->bdbRemainingCommissioningModes == 0))
??UI_UpdateComissioningStatus_5:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??UI_UpdateComissioningStatus_9
??UI_UpdateComissioningStatus_6:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??UI_UpdateComissioningStatus_9
// 1327   {
// 1328     uiCommissioningStateStr = "--";
        MOV     DPTR,#uiCommissioningStateStr
        LCALL   ??Subroutine37_0 & 0xFFFF
// 1329 
// 1330     uiComissioningIsActive = FALSE;
??CrossCallReturnLabel_111:
        MOV     DPTR,#uiComissioningIsActive
        CLR     A
        MOVX    @DPTR,A
// 1331   }
// 1332   
// 1333   UI_UpdateLcd();
??UI_UpdateComissioningStatus_9:
        ; Setup parameters for call to function UI_UpdateLcd
        LCALL   `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
// 1334 }
          CFI EndBlock cfiBlock34
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock35
// 1335 
// 1336 
// 1337 void HalLcd_HW_WriteChar(uint8 line, uint8 col, char text);
// 1338 
// 1339 
// 1340 /*********************************************************************
// 1341  * @fn          UI_UpdateLcd
// 1342  *
// 1343  * @brief       Update the LCD display.
// 1344  *              This function should be called by the application when handling the display-auto-refresh event, and
// 1345  *              also whenevet an action that may change the information being displayed is executed.
// 1346  *
// 1347  * @param       none
// 1348  *
// 1349  * @return      none
// 1350  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1351 void UI_UpdateLcd( void )
UI_UpdateLcd:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function UI_UpdateLcd
        CODE
// 1352 {
        FUNCALL UI_UpdateLcd, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, NLME_GetRemainingPermitJoiningDuration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiUintToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiUintToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, bdb_GetFBInitiatorStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiUintToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiUintToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 80, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 80, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiArrayToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 77, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiArrayToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 77, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiUintToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiArrayToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 77, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiArrayToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 77, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiArrayToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 77, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiCreateChannelMaskString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiCreateChannelMaskString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiCreateChannelMaskString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiCreateChannelMaskString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiUintToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiUintToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiUintToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiUintToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiUintToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiUintToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, uiUintToString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 80, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 80, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, HalLcd_HW_Clear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_UpdateLcd, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 58
        MOV     A,#-0x3a
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1353   char * line[3];
// 1354   char LineBuf[3][LCD_CC2538_PREFIX_COUNT + LCD_LINE_LENGTH + 1];
// 1355   uint8 i;
// 1356   uint8 *xad;
// 1357   bool LcdAutoRefreshRequired = FALSE;
        MOV     R6,#0x0
// 1358   uint8 FBRemainingTimeLeft;
// 1359   uint8 PermitJoinDuration;
// 1360   
// 1361   LineBuf[0][LCD_CC2538_PREFIX_COUNT] = 0;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1362   LineBuf[1][LCD_CC2538_PREFIX_COUNT] = 0;
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1363   LineBuf[2][LCD_CC2538_PREFIX_COUNT] = 0;
        MOV     A,#0x29
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1364   line[0] = LineBuf[0] + LCD_CC2538_PREFIX_COUNT;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP100_8
        LCALL   ?Subroutine8 & 0xFFFF
// 1365   line[1] = LineBuf[1] + LCD_CC2538_PREFIX_COUNT;
??CrossCallReturnLabel_118:
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine37_0 & 0xFFFF
// 1366   line[2] = LineBuf[2] + LCD_CC2538_PREFIX_COUNT;
??CrossCallReturnLabel_112:
        MOV     A,#0x29
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine37_0 & 0xFFFF
// 1367 
// 1368 #ifdef HAL_BOARD_CC2538
// 1369   for (i = 0; i < LCD_CC2538_PREFIX_COUNT; i++)
// 1370   {
// 1371     LineBuf[0][i] = ' ';
// 1372     LineBuf[1][i] = ' ';
// 1373     LineBuf[2][i] = ' ';
// 1374   }
// 1375 #endif
// 1376 
// 1377   osal_stop_timerEx(uiAppTaskId, uiLcdAutoUpdateEvent);
??CrossCallReturnLabel_113:
        ; Setup parameters for call to function osal_stop_timerEx
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 1378 
// 1379   if (uiStates == uiAppStatesMain)
        MOV     DPTR,#uiStates
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_56:
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??UI_UpdateLcd_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??UI_UpdateLcd_0:
        JNZ     ??UI_UpdateLcd_1
// 1380   {
// 1381     if (uiCurrentState == UI_STATE_BACK_FROM_APP_MENU)
        MOV     DPTR,#uiCurrentState
        LCALL   ??Subroutine34_0 & 0xFFFF
??CrossCallReturnLabel_76:
        JNZ     $+5
        LJMP    ??UI_UpdateLcd_2 & 0xFFFF
// 1382     {
// 1383       line[2] = "<     BACK     >";
// 1384     }
// 1385     else
// 1386     {
// 1387       uiAppUpdateLcd(uiCurrentState, line);
        ; Setup parameters for indirect call
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     DPTR,#uiCurrentState
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#uiAppUpdateLcd
        LCALL   ?Subroutine18 & 0xFFFF
// 1388     }
// 1389   }
??CrossCallReturnLabel_43:
        LCALL   ?CALL_IND
        LJMP    ??UI_UpdateLcd_3 & 0xFFFF
// 1390   else
// 1391   {
// 1392     switch (uiCurrentState)
??UI_UpdateLcd_1:
        MOV     R2,#`?<Constant "1234567890123456">` & 0xff
        MOV     R3,#(`?<Constant "1234567890123456">` >> 8) & 0xff
        MOV     ?V4,#`?<Constant "    0x          ">` & 0xff
        MOV     ?V5,#(`?<Constant "    0x          ">` >> 8) & 0xff
        MOV     ?V6,R6
        MOV     ?V0,#`?<Constant "    0xFFFF (any)">` & 0xff
        MOV     ?V1,#(`?<Constant "    0xFFFF (any)">` >> 8) & 0xff
        MOV     ?V2,R6
        MOV     DPTR,#uiCurrentState
        MOVX    A,@DPTR
        MOV     ?V8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V9,A
        MOV     R0,#?V8
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for UI_UpdateLcd>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA8
        DATA
        DATA8
        DB        21
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_4
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_5
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_6
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_7
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_8
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_9
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_10
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_11
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_12
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_13
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_14
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_15
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_17
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_18
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_19
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_20
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_21
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_22
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??UI_UpdateLcd_23
        CODE
// 1393     {
// 1394       case UI_STATE_FINDING_AND_BINDING:
// 1395         line[1] = uiSelectedBdbComissioningModes & BDB_COMMISSIONING_MODE_FINDING_BINDING ? "ENABLED" : "DISABLED";
??UI_UpdateLcd_14:
        MOV     DPTR,#uiSelectedBdbComissioningModes
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JNC     ??UI_UpdateLcd_24
        MOV     R0,#`?<Constant "ENABLED">` & 0xff
        MOV     R1,#(`?<Constant "ENABLED">` >> 8) & 0xff
        SJMP    ??UI_UpdateLcd_25
??UI_UpdateLcd_24:
        MOV     R0,#`?<Constant "DISABLED">` & 0xff
        MOV     R1,#(`?<Constant "DISABLED">` >> 8) & 0xff
??UI_UpdateLcd_25:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
// 1396         line[2] = "<FINDNG+BINDNG >";
??CrossCallReturnLabel_9:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`?<Constant "<FINDNG+BINDNG >">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "<FINDNG+BINDNG >">` >> 8) & 0xff
        LJMP    ??UI_UpdateLcd_26 & 0xFFFF
// 1397         break;
// 1398       case UI_STATE_BACK_FROM_CONFIGURE:
// 1399         line[2] = "<     BACK     >";
// 1400         break;
// 1401       case UI_STATE_BACK_FROM_INSTALL_CODE:
// 1402         line[2] = "<     BACK     >";
??UI_UpdateLcd_2:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`?<Constant "<     BACK     >">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "<     BACK     >">` >> 8) & 0xff
        LJMP    ??UI_UpdateLcd_26 & 0xFFFF
// 1403         break;
// 1404       case UI_STATE_NETWORK_FORMATION:
// 1405         line[1] = uiSelectedBdbComissioningModes & BDB_COMMISSIONING_MODE_NWK_FORMATION ? "ENABLED" : "DISABLED";
??UI_UpdateLcd_12:
        MOV     DPTR,#uiSelectedBdbComissioningModes
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.2
        JNC     ??UI_UpdateLcd_27
        MOV     R0,#`?<Constant "ENABLED">` & 0xff
        MOV     R1,#(`?<Constant "ENABLED">` >> 8) & 0xff
        SJMP    ??UI_UpdateLcd_28
??UI_UpdateLcd_27:
        MOV     R0,#`?<Constant "DISABLED">` & 0xff
        MOV     R1,#(`?<Constant "DISABLED">` >> 8) & 0xff
??UI_UpdateLcd_28:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
// 1406         line[2] = "<NWK FORMATION >";
??CrossCallReturnLabel_10:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`?<Constant "<NWK FORMATION >">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "<NWK FORMATION >">` >> 8) & 0xff
        LJMP    ??UI_UpdateLcd_26 & 0xFFFF
// 1407         break;
// 1408       case UI_STATE_NETWORK_STEERING:
// 1409         line[1] = uiSelectedBdbComissioningModes & BDB_COMMISSIONING_MODE_NWK_STEERING ? "ENABLED" : "DISABLED";
??UI_UpdateLcd_13:
        MOV     DPTR,#uiSelectedBdbComissioningModes
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??UI_UpdateLcd_29
        MOV     R0,#`?<Constant "ENABLED">` & 0xff
        MOV     R1,#(`?<Constant "ENABLED">` >> 8) & 0xff
        SJMP    ??UI_UpdateLcd_30
??UI_UpdateLcd_29:
        MOV     R0,#`?<Constant "DISABLED">` & 0xff
        MOV     R1,#(`?<Constant "DISABLED">` >> 8) & 0xff
??UI_UpdateLcd_30:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
// 1410         line[2] = "< NWK STEERING >";
??CrossCallReturnLabel_11:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`?<Constant "< NWK STEERING >">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "< NWK STEERING >">` >> 8) & 0xff
        LJMP    ??UI_UpdateLcd_26 & 0xFFFF
// 1411         break;
// 1412 #ifdef BDB_TL_TARGET
// 1413       case UI_STATE_TOGGLE_TL_TARGET:
// 1414         {
// 1415           uint32 temp_u32;
// 1416 
// 1417           temp_u32 = touchLinkTarget_GetTimer();
// 1418           if (temp_u32 == 0)
// 1419           {
// 1420             line[1] = "DISABLED        ";
// 1421           }
// 1422           else if (temp_u32 == TOUCHLINK_TARGET_PERPETUAL)
// 1423           {
// 1424             line[1] = "ENABLED FOREVER ";
// 1425           }
// 1426           else
// 1427           {
// 1428             uiConstStrCpy(line[1], "ENABLED (     s)");
// 1429             uiUintToString( temp_u32 / 1000 + ((temp_u32 % 1000) > 0 ? 1 : 0), line[1] + 9, 10, 5, FALSE, FALSE); //note: timeouts longer than 65535 seconds will not display correctly
// 1430             osal_start_timerEx(uiAppTaskId, uiLcdAutoUpdateEvent, uiLcdAutoUpdateInterval);
// 1431           }
// 1432         }
// 1433         line[2] = "< T.L. TARGET  >";
// 1434         break;
// 1435       case UI_STATE_TOUCHLINK_TARGET:
// 1436         if (uiTouchlinkTargetTimeout == 0)
// 1437         {
// 1438           line[1] = "DISABLED        ";
// 1439         }
// 1440         else if (uiTouchlinkTargetTimeout == TOUCHLINK_TARGET_PERPETUAL)
// 1441         {
// 1442           line[1] = "Enable (forever)";
// 1443         }
// 1444         else
// 1445         {
// 1446           uiConstStrCpy(line[1], "Enable For     s");
// 1447           uiUintToString( uiTouchlinkTargetTimeout / 1000 + ((uiTouchlinkTargetTimeout % 1000) > 0 ? 1 : 0), line[1] + 10, 10, 5, FALSE, FALSE); //note: timeouts longer than 65535 seconds will not display correctly
// 1448           line[1][16] = 0;
// 1449         }
// 1450         line[2] = "<T.L. TRGT TIME>";
// 1451         break;
// 1452       case UI_STATE_TOUCHLINK_STEALING:
// 1453         line[1] = bdb_TouchlinkGetAllowStealing() ? "ENABLED" : "DISABLED";
// 1454         line[2] = "<T.L. STEALING >";
// 1455         break;
// 1456 #endif
// 1457 #ifdef BDB_TL_INITIATOR
// 1458       case UI_STATE_TOUCHLINK_INITIATOR:
// 1459         line[1] = uiSelectedBdbComissioningModes & BDB_COMMISSIONING_MODE_INITIATOR_TL ? "ENABLED" : "DISABLED";
// 1460         line[2] = "<T.L. INITIATOR>";
// 1461         break;
// 1462 #endif
// 1463       case UI_STATE_CONFIGURE:
// 1464         line[2] = "<  CONFIGURE   >";
??UI_UpdateLcd_5:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`?<Constant "<  CONFIGURE   >">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "<  CONFIGURE   >">` >> 8) & 0xff
        LJMP    ??UI_UpdateLcd_26 & 0xFFFF
// 1465         break;
// 1466       case UI_STATE_RESET_TO_FACTORY_NEW:
// 1467         if (uiResetInitiated)
??UI_UpdateLcd_9:
        MOV     DPTR,#uiResetInitiated
        MOVX    A,@DPTR
        JZ      ??UI_UpdateLcd_31
// 1468         {
// 1469           line[0] = "Resetting,";
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#`?<Constant "Resetting,">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "Resetting,">` >> 8) & 0xff
        MOVX    @DPTR,A
// 1470           line[1] = "Please wait...";
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`?<Constant "Please wait...">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "Please wait...">` >> 8) & 0xff
        LJMP    ??UI_UpdateLcd_26 & 0xFFFF
// 1471         }
// 1472         else
// 1473         {
// 1474           line[2] = "< RESET TO FN  >";
??UI_UpdateLcd_31:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`?<Constant "< RESET TO FN  >">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "< RESET TO FN  >">` >> 8) & 0xff
        LJMP    ??UI_UpdateLcd_26 & 0xFFFF
// 1475         }
// 1476         break;
// 1477       case UI_STATE_DEFAULT:
// 1478         line[0] = uiAppTitleStr;
??UI_UpdateLcd_4:
        MOV     DPTR,#uiAppTitleStr
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_60:
        LCALL   ?Subroutine8 & 0xFFFF
// 1479         line[1] = "hold OK for help";
??CrossCallReturnLabel_119:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`?<Constant "hold OK for help">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "hold OK for help">` >> 8) & 0xff
        MOVX    @DPTR,A
// 1480         line[2] = "<     HELP     >";
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`?<Constant "<     HELP     >">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "<     HELP     >">` >> 8) & 0xff
        LJMP    ??UI_UpdateLcd_26 & 0xFFFF
// 1481         break;
// 1482       case UI_STATE_STATE_HELP:
// 1483 #ifdef HAL_BOARD_CC2538
// 1484         line[0] = "< > to move     ";
// 1485         line[1] = "^ v change value";
// 1486 #else
// 1487         line[0] = "\x1B \x1A to move     ";
??UI_UpdateLcd_10:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#`?<Constant "\\033 \\032 to move     ">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "\\033 \\032 to move     ">` >> 8) & 0xff
        MOVX    @DPTR,A
// 1488         line[1] = "\x18 \x19 change value";
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`?<Constant "\\030 \\031 change value">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "\\030 \\031 change value">` >> 8) & 0xff
        MOVX    @DPTR,A
// 1489 #endif        
// 1490         line[2] = "OK to execute   ";
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`?<Constant "OK to execute   ">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "OK to execute   ">` >> 8) & 0xff
        LJMP    ??UI_UpdateLcd_26 & 0xFFFF
// 1491         break;
// 1492       case UI_STATE_COMMISSION:
// 1493         if (uiCommissioningIsInitializing)
??UI_UpdateLcd_6:
        MOV     DPTR,#uiCommissioningIsInitializing
        MOVX    A,@DPTR
        JZ      ??UI_UpdateLcd_32
// 1494         {
// 1495           uiConstStrCpy(line[0], "Please wait...  ");
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,#`?<Constant "Please wait...  ">` & 0xff
        MOV     ?V1,#(`?<Constant "Please wait...  ">` >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
// 1496         }
??CrossCallReturnLabel_23:
        LJMP    ??UI_UpdateLcd_33 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 76)
// 1497         else
// 1498         {
// 1499           uiConstStrCpy(line[0], "xx              "); // TL/NF/NS/FB/-- TCHL/FORM/JOIN count/CLOSE
??UI_UpdateLcd_32:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,#`?<Constant "xx              ">` & 0xff
        MOV     ?V1,#(`?<Constant "xx              ">` >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1500 
// 1501           osal_memcpy(line[0] + 0, uiCommissioningStateStr, 2);
        ; Setup parameters for call to function osal_memcpy
        MOV     DPTR,#uiCommissioningStateStr
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1502 
// 1503           if ((uiNwkStateShadow != DEV_END_DEVICE) && (uiNwkStateShadow != DEV_ZB_COORD) && (uiNwkStateShadow != DEV_ROUTER))
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x3
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPTR,#uiNwkStateShadow
        MOVX    A,@DPTR
        XRL     A,#0x6
        JZ      ??UI_UpdateLcd_34
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??UI_UpdateLcd_34
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??UI_UpdateLcd_34
// 1504           {
// 1505             uiConstStrOver(line[0] + 3, "NotOnNwk");
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,#`?<Constant "NotOnNwk">` & 0xff
        MOV     ?V1,#(`?<Constant "NotOnNwk">` >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     R4,#0x8
        LJMP    ??UI_UpdateLcd_35 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 76)
// 1506           }
// 1507           else
// 1508           {
// 1509             if (uiCommissioningNetworkConnrctionStr != NULL)
??UI_UpdateLcd_34:
        MOV     DPTR,#uiCommissioningNetworkConnrctionStr
        LCALL   ??Subroutine34_0 & 0xFFFF
??CrossCallReturnLabel_77:
        JZ      ??UI_UpdateLcd_36
// 1510             {
// 1511               osal_memcpy(line[0] + 3, uiCommissioningNetworkConnrctionStr, 4);
        ; Setup parameters for call to function osal_memcpy
        MOV     DPTR,#uiCommissioningNetworkConnrctionStr
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_42:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     R4,#0x4
        MOV     R5,#0x0
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1512               line[0][7] = ' ';
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine31 & 0xFFFF
// 1513             }
??CrossCallReturnLabel_80:
        XCH     A,R0
        ADD     A,#0x7
        MOV     DPL,A
        CLR     A
        ADDC    A,R0
        MOV     DPH,A
        MOV     A,#0x20
        MOVX    @DPTR,A
// 1514 
// 1515             if ((uiNwkStateShadow == DEV_ZB_COORD) || (uiNwkStateShadow == DEV_ROUTER))
??UI_UpdateLcd_36:
        MOV     DPTR,#uiNwkStateShadow
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??UI_UpdateLcd_37
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??UI_UpdateLcd_38
// 1516             {
// 1517               PermitJoinDuration = NLME_GetRemainingPermitJoiningDuration();
??UI_UpdateLcd_37:
        ; Setup parameters for call to function NLME_GetRemainingPermitJoiningDuration
        LCALL   `??NLME_GetRemainingPermitJoiningDuration::?rela`; Banked call to: NLME_GetRemainingPermitJoiningDuration
        MOV     A,R1
        MOV     R7,A
// 1518               
// 1519               if (PermitJoinDuration > 0)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x8
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,R7
        JZ      ??UI_UpdateLcd_39
// 1520               {
// 1521                 uiConstStrOver(line[0] + 8, "Open");
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,#`?<Constant "Open">` & 0xff
        MOV     ?V1,#(`?<Constant "Open">` >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     R4,#0x4
        MOV     R5,#0x0
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1522                 uiUintToString(PermitJoinDuration, line[0] + 12, 10, 3, TRUE, FALSE);
        ; Setup parameters for call to function uiUintToString
        MOV     ?V0,R6
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV     ?V0,#0x3
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0xc
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_98:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV     R1,#0xa
        MOV     A,R7
        MOV     R2,A
        CLR     A
        MOV     R3,A
        MOV     R4,A
        MOV     R5,A
        LCALL   `??uiUintToString::?relay`; Banked call to: uiUintToString
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1523                 LcdAutoRefreshRequired = TRUE;
        MOV     R6,#0x1
        SJMP    ??UI_UpdateLcd_38
// 1524               }
// 1525               else
// 1526               {
// 1527                 uiConstStrOver(line[0] + 8, "CLOSED");
??UI_UpdateLcd_39:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,#`?<Constant "CLOSED">` & 0xff
        MOV     ?V1,#(`?<Constant "CLOSED">` >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     R4,#0x6
??UI_UpdateLcd_35:
        MOV     R5,#0x0
??UI_UpdateLcd_33:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1528               }
// 1529             }
// 1530            }
// 1531         }
// 1532         
// 1533         uiConstStrCpy(line[1], "Id000 Srch000/00"); // IDENTIFYING, SEARCHING   - IDFYcnt SRCHcnt
??UI_UpdateLcd_38:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,#`?<Constant "Id000 Srch000/00">` & 0xff
        MOV     ?V1,#(`?<Constant "Id000 Srch000/00">` >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1534 
// 1535         uiUintToString(*pUiIdentifyTimeAttribute, line[1] + 2, 10, 3, TRUE, FALSE);
        ; Setup parameters for call to function uiUintToString
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV     ?V0,#0x3
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x2
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_99:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV     R1,#0xa
        MOV     DPTR,#pUiIdentifyTimeAttribute
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_44:
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_87:
        LCALL   `??uiUintToString::?relay`; Banked call to: uiUintToString
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1536         bdb_GetFBInitiatorStatus(&FBRemainingTimeLeft, NULL);
        ; Setup parameters for call to function bdb_GetFBInitiatorStatus
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??bdb_GetFBInitiatorStatus::?relay`; Banked call to: bdb_GetFBInitiatorStatus
// 1537         uiUintToString(FBRemainingTimeLeft, line[1] + 10, 10, 3, TRUE, FALSE);
        ; Setup parameters for call to function uiUintToString
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV     ?V0,#0x3
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0xa
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_100:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV     R1,#0xa
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_48:
        LCALL   `??uiUintToString::?relay`; Banked call to: uiUintToString
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1538         uiUintToString(FBMatchesFound, line[1] + 14, 10, 2, TRUE, FALSE);
        ; Setup parameters for call to function uiUintToString
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV     ?V0,#0x2
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0xe
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_101:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV     R1,#0xa
        MOV     DPTR,#FBMatchesFound
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_49:
        LCALL   `??uiUintToString::?relay`; Banked call to: uiUintToString
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1539 
// 1540         if ((*pUiIdentifyTimeAttribute > 0) || (FBRemainingTimeLeft > 0) || (uiCommissioningStateStr != "--"))
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_78:
        JNZ     ??UI_UpdateLcd_40
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JNZ     ??UI_UpdateLcd_40
        MOV     DPTR,#uiCommissioningStateStr
        MOVX    A,@DPTR
        XRL     A,#`?<Constant "--">` & 0xff
        JNZ     ??UI_UpdateLcd_41
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#(`?<Constant "--">` >> 8) & 0xff
??UI_UpdateLcd_41:
        JZ      ??UI_UpdateLcd_42
// 1541         {
// 1542           LcdAutoRefreshRequired = TRUE;
??UI_UpdateLcd_40:
        MOV     R6,#0x1
// 1543         }
// 1544 
// 1545         line[2] = "<  COMMISSION  >";
??UI_UpdateLcd_42:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`?<Constant "<  COMMISSION  >">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "<  COMMISSION  >">` >> 8) & 0xff
        MOVX    @DPTR,A
// 1546         
// 1547         if (LcdAutoRefreshRequired)
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??UI_UpdateLcd_3 & 0xFFFF
// 1548         {
// 1549           osal_start_timerEx(uiAppTaskId, uiLcdAutoUpdateEvent, LCD_AUTO_REFRESH_INTERVAL_ON_COMISSIONING_SCREEN);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_fa
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 80)
        LCALL   ?Subroutine15 & 0xFFFF
// 1550         }
??CrossCallReturnLabel_21:
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
        LJMP    ??UI_UpdateLcd_3 & 0xFFFF
// 1551         break;
// 1552       case UI_STATE_SET_INST_CODE:
// 1553         line[2] = "<ADD INSTL CODE>";
??UI_UpdateLcd_11:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`?<Constant "<ADD INSTL CODE>">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "<ADD INSTL CODE>">` >> 8) & 0xff
        LJMP    ??UI_UpdateLcd_26 & 0xFFFF
// 1554         break;
// 1555       case UI_STATE_SET_INST_CODE_0:
// 1556         uiArrayToString(uiInstallCode, line[0], 16, TRUE); 
??UI_UpdateLcd_21:
        ; Setup parameters for call to function uiArrayToString
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV     R1,#0x10
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_52:
        LCALL   `??uiArrayToString::?relay`; Banked call to: uiArrayToString
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1557         uiArrayToString(uiInstallCode + 8, line[1], 16, TRUE); 
        ; Setup parameters for call to function uiArrayToString
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV     R1,#0x10
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_54:
        LCALL   `??uiArrayToString::?relay`; Banked call to: uiArrayToString
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1558         line[0][16] = 0;
        LCALL   ?Subroutine13 & 0xFFFF
// 1559         line[1][16] = 0;
??CrossCallReturnLabel_15:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
// 1560         line[2] = "<SET INSTL CODE>";
??CrossCallReturnLabel_17:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`?<Constant "<SET INSTL CODE>">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "<SET INSTL CODE>">` >> 8) & 0xff
        LJMP    ??UI_UpdateLcd_26 & 0xFFFF
// 1561         break;
// 1562 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1563       case UI_STATE_SET_INST_CODE_ADDR_0:
// 1564         uiArrayToString(uiInstallCodeAddr, line[0],16, FALSE); 
// 1565         line[0][16] = 0;
// 1566         line[2] = "<SET I.C. ADDR >";
// 1567         break;
// 1568 #endif
// 1569       case UI_STATE_SET_INST_CODE_DONE:
// 1570         line[0] = "Last status:";
??UI_UpdateLcd_22:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#`?<Constant "Last status:">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "Last status:">` >> 8) & 0xff
        MOVX    @DPTR,A
// 1571         
// 1572         switch (uiAddInstallCodeLastStatus)
        MOV     DPTR,#uiAddInstallCodeLastStatus
        MOVX    A,@DPTR
        JZ      ??UI_UpdateLcd_43
        INC     A
        JNZ     ??UI_UpdateLcd_44
// 1573         {
// 1574           case STATUS_UNKNOWN:
// 1575             line[1] = "---";
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`?<Constant "---">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "---">` >> 8) & 0xff
        SJMP    ??UI_UpdateLcd_45
// 1576             break;
// 1577           case ZSuccess:
// 1578             line[1] = "SUCCESS";
??UI_UpdateLcd_43:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`?<Constant "SUCCESS">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "SUCCESS">` >> 8) & 0xff
??UI_UpdateLcd_45:
        MOVX    @DPTR,A
// 1579             break;
        SJMP    ??UI_UpdateLcd_46
// 1580           default:
// 1581             uiConstStrCpy(line[1], "ERROR (0x  )    ");
??UI_UpdateLcd_44:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,#`?<Constant "ERROR (0x  )    ">` & 0xff
        MOV     ?V1,#(`?<Constant "ERROR (0x  )    ">` >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1582             uiUintToString( uiAddInstallCodeLastStatus, line[1] + 9, 16, 2, TRUE, FALSE);
        ; Setup parameters for call to function uiUintToString
        MOV     ?V0,R6
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV     ?V0,#0x2
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x9
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_102:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV     R1,#0x10
        MOV     DPTR,#uiAddInstallCodeLastStatus
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_50:
        LCALL   `??uiUintToString::?relay`; Banked call to: uiUintToString
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1583             break;
// 1584         }
// 1585         line[2] = "<APLY INST CODE>";
??UI_UpdateLcd_46:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`?<Constant "<APLY INST CODE>">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "<APLY INST CODE>">` >> 8) & 0xff
        LJMP    ??UI_UpdateLcd_26 & 0xFFFF
// 1586         break;
// 1587 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1588       case UI_STATE_SET_INST_CODE_ADDR_1:
// 1589         uiArrayToString(uiInstallCodeAddr, line[0],16, FALSE); 
// 1590         line[0][16] = 0;
// 1591         line[2] = "       I.C. ADDR";
// 1592         break;
// 1593 #endif
// 1594       case UI_STATE_SET_INST_CODE_1:
// 1595         uiArrayToString(uiInstallCode, line[0], 16, TRUE); 
??UI_UpdateLcd_23:
        ; Setup parameters for call to function uiArrayToString
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV     R1,#0x10
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_53:
        LCALL   `??uiArrayToString::?relay`; Banked call to: uiArrayToString
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1596         uiArrayToString(uiInstallCode + 8, line[1], 16, TRUE); 
        ; Setup parameters for call to function uiArrayToString
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV     R1,#0x10
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_55:
        LCALL   `??uiArrayToString::?relay`; Banked call to: uiArrayToString
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1597         line[0][16] = 0;
        LCALL   ?Subroutine13 & 0xFFFF
// 1598         line[1][16] = 0;
??CrossCallReturnLabel_16:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
// 1599         uiConstStrCpy(line[2], "       INST CODE");
??CrossCallReturnLabel_18:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,#`?<Constant "       INST CODE">` & 0xff
        MOV     ?V1,#(`?<Constant "       INST CODE">` >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1600         uiArrayToString( uiInstallCode + 16, line[2], 4, TRUE);
        ; Setup parameters for call to function uiArrayToString
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV     R1,#0x4
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine33_0 & 0xFFFF
??CrossCallReturnLabel_72:
        MOV     R2,#(uiInstallCode + 16) & 0xff
        MOV     R3,#((uiInstallCode + 16) >> 8) & 0xff
        LCALL   `??uiArrayToString::?relay`; Banked call to: uiArrayToString
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1601         break;
        LJMP    ??UI_UpdateLcd_3 & 0xFFFF
// 1602       case UI_STATE_APP_SPECIFIC_MENU:
// 1603         line[2] = "<   APP MENU   >";
??UI_UpdateLcd_7:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`?<Constant "<   APP MENU   >">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "<   APP MENU   >">` >> 8) & 0xff
        LJMP    ??UI_UpdateLcd_26 & 0xFFFF
// 1604         break;
// 1605       case UI_STATE_SET_PRI_CHANEL_MASK_0:
// 1606         line[0] = "1234567890123456";
??UI_UpdateLcd_15:
        LCALL   ?Subroutine5 & 0xFFFF
// 1607         uiCreateChannelMaskString(bdbAttributes.bdbPrimaryChannelSet, line[1]);
??CrossCallReturnLabel_3:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 78)
        MOV     DPTR,#bdbAttributes + 4
        LCALL   ?XLOAD_R2345
        LCALL   `??uiCreateChannelMaskString::?relay`; Banked call to: uiCreateChannelMaskString
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1608         line[2] = "<PRI CHANL MASK>";
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`?<Constant "<PRI CHANL MASK>">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "<PRI CHANL MASK>">` >> 8) & 0xff
        LJMP    ??UI_UpdateLcd_26 & 0xFFFF
// 1609         break;
// 1610       case UI_STATE_SET_SEC_CHANEL_MASK_0:
// 1611         line[0] = "1234567890123456";
??UI_UpdateLcd_16:
        LCALL   ?Subroutine5 & 0xFFFF
// 1612         uiCreateChannelMaskString(bdbAttributes.bdbSecondaryChannelSet, line[1]);
??CrossCallReturnLabel_4:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 78)
        MOV     DPTR,#bdbAttributes
        LCALL   ?XLOAD_R2345
        LCALL   `??uiCreateChannelMaskString::?relay`; Banked call to: uiCreateChannelMaskString
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1613         line[2] = "<SEC CHANL MASK>";
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`?<Constant "<SEC CHANL MASK>">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "<SEC CHANL MASK>">` >> 8) & 0xff
        LJMP    ??UI_UpdateLcd_26 & 0xFFFF
// 1614         break;
// 1615       case UI_STATE_SET_PRI_CHANEL_MASK_1:
// 1616         line[0] = "1234567890123456";
??UI_UpdateLcd_18:
        LCALL   ?Subroutine5 & 0xFFFF
// 1617         uiCreateChannelMaskString(bdbAttributes.bdbPrimaryChannelSet, line[1]);
??CrossCallReturnLabel_5:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 78)
        MOV     DPTR,#bdbAttributes + 4
        LCALL   ?XLOAD_R2345
        LCALL   `??uiCreateChannelMaskString::?relay`; Banked call to: uiCreateChannelMaskString
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1618         line[2] = " PRI CHANL MASK ";
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`?<Constant " PRI CHANL MASK ">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant " PRI CHANL MASK ">` >> 8) & 0xff
        LJMP    ??UI_UpdateLcd_26 & 0xFFFF
// 1619         break;
// 1620       case UI_STATE_SET_SEC_CHANEL_MASK_1:
// 1621         line[0] = "1234567890123456";
??UI_UpdateLcd_19:
        LCALL   ?Subroutine5 & 0xFFFF
// 1622         uiCreateChannelMaskString(bdbAttributes.bdbSecondaryChannelSet, line[1]);
??CrossCallReturnLabel_6:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 78)
        MOV     DPTR,#bdbAttributes
        LCALL   ?XLOAD_R2345
        LCALL   `??uiCreateChannelMaskString::?relay`; Banked call to: uiCreateChannelMaskString
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1623         line[2] = " SEC CHANL MASK ";
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`?<Constant " SEC CHANL MASK ">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant " SEC CHANL MASK ">` >> 8) & 0xff
        LJMP    ??UI_UpdateLcd_26 & 0xFFFF
// 1624         break;
// 1625       case UI_STATE_SET_PAN_ID_0:
// 1626         if (zgConfigPANID == 0xFFFF)
??UI_UpdateLcd_17:
        MOV     DPTR,#zgConfigPANID
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??UI_UpdateLcd_47
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??UI_UpdateLcd_47:
        JNZ     ??UI_UpdateLcd_48
// 1627         {
// 1628           uiConstStrCpy(line[0], "    0xFFFF (any)");
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
        SJMP    ??UI_UpdateLcd_49
// 1629         }
// 1630         else
// 1631         {
// 1632           uiConstStrCpy(line[0], "    0x          ");
??UI_UpdateLcd_48:
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_30:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1633           uiUintToString( zgConfigPANID, line[0] + 6, 16, 4, TRUE, FALSE);
        ; Setup parameters for call to function uiUintToString
        MOV     ?V0,R6
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV     ?V0,#0x4
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
// 1634         }
??CrossCallReturnLabel_108:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_90:
        LCALL   `??uiUintToString::?relay`; Banked call to: uiUintToString
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1635         line[2] = "<    PAN ID    >";
??UI_UpdateLcd_49:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`?<Constant "<    PAN ID    >">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "<    PAN ID    >">` >> 8) & 0xff
        SJMP    ??UI_UpdateLcd_26
// 1636         break;
// 1637       case UI_STATE_SET_PAN_ID_1:
// 1638         if (zgConfigPANID == 0xFFFF)
??UI_UpdateLcd_20:
        MOV     DPTR,#zgConfigPANID
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??UI_UpdateLcd_50
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??UI_UpdateLcd_50:
        JNZ     ??UI_UpdateLcd_51
// 1639         {
// 1640           uiConstStrCpy(line[0], "    0xFFFF (any)");
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
        SJMP    ??UI_UpdateLcd_52
// 1641         }
// 1642         else
// 1643         {
// 1644           uiConstStrCpy(line[0], "    0x          ");
??UI_UpdateLcd_51:
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_32:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1645           uiUintToString( zgConfigPANID, line[0] + 6, 16, 4, TRUE, FALSE);
        ; Setup parameters for call to function uiUintToString
        MOV     ?V0,R6
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV     ?V0,#0x4
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
// 1646         }
??CrossCallReturnLabel_109:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_91:
        LCALL   `??uiUintToString::?relay`; Banked call to: uiUintToString
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1647         line[2] = "     PAN ID     ";
??UI_UpdateLcd_52:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`?<Constant "     PAN ID     ">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "     PAN ID     ">` >> 8) & 0xff
??UI_UpdateLcd_26:
        MOVX    @DPTR,A
// 1648         break;
        LJMP    ??UI_UpdateLcd_3 & 0xFFFF
// 1649       case UI_STATE_INFO:
// 1650         // Display the extended address.
// 1651         xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
??UI_UpdateLcd_8:
        MOV     R2,#(aExtendedAddress + 7) & 0xff
        MOV     R3,#((aExtendedAddress + 7) >> 8) & 0xff
// 1652         
// 1653         for (i = 0; i < Z_EXTADDR_LEN * 2; xad--)
        MOV     R4,#0x0
// 1654         {
// 1655           uint8 ch;
// 1656           ch = (*xad >> 4) & 0x0F;
??UI_UpdateLcd_53:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        MOV     R5,A
// 1657           line[0][i++] = ch + (( ch < 10 ) ? '0' : '7');
        MOV     A,R4
        MOV     R6,A
        MOV     A,#0x1
        ADD     A,R6
        MOV     R4,A
        MOV     A,R5
        CLR     C
        SUBB    A,#0xa
        JNC     ??UI_UpdateLcd_54
        MOV     R0,#0x30
        SJMP    ??UI_UpdateLcd_55
??UI_UpdateLcd_54:
        MOV     R0,#0x37
??UI_UpdateLcd_55:
        MOV     A,R0
        ADD     A,R5
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     R5,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     DPL,R5
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine9 & 0xFFFF
// 1658           ch = *xad & 0x0F;
??CrossCallReturnLabel_14:
        ANL     A,#0xf
        MOV     R5,A
// 1659           line[0][i++] = ch + (( ch < 10 ) ? '0' : '7');
        MOV     A,R4
        MOV     R7,A
        MOV     A,#0x1
        ADD     A,R4
        MOV     R4,A
        MOV     A,R5
        CLR     C
        SUBB    A,#0xa
        JNC     ??UI_UpdateLcd_56
        MOV     R0,#0x30
        SJMP    ??UI_UpdateLcd_57
??UI_UpdateLcd_56:
        MOV     R0,#0x37
??UI_UpdateLcd_57:
        MOV     A,R0
        ADD     A,R5
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,R7
        MOV     R5,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     DPL,R5
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1660         }
        MOV     A,R2
        ADD     A,#-0x1
        MOV     A,R3
        ADDC    A,#-0x1
        DEC     R2
        MOV     R3,A
        MOV     A,R4
        CLR     C
        SUBB    A,#0x10
        JC      ??UI_UpdateLcd_53
// 1661         
// 1662         line[0][Z_EXTADDR_LEN*2] = '\0';
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine14 & 0xFFFF
// 1663 
// 1664         uiConstStrCpy( line[1], "nxxxx cxx axxxx ");
??CrossCallReturnLabel_19:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,#`?<Constant "nxxxx cxx axxxx ">` & 0xff
        MOV     ?V1,#(`?<Constant "nxxxx cxx axxxx ">` >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_33:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1665 
// 1666         uiUintToString( _NIB.nwkPanId, line[1] + 1 , 16, 4, TRUE, FALSE);
        ; Setup parameters for call to function uiUintToString
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV     ?V0,#0x4
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x1
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_103:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV     R1,#0x10
        MOV     DPTR,#_NIB + 33
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_88:
        LCALL   `??uiUintToString::?relay`; Banked call to: uiUintToString
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1667         line[1][5] = ' ';
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_45:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x20
        MOVX    @DPTR,A
// 1668         
// 1669         uiUintToString( _NIB.nwkLogicalChannel, (void *)(line[1] + 7), 10, 2, TRUE, FALSE );
        ; Setup parameters for call to function uiUintToString
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV     ?V0,#0x2
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x7
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_104:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV     R1,#0xa
        MOV     DPTR,#_NIB + 22
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL   `??uiUintToString::?relay`; Banked call to: uiUintToString
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1670         line[1][9] = ' ';
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_81:
        XCH     A,R0
        ADD     A,#0x9
        MOV     DPL,A
        CLR     A
        ADDC    A,R0
        MOV     DPH,A
        MOV     A,#0x20
        MOVX    @DPTR,A
// 1671         
// 1672         uiUintToString( _NIB.nwkDevAddress, line[1] + 11, 16, 4, TRUE, FALSE );
        ; Setup parameters for call to function uiUintToString
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV     ?V0,#0x4
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0xb
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_105:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV     R1,#0x10
        MOV     DPTR,#_NIB + 20
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_89:
        LCALL   `??uiUintToString::?relay`; Banked call to: uiUintToString
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1673 
// 1674         uiConstStrCpy(line[2], "          <INFO>");
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,#`?<Constant "          <INFO>">` & 0xff
        MOV     ?V1,#(`?<Constant "          <INFO>">` >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_34:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1675         switch (uiNwkStateShadow)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV     DPTR,#uiNwkStateShadow
        MOVX    A,@DPTR
        ADD     A,#-0x6
        JZ      ??UI_UpdateLcd_58
        DEC     A
        JZ      ??UI_UpdateLcd_59
        ADD     A,#-0x2
        JZ      $+5
        LJMP    ??UI_UpdateLcd_60 & 0xFFFF
// 1676         {
// 1677           case DEV_ZB_COORD:
// 1678             uiConstStrOver(line[2], "ZC");
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,#`?<Constant "ZC">` & 0xff
        MOV     ?V1,#(`?<Constant "ZC">` >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     R4,#0x2
        MOV     R5,#0x0
        SJMP    ??CrossCallReturnLabel_36
          CFI CFA_XSP16 add(XSP16, 76)
// 1679             break;
// 1680           case DEV_ROUTER:
// 1681             if (APSME_IsDistributedSecurity())
??UI_UpdateLcd_59:
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL   `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV     A,R1
        JZ      ??UI_UpdateLcd_61
// 1682             {
// 1683               uiConstStrOver(line[2], "ZR DIST");
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,#`?<Constant "ZR DIST">` & 0xff
        MOV     ?V1,#(`?<Constant "ZR DIST">` >> 8) & 0xff
        SJMP    ??UI_UpdateLcd_62
// 1684             }
// 1685             else
// 1686             {
// 1687               uiConstStrOver(line[2], "ZR CENT");
??UI_UpdateLcd_61:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,#`?<Constant "ZR CENT">` & 0xff
        MOV     ?V1,#(`?<Constant "ZR CENT">` >> 8) & 0xff
??UI_UpdateLcd_62:
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     A,R4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_36:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
        LJMP    ??UI_UpdateLcd_3 & 0xFFFF
// 1688             }
// 1689             break;
// 1690           case DEV_END_DEVICE:
// 1691             uiConstStrOver(line[2], "ZED p");
??UI_UpdateLcd_58:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,#`?<Constant "ZED p">` & 0xff
        MOV     ?V1,#(`?<Constant "ZED p">` >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     R4,#0x5
        MOV     R5,#0x0
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1692             uiUintToString( _NIB.nwkCoordAddress, line[2] + 5, 16, 4, TRUE, FALSE );
        ; Setup parameters for call to function uiUintToString
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV     ?V0,#0x4
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x5
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_106:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV     R1,#0x10
        MOV     DPTR,#_NIB + 23
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_92:
        SJMP    ??UI_UpdateLcd_63
          CFI CFA_XSP16 add(XSP16, 76)
// 1693             break;
// 1694           default:
// 1695 #if ZG_BUILD_COORDINATOR_TYPE
// 1696             uiConstStrOver(line[2], "ZC (   )");
// 1697             uiUintToString( uiNwkStateShadow, line[2] + 4, 10, 3, TRUE, FALSE );
// 1698 #elif ZG_BUILD_RTRONLY_TYPE
// 1699             uiConstStrOver(line[2], "ZR (   )");
// 1700             uiUintToString( uiNwkStateShadow, line[2] + 4, 10, 3, TRUE, FALSE );
// 1701 #elif ZG_BUILD_ENDDEVICE_TYPE
// 1702             uiConstStrOver(line[2], "ZED (   )");
??UI_UpdateLcd_60:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,#`?<Constant "ZED (   )">` & 0xff
        MOV     ?V1,#(`?<Constant "ZED (   )">` >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     R4,#0x9
        MOV     R5,#0x0
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1703             uiUintToString( uiNwkStateShadow, line[2] + 5, 10, 3, TRUE, FALSE );
        ; Setup parameters for call to function uiUintToString
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV     ?V0,#0x3
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x5
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_107:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV     R1,#0xa
        MOV     DPTR,#uiNwkStateShadow
        MOVX    A,@DPTR
        MOV     R2,A
        CLR     A
        MOV     R3,A
??UI_UpdateLcd_63:
        MOV     R4,A
        MOV     R5,A
        LCALL   `??uiUintToString::?relay`; Banked call to: uiUintToString
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1704 #else
// 1705             uiConstStrOver(line[2], "(   )");
// 1706             uiUintToString( uiNwkStateShadow, line[2] + 1, 10, 3, TRUE, FALSE );
// 1707 #endif
// 1708             break;
// 1709         }
// 1710         
// 1711         break;
// 1712       default:
// 1713         break;
// 1714     }
// 1715   }
// 1716 
// 1717   if (uiLcdCursorLine != 0xFF)
??UI_UpdateLcd_3:
        MOV     DPTR,#uiLcdCursorLine
        MOVX    A,@DPTR
        CPL     A
        JZ      ??UI_UpdateLcd_64
// 1718   {
// 1719     if (uiLcdCursorState == 0)
        MOV     DPTR,#uiLcdCursorState
        MOVX    A,@DPTR
        JNZ     ??UI_UpdateLcd_65
// 1720     {
// 1721       line[uiLcdCursorLine][uiLcdCursorCol] = LCD_CURSOR_CHAR; //note: the cursor must point to a writeable memory location, i.e. not const
        MOV     DPTR,#uiLcdCursorCol
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#uiLcdCursorLine
        MOVX    A,@DPTR
        ADD     A,0xE0 /* A   */
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     DPL,R0
        MOV     DPH,A
        MOV     A,#0x20
        MOVX    @DPTR,A
// 1722     }
// 1723     uiLcdCursorState ^= 1;
??UI_UpdateLcd_65:
        MOV     DPTR,#uiLcdCursorState
        MOVX    A,@DPTR
        XRL     A,#0x1
        MOVX    @DPTR,A
// 1724     
// 1725     osal_start_timerEx(uiAppTaskId, uiLcdAutoUpdateEvent, LCD_CURSOR_UPDATE_INTERVAL);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_1f4
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 80)
        LCALL   ?Subroutine15 & 0xFFFF
// 1726   }
??CrossCallReturnLabel_22:
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1727 
// 1728 #ifdef HAL_BOARD_CC2538
// 1729   for (i = 0; i < 3; i++)
// 1730   {
// 1731     if (line[i] != LineBuf[i] + LCD_CC2538_PREFIX_COUNT)
// 1732     {
// 1733       osal_memcpy(LineBuf[i] + LCD_CC2538_PREFIX_COUNT, line[i], LCD_LINE_LENGTH + 1);
// 1734     }
// 1735     
// 1736     line[i] = LineBuf[i];
// 1737   }
// 1738 #endif
// 1739   
// 1740 #ifdef LCD_SUPPORTED
// 1741   HalLcd_HW_Clear();
??UI_UpdateLcd_64:
        ; Setup parameters for call to function HalLcd_HW_Clear
        LCALL   `??HalLcd_HW_Clear::?relay`; Banked call to: HalLcd_HW_Clear
// 1742   HalLcdWriteString( line[0], UI_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_37:
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
// 1743   HalLcdWriteString( line[1], UI_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     A,R1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_38:
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
// 1744   HalLcdWriteString( line[2], UI_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_39:
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
// 1745 
// 1746 #ifdef DEBUG_LCD_REFRESH
// 1747   {
// 1748     static bool toggle=TRUE;
// 1749     HalLcd_HW_WriteChar(3,15,(toggle = !toggle) ? '>' : ' ');
// 1750   }
// 1751 #endif
// 1752 
// 1753 #endif
// 1754 }
        MOV     A,#0x3a
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock36

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond37 Using cfiCommon0
          CFI Function UI_MainStateMachine
          CFI Conditional ??CrossCallReturnLabel_58
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function UI_MainStateMachine
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-2
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function UI_UpdateLcd
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function UI_Init
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function UI_Init
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-2
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function UI_Init
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-2
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker43 Using cfiCommon1
          CFI (cfiPicker43) NoFunction
          CFI (cfiPicker43) Picker
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_83:
        MOV     R1,A
        RET
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiPicker43

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond44 Using cfiCommon0
          CFI Function UI_UpdateComissioningStatus
          CFI Conditional ??CrossCallReturnLabel_73
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function UI_UpdateComissioningStatus
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond45) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond45) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond45) CFA_SP SP+-7
          CFI Block cfiPicker46 Using cfiCommon1
          CFI (cfiPicker46) NoFunction
          CFI (cfiPicker46) Picker
        MOV     DPTR,#uiCommissioningNetworkConnrctionStr
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiPicker46
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine33_0:
          CFI Block cfiCond47 Using cfiCommon0
          CFI Function uiCreateChannelMaskString
          CFI Conditional ??CrossCallReturnLabel_71
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function UI_UpdateLcd
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-2
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function UI_UpdateComissioningStatus
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond49) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond49) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond49) CFA_SP SP+-7
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function UI_UpdateComissioningStatus
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond50) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond50) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond50) CFA_SP SP+-7
          CFI Block cfiPicker51 Using cfiCommon1
          CFI (cfiPicker51) NoFunction
          CFI (cfiPicker51) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiPicker51

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond52 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_54
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function UI_UpdateLcd
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiPicker54 Using cfiCommon1
          CFI (cfiPicker54) NoFunction
          CFI (cfiPicker54) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#(uiInstallCode + 8) & 0xff
        MOV     R3,#((uiInstallCode + 8) >> 8) & 0xff
        RET
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiPicker54

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond55 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_52
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function UI_UpdateLcd
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-2
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiPicker57 Using cfiCommon1
          CFI (cfiPicker57) NoFunction
          CFI (cfiPicker57) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#uiInstallCode & 0xff
        MOV     R3,#(uiInstallCode >> 8) & 0xff
        RET
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiPicker57

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond58 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_48
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function UI_UpdateLcd
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+-2
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function UI_UpdateLcd
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-2
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function UI_UpdateLcd
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-2
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker62 Using cfiCommon1
          CFI (cfiPicker62) NoFunction
          CFI (cfiPicker62) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        CLR     A
        MOV     R3,A
        MOV     R4,A
        MOV     R5,A
        RET
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiPicker62

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond63 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function UI_UpdateLcd
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-2
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function UI_UpdateLcd
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-2
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiPicker66 Using cfiCommon1
          CFI (cfiPicker66) NoFunction
          CFI (cfiPicker66) Picker
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_67:
        RET
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiPicker66

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond67 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function UI_UpdateLcd
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_44
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-4
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function UI_UpdateLcd
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_45
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-4
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function UI_UpdateLcd
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_78
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-4
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function uiProcessIdentifyTimeChange
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_79
          CFI (cfiCond71) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond71) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond71) CFA_SP SP+-9
          CFI Block cfiPicker72 Using cfiCommon1
          CFI (cfiPicker72) NoFunction
          CFI (cfiPicker72) Picker
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_85:
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiPicker72

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond73 Using cfiCommon0
          CFI Function uiActionConfigureEnables
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function UI_UpdateLcd
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-2
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function UI_UpdateLcd
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond75) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-2
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiPicker76 Using cfiCommon1
          CFI (cfiPicker76) NoFunction
          CFI (cfiPicker76) Picker
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_96:
        MOV     ?V1,A
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiPicker76

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond77 Using cfiCommon0
          CFI Function uiActionMenuJump
          CFI Conditional ??CrossCallReturnLabel_94
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function uiActionProcessConfigurePanId
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-2
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function uiActionConfigureEnables
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_40
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-4
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function UI_UpdateLcd
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_41
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+-4
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function UI_UpdateLcd
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_42
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-4
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function UI_UpdateLcd
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_92
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-4
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function UI_UpdateLcd
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_90
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond83) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond83) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+-6
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function UI_UpdateLcd
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_91
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-6
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function UI_UpdateLcd
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_87
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-6
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function UI_UpdateLcd
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_88
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-6
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function UI_UpdateLcd
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_89
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-6
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker88 Using cfiCommon1
          CFI (cfiPicker88) NoFunction
          CFI (cfiPicker88) Picker
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiPicker88

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond89 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function UI_UpdateLcd
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-2
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function UI_UpdateLcd
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-2
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function UI_UpdateLcd
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function UI_UpdateLcd
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-2
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function UI_UpdateLcd
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-2
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function UI_UpdateLcd
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond95) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-2
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function UI_UpdateLcd
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-2
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function UI_UpdateLcd
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-2
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function UI_UpdateLcd
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-2
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function UI_UpdateLcd
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond99) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-2
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function UI_UpdateLcd
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-2
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function UI_UpdateLcd
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-2
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function UI_UpdateLcd
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-2
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function UI_UpdateLcd
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function UI_UpdateLcd
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-2
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function UI_UpdateLcd
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-2
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiPicker106 Using cfiCommon1
          CFI (cfiPicker106) NoFunction
          CFI (cfiPicker106) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiPicker106

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond107 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function UI_UpdateLcd
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-2
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 80)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function UI_UpdateLcd
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond109) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-2
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 80)
          CFI Block cfiPicker110 Using cfiCommon1
          CFI (cfiPicker110) NoFunction
          CFI (cfiPicker110) Picker
        MOV     DPTR,#uiLcdAutoUpdateEvent
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPTR,#uiAppTaskId
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiPicker110

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond111 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function UI_UpdateLcd
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond112) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-2
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function UI_UpdateLcd
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-2
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiPicker114 Using cfiCommon1
          CFI (cfiPicker114) NoFunction
          CFI (cfiPicker114) Picker
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_65:
        RET
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiPicker114

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond115 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function UI_UpdateLcd
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_18
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-4
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function UI_UpdateLcd
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_19
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond117) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-4
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function UI_UpdateLcd
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_64, ??CrossCallReturnLabel_15
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-4
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function UI_UpdateLcd
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_64, ??CrossCallReturnLabel_16
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-4
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiPicker120 Using cfiCommon1
          CFI (cfiPicker120) NoFunction
          CFI (cfiPicker120) Picker
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_84:
        XCH     A,R0
        ADD     A,#0x10
        MOV     DPL,A
        CLR     A
        ADDC    A,R0
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiPicker120

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond121 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_80
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function UI_UpdateLcd
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-2
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function UI_MainStateMachine
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_58
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-4
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function UI_MainStateMachine
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_59
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-4
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function UI_UpdateLcd
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_60
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-4
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function UI_Init
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_61
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-4
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function UI_Init
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_62
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-4
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function UI_Init
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_63
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-4
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function UI_UpdateLcd
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_43
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-6
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function UI_UpdateLcd
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_44
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-6
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function UI_UpdateLcd
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_45
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond131) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-6
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function UI_UpdateLcd
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_78
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-6
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function uiProcessIdentifyTimeChange
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_79
          CFI (cfiCond133) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond133) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond133) CFA_SP SP+-11
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function UI_UpdateLcd
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_17
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-6
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function UI_UpdateLcd
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_18
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond135) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-6
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function UI_UpdateLcd
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_19
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond136) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond136) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-6
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function UI_UpdateLcd
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_64, ??CrossCallReturnLabel_15
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-6
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function UI_UpdateLcd
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_64, ??CrossCallReturnLabel_16
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-6
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function UI_UpdateLcd
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_78
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-4
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function uiProcessIdentifyTimeChange
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_79
          CFI (cfiCond140) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond140) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond140) CFA_SP SP+-9
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function uiActionAppSecificMenu
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_75
          CFI (cfiCond141) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond141) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond141) CFA_SP SP+-9
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function UI_UpdateLcd
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_76
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-4
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function UI_UpdateLcd
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_77
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-4
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function UI_UpdateLcd
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_56
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond144) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-4
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function UI_Init
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_57
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-4
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker146 Using cfiCommon1
          CFI (cfiPicker146) NoFunction
          CFI (cfiPicker146) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiPicker146

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond147 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function UI_UpdateLcd
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-2
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiPicker149 Using cfiCommon1
          CFI (cfiPicker149) NoFunction
          CFI (cfiPicker149) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_64:
        MOV     A,#0x2
        RET
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiPicker149

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond150 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_78
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function uiProcessIdentifyTimeChange
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond151) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond151) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond151) CFA_SP SP+-7
          CFI Block cfiPicker152 Using cfiCommon1
          CFI (cfiPicker152) NoFunction
          CFI (cfiPicker152) Picker
        MOV     DPTR,#pUiIdentifyTimeAttribute
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_66:
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiPicker152
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine34_0:
          CFI Block cfiCond153 Using cfiCommon0
          CFI Function uiActionAppSecificMenu
          CFI Conditional ??CrossCallReturnLabel_75
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function UI_UpdateLcd
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond154) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-2
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function UI_UpdateLcd
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-2
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function UI_UpdateLcd
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond156) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond156) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-2
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function uiProcessIdentifyTimeChange
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond157) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond157) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond157) CFA_SP SP+-7
          CFI Block cfiPicker158 Using cfiCommon1
          CFI (cfiPicker158) NoFunction
          CFI (cfiPicker158) Picker
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_86:
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiPicker158

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond159 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_90
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function UI_UpdateLcd
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-2
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker161 Using cfiCommon1
          CFI (cfiPicker161) NoFunction
          CFI (cfiPicker161) Picker
        MOV     R1,#0x10
        MOV     DPTR,#zgConfigPANID
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiPicker161
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine35_0:
          CFI Block cfiCond162 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_87
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function UI_UpdateLcd
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond163) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-2
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function UI_UpdateLcd
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond164) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-2
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function UI_UpdateLcd
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-2
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function UI_UpdateLcd
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond166) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-2
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker167 Using cfiCommon1
          CFI (cfiPicker167) NoFunction
          CFI (cfiPicker167) Picker
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_93:
        MOV     R4,A
        MOV     R5,A
        RET
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiPicker167

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond168 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_92
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function UI_UpdateLcd
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_90
          CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond169) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond169) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond169) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond169) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond169) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond169) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond169) CFA_SP SP+-4
          CFI (cfiCond169) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function UI_UpdateLcd
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_91
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond170) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond170) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+-4
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function UI_UpdateLcd
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_87
          CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond171) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond171) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond171) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond171) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond171) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond171) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond171) CFA_SP SP+-4
          CFI (cfiCond171) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function UI_UpdateLcd
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_88
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-4
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function UI_UpdateLcd
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_89
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond173) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond173) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond173) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond173) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+-4
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker174 Using cfiCommon1
          CFI (cfiPicker174) NoFunction
          CFI (cfiPicker174) Picker
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_97:
        MOV     R2,?V0
        MOV     R3,A
        CLR     A
        RET
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiPicker174

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond175 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_108
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function UI_UpdateLcd
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond176) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond176) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond176) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-2
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiPicker177 Using cfiCommon1
          CFI (cfiPicker177) NoFunction
          CFI (cfiPicker177) Picker
        MOVX    A,@DPTR
        ADD     A,#0x6
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiPicker177
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine36_0:
          CFI Block cfiCond178 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_98
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function UI_UpdateLcd
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond179) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond179) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond179) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-2
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function UI_UpdateLcd
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-2
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function UI_UpdateLcd
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond181) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-2
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function UI_UpdateLcd
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond182) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond182) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond182) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond182) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond182) CFA_SP SP+-2
          CFI (cfiCond182) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond183 Using cfiCommon0
          CFI (cfiCond183) Function UI_UpdateLcd
          CFI (cfiCond183) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond183) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond183) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond183) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond183) CFA_SP SP+-2
          CFI (cfiCond183) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond184 Using cfiCommon0
          CFI (cfiCond184) Function UI_UpdateLcd
          CFI (cfiCond184) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond184) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond184) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond184) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond184) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond184) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond184) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond184) CFA_SP SP+-2
          CFI (cfiCond184) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond185 Using cfiCommon0
          CFI (cfiCond185) Function UI_UpdateLcd
          CFI (cfiCond185) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond185) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond185) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond185) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond185) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond185) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond185) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond185) CFA_SP SP+-2
          CFI (cfiCond185) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond186 Using cfiCommon0
          CFI (cfiCond186) Function UI_UpdateLcd
          CFI (cfiCond186) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond186) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond186) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond186) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond186) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond186) CFA_SP SP+-2
          CFI (cfiCond186) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function UI_UpdateLcd
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond187) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond187) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond187) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond187) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond187) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond187) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond187) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond187) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond187) CFA_SP SP+-2
          CFI (cfiCond187) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond188 Using cfiCommon0
          CFI (cfiCond188) Function UI_UpdateLcd
          CFI (cfiCond188) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond188) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond188) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond188) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond188) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond188) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond188) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond188) CFA_SP SP+-2
          CFI (cfiCond188) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function UI_UpdateLcd
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond189) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond189) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond189) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond189) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond189) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond189) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond189) CFA_SP SP+-2
          CFI (cfiCond189) CFA_XSP16 add(XSP16, 79)
          CFI Block cfiPicker190 Using cfiCommon1
          CFI (cfiPicker190) NoFunction
          CFI (cfiPicker190) Picker
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     ?V1,A
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiCond183
          CFI EndBlock cfiCond184
          CFI EndBlock cfiCond185
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiPicker190

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond191 Using cfiCommon0
          CFI Function UI_UpdateComissioningStatus
          CFI Conditional ??CrossCallReturnLabel_12
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function UI_UpdateComissioningStatus
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond192) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond192) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond192) CFA_SP SP+-7
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function UI_UpdateLcd
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond193) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond193) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+-2
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiPicker194 Using cfiCommon1
          CFI (cfiPicker194) NoFunction
          CFI (cfiPicker194) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiPicker194

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond195 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_118
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function UI_UpdateLcd
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond196) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond196) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond196) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond196) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond196) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond196) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond196) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond196) CFA_SP SP+-2
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiPicker197 Using cfiCommon1
          CFI (cfiPicker197) NoFunction
          CFI (cfiPicker197) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiPicker197
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine37_0:
          CFI Block cfiCond198 Using cfiCommon0
          CFI Function uiActionAppSecificMenu
          CFI Conditional ??CrossCallReturnLabel_110
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond199 Using cfiCommon0
          CFI (cfiCond199) Function UI_UpdateComissioningStatus
          CFI (cfiCond199) Conditional ??CrossCallReturnLabel_111
          CFI (cfiCond199) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond199) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond199) CFA_SP SP+-7
          CFI Block cfiCond200 Using cfiCommon0
          CFI (cfiCond200) Function UI_UpdateLcd
          CFI (cfiCond200) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond200) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond200) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond200) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond200) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond200) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond200) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond200) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond200) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond200) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond200) CFA_SP SP+-2
          CFI (cfiCond200) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond201 Using cfiCommon0
          CFI (cfiCond201) Function UI_UpdateLcd
          CFI (cfiCond201) Conditional ??CrossCallReturnLabel_113
          CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond201) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond201) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond201) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond201) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond201) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond201) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond201) CFA_SP SP+-2
          CFI (cfiCond201) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function UI_Init
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-2
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function UI_Init
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-2
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function UI_Init
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond204) CFA_SP SP+-2
          CFI (cfiCond204) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond205 Using cfiCommon0
          CFI (cfiCond205) Function UI_Init
          CFI (cfiCond205) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond205) CFA_SP SP+-2
          CFI (cfiCond205) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond206 Using cfiCommon0
          CFI (cfiCond206) Function UI_UpdateLcd
          CFI (cfiCond206) Conditional ??CrossCallReturnLabel_118
          CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond206) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond206) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond206) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond206) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond206) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond206) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond206) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond206) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond206) CFA_SP SP+-2
          CFI (cfiCond206) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function UI_UpdateLcd
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond207) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond207) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond207) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond207) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond207) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond207) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond207) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond207) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond207) CFA_SP SP+-2
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiPicker208 Using cfiCommon1
          CFI (cfiPicker208) NoFunction
          CFI (cfiPicker208) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond198
          CFI EndBlock cfiCond199
          CFI EndBlock cfiCond200
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiCond205
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiPicker208

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond209 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond210 Using cfiCommon0
          CFI (cfiCond210) Function UI_UpdateLcd
          CFI (cfiCond210) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond210) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond210) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond210) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond210) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond210) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond210) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond210) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond210) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond210) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond210) CFA_SP SP+-2
          CFI (cfiCond210) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond211 Using cfiCommon0
          CFI (cfiCond211) Function UI_UpdateLcd
          CFI (cfiCond211) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond211) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond211) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond211) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond211) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond211) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond211) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond211) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond211) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond211) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond211) CFA_SP SP+-2
          CFI (cfiCond211) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiPicker212 Using cfiCommon1
          CFI (cfiPicker212) NoFunction
          CFI (cfiPicker212) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,#0x4
        RET
          CFI EndBlock cfiCond209
          CFI EndBlock cfiCond210
          CFI EndBlock cfiCond211
          CFI EndBlock cfiPicker212

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond213 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond214 Using cfiCommon0
          CFI (cfiCond214) Function UI_UpdateLcd
          CFI (cfiCond214) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond214) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond214) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond214) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond214) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond214) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond214) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond214) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond214) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond214) CFA_SP SP+-2
          CFI (cfiCond214) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond215 Using cfiCommon0
          CFI (cfiCond215) Function UI_UpdateLcd
          CFI (cfiCond215) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond215) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond215) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond215) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond215) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond215) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond215) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond215) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond215) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond215) CFA_SP SP+-2
          CFI (cfiCond215) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function UI_UpdateLcd
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond216) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond216) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond216) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond216) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+-2
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 76)
          CFI Block cfiPicker217 Using cfiCommon1
          CFI (cfiPicker217) NoFunction
          CFI (cfiPicker217) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        ; Setup parameters for call to function uiCreateChannelMaskString
        ; Setup parameters for call to function uiCreateChannelMaskString
        ; Setup parameters for call to function uiCreateChannelMaskString
        ; Setup parameters for call to function uiCreateChannelMaskString
        MOV     A,#0x2
        RET
          CFI EndBlock cfiCond213
          CFI EndBlock cfiCond214
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiPicker217
// 1755 
// 1756 /*********************************************************************
// 1757  * @fn          uiProcessPermitJoin
// 1758  *
// 1759  * @brief       Update the Network-Joining status LED
// 1760  *
// 1761  * @param       duration - The time left for joining, or 0 if the device is closed for joining
// 1762  *
// 1763  * @return      none
// 1764  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1765 static void *uiProcessPermitJoin( void *duration )
uiProcessPermitJoin:
          CFI Block cfiBlock218 Using cfiCommon0
          CFI Function uiProcessPermitJoin
        CODE
// 1766 {
        FUNCALL uiProcessPermitJoin, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uiProcessPermitJoin, UI_UpdateLcd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1767   if (*(uint8 *)duration > 0)
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     DPTR,#uiNwkOpenState
        JZ      ??uiProcessPermitJoin_0
// 1768   {
// 1769     uiNwkOpenState |= NWK_OPEN_FOR_JOINING;
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        SJMP    ??uiProcessPermitJoin_1
// 1770   }
// 1771   else
// 1772   {
// 1773     uiNwkOpenState &= ~NWK_OPEN_FOR_JOINING;
??uiProcessPermitJoin_0:
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.0
??uiProcessPermitJoin_1:
        MOVX    @DPTR,A
// 1774   }
// 1775 
// 1776   HalLedBlink ( UI_LED_NETWORK_OPEN_STATE, 0, uiNetworkOpenStateLedDutyCycle[uiNwkOpenState], HAL_LED_DEFAULT_FLASH_TIME );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#uiNetworkOpenStateLedDutyCycle & 0xff
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,#(uiNetworkOpenStateLedDutyCycle >> 8) & 0xff
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
// 1777   
// 1778   UI_UpdateLcd();
        ; Setup parameters for call to function UI_UpdateLcd
        LCALL   `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
// 1779   
// 1780   return ( NULL );
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ?Subroutine1 & 0xFFFF
// 1781 }
          CFI EndBlock cfiBlock218
// 1782 
// 1783 /*********************************************************************
// 1784  * @fn          UI_Init
// 1785  *
// 1786  * @brief       Initialize the user-interface module.
// 1787  *              This function must be called by the application during its initializatin.
// 1788  *
// 1789  * @param       app_task_id_value - the task-id of the application task
// 1790  *              lcd_auto_update_event_value - the event mask (single bit) for using as the lcd-auto-update event.
// 1791  *              key_auto_repeat_event_value - the event mask (single bit) for using as the key-auto-repeat event. 
// 1792  *              ui_IdentifyTimeAttribute_value - a pointer to the identify attribute's value.
// 1793  *              app_title_value - a pointer to a string, holding the title of the sample app.
// 1794  *              _uiAppUpdateLcd - a pointer to a fuction to update the LCD when displaying the application-
// 1795  *                specific screens.
// 1796  *              _uiAppStatesMain - a pointer to the application-specific state-table.
// 1797  *
// 1798  * @return      none
// 1799  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1800 void UI_Init(uint8 app_task_id_value, uint16 lcd_auto_update_event_value, uint16 key_auto_repeat_event_value, uint16 * ui_IdentifyTimeAttribute_value, char * app_title_value, uiAppUpdateLcd_t _uiAppUpdateLcd, const uiState_t _uiAppStatesMain[])
UI_Init:
          CFI Block cfiBlock219 Using cfiCommon0
          CFI Function UI_Init
        CODE
// 1801 {
        FUNCALL UI_Init, ZDO_RegisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_Init, bdb_RegisterIdentifyTimeChangeCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_Init, bdb_RegisterBindNotificationCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_Init, bdb_StartCommissioning
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
// 1802   uiAppTaskId = app_task_id_value;
        MOV     DPTR,#uiAppTaskId
        MOVX    @DPTR,A
// 1803   uiLcdAutoUpdateEvent = lcd_auto_update_event_value;
        MOV     DPTR,#uiLcdAutoUpdateEvent
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 1804   pUiIdentifyTimeAttribute = ui_IdentifyTimeAttribute_value;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_61:
        MOV     DPTR,#pUiIdentifyTimeAttribute
        LCALL   ??Subroutine37_0 & 0xFFFF
// 1805   uiAppTitleStr = app_title_value;
??CrossCallReturnLabel_114:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV     DPTR,#uiAppTitleStr
        LCALL   ??Subroutine37_0 & 0xFFFF
// 1806   uiAppUpdateLcd = _uiAppUpdateLcd;
??CrossCallReturnLabel_115:
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_63:
        MOV     DPTR,#uiAppUpdateLcd
        LCALL   ??Subroutine37_0 & 0xFFFF
// 1807   uiAppStatesMain = _uiAppStatesMain;
??CrossCallReturnLabel_116:
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_57:
        LCALL   ??Subroutine37_0 & 0xFFFF
// 1808 #ifdef BDB_TL_TARGET
// 1809   uiKeyAutoRepeatEvent = key_auto_repeat_event_value;
// 1810 #endif
// 1811 
// 1812   ZDO_RegisterForZdoCB(ZDO_PERMIT_JOIN_CBID, &uiProcessPermitJoin);
??CrossCallReturnLabel_117:
        ; Setup parameters for call to function ZDO_RegisterForZdoCB
        MOV     R2,#`??uiProcessPermitJoin::?relay` & 0xff
        MOV     R3,#(`??uiProcessPermitJoin::?relay` >> 8) & 0xff
        MOV     R1,#0x7
        LCALL   `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
// 1813   
// 1814   bdb_RegisterIdentifyTimeChangeCB( uiProcessIdentifyTimeChange );
        ; Setup parameters for call to function bdb_RegisterIdentifyTimeChangeCB
        MOV     R2,#`??uiProcessIdentifyTimeChange::?relay` & 0xff
        MOV     R3,#(`??uiProcessIdentifyTimeChange::?relay` >> 8) & 0xff
        LCALL   `??bdb_RegisterIdentifyTimeChangeCB::?relay`; Banked call to: bdb_RegisterIdentifyTimeChangeCB
// 1815   bdb_RegisterBindNotificationCB( uiProcessBindNotification );
        ; Setup parameters for call to function bdb_RegisterBindNotificationCB
        MOV     R2,#`??uiProcessBindNotification::?relay` & 0xff
        MOV     R3,#(`??uiProcessBindNotification::?relay` >> 8) & 0xff
        LCALL   `??bdb_RegisterBindNotificationCB::?relay`; Banked call to: bdb_RegisterBindNotificationCB
// 1816   
// 1817 #ifdef BDB_TL_TARGET
// 1818   bdb_RegisterTouchlinkTargetEnableCB( uiProcessTouchlinkTargetEnable );
// 1819 #endif
// 1820 
// 1821   bdb_StartCommissioning(BDB_COMMISSIONING_REJOIN_EXISTING_NETWORK_ON_STARTUP);
        ; Setup parameters for call to function bdb_StartCommissioning
        MOV     R1,#0x0
        LCALL   `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
// 1822 }
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock219

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond220 Using cfiCommon0
          CFI Function UI_UpdateLcd
          CFI Conditional ??CrossCallReturnLabel_56
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 76)
          CFI Block cfiCond221 Using cfiCommon0
          CFI (cfiCond221) Function UI_Init
          CFI (cfiCond221) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond221) CFA_SP SP+-2
          CFI (cfiCond221) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker222 Using cfiCommon1
          CFI (cfiPicker222) NoFunction
          CFI (cfiPicker222) Picker
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_82:
        MOV     R1,A
        MOV     DPTR,#uiAppStatesMain
        RET
          CFI EndBlock cfiCond220
          CFI EndBlock cfiCond221
          CFI EndBlock cfiPicker222
// 1823 
// 1824 /*********************************************************************
// 1825  * @fn      uiProcessTouchlinkTargetEnable
// 1826  *
// 1827  * @brief   Uopdate the UI when the touchlink target functionality is enabled or disabled
// 1828  *
// 1829  * @param   enable - the current state of the touchlink target (0 - disabled; 1 - enabled)
// 1830  *
// 1831  * @return  none
// 1832  */
// 1833 #ifdef BDB_TL_TARGET
// 1834 static void uiProcessTouchlinkTargetEnable( uint8 enable )
// 1835 {
// 1836   if ( enable )
// 1837   {
// 1838     uiNwkOpenState |= NWK_OPEN_TOUCHLINK_AS_TARGET;
// 1839   }
// 1840   else
// 1841   {
// 1842     uiNwkOpenState &= ~NWK_OPEN_TOUCHLINK_AS_TARGET;
// 1843   }
// 1844 
// 1845   HalLedBlink ( UI_LED_NETWORK_OPEN_STATE, 0, uiNetworkOpenStateLedDutyCycle[uiNwkOpenState], HAL_LED_DEFAULT_FLASH_TIME );
// 1846 
// 1847   UI_UpdateLcd();
// 1848 }
// 1849 #endif
// 1850 
// 1851 /*********************************************************************
// 1852  * @fn      uiProcessIdentifyTimeChange
// 1853  *
// 1854  * @brief   Uopdate the UI when the identify time attribute's value has changed
// 1855  *
// 1856  * @param   endpoint - the endpoints which had its identify time attribute changed
// 1857  *
// 1858  * @return  none
// 1859  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1860 static void uiProcessIdentifyTimeChange( uint8 endpoint )
uiProcessIdentifyTimeChange:
          CFI Block cfiBlock223 Using cfiCommon0
          CFI Function uiProcessIdentifyTimeChange
        CODE
// 1861 {
        FUNCALL uiProcessIdentifyTimeChange, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uiProcessIdentifyTimeChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1862   if ( *pUiIdentifyTimeAttribute > 0 )
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_79:
        JZ      ??uiProcessIdentifyTimeChange_0
// 1863   {
// 1864     HalLedBlink ( UI_LED_IDENTIFY, 0xFF, UI_LED_IDENTIFY_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R3,#0x32
        MOV     R2,#-0x1
        MOV     R1,#0x4
        LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
        SJMP    ??uiProcessIdentifyTimeChange_1
// 1865   }
// 1866   else
// 1867   {
// 1868     HalLedSet ( UI_LED_IDENTIFY, HAL_LED_MODE_OFF );
??uiProcessIdentifyTimeChange_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x4
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
// 1869   }
// 1870 }
??uiProcessIdentifyTimeChange_1:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock223
// 1871 
// 1872 /*********************************************************************
// 1873  * @fn      uiProcessBindNotification
// 1874  *
// 1875  * @brief   Uopdate the UI when a bind is added
// 1876  *
// 1877  * @param   data - information about the new binding entry
// 1878  *
// 1879  * @return  none
// 1880  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1881 static void uiProcessBindNotification( bdbBindNotificationData_t *data )
uiProcessBindNotification:
          CFI Block cfiBlock224 Using cfiCommon0
          CFI Function uiProcessBindNotification
        CODE
// 1882 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1883   //note: 'data' argument contains information about the new binding, which can be useful for the user's application
// 1884 
// 1885   if (FBMatchesFound < 255)
        MOV     DPTR,#FBMatchesFound
        MOVX    A,@DPTR
        CPL     A
        JZ      ??uiProcessBindNotification_0
// 1886   {
// 1887     FBMatchesFound++;
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
// 1888   }
// 1889 }
??uiProcessBindNotification_0:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock224
// 1890 
// 1891 /*********************************************************************
// 1892  * @fn      UI_DeviceStateUpdated
// 1893  *
// 1894  * @brief   Uopdate the UI when the device state has changed
// 1895  *
// 1896  * @param   NwkState - the new network-state of the device
// 1897  *
// 1898  * @return  none
// 1899  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1900 void UI_DeviceStateUpdated(devStates_t NwkState)
UI_DeviceStateUpdated:
          CFI Block cfiBlock225 Using cfiCommon0
          CFI Function UI_DeviceStateUpdated
        CODE
// 1901 {
        FUNCALL UI_DeviceStateUpdated, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UI_DeviceStateUpdated, UI_UpdateLcd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
// 1902   uint8 LedDutyCycle;
// 1903 
// 1904   uiNwkStateShadow = NwkState;
        MOV     DPTR,#uiNwkStateShadow
        MOVX    @DPTR,A
// 1905 
// 1906   switch (NwkState)
        ADD     A,#-0x6
        JZ      ??UI_DeviceStateUpdated_0
        DEC     A
        JZ      ??UI_DeviceStateUpdated_1
        ADD     A,#-0x2
        JNZ     ??UI_DeviceStateUpdated_2
// 1907   {
// 1908     case DEV_ZB_COORD:
// 1909       LedDutyCycle = UI_LED_COORDINATOR_DUTY_CYCLE;
        MOV     R3,#0x4b
// 1910       break;
        SJMP    ??UI_DeviceStateUpdated_3
// 1911     case DEV_ROUTER:
// 1912       LedDutyCycle = UI_LED_ROUTER_DUTY_CYCLE;
??UI_DeviceStateUpdated_1:
        MOV     R3,#0x5f
// 1913       break;
        SJMP    ??UI_DeviceStateUpdated_3
// 1914     case DEV_END_DEVICE:
// 1915       LedDutyCycle = UI_LED_END_DEVICE_DUTY_CYCLE;
??UI_DeviceStateUpdated_0:
        MOV     R3,#0x64
// 1916       break;
        SJMP    ??UI_DeviceStateUpdated_3
// 1917     default:
// 1918       LedDutyCycle = 0;
??UI_DeviceStateUpdated_2:
        MOV     R3,#0x0
// 1919       break;
// 1920   }
// 1921   
// 1922   HalLedBlink ( UI_LED_DEVICE_STATE, 0, LedDutyCycle, UI_LED_DEVICE_STATE_FLASH_TIME );
??UI_DeviceStateUpdated_3:
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x60
        MOV     R5,#0xf
        MOV     R2,#0x0
        MOV     R1,#0x2
        LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
// 1923 
// 1924   UI_UpdateLcd();
        ; Setup parameters for call to function UI_UpdateLcd
        LCALL   `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
// 1925 }
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock225

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for uiLcdCursorLine>`:
        DATA8
        DB 255

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for uiSelectedBdbComissioningMod`:
        DATA8
        DB 14

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for uiAddInstallCodeLastStatus>`:
        DATA8
        DB 255

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for uiCommissioningStateStr>`:
        DATA16
        DW `?<Constant "--">`

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for uiInstallCode>`:
        DATA8
        DB 131
        DB 254
        DB 211
        DB 64
        DB 122
        DB 147
        DB 151
        DB 35
        DB 165
        DB 198
        DB 57
        DB 178
        DB 105
        DB 22
        DB 213
        DB 5
        DB 195
        DB 181

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for uiStates>`:
        DATA16
        DW gui_states_main

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for uiNetworkOpenStateLedDutyCyc`:
        DATA8
        DB 0
        DB 25
        DB 75
        DB 100

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiUintToString::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiUintToString

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiArrayToString::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiArrayToString

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiCreateChannelMaskString::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiCreateChannelMaskString

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiActionMenuJump::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiActionMenuJump

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiActionStartComissioning::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiActionStartComissioning

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiActionSetInstallCode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiActionSetInstallCode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiActionAppSecificMenu::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiActionAppSecificMenu

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UI_ActionBackFromAppMenu::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UI_ActionBackFromAppMenu

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiActionProcessConfigureChannels::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiActionProcessConfigureChannels

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiActionProcessConfigurePanId::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiActionProcessConfigurePanId

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiActionProcessPrepareInstallCode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiActionProcessPrepareInstallCode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiActionConfigureEnables::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiActionConfigureEnables

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiActionResetToFactoryNew::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiActionResetToFactoryNew

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UI_MainStateMachine::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UI_MainStateMachine

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UI_UpdateComissioningStatus::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UI_UpdateComissioningStatus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UI_UpdateLcd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UI_UpdateLcd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiProcessPermitJoin::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiProcessPermitJoin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UI_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UI_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiProcessIdentifyTimeChange::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiProcessIdentifyTimeChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uiProcessBindNotification::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uiProcessBindNotification

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UI_DeviceStateUpdated::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UI_DeviceStateUpdated

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "--">`:
        DB "--"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EXST">`:
        DB "EXST"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "NF">`:
        DB "NF"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "FORM">`:
        DB "FORM"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "NS">`:
        DB "NS"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "JOIN">`:
        DB "JOIN"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "FB">`:
        DB "FB"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "IN">`:
        DB "IN"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "PL">`:
        DB "PL"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<     BACK     >">`:
        DB "<     BACK     >"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ENABLED">`:
        DB "ENABLED"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "DISABLED">`:
        DB "DISABLED"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<FINDNG+BINDNG >">`:
        DB "<FINDNG+BINDNG >"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<NWK FORMATION >">`:
        DB "<NWK FORMATION >"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "< NWK STEERING >">`:
        DB "< NWK STEERING >"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<  CONFIGURE   >">`:
        DB "<  CONFIGURE   >"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Resetting,">`:
        DB "Resetting,"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Please wait...">`:
        DB "Please wait..."

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "< RESET TO FN  >">`:
        DB "< RESET TO FN  >"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "hold OK for help">`:
        DB "hold OK for help"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<     HELP     >">`:
        DB "<     HELP     >"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\033 \\032 to move     ">`:
        DB "\033 \032 to move     "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\030 \\031 change value">`:
        DB "\030 \031 change value"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "OK to execute   ">`:
        DB "OK to execute   "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Please wait...  ">`:
        DB "Please wait...  "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "xx              ">`:
        DB "xx              "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "NotOnNwk">`:
        DB "NotOnNwk"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Open">`:
        DB "Open"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "CLOSED">`:
        DB "CLOSED"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Id000 Srch000/00">`:
        DB "Id000 Srch000/00"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<  COMMISSION  >">`:
        DB "<  COMMISSION  >"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<ADD INSTL CODE>">`:
        DB "<ADD INSTL CODE>"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<SET INSTL CODE>">`:
        DB "<SET INSTL CODE>"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Last status:">`:
        DB "Last status:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant "---">`:
        DB "---"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SUCCESS">`:
        DB "SUCCESS"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ERROR (0x  )    ">`:
        DB "ERROR (0x  )    "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<APLY INST CODE>">`:
        DB "<APLY INST CODE>"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "       INST CODE">`:
        DB "       INST CODE"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<   APP MENU   >">`:
        DB "<   APP MENU   >"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "1234567890123456">`:
        DB "1234567890123456"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<PRI CHANL MASK>">`:
        DB "<PRI CHANL MASK>"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<SEC CHANL MASK>">`:
        DB "<SEC CHANL MASK>"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant " PRI CHANL MASK ">`:
        DB " PRI CHANL MASK "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant " SEC CHANL MASK ">`:
        DB " SEC CHANL MASK "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "    0xFFFF (any)">`:
        DB "    0xFFFF (any)"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "    0x          ">`:
        DB "    0x          "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "<    PAN ID    >">`:
        DB "<    PAN ID    >"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "     PAN ID     ">`:
        DB "     PAN ID     "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "nxxxx cxx axxxx ">`:
        DB "nxxxx cxx axxxx "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "          <INFO>">`:
        DB "          <INFO>"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ZC">`:
        DB "ZC"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ZR DIST">`:
        DB "ZR DIST"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ZR CENT">`:
        DB "ZR CENT"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ZED p">`:
        DB "ZED p"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ZED (   )">`:
        DB "ZED (   )"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_fa:
        DD 250

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1f4:
        DD 500

        END
// 1926 
// 
// 5 203 bytes in segment BANKED_CODE
//   126 bytes in segment BANK_RELAYS
//    29 bytes in segment XDATA_I
//    29 bytes in segment XDATA_ID
//   841 bytes in segment XDATA_ROM_C
//    29 bytes in segment XDATA_Z
// 
// 5 358 bytes of CODE  memory
//   833 bytes of CONST memory (+ 8 bytes shared)
//    58 bytes of XDATA memory
//
//Errors: none
//Warnings: none
