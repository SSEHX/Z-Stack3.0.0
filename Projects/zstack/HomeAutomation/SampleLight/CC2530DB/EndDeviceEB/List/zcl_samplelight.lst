###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                26/Oct/2017  14:48:35
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
#        Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c"
#        -D BDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D
#        NV_RESTORE -D xPOWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK
#        -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
#        xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D
#        ZCL_SCENES -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -lC "C:\Texas
#        Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
#        -lA "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
#        "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List\zcl_samplelight.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\Obj\zcl_samplelight.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack 3.0.0\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
      1          /**************************************************************************************************
      2            Filename:       zcl_sampleLight.c
      3            Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
      4            Revision:       $Revision: 40796 $
      5          
      6          
      7            Description:    Zigbee Cluster Library - sample light application.
      8          
      9          
     10            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42            This application implements a ZigBee Light, based on Z-Stack 3.0. It can be configured as an
     43            On/Off light or as a dimmable light, by undefining or defining ZCL_LEVEL_CTRL, respectively.
     44          
     45            This application is based on the common sample-application user interface. Please see the main
     46            comment in zcl_sampleapp_ui.c. The rest of this comment describes only the content specific for
     47            this sample applicetion.
     48            
     49            Application-specific UI peripherals being used:
     50          
     51            - LEDs:
     52              LED1 reflect the current light state (On / Off accordingly).
     53          
     54            Application-specific menu system:
     55          
     56              <TOGGLE LIGHT> Toggle the local light and display its status and level
     57                Press OK to toggle the local light on and off.
     58                This screen shows the following information
     59                  Line1: (only populated if ZCL_LEVEL_CTRL is defined)
     60                    LEVEL XXX - xxx is the current level of the light if the light state is ON, or the target level
     61                      of the light when the light state is off. The target level is the level that the light will be
     62                      set to when it is switched from off to on using the on or the toggle commands.
     63                  Line2:
     64                    LIGHT OFF / ON: shows the current state of the light.
     65                Note when ZCL_LEVEL_CTRL is enabled:
     66                  - If the light state is ON and the light level is X, and then the light receives the OFF or TOGGLE 
     67                    commands: The level will decrease gradually until it reaches 1, and only then the light state will
     68                    be changed to OFF. The level then will be restored to X, with the state staying OFF. At this stage
     69                    the light is not lighting, and the level represent the target level for the next ON or TOGGLE 
     70                    commands.
     71                  - If the light state is OFF and the light level is X, and then the light receives the ON or TOGGLE
     72                    commands; The level will be set to 1, the light state will be set to ON, and then the level will
     73                    increase gradually until it reaches level X.
     74                  - Any level-setting command will affect the level directly, and may also affect the on/off state,
     75                    depending on the command's arguments.       
     76          
     77          *********************************************************************/
     78          
     79          /*********************************************************************
     80           * INCLUDES
     81           */
     82          #include "ZComDef.h"
     83          #include "OSAL.h"
     84          #include "AF.h"
     85          #include "ZDApp.h"
     86          #include "ZDObject.h"
     87          #include "MT_SYS.h"
     88          
     89          #include "nwk_util.h"
     90          
     91          #include "zcl.h"
     92          #include "zcl_general.h"
     93          #include "zcl_ha.h"
     94          #include "zcl_diagnostic.h"
     95          
     96          #include "zcl_samplelight.h"
     97             
     98          #include "bdb.h"
     99          #include "bdb_interface.h"
    100          
    101           //GP_UPDATE
    102          #include "gp_interface.h"
    103             
    104          #include "onboard.h"
    105          
    106          /* HAL */
    107          #include "hal_lcd.h"
    108          #include "hal_led.h"
    109          #include "hal_key.h"
    110          
    111          #include "NLMEDE.h"
    112          
    113          // Added to include TouchLink initiator functionality 
    114          #if defined ( BDB_TL_INITIATOR )
    115            #include "bdb_touchlink_initiator.h"
    116          #endif // BDB_TL_INITIATOR
    117          
    118          #if defined ( BDB_TL_TARGET )
    119            #include "bdb_touchlink_target.h"
    120          #endif // BDB_TL_TARGET
    121          
    122          #if defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET )
    123            #include "bdb_touchlink.h"
    124          #endif
    125          
    126          #include "zcl_sampleapps_ui.h"
    127          
    128          /*********************************************************************
    129           * MACROS
    130           */
    131          #define UI_STATE_TOGGLE_LIGHT 1 //UI_STATE_BACK_FROM_APP_MENU is item #0, so app item numbers should start from 1
    132          
    133          #define APP_TITLE "TI Sample Light"
    134          
    135          /*********************************************************************
    136           * TYPEDEFS
    137           */
    138          
    139          /*********************************************************************
    140           * GLOBAL VARIABLES
    141           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          byte zclSampleLight_TaskID;
   \                     zclSampleLight_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          uint8 zclSampleLightSeqNum;
   \                     zclSampleLightSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    144          
    145          /*********************************************************************
    146           * GLOBAL FUNCTIONS
    147           */
    148          extern void TestingDecrypt(void);
    149          /*********************************************************************
    150           * LOCAL VARIABLES
    151           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          afAddrType_t zclSampleLight_DstAddr;
   \                     zclSampleLight_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    153          
    154          // Test Endpoint to allow SYS_APP_MSGs

   \                                 In  segment XDATA_I, align 1, keep-with-next
    155          static endPointDesc_t sampleLight_TestEp =
   \                     sampleLight_TestEp:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for sampleLight_TestEp>`
   \   000007                REQUIRE __INIT_XDATA_I
    156          {
    157            SAMPLELIGHT_ENDPOINT,
    158            0,
    159            &zclSampleLight_TaskID,
    160            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    161            (afNetworkLatencyReq_t)0            // No Network Latency req
    162          };
    163          
    164          #ifdef ZCL_LEVEL_CTRL
    165          uint8 zclSampleLight_WithOnOff;       // set to TRUE if state machine should set light on/off
    166          uint8 zclSampleLight_NewLevel;        // new level when done moving
    167          uint8 zclSampleLight_LevelChangeCmd; // current level change was triggered by an on/off command
    168          bool  zclSampleLight_NewLevelUp;      // is direction to new level up or down?
    169          int32 zclSampleLight_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
    170          int32 zclSampleLight_Rate32;          // rate in units, fixed point (e.g. 16.123)
    171          uint8 zclSampleLight_LevelLastLevel;  // to save the Current Level before the light was turned OFF
    172          #endif
    173          
    174          /*********************************************************************
    175           * LOCAL FUNCTIONS
    176           */
    177          static void zclSampleLight_HandleKeys( byte shift, byte keys );
    178          static void zclSampleLight_BasicResetCB( void );
    179          static void zclSampleLight_OnOffCB( uint8 cmd );
    180          //GP_UPDATE
    181          #if (ZG_BUILD_RTR_TYPE)
    182          static void gp_CommissioningMode(bool isEntering);
    183          static uint8 gp_ChangeChannelReq(void);
    184          #endif
    185          
    186          
    187          static void zclSampleLight_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg);
    188          
    189          
    190          #ifdef ZCL_LEVEL_CTRL
    191          static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
    192          static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd );
    193          static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd );
    194          static void zclSampleLight_LevelControlStopCB( void );
    195          static void zclSampleLight_DefaultMove( uint8 OnOff );
    196          static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel );
    197          static uint16 zclSampleLight_GetTime ( uint8 level, uint16 time );
    198          static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate );
    199          static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time );
    200          static void zclSampleLight_AdjustLightLevel( void );
    201          #endif
    202          
    203          // Functions to process ZCL Foundation incoming Command/Response messages
    204          static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    205          #ifdef ZCL_READ
    206          static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    207          #endif
    208          #ifdef ZCL_WRITE
    209          static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    210          #endif
    211          static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    212          #ifdef ZCL_DISCOVER
    213          static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    214          static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    215          static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    216          #endif
    217          
    218          void zclSampleLight_UiActionToggleLight(uint16 keys);
    219          void zclSampleLight_UiUpdateLcd(uint8 uiCurrentState, char * line[3]);
    220          void zclSampleLight_UpdateLedState(void);
    221          
    222          /*********************************************************************
    223           * CONSTANTS
    224           */

   \                                 In  segment XDATA_ROM_C, align 1
    225          const uiState_t zclSampleLight_UiStatesMain[] = 
   \                     zclSampleLight_UiStatesMain:
   \   000000   FE           DB 254
   \   000001   01           DB 1
   \   000002   0400         DW 4
   \   000004   ....         DW `??UI_ActionBackFromAppMenu::?relay`
   \   000006   00           DB 0
   \   000007   FE           DB 254
   \   000008   0400         DW 4
   \   00000A   ....         DW `??zclSampleLight_UiActionToggleLight::?relay`
    226          {
    227            /*  UI_STATE_BACK_FROM_APP_MENU  */   {UI_STATE_DEFAULT_MOVE,       UI_STATE_TOGGLE_LIGHT,  UI_KEY_SW_5_PRESSED, &UI_ActionBackFromAppMenu}, //do not change this line, except for the second item, which should point to the last entry in this menu
    228            /*  UI_STATE_TOGGLE_LIGHT        */   {UI_STATE_BACK_FROM_APP_MENU, UI_STATE_DEFAULT_MOVE,  UI_KEY_SW_5_PRESSED, &zclSampleLight_UiActionToggleLight},
    229          };
    230          
    231          #define LEVEL_CHANGED_BY_LEVEL_CMD  0
    232          #define LEVEL_CHANGED_BY_ON_CMD     1
    233          #define LEVEL_CHANGED_BY_OFF_CMD    2
    234          
    235          /*********************************************************************
    236           * STATUS STRINGS
    237           */
    238          #ifdef LCD_SUPPORTED

   \                                 In  segment XDATA_ROM_C, align 1
    239            const char sLightOn[]      = "   LIGHT ON     ";
   \                     sLightOn:
   \   000000   2020204C     DB "   LIGHT ON     "
   \            49474854
   \            204F4E20
   \            20202020
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    240            const char sLightOff[]     = "   LIGHT OFF    ";
   \                     sLightOff:
   \   000000   2020204C     DB "   LIGHT OFF    "
   \            49474854
   \            204F4646
   \            20202020
   \            00      
    241            #ifdef ZCL_LEVEL_CTRL
    242              char sLightLevel[]        = "   LEVEL ###    "; // displays level 1-254
    243            #endif
    244          #endif
    245          
    246          /*********************************************************************
    247           * REFERENCED EXTERNALS
    248           */
    249          extern int16 zdpExternalStateTaskID;
    250          
    251          /*********************************************************************
    252           * ZCL General Profile Callback table
    253           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    254          static zclGeneral_AppCallbacks_t zclSampleLight_CmdCallbacks =
   \                     zclSampleLight_CmdCallbacks:
   \   000000                DS 24
   \   000018                REQUIRE `?<Initializer for zclSampleLight_CmdCallbacks>`
   \   000018                REQUIRE __INIT_XDATA_I
    255          {
    256            zclSampleLight_BasicResetCB,            // Basic Cluster Reset command
    257            NULL,                                   // Identify Trigger Effect command
    258            zclSampleLight_OnOffCB,                 // On/Off cluster commands
    259            NULL,                                   // On/Off cluster enhanced command Off with Effect
    260            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    261            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    262          #ifdef ZCL_LEVEL_CTRL
    263            zclSampleLight_LevelControlMoveToLevelCB, // Level Control Move to Level command
    264            zclSampleLight_LevelControlMoveCB,        // Level Control Move command
    265            zclSampleLight_LevelControlStepCB,        // Level Control Step command
    266            zclSampleLight_LevelControlStopCB,        // Level Control Stop command
    267          #endif
    268          #ifdef ZCL_GROUPS
    269            NULL,                                   // Group Response commands
    270          #endif
    271          #ifdef ZCL_SCENES
    272            NULL,                                  // Scene Store Request command
    273            NULL,                                  // Scene Recall Request command
    274            NULL,                                  // Scene Response command
    275          #endif
    276          #ifdef ZCL_ALARMS
    277            NULL,                                  // Alarm (Response) commands
    278          #endif
    279          #ifdef SE_UK_EXT
    280            NULL,                                  // Get Event Log command
    281            NULL,                                  // Publish Event Log command
    282          #endif
    283            NULL,                                  // RSSI Location command
    284            NULL                                   // RSSI Location Response command
    285          };
    286          
    287          /*********************************************************************
    288           * @fn          zclSampleLight_Init
    289           *
    290           * @brief       Initialization function for the zclGeneral layer.
    291           *
    292           * @param       none
    293           *
    294           * @return      none
    295           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    296          void zclSampleLight_Init( byte task_id )
   \                     zclSampleLight_Init:
    297          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    298            zclSampleLight_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000009   F0           MOVX    @DPTR,A
    299          
    300            // Set destination address to indirect
    301            zclSampleLight_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000A   90....       MOV     DPTR,#zclSampleLight_DstAddr + 8
   \   00000D   E4           CLR     A
   \   00000E   F0           MOVX    @DPTR,A
    302            zclSampleLight_DstAddr.endPoint = 0;
   \   00000F   A3           INC     DPTR
   \   000010   F0           MOVX    @DPTR,A
    303            zclSampleLight_DstAddr.addr.shortAddr = 0;
   \   000011   90....       MOV     DPTR,#zclSampleLight_DstAddr
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   F0           MOVX    @DPTR,A
    304          
    305            // Register the Simple Descriptor for this application
    306            bdb_RegisterSimpleDescriptor( &zclSampleLight_SimpleDesc );
   \   000017                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   000017   7A..         MOV     R2,#zclSampleLight_SimpleDesc & 0xff
   \   000019   7B..         MOV     R3,#(zclSampleLight_SimpleDesc >> 8) & 0xff
   \   00001B   12....       LCALL   `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    307          
    308            // Register the ZCL General Cluster Library callback functions
    309            zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zclSampleLight_CmdCallbacks );
   \   00001E                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   00001E   7A..         MOV     R2,#zclSampleLight_CmdCallbacks & 0xff
   \   000020   7B..         MOV     R3,#(zclSampleLight_CmdCallbacks >> 8) & 0xff
   \   000022   7908         MOV     R1,#0x8
   \   000024   12....       LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    310          
    311            // Register the application's attribute list
    312            zclSampleLight_ResetAttributesToDefaultValues();
   \   000027                ; Setup parameters for call to function zclSampleLight_ResetAttributesToDefaultValues
   \   000027   12....       LCALL   ??zclSampleLight_ResetAttributesToDefaultValues; Banked call to: zclSampleLight_ResetAttributesToDefaultValues
    313            zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zclSampleLight_NumAttributes, zclSampleLight_Attrs );
   \   00002A                ; Setup parameters for call to function zcl_registerAttrList
   \   00002A   7C..         MOV     R4,#zclSampleLight_Attrs & 0xff
   \   00002C   7D..         MOV     R5,#(zclSampleLight_Attrs >> 8) & 0xff
   \   00002E   90....       MOV     DPTR,#zclSampleLight_NumAttributes
   \   000031   E4           CLR     A
   \   000032   93           MOVC    A,@A+DPTR
   \   000033   FA           MOV     R2,A
   \   000034   7908         MOV     R1,#0x8
   \   000036   12....       LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    314          
    315          #ifdef ZCL_LEVEL_CTRL
    316            zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
    317          #endif
    318          
    319            // Register the Application to receive the unprocessed Foundation command/response messages
    320            zcl_registerForMsg( zclSampleLight_TaskID );
   \   000039                ; Setup parameters for call to function zcl_registerForMsg
   \   000039   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F9           MOV     R1,A
   \   00003E   12....       LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    321          
    322          #ifdef ZCL_DISCOVER
    323            // Register the application's command list
    324            zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zclSampleLight_Cmds );
    325          #endif
    326          
    327            // Register for all key events - This app will handle all key events
    328            RegisterForKeys( zclSampleLight_TaskID );
   \   000041                ; Setup parameters for call to function RegisterForKeys
   \   000041   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F9           MOV     R1,A
   \   000046   12....       LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    329            
    330            bdb_RegisterCommissioningStatusCB( zclSampleLight_ProcessCommissioningStatus );
   \   000049                ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
   \   000049   7A..         MOV     R2,#`??zclSampleLight_ProcessCommissioningStatus::?r` & 0xff
   \   00004B   7B..         MOV     R3,#(`??zclSampleLight_ProcessCommissioningStatus::?r` >> 8) & 0xff
   \   00004D   12....       LCALL   `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
    331            
    332            // Register for a test endpoint
    333            afRegister( &sampleLight_TestEp );
   \   000050                ; Setup parameters for call to function afRegister
   \   000050   7A..         MOV     R2,#sampleLight_TestEp & 0xff
   \   000052   7B..         MOV     R3,#(sampleLight_TestEp >> 8) & 0xff
   \   000054   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    334          
    335          #ifdef ZCL_DIAGNOSTIC
    336            // Register the application's callback function to read/write attribute data.
    337            // This is only required when the attribute data format is unknown to ZCL.
    338            zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
    339          
    340            if ( zclDiagnostic_InitStats() == ZSuccess )
    341            {
    342              // Here the user could start the timer to save Diagnostics to NV
    343            }
    344          #endif
    345            
    346          //GP_UPDATE  
    347          #if (ZG_BUILD_RTR_TYPE)  
    348            gp_RegisterCommissioningModeCB(gp_CommissioningMode);
    349            gp_RegisterGPChangeChannelReqCB(gp_ChangeChannelReq);
    350          #endif
    351            
    352            zdpExternalStateTaskID = zclSampleLight_TaskID;
   \   000057   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   90....       MOV     DPTR,#zdpExternalStateTaskID
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   E4           CLR     A
   \   000061   F0           MOVX    @DPTR,A
    353          
    354            UI_Init(zclSampleLight_TaskID, SAMPLEAPP_LCD_AUTO_UPDATE_EVT, SAMPLEAPP_KEY_AUTO_REPEAT_EVT, &zclSampleLight_IdentifyTime, APP_TITLE, &zclSampleLight_UiUpdateLcd, zclSampleLight_UiStatesMain);
   \   000062                ; Setup parameters for call to function UI_Init
   \   000062   75....       MOV     ?V0,#zclSampleLight_UiStatesMain & 0xff
   \   000065   75....       MOV     ?V1,#(zclSampleLight_UiStatesMain >> 8) & 0xff
   \   000068   78..         MOV     R0,#?V0
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006D   75....       MOV     ?V0,#`??zclSampleLight_UiUpdateLcd::?relay` & 0xff
   \   000070   75....       MOV     ?V1,#(`??zclSampleLight_UiUpdateLcd::?relay` >> 8) & 0xff
   \   000073   78..         MOV     R0,#?V0
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   75....       MOV     ?V0,#`?<Constant "TI Sample Light">` & 0xff
   \   00007B   75....       MOV     ?V1,#(`?<Constant "TI Sample Light">` >> 8) & 0xff
   \   00007E   78..         MOV     R0,#?V0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   75....       MOV     ?V0,#zclSampleLight_IdentifyTime & 0xff
   \   000086   75....       MOV     ?V1,#(zclSampleLight_IdentifyTime >> 8) & 0xff
   \   000089   78..         MOV     R0,#?V0
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008E   7C20         MOV     R4,#0x20
   \   000090   7D00         MOV     R5,#0x0
   \   000092   7A10         MOV     R2,#0x10
   \   000094   7B00         MOV     R3,#0x0
   \   000096   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   F9           MOV     R1,A
   \   00009B   12....       LCALL   `??UI_Init::?relay`  ; Banked call to: UI_Init
   \   00009E   7408         MOV     A,#0x8
   \   0000A0   12....       LCALL   ?DEALLOC_XSTACK8
    355          
    356            UI_UpdateLcd();
   \   0000A3                ; Setup parameters for call to function UI_UpdateLcd
   \   0000A3                REQUIRE ?Subroutine0
   \   0000A3                ; // Fall through to label ?Subroutine0
    357          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    358          
    359          /*********************************************************************
    360           * @fn          zclSample_event_loop
    361           *
    362           * @brief       Event Loop Processor for zclGeneral.
    363           *
    364           * @param       none
    365           *
    366           * @return      none
    367           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    368          uint16 zclSampleLight_event_loop( uint8 task_id, uint16 events )
   \                     zclSampleLight_event_loop:
    369          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    370            afIncomingMSGPacket_t *MSGpkt;
    371          
    372            (void)task_id;  // Intentionally unreferenced parameter
    373          
    374            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   701E         JNZ     ??zclSampleLight_event_loop_0
    375            {
    376              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleLight_TaskID )) )
    377              {
    378                switch ( MSGpkt->hdr.event )
    379                {
    380                  case ZCL_INCOMING_MSG:
    381                    // Incoming ZCL Foundation command/response messages
    382                    zclSampleLight_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    383                    break;
    384          
    385                  case KEY_CHANGE:
    386                    zclSampleLight_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    387                    break;
    388          
    389                  case ZDO_STATE_CHANGE:
    390                    UI_DeviceStateUpdated((devStates_t)(MSGpkt->hdr.status));
    391                    break;
    392          
    393                  default:
    394                    break;
    395                }
    396          
    397                // Release the memory
    398                osal_msg_deallocate( (uint8 *)MSGpkt );
    399              }
    400          
    401              // return unprocessed events
    402              return (events ^ SYS_EVENT_MSG);
    403            }
    404          
    405          #ifdef ZCL_LEVEL_CTRL
    406            if ( events & SAMPLELIGHT_LEVEL_CTRL_EVT )
    407            {
    408              zclSampleLight_AdjustLightLevel();
    409              return ( events ^ SAMPLELIGHT_LEVEL_CTRL_EVT );
    410            }
    411          #endif
    412          
    413          #if ZG_BUILD_ENDDEVICE_TYPE    
    414            if ( events & SAMPLEAPP_END_DEVICE_REJOIN_EVT )
   \   00000D   EE           MOV     A,R6
   \   00000E   5404         ANL     A,#0x4
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??zclSampleLight_event_loop_1 & 0xFFFF
    415            {
    416              bdb_ZedAttemptRecoverNwk();
   \   000015                ; Setup parameters for call to function bdb_ZedAttemptRecoverNwk
   \   000015   12....       LCALL   `??bdb_ZedAttemptRecoverNwk::?relay`; Banked call to: bdb_ZedAttemptRecoverNwk
    417              return ( events ^ SAMPLEAPP_END_DEVICE_REJOIN_EVT );
   \   000018   EE           MOV     A,R6
   \   000019   6404         XRL     A,#0x4
   \   00001B   02....       LJMP    ??zclSampleLight_event_loop_2 & 0xFFFF
    418            }
   \                     ??zclSampleLight_event_loop_3:
   \   00001E                ; Setup parameters for call to function UI_DeviceStateUpdated
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F9           MOV     R1,A
   \   000021   12....       LCALL   `??UI_DeviceStateUpdated::?relay`; Banked call to: UI_DeviceStateUpdated
   \                     ??zclSampleLight_event_loop_4:
   \   000024                ; Setup parameters for call to function osal_msg_deallocate
   \   000024   AA..         MOV     R2,?V0
   \   000026   AB..         MOV     R3,?V1
   \   000028   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclSampleLight_event_loop_0:
   \   00002B                ; Setup parameters for call to function osal_msg_receive
   \   00002B   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000033   8A..         MOV     ?V0,R2
   \   000035   8B..         MOV     ?V1,R3
   \   000037   EA           MOV     A,R2
   \   000038   45..         ORL     A,?V1
   \   00003A   6066         JZ      ??zclSampleLight_event_loop_5
   \   00003C   8A82         MOV     DPL,R2
   \   00003E   8B83         MOV     DPH,R3
   \   000040   E0           MOVX    A,@DPTR
   \   000041   24CC         ADD     A,#-0x34
   \   000043   600A         JZ      ??zclSampleLight_event_loop_6
   \   000045   2474         ADD     A,#0x74
   \   000047   604D         JZ      ??zclSampleLight_event_loop_7
   \   000049   24EF         ADD     A,#-0x11
   \   00004B   60D1         JZ      ??zclSampleLight_event_loop_3
   \   00004D   80D5         SJMP    ??zclSampleLight_event_loop_4
   \                     ??zclSampleLight_event_loop_6:
   \   00004F   EA           MOV     A,R2
   \   000050   2417         ADD     A,#0x17
   \   000052   F8           MOV     R0,A
   \   000053   E4           CLR     A
   \   000054   35..         ADDC    A,?V1
   \   000056   F9           MOV     R1,A
   \   000057   E8           MOV     A,R0
   \   000058   FA           MOV     R2,A
   \   000059   E9           MOV     A,R1
   \   00005A   FB           MOV     R3,A
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   14           DEC     A
   \   000064   6011         JZ      ??zclSampleLight_event_loop_8
   \   000066   24FD         ADD     A,#-0x3
   \   000068   701A         JNZ     ??zclSampleLight_event_loop_9
   \   00006A   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F9           MOV     R1,A
   \   00006F   E8           MOV     A,R0
   \   000070   C3           CLR     C
   \   000071   99           SUBB    A,R1
   \   000072   5010         JNC     ??zclSampleLight_event_loop_9
   \   000074   08           INC     R0
   \   000075   80F6         SJMP    ??CrossCallReturnLabel_0
   \                     ??zclSampleLight_event_loop_8:
   \   000077   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00007A   8001         SJMP    ??zclSampleLight_event_loop_10
   \                     ??zclSampleLight_event_loop_11:
   \   00007C   08           INC     R0
   \                     ??zclSampleLight_event_loop_10:
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F9           MOV     R1,A
   \   00007F   E8           MOV     A,R0
   \   000080   C3           CLR     C
   \   000081   99           SUBB    A,R1
   \   000082   40F8         JC      ??zclSampleLight_event_loop_11
   \                     ??zclSampleLight_event_loop_9:
   \   000084   8A82         MOV     DPL,R2
   \   000086   8B83         MOV     DPH,R3
   \   000088   E0           MOVX    A,@DPTR
   \   000089   FA           MOV     R2,A
   \   00008A   A3           INC     DPTR
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   FB           MOV     R3,A
   \   00008D   EA           MOV     A,R2
   \   00008E   4B           ORL     A,R3
   \   00008F   6093         JZ      ??zclSampleLight_event_loop_4
   \   000091                ; Setup parameters for call to function osal_mem_free
   \   000091   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000094   808E         SJMP    ??zclSampleLight_event_loop_4
   \                     ??zclSampleLight_event_loop_7:
   \   000096                ; Setup parameters for call to function UI_MainStateMachine
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   FA           MOV     R2,A
   \   00009B   7B00         MOV     R3,#0x0
   \   00009D   12....       LCALL   `??UI_MainStateMachine::?relay`; Banked call to: UI_MainStateMachine
   \   0000A0   8082         SJMP    ??zclSampleLight_event_loop_4
   \                     ??zclSampleLight_event_loop_5:
   \   0000A2   EE           MOV     A,R6
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   6480         XRL     A,#0x80
   \   0000A7   801E         SJMP    ??zclSampleLight_event_loop_12
    419          #endif
    420          
    421            if ( events & SAMPLEAPP_LCD_AUTO_UPDATE_EVT )
   \                     ??zclSampleLight_event_loop_1:
   \   0000A9   EE           MOV     A,R6
   \   0000AA   5410         ANL     A,#0x10
   \   0000AC   6008         JZ      ??zclSampleLight_event_loop_13
    422            {
    423              UI_UpdateLcd();
   \   0000AE                ; Setup parameters for call to function UI_UpdateLcd
   \   0000AE   12....       LCALL   `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
    424              return ( events ^ SAMPLEAPP_LCD_AUTO_UPDATE_EVT );
   \   0000B1   EE           MOV     A,R6
   \   0000B2   6410         XRL     A,#0x10
   \   0000B4   800F         SJMP    ??zclSampleLight_event_loop_2
    425            }
    426          
    427            if ( events & SAMPLEAPP_KEY_AUTO_REPEAT_EVT )
   \                     ??zclSampleLight_event_loop_13:
   \   0000B6   EE           MOV     A,R6
   \   0000B7   5420         ANL     A,#0x20
   \   0000B9   600F         JZ      ??zclSampleLight_event_loop_14
    428            {
    429              UI_MainStateMachine(UI_KEY_AUTO_PRESSED);
   \   0000BB                ; Setup parameters for call to function UI_MainStateMachine
   \   0000BB   7AFF         MOV     R2,#-0x1
   \   0000BD   7BFF         MOV     R3,#-0x1
   \   0000BF   12....       LCALL   `??UI_MainStateMachine::?relay`; Banked call to: UI_MainStateMachine
    430              return ( events ^ SAMPLEAPP_KEY_AUTO_REPEAT_EVT );
   \   0000C2   EE           MOV     A,R6
   \   0000C3   6420         XRL     A,#0x20
   \                     ??zclSampleLight_event_loop_2:
   \   0000C5   FA           MOV     R2,A
   \   0000C6   EF           MOV     A,R7
   \                     ??zclSampleLight_event_loop_12:
   \   0000C7   FB           MOV     R3,A
   \   0000C8   8004         SJMP    ??zclSampleLight_event_loop_15
    431            }
    432          
    433            // Discard unknown events
    434            return 0;
   \                     ??zclSampleLight_event_loop_14:
   \   0000CA   7A00         MOV     R2,#0x0
   \   0000CC   7B00         MOV     R3,#0x0
   \                     ??zclSampleLight_event_loop_15:
   \   0000CE   7F04         MOV     R7,#0x4
   \   0000D0   02....       LJMP    ?BANKED_LEAVE_XDATA
    435          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D   7800         MOV     R0,#0x0
   \   00000F   22           RET
    436          
    437          
    438          /*********************************************************************
    439           * @fn      zclSampleLight_HandleKeys
    440           *
    441           * @brief   Handles all key events for this device.
    442           *
    443           * @param   shift - true if in shift/alt.
    444           * @param   keys - bit field for key events. Valid entries:
    445           *                 HAL_KEY_SW_5
    446           *                 HAL_KEY_SW_4
    447           *                 HAL_KEY_SW_2
    448           *                 HAL_KEY_SW_1
    449           *
    450           * @return  none
    451           */
    452          static void zclSampleLight_HandleKeys( byte shift, byte keys )
    453          {
    454            UI_MainStateMachine(keys);
    455          }
    456          
    457          //GP_UPDATE
    458          #if (ZG_BUILD_RTR_TYPE)
    459          /*********************************************************************
    460           * @fn      gp_CommissioningMode
    461           *
    462           * @brief   Callback that notifies the application that gp Proxy is entering 
    463           *          into commissioning mode
    464           *
    465           * @param   isEntering - 
    466           *
    467           * @return  
    468           */
    469          static void gp_CommissioningMode(bool isEntering)
    470          {
    471            if(isEntering)
    472            {
    473              //Led on indicating enter commissioning mode
    474            }
    475            else
    476            {
    477              //Led off indicating enter commissioning mode
    478            }
    479          }
    480          
    481          
    482          
    483          //GP_UPDATE
    484          /*********************************************************************
    485           * @fn      gp_ChangeChannelReq
    486           *
    487           * @brief   Callback function to notify the application about a GP commissioning 
    488           * request that will change the current channel for at most 
    489           * gpBirectionalCommissioningChangeChannelTimeout ms
    490           *
    491           * @param   channel - Channel in which the commissioning will take place
    492           *
    493           * @return  TRUE to allow change channel, FALSE to do not allow
    494           */
    495          static uint8 gp_ChangeChannelReq(void)
    496          {
    497            bool allowChangeChannel = TRUE;
    498            
    499            //Check application state to decide if allow change channel or not
    500            
    501            return allowChangeChannel;
    502          }
    503          
    504          #endif
    505          
    506          
    507          /*********************************************************************
    508           * @fn      zclSampleLight_ProcessCommissioningStatus
    509           *
    510           * @brief   Callback in which the status of the commissioning process are reported
    511           *
    512           * @param   bdbCommissioningModeMsg - Context message of the status of a commissioning process
    513           *
    514           * @return  none
    515           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    516          static void zclSampleLight_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
   \                     zclSampleLight_ProcessCommissioningStatus:
    517          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    518            switch(bdbCommissioningModeMsg->bdbCommissioningMode)
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   24FE         ADD     A,#-0x2
   \   000011   6006         JZ      ??zclSampleLight_ProcessCommissioningStatus_0
   \   000013   24FD         ADD     A,#-0x3
   \   000015   6014         JZ      ??zclSampleLight_ProcessCommissioningStatus_1
   \   000017   8032         SJMP    ??zclSampleLight_ProcessCommissioningStatus_2
    519            {
    520              case BDB_COMMISSIONING_FORMATION:
    521                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \                     ??zclSampleLight_ProcessCommissioningStatus_0:
   \   000019   8E82         MOV     DPL,R6
   \   00001B   8F83         MOV     DPH,R7
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   702B         JNZ     ??zclSampleLight_ProcessCommissioningStatus_2
    522                {
    523                  //After formation, perform nwk steering again plus the remaining commissioning modes that has not been process yet
    524                  bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
   \   000020                ; Setup parameters for call to function bdb_StartCommissioning
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   4402         ORL     A,#0x2
   \   000025   F9           MOV     R1,A
   \   000026   12....       LCALL   `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
   \   000029   8020         SJMP    ??zclSampleLight_ProcessCommissioningStatus_2
    525                }
    526                else
    527                {
    528                  //Want to try other channels?
    529                  //try with bdb_setChannelAttribute
    530                }
    531              break;
    532              case BDB_COMMISSIONING_NWK_STEERING:
    533                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    534                {
    535                  //YOUR JOB:
    536                  //We are on the nwk, what now?
    537                }
    538                else
    539                {
    540                  //See the possible errors for nwk steering procedure
    541                  //No suitable networks found
    542                  //Want to try other channels?
    543                  //try with bdb_setChannelAttribute
    544                }
    545              break;
    546              case BDB_COMMISSIONING_FINDING_BINDING:
    547                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    548                {
    549                  //YOUR JOB:
    550                }
    551                else
    552                {
    553                  //YOUR JOB:
    554                  //retry?, wait for user interaction?
    555                }
    556              break;
    557              case BDB_COMMISSIONING_INITIALIZATION:
    558                //Initialization notification can only be successful. Failure on initialization 
    559                //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
    560                
    561                //YOUR JOB:
    562                //We are on a network, what now?
    563                
    564              break;
    565          #if ZG_BUILD_ENDDEVICE_TYPE    
    566              case BDB_COMMISSIONING_PARENT_LOST:
    567                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
   \                     ??zclSampleLight_ProcessCommissioningStatus_1:
   \   00002B   8E82         MOV     DPL,R6
   \   00002D   8F83         MOV     DPH,R7
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   640D         XRL     A,#0xd
   \   000032   6017         JZ      ??zclSampleLight_ProcessCommissioningStatus_2
    568                {
    569                  //We did recover from losing parent
    570                }
    571                else
    572                {
    573                  //Parent not found, attempt to rejoin again after a fixed delay
    574                  osal_start_timerEx(zclSampleLight_TaskID, SAMPLEAPP_END_DEVICE_REJOIN_EVT, SAMPLEAPP_END_DEVICE_REJOIN_DELAY);
   \   000034                ; Setup parameters for call to function osal_start_timerEx
   \   000034   90....       MOV     DPTR,#__Constant_2710
   \   000037   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00003A   7A04         MOV     R2,#0x4
   \   00003C   7B00         MOV     R3,#0x0
   \   00003E   90....       MOV     DPTR,#zclSampleLight_TaskID
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F9           MOV     R1,A
   \   000043   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000046   7404         MOV     A,#0x4
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
    575                }
    576              break;
    577          #endif 
    578            }
    579            
    580            UI_UpdateComissioningStatus(bdbCommissioningModeMsg);
   \                     ??zclSampleLight_ProcessCommissioningStatus_2:
   \   00004B                ; Setup parameters for call to function UI_UpdateComissioningStatus
   \   00004B   EE           MOV     A,R6
   \   00004C   FA           MOV     R2,A
   \   00004D   EF           MOV     A,R7
   \   00004E   FB           MOV     R3,A
   \   00004F   12....       LCALL   `??UI_UpdateComissioningStatus::?relay`; Banked call to: UI_UpdateComissioningStatus
    581          }
   \   000052   7F01         MOV     R7,#0x1
   \   000054   02....       LJMP    ?BANKED_LEAVE_XDATA
    582          
    583          /*********************************************************************
    584           * @fn      zclSampleLight_BasicResetCB
    585           *
    586           * @brief   Callback from the ZCL General Cluster Library
    587           *          to set all the Basic Cluster attributes to default values.
    588           *
    589           * @param   none
    590           *
    591           * @return  none
    592           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    593          static void zclSampleLight_BasicResetCB( void )
   \                     zclSampleLight_BasicResetCB:
    594          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    595            //Reset every attribute in all supported cluster to their default value.
    596          
    597            zclSampleLight_ResetAttributesToDefaultValues();
   \   000004                ; Setup parameters for call to function zclSampleLight_ResetAttributesToDefaultValues
   \   000004   12....       LCALL   ??zclSampleLight_ResetAttributesToDefaultValues; Banked call to: zclSampleLight_ResetAttributesToDefaultValues
    598          
    599            zclSampleLight_UpdateLedState();
   \   000007                ; Setup parameters for call to function zclSampleLight_UpdateLedState
   \   000007   12....       LCALL   `??zclSampleLight_UpdateLedState::?relay`; Banked call to: zclSampleLight_UpdateLedState
    600          
    601            // update the display
    602            UI_UpdateLcd( ); 
   \   00000A                ; Setup parameters for call to function UI_UpdateLcd
   \   00000A   12....       LCALL   `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
    603          }
   \   00000D   80..         SJMP    ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    604          
    605          /*********************************************************************
    606           * @fn      zclSampleLight_OnOffCB
    607           *
    608           * @brief   Callback from the ZCL General Cluster Library when
    609           *          it received an On/Off Command for this application.
    610           *
    611           * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
    612           *
    613           * @return  none
    614           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    615          static void zclSampleLight_OnOffCB( uint8 cmd )
   \                     zclSampleLight_OnOffCB:
    616          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    617            afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
   \   000007                ; Setup parameters for call to function zcl_getRawAFMsg
   \   000007   12....       LCALL   `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
    618          
    619            uint8 OnOff;
    620          
    621            zclSampleLight_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FA           MOV     R2,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FB           MOV     R3,A
   \   000019   90....       MOV     DPTR,#zclSampleLight_DstAddr
   \   00001C   EA           MOV     A,R2
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   EB           MOV     A,R3
   \   000020   F0           MOVX    @DPTR,A
    622          
    623          
    624            // Turn on the light
    625            if ( cmd == COMMAND_ON )
   \   000021   7401         MOV     A,#0x1
   \   000023   6E           XRL     A,R6
   \   000024   6014         JZ      ??zclSampleLight_OnOffCB_0
    626            {
    627              OnOff = LIGHT_ON;
    628            }
    629            // Turn off the light
    630            else if ( cmd == COMMAND_OFF )
   \   000026   EE           MOV     A,R6
   \   000027   600D         JZ      ??zclSampleLight_OnOffCB_1
    631            {
    632              OnOff = LIGHT_OFF;
    633            }
    634            // Toggle the light
    635            else if ( cmd == COMMAND_TOGGLE )
   \   000029   7402         MOV     A,#0x2
   \   00002B   6E           XRL     A,R6
   \   00002C   700E         JNZ     ??zclSampleLight_OnOffCB_2
    636            {
    637          #ifdef ZCL_LEVEL_CTRL
    638              if (zclSampleLight_LevelRemainingTime > 0) 
    639              {
    640                if (zclSampleLight_NewLevelUp)
    641                {
    642                  OnOff = LIGHT_OFF;
    643                }
    644                else
    645                {
    646                  OnOff = LIGHT_ON;
    647                }
    648              }
    649              else
    650              {
    651                if (zclSampleLight_OnOff == LIGHT_ON)
    652                {
    653                  OnOff = LIGHT_OFF;
    654                }
    655                else
    656                {
    657                  OnOff = LIGHT_ON;
    658                }
    659              }
    660          #else
    661              if (zclSampleLight_OnOff == LIGHT_ON)
   \   00002E   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   000031   E0           MOVX    A,@DPTR
   \   000032   6401         XRL     A,#0x1
   \   000034   7004         JNZ     ??zclSampleLight_OnOffCB_0
    662              {
    663                OnOff = LIGHT_OFF;
   \                     ??zclSampleLight_OnOffCB_1:
   \   000036   7800         MOV     R0,#0x0
   \   000038   8002         SJMP    ??zclSampleLight_OnOffCB_2
    664              }
    665              else
    666              {
    667                OnOff = LIGHT_ON;
   \                     ??zclSampleLight_OnOffCB_0:
   \   00003A   7801         MOV     R0,#0x1
    668              }
    669          #endif
    670            }
    671          
    672          #ifdef ZCL_LEVEL_CTRL
    673            zclSampleLight_LevelChangeCmd = (OnOff == LIGHT_ON ? LEVEL_CHANGED_BY_ON_CMD : LEVEL_CHANGED_BY_OFF_CMD);
    674          
    675            zclSampleLight_DefaultMove(OnOff);
    676          #else
    677            zclSampleLight_OnOff = OnOff;
   \                     ??zclSampleLight_OnOffCB_2:
   \   00003C   E8           MOV     A,R0
   \   00003D   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   000040   F0           MOVX    @DPTR,A
    678          #endif
    679          
    680            zclSampleLight_UpdateLedState();
   \   000041                ; Setup parameters for call to function zclSampleLight_UpdateLedState
   \   000041   12....       LCALL   `??zclSampleLight_UpdateLedState::?relay`; Banked call to: zclSampleLight_UpdateLedState
    681            
    682            // update the display
    683            UI_UpdateLcd( );
   \   000044                ; Setup parameters for call to function UI_UpdateLcd
   \   000044   02....       LJMP    ?Subroutine0 & 0xFFFF
    684          }
    685          
    686          #ifdef ZCL_LEVEL_CTRL
    687          /*********************************************************************
    688           * @fn      zclSampleLight_TimeRateHelper
    689           *
    690           * @brief   Calculate time based on rate, and startup level state machine
    691           *
    692           * @param   newLevel - new level for current level
    693           *
    694           * @return  diff (directly), zclSampleLight_CurrentLevel32 and zclSampleLight_NewLevel, zclSampleLight_NewLevelUp
    695           */
    696          static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel )
    697          {
    698            uint32 diff;
    699            uint32 newLevel32;
    700          
    701            // remember current and new level
    702            zclSampleLight_NewLevel = newLevel;
    703            zclSampleLight_CurrentLevel32 = (uint32)1000 * zclSampleLight_LevelCurrentLevel;
    704          
    705            // calculate diff
    706            newLevel32 = (uint32)1000 * newLevel;
    707            if ( zclSampleLight_LevelCurrentLevel > newLevel )
    708            {
    709              diff = zclSampleLight_CurrentLevel32 - newLevel32;
    710              zclSampleLight_NewLevelUp = FALSE;  // moving down
    711            }
    712            else
    713            {
    714              diff = newLevel32 - zclSampleLight_CurrentLevel32;
    715              zclSampleLight_NewLevelUp = TRUE;   // moving up
    716            }
    717          
    718            return ( diff );
    719          }
    720          
    721          /*********************************************************************
    722           * @fn      zclSampleLight_MoveBasedOnRate
    723           *
    724           * @brief   Calculate time based on rate, and startup level state machine
    725           *
    726           * @param   newLevel - new level for current level
    727           * @param   rate16   - fixed point rate (e.g. 16.123)
    728           *
    729           * @return  none
    730           */
    731          static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate )
    732          {
    733            uint32 diff;
    734          
    735            // determine how much time (in 10ths of seconds) based on the difference and rate
    736            zclSampleLight_Rate32 = rate;
    737            diff = zclSampleLight_TimeRateHelper( newLevel );
    738            zclSampleLight_LevelRemainingTime = diff / rate;
    739            if ( !zclSampleLight_LevelRemainingTime )
    740            {
    741              zclSampleLight_LevelRemainingTime = 1;
    742            }
    743          
    744            osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
    745          }
    746          
    747          /*********************************************************************
    748           * @fn      zclSampleLight_MoveBasedOnTime
    749           *
    750           * @brief   Calculate rate based on time, and startup level state machine
    751           *
    752           * @param   newLevel  - new level for current level
    753           * @param   time      - in 10ths of seconds
    754           *
    755           * @return  none
    756           */
    757          static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time )
    758          {
    759            uint16 diff;
    760          
    761            // determine rate (in units) based on difference and time
    762            diff = zclSampleLight_TimeRateHelper( newLevel );
    763            zclSampleLight_LevelRemainingTime = zclSampleLight_GetTime( newLevel, time );
    764            zclSampleLight_Rate32 = diff / time;
    765          
    766            osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
    767          }
    768          
    769          /*********************************************************************
    770           * @fn      zclSampleLight_GetTime
    771           *
    772           * @brief   Determine amount of time that MoveXXX will take to complete.
    773           *
    774           * @param   level = new level to move to
    775           *          time  = 0xffff=default, or 0x0000-n amount of time in tenths of seconds.
    776           *
    777           * @return  none
    778           */
    779          static uint16 zclSampleLight_GetTime( uint8 newLevel, uint16 time )
    780          {
    781            // there is a hiearchy of the amount of time to use for transistioning
    782            // check each one in turn. If none of defaults are set, then use fastest
    783            // time possible.
    784            if ( time == 0xFFFF )
    785            {
    786              // use On or Off Transition Time if set (not 0xffff)
    787              if ( zclSampleLight_LevelCurrentLevel > newLevel )
    788              {
    789                time = zclSampleLight_LevelOffTransitionTime;
    790              }
    791              else
    792              {
    793                time = zclSampleLight_LevelOnTransitionTime;
    794              }
    795          
    796              // else use OnOffTransitionTime if set (not 0xffff)
    797              if ( time == 0xFFFF )
    798              {
    799                time = zclSampleLight_LevelOnOffTransitionTime;
    800              }
    801          
    802              // else as fast as possible
    803              if ( time == 0xFFFF )
    804              {
    805                time = 1;
    806              }
    807            }
    808          
    809            if ( time == 0 )
    810            {
    811              time = 1; // as fast as possible
    812            }
    813          
    814            return ( time );
    815          }
    816          
    817          /*********************************************************************
    818           * @fn      zclSampleLight_DefaultMove
    819           *
    820           * @brief   We were turned on/off. Use default time to move to on or off.
    821           *
    822           * @param   zclSampleLight_OnOff - must be set prior to calling this function.
    823           *
    824           * @return  none
    825           */
    826          static void zclSampleLight_DefaultMove( uint8 OnOff )
    827          {
    828            uint8  newLevel;
    829            uint32 rate;      // fixed point decimal (3 places, eg. 16.345)
    830            uint16 time;
    831          
    832            // if moving to on position, move to on level
    833            if ( OnOff )
    834            {
    835              if (zclSampleLight_OnOff == LIGHT_OFF)
    836              {
    837                zclSampleLight_LevelCurrentLevel = ATTR_LEVEL_MIN_LEVEL;
    838              }
    839              
    840              if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
    841              {
    842                // The last Level (before going OFF) should be used)
    843                newLevel = zclSampleLight_LevelLastLevel;
    844              }
    845              else
    846              {
    847                newLevel = zclSampleLight_LevelOnLevel;
    848              }
    849          
    850              time = zclSampleLight_LevelOnTransitionTime;
    851          
    852            }
    853            else
    854            {
    855              newLevel = ATTR_LEVEL_MIN_LEVEL;
    856          
    857              time = zclSampleLight_LevelOffTransitionTime;
    858            }
    859          
    860            // else use OnOffTransitionTime if set (not 0xffff)
    861            if ( time == 0xFFFF )
    862            {
    863              time = zclSampleLight_LevelOnOffTransitionTime;
    864            }
    865          
    866            // else as fast as possible
    867            if ( time == 0xFFFF )
    868            {
    869              time = 1;
    870            }
    871          
    872            // calculate rate based on time (int 10ths) for full transition (1-254)
    873            rate = 255000 / time;    // units per tick, fixed point, 3 decimal places (e.g. 8500 = 8.5 units per tick)
    874          
    875            // start up state machine.
    876            zclSampleLight_WithOnOff = TRUE;
    877            zclSampleLight_MoveBasedOnRate( newLevel, rate );
    878          }
    879          
    880          /*********************************************************************
    881           * @fn      zclSampleLight_AdjustLightLevel
    882           *
    883           * @brief   Called each 10th of a second while state machine running
    884           *
    885           * @param   none
    886           *
    887           * @return  none
    888           */
    889          static void zclSampleLight_AdjustLightLevel( void )
    890          {
    891            // one tick (10th of a second) less
    892            if ( zclSampleLight_LevelRemainingTime )
    893            {
    894              --zclSampleLight_LevelRemainingTime;
    895            }
    896          
    897            // no time left, done
    898            if ( zclSampleLight_LevelRemainingTime == 0)
    899            {
    900              zclSampleLight_LevelCurrentLevel = zclSampleLight_NewLevel;
    901            }
    902          
    903            // still time left, keep increment/decrementing
    904            else
    905            {
    906              if ( zclSampleLight_NewLevelUp )
    907              {
    908                zclSampleLight_CurrentLevel32 += zclSampleLight_Rate32;
    909              }
    910              else
    911              {
    912                zclSampleLight_CurrentLevel32 -= zclSampleLight_Rate32;
    913              }
    914              zclSampleLight_LevelCurrentLevel = (uint8)( zclSampleLight_CurrentLevel32 / 1000 );
    915            }
    916          
    917            if (( zclSampleLight_LevelChangeCmd == LEVEL_CHANGED_BY_LEVEL_CMD ) && ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ))
    918            {
    919              zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
    920            }
    921          
    922            // also affect on/off
    923            if ( zclSampleLight_WithOnOff )
    924            {
    925              if ( zclSampleLight_LevelCurrentLevel > ATTR_LEVEL_MIN_LEVEL )
    926              {
    927                zclSampleLight_OnOff = LIGHT_ON;
    928              }
    929              else
    930              {
    931                if (zclSampleLight_LevelChangeCmd != LEVEL_CHANGED_BY_ON_CMD)
    932                {
    933                  zclSampleLight_OnOff = LIGHT_OFF;
    934                }
    935                else
    936                {
    937                  zclSampleLight_OnOff = LIGHT_ON;
    938                }
    939                
    940                if (( zclSampleLight_LevelChangeCmd != LEVEL_CHANGED_BY_LEVEL_CMD ) && ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ))
    941                {
    942                  zclSampleLight_LevelCurrentLevel = zclSampleLight_LevelLastLevel;
    943                }
    944              }
    945            }
    946          
    947            zclSampleLight_UpdateLedState();
    948            
    949            // display light level as we go
    950            UI_UpdateLcd( );
    951          
    952            // keep ticking away
    953            if ( zclSampleLight_LevelRemainingTime )
    954            {
    955              osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
    956            }
    957          }
    958          
    959          /*********************************************************************
    960           * @fn      zclSampleLight_LevelControlMoveToLevelCB
    961           *
    962           * @brief   Callback from the ZCL General Cluster Library when
    963           *          it received a LevelControlMoveToLevel Command for this application.
    964           *
    965           * @param   pCmd - ZigBee command parameters
    966           *
    967           * @return  none
    968           */
    969          static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd )
    970          {
    971            zclSampleLight_LevelChangeCmd = LEVEL_CHANGED_BY_LEVEL_CMD;
    972          
    973            zclSampleLight_WithOnOff = pCmd->withOnOff;
    974            zclSampleLight_MoveBasedOnTime( pCmd->level, pCmd->transitionTime );
    975          }
    976          
    977          /*********************************************************************
    978           * @fn      zclSampleLight_LevelControlMoveCB
    979           *
    980           * @brief   Callback from the ZCL General Cluster Library when
    981           *          it received a LevelControlMove Command for this application.
    982           *
    983           * @param   pCmd - ZigBee command parameters
    984           *
    985           * @return  none
    986           */
    987          static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd )
    988          {
    989            uint8 newLevel;
    990            uint32 rate;
    991          
    992            // convert rate from units per second to units per tick (10ths of seconds)
    993            // and move at that right up or down
    994            zclSampleLight_WithOnOff = pCmd->withOnOff;
    995          
    996            if ( pCmd->moveMode == LEVEL_MOVE_UP )
    997            {
    998              newLevel = ATTR_LEVEL_MAX_LEVEL;  // fully on
    999            }
   1000            else
   1001            {
   1002              newLevel = ATTR_LEVEL_MIN_LEVEL; // fully off
   1003            }
   1004          
   1005            zclSampleLight_LevelChangeCmd = LEVEL_CHANGED_BY_LEVEL_CMD;
   1006          
   1007            rate = (uint32)100 * pCmd->rate;
   1008            zclSampleLight_MoveBasedOnRate( newLevel, rate );
   1009          }
   1010          
   1011          /*********************************************************************
   1012           * @fn      zclSampleLight_LevelControlStepCB
   1013           *
   1014           * @brief   Callback from the ZCL General Cluster Library when
   1015           *          it received an On/Off Command for this application.
   1016           *
   1017           * @param   pCmd - ZigBee command parameters
   1018           *
   1019           * @return  none
   1020           */
   1021          static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd )
   1022          {
   1023            uint8 newLevel;
   1024          
   1025            // determine new level, but don't exceed boundaries
   1026            if ( pCmd->stepMode == LEVEL_MOVE_UP )
   1027            {
   1028              if ( (uint16)zclSampleLight_LevelCurrentLevel + pCmd->amount > ATTR_LEVEL_MAX_LEVEL )
   1029              {
   1030                newLevel = ATTR_LEVEL_MAX_LEVEL;
   1031              }
   1032              else
   1033              {
   1034                newLevel = zclSampleLight_LevelCurrentLevel + pCmd->amount;
   1035              }
   1036            }
   1037            else
   1038            {
   1039              if ( pCmd->amount >= zclSampleLight_LevelCurrentLevel )
   1040              {
   1041                newLevel = ATTR_LEVEL_MIN_LEVEL;
   1042              }
   1043              else
   1044              {
   1045                newLevel = zclSampleLight_LevelCurrentLevel - pCmd->amount;
   1046              }
   1047            }
   1048            
   1049            zclSampleLight_LevelChangeCmd = LEVEL_CHANGED_BY_LEVEL_CMD;
   1050          
   1051            // move to the new level
   1052            zclSampleLight_WithOnOff = pCmd->withOnOff;
   1053            zclSampleLight_MoveBasedOnTime( newLevel, pCmd->transitionTime );
   1054          }
   1055          
   1056          /*********************************************************************
   1057           * @fn      zclSampleLight_LevelControlStopCB
   1058           *
   1059           * @brief   Callback from the ZCL General Cluster Library when
   1060           *          it received an Level Control Stop Command for this application.
   1061           *
   1062           * @param   pCmd - ZigBee command parameters
   1063           *
   1064           * @return  none
   1065           */
   1066          static void zclSampleLight_LevelControlStopCB( void )
   1067          {
   1068            // stop immediately
   1069            osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT );
   1070            zclSampleLight_LevelRemainingTime = 0;
   1071          }
   1072          #endif
   1073          
   1074          /******************************************************************************
   1075           *
   1076           *  Functions for processing ZCL Foundation incoming Command/Response messages
   1077           *
   1078           *****************************************************************************/
   1079          
   1080          /*********************************************************************
   1081           * @fn      zclSampleLight_ProcessIncomingMsg
   1082           *
   1083           * @brief   Process ZCL Foundation incoming message
   1084           *
   1085           * @param   pInMsg - pointer to the received message
   1086           *
   1087           * @return  none
   1088           */
   1089          static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
   1090          {
   1091            switch ( pInMsg->zclHdr.commandID )
   1092            {
   1093          #ifdef ZCL_READ
   1094              case ZCL_CMD_READ_RSP:
   1095                zclSampleLight_ProcessInReadRspCmd( pInMsg );
   1096                break;
   1097          #endif
   1098          #ifdef ZCL_WRITE
   1099              case ZCL_CMD_WRITE_RSP:
   1100                zclSampleLight_ProcessInWriteRspCmd( pInMsg );
   1101                break;
   1102          #endif
   1103              case ZCL_CMD_CONFIG_REPORT:
   1104              case ZCL_CMD_CONFIG_REPORT_RSP:
   1105              case ZCL_CMD_READ_REPORT_CFG:
   1106              case ZCL_CMD_READ_REPORT_CFG_RSP:
   1107              case ZCL_CMD_REPORT:
   1108                //bdb_ProcessIncomingReportingMsg( pInMsg );
   1109                break;
   1110          
   1111              case ZCL_CMD_DEFAULT_RSP:
   1112                zclSampleLight_ProcessInDefaultRspCmd( pInMsg );
   1113                break;
   1114          #ifdef ZCL_DISCOVER
   1115              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
   1116                zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
   1117                break;
   1118          
   1119              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
   1120                zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
   1121                break;
   1122          
   1123              case ZCL_CMD_DISCOVER_ATTRS_RSP:
   1124                zclSampleLight_ProcessInDiscAttrsRspCmd( pInMsg );
   1125                break;
   1126          
   1127              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
   1128                zclSampleLight_ProcessInDiscAttrsExtRspCmd( pInMsg );
   1129                break;
   1130          #endif
   1131              default:
   1132                break;
   1133            }
   1134          
   1135            if ( pInMsg->attrCmd )
   1136              osal_mem_free( pInMsg->attrCmd );
   1137          }
   1138          
   1139          #ifdef ZCL_READ
   1140          /*********************************************************************
   1141           * @fn      zclSampleLight_ProcessInReadRspCmd
   1142           *
   1143           * @brief   Process the "Profile" Read Response Command
   1144           *
   1145           * @param   pInMsg - incoming message to process
   1146           *
   1147           * @return  none
   1148           */
   1149          static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
   1150          {
   1151            zclReadRspCmd_t *readRspCmd;
   1152            uint8 i;
   1153          
   1154            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
   1155            for (i = 0; i < readRspCmd->numAttr; i++)
   1156            {
   1157              // Notify the originator of the results of the original read attributes
   1158              // attempt and, for each successfull request, the value of the requested
   1159              // attribute
   1160            }
   1161          
   1162            return ( TRUE );
   1163          }
   1164          #endif // ZCL_READ
   1165          
   1166          #ifdef ZCL_WRITE
   1167          /*********************************************************************
   1168           * @fn      zclSampleLight_ProcessInWriteRspCmd
   1169           *
   1170           * @brief   Process the "Profile" Write Response Command
   1171           *
   1172           * @param   pInMsg - incoming message to process
   1173           *
   1174           * @return  none
   1175           */
   1176          static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
   1177          {
   1178            zclWriteRspCmd_t *writeRspCmd;
   1179            uint8 i;
   1180          
   1181            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
   1182            for ( i = 0; i < writeRspCmd->numAttr; i++ )
   1183            {
   1184              // Notify the device of the results of the its original write attributes
   1185              // command.
   1186            }
   1187          
   1188            return ( TRUE );
   1189          }
   1190          #endif // ZCL_WRITE
   1191          
   1192          /*********************************************************************
   1193           * @fn      zclSampleLight_ProcessInDefaultRspCmd
   1194           *
   1195           * @brief   Process the "Profile" Default Response Command
   1196           *
   1197           * @param   pInMsg - incoming message to process
   1198           *
   1199           * @return  none
   1200           */
   1201          static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
   1202          {
   1203            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
   1204          
   1205            // Device is notified of the Default Response command.
   1206            (void)pInMsg;
   1207          
   1208            return ( TRUE );
   1209          }
   1210          
   1211          #ifdef ZCL_DISCOVER
   1212          /*********************************************************************
   1213           * @fn      zclSampleLight_ProcessInDiscCmdsRspCmd
   1214           *
   1215           * @brief   Process the Discover Commands Response Command
   1216           *
   1217           * @param   pInMsg - incoming message to process
   1218           *
   1219           * @return  none
   1220           */
   1221          static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   1222          {
   1223            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
   1224            uint8 i;
   1225          
   1226            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   1227            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   1228            {
   1229              // Device is notified of the result of its attribute discovery command.
   1230            }
   1231          
   1232            return ( TRUE );
   1233          }
   1234          
   1235          /*********************************************************************
   1236           * @fn      zclSampleLight_ProcessInDiscAttrsRspCmd
   1237           *
   1238           * @brief   Process the "Profile" Discover Attributes Response Command
   1239           *
   1240           * @param   pInMsg - incoming message to process
   1241           *
   1242           * @return  none
   1243           */
   1244          static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
   1245          {
   1246            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
   1247            uint8 i;
   1248          
   1249            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
   1250            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1251            {
   1252              // Device is notified of the result of its attribute discovery command.
   1253            }
   1254          
   1255            return ( TRUE );
   1256          }
   1257          
   1258          /*********************************************************************
   1259           * @fn      zclSampleLight_ProcessInDiscAttrsExtRspCmd
   1260           *
   1261           * @brief   Process the "Profile" Discover Attributes Extended Response Command
   1262           *
   1263           * @param   pInMsg - incoming message to process
   1264           *
   1265           * @return  none
   1266           */
   1267          static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
   1268          {
   1269            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
   1270            uint8 i;
   1271          
   1272            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
   1273            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1274            {
   1275              // Device is notified of the result of its attribute discovery command.
   1276            }
   1277          
   1278            return ( TRUE );
   1279          }
   1280          #endif // ZCL_DISCOVER
   1281          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1282          void zclSampleLight_UiActionToggleLight(uint16 keys)
   \                     zclSampleLight_UiActionToggleLight:
   1283          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1284            zclSampleLight_OnOffCB(COMMAND_TOGGLE);
   \   000004                ; Setup parameters for call to function zclSampleLight_OnOffCB
   \   000004   7902         MOV     R1,#0x2
   \   000006   12....       LCALL   `??zclSampleLight_OnOffCB::?relay`; Banked call to: zclSampleLight_OnOffCB
   1285          }
   \   000009   80..         SJMP    ?Subroutine1
   1286          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1287          void zclSampleLight_UpdateLedState(void)
   \                     zclSampleLight_UpdateLedState:
   1288          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1289            // set the LED1 based on light (on or off)
   1290            if ( zclSampleLight_OnOff == LIGHT_ON )
   \   000004   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   7004         JNZ     ??zclSampleLight_UpdateLedState_0
   1291            {
   1292              HalLedSet ( UI_LED_APP, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   8002         SJMP    ??zclSampleLight_UpdateLedState_1
   1293            }
   1294            else
   1295            {
   1296              HalLedSet ( UI_LED_APP, HAL_LED_MODE_OFF );
   \                     ??zclSampleLight_UpdateLedState_0:
   \   000010                ; Setup parameters for call to function HalLedSet
   \   000010   7A00         MOV     R2,#0x0
   \                     ??zclSampleLight_UpdateLedState_1:
   \   000012   7901         MOV     R1,#0x1
   \   000014   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   1297            }
   1298          }
   \   000017                REQUIRE ?Subroutine1
   \   000017                ; // Fall through to label ?Subroutine1
   1299          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1300          void zclSampleLight_UiUpdateLcd(uint8 UiState, char * line[3])
   \                     zclSampleLight_UiUpdateLcd:
   1301          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1302          #ifdef LCD_SUPPORTED
   1303          #ifdef ZCL_LEVEL_CTRL
   1304            zclHA_uint8toa( zclSampleLight_LevelCurrentLevel, &sLightLevel[9] );
   1305            line[0] = (char *)sLightLevel;
   1306          #endif // ZCL_LEVEL_CTRL
   1307            line[1] = (char *)(zclSampleLight_OnOff ? sLightOn : sLightOff);
   \   000004   90....       MOV     DPTR,#zclSampleLight_OnOff
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6006         JZ      ??zclSampleLight_UiUpdateLcd_0
   \   00000A   78..         MOV     R0,#sLightOn & 0xff
   \   00000C   79..         MOV     R1,#(sLightOn >> 8) & 0xff
   \   00000E   8004         SJMP    ??zclSampleLight_UiUpdateLcd_1
   \                     ??zclSampleLight_UiUpdateLcd_0:
   \   000010   78..         MOV     R0,#sLightOff & 0xff
   \   000012   79..         MOV     R1,#(sLightOff >> 8) & 0xff
   \                     ??zclSampleLight_UiUpdateLcd_1:
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   E8           MOV     A,R0
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   E9           MOV     A,R1
   \   00001E   F0           MOVX    @DPTR,A
   1308            line[2] = "< TOGGLE LIGHT >";
   \   00001F   8A82         MOV     DPL,R2
   \   000021   8B83         MOV     DPH,R3
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   74..         MOV     A,#`?<Constant "< TOGGLE LIGHT >">` & 0xff
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   74..         MOV     A,#(`?<Constant "< TOGGLE LIGHT >">` >> 8) & 0xff
   \   00002D   F0           MOVX    @DPTR,A
   1309          #endif
   1310          }
   \   00002E   80..         SJMP    ?Subroutine1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleLight_TestEp>`:
   \   000000   08           DB 8
   \   000001   00           DB 0
   \   000002   ....         DW zclSampleLight_TaskID
   \   000004   0000         DW 0H
   \   000006   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleLight_CmdCallbacks>`:
   \   000000   ....         DW `??zclSampleLight_BasicResetCB::?relay`
   \   000002   0000         DW 0H
   \   000004   ....         DW `??zclSampleLight_OnOffCB::?relay`
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H
   \   000012   0000         DW 0H
   \   000014   0000         DW 0H
   \   000016   0000         DW 0H

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_ProcessCommissioningStatus::?r`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_ProcessCommissioningStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_BasicResetCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_BasicResetCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_OnOffCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_OnOffCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_UiActionToggleLight::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_UiActionToggleLight

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_UpdateLedState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_UpdateLedState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleLight_UiUpdateLcd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleLight_UiUpdateLcd

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TI Sample Light">`:
   \   000000   54492053     DB "TI Sample Light"
   \            616D706C
   \            65204C69
   \            67687400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "< TOGGLE LIGHT >">`:
   \   000000   3C20544F     DB "< TOGGLE LIGHT >"
   \            47474C45
   \            204C4947
   \            4854203E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000
   1311          
   1312          /****************************************************************************
   1313          ****************************************************************************/
   1314          
   1315          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   zclSampleLight_BasicResetCB
        2      0   -> UI_UpdateLcd
        2      0   -> zclSampleLight_ResetAttributesToDefaultValues
        2      0   -> zclSampleLight_UpdateLedState
      0     18   zclSampleLight_Init
        0     10   -> RegisterForKeys
        0     18   -> UI_Init
        0     10   -> UI_UpdateLcd
        0     10   -> afRegister
        0     10   -> bdb_RegisterCommissioningStatusCB
        0     10   -> bdb_RegisterSimpleDescriptor
        0     10   -> zclGeneral_RegisterCmdCallbacks
        0     10   -> zclSampleLight_ResetAttributesToDefaultValues
        0     10   -> zcl_registerAttrList
        0     10   -> zcl_registerForMsg
      0     10   zclSampleLight_OnOffCB
        0     10   -> UI_UpdateLcd
        0     10   -> zclSampleLight_UpdateLedState
        0     10   -> zcl_getRawAFMsg
      0     13   zclSampleLight_ProcessCommissioningStatus
        0      9   -> UI_UpdateComissioningStatus
        0      9   -> bdb_StartCommissioning
        0     13   -> osal_start_timerEx
      2      0   zclSampleLight_UiActionToggleLight
        2      0   -> zclSampleLight_OnOffCB
      2      0   zclSampleLight_UiUpdateLcd
      2     10   zclSampleLight_UpdateLedState
        2      0   -> HalLedSet
      0     12   zclSampleLight_event_loop
        0     12   -> UI_DeviceStateUpdated
        0     12   -> UI_MainStateMachine
        0     12   -> UI_UpdateLcd
        0     12   -> bdb_ZedAttemptRecoverNwk
        0     12   -> osal_mem_free
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      17  ?<Constant "< TOGGLE LIGHT >">
      16  ?<Constant "TI Sample Light">
       7  ?<Initializer for sampleLight_TestEp>
      24  ?<Initializer for zclSampleLight_CmdCallbacks>
       8  ?Subroutine0
       7  ?Subroutine1
      16  ?Subroutine2
       4  __Constant_2710
      17  sLightOff
      17  sLightOn
       7  sampleLight_TestEp
       1  zclSampleLightSeqNum
      15  zclSampleLight_BasicResetCB
       6  zclSampleLight_BasicResetCB::?relay
      24  zclSampleLight_CmdCallbacks
      12  zclSampleLight_DstAddr
     163  zclSampleLight_Init
       6  zclSampleLight_Init::?relay
      71  zclSampleLight_OnOffCB
       6  zclSampleLight_OnOffCB::?relay
      87  zclSampleLight_ProcessCommissioningStatus
       6  zclSampleLight_ProcessCommissioningStatus::?relay
       1  zclSampleLight_TaskID
      11  zclSampleLight_UiActionToggleLight
       6  zclSampleLight_UiActionToggleLight::?relay
      12  zclSampleLight_UiStatesMain
      48  zclSampleLight_UiUpdateLcd
       6  zclSampleLight_UiUpdateLcd::?relay
      23  zclSampleLight_UpdateLedState
       6  zclSampleLight_UpdateLedState::?relay
     211  zclSampleLight_event_loop
       6  zclSampleLight_event_loop::?relay

 
 660 bytes in segment BANKED_CODE
  48 bytes in segment BANK_RELAYS
  31 bytes in segment XDATA_I
  31 bytes in segment XDATA_ID
  83 bytes in segment XDATA_ROM_C
  14 bytes in segment XDATA_Z
 
 739 bytes of CODE  memory
  79 bytes of CONST memory (+ 4 bytes shared)
  45 bytes of XDATA memory

Errors: none
Warnings: none
