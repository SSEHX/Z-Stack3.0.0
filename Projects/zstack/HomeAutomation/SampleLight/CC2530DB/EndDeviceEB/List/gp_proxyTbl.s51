///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               26/Oct/2017  14:48:11
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack 3.0.0\Components\stack\GP\gp_proxyTbl.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
//        Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        "C:\Texas Instruments\Z-Stack
//        3.0.0\Components\stack\GP\gp_proxyTbl.c" -D BDB_REPORTING -D SECURE=1
//        -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xPOWER_SAVING -D
//        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
//        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
//        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D
//        ZCL_GROUPS -D xZCL_LEVEL_CTRL -lC "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
//        -lA "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
//        Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
//        "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List\gp_proxyTbl.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME gp_proxyTbl

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?V3
        EXTERN ?V7
        EXTERN ?V11
        EXTERN ?ADD_XSTACK_DISP0_16
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_AND_X
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_GE_X
        EXTERN ?US_DIV_MOD
        EXTERN ?US_SHR
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_Z

        PUBLIC `??gp_CheckAnnouncedDevice::?relay`
        FUNCTION `??gp_CheckAnnouncedDevice::?relay`,0203H
        PUBLIC `??gp_PairingUpdateProxyTlb::?relay`
        FUNCTION `??gp_PairingUpdateProxyTlb::?relay`,0203H
        FUNCTION `??gp_PopulateProxyTblEntry::?relay`,0203H
        PUBLIC `??gp_UpdateProxyTlb::?relay`
        FUNCTION `??gp_UpdateProxyTlb::?relay`,0203H
        FUNCTION `??gp_pairingSetProxyTblOptions::?relay`,0203H
        PUBLIC `??pt_ZclReadGetProxyEntry::?relay`
        FUNCTION `??pt_ZclReadGetProxyEntry::?relay`,0203H
        FUNCTION `??pt_addSinkGroup::?relay`,0203H
        FUNCTION `??pt_updateLightweightUnicastSink::?relay`,0203H
        PUBLIC `??zclGpp_ReadWriteAttrCB::?relay`
        FUNCTION `??zclGpp_ReadWriteAttrCB::?relay`,0203H
        PUBWEAK __Constant_10000
        PUBWEAK __Constant_2
        PUBLIC aliasConflictAnnce
        PUBLIC gp_CheckAnnouncedDevice
        FUNCTION gp_CheckAnnouncedDevice,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 90, STACK
        PUBLIC gp_PairingUpdateProxyTlb
        FUNCTION gp_PairingUpdateProxyTlb,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 94, STACK
        FUNCTION gp_PopulateProxyTblEntry,0a1203H
        ARGFRAME XSTACK, 170, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        PUBLIC gp_UpdateProxyTlb
        FUNCTION gp_UpdateProxyTlb,0a1203H
        ARGFRAME XSTACK, 91, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 276, STACK
        FUNCTION gp_pairingSetProxyTblOptions,080203H
        ARGFRAME XSTACK, 91, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC pt_ZclReadGetProxyEntry
        FUNCTION pt_ZclReadGetProxyEntry,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 171, STACK
        FUNCTION pt_addSinkGroup,0a1203H
        ARGFRAME XSTACK, 272, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 160, STACK
        FUNCTION pt_updateLightweightUnicastSink,0a1203H
        ARGFRAME XSTACK, 272, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 166, STACK
        PUBLIC zclGpp_ReadWriteAttrCB
        FUNCTION zclGpp_ReadWriteAttrCB,0a1203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 14, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
NLME_SendNetworkStatus SYMBOL "NLME_SendNetworkStatus"
`??NLME_SendNetworkStatus::?relay` SYMBOL "?relay", NLME_SendNetworkStatus
gp_getProxyTableByIndex SYMBOL "gp_getProxyTableByIndex"
`??gp_getProxyTableByIndex::?relay` SYMBOL "?relay", gp_getProxyTableByIndex
osal_memcmp         SYMBOL "osal_memcmp"
`??osal_memcmp::?relay` SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_rand           SYMBOL "osal_rand"
`??osal_rand::?relay` SYMBOL "?relay", osal_rand
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
gp_CheckAnnouncedDevice SYMBOL "gp_CheckAnnouncedDevice"
`??gp_CheckAnnouncedDevice::?relay` SYMBOL "?relay", gp_CheckAnnouncedDevice
gp_PairingUpdateProxyTlb SYMBOL "gp_PairingUpdateProxyTlb"
`??gp_PairingUpdateProxyTlb::?relay` SYMBOL "?relay", gp_PairingUpdateProxyTlb
gp_UpdateProxyTlb   SYMBOL "gp_UpdateProxyTlb"
`??gp_UpdateProxyTlb::?relay` SYMBOL "?relay", gp_UpdateProxyTlb
pt_ZclReadGetProxyEntry SYMBOL "pt_ZclReadGetProxyEntry"
`??pt_ZclReadGetProxyEntry::?relay` SYMBOL "?relay", pt_ZclReadGetProxyEntry
zclGpp_ReadWriteAttrCB SYMBOL "zclGpp_ReadWriteAttrCB"
`??zclGpp_ReadWriteAttrCB::?relay` SYMBOL "?relay", zclGpp_ReadWriteAttrCB

        EXTERN `??NLME_SendNetworkStatus::?relay`
        FUNCTION `??NLME_SendNetworkStatus::?relay`,00H
        EXTERN `??gp_getProxyTableByIndex::?relay`
        FUNCTION `??gp_getProxyTableByIndex::?relay`,00H
        EXTERN `??osal_memcmp::?relay`
        FUNCTION `??osal_memcmp::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_rand::?relay`
        FUNCTION `??osal_rand::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN NLME_SendNetworkStatus
        FUNCTION NLME_SendNetworkStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 87, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gp_TaskID
        EXTERN gp_getProxyTableByIndex
        FUNCTION gp_getProxyTableByIndex,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 272, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 275, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 275, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 163, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 276, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 276, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 86, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 90, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack 3.0.0\Components\stack\GP\gp_proxyTbl.c
//    1 /**************************************************************************************************
//    2   Filename:       gp_proxyTbl.c
//    3   Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
//    4   Revision:       $Revision: - $
//    5 
//    6   Description:    This file contains the implementation of the cGP stub.
//    7 
//    8 
//    9   Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 
//   41 
//   42 /*********************************************************************
//   43  * INCLUDES
//   44  */
//   45    
//   46 #include "ZGlobals.h"
//   47 #include "ZDObject.h"
//   48 #include "nwk_util.h"
//   49 //GP_UPDATE   
//   50 #include "ZComDef.h"
//   51 #include "cGP_stub.h"
//   52 #include "gp_common.h"
//   53 #include "gp_interface.h"
//   54 #include "zcl_green_power.h"
//   55 #include "OSAL.h"
//   56 
//   57  /*********************************************************************
//   58  * MACROS
//   59  */ 
//   60 
//   61  /*********************************************************************
//   62  * CONSTANTS
//   63  */
//   64 
//   65 /*********************************************************************
//   66  * TYPEDEFS
//   67  */
//   68    
//   69  /*********************************************************************
//   70  * GLOBAL VARIABLES
//   71  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   72 ZDO_DeviceAnnce_t aliasConflictAnnce;
aliasConflictAnnce:
        DS 11
        REQUIRE __INIT_XDATA_Z
//   73 
//   74  /*********************************************************************
//   75  * EXTERNAL VARIABLES
//   76  */
//   77 
//   78 /*********************************************************************
//   79  * EXTERNAL FUNCTIONS
//   80  */
//   81 
//   82 /*********************************************************************
//   83  * LOCAL VARIABLES
//   84  */
//   85 
//   86  /*********************************************************************
//   87  * LOCAL FUNCTIONS
//   88  */
//   89 static void gp_PopulateProxyTblEntry( uint8* pData, uint8 size, uint8* pTblEntryVector, uint8* vectorLen );
//   90 static uint8 pt_updateAlias( uint8* pNew );
//   91 static uint8 pt_updateSecurity( uint8* pNew );
//   92 static uint8 pt_updateSecFrameCounter( uint8* pNew );
//   93 static uint8 pt_updateLightweightUnicastSink( uint8* pNew, uint8* pCurr, uint8 addSink );
//   94 static uint8 pt_addSinkGroup( uint8* pNew, uint8* pCurr );
//   95 static uint8 pt_lookForGpd( uint16 currProxyEntryId, uint8* pNew );
//   96 
//   97 /*********************************************************************
//   98  * PUBLIC FUNCTIONS
//   99  *********************************************************************/
//  100 
//  101 /*********************************************************************
//  102  * @fn          pt_ZclReadGetProxyEntry
//  103  *
//  104  * @brief       Populate the given item data
//  105  *
//  106  * @param       nvId - NV entry to read
//  107  *              pData - Pointer to OTA message payload
//  108  *              len - Lenght of the payload
//  109  *
//  110  * @return
//  111  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  112 uint8 pt_ZclReadGetProxyEntry( uint16 nvId, uint8* pData, uint8* len )
pt_ZclReadGetProxyEntry:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function pt_ZclReadGetProxyEntry
        CODE
//  113 {
        FUNCALL pt_ZclReadGetProxyEntry, gp_getProxyTableByIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 168, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 168, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 171, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 171, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 171, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 171, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 170, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 170, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 170, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 170, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 170, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 170, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 170, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 170, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 170, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 170, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 170, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 170, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 170, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 170, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 171, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 171, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 171, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 171, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 170, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 170, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 171, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 171, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 171, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 171, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 170, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 170, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 171, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 171, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 171, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 171, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 170, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 170, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 171, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 171, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 171, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 171, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 170, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 170, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 170, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 170, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 170, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 170, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 171, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 171, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_ZclReadGetProxyEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 171, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 171, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 144
        MOV     A,#0x70
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 168)
        MOV     ?V14,R4
        MOV     ?V15,R5
//  114   uint8  freeSinkEntry[LSINK_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
        MOV     DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
        MOV     A,#-0x7a
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0xa
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  115   uint8  currEntry[PROXY_TBL_ENTRY_LEN] = {0};
        MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x40
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  116   uint8  gpdEntry[PROXY_TBL_ENTRY_LEN] = {0};
        MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`
        MOV     A,#0x40
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  117   uint8  gpdEntryLen = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  118   uint8  status;
//  119   uint16 options;
//  120 
//  121   status = gp_getProxyTableByIndex( nvId, currEntry );
        ; Setup parameters for call to function gp_getProxyTableByIndex
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP102_8
        LCALL   `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
        MOV     A,R1
        MOV     R6,A
//  122 
//  123   // if FAIL or Empty
//  124   if ( ( status == NV_OPER_FAILED ) || ( status == NV_INVALID_DATA ) )
        MOV     A,#0xa
        XRL     A,R6
        JZ      ??pt_ZclReadGetProxyEntry_0
        MOV     A,#0xd
        XRL     A,R6
        JNZ     ??pt_ZclReadGetProxyEntry_1
//  125   {
//  126     // FAIL
//  127     return status;
??pt_ZclReadGetProxyEntry_0:
        LJMP    ??pt_ZclReadGetProxyEntry_2 & 0xFFFF
//  128   }
//  129 
//  130   osal_memcpy( &gpdEntry[gpdEntryLen], &currEntry[PROXY_TBL_ENTRY_OPT], sizeof ( uint16 ) );
??pt_ZclReadGetProxyEntry_1:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     ?V2,#0x0
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 171)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x49
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 168)
//  131   osal_memcpy( &options, &currEntry[PROXY_TBL_ENTRY_OPT], sizeof ( uint16 ) );
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 171)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 168)
//  132   gpdEntryLen += sizeof ( uint16 );
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x2
        MOVX    @DPTR,A
//  133   
//  134   // Options bitfield
//  135   // If Application Id bitfield is 0b000
//  136   if( GP_IS_APPLICATION_ID_GPD( options ) )
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x7
        MOV     R0,A
        JNZ     ??pt_ZclReadGetProxyEntry_3
//  137   {        
//  138     // Populate GPD ID
//  139     gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_ID + 4], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 170)
        MOV     A,#0x48
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x4
        MOV     A,#0xe
        SJMP    ??pt_ZclReadGetProxyEntry_4
          CFI CFA_XSP16 add(XSP16, 168)
//  140   }
//  141   // If Application Id bitfield is 0b010
//  142   else if( GP_IS_APPLICATION_ID_IEEE( options ) )
??pt_ZclReadGetProxyEntry_3:
        MOV     A,#0x2
        XRL     A,R0
        JNZ     ??pt_ZclReadGetProxyEntry_5
//  143   {   
//  144     gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN, gpdEntry, &gpdEntryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 170)
        MOV     A,#0x48
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x8
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 168)
//  145     gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_EP], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 170)
        MOV     A,#0x48
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x1
        MOV     A,#0x12
??pt_ZclReadGetProxyEntry_4:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 168)
//  146   }
//  147   
//  148   if ( PROXY_TBL_GET_ASSIGNED_ALIAS( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
??pt_ZclReadGetProxyEntry_5:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.5
        JNC     ??pt_ZclReadGetProxyEntry_6
//  149   {
//  150     gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_ALIAS], sizeof ( uint16 ), gpdEntry, &gpdEntryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 170)
        MOV     A,#0x48
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x2
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 168)
//  151   }
//  152   
//  153   if ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
??pt_ZclReadGetProxyEntry_6:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??pt_ZclReadGetProxyEntry_7
//  154   {
//  155     gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEC_OPT], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 170)
        MOV     A,#0x48
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x1
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 168)
//  156   }
//  157   
//  158   if ( ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) || ( PROXY_TBL_GET_SEC_CAP( currEntry[PROXY_TBL_ENTRY_OPT] ) ) ) )
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JC      ??pt_ZclReadGetProxyEntry_8
??pt_ZclReadGetProxyEntry_7:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.5
        JNC     ??pt_ZclReadGetProxyEntry_9
//  159   {
//  160     gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEC_FRAME], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
??pt_ZclReadGetProxyEntry_8:
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 170)
        MOV     A,#0x48
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x4
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 168)
//  161   }
//  162   
//  163   if ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
??pt_ZclReadGetProxyEntry_9:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??pt_ZclReadGetProxyEntry_10
//  164   {
//  165     gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_KEY], SEC_KEY_LEN, gpdEntry, &gpdEntryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 170)
        MOV     A,#0x48
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x10
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 168)
//  166   }
//  167   
//  168   if ( PROXY_TBL_GET_LIGHTWIGHT_UNICAST( currEntry[PROXY_TBL_ENTRY_OPT] ) )
??pt_ZclReadGetProxyEntry_10:
        MOV     A,#-0x7a
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JC      $+5
        LJMP    ??pt_ZclReadGetProxyEntry_11 & 0xFFFF
//  169   {
//  170     uint8 sinkCount = 0;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
//  171     uint8 sinkCountByte = gpdEntryLen;
//  172     
//  173     gpdEntryLen += sizeof ( sinkCountByte );
??CrossCallReturnLabel_3:
        INC     A
        MOVX    @DPTR,A
//  174     
//  175     if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
        MOV     A,#0x46
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     ?V6,#0x0
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x28
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V8,R1
        MOV     ?V9,R2
        MOV     ?V10,#0x0
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 171)
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     R1,?V0
        MOV     R2,?V1
        MOV     R3,?V2
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 168)
        MOV     A,R1
        JNZ     ??pt_ZclReadGetProxyEntry_12
//  176     {
//  177       sinkCount += 1;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
//  178       osal_memcpy( &gpdEntry[sinkCountByte], &sinkCount, sizeof ( uint8 ) );
??CrossCallReturnLabel_7:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 171)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,?V12
        MOV     R3,?V13
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 168)
//  179       gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN, gpdEntry, &gpdEntryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V8,R0
        MOV     ?V9,R1
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 170)
        MOV     A,#0x48
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0xa
        MOV     A,#0x2a
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 168)
//  180     }
//  181     if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN ) )
??pt_ZclReadGetProxyEntry_12:
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x32
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V8,R1
        MOV     ?V9,R2
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 171)
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     R1,?V0
        MOV     R2,?V1
        MOV     R3,?V2
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 168)
        MOV     A,R1
        JNZ     ??pt_ZclReadGetProxyEntry_11
//  182     {
//  183       sinkCount += 1;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
//  184       osal_memcpy( &gpdEntry[sinkCountByte], &sinkCount, sizeof ( uint8 ) );
??CrossCallReturnLabel_8:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 171)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,?V12
        MOV     R3,?V13
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 168)
//  185       gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN, gpdEntry, &gpdEntryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 170)
        MOV     A,#0x48
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0xa
        MOV     A,#0x34
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 168)
//  186     }
//  187   }
//  188      
//  189   if ( PROXY_TBL_GET_CGROUP( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
??pt_ZclReadGetProxyEntry_11:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??pt_ZclReadGetProxyEntry_13 & 0xFFFF
//  190   {
//  191     uint8 groupCount = 0;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
//  192     uint8 groupCountByte = gpdEntryLen;
//  193     if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint16 ) ) )
??CrossCallReturnLabel_4:
        MOV     A,#0x46
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     ?V6,#0x0
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x3c
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V8,R1
        MOV     ?V9,R2
        MOV     ?V10,#0x0
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 171)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R1,?V0
        MOV     R2,?V1
        MOV     R3,?V2
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 168)
        MOV     A,R1
        JNZ     ??pt_ZclReadGetProxyEntry_14
//  194     {
//  195       groupCount += 1;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
//  196       osal_memcpy( &gpdEntry[groupCountByte], &groupCount, sizeof ( uint8 ) );
??CrossCallReturnLabel_9:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 171)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,?V12
        MOV     R3,?V13
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 168)
//  197       gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V8,R0
        MOV     ?V9,R1
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 170)
        MOV     A,#0x48
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x4
        MOV     A,#0x3e
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 168)
//  198     }
//  199     if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof ( uint16 ) ) )
??pt_ZclReadGetProxyEntry_14:
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x40
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V8,R1
        MOV     ?V9,R2
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 171)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R1,?V0
        MOV     R2,?V1
        MOV     R3,?V2
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 168)
        MOV     A,R1
        JNZ     ??pt_ZclReadGetProxyEntry_13
//  200     {
//  201       groupCount += 1;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
//  202       osal_memcpy( &gpdEntry[groupCountByte], &groupCount, sizeof( uint8 ) );
??CrossCallReturnLabel_10:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 171)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,?V12
        MOV     R3,?V13
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 168)
//  203       gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 170)
        MOV     A,#0x48
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x4
        MOV     A,#0x42
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 168)
//  204     }
//  205   }
//  206   
//  207   gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GRP_RAD], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
??pt_ZclReadGetProxyEntry_13:
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 170)
        MOV     A,#0x48
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x1
        MOV     A,#0x46
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 168)
//  208   
//  209   if ( ( PROXY_TBL_GET_ENTRY_ACTIVE( currEntry[PROXY_TBL_ENTRY_OPT] ) == 0 ) || ( PROXY_TBL_GET_ENTRY_VALID( currEntry[PROXY_TBL_ENTRY_OPT] ) == 0 ) )
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x18
        XRL     A,#0x18
        JZ      ??pt_ZclReadGetProxyEntry_15
//  210   {
//  211     gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 170)
        MOV     A,#0x48
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x1
        MOV     A,#0x47
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 168)
??pt_ZclReadGetProxyEntry_15:
        MOV     A,#-0x58
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
//  212   }
//  213   
//  214   if ( pData != NULL )
        MOV     DPL,?V0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V14
        ORL     A,?V15
        JNZ     $+5
        LJMP    ??pt_ZclReadGetProxyEntry_16 & 0xFFFF
//  215   {
//  216     uint8 sinkEntryLen;
//  217     uint16 totalLen;
//  218     
//  219     sinkEntryLen = gpdEntryLen;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R7,A
//  220     if ( *len != 0 )
        MOV     A,R0
        JZ      ??pt_ZclReadGetProxyEntry_17
//  221     {
//  222     gpdEntryLen -= sizeof ( uint16 );
        MOVX    A,@DPTR
        ADD     A,#-0x2
        MOVX    @DPTR,A
//  223     }
//  224     totalLen = gpdEntryLen;
??pt_ZclReadGetProxyEntry_17:
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  225     totalLen += *len;
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
//  226     osal_memcpy( pData, &totalLen, sizeof ( uint16 ) );
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 171)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,?V14
        MOV     R3,?V15
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 168)
//  227     if ( *len == 0 )
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        JNZ     ??pt_ZclReadGetProxyEntry_18
//  228     {
//  229       pData += sizeof ( uint16 );
        MOV     A,?V14
        ADD     A,#0x2
        MOV     ?V14,A
        JNC     ??pt_ZclReadGetProxyEntry_18
        INC     ?V15
//  230     }
//  231     gpdEntryLen += sizeof ( uint16 );
??pt_ZclReadGetProxyEntry_18:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x2
        MOVX    @DPTR,A
//  232     
//  233     pData += *len;
//  234     osal_memcpy( pData, gpdEntry, sinkEntryLen );
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0x46
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 171)
        MOV     A,R7
        MOV     R4,A
        MOV     R5,#0x0
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V14
        ADD     A,R0
        MOV     R2,A
        CLR     A
        ADDC    A,?V15
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 168)
//  235     if ( *len != 0 )
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        JZ      ??pt_ZclReadGetProxyEntry_19
//  236     {
//  237       *len = totalLen;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPL,?V0
        MOV     DPH,?V1
        SJMP    ??pt_ZclReadGetProxyEntry_20
//  238       return status;
//  239     }
//  240     *len += gpdEntryLen;
//  241     return status;
//  242   }
//  243   else
//  244   {
//  245     if ( *len == 0 )
??pt_ZclReadGetProxyEntry_16:
        MOV     A,R0
        JNZ     ??pt_ZclReadGetProxyEntry_19
//  246     {
//  247       gpdEntryLen += sizeof ( uint16 );
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x2
        MOVX    @DPTR,A
//  248     }
//  249     *len += gpdEntryLen;
??pt_ZclReadGetProxyEntry_19:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        ADD     A,R0
??pt_ZclReadGetProxyEntry_20:
        MOVX    @DPTR,A
//  250     return status;
        MOV     A,R6
        MOV     R1,A
??pt_ZclReadGetProxyEntry_2:
        MOV     A,#-0x70
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
//  251   }
//  252 }
          CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond1 Using cfiCommon0
          CFI Function pt_ZclReadGetProxyEntry
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 168)
          CFI Block cfiCond2 Using cfiCommon0
          CFI (cfiCond2) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond2) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond2) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond2) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond2) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond2) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond2) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond2) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond2) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond2) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond2) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond2) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond2) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond2) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond2) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond2) CFA_SP SP+-2
          CFI (cfiCond2) CFA_XSP16 add(XSP16, 168)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond3) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond3) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond3) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond3) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond3) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond3) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond3) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond3) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond3) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 168)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond4) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond4) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond4) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond4) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond4) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond4) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond4) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 168)
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V4
        RET
          CFI EndBlock cfiCond1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function pt_ZclReadGetProxyEntry
          CFI Conditional ??CrossCallReturnLabel_5
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 168)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond7) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond7) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond7) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 168)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     ?V12,A
        CLR     A
        ADDC    A,DPH
        MOV     ?V13,A
        MOV     A,#0x1
        RET
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function pt_ZclReadGetProxyEntry
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 168)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond10) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond10) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond10) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 168)
          CFI Block cfiPicker11 Using cfiCommon1
          CFI (cfiPicker11) NoFunction
          CFI (cfiPicker11) Picker
        CLR     A
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV     R0,A
        RET
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiPicker11
//  253 
//  254 /*********************************************************************
//  255  * @fn      zclGpp_ReadWriteAttrCB
//  256  *
//  257  * @brief   Handle Diagnostics attributes.
//  258  *
//  259  * @param   clusterId - cluster that attribute belongs to
//  260  * @param   attrId - attribute to be read or written
//  261  * @param   oper - ZCL_OPER_LEN, ZCL_OPER_READ, or ZCL_OPER_WRITE
//  262  * @param   pValue - pointer to attribute value, OTA endian
//  263  * @param   pLen - length of attribute value read, native endian
//  264  *
//  265  * @return  status
//  266  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  267 ZStatus_t zclGpp_ReadWriteAttrCB( uint16 clusterId, uint16 attrId, uint8 oper,
zclGpp_ReadWriteAttrCB:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function zclGpp_ReadWriteAttrCB
        CODE
//  268                                          uint8 *pValue, uint16 *pLen )
//  269 {
        FUNCALL zclGpp_ReadWriteAttrCB, pt_ZclReadGetProxyEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V1,R1
//  270   ZStatus_t status = ZSuccess;
        MOV     R1,#0x0
//  271   uint16 proxyTableIndex;
//  272   uint8 i;
//  273 
//  274   switch ( oper )
        MOV     A,?V1
        JZ      ??zclGpp_ReadWriteAttrCB_0
        DEC     A
        JZ      ??zclGpp_ReadWriteAttrCB_0
        DEC     A
        JZ      ??zclGpp_ReadWriteAttrCB_1
        SJMP    ??zclGpp_ReadWriteAttrCB_2
//  275   {
//  276     case ZCL_OPER_LEN:
//  277     case ZCL_OPER_READ:
//  278       if ( attrId == ATTRID_GP_PROXY_TABLE )
??zclGpp_ReadWriteAttrCB_0:
        MOV     A,#0x11
        XRL     A,R4
        ORL     A,R5
        JNZ     ??zclGpp_ReadWriteAttrCB_2
//  279       { 
//  280         for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
        MOV     ?V0,#0x0
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
//  281         {
//  282           proxyTableIndex = ZCD_NV_PROXY_TABLE_START + i;
//  283           
//  284           status = pt_ZclReadGetProxyEntry ( proxyTableIndex, pValue, (uint8*)pLen );
??zclGpp_ReadWriteAttrCB_3:
        ; Setup parameters for call to function pt_ZclReadGetProxyEntry
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,?V0
        ADD     A,#0x10
        MOV     R2,A
        CLR     A
        ADDC    A,#0x3
        MOV     R3,A
        LCALL   `??pt_ZclReadGetProxyEntry::?relay`; Banked call to: pt_ZclReadGetProxyEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R1
        MOV     R1,A
//  285           if ( status != ZSuccess )
        JNZ     ??zclGpp_ReadWriteAttrCB_1
//  286           {
//  287             status = ZFailure;
//  288             break;
//  289           }
//  290         }
        INC     ?V0
        MOV     A,?V0
        CLR     C
        SUBB    A,#0x6
        JNC     ??zclGpp_ReadWriteAttrCB_2
        SJMP    ??zclGpp_ReadWriteAttrCB_3
//  291         
//  292       }
//  293       break;
//  294 
//  295     case ZCL_OPER_WRITE:
//  296       status = ZFailure;
??zclGpp_ReadWriteAttrCB_1:
        MOV     R1,#0x1
//  297       break;
//  298   }
//  299 
//  300   return ( status );
??zclGpp_ReadWriteAttrCB_2:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
//  301 }
          CFI EndBlock cfiBlock12
//  302 
//  303  /*********************************************************************
//  304  * @fn          gp_pairingSetProxyTblOptions
//  305  *
//  306  * @brief       Function to fill the options pramenter in a Proxy Table entry
//  307  *              from a GP Pairing Command
//  308  *
//  309  * @param       pBitField - pointer to the bit field.
//  310  *              bit       - position of the bit to set in the given bitfield.
//  311  *
//  312  * @return      
//  313  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  314 static uint16 gp_pairingSetProxyTblOptions ( uint32 pairingOpt )
gp_pairingSetProxyTblOptions:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function gp_pairingSetProxyTblOptions
        CODE
//  315 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V6,R4
        MOV     ?V7,R5
//  316   uint8  proxyOpt[2] = {0x00, 0x00};
        MOV     DPTR,#`?<Constant {0, 0}>`
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x2
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  317   uint16 opt = 0; 
//  318   
//  319   PAIRING_PROXY_TBL_SET_APPLICATION_ID(( uint8* )&proxyOpt[0], pairingOpt);
//  320   PROXY_TBL_SET_ENTRY_ACTIVE( &proxyOpt[0] );
//  321   PROXY_TBL_SET_ENTRY_VALID( &proxyOpt[0] );
        MOV     ?V0,R2
        MOV     A,R2
        ANL     A,#0x7
        MOV     R0,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ANL     A,#0xf8
        ORL     A,R0
        ORL     A,#0x18
        MOVX    @DPTR,A
//  322   PAIRING_PROXY_TBL_SET_MAC_SEQ_CAP(( uint16* )&proxyOpt, pairingOpt);
        ANL     A,#0xdf
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     ?V1,?V5
        MOV     A,#0x3
        MOV     R0,#?V0
        LCALL   ?US_SHR
        MOV     A,?V0
        ANL     A,#0x20
        MOV     R0,A
        MOV     A,R2
        ORL     A,R0
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  323   
//  324   if ( GP_IS_COMMUNICATION_MODE_LIGHT_UNICAST( pairingOpt ) )
        MOV     ?V0,?V4
        MOV     A,?V0
        SWAP    A
        RRC     A
        ANL     A,#0x7
        ANL     A,#0x3
        MOV     R0,A
        MOV     A,#0x3
        XRL     A,R0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JNZ     ??gp_pairingSetProxyTblOptions_0
//  325   {
//  326     PROXY_TBL_SET_LIGHTWIGHT_UNICAST( &proxyOpt[0] );
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.6
        MOVX    @DPTR,A
//  327   }
//  328   else
//  329   {
//  330     PROXY_TBL_CLR_LIGHTWIGHT_UNICAST( &proxyOpt[0] );
//  331   }
//  332   if ( GP_IS_COMMUNICATION_MODE_GRPCAST_DGROUP_ID( pairingOpt ) )
//  333   {
//  334     PROXY_TBL_SET_DGROUP( &proxyOpt[0] );
//  335   }
//  336   else
//  337   {
//  338     PROXY_TBL_CLR_DGROUP( &proxyOpt[0] );
??gp_pairingSetProxyTblOptions_1:
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.7
        MOVX    @DPTR,A
//  339   }
//  340   if ( GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( pairingOpt ) )
        MOV     A,#0x2
        XRL     A,R0
        JNZ     ??gp_pairingSetProxyTblOptions_2
//  341   {
//  342     PROXY_TBL_SET_CGROUP( &proxyOpt[0] );
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        SJMP    ??gp_pairingSetProxyTblOptions_3
//  343   }
??gp_pairingSetProxyTblOptions_0:
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.6
        MOVX    @DPTR,A
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??gp_pairingSetProxyTblOptions_1
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.7
        MOVX    @DPTR,A
//  344   else
//  345   {
//  346     PROXY_TBL_CLR_CGROUP( &proxyOpt[0] );
??gp_pairingSetProxyTblOptions_2:
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.0
??gp_pairingSetProxyTblOptions_3:
        MOVX    @DPTR,A
//  347   }
//  348   
//  349   // FALSE by default
//  350   PROXY_TBL_CLR_FIRST_TO_FORWARD( &proxyOpt[1] );
//  351   
//  352   // The InRange sub-field, if set to 0b1, indicates that this GPD is in range 
//  353   // of this proxy. The default value is FALSE
//  354   PROXY_TBL_CLR_IN_RANGE( &proxyOpt[1] );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0xf9
        MOVX    @DPTR,A
//  355   // The GPDfixed sub-field, if set to 0b1, indicates portability capabilities 
//  356   if ( GP_GET_GPD_FIXED_BIT( pairingOpt ) )
        MOV     A,?V0
        ANL     A,#0x80
        JZ      ??gp_pairingSetProxyTblOptions_4
//  357   {
//  358     PROXY_TBL_SET_GPD_FIXED( &proxyOpt[1] );
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.3
        SJMP    ??gp_pairingSetProxyTblOptions_5
//  359   }
//  360   else
//  361   {
//  362     PROXY_TBL_CLR_GPD_FIXED( &proxyOpt[1] );
??gp_pairingSetProxyTblOptions_4:
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.3
??gp_pairingSetProxyTblOptions_5:
        MOVX    @DPTR,A
//  363   }
//  364   
//  365   if ( GP_IS_COMMUNICATION_MODE_FULL_UNICAST( pairingOpt ) )
        MOV     A,R0
        JNZ     ??gp_pairingSetProxyTblOptions_6
//  366   {
//  367     PROXY_TBL_SET_HAS_ALL_ROUTES( &proxyOpt[1] );
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.4
        SJMP    ??gp_pairingSetProxyTblOptions_7
//  368   }
//  369   else
//  370   {
//  371     PROXY_TBL_CLR_HAS_ALL_ROUTES( &proxyOpt[1] );
??gp_pairingSetProxyTblOptions_6:
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.4
??gp_pairingSetProxyTblOptions_7:
        MOVX    @DPTR,A
//  372   }
//  373   if ( GP_ALIAS ( pairingOpt ) )
        MOV     ?V1,?V5
        MOV     ?V2,?V6
        MOV     ?V3,?V7
        MOV     DPTR,#__Constant_10000
        MOV     R0,#?V0
        LCALL   ?L_AND_X
        MOV     A,?V0
        ORL     A,?V1
        ORL     A,?V2
        ORL     A,?V3
        JZ      ??gp_pairingSetProxyTblOptions_8
//  374   {
//  375     PROXY_TBL_SET_ASSIGNED_ALIAS( &proxyOpt[1] );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.5
        SJMP    ??gp_pairingSetProxyTblOptions_9
//  376   }
//  377   else
//  378   {
//  379     PROXY_TBL_CLR_ASSIGNED_ALIAS( &proxyOpt[1]);
??gp_pairingSetProxyTblOptions_8:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.5
??gp_pairingSetProxyTblOptions_9:
        MOVX    @DPTR,A
//  380   }
//  381   if ( GP_GET_SEC_LEVEL( pairingOpt ) > 1 )
        MOV     DPTR,#__Constant_2
        MOV     A,#0x9
        MOV     R0,#?V4
        LCALL   ?US_SHR
        MOV     A,?V4
        ANL     A,#0x3
        MOV     ?V0,A
        MOV     ?V1,#0x0
        CLR     A
        MOV     ?V2,A
        MOV     ?V3,A
        MOV     R0,#?V0
        LCALL   ?UL_GE_X
        MOV     A,#0x1
        JNC     ??gp_pairingSetProxyTblOptions_10
//  382   {
//  383     PROXY_TBL_SET_SEC_USE( &proxyOpt[1] );
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.6
        SJMP    ??gp_pairingSetProxyTblOptions_11
//  384   }
//  385   else
//  386   {
//  387     PROXY_TBL_CLR_SEC_USE( &proxyOpt[1] );
??gp_pairingSetProxyTblOptions_10:
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.6
??gp_pairingSetProxyTblOptions_11:
        MOVX    @DPTR,A
//  388   }
//  389   PROXY_TBL_SET_OPT_EXT( &proxyOpt[1] );
//  390   PROXY_TBL_CLR_OPT_EXT( &proxyOpt[1] );
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.7
        LCALL   ?Subroutine7 & 0xFFFF
//  391   
//  392   opt |= ( ( proxyOpt[0] ) & 0x00FF );
//  393   opt |= ( ( ( proxyOpt[1] ) <<  8 ) & 0xFF00 );
//  394     
//  395   return opt;
??CrossCallReturnLabel_15:
        MOV     R2,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock13
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  396 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond15 Using cfiCommon0
          CFI Function pt_ZclReadGetProxyEntry
          CFI Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 168)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function pt_ZclReadGetProxyEntry
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_4
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond16) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond16) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond16) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-4
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 168)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function gp_pairingSetProxyTblOptions
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18
//  397 
//  398 /*********************************************************************
//  399  * @fn          gp_PairingUpdateProxyTlb
//  400  *
//  401  * @brief       General function fill the proxy table vector
//  402  *
//  403  * @param       
//  404  *
//  405  * @return      
//  406  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  407 void gp_PairingUpdateProxyTlb( gpPairingCmd_t* payload )
gp_PairingUpdateProxyTlb:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function gp_PairingUpdateProxyTlb
        CODE
//  408 {
        FUNCALL gp_PairingUpdateProxyTlb, gp_pairingSetProxyTblOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 91, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 91, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 93, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 93, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 93, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 93, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 93, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 94, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 94, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 93, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 93, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 93, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 93, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 91, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 91, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 93, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 93, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 93, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 93, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 93, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 93, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_PopulateProxyTblEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 93, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 94, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 94, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 94, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 94, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PairingUpdateProxyTlb, gp_UpdateProxyTlb
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 91, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 91, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 71
        MOV     A,#-0x47
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 91)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  409   uint8  entryVector[PROXY_TBL_ENTRY_LEN] = {0};
        MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2`
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x40
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  410   uint8  entryLen = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  411   uint8  addSink;
//  412   uint16 entryOptions = 0;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  413   uint8  securityOpt = 0;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  414   uint8  searchCounter = 0x0A;
        INC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  415   uint16 grpAlias = 0xFFFF;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  416   
//  417   addSink = GP_ADD_SINK( payload->options );
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V8
        LCALL   ?L_MOV_X
        MOV     ?V0,?V8
        MOV     A,?V0
        RRC     A
        RRC     A
        RRC     A
        ANL     A,#0x1f
        ANL     A,#0x1
        MOV     ?V4,A
//  418   
//  419   entryOptions = gp_pairingSetProxyTblOptions( payload->options );
        ; Setup parameters for call to function gp_pairingSetProxyTblOptions
        MOV     R2,?V8
        MOV     R3,?V9
        MOV     R4,?V10
        MOV     R5,?V11
        LCALL   `??gp_pairingSetProxyTblOptions::?relay`; Banked call to: gp_pairingSetProxyTblOptions
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ?Subroutine2 & 0xFFFF
//  420   gp_PopulateProxyTblEntry( ( uint8* )&entryOptions, sizeof( entryOptions ), entryVector, &entryLen );
??CrossCallReturnLabel_0:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 93)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x2
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 91)
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     A,?V0
        ANL     A,#0x7
        MOV     R0,A
        JNZ     ??gp_PairingUpdateProxyTlb_0
//  421     
//  422   // Options bitfield
//  423   // If Application Id bitfield is 0b000
//  424   if( GP_IS_APPLICATION_ID_GPD( payload->options ) )
//  425   {        
//  426     // Populate GPD ID
//  427     entryLen += sizeof( uint32 );
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x4
        LCALL   ?Subroutine2 & 0xFFFF
//  428     gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdId, sizeof( payload->gpdId ), entryVector, &entryLen );
//  429   }
??CrossCallReturnLabel_1:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 93)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x4
        SJMP    ??gp_PairingUpdateProxyTlb_1
          CFI CFA_XSP16 add(XSP16, 91)
//  430   // If Application Id bitfield is 0b010
//  431   else if( GP_IS_APPLICATION_ID_IEEE( payload->options ) )
??gp_PairingUpdateProxyTlb_0:
        MOV     A,#0x2
        XRL     A,R0
        JNZ     ??gp_PairingUpdateProxyTlb_2
//  432   {   
//  433     gp_PopulateProxyTblEntry( payload->gpdIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 93)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x8
??gp_PairingUpdateProxyTlb_1:
        MOV     A,R6
        ADD     A,R1
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 91)
//  434   }
//  435   
//  436   gp_PopulateProxyTblEntry( ( uint8* )&payload->ep, sizeof( payload->ep ), entryVector, &entryLen );
??gp_PairingUpdateProxyTlb_2:
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 93)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x1
        MOV     A,R6
        ADD     A,#0x10
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 91)
//  437 
//  438   gp_PopulateProxyTblEntry( ( uint8* )&payload->assignedAlias, sizeof( payload->assignedAlias ), entryVector, &entryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 93)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x2
        MOV     A,R6
        ADD     A,#0x32
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 91)
//  439 
//  440   //Security options
//  441   securityOpt |= GP_GET_SEC_LEVEL( payload->options );
//  442   securityOpt |= GP_GET_SEC_KEY_TYPE (payload->options ) << GP_OPT_SEC_LEVEL_LEN;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     ?V6,?V0
        MOV     ?V7,?V1
        MOV     A,#0xb
        MOV     R0,#?V6
        LCALL   ?US_SHR
        MOV     A,?V6
        ANL     A,#0x7
        RLC     A
        RLC     A
        ANL     A,#0xfc
        MOV     R1,A
        MOV     A,#0x9
        MOV     R0,#?V0
        LCALL   ?US_SHR
        MOV     A,?V0
        ANL     A,#0x3
        ORL     A,R1
        MOV     R0,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ORL     A,R0
        MOVX    @DPTR,A
//  443   osal_memcpy( &entryVector[entryLen], &securityOpt, sizeof ( uint8 ) );
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 94)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 91)
//  444   entryLen += sizeof ( uint8 );
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        INC     A
        LCALL   ?Subroutine2 & 0xFFFF
//  445 
//  446   gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdSecCounter, sizeof( payload->gpdSecCounter ), entryVector, &entryLen );
??CrossCallReturnLabel_2:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 93)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x4
        MOV     A,R6
        ADD     A,#0x1e
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 91)
//  447   gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdKey, SEC_KEY_LEN, entryVector, &entryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 93)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x10
        MOV     A,R6
        ADD     A,#0x22
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 91)
//  448   
//  449   gp_PopulateProxyTblEntry( payload->sinkIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
        MOV     A,R6
        ADD     A,#0x11
        MOV     ?V2,A
        CLR     A
        ADDC    A,R7
        MOV     ?V3,A
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 93)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x8
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 91)
//  450   gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkNwkAddr, sizeof( payload->sinkNwkAddr ), entryVector, &entryLen );
        MOV     A,R6
        ADD     A,#0x19
        MOV     ?V0,A
        CLR     A
        ADDC    A,R7
        MOV     ?V1,A
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V6,R0
        MOV     ?V7,R1
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 93)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x2
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 91)
//  451   // to add the invalid entries
//  452   osal_memset ( &payload->sinkIEEE, 0xFF, Z_EXTADDR_LEN );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#-0x1
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  453   payload->sinkNwkAddr = 0xFFFF;
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  454   gp_PopulateProxyTblEntry( payload->sinkIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 93)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x8
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 91)
//  455   gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkNwkAddr, sizeof( payload->sinkNwkAddr ), entryVector, &entryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 93)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x2
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 91)
//  456   
//  457   gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkGroupID, sizeof( payload->sinkGroupID ), entryVector, &entryLen );
        MOV     A,R6
        ADD     A,#0x1b
        MOV     ?V0,A
        CLR     A
        ADDC    A,R7
        MOV     ?V1,A
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 93)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x2
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 91)
//  458   // to add the invalid entries
//  459   gp_PopulateProxyTblEntry( ( uint8* )&grpAlias, sizeof ( uint16 ), entryVector, &entryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 93)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x2
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 91)
//  460   payload->sinkGroupID = 0xFFFF;
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  461   gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkGroupID, sizeof( payload->sinkGroupID ), entryVector, &entryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 93)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x2
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 91)
//  462   gp_PopulateProxyTblEntry( ( uint8* )&grpAlias, sizeof ( uint16 ), entryVector, &entryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 93)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x2
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 91)
//  463 
//  464   
//  465   gp_PopulateProxyTblEntry( &payload->forwardingRadius, sizeof( payload->forwardingRadius ), entryVector, &entryLen );
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 93)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP102_8
        MOV     R1,#0x1
        MOV     A,R6
        ADD     A,#0x34
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 91)
//  466  
//  467   if ( ( PROXY_TBL_GET_ENTRY_ACTIVE( entryVector[0] ) == 0 ) && ( PROXY_TBL_GET_ENTRY_VALID( entryVector[0] ) == 0) )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     ?V2,#0x0
        MOVX    A,@DPTR
        ANL     A,#0x18
        JZ      ??gp_PairingUpdateProxyTlb_3
//  468   {
//  469     osal_memcpy( &entryVector[entryLen], &searchCounter, sizeof ( uint8 ) );
        ; Setup parameters for call to function osal_memcpy
//  470   }
//  471   else
//  472   {
//  473     searchCounter = 0xFF;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  474     osal_memcpy( &entryVector[entryLen], &searchCounter, sizeof ( uint8 ) );
        ; Setup parameters for call to function osal_memcpy
??gp_PairingUpdateProxyTlb_3:
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 94)
        MOV     R4,#0x1
        MOV     R5,#0x0
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 91)
//  475   }
//  476   // Update the proxy table
//  477   gp_UpdateProxyTlb( entryVector, addSink );
        ; Setup parameters for call to function gp_UpdateProxyTlb
        MOV     R1,?V4
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??gp_UpdateProxyTlb::?relay`; Banked call to: gp_UpdateProxyTlb
//  478 }
        MOV     A,#0x47
          CFI EndBlock cfiBlock19
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 91)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Valid
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond21 Using cfiCommon0
          CFI Function pt_ZclReadGetProxyEntry
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 171)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function gp_PairingUpdateProxyTlb
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 94)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function gp_PairingUpdateProxyTlb
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 91)
          CFI Block cfiPicker24 Using cfiCommon1
          CFI (cfiPicker24) NoFunction
          CFI (cfiPicker24) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     R2,A
        CLR     A
        ADDC    A,DPH
        MOV     R3,A
        RET
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond25 Using cfiCommon0
          CFI Function gp_PairingUpdateProxyTlb
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 91)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function gp_PairingUpdateProxyTlb
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 91)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function gp_PairingUpdateProxyTlb
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 91)
          CFI Block cfiPicker28 Using cfiCommon1
          CFI (cfiPicker28) NoFunction
          CFI (cfiPicker28) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        ; Setup parameters for call to function gp_PopulateProxyTblEntry
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiPicker28
//  479 
//  480 /*********************************************************************
//  481  * @fn          gp_UpdateProxyTlb
//  482  *
//  483  * @brief       To update the proxy table NV vectors
//  484  *
//  485  * @param       pNpEntryew - New entry array to be added
//  486  *
//  487  * @return
//  488  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  489 uint8 gp_UpdateProxyTlb( uint8* pEntry, uint8 addSink )
gp_UpdateProxyTlb:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function gp_UpdateProxyTlb
        CODE
//  490 {
        FUNCALL gp_UpdateProxyTlb, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 275, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 275, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, gp_getProxyTableByIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 272, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 272, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 276, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 276, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 275, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 275, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 276, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 276, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 275, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 275, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, pt_updateLightweightUnicastSink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 272, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 272, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 275, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 275, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 275, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 275, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 275, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 275, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 275, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 275, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 275, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 275, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 275, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 275, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 275, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 275, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 276, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 276, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_UpdateProxyTlb, pt_addSinkGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 272, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 272, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 256
        MOV     DPL,#0x0
        MOV     DPH,#-0x1
        LCALL   ?ADD_XSTACK_DISP0_16
          CFI CFA_XSP16 add(XSP16, 272)
        MOV     ?V7,R1
//  491   uint8 i;
//  492   uint8 newEntry[PROXY_TBL_ENTRY_LEN] = {0};
        MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_3`
        MOV     A,#-0x80
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x40
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  493   uint8 currEntry[PROXY_TBL_ENTRY_LEN] = {0};
        MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_4`
        MOV     A,#0x40
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x40
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  494   uint16 proxyTableIndex;
//  495   uint8 status;
//  496   
//  497   // Copy the new entry pointer to array
//  498   osal_memcpy( &newEntry, pEntry, PROXY_TBL_ENTRY_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 275)
        MOV     R4,#0x40
        MOV     R5,#0x0
        MOV     A,#-0x7d
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 272)
//  499 
//  500   for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
        MOV     ?V3,#0x0
        MOV     A,#-0x80
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
//  501   {
//  502     proxyTableIndex = ZCD_NV_PROXY_TABLE_START + i;
??gp_UpdateProxyTlb_0:
        MOV     A,?V3
        ADD     A,#0x10
        MOV     R6,A
        CLR     A
        ADDC    A,#0x3
        MOV     R7,A
//  503     status = gp_getProxyTableByIndex( proxyTableIndex, currEntry );
        ; Setup parameters for call to function gp_getProxyTableByIndex
        MOV     A,#0x40
        LCALL   ?XSTACK_DISP102_8
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
        MOV     A,R1
        MOV     R0,A
//  504 
//  505     if ( status == NV_OPER_FAILED )
        MOV     A,#0xa
        XRL     A,R0
        JNZ     ??gp_UpdateProxyTlb_1
//  506     {
//  507       // FAIL
//  508       return status;
        MOV     R1,#0xa
        LJMP    ??gp_UpdateProxyTlb_2 & 0xFFFF
//  509     }
//  510     
//  511     // if the entry is empty
//  512     if ( ( status == NV_INVALID_DATA ) && ( addSink == TRUE ) )
??gp_UpdateProxyTlb_1:
        MOV     A,#0xd
        XRL     A,R0
        JNZ     ??gp_UpdateProxyTlb_3
        MOV     A,#0x1
        XRL     A,?V7
        JNZ     $+5
        LJMP    ??gp_UpdateProxyTlb_4 & 0xFFFF
//  513     {
//  514       // Save new entry
//  515       status = osal_nv_write( proxyTableIndex, 0,
//  516                            PROXY_TBL_ENTRY_LEN, newEntry );
//  517       
//  518       return status;
        ; Setup parameters for call to function osal_nv_write
//  519     }
//  520     
//  521     if ( pt_lookForGpd( proxyTableIndex, newEntry ) )
??gp_UpdateProxyTlb_3:
        MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_12`
        MOV     A,#-0x40
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x40
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_13`
        MOV     R4,?XSP + 0
        DEC     R5
        MOV     A,#0x40
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 275)
        MOV     R4,#0x40
        MOV     R5,#0x0
        MOV     A,#-0x3d
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 272)
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 274)
        MOV     ?V4,#0x40
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 276)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 272)
        MOV     A,R1
        JNZ     ??gp_UpdateProxyTlb_5
        MOV     A,#-0x40
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x7
        MOV     R2,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ANL     A,#0x7
        XRL     A,R2
        JNZ     ??gp_UpdateProxyTlb_6
        CLR     A
??gp_UpdateProxyTlb_6:
        JNZ     ??gp_UpdateProxyTlb_5
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V4,R1
        MOV     ?V5,R2
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 275)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#-0x3b
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     R3,#0x0
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 272)
        MOV     A,R1
        JNZ     ??gp_UpdateProxyTlb_7
//  522     {
//  523       // Entry found
//  524       break;
//  525     }
//  526     
//  527     if ( i >= GPP_MAX_PROXY_TABLE_ENTRIES )
??gp_UpdateProxyTlb_5:
        MOV     A,?V3
        CLR     C
        SUBB    A,#0x5
        JC      ??gp_UpdateProxyTlb_8
//  528     {
//  529       // No space for new entries
//  530       return FAILURE;
        MOV     R1,#0x1
        LJMP    ??gp_UpdateProxyTlb_2 & 0xFFFF
//  531     }
//  532   }
??gp_UpdateProxyTlb_8:
        INC     ?V3
        MOV     A,?V3
        CLR     C
        SUBB    A,#0x6
        JNC     $+5
        LJMP    ??gp_UpdateProxyTlb_0 & 0xFFFF
//  533 
//  534   if ( PROXY_TBL_GET_LIGHTWIGHT_UNICAST( newEntry[PROXY_TBL_ENTRY_OPT] ) )
??gp_UpdateProxyTlb_7:
        MOV     A,#-0x80
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JC      $+5
        LJMP    ??gp_UpdateProxyTlb_9 & 0xFFFF
//  535   {
//  536     if ( ( !pt_updateLightweightUnicastSink( newEntry, currEntry, addSink ) ) )
        ; Setup parameters for call to function pt_updateLightweightUnicastSink
        MOV     R1,?V7
        MOV     A,#0x40
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#-0x80
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??pt_updateLightweightUnicastSink::?relay`; Banked call to: pt_updateLightweightUnicastSink
        MOV     A,R1
        JNZ     $+5
        LJMP    ??gp_UpdateProxyTlb_10 & 0xFFFF
//  537     {
//  538       // The entry is full
//  539       return NV_BAD_ITEM_LEN;
//  540     }
//  541   }
//  542   else if ( PROXY_TBL_GET_CGROUP( newEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
//  543   {
//  544     if ( ( !pt_addSinkGroup( newEntry, currEntry ) ) )
//  545     {
//  546       // The entry is full
//  547       return NV_BAD_ITEM_LEN;
//  548     }
//  549   }
//  550 
//  551   if ( pt_updateAlias( newEntry ) )
??gp_UpdateProxyTlb_11:
        MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_5`
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x40
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 275)
        MOV     R4,#0x40
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 272)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.5
        JNC     ??gp_UpdateProxyTlb_12
//  552   {
//  553     osal_memcpy( &currEntry[PROXY_TBL_ENTRY_ALIAS], &newEntry[PROXY_TBL_ENTRY_ALIAS], sizeof ( uint16 ) );
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#-0x75
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V4,R1
        MOV     ?V5,R2
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 275)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x4e
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 272)
//  554   }
//  555     
//  556   if ( pt_updateSecurity( newEntry ) )
??gp_UpdateProxyTlb_12:
        MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_6`
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x40
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 275)
        MOV     R4,#0x40
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 272)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??gp_UpdateProxyTlb_13
//  557   {
//  558     PROXY_TBL_SET_SEC_USE( &currEntry[PROXY_TBL_ENTRY_OPT + 1] );
        MOV     A,#0x41
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.6
        MOVX    @DPTR,A
//  559     osal_memcpy( &currEntry[PROXY_TBL_ENTRY_SEC_OPT], &newEntry[PROXY_TBL_ENTRY_SEC_OPT], sizeof ( uint8 ) );
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#-0x73
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V4,R1
        MOV     ?V5,R2
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 275)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     A,#0x50
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 272)
//  560     osal_memcpy( &currEntry[PROXY_TBL_ENTRY_GPD_KEY], &newEntry[PROXY_TBL_ENTRY_GPD_KEY], SEC_KEY_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#-0x6e
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V4,R1
        MOV     ?V5,R2
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 275)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,#0x55
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 272)
//  561   }
//  562          
//  563   if ( pt_updateSecFrameCounter( newEntry ) )
??gp_UpdateProxyTlb_13:
        MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_7`
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x40
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 275)
        MOV     R4,#0x40
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 272)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.5
        JNC     ??gp_UpdateProxyTlb_14
//  564   {
//  565     PROXY_TBL_SET_SEC_CAP( &currEntry[PROXY_TBL_ENTRY_SEC_FRAME] );
        MOV     A,#0x4e
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.5
        MOVX    @DPTR,A
//  566   }
//  567   
//  568   osal_memcpy( &currEntry[PROXY_TBL_ENTRY_SEC_FRAME], &newEntry[PROXY_TBL_ENTRY_SEC_FRAME], sizeof ( uint32 ) );
??gp_UpdateProxyTlb_14:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#-0x72
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0,R1
        MOV     ?V1,R2
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 275)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     A,#0x51
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 272)
//  569 
//  570   if ( addSink == TRUE )
        MOV     A,#0x1
        XRL     A,?V7
        JNZ     ??gp_UpdateProxyTlb_15
//  571   {
//  572     currEntry[PROXY_TBL_ENTRY_GRP_RAD] = newEntry[PROXY_TBL_ENTRY_GRP_RAD];
        MOV     A,#-0x42
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x7e
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  573   }
//  574     
//  575   currEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER] = newEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER];
??gp_UpdateProxyTlb_15:
        MOV     A,#-0x41
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x7f
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  576    
//  577   status = osal_nv_write( proxyTableIndex, 0,
//  578                      PROXY_TBL_ENTRY_LEN, currEntry );
//  579   return status;
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0x40
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
??gp_UpdateProxyTlb_4:
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 274)
        MOV     ?V0,#0x40
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 276)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 272)
??gp_UpdateProxyTlb_2:
        MOV     DPL,#0x0
        MOV     DPH,#0x1
        LCALL   ?ADD_XSTACK_DISP0_16
          CFI CFA_XSP16 add(XSP16, 16)
        LJMP    ?Subroutine0 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 272)
??gp_UpdateProxyTlb_9:
        MOV     A,#-0x7f
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??gp_UpdateProxyTlb_11 & 0xFFFF
        ; Setup parameters for call to function pt_addSinkGroup
        MOV     A,#0x40
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#-0x80
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??pt_addSinkGroup::?relay`; Banked call to: pt_addSinkGroup
        MOV     A,R1
        JZ      $+5
        LJMP    ??gp_UpdateProxyTlb_11 & 0xFFFF
??gp_UpdateProxyTlb_10:
        MOV     R1,#0xc
        SJMP    ??gp_UpdateProxyTlb_2
//  580 }
          CFI EndBlock cfiBlock29
//  581 
//  582 /*********************************************************************
//  583  * @fn          gp_CheckAnnouncedDevice
//  584  *
//  585  * @brief       General function to check if it has the announced device 
//  586  *              listed in the SinkAddressList and look for address conflict
//  587  *              resolution.
//  588  *
//  589  * @param       
//  590  *
//  591  * @return      
//  592  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  593 uint8 gp_CheckAnnouncedDevice ( uint8 *sinkIEEE, uint16 sinkNwkAddr )
gp_CheckAnnouncedDevice:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function gp_CheckAnnouncedDevice
        CODE
//  594 {
        FUNCALL gp_CheckAnnouncedDevice, gp_getProxyTableByIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 86, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 86, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_CheckAnnouncedDevice, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 89, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 89, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_CheckAnnouncedDevice, NLME_SendNetworkStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 87, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 87, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_CheckAnnouncedDevice, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 86, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 86, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_CheckAnnouncedDevice, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 86, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 86, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_CheckAnnouncedDevice, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 90, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 90, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_CheckAnnouncedDevice, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 89, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 89, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_CheckAnnouncedDevice, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 89, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 89, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_CheckAnnouncedDevice, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 89, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 89, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_CheckAnnouncedDevice, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 89, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 89, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_CheckAnnouncedDevice, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 89, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 89, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_CheckAnnouncedDevice, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 89, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 89, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 66
        MOV     A,#-0x42
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 86)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  595   uint8 i;
//  596   uint8 status;
//  597   uint8 annceDelay;
//  598   uint8 ProxyTableEntry[PROXY_TBL_ENTRY_LEN];
//  599 
//  600   if( sinkIEEE == NULL )
        MOV     A,R2
        ORL     A,R3
        JNZ     ??gp_CheckAnnouncedDevice_0
//  601   {
//  602     return ZInvalidParameter;
        MOV     R1,#0x2
        LJMP    ??gp_CheckAnnouncedDevice_1 & 0xFFFF
//  603   }     
//  604 
//  605   for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
??gp_CheckAnnouncedDevice_0:
        MOV     R6,#0x0
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R6
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     ?V6,R6
//  606   {
//  607     status = gp_getProxyTableByIndex( ( ZCD_NV_PROXY_TABLE_START + i ), ProxyTableEntry );
??gp_CheckAnnouncedDevice_2:
        ; Setup parameters for call to function gp_getProxyTableByIndex
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP102_8
        MOV     A,R6
        ADD     A,#0x10
        MOV     R2,A
        CLR     A
        ADDC    A,#0x3
        MOV     R3,A
        LCALL   `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
        MOV     A,R1
        MOV     R0,A
//  608 
//  609     if ( status == NV_OPER_FAILED )
        MOV     A,#0xa
        XRL     A,R0
        JNZ     ??gp_CheckAnnouncedDevice_3
//  610     {
//  611       // FAIL
//  612 
//  613       return ZFailure;
        MOV     R1,#0x1
        LJMP    ??gp_CheckAnnouncedDevice_1 & 0xFFFF
//  614     }
//  615     
//  616     // if the entry is empty
//  617     if ( status == NV_INVALID_DATA )
??gp_CheckAnnouncedDevice_3:
        MOV     A,#0xd
        XRL     A,R0
        JNZ     $+5
        LJMP    ??gp_CheckAnnouncedDevice_4 & 0xFFFF
//  618     {
//  619       continue;
//  620     }
//  621     
//  622     // Compare for nwk alias address conflict
//  623     if ( osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_ALIAS], sizeof( uint16 ) ) )
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V8,R1
        MOV     ?V9,R2
        MOV     ?V10,#0x0
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 89)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R1,?V4
        MOV     R2,?V5
        MOV     R3,?V6
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 86)
        MOV     A,R1
        JZ      ??gp_CheckAnnouncedDevice_5
//  624     {
//  625       // Do address conflict resolution
//  626       NLME_SendNetworkStatus( NWK_BROADCAST_SHORTADDR_DEVRXON,
//  627                          sinkNwkAddr, NWKSTAT_ADDRESS_CONFLICT, TRUE );
        ; Setup parameters for call to function NLME_SendNetworkStatus
        MOV     ?V3,#0x1
        MOV     R0,#?V3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 87)
        MOV     R1,#0xd
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#-0x3
        MOV     R3,#-0x1
        LCALL   `??NLME_SendNetworkStatus::?relay`; Banked call to: NLME_SendNetworkStatus
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 86)
//  628       
//  629       aliasConflictAnnce.nwkAddr = sinkNwkAddr;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#aliasConflictAnnce
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  630       osal_memset( aliasConflictAnnce.extAddr, 0xFF, Z_EXTADDR_LEN );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#-0x1
        MOV     R2,#(aliasConflictAnnce + 2) & 0xff
        MOV     R3,#((aliasConflictAnnce + 2) >> 8) & 0xff
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  631       aliasConflictAnnce.capabilities = 0;
        MOV     DPTR,#aliasConflictAnnce + 10
        CLR     A
        MOVX    @DPTR,A
//  632       
//  633       annceDelay = ( osal_rand()/650 ) + 5; // ( 65535/650 = 100 ) + 5 
        ; Setup parameters for call to function osal_rand
        LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     R0,?V8
        MOV     R1,?V9
//  634       // where:
//  635       // 100 is Dmax
//  636       // 5   is Dmin
//  637       osal_start_timerEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT, annceDelay );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R2,#-0x76
        MOV     R3,#0x2
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        ADD     A,#0x5
        MOV     ?V8,A
        CLR     A
        MOV     ?V9,A
        MOV     ?V11,A
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 90)
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#gp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 86)
//  638     }
//  639 
//  640     //Check if one of the Sink IEEE is the same
//  641     if ( osal_memcmp( sinkIEEE, &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], Z_EXTADDR_LEN ) )
??gp_CheckAnnouncedDevice_5:
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V8,R1
        MOV     ?V9,R2
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 89)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,?V0
        MOV     R2,?V1
        MOV     R3,?V2
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 86)
        MOV     A,R1
        JZ      ??gp_CheckAnnouncedDevice_6
//  642     {
//  643       // If Nwk address is different, then update the new address
//  644       if ( !osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR + Z_EXTADDR_LEN], sizeof( uint16 ) ) )
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x2c
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V8,R1
        MOV     ?V9,R2
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 89)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R1,?V4
        MOV     R2,?V5
        MOV     R3,?V6
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 86)
        MOV     A,R1
        JNZ     ??gp_CheckAnnouncedDevice_4
//  645       {
//  646         osal_memcpy( &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR + Z_EXTADDR_LEN], &sinkNwkAddr, sizeof( uint16 ) );
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 89)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x2f
        SJMP    ??gp_CheckAnnouncedDevice_7
          CFI CFA_XSP16 add(XSP16, 86)
//  647       }
//  648     }
//  649     else if ( osal_memcmp( sinkIEEE, &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], Z_EXTADDR_LEN ) )
??gp_CheckAnnouncedDevice_6:
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x2e
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V8,R1
        MOV     ?V9,R2
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 89)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,?V0
        MOV     R2,?V1
        MOV     R3,?V2
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 86)
        MOV     A,R1
        JZ      ??gp_CheckAnnouncedDevice_4
//  650     {
//  651       // If Nwk address is different, then update the new address
//  652       if ( !osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR + Z_EXTADDR_LEN], sizeof( uint16 ) ) )
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x36
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V8,R1
        MOV     ?V9,R2
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 89)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R1,?V4
        MOV     R2,?V5
        MOV     R3,?V6
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 86)
        MOV     A,R1
        JNZ     ??gp_CheckAnnouncedDevice_4
//  653       {
//  654         osal_memcpy( &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR + Z_EXTADDR_LEN], &sinkNwkAddr, sizeof( uint16 ) );
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 89)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x39
??gp_CheckAnnouncedDevice_7:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 86)
//  655       }
//  656     }
//  657   }
??gp_CheckAnnouncedDevice_4:
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x6
        JNC     $+5
        LJMP    ??gp_CheckAnnouncedDevice_2 & 0xFFFF
//  658     
//  659   return ZSuccess;
        MOV     R1,#0x0
??gp_CheckAnnouncedDevice_1:
        MOV     A,#0x42
        LJMP    ?Subroutine1 & 0xFFFF
//  660 }
          CFI EndBlock cfiBlock30
//  661 
//  662  /*********************************************************************
//  663  * PRIVATE FUNCTIONS
//  664  *********************************************************************/
//  665 
//  666 /*********************************************************************
//  667  * @fn          gp_PopulateProxyTblEntry
//  668  *
//  669  * @brief       Populate the given item data
//  670  *
//  671  * @param       pData - Pointer to the new data
//  672  *              size - size of the new data
//  673  *              pTblEntryVector - Pointer to the new vector
//  674  *              vectorLen - Position in the vector to write the data
//  675  *
//  676  * @return
//  677  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  678 static void gp_PopulateProxyTblEntry( uint8* pData, uint8 size, uint8* pTblEntryVector, uint8* vectorLen )
gp_PopulateProxyTblEntry:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function gp_PopulateProxyTblEntry
        CODE
//  679 {
        FUNCALL gp_PopulateProxyTblEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     ?V2,R1
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  680   pTblEntryVector += *(uint8*)vectorLen;
//  681   
//  682   osal_memcpy( pTblEntryVector, pData, size );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,?V2
        MOV     R5,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V0
        ADD     A,R0
        MOV     R2,A
        CLR     A
        ADDC    A,?V1
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
//  683   *(uint8*)vectorLen += size;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,?V2
        MOVX    @DPTR,A
//  684 }
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock31
//  685 
//  686 /*********************************************************************
//  687  * @fn          pt_updateAlias
//  688  *
//  689  * @brief       Get Bit to update assigned alias field or not
//  690  *
//  691  * @param       pNew - New entry array to be added
//  692  *
//  693  * @return      newAlias - TRUE if assigned alias bit is set
//  694  */
//  695 static uint8 pt_updateAlias( uint8* pNew )
//  696 {
//  697   bool newAlias;
//  698   uint8 newEntry[PROXY_TBL_ENTRY_LEN] = {0};
//  699   
//  700   osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
//  701   
//  702   newAlias = PROXY_TBL_GET_ASSIGNED_ALIAS( newEntry[PROXY_TBL_ENTRY_OPT + 1] );
//  703   
//  704   return newAlias;
//  705 }
//  706 
//  707 /*********************************************************************
//  708  * @fn          pt_updateSecurity
//  709  *
//  710  * @brief       Get Bit to update security options field or not
//  711  *
//  712  * @param       pNew - New entry array to be added
//  713  *
//  714  * @return      secUse - TRUE if security use bit is set
//  715  */
//  716 static uint8 pt_updateSecurity( uint8* pNew )
//  717 {
//  718   bool secUse;
//  719   uint8 newEntry[PROXY_TBL_ENTRY_LEN] = {0};
//  720   
//  721   osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
//  722   
//  723   secUse = PROXY_TBL_GET_SEC_USE( newEntry[PROXY_TBL_ENTRY_OPT + 1] );
//  724 
//  725   return secUse;
//  726 }
//  727 
//  728 /*********************************************************************
//  729  * @fn          pt_updateSecFrameCounter
//  730  *
//  731  * @brief       Get Bit to update security frame counter capabilities
//  732  *
//  733  * @param       pNew - New entry array to be added
//  734  *
//  735  * @return      secCap - TRUE if security frame counter capabilities bit is set
//  736  */
//  737 static uint8 pt_updateSecFrameCounter( uint8* pNew )
//  738 {
//  739   bool secCap;
//  740   uint8 newEntry[PROXY_TBL_ENTRY_LEN] = {0};
//  741   
//  742   osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
//  743   
//  744   secCap = PROXY_TBL_GET_SEC_CAP( newEntry[PROXY_TBL_ENTRY_OPT] );
//  745   
//  746   return secCap;
//  747 }
//  748 
//  749 /*********************************************************************
//  750  * @fn          pt_updateLightweightUnicastSink
//  751  *
//  752  * @brief       To add new sink entry
//  753  *
//  754  * @param       pNew - New entry array to be added
//  755  *              pCurr - The current entry array in the proxy table
//  756  *
//  757  * @return      TRUE new entry added, FALSE if not
//  758  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  759 static uint8 pt_updateLightweightUnicastSink( uint8* pNew, uint8* pCurr, uint8 addSink )
pt_updateLightweightUnicastSink:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function pt_updateLightweightUnicastSink
        CODE
//  760 {
        FUNCALL pt_updateLightweightUnicastSink, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 166, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 166, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 166, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 166, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 166, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 166, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 166, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 166, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 166, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 166, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 166, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 166, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 166, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 166, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 166, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 166, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 166, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 166, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 166, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 166, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 163, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 163, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 166, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 166, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 166, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 166, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_updateLightweightUnicastSink, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 166, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 166, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        MOV     A,#-0x17
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 23)
        ; Saved register size: 23
        ; Auto size: 140
        MOV     A,#0x74
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 163)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,R1
        MOV     R6,A
//  761   uint8 newEntry[PROXY_TBL_ENTRY_LEN] = {0};
        MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_8`
        MOV     A,#0x4c
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x40
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  762   uint8 currEntry[PROXY_TBL_ENTRY_LEN] = {0};
        MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_9`
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x40
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  763   uint8 freeSinkEntry[LSINK_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
        MOV     DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_1`
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0xa
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  764   
//  765   osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 166)
        MOV     R4,#0x40
        MOV     R5,#0x0
        MOV     A,#0x4f
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 163)
//  766   osal_memcpy( &currEntry, pCurr, PROXY_TBL_ENTRY_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 166)
        MOV     R4,#0x40
        MOV     R5,#0x0
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 163)
//  767   
//  768   
//  769   // if addSink is TRUE then add the sink to current entry
//  770   if ( addSink ) 
        MOV     A,#0x38
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V8,R1
        MOV     ?V9,R2
        MOV     ?V10,#0x0
        MOV     A,#0x2e
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V4,R1
        MOV     ?V5,R2
        MOV     ?V6,#0x0
        MOV     A,#0x6e
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0,R1
        MOV     ?V1,R2
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V12,R0
        MOV     ?V13,R1
        MOV     ?V14,#0x0
        MOV     A,R6
        MOV     R0,#?V0
        JZ      ??pt_updateLightweightUnicastSink_0
//  771   {
//  772     // if the incomming Sink entry is different to the current entry
//  773     if ( !osal_memcmp( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
        ; Setup parameters for call to function osal_memcmp
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 166)
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     R1,?V4
        MOV     R2,?V5
        MOV     R3,?V6
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 163)
        MOV     A,R1
        JZ      $+5
        LJMP    ??pt_updateLightweightUnicastSink_1 & 0xFFFF
//  774     {
//  775       // add the sink entry in the next slot if empty
//  776       if ( osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN ) )
        ; Setup parameters for call to function osal_memcmp
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 166)
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     R1,?V12
        MOV     R2,?V13
        MOV     R3,?V14
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 163)
        MOV     A,R1
        MOV     R0,#?V0
        JZ      ??pt_updateLightweightUnicastSink_2
//  777       {
//  778         osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN );
        ; Setup parameters for call to function osal_memcpy
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 166)
        LJMP    ??pt_updateLightweightUnicastSink_3 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 163)
//  779         osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
//  780         return TRUE;
//  781       }
//  782     }
//  783     else 
//  784     {
//  785       osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
//  786      return TRUE;
//  787     }
//  788     // if the incomming Sink entry is different to the current entry
//  789     if ( !osal_memcmp( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
??pt_updateLightweightUnicastSink_2:
        ; Setup parameters for call to function osal_memcmp
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 166)
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     R1,?V8
        MOV     R2,?V9
        MOV     R3,?V10
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 163)
//  790     {
//  791       return FALSE;
//  792     }
//  793   }
//  794   else
//  795   {
//  796     // if the incomming Sink entry is the same to the current entry
//  797     if ( osal_memcmp( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
//  798     {
//  799       // Move the next sink entry to current
//  800       osal_memcpy( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN );
//  801       // Invalidate the sink entry
//  802       osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], freeSinkEntry, LSINK_ADDR_LEN );
//  803       // if the sink entry is empty then remove the proxy table entry
//  804       if ( osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
//  805       {
//  806         osal_memset( currEntry, 0xFF, PROXY_TBL_ENTRY_LEN );
//  807       }
//  808       osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
//  809       return TRUE;
//  810     }
//  811     // if the incomming Sink entry is the same to the current entry
//  812     else if ( osal_memcmp( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
//  813     {
//  814       // Invalidate the sink entry
//  815       osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], freeSinkEntry, LSINK_ADDR_LEN );
//  816       osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
//  817       return TRUE;
//  818     }
//  819   }
//  820   return FALSE;
??pt_updateLightweightUnicastSink_4:
        MOV     R1,#0x0
??pt_updateLightweightUnicastSink_5:
        MOV     A,#-0x74
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R7,#0xf
        LJMP    ?BANKED_LEAVE_XDATA
          CFI CFA_XSP16 add(XSP16, 163)
??pt_updateLightweightUnicastSink_0:
        ; Setup parameters for call to function osal_memcmp
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 166)
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     R1,?V4
        MOV     R2,?V5
        MOV     R3,?V6
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 163)
        MOV     A,R1
        JNZ     $+5
        LJMP    ??pt_updateLightweightUnicastSink_6 & 0xFFFF
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 166)
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     A,#0x31
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 163)
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V12
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 166)
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     A,#0x3b
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 163)
        ; Setup parameters for call to function osal_memcmp
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 166)
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     R1,?V12
        MOV     R2,?V13
        MOV     R3,?V14
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 163)
        MOV     A,R1
        JZ      ??pt_updateLightweightUnicastSink_1
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x40
        MOV     R5,#0x0
        MOV     R1,#-0x1
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
??pt_updateLightweightUnicastSink_1:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 166)
        MOV     R4,#0x40
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 163)
        MOV     R1,#0x1
        LJMP    ??pt_updateLightweightUnicastSink_5 & 0xFFFF
??pt_updateLightweightUnicastSink_6:
        ; Setup parameters for call to function osal_memcmp
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 166)
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     R1,?V8
        MOV     R2,?V9
        MOV     R3,?V10
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 163)
        MOV     A,R1
        JNZ     $+5
        LJMP    ??pt_updateLightweightUnicastSink_4 & 0xFFFF
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V12
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 166)
??pt_updateLightweightUnicastSink_3:
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     A,#0x3b
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 163)
        SJMP    ??pt_updateLightweightUnicastSink_1
//  821 }
          CFI EndBlock cfiBlock32
//  822 
//  823 /*********************************************************************
//  824  * @fn          pt_addSinkGroup
//  825  *
//  826  * @brief       To add new sink group entry
//  827  *
//  828  * @param       pNew - New entry array to be added
//  829  *              pCurr - The current entry array in the proxy table
//  830  *
//  831  * @return      TRUE new entry added, FALSE if not
//  832  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  833 static uint8 pt_addSinkGroup( uint8* pNew, uint8* pCurr )
pt_addSinkGroup:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI Function pt_addSinkGroup
        CODE
//  834 {
        FUNCALL pt_addSinkGroup, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 160, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 160, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_addSinkGroup, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 160, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 160, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_addSinkGroup, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 160, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 160, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_addSinkGroup, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 160, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 160, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_addSinkGroup, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 160, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 160, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_addSinkGroup, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 160, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 160, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_addSinkGroup, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 160, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 160, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pt_addSinkGroup, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 160, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 160, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        MOV     A,#-0x13
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 138
        MOV     A,#0x76
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 157)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  835   bool newSinkGroup;
//  836   uint8 newEntry[PROXY_TBL_ENTRY_LEN] = {0};
        MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_10`
        MOV     A,#0x4a
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x40
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  837   uint8 currEntry[PROXY_TBL_ENTRY_LEN] = {0};
        MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_11`
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x40
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  838   uint8 freeSinkEntry[LSINK_ADDR_LEN] = {0xFF};
        MOV     DPTR,#`?<Constant {255, 0, 0, 0, 0, 0, 0, 0, 0, 0}>`
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0xa
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  839   
//  840   osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 160)
        MOV     R4,#0x40
        MOV     R5,#0x0
        MOV     A,#0x4d
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 157)
//  841   osal_memcpy( &currEntry, pCurr, PROXY_TBL_ENTRY_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,R6
        MOV     ?V1,R7
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 160)
        MOV     R4,#0x40
        MOV     R5,#0x0
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 157)
//  842   
//  843   newSinkGroup = PROXY_TBL_GET_CGROUP( newEntry[PROXY_TBL_ENTRY_OPT + 1] );
//  844   
//  845   if ( newSinkGroup )
        MOV     A,#0x4b
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??pt_addSinkGroup_0 & 0xFFFF
//  846   {
//  847     if ( osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof ( uint16 ) ) )
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x44
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V4,R1
        MOV     ?V5,R2
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 160)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R1,?V0
        MOV     R2,?V1
        MOV     R3,?V2
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 157)
        MOV     A,R1
        JNZ     $+5
        LJMP    ??pt_addSinkGroup_0 & 0xFFFF
//  848     {
//  849       if ( osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint16 ) ) )
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x40
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V8,R1
        MOV     ?V9,R2
        MOV     ?V10,#0x0
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 160)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R1,?V0
        MOV     R2,?V1
        MOV     R3,?V2
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 157)
        MOV     A,R1
        JZ      ??pt_addSinkGroup_1
//  850       {
//  851         osal_memcpy( &currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint16 ) );
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#-0x80
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0,R1
        MOV     ?V1,R2
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 160)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x43
        SJMP    ??pt_addSinkGroup_2
          CFI CFA_XSP16 add(XSP16, 157)
//  852         osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
//  853         return TRUE;
//  854       }
//  855       else
//  856       {
//  857         osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], &newEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof ( uint16 ) );
??pt_addSinkGroup_1:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#-0x7c
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0,R1
        MOV     ?V1,R2
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 160)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x47
??pt_addSinkGroup_2:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 157)
//  858         osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 160)
        MOV     R4,#0x40
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 157)
//  859         return TRUE;
        MOV     R1,#0x1
        SJMP    ??pt_addSinkGroup_3
//  860       }
//  861     }
//  862   }
//  863   return FALSE;
??pt_addSinkGroup_0:
        MOV     R1,#0x0
??pt_addSinkGroup_3:
        MOV     A,#-0x76
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R7,#0xb
        LJMP    ?BANKED_LEAVE_XDATA
//  864 }
          CFI EndBlock cfiBlock33

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??pt_ZclReadGetProxyEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    pt_ZclReadGetProxyEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGpp_ReadWriteAttrCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGpp_ReadWriteAttrCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_pairingSetProxyTblOptions::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_pairingSetProxyTblOptions

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_PairingUpdateProxyTlb::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_PairingUpdateProxyTlb

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_UpdateProxyTlb::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_UpdateProxyTlb

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_CheckAnnouncedDevice::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_CheckAnnouncedDevice

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_PopulateProxyTblEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_PopulateProxyTblEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??pt_updateLightweightUnicastSink::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    pt_updateLightweightUnicastSink

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??pt_addSinkGroup::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    pt_addSinkGroup

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {255, 255, 255, 255, 255, 255, 255,`:
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant {0, 0}>`:
        DATA8
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_3`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_4`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_5`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_6`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_7`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_8`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_9`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {255, 255, 255, 255, 255, 255, 255,_1`:
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_10`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_11`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {255, 0, 0, 0, 0, 0, 0, 0, 0, 0}>`:
        DB 255
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_12`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_13`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_10000:
        DD 65536

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2:
        DD 2

        END
//  865 
//  866 /*********************************************************************
//  867  * @fn          pt_lookForGpd
//  868  *
//  869  * @brief       To see if the GPD id is in this NV entry
//  870  *
//  871  * @param       currProxyEntryId - NV ID of the proxy table
//  872  *              pNew - New tabble entry array to be added
//  873  *
//  874  * @return      TRUE if the GPD has an entry in current NV vector
//  875  */
//  876 static uint8 pt_lookForGpd( uint16 currProxyEntryId, uint8* pNew )
//  877 {
//  878   uint8 rtrn;
//  879 
//  880   uint8 newEntry[PROXY_TBL_ENTRY_LEN] = {0};
//  881   uint8 currEntry[PROXY_TBL_ENTRY_LEN] = {0};
//  882 
//  883   osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
//  884   
//  885   rtrn = osal_nv_read( currProxyEntryId, 0,
//  886                              PROXY_TBL_ENTRY_LEN, currEntry );
//  887   
//  888   if ( rtrn != SUCCESS )
//  889   {
//  890     return FALSE;
//  891   }
//  892 
//  893   if ( PROXY_TBL_COMP_APPLICTION_ID( newEntry[PROXY_TBL_ENTRY_OPT], currEntry[PROXY_TBL_ENTRY_OPT] ) )
//  894   {
//  895     if ( osal_memcmp( &newEntry[PROXY_TBL_ENTRY_GPD_ID], &currEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN ) )
//  896     {
//  897     return TRUE;
//  898     }
//  899   }
//  900   return FALSE;
//  901 }
//  902 
//  903 
//  904 
// 
// 4 701 bytes in segment BANKED_CODE
//    54 bytes in segment BANK_RELAYS
//   936 bytes in segment XDATA_ROM_C
//    11 bytes in segment XDATA_Z
// 
// 4 755 bytes of CODE  memory
//   928 bytes of CONST memory (+ 8 bytes shared)
//    11 bytes of XDATA memory
//
//Errors: none
//Warnings: none
