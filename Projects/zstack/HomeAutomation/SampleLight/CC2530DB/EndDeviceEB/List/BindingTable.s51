///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               26/Oct/2017  14:48:09
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack
//        3.0.0\Components\stack\nwk\BindingTable.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
//        Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        "C:\Texas Instruments\Z-Stack
//        3.0.0\Components\stack\nwk\BindingTable.c" -D BDB_REPORTING -D
//        SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xPOWER_SAVING
//        -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
//        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
//        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D
//        ZCL_GROUPS -D xZCL_LEVEL_CTRL -lC "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
//        -lA "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
//        Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
//        "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List\BindingTable.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME BindingTable

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_C_TWO
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_Z

        FUNCTION `??BindCopyBackupToNewNV::?relay`,0203H
        PUBLIC `??BindInitNV::?relay`
        FUNCTION `??BindInitNV::?relay`,0203H
        PUBLIC `??BindRestoreFromNV::?relay`
        FUNCTION `??BindRestoreFromNV::?relay`,0203H
        PUBLIC `??BindSetDefaultNV::?relay`
        FUNCTION `??BindSetDefaultNV::?relay`,0203H
        FUNCTION `??BindUpgradeTableInNV::?relay`,0203H
        PUBLIC `??BindWriteNV::?relay`
        FUNCTION `??BindWriteNV::?relay`,0203H
        PUBLIC `??GetBindingTableEntry::?relay`
        FUNCTION `??GetBindingTableEntry::?relay`,0203H
        PUBLIC `??InitBindingTable::?relay`
        FUNCTION `??InitBindingTable::?relay`,0203H
        PUBLIC `??bindAddClusterIdToList::?relay`
        FUNCTION `??bindAddClusterIdToList::?relay`,0203H
        PUBLIC `??bindAddEntry::?relay`
        FUNCTION `??bindAddEntry::?relay`,0203H
        PUBLIC `??bindAddrIndexGet::?relay`
        FUNCTION `??bindAddrIndexGet::?relay`,0203H
        PUBLIC `??bindAddrMgrLocalLoad::?relay`
        FUNCTION `??bindAddrMgrLocalLoad::?relay`,0203H
        PUBLIC `??bindAddressClear::?relay`
        FUNCTION `??bindAddressClear::?relay`,0203H
        PUBLIC `??bindCapacity::?relay`
        FUNCTION `??bindCapacity::?relay`,0203H
        PUBLIC `??bindFind::?relay`
        FUNCTION `??bindFind::?relay`,0203H
        PUBLIC `??bindFindEmpty::?relay`
        FUNCTION `??bindFindEmpty::?relay`,0203H
        PUBLIC `??bindFindExisting::?relay`
        FUNCTION `??bindFindExisting::?relay`,0203H
        PUBLIC `??bindIsClusterIDinList::?relay`
        FUNCTION `??bindIsClusterIDinList::?relay`,0203H
        PUBLIC `??bindNumBoundTo::?relay`
        FUNCTION `??bindNumBoundTo::?relay`,0203H
        PUBLIC `??bindNumOfEntries::?relay`
        FUNCTION `??bindNumOfEntries::?relay`,0203H
        PUBLIC `??bindNumReflections::?relay`
        FUNCTION `??bindNumReflections::?relay`,0203H
        PUBLIC `??bindRemoveClusterIdFromList::?relay`
        FUNCTION `??bindRemoveClusterIdFromList::?relay`,0203H
        PUBLIC `??bindRemoveDev::?relay`
        FUNCTION `??bindRemoveDev::?relay`,0203H
        PUBLIC `??bindRemoveEntry::?relay`
        FUNCTION `??bindRemoveEntry::?relay`,0203H
        PUBLIC `??bindRemoveSrcDev::?relay`
        FUNCTION `??bindRemoveSrcDev::?relay`,0203H
        PUBLIC `??bindUpdateAddr::?relay`
        FUNCTION `??bindUpdateAddr::?relay`,0203H
        PUBLIC `??bindingAddrMgsHelperConvert::?relay`
        FUNCTION `??bindingAddrMgsHelperConvert::?relay`,0203H
        PUBLIC `??bindingAddrMgsHelperConvertShort::?relay`
        FUNCTION `??bindingAddrMgsHelperConvertShort::?relay`,0203H
        PUBLIC `??bindingAddrMgsHelperFind::?relay`
        FUNCTION `??bindingAddrMgsHelperFind::?relay`,0203H
        FUNCTION BindCopyBackupToNewNV,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 36, STACK
        PUBLIC BindInitNV
        FUNCTION BindInitNV,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC BindRestoreFromNV
        FUNCTION BindRestoreFromNV,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC BindSetDefaultNV
        FUNCTION BindSetDefaultNV,0a1603H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        FUNCTION BindUpgradeTableInNV,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        PUBLIC BindWriteNV
        FUNCTION BindWriteNV,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC GetBindingTableEntry
        FUNCTION GetBindingTableEntry,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC InitBindingTable
        FUNCTION InitBindingTable,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bindAddClusterIdToList
        FUNCTION bindAddClusterIdToList,0203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bindAddEntry
        FUNCTION bindAddEntry,0a1603H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 36, STACK
        PUBLIC bindAddrIndexGet
        FUNCTION bindAddrIndexGet,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bindAddrMgrLocalLoad
        FUNCTION bindAddrMgrLocalLoad,0a1203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 23, STACK
        PUBLIC bindAddressClear
        FUNCTION bindAddressClear,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bindCapacity
        FUNCTION bindCapacity,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bindFind
        FUNCTION bindFind,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bindFindEmpty
        FUNCTION bindFindEmpty,0203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bindFindExisting
        FUNCTION bindFindExisting,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bindIsClusterIDinList
        FUNCTION bindIsClusterIDinList,0203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bindNumBoundTo
        FUNCTION bindNumBoundTo,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bindNumOfEntries
        FUNCTION bindNumOfEntries,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bindNumReflections
        FUNCTION bindNumReflections,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bindRemoveClusterIdFromList
        FUNCTION bindRemoveClusterIdFromList,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bindRemoveDev
        FUNCTION bindRemoveDev,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bindRemoveEntry
        FUNCTION bindRemoveEntry,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bindRemoveSrcDev
        FUNCTION bindRemoveSrcDev,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bindUpdateAddr
        FUNCTION bindUpdateAddr,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC bindingAddrMgsHelperConvert
        FUNCTION bindingAddrMgsHelperConvert,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC bindingAddrMgsHelperConvertShort
        FUNCTION bindingAddrMgsHelperConvertShort,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bindingAddrMgsHelperFind
        FUNCTION bindingAddrMgsHelperFind,021203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC pBindInitNV
        PUBLIC pBindRestoreFromNV
        PUBLIC pBindSetDefaultNV
        PUBLIC pBindWriteNV
        PUBLIC pbindAddEntry
        PUBLIC pbindNumOfEntries
        PUBLIC pbindRemoveDev
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AddrMgrEntryGet     SYMBOL "AddrMgrEntryGet"
`??AddrMgrEntryGet::?relay` SYMBOL "?relay", AddrMgrEntryGet
AddrMgrEntryLookupExt SYMBOL "AddrMgrEntryLookupExt"
`??AddrMgrEntryLookupExt::?relay` SYMBOL "?relay", AddrMgrEntryLookupExt
AddrMgrEntryLookupNwk SYMBOL "AddrMgrEntryLookupNwk"
`??AddrMgrEntryLookupNwk::?relay` SYMBOL "?relay", AddrMgrEntryLookupNwk
AddrMgrEntryRelease SYMBOL "AddrMgrEntryRelease"
`??AddrMgrEntryRelease::?relay` SYMBOL "?relay", AddrMgrEntryRelease
AddrMgrEntryUpdate  SYMBOL "AddrMgrEntryUpdate"
`??AddrMgrEntryUpdate::?relay` SYMBOL "?relay", AddrMgrEntryUpdate
AddrMgrExtAddrSet   SYMBOL "AddrMgrExtAddrSet"
`??AddrMgrExtAddrSet::?relay` SYMBOL "?relay", AddrMgrExtAddrSet
NLME_GetCoordExtAddr SYMBOL "NLME_GetCoordExtAddr"
`??NLME_GetCoordExtAddr::?relay` SYMBOL "?relay", NLME_GetCoordExtAddr
NLME_GetCoordShortAddr SYMBOL "NLME_GetCoordShortAddr"
`??NLME_GetCoordShortAddr::?relay` SYMBOL "?relay", NLME_GetCoordShortAddr
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
`??NLME_GetExtAddr::?relay` SYMBOL "?relay", NLME_GetExtAddr
bdb_RepMarkHasBindingInEndpointClusterArray SYMBOL "bdb_RepMarkHasBindingInEndpointClusterArray"
`??bdb_RepMarkHasBindingInEndpointClusterArray::` SYMBOL "?relay", bdb_RepMarkHasBindingInEndpointClusterArray
bdb_RepStartOrContinueReporting SYMBOL "bdb_RepStartOrContinueReporting"
`??bdb_RepStartOrContinueReporting::?relay` SYMBOL "?relay", bdb_RepStartOrContinueReporting
bdb_RepUpdateMarkBindings SYMBOL "bdb_RepUpdateMarkBindings"
`??bdb_RepUpdateMarkBindings::?relay` SYMBOL "?relay", bdb_RepUpdateMarkBindings
nwkCreateDuplicateNV SYMBOL "nwkCreateDuplicateNV"
`??nwkCreateDuplicateNV::?relay` SYMBOL "?relay", nwkCreateDuplicateNV
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_nv_delete      SYMBOL "osal_nv_delete"
`??osal_nv_delete::?relay` SYMBOL "?relay", osal_nv_delete
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_item_len    SYMBOL "osal_nv_item_len"
`??osal_nv_item_len::?relay` SYMBOL "?relay", osal_nv_item_len
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
BindInitNV          SYMBOL "BindInitNV"
`??BindInitNV::?relay` SYMBOL "?relay", BindInitNV
BindRestoreFromNV   SYMBOL "BindRestoreFromNV"
`??BindRestoreFromNV::?relay` SYMBOL "?relay", BindRestoreFromNV
BindSetDefaultNV    SYMBOL "BindSetDefaultNV"
`??BindSetDefaultNV::?relay` SYMBOL "?relay", BindSetDefaultNV
BindWriteNV         SYMBOL "BindWriteNV"
`??BindWriteNV::?relay` SYMBOL "?relay", BindWriteNV
GetBindingTableEntry SYMBOL "GetBindingTableEntry"
`??GetBindingTableEntry::?relay` SYMBOL "?relay", GetBindingTableEntry
InitBindingTable    SYMBOL "InitBindingTable"
`??InitBindingTable::?relay` SYMBOL "?relay", InitBindingTable
bindAddClusterIdToList SYMBOL "bindAddClusterIdToList"
`??bindAddClusterIdToList::?relay` SYMBOL "?relay", bindAddClusterIdToList
bindAddEntry        SYMBOL "bindAddEntry"
`??bindAddEntry::?relay` SYMBOL "?relay", bindAddEntry
bindAddrIndexGet    SYMBOL "bindAddrIndexGet"
`??bindAddrIndexGet::?relay` SYMBOL "?relay", bindAddrIndexGet
bindAddrMgrLocalLoad SYMBOL "bindAddrMgrLocalLoad"
`??bindAddrMgrLocalLoad::?relay` SYMBOL "?relay", bindAddrMgrLocalLoad
bindAddressClear    SYMBOL "bindAddressClear"
`??bindAddressClear::?relay` SYMBOL "?relay", bindAddressClear
bindCapacity        SYMBOL "bindCapacity"
`??bindCapacity::?relay` SYMBOL "?relay", bindCapacity
bindFind            SYMBOL "bindFind"
`??bindFind::?relay` SYMBOL "?relay", bindFind
bindFindEmpty       SYMBOL "bindFindEmpty"
`??bindFindEmpty::?relay` SYMBOL "?relay", bindFindEmpty
bindFindExisting    SYMBOL "bindFindExisting"
`??bindFindExisting::?relay` SYMBOL "?relay", bindFindExisting
bindIsClusterIDinList SYMBOL "bindIsClusterIDinList"
`??bindIsClusterIDinList::?relay` SYMBOL "?relay", bindIsClusterIDinList
bindNumBoundTo      SYMBOL "bindNumBoundTo"
`??bindNumBoundTo::?relay` SYMBOL "?relay", bindNumBoundTo
bindNumOfEntries    SYMBOL "bindNumOfEntries"
`??bindNumOfEntries::?relay` SYMBOL "?relay", bindNumOfEntries
bindNumReflections  SYMBOL "bindNumReflections"
`??bindNumReflections::?relay` SYMBOL "?relay", bindNumReflections
bindRemoveClusterIdFromList SYMBOL "bindRemoveClusterIdFromList"
`??bindRemoveClusterIdFromList::?relay` SYMBOL "?relay", bindRemoveClusterIdFromList
bindRemoveDev       SYMBOL "bindRemoveDev"
`??bindRemoveDev::?relay` SYMBOL "?relay", bindRemoveDev
bindRemoveEntry     SYMBOL "bindRemoveEntry"
`??bindRemoveEntry::?relay` SYMBOL "?relay", bindRemoveEntry
bindRemoveSrcDev    SYMBOL "bindRemoveSrcDev"
`??bindRemoveSrcDev::?relay` SYMBOL "?relay", bindRemoveSrcDev
bindUpdateAddr      SYMBOL "bindUpdateAddr"
`??bindUpdateAddr::?relay` SYMBOL "?relay", bindUpdateAddr
bindingAddrMgsHelperConvert SYMBOL "bindingAddrMgsHelperConvert"
`??bindingAddrMgsHelperConvert::?relay` SYMBOL "?relay", bindingAddrMgsHelperConvert
bindingAddrMgsHelperConvertShort SYMBOL "bindingAddrMgsHelperConvertShort"
`??bindingAddrMgsHelperConvertShort::?relay` SYMBOL "?relay", bindingAddrMgsHelperConvertShort
bindingAddrMgsHelperFind SYMBOL "bindingAddrMgsHelperFind"
`??bindingAddrMgsHelperFind::?relay` SYMBOL "?relay", bindingAddrMgsHelperFind

        EXTERN `??AddrMgrEntryGet::?relay`
        FUNCTION `??AddrMgrEntryGet::?relay`,00H
        EXTERN `??AddrMgrEntryLookupExt::?relay`
        FUNCTION `??AddrMgrEntryLookupExt::?relay`,00H
        EXTERN `??AddrMgrEntryLookupNwk::?relay`
        FUNCTION `??AddrMgrEntryLookupNwk::?relay`,00H
        EXTERN `??AddrMgrEntryRelease::?relay`
        FUNCTION `??AddrMgrEntryRelease::?relay`,00H
        EXTERN `??AddrMgrEntryUpdate::?relay`
        FUNCTION `??AddrMgrEntryUpdate::?relay`,00H
        EXTERN `??AddrMgrExtAddrSet::?relay`
        FUNCTION `??AddrMgrExtAddrSet::?relay`,00H
        EXTERN `??NLME_GetCoordExtAddr::?relay`
        FUNCTION `??NLME_GetCoordExtAddr::?relay`,00H
        EXTERN `??NLME_GetCoordShortAddr::?relay`
        FUNCTION `??NLME_GetCoordShortAddr::?relay`,00H
        EXTERN `??NLME_GetExtAddr::?relay`
        FUNCTION `??NLME_GetExtAddr::?relay`,00H
        EXTERN `??bdb_RepMarkHasBindingInEndpointClusterArray::`
        FUNCTION `??bdb_RepMarkHasBindingInEndpointClusterArray::`,00H
        EXTERN `??bdb_RepStartOrContinueReporting::?relay`
        FUNCTION `??bdb_RepStartOrContinueReporting::?relay`,00H
        EXTERN `??bdb_RepUpdateMarkBindings::?relay`
        FUNCTION `??bdb_RepUpdateMarkBindings::?relay`,00H
        EXTERN `??nwkCreateDuplicateNV::?relay`
        FUNCTION `??nwkCreateDuplicateNV::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_nv_delete::?relay`
        FUNCTION `??osal_nv_delete::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_item_len::?relay`
        FUNCTION `??osal_nv_item_len::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN AddrMgrEntryGet
        FUNCTION AddrMgrEntryGet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupExt
        FUNCTION AddrMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupNwk
        FUNCTION AddrMgrEntryLookupNwk,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryRelease
        FUNCTION AddrMgrEntryRelease,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryUpdate
        FUNCTION AddrMgrEntryUpdate,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrSet
        FUNCTION AddrMgrExtAddrSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN BindingTable
        EXTERN NLME_GetCoordExtAddr
        FUNCTION NLME_GetCoordExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN bdb_RepMarkHasBindingInEndpointClusterArray
        FUNCTION bdb_RepMarkHasBindingInEndpointClusterArray,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RepStartOrContinueReporting
        FUNCTION bdb_RepStartOrContinueReporting,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RepUpdateMarkBindings
        FUNCTION bdb_RepUpdateMarkBindings,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gBIND_REC_SIZE
        EXTERN gMAX_BINDING_CLUSTER_IDS
        EXTERN gNWK_MAX_BINDING_ENTRIES
        EXTERN nwkCreateDuplicateNV
        FUNCTION nwkCreateDuplicateNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_delete
        FUNCTION osal_nv_delete,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_len
        FUNCTION osal_nv_item_len,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN pfnBindNotificationCB
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack 3.0.0\Components\stack\nwk\BindingTable.c
//    1 /**************************************************************************************************
//    2   Filename:       BindingTable.c
//    3   Revised:        $Date: 2014-10-08 08:37:03 -0700 (Wed, 08 Oct 2014) $
//    4   Revision:       $Revision: 40512 $
//    5 
//    6   Description:    Device binding table functions.
//    7 
//    8 
//    9   Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 #include "ZComDef.h"
//   44 #include "OSAL.h"
//   45 #include "OSAL_Nv.h"
//   46 #include "nwk_globals.h"
//   47 #include "AddrMgr.h"
//   48 #include "BindingTable.h"
//   49 #include "nwk_util.h"
//   50 #include "bdb.h"
//   51 #include "bdb_interface.h"
//   52 #if BDB_REPORTING  
//   53 #include "bdb_Reporting.h"
//   54 #endif
//   55 
//   56 /*********************************************************************
//   57  * MACROS
//   58  */
//   59 
//   60 /*********************************************************************
//   61  * CONSTANTS
//   62  */
//   63 #define NV_BIND_EMPTY   0xFF
//   64 #define NV_BIND_REC_SIZE (gBIND_REC_SIZE)
//   65 #define NV_BIND_ITEM_SIZE  (gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES)
//   66 
//   67 /*********************************************************************
//   68  * TYPEDEFS
//   69  */
//   70 typedef struct
//   71 {
//   72   uint8        srcEP;
//   73   uint16       dstIndex;
//   74   uint8        dstEP;
//   75   uint8        dstAddrMode;
//   76   uint8        clusterIDs;
//   77   uint16*      clusterIDList;
//   78 } bindFields_t;
//   79 
//   80 /*********************************************************************
//   81  * GLOBAL VARIABLES
//   82  */
//   83 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
//   84 extern bdbGCB_BindNotification_t        pfnBindNotificationCB;
//   85 #endif
//   86 
//   87 /*********************************************************************
//   88  * LOCAL FUNCTIONS
//   89  */
//   90 void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryOld,
//   91                     AddrMgrEntry_t *entryNew );
//   92 BindingEntry_t *bindFindEmpty( void );
//   93 uint16 bindingAddrMgsHelperFind( zAddrType_t *addr );
//   94 uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr );
//   95 void bindAddrMgrLocalLoad( void );
//   96 
//   97 #if !defined ( BINDINGTABLE_NV_SINGLES )
//   98   #if !defined ( DONT_UPGRADE_BIND )
//   99     static uint8 BindCopyBackupToNewNV( uint16 dupLen, uint16 newLen );
//  100     static uint8 BindUpgradeTableInNV( void );
//  101   #endif
//  102 #endif // !BINDINGTABLE_NV_SINGLES
//  103 
//  104 
//  105 /*********************************************************************
//  106  * LOCAL VARIABLES
//  107  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  108 static uint8 bindAddrMgrLocalLoaded = FALSE;
bindAddrMgrLocalLoaded:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  109 
//  110 /*********************************************************************
//  111  * Function Pointers
//  112  */
//  113 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  114 BindingEntry_t *(*pbindAddEntry)( byte srcEpInt,
pbindAddEntry:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  115                                   zAddrType_t *dstAddr, byte dstEpInt,
//  116                                   byte numClusterIds, uint16 *clusterIds ) = (void*)NULL;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  117 uint16 (*pbindNumOfEntries)( void ) = (void*)NULL;
pbindNumOfEntries:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  118 void (*pbindRemoveDev)( zAddrType_t *Addr ) = (void*)NULL;
pbindRemoveDev:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  119 byte (*pBindInitNV)( void ) = (void*)NULL;
pBindInitNV:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  120 void (*pBindSetDefaultNV)( void ) = (void*)NULL;
pBindSetDefaultNV:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  121 uint16 (*pBindRestoreFromNV)( void ) = (void*)NULL;
pBindRestoreFromNV:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  122 void (*pBindWriteNV)( void ) = (void*)NULL;
pBindWriteNV:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  123 
//  124 #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
//  125 /*********************************************************************
//  126  * @fn      BindAddrMgrCB()
//  127  *
//  128  * @brief   Address Manager Callback function
//  129  *
//  130  * @param   update -
//  131  * @param   entry -
//  132  *
//  133  * @return  pointer to
//  134  */
//  135 void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryNew,
//  136                     AddrMgrEntry_t *entryOld )
//  137 {
//  138   // Check for either deleted items or changed Extended (Duplicate) addresses
//  139 }
//  140 #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
//  141 
//  142 /*********************************************************************
//  143  * @fn      InitBindingTable()
//  144  *
//  145  * @brief
//  146  *
//  147  *   This function is used to initialise the binding table
//  148  *
//  149  * @param   none
//  150  *
//  151  * @return  none
//  152  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  153 void InitBindingTable( void )
InitBindingTable:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function InitBindingTable
        CODE
//  154 {
        FUNCALL InitBindingTable, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  155   osal_memset( BindingTable, 0xFF, gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES );
        ; Setup parameters for call to function osal_memset
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V0,A
        MOV     A,R4
        MOV     B,?V0
        MUL     AB
        MOV     R4,A
        MOV     R0,B
        MOV     B,?V0
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     R1,#-0x1
        MOV     R2,#BindingTable & 0xff
        MOV     R3,#(BindingTable >> 8) & 0xff
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  156 
//  157   pbindAddEntry = bindAddEntry;
        MOV     DPTR,#pbindAddEntry
        MOV     A,#`??bindAddEntry::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??bindAddEntry::?relay` >> 8) & 0xff
        MOVX    @DPTR,A
//  158   pbindNumOfEntries = bindNumOfEntries;
        MOV     DPTR,#pbindNumOfEntries
        MOV     A,#`??bindNumOfEntries::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??bindNumOfEntries::?relay` >> 8) & 0xff
        MOVX    @DPTR,A
//  159   pbindRemoveDev = bindRemoveDev;
        MOV     DPTR,#pbindRemoveDev
        MOV     A,#`??bindRemoveDev::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??bindRemoveDev::?relay` >> 8) & 0xff
        MOVX    @DPTR,A
//  160   pBindInitNV = BindInitNV;
        MOV     DPTR,#pBindInitNV
        MOV     A,#`??BindInitNV::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??BindInitNV::?relay` >> 8) & 0xff
        MOVX    @DPTR,A
//  161   pBindSetDefaultNV = BindSetDefaultNV;
        MOV     DPTR,#pBindSetDefaultNV
        MOV     A,#`??BindSetDefaultNV::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??BindSetDefaultNV::?relay` >> 8) & 0xff
        MOVX    @DPTR,A
//  162   pBindRestoreFromNV = BindRestoreFromNV;
        MOV     DPTR,#pBindRestoreFromNV
        MOV     A,#`??BindRestoreFromNV::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??BindRestoreFromNV::?relay` >> 8) & 0xff
        MOVX    @DPTR,A
//  163   pBindWriteNV = BindWriteNV;
        MOV     DPTR,#pBindWriteNV
        MOV     A,#`??BindWriteNV::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??BindWriteNV::?relay` >> 8) & 0xff
        MOVX    @DPTR,A
//  164 
//  165   bindAddrMgrLocalLoaded = FALSE;
        MOV     DPTR,#bindAddrMgrLocalLoaded
        CLR     A
        MOVX    @DPTR,A
//  166 
//  167 #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
//  168   // Register with the address manager
//  169   AddrMgrRegister( ADDRMGR_REG_BINDING, BindAddrMgrCB );
//  170 #endif
//  171 }
        SJMP    ??Subroutine29_0
          CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 23)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock1
        REQUIRE ??Subroutine29_0
        ; // Fall through to label ??Subroutine29_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine29_0:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  172 
//  173 /*********************************************************************
//  174  * @fn      bindFindEmpty()
//  175  *
//  176  * @brief   This function returns a pointer to an empty binding slot
//  177  *
//  178  * @param   none
//  179  *
//  180  * @return  pointer to binding table entry, NULL if not added
//  181  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  182 BindingEntry_t *bindFindEmpty( void )
bindFindEmpty:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function bindFindEmpty
        CODE
//  183 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  184   bindTableIndex_t x;
//  185 
//  186   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     R2,#0x0
        SJMP    ??bindFindEmpty_0
??bindFindEmpty_1:
        INC     R2
??bindFindEmpty_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        JNC     ??bindFindEmpty_2
//  187   {
//  188     // It's empty if the index is "Not Found"
//  189     if ( BindingTable[x].srcEP == NV_BIND_EMPTY )
        MOV     A,R2
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        LCALL   ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_44:
        JNZ     ??bindFindEmpty_1
//  190     {
//  191       return ( &BindingTable[x] );
        MOV     R2,DPL
        MOV     R3,DPH
        SJMP    ??bindFindEmpty_3
//  192     }
//  193   }
//  194 
//  195   return ( (BindingEntry_t *)NULL );
??bindFindEmpty_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??bindFindEmpty_3:
        LJMP    ??Subroutine36_0 & 0xFFFF
//  196 }
          CFI EndBlock cfiBlock3
//  197 
//  198 /*********************************************************************
//  199  * @fn      bindNumOfEntries()
//  200  *
//  201  * @brief   This function returns the number of binding table entries.
//  202  *          The return for this is the number of clusters in the
//  203  *          table NOT the number of entries.
//  204  *
//  205  * @param   none
//  206  *
//  207  * @return  number of entries
//  208  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  209 uint16 bindNumOfEntries( void )
bindNumOfEntries:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function bindNumOfEntries
        CODE
//  210 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  211   bindTableIndex_t x;
//  212   uint16 found;
//  213 
//  214   for ( found = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R4,#0x0
        SJMP    ??bindNumOfEntries_0
//  215   {
//  216     // It's empty if the index is "Not Found"
//  217     if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
??bindNumOfEntries_1:
        MOV     A,R4
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        LCALL   ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_45:
        JZ      ??bindNumOfEntries_2
//  218     {
//  219       found += BindingTable[x].numClusterIds;
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R2
        ADD     A,R0
        MOV     R2,A
        CLR     A
        ADDC    A,R3
        MOV     R3,A
//  220     }
//  221   }
??bindNumOfEntries_2:
        INC     R4
??bindNumOfEntries_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R4
        CLR     C
        SUBB    A,R0
        JC      ??bindNumOfEntries_1
//  222 
//  223   return ( found );
        LJMP    ??Subroutine36_0 & 0xFFFF
//  224 }
          CFI EndBlock cfiBlock4
//  225 
//  226 /*********************************************************************
//  227  * @fn      bindCapacity()
//  228  *
//  229  * @brief   This function returns the number of binding entries
//  230  *          possible and used.
//  231  *
//  232  * @param   maxEntries - pointer to a place to put the max entries
//  233  * @param   usedEntries - pointer to a place to put the number
//  234  *               of used entries
//  235  *
//  236  * @return  none
//  237  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  238 void bindCapacity( uint16 *maxEntries, uint16 *usedEntries  )
bindCapacity:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function bindCapacity
        CODE
//  239 {
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  240   bindTableIndex_t x;
//  241   bindTableIndex_t used;
//  242 
//  243   for ( used = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     R6,#0x0
        MOV     R7,#0x0
        SJMP    ??bindCapacity_0
//  244   {
//  245     // It's empty if the index is "Not Found"
//  246     if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
??bindCapacity_1:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_46:
        JZ      ??bindCapacity_2
//  247     {
//  248       used++;
        INC     R6
//  249     }
//  250   }
??bindCapacity_2:
        INC     R7
??bindCapacity_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R7
        CLR     C
        SUBB    A,R0
        JC      ??bindCapacity_1
//  251 
//  252   *maxEntries = gNWK_MAX_BINDING_ENTRIES;
        CLR     A
        MOVC    A,@A+DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  253   *usedEntries = used;
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  254 }
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function bindCapacity
          CFI Conditional ??CrossCallReturnLabel_46
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function GetBindingTableEntry
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        MOV     A,R7
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     ?V0,B
        MOV     R1,?V0
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8
        REQUIRE ??Subroutine30_0
        ; // Fall through to label ??Subroutine30_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine30_0:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function bindFindEmpty
          CFI Conditional ??CrossCallReturnLabel_44
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function bindNumOfEntries
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond10) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond10) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond10) CFA_SP SP+-7
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function bindCapacity
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function GetBindingTableEntry
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker13 Using cfiCommon1
          CFI (cfiPicker13) NoFunction
          CFI (cfiPicker13) Picker
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_49:
        CPL     A
        RET
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiPicker13
//  255 
//  256 /*********************************************************************
//  257  * @fn      bindAddEntry()
//  258  *
//  259  * @brief   This function is used to Add an entry to the binding table
//  260  *
//  261  * @param       srcEpInt - source endpoint
//  262  * @param       dstAddr - destination Address
//  263  * @param       dstEpInt - destination endpoint
//  264  * @param       numClusterIds - number of cluster Ids in the list
//  265  * @param       clusterIds - pointer to the Object ID list
//  266  *
//  267  * @return  pointer to binding table entry, NULL if not added
//  268  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  269 BindingEntry_t *bindAddEntry( byte srcEpInt,
bindAddEntry:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function bindAddEntry
        CODE
//  270                               zAddrType_t *dstAddr, byte dstEpInt,
//  271                               byte numClusterIds, uint16 *clusterIds )
//  272 {
        FUNCALL bindAddEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindAddrMgrLocalLoad
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindAddrIndexGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bdb_RepMarkHasBindingInEndpointClusterArray
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindIsClusterIDinList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindAddClusterIdToList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindFindEmpty
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bdb_RepMarkHasBindingInEndpointClusterArray
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bdb_RepStartOrContinueReporting
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        MOV     A,#-0x15
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 21)
        ; Saved register size: 21
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V11,R1
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V12,R4
        MOV     ?V2,R5
//  273   uint8            index;
//  274   bindTableIndex_t bindIdx;
//  275   BindingEntry_t*  entry;
//  276   bindFields_t     fields;
//  277   bdbBindNotificationData_t bindData;
//  278 #ifdef BDB_REPORTING  
//  279   uint8 bindAdded = FALSE;
        MOV     ?V1,#0x0
//  280 #endif
//  281 
//  282   osal_memcpy( &bindData.dstAddr, dstAddr, sizeof( zAddrType_t) );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     ?V10,#0x0
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x9
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
//  283   bindData.ep = dstEpInt;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V12
        MOVX    @DPTR,A
//  284     
//  285   // initialize results
//  286   entry = NULL;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  287 
//  288   // make sure local addresses have been loaded
//  289   bindAddrMgrLocalLoad();
        ; Setup parameters for call to function bindAddrMgrLocalLoad
        LCALL   `??bindAddrMgrLocalLoad::?relay`; Banked call to: bindAddrMgrLocalLoad
//  290 
//  291   // setup fields
//  292   fields.dstIndex = bindAddrIndexGet( dstAddr );
        ; Setup parameters for call to function bindAddrIndexGet
        MOV     R2,?V4
        MOV     R3,?V5
        LCALL   `??bindAddrIndexGet::?relay`; Banked call to: bindAddrIndexGet
        MOV     ?V6,R2
        MOV     ?V7,R3
//  293   fields.srcEP    = srcEpInt;
//  294 
//  295   if ( dstAddr->addrMode == AddrGroup )
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindAddEntry_0
//  296   {
//  297     fields.dstAddrMode = DSTGROUPMODE_GROUP;
        MOV     ?V0,#0x1
//  298     fields.dstEP       = 0;
        MOV     ?V3,#0x0
        SJMP    ??bindAddEntry_1
//  299   }
//  300   else
//  301   {
//  302     fields.dstAddrMode = DSTGROUPMODE_ADDR;
??bindAddEntry_0:
        MOV     ?V0,#0x0
//  303     fields.dstEP       = dstEpInt;
        MOV     ?V3,?V12
//  304   }
//  305 
//  306   if ( fields.dstIndex != INVALID_NODE_ADDR  )
??bindAddEntry_1:
        MOV     A,#-0x2
        XRL     A,?V6
        JNZ     ??bindAddEntry_2
        MOV     A,#-0x1
        XRL     A,?V7
??bindAddEntry_2:
        JNZ     $+5
        LJMP    ??bindAddEntry_3 & 0xFFFF
//  307   {
//  308     for ( bindIdx = 0; bindIdx < gNWK_MAX_BINDING_ENTRIES; bindIdx++ )
        MOV     R2,#0x0
        MOV     A,#0x21
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V9,A
        SJMP    ??bindAddEntry_4
??bindAddEntry_5:
        INC     R2
??bindAddEntry_4:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??bindAddEntry_6 & 0xFFFF
//  309     {
//  310       if ( ( fields.srcEP       == BindingTable[bindIdx].srcEP        ) &&
//  311            ( fields.dstAddrMode == BindingTable[bindIdx].dstGroupMode ) &&
//  312            ( fields.dstIndex    == BindingTable[bindIdx].dstIdx       ) &&
//  313            ( fields.dstEP       == BindingTable[bindIdx].dstEP        )    )
        MOV     A,R2
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_9:
        XRL     A,?V11
        JNZ     ??bindAddEntry_5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0
        JNZ     ??bindAddEntry_5
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V6
        JNZ     ??bindAddEntry_7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V7
??bindAddEntry_7:
        JNZ     ??bindAddEntry_5
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V3
        JNZ     ??bindAddEntry_5
//  314       {
//  315         entry = &BindingTable[bindIdx];
//  316 
//  317         // break from loop
//  318         break;
//  319       }
//  320     }
//  321 
//  322     if ( entry != NULL )
//  323     {
//  324       // Loop through the cluster IDs
//  325       for ( index = 0; index < numClusterIds; index++ )
        MOV     ?V0,#0x0
        SJMP    ??bindAddEntry_8
//  326       {
//  327         // Found - is the cluster already defined?
//  328         if ( bindIsClusterIDinList( entry, clusterIds[index] ) == FALSE )
//  329         {
//  330           // Nope, add this cluster
//  331           if ( bindAddClusterIdToList( entry, clusterIds[index] ) == FALSE )
//  332           {
//  333             // Indicate error if cluster list was full
//  334             entry = NULL;
//  335           }
//  336           else
//  337           {
//  338             // new bind added - notify application
//  339             bindData.clusterId = clusterIds[index];
??bindAddEntry_9:
        MOV     DPL,?V4
        MOV     DPH,?V5
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_28:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
//  340 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)             
//  341             if ( pfnBindNotificationCB != NULL )
??CrossCallReturnLabel_22:
        JZ      ??bindAddEntry_10
//  342             {
//  343               pfnBindNotificationCB( &bindData );
        ; Setup parameters for indirect call
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
//  344             }
//  345 #endif
//  346 #ifdef BDB_REPORTING  
//  347             bdb_RepMarkHasBindingInEndpointClusterArray(srcEpInt, clusterIds[index], BDBREPORTING_FALSE, BDBREPORTING_TRUE); 
??bindAddEntry_10:
        ; Setup parameters for call to function bdb_RepMarkHasBindingInEndpointClusterArray
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV     R1,?V11
        LCALL   `??bdb_RepMarkHasBindingInEndpointClusterArray::`; Banked call to: bdb_RepMarkHasBindingInEndpointClusterArray
//  348             bindAdded = TRUE;
        MOV     ?V1,#0x1
//  349 #endif
//  350           }
??bindAddEntry_11:
        INC     ?V0
??bindAddEntry_8:
        MOV     A,?V0
        CLR     C
        SUBB    A,?V2
        JC      $+5
        LJMP    ??bindAddEntry_12 & 0xFFFF
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
        MOV     A,R1
        JNZ     ??bindAddEntry_11
        ; Setup parameters for call to function bindAddClusterIdToList
        MOV     DPL,?V4
        MOV     DPH,?V5
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??bindAddClusterIdToList::?relay`; Banked call to: bindAddClusterIdToList
        MOV     A,R1
        JNZ     ??bindAddEntry_9
        MOV     R6,#0x0
        MOV     R7,#0x0
        SJMP    ??bindAddEntry_11
//  351         }
//  352       }
//  353     }
//  354     else
//  355     {
//  356       // Find an empty slot
//  357       entry = bindFindEmpty();
??bindAddEntry_6:
        ; Setup parameters for call to function bindFindEmpty
        LCALL   `??bindFindEmpty::?relay`; Banked call to: bindFindEmpty
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R6,?V4
        MOV     R7,?V5
//  358 
//  359       // Check against the maximum number allowed
//  360       if ( entry != NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??bindAddEntry_3 & 0xFFFF
//  361       {
//  362         // Add new entry
//  363         entry->srcEP         = fields.srcEP;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,?V11
        MOVX    @DPTR,A
//  364         entry->dstGroupMode  = fields.dstAddrMode;
        INC     DPTR
        MOV     A,?V0
        MOVX    @DPTR,A
//  365         entry->dstIdx        = fields.dstIndex;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOV     A,?V6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V7
        MOVX    @DPTR,A
//  366         entry->dstEP         = fields.dstEP;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V3
        MOVX    @DPTR,A
//  367 
//  368         if ( numClusterIds > gMAX_BINDING_CLUSTER_IDS )
        MOV     DPTR,#gMAX_BINDING_CLUSTER_IDS
        CLR     A
        MOVC    A,@A+DPTR
        CLR     C
        SUBB    A,?V2
        JNC     ??bindAddEntry_13
//  369         {
//  370           numClusterIds = gMAX_BINDING_CLUSTER_IDS;
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V2,A
//  371         }
//  372         
//  373         for(index = 0; index < numClusterIds; index++)
??bindAddEntry_13:
        MOV     ?V0,#0x0
        SJMP    ??bindAddEntry_14
//  374         {
//  375           // new bind added - notify application
//  376           bindData.clusterId = clusterIds[index];
??bindAddEntry_15:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
//  377 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
//  378           if ( pfnBindNotificationCB != NULL )
??CrossCallReturnLabel_23:
        JZ      ??bindAddEntry_16
//  379           {
//  380             pfnBindNotificationCB( &bindData );
        ; Setup parameters for indirect call
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
//  381           }
//  382 #endif
//  383 #ifdef BDB_REPORTING   
//  384             bdb_RepMarkHasBindingInEndpointClusterArray(srcEpInt, clusterIds[index], BDBREPORTING_FALSE, BDBREPORTING_TRUE); 
??bindAddEntry_16:
        ; Setup parameters for call to function bdb_RepMarkHasBindingInEndpointClusterArray
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_63:
        MOV     R1,?V11
        LCALL   `??bdb_RepMarkHasBindingInEndpointClusterArray::`; Banked call to: bdb_RepMarkHasBindingInEndpointClusterArray
//  385             bindAdded = TRUE;
        MOV     ?V1,#0x1
//  386 #endif
//  387         }
        INC     ?V0
??bindAddEntry_14:
        MOV     A,?V0
        CLR     C
        SUBB    A,?V2
        JC      ??bindAddEntry_15
//  388 
//  389         entry->numClusterIds = numClusterIds;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V2
        MOVX    @DPTR,A
//  390 
//  391         osal_memcpy( entry->clusterIdList,
//  392                      clusterIds,
//  393                      numClusterIds * sizeof(uint16) );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,?V8
        MOV     ?V5,?V9
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,?V2
        MOV     A,R4
        ADD     A,R4
        MOV     R4,A
        CLR     A
        RLC     A
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x6
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
//  394       }
//  395     }
//  396   }
//  397 #ifdef BDB_REPORTING
//  398   if(bindAdded == TRUE)
??bindAddEntry_12:
        MOV     A,?V1
        MOV     C,0xE0 /* A   */.0
        JNC     ??bindAddEntry_3
//  399   {
//  400     bdb_RepStartOrContinueReporting( );
        ; Setup parameters for call to function bdb_RepStartOrContinueReporting
        LCALL   `??bdb_RepStartOrContinueReporting::?relay`; Banked call to: bdb_RepStartOrContinueReporting
//  401   }
//  402 #endif
//  403   return entry;
??bindAddEntry_3:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     R7,#0xd
        LJMP    ?BANKED_LEAVE_XDATA
//  404 }
          CFI EndBlock cfiBlock14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond15 Using cfiCommon0
          CFI Function bindAddEntry
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function bindAddEntry
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker17 Using cfiCommon1
          CFI (cfiPicker17) NoFunction
          CFI (cfiPicker17) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     DPTR,#pfnBindNotificationCB
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiPicker17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond18 Using cfiCommon0
          CFI Function bindAddEntry
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function bindAddEntry
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker20 Using cfiCommon1
          CFI (cfiPicker20) NoFunction
          CFI (cfiPicker20) Picker
        MOV     R0,?V0
        MOV     A,R0
        ADD     A,R0
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,?V8
        ADD     A,R0
        MOV     ?V4,A
        MOV     A,?V9
        ADDC    A,R1
        MOV     ?V5,A
        ; Setup parameters for call to function bindIsClusterIDinList
        MOV     DPL,?V4
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiPicker20
//  405 
//  406 /*********************************************************************
//  407  * @fn      bindRemoveEntry
//  408  *
//  409  * @brief   Removes a binding table entry.
//  410  *
//  411  * @param   pBind - pointer to binding table entry to delete
//  412  *
//  413  * @return  TRUE if Removed, FALSE if not
//  414  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  415 byte bindRemoveEntry( BindingEntry_t *pBind )
bindRemoveEntry:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function bindRemoveEntry
        CODE
//  416 {
        FUNCALL bindRemoveEntry, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindRemoveEntry, bdb_RepUpdateMarkBindings
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  417   osal_memset( pBind, 0xFF, gBIND_REC_SIZE );
        ; Setup parameters for call to function osal_memset
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     R1,#-0x1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  418 #ifdef BDB_REPORTING
//  419   bdb_RepUpdateMarkBindings();
        ; Setup parameters for call to function bdb_RepUpdateMarkBindings
        LCALL   `??bdb_RepUpdateMarkBindings::?relay`; Banked call to: bdb_RepUpdateMarkBindings
//  420 #endif
//  421   return ( TRUE );
        MOV     R1,#0x1
        LJMP    ??Subroutine36_0 & 0xFFFF
//  422 }
          CFI EndBlock cfiBlock21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond22 Using cfiCommon0
          CFI Function InitBindingTable
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function bindRemoveEntry
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond23) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond23) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond23) CFA_SP SP+-7
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function BindWriteNV
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-2
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiPicker25 Using cfiCommon1
          CFI (cfiPicker25) NoFunction
          CFI (cfiPicker25) Picker
        MOV     DPTR,#gBIND_REC_SIZE
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R4,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R5,A
        RET
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiPicker25
//  423 
//  424 /*********************************************************************
//  425  * @fn      bindIsClusterIDinList()
//  426  *
//  427  * @brief   Is the clusterID in the clusterID list?
//  428  *
//  429  * @param   enter - binding table entry
//  430  * @param   clusterId  - Cluster ID to look for
//  431  *
//  432  * @return  TRUE if found, FALSE if not found
//  433  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  434 byte bindIsClusterIDinList( BindingEntry_t *entry, uint16 clusterId )
bindIsClusterIDinList:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function bindIsClusterIDinList
        CODE
//  435 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  436   uint8 x;
//  437 
//  438   if ( entry != NULL )
        MOV     A,R2
        ORL     A,R3
        JZ      ??bindIsClusterIDinList_0
//  439   {
//  440     for ( x = 0; x < entry->numClusterIds; x++ )
        MOV     R6,#0x0
        SJMP    ??bindIsClusterIDinList_1
??bindIsClusterIDinList_2:
        INC     R6
??bindIsClusterIDinList_1:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        JNC     ??bindIsClusterIDinList_0
//  441     {
//  442       if ( entry->clusterIdList[x] == clusterId )
        MOV     A,R6
        ADD     A,0xE0 /* A   */
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_40:
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??bindIsClusterIDinList_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??bindIsClusterIDinList_3:
        JNZ     ??bindIsClusterIDinList_2
//  443       {
//  444         return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??bindIsClusterIDinList_4
//  445       }
//  446     }
//  447   }
//  448 
//  449   return ( FALSE );
??bindIsClusterIDinList_0:
        MOV     R1,#0x0
??bindIsClusterIDinList_4:
        LJMP    ?Subroutine2 & 0xFFFF
//  450 }
          CFI EndBlock cfiBlock26
//  451 
//  452 /*********************************************************************
//  453  * @fn      bindRemoveClusterIdFromList()
//  454  *
//  455  * @brief   Removes a ClusterID from a list of ClusterIDs.
//  456  *
//  457  * @param   enter - binding table entry
//  458  * @param   clusterId  - Cluster ID to look for
//  459  *
//  460  * @return  TRUE if there are at least 1 clusterID left, FALSE if none
//  461  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  462 byte bindRemoveClusterIdFromList( BindingEntry_t *entry, uint16 clusterId )
bindRemoveClusterIdFromList:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function bindRemoveClusterIdFromList
        CODE
//  463 {
        FUNCALL bindRemoveClusterIdFromList, bdb_RepUpdateMarkBindings
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0,R4
        MOV     ?V1,R5
//  464   byte x;
//  465   uint16 *listPtr;
//  466   byte numIds;
//  467 
//  468 #ifdef BDB_REPORTING
//  469   uint8 numRemoved = 0;
        MOV     ?V2,#0x0
//  470 #endif
//  471   if ( entry )
        MOV     A,R2
        ORL     A,R3
        JZ      ??bindRemoveClusterIdFromList_0
//  472   {
//  473     if ( entry->numClusterIds > 0 )
        MOV     A,R2
        ADD     A,#0x5
        MOV     R6,A
        CLR     A
        ADDC    A,R3
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        JZ      ??bindRemoveClusterIdFromList_0
//  474     {
//  475       listPtr = entry->clusterIdList;
        MOV     A,R2
        ADD     A,#0x6
        MOV     R4,A
        CLR     A
        ADDC    A,R3
        MOV     R5,A
//  476       numIds = entry->numClusterIds;
        MOV     ?V4,R0
//  477 
//  478       // Copy the new list over
//  479       for ( x = 0; x < numIds; x++ )
        MOV     ?V3,#0x0
        SJMP    ??bindRemoveClusterIdFromList_1
//  480       {
//  481         if ( entry->clusterIdList[x] != clusterId )
//  482         {
//  483           *listPtr++ = entry->clusterIdList[x];
??bindRemoveClusterIdFromList_2:
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,R4
        ADD     A,#0x2
        CLR     A
        ADDC    A,R5
        INC     R4
        INC     R4
        MOV     R5,A
//  484         }
??bindRemoveClusterIdFromList_3:
        INC     ?V3
??bindRemoveClusterIdFromList_1:
        MOV     A,?V3
        CLR     C
        SUBB    A,?V4
        JNC     ??bindRemoveClusterIdFromList_4
        MOV     R0,?V3
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_29:
        MOV     A,?V0
        XRL     A,R0
        JNZ     ??bindRemoveClusterIdFromList_5
        MOV     A,?V1
        XRL     A,R1
??bindRemoveClusterIdFromList_5:
        JNZ     ??bindRemoveClusterIdFromList_2
//  485         else
//  486         {
//  487           entry->numClusterIds--;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
//  488           
//  489 #ifdef BDB_REPORTING
//  490            numRemoved++;
        INC     ?V2
//  491 #endif          
//  492           if ( entry->numClusterIds == 0 )
        JNZ     ??bindRemoveClusterIdFromList_3
//  493           {
//  494             break;
//  495           }
//  496         }
//  497       }
//  498       
//  499     }
//  500   }
//  501 
//  502 #ifdef BDB_REPORTING
//  503   if(numRemoved>0)
??bindRemoveClusterIdFromList_4:
        MOV     A,?V2
        JZ      ??bindRemoveClusterIdFromList_6
//  504     bdb_RepUpdateMarkBindings();
        ; Setup parameters for call to function bdb_RepUpdateMarkBindings
        LCALL   `??bdb_RepUpdateMarkBindings::?relay`; Banked call to: bdb_RepUpdateMarkBindings
??bindRemoveClusterIdFromList_6:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JZ      ??bindRemoveClusterIdFromList_0
//  505 #endif 
//  506   
//  507   if ( entry && (entry->numClusterIds > 0) )
//  508   {
//  509     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??bindRemoveClusterIdFromList_7
//  510   }
//  511   else
//  512   {
//  513     return ( FALSE );
??bindRemoveClusterIdFromList_0:
        MOV     R1,#0x0
//  514   }
??bindRemoveClusterIdFromList_7:
        SJMP    ??Subroutine32_0
//  515 }
          CFI EndBlock cfiBlock27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
          CFI EndBlock cfiBlock28
        REQUIRE ??Subroutine31_0
        ; // Fall through to label ??Subroutine31_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine31_0:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 32)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock29
        REQUIRE ??Subroutine32_0
        ; // Fall through to label ??Subroutine32_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine32_0:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock30
//  516 
//  517 /*********************************************************************
//  518  * @fn      bindAddClusterIdToList()
//  519  *
//  520  * @brief   Adds a ClusterID to a list of ClusterIDs.
//  521  *
//  522  * @param   enter - binding table entry
//  523  * @param   clusterId  - Cluster ID to Add
//  524  *
//  525  * @return  TRUE if Added, FALSE if not
//  526  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  527 byte bindAddClusterIdToList( BindingEntry_t *entry, uint16 clusterId )
bindAddClusterIdToList:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function bindAddClusterIdToList
        CODE
//  528 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  529   if ( entry && entry->numClusterIds < gMAX_BINDING_CLUSTER_IDS )
        MOV     A,R2
        ORL     A,R3
        JZ      ??bindAddClusterIdToList_0
        MOV     A,R2
        ADD     A,#0x5
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV     R0,A
        MOV     DPTR,#gMAX_BINDING_CLUSTER_IDS
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JNC     ??bindAddClusterIdToList_0
//  530   {
//  531     // Add the new one
//  532     entry->clusterIdList[entry->numClusterIds] = clusterId;
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  533     entry->numClusterIds++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  534     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??bindAddClusterIdToList_1
//  535   }
//  536   return ( FALSE );
??bindAddClusterIdToList_0:
        MOV     R1,#0x0
??bindAddClusterIdToList_1:
          CFI EndBlock cfiBlock31
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  537 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock32

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond33 Using cfiCommon0
          CFI Function bindRemoveClusterIdFromList
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function bindAddClusterIdToList
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker35 Using cfiCommon1
          CFI (cfiPicker35) NoFunction
          CFI (cfiPicker35) Picker
        MOV     A,R0
        ADD     A,R0
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_41:
        RET
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiPicker35

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond36 Using cfiCommon0
          CFI Function bindIsClusterIDinList
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function bindRemoveClusterIdFromList
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_6
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-4
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function bindAddClusterIdToList
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_7
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-4
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker39 Using cfiCommon1
          CFI (cfiPicker39) NoFunction
          CFI (cfiPicker39) Picker
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R1
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiPicker39
//  538 
//  539 /*********************************************************************
//  540  * @fn      bindFindExisting
//  541  *
//  542  * @brief   Finds an existing src/epint to dst/epint bind record
//  543  *
//  544  * @param   srcEpInt - Source Endpoint/Interface
//  545  * @param   dstAddr - Destination address
//  546  * @param   dstEpInt - Destination Endpoint/Interface
//  547  *
//  548  * @return  pointer to existing entry or NULL
//  549  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  550 BindingEntry_t *bindFindExisting( byte srcEpInt,
bindFindExisting:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function bindFindExisting
        CODE
//  551                                   zAddrType_t *dstAddr, byte dstEpInt )
//  552 {
        FUNCALL bindFindExisting, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     ?V0,R1
        MOV     ?V1,R4
//  553   uint16 dstIdx;
//  554   bindTableIndex_t x;
//  555 
//  556   // Find the records in the assoc list
//  557   if ( dstAddr->addrMode == AddrGroup )
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_36:
        JNZ     ??bindFindExisting_0
//  558   {
//  559     dstIdx = dstAddr->addr.shortAddr;
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        SJMP    ??bindFindExisting_1
//  560   }
//  561   else
//  562   {
//  563     dstIdx = bindingAddrMgsHelperFind( dstAddr );
??bindFindExisting_0:
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R4,?V2
        MOV     R5,?V3
//  564   }
//  565 
//  566   if ( dstIdx == INVALID_NODE_ADDR )
??bindFindExisting_1:
        MOV     A,#-0x2
        XRL     A,R4
        JNZ     ??bindFindExisting_2
        MOV     A,#-0x1
        XRL     A,R5
??bindFindExisting_2:
        JZ      ??bindFindExisting_3
//  567   {
//  568     return ( (BindingEntry_t *)NULL );
//  569   }
//  570 
//  571   // Start at the beginning
//  572   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     ?V2,#0x0
        SJMP    ??bindFindExisting_4
//  573   {
//  574     if ( (BindingTable[x].srcEP == srcEpInt) )
??bindFindExisting_5:
        MOV     A,#0x1
        XRL     A,?V3
        JNZ     ??bindFindExisting_6
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??bindFindExisting_7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??bindFindExisting_7:
        JZ      ??bindFindExisting_8
??bindFindExisting_6:
        INC     ?V2
??bindFindExisting_4:
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_15:
        JNC     ??bindFindExisting_3
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_10:
        MOVX    A,@DPTR
        XRL     A,?V0
        JNZ     ??bindFindExisting_6
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     A,R2
        ADD     A,#0x2
        MOV     R0,A
        CLR     A
        ADDC    A,R3
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??bindFindExisting_5
        MOV     A,?V3
        JNZ     ??bindFindExisting_6
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??bindFindExisting_9
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??bindFindExisting_9:
        JNZ     ??bindFindExisting_6
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V1
        JNZ     ??bindFindExisting_6
//  575     {
//  576       if ( ((dstAddr->addrMode == AddrGroup)
//  577               && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
//  578               && (dstIdx == BindingTable[x].dstIdx))
//  579          || ((dstAddr->addrMode != AddrGroup)
//  580              && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
//  581              && (dstIdx == BindingTable[x].dstIdx) && (BindingTable[x].dstEP == dstEpInt)) )
//  582       {
//  583         return ( &BindingTable[x] );
        SJMP    ??bindFindExisting_8
//  584       }
//  585     }
//  586   }
//  587 
//  588   return ( (BindingEntry_t *)NULL );
??bindFindExisting_3:
        MOV     R2,#0x0
        MOV     R3,#0x0
??bindFindExisting_8:
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
//  589 }
          CFI EndBlock cfiBlock40
//  590 
//  591 /*********************************************************************
//  592  * @fn       bindRemoveDev()
//  593  *
//  594  * @brief
//  595  *
//  596  *   Remove all bind(s) entries associated to a device address (destination).
//  597  *   Updates binding table.
//  598  *
//  599  * @param   Addr - address of device to be removed from Binding Table
//  600  *
//  601  * @return  none
//  602  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  603 void bindRemoveDev( zAddrType_t *Addr )
bindRemoveDev:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function bindRemoveDev
        CODE
//  604 {
        FUNCALL bindRemoveDev, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindRemoveDev, bindRemoveEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindRemoveDev, bindAddressClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  605   uint16 idx;
//  606   bindTableIndex_t x;
//  607 
//  608   if ( Addr->addrMode == AddrGroup )
        MOV     A,R2
        ADD     A,#0x8
        MOV     ?V0,A
        CLR     A
        ADDC    A,R3
        MOV     ?V1,A
        MOV     DPL,?V0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindRemoveDev_0
//  609   {
//  610     idx = Addr->addr.shortAddr;
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        SJMP    ??bindRemoveDev_1
//  611   }
//  612   else
//  613   {
//  614     idx = bindingAddrMgsHelperFind( Addr );
??bindRemoveDev_0:
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
//  615   }
//  616 
//  617   if ( idx == INVALID_NODE_ADDR )
??bindRemoveDev_1:
        MOV     A,#-0x2
        XRL     A,R6
        JNZ     ??bindRemoveDev_2
        MOV     A,#-0x1
        XRL     A,R7
??bindRemoveDev_2:
        JZ      ??bindRemoveDev_3
//  618   {
//  619     return;
//  620   }
//  621 
//  622   // Removes all the entries that match the destination Address/Index
//  623   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     ?V2,#0x0
        SJMP    ??bindRemoveDev_4
//  624   {
//  625     if ( ( (Addr->addrMode == AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
//  626                                          && (BindingTable[x].dstIdx == idx) ) ||
//  627          ( (Addr->addrMode != AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
//  628                                          && (BindingTable[x].dstIdx == idx) ) )
??bindRemoveDev_5:
        MOV     A,R4
        JNZ     ??bindRemoveDev_6
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??bindRemoveDev_7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??bindRemoveDev_7:
        JNZ     ??bindRemoveDev_6
//  629     {
//  630       bindRemoveEntry( &BindingTable[x] );
??bindRemoveDev_8:
        ; Setup parameters for call to function bindRemoveEntry
        LCALL   `??bindRemoveEntry::?relay`; Banked call to: bindRemoveEntry
//  631     }
??bindRemoveDev_6:
        INC     ?V2
??bindRemoveDev_4:
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_16:
        JNC     ??bindRemoveDev_9
        LCALL   ?Subroutine11 & 0xFFFF
//  632   }
??CrossCallReturnLabel_11:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R2
        ADD     A,#0x2
        MOV     R0,A
        CLR     A
        ADDC    A,R3
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindRemoveDev_5
        MOV     A,#0x1
        XRL     A,R4
        JNZ     ??bindRemoveDev_6
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??bindRemoveDev_10
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??bindRemoveDev_10:
        JZ      ??bindRemoveDev_8
        SJMP    ??bindRemoveDev_6
//  633 
//  634   // If this is the last Bind Entry for that idx then clear BINDING
//  635   // user from Address Manager
//  636   bindAddressClear( idx );
??bindRemoveDev_9:
        ; Setup parameters for call to function bindAddressClear
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??bindAddressClear::?relay`; Banked call to: bindAddressClear
//  637 }
??bindRemoveDev_3:
          CFI EndBlock cfiBlock41
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock42 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond43 Using cfiCommon0
          CFI Function bindFindExisting
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function bindRemoveDev
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-2
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function bindNumReflections
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker46 Using cfiCommon1
          CFI (cfiPicker46) NoFunction
          CFI (cfiPicker46) Picker
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,?V2
        CLR     C
        SUBB    A,R0
        RET
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiPicker46

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond47 Using cfiCommon0
          CFI Function bindFindExisting
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function bindRemoveDev
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-2
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker49 Using cfiCommon1
          CFI (cfiPicker49) NoFunction
          CFI (cfiPicker49) Picker
        MOV     A,?V2
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        RET
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiPicker49
//  638 
//  639 /*********************************************************************
//  640  * @fn       bindRemoveSrcDev()
//  641  *
//  642  * @brief
//  643  *
//  644  *   Remove binds(s) associated to device address (source).
//  645  *   Updates binding table.
//  646  *
//  647  * @param   ep - endpoint to remove, 0xFF is all endpoints
//  648  *
//  649  * @return  none
//  650  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  651 void bindRemoveSrcDev( uint8 ep )
bindRemoveSrcDev:
          CFI Block cfiBlock50 Using cfiCommon0
          CFI Function bindRemoveSrcDev
        CODE
//  652 {
        FUNCALL bindRemoveSrcDev, bindRemoveEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindRemoveSrcDev, bindAddressClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     ?V1,R1
//  653   bindTableIndex_t x;
//  654 
//  655   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     ?V0,#0x0
        SJMP    ??bindRemoveSrcDev_0
//  656   {
//  657     if ( (ep == 0xFF) || (ep == BindingTable[x].srcEP) )
??bindRemoveSrcDev_1:
        MOV     A,?V0
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        MOV     A,#-0x1
        XRL     A,?V1
        JZ      ??bindRemoveSrcDev_2
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,?V1
        JNZ     ??bindRemoveSrcDev_3
//  658     {
//  659       uint16 idx = BindingTable[x].dstIdx;
??bindRemoveSrcDev_2:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  660 
//  661       bindRemoveEntry( &BindingTable[x] );
        ; Setup parameters for call to function bindRemoveEntry
        LCALL   `??bindRemoveEntry::?relay`; Banked call to: bindRemoveEntry
//  662 
//  663       // If this is the last Bind Entry for that idx then clear BINDING
//  664       // user from Address Manager
//  665       bindAddressClear( idx );
        ; Setup parameters for call to function bindAddressClear
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??bindAddressClear::?relay`; Banked call to: bindAddressClear
//  666     }
//  667   }
??bindRemoveSrcDev_3:
        INC     ?V0
??bindRemoveSrcDev_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,?V0
        CLR     C
        SUBB    A,R0
        JC      ??bindRemoveSrcDev_1
//  668 }
        LJMP    ??Subroutine29_0 & 0xFFFF
          CFI EndBlock cfiBlock50
//  669 
//  670 /*********************************************************************
//  671  * @fn          bindNumBoundTo
//  672  *
//  673  * @brief       Calculate the number items this device is bound to.
//  674  *              When srcMode is set to TRUE, discard what value devAddr
//  675  *              has, it returns number count bound to the local dev.
//  676  *
//  677  * @param       devAddr - device Address
//  678  * @param       devEP - endpoint
//  679  * @param       srcMode - TRUE - assume devHandle is a source address
//  680  *                        FALSE - destination address
//  681  *
//  682  * @return      status
//  683  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  684 byte bindNumBoundTo( zAddrType_t *devAddr, byte devEpInt, byte srcMode )
bindNumBoundTo:
          CFI Block cfiBlock51 Using cfiCommon0
          CFI Function bindNumBoundTo
        CODE
//  685 {
        FUNCALL bindNumBoundTo, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V1,R1
        MOV     ?V2,R4
//  686   BindingEntry_t *pBind;
//  687   uint16 idx;
//  688   byte   num;
//  689   bindTableIndex_t x;
//  690 
//  691   // Init
//  692   num = 0;
        MOV     ?V0,#0x0
//  693 
//  694   if ( devAddr->addrMode == AddrGroup )
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_37:
        JNZ     ??bindNumBoundTo_0
//  695   {
//  696     idx = devAddr->addr.shortAddr;
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine39_0 & 0xFFFF
//  697   }
??CrossCallReturnLabel_59:
        SJMP    ??bindNumBoundTo_1
//  698   else
//  699   {
//  700     idx = bindingAddrMgsHelperFind( devAddr );
??bindNumBoundTo_0:
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
//  701   }
//  702 
//  703   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
??bindNumBoundTo_1:
        MOV     R4,#0x0
        SJMP    ??bindNumBoundTo_2
//  704   {
//  705     pBind = &BindingTable[x];
//  706     if ( srcMode )
//  707     {
//  708       if ( pBind->srcEP == devEpInt )
//  709       {
//  710         num++;
//  711       }
//  712     }
//  713     else
//  714     {
//  715       if ( ((devAddr->addrMode == AddrGroup)
//  716               && (pBind->dstGroupMode == DSTGROUPMODE_GROUP) && (pBind->dstIdx == idx))
//  717           || ((devAddr->addrMode != AddrGroup) && (pBind->dstGroupMode == DSTGROUPMODE_ADDR)
//  718                                 && (pBind->dstIdx == idx) && (pBind->dstEP == devEpInt)) )
??bindNumBoundTo_3:
        MOV     A,R5
        JNZ     ??bindNumBoundTo_4
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??bindNumBoundTo_5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??bindNumBoundTo_5:
        JNZ     ??bindNumBoundTo_4
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V1
        JNZ     ??bindNumBoundTo_4
//  719       {
//  720         num++;
??bindNumBoundTo_6:
        INC     ?V0
//  721       }
??bindNumBoundTo_4:
        INC     R4
??bindNumBoundTo_2:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R4
        CLR     C
        SUBB    A,R0
        JNC     ??bindNumBoundTo_7
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_51:
        MOV     A,?V2
        MOV     DPL,R0
        MOV     DPH,R1
        JZ      ??bindNumBoundTo_8
        MOVX    A,@DPTR
        XRL     A,?V1
        JNZ     ??bindNumBoundTo_4
        SJMP    ??bindNumBoundTo_6
??bindNumBoundTo_8:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindNumBoundTo_3
        MOV     A,#0x1
        XRL     A,R5
        JNZ     ??bindNumBoundTo_4
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??bindNumBoundTo_9
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??bindNumBoundTo_9:
        JZ      ??bindNumBoundTo_6
        SJMP    ??bindNumBoundTo_4
//  722     }
//  723   }
//  724 
//  725   return num;
??bindNumBoundTo_7:
        MOV     R1,?V0
        LJMP    ??Subroutine32_0 & 0xFFFF
//  726 }
          CFI EndBlock cfiBlock51

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond52 Using cfiCommon0
          CFI Function bindFindExisting
          CFI Conditional ??CrossCallReturnLabel_36
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function bindNumBoundTo
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker54 Using cfiCommon1
          CFI (cfiPicker54) NoFunction
          CFI (cfiPicker54) Picker
        MOV     A,R2
        ADD     A,#0x8
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_43:
        XRL     A,#0x1
        RET
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiPicker54

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond55 Using cfiCommon0
          CFI Function bindAddClusterIdToList
          CFI Conditional ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function bindFindExisting
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_36
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-4
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function bindNumBoundTo
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_37
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-4
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker58 Using cfiCommon1
          CFI (cfiPicker58) NoFunction
          CFI (cfiPicker58) Picker
        MOV     R0,A
        CLR     A
        ADDC    A,R3
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiPicker58

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond59 Using cfiCommon0
          CFI Function bindNumBoundTo
          CFI Conditional ??CrossCallReturnLabel_51
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function bindAddressClear
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond60) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond60) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond60) CFA_SP SP+-7
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker61 Using cfiCommon1
          CFI (cfiPicker61) NoFunction
          CFI (cfiPicker61) Picker
        MOV     A,R4
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiPicker61
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine33_0:
          CFI Block cfiCond62 Using cfiCommon0
          CFI Function bindUpdateAddr
          CFI Conditional ??CrossCallReturnLabel_50
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function bindNumBoundTo
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-2
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function bindAddressClear
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond64) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond64) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond64) CFA_SP SP+-7
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker65 Using cfiCommon1
          CFI (cfiPicker65) NoFunction
          CFI (cfiPicker65) Picker
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        RET
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiPicker65
//  727 
//  728 /*********************************************************************
//  729  * @fn          bindNumReflections
//  730  *
//  731  * @brief       Counts the number of reflections needed for a
//  732  *              endpoint and cluster ID combo.
//  733  *
//  734  * @param       ep - source endpoint
//  735  * @param       clusterID - matching clusterID
//  736  *
//  737  * @return      number of reflections needed.
//  738  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  739 uint16 bindNumReflections( uint8 ep, uint16 clusterID )
bindNumReflections:
          CFI Block cfiBlock66 Using cfiCommon0
          CFI Function bindNumReflections
        CODE
//  740 {
        FUNCALL bindNumReflections, bindIsClusterIDinList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V3,R1
        MOV     ?V0,R2
        MOV     ?V1,R3
//  741   bindTableIndex_t x;
//  742   BindingEntry_t *pBind;
//  743   uint16 cnt = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  744   uint8 bindEP;
//  745 
//  746   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     ?V2,#0x0
        SJMP    ??bindNumReflections_0
//  747   {
//  748     pBind = &BindingTable[x];
??bindNumReflections_1:
        MOV     A,?V2
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        LCALL   ?Subroutine27 & 0xFFFF
//  749     bindEP = pBind->srcEP;
//  750 
//  751     if ( (bindEP == ep) && (bindIsClusterIDinList( pBind, clusterID )) )
??CrossCallReturnLabel_48:
        XRL     A,?V3
        JNZ     ??bindNumReflections_2
        ; Setup parameters for call to function bindIsClusterIDinList
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
        MOV     A,R1
        JZ      ??bindNumReflections_2
//  752     {
//  753       cnt++;
        INC     R6
        MOV     A,R6
        JNZ     ??bindNumReflections_2
        INC     R7
//  754     }
//  755   }
??bindNumReflections_2:
        INC     ?V2
??bindNumReflections_0:
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_17:
        JC      ??bindNumReflections_1
//  756 
//  757   return ( cnt );
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LJMP    ?Subroutine4 & 0xFFFF
//  758 }
          CFI EndBlock cfiBlock66

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond67 Using cfiCommon0
          CFI Function bindCapacity
          CFI Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_46
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function GetBindingTableEntry
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_47
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-4
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function bindFindEmpty
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_44
          CFI (cfiCond69) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond69) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond69) CFA_SP SP+-9
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function bindNumOfEntries
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_45
          CFI (cfiCond70) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond70) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond70) CFA_SP SP+-9
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function bindNumReflections
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-2
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker72 Using cfiCommon1
          CFI (cfiPicker72) NoFunction
          CFI (cfiPicker72) Picker
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiPicker72
//  759 
//  760 /*********************************************************************
//  761  * @fn          bindFind
//  762  *
//  763  * @brief       Finds the binding entry for the source address, endpoint
//  764  *              and cluster ID passed in as a parameter.
//  765  *
//  766  * @param       ep - source endpoint
//  767  * @param       clusterID - matching clusterID
//  768  * @param       skip - number of matches to skip before returning
//  769  *
//  770  * @return      pointer to the binding table entry, NULL if not found
//  771  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  772 BindingEntry_t *bindFind( uint8 ep, uint16 clusterID, uint8 skipping )
bindFind:
          CFI Block cfiBlock73 Using cfiCommon0
          CFI Function bindFind
        CODE
//  773 {
        FUNCALL bindFind, bindIsClusterIDinList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V3,R1
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V4,R4
//  774   BindingEntry_t *pBind;
//  775   byte skipped = 0;
        MOV     ?V2,#0x0
//  776   bindTableIndex_t x;
//  777 
//  778   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     ?V5,#0x0
        SJMP    ??bindFind_0
//  779   {
//  780     pBind = &BindingTable[x];
//  781 
//  782     if ( ( pBind->srcEP == ep) && bindIsClusterIDinList( pBind, clusterID ))
//  783     {
//  784       if ( skipped < skipping )
//  785       {
//  786         skipped++;
??bindFind_1:
        INC     ?V2
//  787       }
??bindFind_2:
        INC     ?V5
??bindFind_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,?V5
        CLR     C
        SUBB    A,R0
        JNC     ??bindFind_3
        MOV     A,?V5
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_8:
        XRL     A,?V3
        JNZ     ??bindFind_2
        ; Setup parameters for call to function bindIsClusterIDinList
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
        MOV     A,R1
        JZ      ??bindFind_2
        MOV     A,?V2
        CLR     C
        SUBB    A,?V4
        JC      ??bindFind_1
//  788       else
//  789       {
//  790         return ( pBind );
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        SJMP    ??bindFind_4
//  791       }
//  792     }
//  793   }
//  794 
//  795   return ( (BindingEntry_t *)NULL );
??bindFind_3:
        MOV     R2,#0x0
        MOV     R3,#0x0
??bindFind_4:
        LJMP    ??Subroutine32_0 & 0xFFFF
//  796 }
          CFI EndBlock cfiBlock73

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond74 Using cfiCommon0
          CFI Function bindAddEntry
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function bindFind
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-2
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker76 Using cfiCommon1
          CFI (cfiPicker76) NoFunction
          CFI (cfiPicker76) Picker
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     R6,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiPicker76
//  797 
//  798 /*********************************************************************
//  799  * @fn      bindAddressClear
//  800  *
//  801  * @brief   Lookup a binding entry by specific Idx, if none is found
//  802  *          clears the BINDING user from Address Manager.
//  803  *
//  804  * @param   dstIdx - Source Address Manager Index
//  805  *
//  806  * @return  none
//  807  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  808 void bindAddressClear( uint16 dstIdx )
bindAddressClear:
          CFI Block cfiBlock77 Using cfiCommon0
          CFI Function bindAddressClear
        CODE
//  809 {
        FUNCALL bindAddressClear, AddrMgrEntryRelease
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  810   bindTableIndex_t i;
//  811 
//  812   if ( dstIdx != INVALID_NODE_ADDR )
        MOV     A,#-0x2
        XRL     A,R2
        JNZ     ??bindAddressClear_0
        MOV     A,#-0x1
        XRL     A,R3
??bindAddressClear_0:
        JZ      ??bindAddressClear_1
//  813   {
//  814     // Looks for a specific Idx
//  815     for ( i = 0; i < gNWK_MAX_BINDING_ENTRIES; i++ )
        MOV     R4,#0x0
        SJMP    ??bindAddressClear_2
//  816     {
//  817       if ( ( BindingTable[i].dstGroupMode != AddrGroup ) &&
//  818            ( BindingTable[i].dstGroupMode == DSTGROUPMODE_ADDR ) &&
//  819            ( BindingTable[i].dstIdx == dstIdx ) )
??bindAddressClear_3:
        LCALL   ?Subroutine14 & 0xFFFF
//  820       {
//  821         break;  // found at least one
//  822       }
//  823     }
??CrossCallReturnLabel_52:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,#0x1
        XRL     A,R5
        JZ      ??bindAddressClear_4
        MOV     A,R5
        JNZ     ??bindAddressClear_4
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??bindAddressClear_5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??bindAddressClear_5:
        JZ      ??bindAddressClear_1
??bindAddressClear_4:
        INC     R4
??bindAddressClear_2:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R4
        CLR     C
        SUBB    A,R0
        JC      ??bindAddressClear_3
//  824 
//  825     if ( i == gNWK_MAX_BINDING_ENTRIES )
        CLR     A
        MOVC    A,@A+DPTR
        XRL     A,R4
        JNZ     ??bindAddressClear_1
//  826     {
//  827       // No binding entry is associated with dstIdx.
//  828       // Remove user binding bit from the address manager entry corresponding to dstIdx.
//  829       AddrMgrEntry_t addrEntry;
//  830 
//  831       addrEntry.user = ADDRMGR_USER_BINDING;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
//  832       addrEntry.index = dstIdx;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
//  833 
//  834       AddrMgrEntryRelease( &addrEntry );
//  835     }
//  836   }
??CrossCallReturnLabel_18:
        LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
//  837 }
??bindAddressClear_1:
        SJMP    ??Subroutine35_0
          CFI EndBlock cfiBlock77

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock78 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 13)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV     A,#0xb
          CFI EndBlock cfiBlock78
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine34_0:
          CFI Block cfiBlock79 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 13)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_64:
          CFI EndBlock cfiBlock79
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine35_0:
          CFI Block cfiBlock80 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 13)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV     A,#0xd
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock80
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine36_0:
          CFI Block cfiBlock81 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock81
//  838 
//  839 /*********************************************************************
//  840  * @fn          bindUpdateAddr
//  841  *
//  842  * @brief       Update the network address in the binding table.
//  843  *
//  844  * @param       oldAddr - old network address
//  845  * @param       newAddr - new network address
//  846  *
//  847  * @return      none
//  848  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  849 void bindUpdateAddr( uint16 oldAddr, uint16 newAddr )
bindUpdateAddr:
          CFI Block cfiBlock82 Using cfiCommon0
          CFI Function bindUpdateAddr
        CODE
//  850 {
        FUNCALL bindUpdateAddr, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindUpdateAddr, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  851   uint16 oldIdx;
//  852   uint16 newIdx;
//  853   zAddrType_t addr;
//  854   bindTableIndex_t x;
//  855   BindingEntry_t *pBind;
//  856 
//  857   addr.addrMode = Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  858   addr.addr.shortAddr = oldAddr;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine15 & 0xFFFF
//  859   oldIdx = bindingAddrMgsHelperFind( &addr );
??CrossCallReturnLabel_19:
        LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
        MOV     ?V0,R2
        MOV     ?V1,R3
//  860   addr.addr.shortAddr = newAddr;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  861   newIdx = bindingAddrMgsHelperFind( &addr );
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
        MOV     ?V2,R2
//  862 
//  863   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     R2,#0x0
        SJMP    ??bindUpdateAddr_0
//  864   {
//  865     pBind = &BindingTable[x];
??bindUpdateAddr_1:
        MOV     A,R2
        LCALL   ??Subroutine33_0 & 0xFFFF
//  866 
//  867     if ( pBind->dstIdx == oldIdx )
??CrossCallReturnLabel_50:
        MOV     A,R0
        ADD     A,#0x2
        MOV     R0,A
        JNC     ??bindUpdateAddr_2
        INC     R1
??bindUpdateAddr_2:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,?V0
        JNZ     ??bindUpdateAddr_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V1
??bindUpdateAddr_3:
        JNZ     ??bindUpdateAddr_4
//  868     {
//  869       pBind->dstIdx = newIdx;
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,?V2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  870     }
//  871   }
??bindUpdateAddr_4:
        INC     R2
??bindUpdateAddr_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        JC      ??bindUpdateAddr_1
//  872 }
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock82
//  873 
//  874 /*********************************************************************
//  875  * @fn      bindingAddrMgsHelperFind
//  876  *
//  877  * @brief   Turns an zAddrType_t to an Addr Manager index
//  878  *
//  879  * @param   addr - zAddrType_t
//  880  *
//  881  * @return  INVALID_NODE_ADDR if not found, otherwise an index
//  882  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  883 uint16 bindingAddrMgsHelperFind( zAddrType_t *addr )
bindingAddrMgsHelperFind:
          CFI Block cfiBlock83 Using cfiCommon0
          CFI Function bindingAddrMgsHelperFind
        CODE
//  884 {
        FUNCALL bindingAddrMgsHelperFind, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindingAddrMgsHelperFind, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindingAddrMgsHelperFind, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  885   AddrMgrEntry_t entry;
//  886 
//  887   // Resolve addresses with the address manager
//  888   entry.user = ADDRMGR_USER_BINDING;
        LCALL   ?Subroutine17 & 0xFFFF
//  889   if ( addr->addrMode == Addr16Bit )
??CrossCallReturnLabel_24:
        XRL     A,#0x2
        JNZ     ??bindingAddrMgsHelperFind_0
//  890   {
//  891     entry.nwkAddr = addr->addr.shortAddr;
        LCALL   ?Subroutine21 & 0xFFFF
//  892     AddrMgrEntryLookupNwk( &entry );
//  893   }
??CrossCallReturnLabel_54:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
        SJMP    ??bindingAddrMgsHelperFind_1
//  894   else
//  895   {
//  896     AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
??bindingAddrMgsHelperFind_0:
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
//  897     AddrMgrEntryLookupExt( &entry );
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
//  898   }
//  899 
//  900   return ( entry.index );
??bindingAddrMgsHelperFind_1:
        LJMP    ?Subroutine1 & 0xFFFF
//  901 }
          CFI EndBlock cfiBlock83

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond84 Using cfiCommon0
          CFI Function bindingAddrMgsHelperFind
          CFI Conditional ??CrossCallReturnLabel_54
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function bindAddrIndexGet
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond85) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond85) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond85) CFA_SP SP+-7
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker86 Using cfiCommon1
          CFI (cfiPicker86) NoFunction
          CFI (cfiPicker86) Picker
        MOV     DPL,R2
        MOV     DPH,R3
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiPicker86
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine37_0:
          CFI Block cfiCond87 Using cfiCommon0
          CFI Function bindAddrMgrLocalLoad
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function bindingAddrMgsHelperFind
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond88) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond88) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond88) CFA_SP SP+-7
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function bindAddrIndexGet
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond89) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond89) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond89) CFA_SP SP+-7
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker90 Using cfiCommon1
          CFI (cfiPicker90) NoFunction
          CFI (cfiPicker90) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x1
        RET
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiPicker90
//  902 
//  903 /*********************************************************************
//  904  * @fn      bindingAddrMgsHelperConvert
//  905  *
//  906  * @brief   Convert an index into an zAddrType_t
//  907  *
//  908  * @param   idx -
//  909  * @param   addr - zAddrType_t
//  910  *
//  911  * @return  TRUE if found, FALSE if not
//  912  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  913 uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr )
bindingAddrMgsHelperConvert:
          CFI Block cfiBlock91 Using cfiCommon0
          CFI Function bindingAddrMgsHelperConvert
        CODE
//  914 {
        FUNCALL bindingAddrMgsHelperConvert, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindingAddrMgsHelperConvert, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  915   AddrMgrEntry_t entry;
//  916   uint8 stat;
//  917 
//  918   // Resolve addresses with the address manager
//  919   entry.user = ADDRMGR_USER_BINDING;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
//  920   entry.index = idx;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
//  921   stat = AddrMgrEntryGet( &entry );
??CrossCallReturnLabel_20:
        LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
        MOV     A,R1
        MOV     ?V0,A
//  922   if ( stat )
        JZ      ??bindingAddrMgsHelperConvert_0
//  923   {
//  924     addr->addrMode = Addr64Bit;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x3
        MOVX    @DPTR,A
//  925     osal_cpyExtAddr( addr->addr.extAddr, entry.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
//  926   }
//  927 
//  928   return ( stat );
??bindingAddrMgsHelperConvert_0:
        MOV     R1,?V0
        MOV     A,#0xd
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        LJMP    ?Subroutine2 & 0xFFFF
//  929 }
          CFI EndBlock cfiBlock91

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond92 Using cfiCommon0
          CFI Function bindAddressClear
          CFI Conditional ??CrossCallReturnLabel_18
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function bindUpdateAddr
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-2
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function bindingAddrMgsHelperConvert
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-2
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function bindingAddrMgsHelperConvertShort
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond95) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond95) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond95) CFA_SP SP+-7
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker96 Using cfiCommon1
          CFI (cfiPicker96) NoFunction
          CFI (cfiPicker96) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        ; Setup parameters for call to function AddrMgrEntryRelease
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        ; Setup parameters for call to function AddrMgrEntryGet
        ; Setup parameters for call to function AddrMgrEntryGet
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        RET
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiPicker96
//  930 
//  931 /*********************************************************************
//  932  * @fn      bindingAddrMgsHelperConvertShort
//  933  *
//  934  * @brief   Convert an index into a short address
//  935  *
//  936  * @param   idx -
//  937  *
//  938  * @return  INVALID_NODE_ADDR if not available, otherwise the short address
//  939  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  940 uint16 bindingAddrMgsHelperConvertShort( uint16 idx )
bindingAddrMgsHelperConvertShort:
          CFI Block cfiBlock97 Using cfiCommon0
          CFI Function bindingAddrMgsHelperConvertShort
        CODE
//  941 {
        FUNCALL bindingAddrMgsHelperConvertShort, AddrMgrEntryGet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  942   AddrMgrEntry_t entry;
//  943 
//  944   // Resolve addresses with the address manager
//  945   entry.user = ADDRMGR_USER_BINDING;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
//  946   entry.index = idx;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
//  947   AddrMgrEntryGet( &entry );
??CrossCallReturnLabel_21:
        LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
//  948 
//  949   return ( entry.nwkAddr );
        MOV     A,#0x1
        LJMP    ??Subroutine34_0 & 0xFFFF
//  950 }
          CFI EndBlock cfiBlock97
//  951 
//  952 /*********************************************************************
//  953  * @fn      bindAddrMgrLocalLoad
//  954  *
//  955  * @brief   Load local(self and parent) address information into
//  956  *          Address Manager
//  957  *
//  958  * @param   none
//  959  *
//  960  * @return  none
//  961  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  962 void bindAddrMgrLocalLoad( void )
bindAddrMgrLocalLoad:
          CFI Block cfiBlock98 Using cfiCommon0
          CFI Function bindAddrMgrLocalLoad
        CODE
//  963 {
        FUNCALL bindAddrMgrLocalLoad, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, NLME_GetCoordExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
//  964   AddrMgrEntry_t entry;
//  965   uint16         parent;
//  966 
//  967   // add "local"(self and parent) address informtion into the Address
//  968   // Manager
//  969   if ( bindAddrMgrLocalLoaded == FALSE )
        MOV     DPTR,#bindAddrMgrLocalLoaded
        MOVX    A,@DPTR
        JNZ     ??bindAddrMgrLocalLoad_0
//  970   {
//  971     // add the device's address information
//  972     entry.user    = ADDRMGR_USER_BINDING;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
//  973     entry.nwkAddr = _NIB.nwkDevAddress;
        MOV     DPTR,#_NIB + 20
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_53:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  974     AddrMgrExtAddrSet( entry.extAddr, NLME_GetExtAddr() );
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R4,?V0
        MOV     R5,?V1
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
//  975     AddrMgrEntryUpdate( &entry );
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
//  976 
//  977     // make sure parent address is valid
//  978     parent = NLME_GetCoordShortAddr();
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
//  979     if ( ( parent != entry.nwkAddr     ) &&
//  980          ( parent != INVALID_NODE_ADDR )    )
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??bindAddrMgrLocalLoad_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??bindAddrMgrLocalLoad_1:
        JZ      ??bindAddrMgrLocalLoad_2
        MOV     A,#-0x2
        XRL     A,R0
        JNZ     ??bindAddrMgrLocalLoad_3
        MOV     A,#-0x1
        XRL     A,R1
??bindAddrMgrLocalLoad_3:
        JZ      ??bindAddrMgrLocalLoad_2
//  981     {
//  982       // add the parent's address information
//  983       entry.nwkAddr = parent;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  984       NLME_GetCoordExtAddr( entry.extAddr );
        ; Setup parameters for call to function NLME_GetCoordExtAddr
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
//  985       AddrMgrEntryUpdate( &entry );
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
//  986     }
//  987 
//  988     bindAddrMgrLocalLoaded = TRUE;
??bindAddrMgrLocalLoad_2:
        MOV     DPTR,#bindAddrMgrLocalLoaded
        MOV     A,#0x1
        MOVX    @DPTR,A
//  989   }
//  990 }
??bindAddrMgrLocalLoad_0:
        MOV     A,#0xd
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock98
//  991 
//  992 /*********************************************************************
//  993  * @fn      bindAddrIndexGet
//  994  *
//  995  * @brief   Get bind address index.
//  996  *
//  997  * @param   addr - <zAddrType_t>
//  998  *
//  999  * @return  (uint16) address index
// 1000  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1001 uint16 bindAddrIndexGet( zAddrType_t* addr )
bindAddrIndexGet:
          CFI Block cfiBlock99 Using cfiCommon0
          CFI Function bindAddrIndexGet
        CODE
// 1002 {
        FUNCALL bindAddrIndexGet, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrIndexGet, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrIndexGet, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrIndexGet, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
// 1003   AddrMgrEntry_t entry;
// 1004   uint8          update;
// 1005 
// 1006   update = FALSE;
// 1007 
// 1008   // sync binding addresses with the address manager
// 1009   entry.user = ADDRMGR_USER_BINDING;
        LCALL   ?Subroutine17 & 0xFFFF
// 1010 
// 1011   if ( addr->addrMode == Addr16Bit )
??CrossCallReturnLabel_25:
        MOV     R0,A
        MOV     A,#0x2
        XRL     A,R0
        JNZ     ??bindAddrIndexGet_0
// 1012   {
// 1013     entry.nwkAddr = addr->addr.shortAddr;
        LCALL   ?Subroutine21 & 0xFFFF
// 1014 
// 1015     if ( AddrMgrEntryLookupNwk( &entry ) == FALSE )
// 1016     {
// 1017       update = TRUE;
// 1018     }
// 1019   }
??CrossCallReturnLabel_55:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
        MOV     A,R1
        JNZ     ??bindAddrIndexGet_1
        SJMP    ??bindAddrIndexGet_2
// 1020   else if ( addr->addrMode == Addr64Bit )
??bindAddrIndexGet_0:
        MOV     A,#0x3
        XRL     A,R0
        JNZ     ??bindAddrIndexGet_3
// 1021   {
// 1022     AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
// 1023 
// 1024     if ( AddrMgrEntryLookupExt( &entry ) == FALSE )
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
        MOV     A,R1
        JNZ     ??bindAddrIndexGet_1
// 1025     {
// 1026       update = TRUE;
// 1027     }
// 1028   }
// 1029   else if ( addr->addrMode == AddrGroup )
// 1030   {
// 1031     entry.index = addr->addr.shortAddr;
// 1032   }
// 1033   else
// 1034   {
// 1035     entry.index = INVALID_NODE_ADDR;
// 1036   }
// 1037 
// 1038   if ( update )
// 1039   {
// 1040     AddrMgrEntryUpdate( &entry );
??bindAddrIndexGet_2:
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
        SJMP    ??bindAddrIndexGet_1
// 1041   }
??bindAddrIndexGet_3:
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??bindAddrIndexGet_4
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        SJMP    ??bindAddrIndexGet_5
??bindAddrIndexGet_4:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
??bindAddrIndexGet_5:
        MOVX    @DPTR,A
// 1042 
// 1043   return entry.index;
??bindAddrIndexGet_1:
        LJMP    ?Subroutine1 & 0xFFFF
// 1044 }
          CFI EndBlock cfiBlock99

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond100 Using cfiCommon0
          CFI Function bindAddEntry
          CFI Conditional ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function bindRemoveClusterIdFromList
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-2
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function bindAddrIndexGet
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond102) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond102) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond102) CFA_SP SP+-7
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function BindCopyBackupToNewNV
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function BindCopyBackupToNewNV
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-4
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function BindRestoreFromNV
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-2
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker106 Using cfiCommon1
          CFI (cfiPicker106) NoFunction
          CFI (cfiPicker106) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiPicker106

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond107 Using cfiCommon0
          CFI Function bindingAddrMgsHelperFind
          CFI Conditional ??CrossCallReturnLabel_26
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function bindAddrIndexGet
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond108) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond108) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond108) CFA_SP SP+-7
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker109 Using cfiCommon1
          CFI (cfiPicker109) NoFunction
          CFI (cfiPicker109) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        RET
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiPicker109

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond110 Using cfiCommon0
          CFI Function bindingAddrMgsHelperFind
          CFI Conditional ??CrossCallReturnLabel_24
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function bindAddrIndexGet
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond111) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond111) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond111) CFA_SP SP+-7
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker112 Using cfiCommon1
          CFI (cfiPicker112) NoFunction
          CFI (cfiPicker112) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiPicker112
// 1045 
// 1046 /*********************************************************************
// 1047  * @fn      GetBindingTableEntry
// 1048  *
// 1049  * @brief   Get a pointer to the Nth valid binding table entry.
// 1050  *
// 1051  * @param   Nth valid entry being requested.
// 1052  *
// 1053  * @return  The Nth valid binding table entry.
// 1054  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1055 BindingEntry_t *GetBindingTableEntry( uint16 Nth )
GetBindingTableEntry:
          CFI Block cfiBlock113 Using cfiCommon0
          CFI Function GetBindingTableEntry
        CODE
// 1056 {
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
// 1057   BindingEntry_t *rtrn = NULL;
        MOV     R2,#0x0
        MOV     R3,#0x0
// 1058 
// 1059 #if defined ( REFLECTOR )
// 1060   bindTableIndex_t idx, cnt = 0;
        MOV     R6,#0x0
// 1061 
// 1062   for ( idx = 0; idx < gNWK_MAX_BINDING_ENTRIES; idx++ )
        MOV     R7,#0x0
        SJMP    ??GetBindingTableEntry_0
??GetBindingTableEntry_1:
        INC     R7
??GetBindingTableEntry_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R7
        CLR     C
        SUBB    A,R0
        JNC     ??GetBindingTableEntry_2
// 1063   {
// 1064     if ( BindingTable[idx].srcEP != NV_BIND_EMPTY )
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_47:
        JZ      ??GetBindingTableEntry_1
// 1065     {
// 1066       if ( cnt++ == Nth )
        MOV     ?V0,R6
        MOV     A,#0x1
        ADD     A,R6
        MOV     R6,A
        MOV     R0,?V0
        MOV     A,R4
        XRL     A,R0
        ORL     A,R5
        JNZ     ??GetBindingTableEntry_1
// 1067       {
// 1068         rtrn = BindingTable+idx;
        MOV     R2,DPL
        MOV     R3,DPH
// 1069         break;
// 1070       }
// 1071     }
// 1072   }
// 1073 #else
// 1074   (void)Nth;
// 1075 #endif
// 1076 
// 1077   return rtrn;
??GetBindingTableEntry_2:
        LJMP    ?Subroutine2 & 0xFFFF
// 1078 }
          CFI EndBlock cfiBlock113
// 1079 
// 1080 #if !defined ( BINDINGTABLE_NV_SINGLES )
// 1081 /*********************************************************************
// 1082  * @fn          BindInitNV
// 1083  *
// 1084  * @brief       Initialize the Binding NV Item
// 1085  *
// 1086  * @param       none
// 1087  *
// 1088  * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
// 1089  *              exist in NV, NV_OPER_FAILED if failure.
// 1090  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1091 byte BindInitNV( void )
BindInitNV:
          CFI Block cfiBlock114 Using cfiCommon0
          CFI Function BindInitNV
        CODE
// 1092 {
        FUNCALL BindInitNV, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindInitNV, BindSetDefaultNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1093   byte ret;
// 1094 
// 1095   // Initialize the device list
// 1096   ret = osal_nv_item_init( ZCD_NV_BINDING_TABLE,
// 1097                   (uint16)( sizeof( nvBindingHdr_t ) + NV_BIND_ITEM_SIZE ), NULL );
        ; Setup parameters for call to function osal_nv_item_init
        CLR     A
        MOV     ?V0,A
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_56:
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        MOV     R6,A
// 1098 
// 1099   if (ret == NV_ITEM_UNINIT) 
        MOV     A,#0x9
        XRL     A,R6
        JNZ     ??BindInitNV_0
// 1100   {
// 1101     BindSetDefaultNV();
        ; Setup parameters for call to function BindSetDefaultNV
        LCALL   `??BindSetDefaultNV::?relay`; Banked call to: BindSetDefaultNV
// 1102   }
// 1103 
// 1104   return ( ret );
??BindInitNV_0:
        MOV     A,R6
        MOV     R1,A
        LJMP    ??Subroutine29_0 & 0xFFFF
// 1105 }
          CFI EndBlock cfiBlock114
// 1106 
// 1107 /*********************************************************************
// 1108  * @fn          BindSetDefaultNV
// 1109  *
// 1110  * @brief       Write the defaults to NV
// 1111  *
// 1112  * @param       none
// 1113  *
// 1114  * @return      none
// 1115  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1116 void BindSetDefaultNV( void )
BindSetDefaultNV:
          CFI Block cfiBlock115 Using cfiCommon0
          CFI Function BindSetDefaultNV
        CODE
// 1117 {
        FUNCALL BindSetDefaultNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1118   nvBindingHdr_t hdr;
// 1119 
// 1120   // Initialize the header
// 1121   hdr.numRecs = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1122 
// 1123   // Save off the header
// 1124   osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof( nvBindingHdr_t ), &hdr );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1125 }
        MOV     A,#0x2
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock115
// 1126 
// 1127 #if !defined ( DONT_UPGRADE_BIND )
// 1128 /*********************************************************************
// 1129  * @fn          BindCopyBackupToNewNV
// 1130  *
// 1131  * @brief       Creates the New NV item, copies the backup data into
// 1132  *              the New NV ID, and Deletes the duplicate NV item.
// 1133  *
// 1134  * @param       dupLen - NV item length of the old Binding table.
// 1135  * @param       newLen - NV item length of the new Binding table to be created.
// 1136  *
// 1137  * @return      ZSuccess - All the actions were successful.
// 1138  *              ZFailure - Any of the actions failed.
// 1139  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1140 static uint8 BindCopyBackupToNewNV( uint16 dupLen, uint16 newLen )
BindCopyBackupToNewNV:
          CFI Block cfiBlock116 Using cfiCommon0
          CFI Function BindCopyBackupToNewNV
        CODE
// 1141 {
        FUNCALL BindCopyBackupToNewNV, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_delete
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_delete
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 18
        MOV     A,#-0x12
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R4
        MOV     ?V1,R5
// 1142   uint8 status = ZSuccess;
        MOV     ?V2,#0x0
// 1143   uint16 bindLen;
// 1144 
// 1145   bindLen = osal_nv_item_len( ZCD_NV_BINDING_TABLE );
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R4,?V4
        MOV     R5,?V5
// 1146 
// 1147 
// 1148   if ( ( bindLen > 0 ) && ( bindLen != newLen ) )
        MOV     A,R4
        ORL     A,R5
        JZ      ??BindCopyBackupToNewNV_0
        MOV     A,?V0
        XRL     A,R4
        JNZ     ??BindCopyBackupToNewNV_1
        MOV     A,?V1
        XRL     A,R5
??BindCopyBackupToNewNV_1:
        JZ      ??BindCopyBackupToNewNV_0
// 1149   {
// 1150     // The existing item does not match the New length
// 1151     osal_nv_delete( ZCD_NV_BINDING_TABLE, bindLen );
        ; Setup parameters for call to function osal_nv_delete
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
// 1152   }
// 1153 
// 1154   // Create Binding Table NV item with the NEW legth
// 1155   if ( osal_nv_item_init( ZCD_NV_BINDING_TABLE, newLen, NULL ) != NV_OPER_FAILED )
??BindCopyBackupToNewNV_0:
        ; Setup parameters for call to function osal_nv_item_init
        CLR     A
        MOV     ?V4,A
        MOV     ?V5,A
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R1
        XRL     A,#0xa
        JNZ     $+5
        LJMP    ??BindCopyBackupToNewNV_2 & 0xFFFF
// 1156   {
// 1157     nvBindingHdr_t hdrBackup;
// 1158 
// 1159     // Copy ONLY the valid records from the duplicate NV table into the new table
// 1160     // at the end of this process the table content will be compacted
// 1161     if ( osal_nv_read( ZCD_NV_DUPLICATE_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdrBackup ) == ZSuccess )
        ; Setup parameters for call to function osal_nv_read
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x3
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R1
        JZ      $+5
        LJMP    ??BindCopyBackupToNewNV_2 & 0xFFFF
// 1162     {
// 1163       bindTableIndex_t i;
// 1164       uint16 validBackupRecs = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1165       BindingEntry_t backupRec;
// 1166 
// 1167       // Read in the device list. This loop will stop when:
// 1168       // The total number of valid records has been reached either because:
// 1169       //          The new table is full of valid records OR
// 1170       //          The old table has less valid records than the size of the table
// 1171       for ( i = 0; ( validBackupRecs < gNWK_MAX_BINDING_ENTRIES ) && ( validBackupRecs < hdrBackup.numRecs ); i++ )
        MOV     ?V0,#0x0
        SJMP    ??BindCopyBackupToNewNV_3
// 1172       {
// 1173         if ( osal_nv_read( ZCD_NV_DUPLICATE_BINDING_TABLE,
// 1174                           (uint16)(sizeof(nvBindingHdr_t) + (i * NV_BIND_REC_SIZE)),
// 1175                           NV_BIND_REC_SIZE, &backupRec ) == ZSuccess )
??BindCopyBackupToNewNV_4:
        ; Setup parameters for call to function osal_nv_read
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     DPTR,#gBIND_REC_SIZE
        LCALL   ?PUSH_XSTACK8_C_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     R2,#0x0
        MOV     R3,#0x3
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R1
        JZ      $+5
        LJMP    ??BindCopyBackupToNewNV_2 & 0xFFFF
// 1176         {
// 1177           if ( backupRec.srcEP != NV_BIND_EMPTY )
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JZ      ??CrossCallReturnLabel_34
// 1178           {
// 1179             // Save the valid record into the NEW NV table.
// 1180             if ( osal_nv_write( ZCD_NV_BINDING_TABLE,
// 1181                                 (uint16)((sizeof(nvBindingHdr_t)) + (validBackupRecs * NV_BIND_REC_SIZE)),
// 1182                                 NV_BIND_REC_SIZE, &backupRec ) != ZSuccess )
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     DPTR,#gBIND_REC_SIZE
        LCALL   ?PUSH_XSTACK8_C_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV     R2,A
        MOV     B,?V4
        MOV     A,R1
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_57:
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R1
        JNZ     ??BindCopyBackupToNewNV_2
// 1183             {
// 1184                status = ZFailure;
// 1185                break; // Terminate the loop as soon as a problem with NV is detected
// 1186             }
// 1187 
// 1188             validBackupRecs++;
        LCALL   ?Subroutine23 & 0xFFFF
// 1189           }
// 1190         }
// 1191         else
// 1192         {
// 1193            status = ZFailure;
// 1194            break; // Terminate the loop as soon as a problem with NV is detected
// 1195         }
// 1196       }
??CrossCallReturnLabel_34:
        INC     ?V0
??BindCopyBackupToNewNV_3:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        PUSH    DPL
          CFI CFA_SP SP+-1
        PUSH    DPH
          CFI CFA_SP SP+-2
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        POP     DPH
          CFI CFA_SP SP+-1
        POP     DPL
          CFI CFA_SP SP+0
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        JNC     ??BindCopyBackupToNewNV_5
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        PUSH    DPL
          CFI CFA_SP SP+-1
        PUSH    DPH
          CFI CFA_SP SP+-2
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_32:
        POP     DPH
          CFI CFA_SP SP+-1
        POP     DPL
          CFI CFA_SP SP+0
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        JNC     $+5
        LJMP    ??BindCopyBackupToNewNV_4 & 0xFFFF
// 1197 
// 1198       // Only save the header and delete the duplicate element if the previous
// 1199       // process was successful
// 1200       if ( status == ZSuccess )
// 1201       {
// 1202         // Save off the header
// 1203         if ( osal_nv_write( ZCD_NV_BINDING_TABLE, 0,
// 1204                             sizeof(nvBindingHdr_t), &validBackupRecs ) == ZSuccess )
??BindCopyBackupToNewNV_5:
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R1
        JNZ     ??BindCopyBackupToNewNV_2
// 1205         {
// 1206           // Delete the duplicate NV Item, once the data has been stored in the NEW table
// 1207           if ( osal_nv_delete( ZCD_NV_DUPLICATE_BINDING_TABLE, dupLen ) != ZSuccess )
        ; Setup parameters for call to function osal_nv_delete
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#0x0
        MOV     R3,#0x3
        LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
        MOV     A,R1
        JZ      ??BindCopyBackupToNewNV_6
// 1208           {
// 1209             status = ZFailure;
// 1210           }
// 1211         }
// 1212         else
// 1213         {
// 1214           status = ZFailure;
// 1215         }
// 1216       }
// 1217     }
// 1218     else
// 1219     {
// 1220       status = ZFailure;
// 1221     }
// 1222   }
// 1223   else
// 1224   {
// 1225     status = ZFailure;
??BindCopyBackupToNewNV_2:
        MOV     ?V2,#0x1
// 1226   }
// 1227 
// 1228   return ( status );
??BindCopyBackupToNewNV_6:
        MOV     R1,?V2
        MOV     A,#0x12
        LJMP    ??Subroutine31_0 & 0xFFFF
// 1229 }
          CFI EndBlock cfiBlock116

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond117 Using cfiCommon0
          CFI Function BindCopyBackupToNewNV
          CFI Conditional ??CrossCallReturnLabel_57
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function BindWriteNV
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-2
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker119 Using cfiCommon1
          CFI (cfiPicker119) NoFunction
          CFI (cfiPicker119) Picker
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiPicker119
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine38_0:
          CFI Block cfiCond120 Using cfiCommon0
          CFI Function BindInitNV
          CFI Conditional ??CrossCallReturnLabel_56
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function BindCopyBackupToNewNV
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-2
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function BindWriteNV
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-2
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker123 Using cfiCommon1
          CFI (cfiPicker123) NoFunction
          CFI (cfiPicker123) Picker
        MOV     R4,A
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        MOV     R2,#0x41
        MOV     R3,#0x0
        RET
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiPicker123
// 1230 #endif // !DONT_UPGRADE_BIND
// 1231 
// 1232 #if !defined ( DONT_UPGRADE_BIND )
// 1233 /*********************************************************************
// 1234  * @fn          BindUpgradeTableInNV
// 1235  *
// 1236  * @brief       Verifies if the existing table in NV has different size
// 1237  *              than the table defined by parameters in the current code.
// 1238  *              If different, creates a backup table, deletes the existing
// 1239  *              table and creates the new table with the new size. After
// 1240  *              this process is done ZCD_NV_BINDING_TABLE NV item contains
// 1241  *              only valid records retrieved from the original table, up to
// 1242  *              the maximum number of records defined by gNWK_MAX_BINDING_ENTRIES
// 1243  *
// 1244  * @param       none
// 1245  *
// 1246  * @return      ZSuccess - the Update process was sucessful.
// 1247  *              ZFailure - otherwise.
// 1248  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1249 static uint8 BindUpgradeTableInNV( void )
BindUpgradeTableInNV:
          CFI Block cfiBlock124 Using cfiCommon0
          CFI Function BindUpgradeTableInNV
        CODE
// 1250 {
        FUNCALL BindUpgradeTableInNV, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindUpgradeTableInNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindUpgradeTableInNV, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindUpgradeTableInNV, nwkCreateDuplicateNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindUpgradeTableInNV, osal_nv_delete
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindUpgradeTableInNV, BindCopyBackupToNewNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 1251   uint8 status = ZSuccess;
        MOV     ?V2,#0x0
// 1252   nvBindingHdr_t hdr;
// 1253   uint16 dupLen;
// 1254   uint16 bindLen;
// 1255   uint16 newLen;
// 1256   bool duplicateReady = FALSE;
// 1257 
// 1258   // Size of the Binding table based on current paramenters in the code
// 1259   newLen = sizeof(nvBindingHdr_t) + NV_BIND_ITEM_SIZE;
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     ?V0,A
        CLR     A
        ADDC    A,R1
        MOV     ?V1,A
// 1260 
// 1261   // Size of the Binding table NV item, this is the whole size of the item,
// 1262   // it could inculde invalid records also
// 1263   bindLen = osal_nv_item_len( ZCD_NV_BINDING_TABLE );
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R6,?V4
        MOV     R7,?V5
// 1264 
// 1265   // Get the number of valid records from the Binding table
// 1266   osal_nv_read( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr );
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V4,#0x2
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 1267 
// 1268   // Identify if there is a duplicate NV item, if it is there, that means an
// 1269   // Upgrade process did not finish properly last time
// 1270   // The length function will return 0 if the Backup NV ID does not exist.
// 1271   dupLen = osal_nv_item_len( ZCD_NV_DUPLICATE_BINDING_TABLE );
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R2,#0x0
        MOV     R3,#0x3
        LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R0,?V4
        MOV     R1,?V5
// 1272 
// 1273   // A duplicate of the original Binding item will be done if:
// 1274   // 1) A duplicate NV item DOES NOT exist AND the size of the original Binding
// 1275   //    item in NV is different (larger/smaller) than the the length calculated
// 1276   //    from the parameters in the code. If they are the same there is no need
// 1277   //    to do the Upgrade process.
// 1278   // 2) A duplicate NV item exists (probably because the previous upgrade
// 1279   //    process was interrupted) and [the original Binding NV items exists AND
// 1280   //    has valid recods (it is important to make sure that valid records exist
// 1281   //    in the binding table because it is possible that the item was created
// 1282   //    but the data was not copied in the previous upgrade process).
// 1283   if ( ( ( dupLen == 0 ) && ( bindLen != newLen ) ) ||
// 1284        ( ( dupLen > 0 ) && ( bindLen > 0 ) && ( hdr.numRecs > 0 ) ) )
        MOV     A,R0
        ORL     A,R1
        JNZ     ??BindUpgradeTableInNV_0
        MOV     A,?V0
        XRL     A,R6
        JNZ     ??BindUpgradeTableInNV_1
        MOV     A,?V1
        XRL     A,R7
??BindUpgradeTableInNV_1:
        JNZ     ??BindUpgradeTableInNV_2
        SJMP    ??BindUpgradeTableInNV_3
??BindUpgradeTableInNV_0:
        MOV     A,R6
        ORL     A,R7
        JZ      ??BindUpgradeTableInNV_4
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_60:
        MOV     A,R2
        ORL     A,R3
        JZ      ??BindUpgradeTableInNV_4
// 1285   {
// 1286     // Create a copy from original NV item into a duplicate NV item
// 1287     if ( ( status = nwkCreateDuplicateNV( ZCD_NV_BINDING_TABLE,
// 1288                                           ZCD_NV_DUPLICATE_BINDING_TABLE ) ) == ZSuccess )
??BindUpgradeTableInNV_2:
        ; Setup parameters for call to function nwkCreateDuplicateNV
        MOV     R4,#0x0
        MOV     R5,#0x3
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??nwkCreateDuplicateNV::?relay`; Banked call to: nwkCreateDuplicateNV
        MOV     A,R1
        MOV     R0,A
        MOV     ?V2,R0
        JNZ     ??BindUpgradeTableInNV_3
// 1289     {
// 1290       // Delete the original NV item once the duplicate is ready
// 1291       if ( osal_nv_delete( ZCD_NV_BINDING_TABLE, bindLen ) != ZSuccess )
        ; Setup parameters for call to function osal_nv_delete
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
        MOV     A,R1
        JZ      ??BindUpgradeTableInNV_5
// 1292       {
// 1293         status = ZFailure;
        MOV     ?V2,#0x1
        SJMP    ??BindUpgradeTableInNV_3
// 1294       }
// 1295       else
// 1296       {
// 1297         duplicateReady = TRUE;
// 1298       }
// 1299     }
// 1300   }
// 1301   else if ( ( ( dupLen > 0 ) && ( bindLen == 0 ) ) ||
// 1302             ( ( dupLen > 0 ) && ( bindLen > 0 ) && ( hdr.numRecs == 0 ) ) )
// 1303   {
// 1304     // If for some reason a duplicate NV item was left in the system from a
// 1305     // previous upgrade process and:
// 1306     // 1) The original Binding NV item DOES NOT exist OR
// 1307     // 2) The original Binding NV item exist, but has no valid records.
// 1308     // it is necessary to rely in the data in the Duplicate item to create
// 1309     // the Binding table
// 1310     bindLen = dupLen;
??BindUpgradeTableInNV_4:
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
// 1311 
// 1312     duplicateReady = TRUE;
// 1313   }
// 1314 
// 1315   if ( duplicateReady == TRUE )
// 1316   {
// 1317     // Creates the New Binding table, Copy data from backup and Delete backup NV ID
// 1318     status = BindCopyBackupToNewNV( bindLen, newLen );
??BindUpgradeTableInNV_5:
        ; Setup parameters for call to function BindCopyBackupToNewNV
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??BindCopyBackupToNewNV::?relay`; Banked call to: BindCopyBackupToNewNV
        MOV     A,R1
        MOV     ?V2,A
// 1319   }
// 1320   return ( status );
??BindUpgradeTableInNV_3:
        MOV     R1,?V2
        LJMP    ?Subroutine3 & 0xFFFF
// 1321 }
          CFI EndBlock cfiBlock124

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond125 Using cfiCommon0
          CFI Function bindAddEntry
          CFI Conditional ??CrossCallReturnLabel_62
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function bindAddEntry
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond126) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-2
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker127 Using cfiCommon1
          CFI (cfiPicker127) NoFunction
          CFI (cfiPicker127) Picker
        MOV     R5,#0x1
        MOV     R4,#0x0
        MOV     DPL,?V4
        MOV     DPH,?V5
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiPicker127
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine39_0:
          CFI Block cfiCond128 Using cfiCommon0
          CFI Function bindNumBoundTo
          CFI Conditional ??CrossCallReturnLabel_59
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function bindingAddrMgsHelperFind
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond129) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond129) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond129) CFA_SP SP+-7
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function bindAddrIndexGet
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond130) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond130) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond130) CFA_SP SP+-7
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function bindingAddrMgsHelperConvertShort
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond131) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond131) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond131) CFA_SP SP+-7
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function BindUpgradeTableInNV
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-2
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function BindRestoreFromNV
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-2
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function bindAddEntry
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond134) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-2
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function bindAddEntry
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond135) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond135) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond135) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond135) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-2
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker136 Using cfiCommon1
          CFI (cfiPicker136) NoFunction
          CFI (cfiPicker136) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiPicker136

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond137 Using cfiCommon0
          CFI Function BindInitNV
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function BindUpgradeTableInNV
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-2
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker139 Using cfiCommon1
          CFI (cfiPicker139) NoFunction
          CFI (cfiPicker139) Picker
        MOV     DPTR,#gBIND_REC_SIZE
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R1,A
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V0,A
        MOV     A,R0
        MOV     B,?V0
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,?V0
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2
        RET
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiPicker139
// 1322 #endif // !DONT_UPGRADE_BIND
// 1323 
// 1324 /*********************************************************************
// 1325  * @fn          BindRestoreFromNV
// 1326  *
// 1327  * @brief       Restore the binding table from NV
// 1328  *
// 1329  * @param       none
// 1330  *
// 1331  * @return      Number of entries restored
// 1332  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1333 uint16 BindRestoreFromNV( void )
BindRestoreFromNV:
          CFI Block cfiBlock140 Using cfiCommon0
          CFI Function BindRestoreFromNV
        CODE
// 1334 {
        FUNCALL BindRestoreFromNV, BindUpgradeTableInNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 1335   nvBindingHdr_t hdr;
// 1336 
// 1337   hdr.numRecs = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1338 
// 1339 #if !defined ( DONT_UPGRADE_BIND )
// 1340   if ( BindUpgradeTableInNV() == ZSuccess )
        ; Setup parameters for call to function BindUpgradeTableInNV
        LCALL   `??BindUpgradeTableInNV::?relay`; Banked call to: BindUpgradeTableInNV
        MOV     A,R1
        JZ      $+5
        LJMP    ??BindRestoreFromNV_0 & 0xFFFF
// 1341 #endif
// 1342   {
// 1343     if ( osal_nv_read( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr ) == ZSuccess )
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R1
        JNZ     ??BindRestoreFromNV_0
// 1344     {
// 1345       bindTableIndex_t x;
// 1346       uint16 validRecsCount = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
// 1347 
// 1348       // Read in the device list
// 1349       for ( x = 0; ( x < gNWK_MAX_BINDING_ENTRIES ) && ( validRecsCount < hdr.numRecs ); x++ )
        MOV     ?V0,#0x0
        SJMP    ??BindRestoreFromNV_1
// 1350       {
// 1351         if ( osal_nv_read( ZCD_NV_BINDING_TABLE,
// 1352                            (uint16)(sizeof(nvBindingHdr_t) + (x * NV_BIND_REC_SIZE)),
// 1353                            NV_BIND_REC_SIZE, &BindingTable[x] ) == ZSUCCESS )
??BindRestoreFromNV_2:
        MOV     A,?V0
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     ?V2,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V3,A
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     DPTR,#gBIND_REC_SIZE
        LCALL   ?PUSH_XSTACK8_C_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R1
        JNZ     ??BindRestoreFromNV_3
// 1354         {
// 1355           if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        CPL     A
        JZ      ??BindRestoreFromNV_3
// 1356           {
// 1357             validRecsCount++;
        INC     R6
        MOV     A,R6
        JNZ     ??BindRestoreFromNV_3
        INC     R7
// 1358           }
// 1359         }
// 1360       }
??BindRestoreFromNV_3:
        INC     ?V0
??BindRestoreFromNV_1:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,?V0
        CLR     C
        SUBB    A,R0
        JNC     ??BindRestoreFromNV_0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine22 & 0xFFFF
// 1361     }
// 1362   }
??CrossCallReturnLabel_33:
        CLR     C
        MOV     A,R6
        SUBB    A,R0
        MOV     A,R7
        SUBB    A,R1
        JC      ??BindRestoreFromNV_2
// 1363   return ( hdr.numRecs );
??BindRestoreFromNV_0:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_61:
        LJMP    ?Subroutine3 & 0xFFFF
// 1364 }
          CFI EndBlock cfiBlock140

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond141 Using cfiCommon0
          CFI Function BindCopyBackupToNewNV
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function BindRestoreFromNV
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-2
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker143 Using cfiCommon1
          CFI (cfiPicker143) NoFunction
          CFI (cfiPicker143) Picker
        MOV     R0,?V0
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_39:
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        RET
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiPicker143

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond144 Using cfiCommon0
          CFI Function BindCopyBackupToNewNV
          CFI Conditional ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function BindCopyBackupToNewNV
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_2
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-4
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function BindRestoreFromNV
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_3
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-4
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker147 Using cfiCommon1
          CFI (cfiPicker147) NoFunction
          CFI (cfiPicker147) Picker
        MOV     DPTR,#gBIND_REC_SIZE
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V4,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     ?V5,A
        MOV     A,R0
        MOV     B,?V4
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,?V5
        MUL     AB
        ADD     A,R2
        RET
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiPicker147
// 1365 
// 1366 /*********************************************************************
// 1367  * @fn          BindWriteNV
// 1368  *
// 1369  * @brief       Save the Binding Table in NV
// 1370  *
// 1371  * @param       none
// 1372  *
// 1373  * @return      none
// 1374  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1375 void BindWriteNV( void )
BindWriteNV:
          CFI Block cfiBlock148 Using cfiCommon0
          CFI Function BindWriteNV
        CODE
// 1376 {
        FUNCALL BindWriteNV, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindWriteNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindWriteNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1377   BindingEntry_t *pBind;
// 1378   BindingEntry_t bind;
// 1379   nvBindingHdr_t hdr;
// 1380   bindTableIndex_t x;
// 1381 
// 1382   hdr.numRecs = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1383 
// 1384   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     R6,#0x0
        SJMP    ??BindWriteNV_0
// 1385   {
// 1386     pBind = &BindingTable[x];
??BindWriteNV_1:
        MOV     A,R6
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     ?V0,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V1,A
// 1387 
// 1388     osal_memcpy( &bind, pBind, gBIND_REC_SIZE );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,?V0
        MOV     ?V5,A
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 34)
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1389 
// 1390     // Save the record to NV
// 1391     osal_nv_write( ZCD_NV_BINDING_TABLE,
// 1392                    (uint16)((sizeof(nvBindingHdr_t)) + (x * NV_BIND_REC_SIZE)),
// 1393                    NV_BIND_REC_SIZE, &bind );
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     DPTR,#gBIND_REC_SIZE
        LCALL   ?PUSH_XSTACK8_C_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     A,R6
        MOV     R0,A
        MOV     DPTR,#gBIND_REC_SIZE
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V2,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     ?V3,A
        MOV     A,R0
        MOV     B,?V2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,?V3
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_58:
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1394 
// 1395     if ( pBind->srcEP != NV_BIND_EMPTY )
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        CPL     A
        JZ      ??CrossCallReturnLabel_35
// 1396     {
// 1397       hdr.numRecs++;
        LCALL   ?Subroutine23 & 0xFFFF
// 1398     }
// 1399   }
??CrossCallReturnLabel_35:
        INC     R6
??BindWriteNV_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        JC      ??BindWriteNV_1
// 1400 
// 1401   // Save off the header
// 1402   osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1403 }
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock148

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond149 Using cfiCommon0
          CFI Function BindCopyBackupToNewNV
          CFI Conditional ??CrossCallReturnLabel_34
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function BindWriteNV
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-2
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker151 Using cfiCommon1
          CFI (cfiPicker151) NoFunction
          CFI (cfiPicker151) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiPicker151

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??InitBindingTable::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    InitBindingTable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindFindEmpty::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindFindEmpty

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindNumOfEntries::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindNumOfEntries

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindCapacity::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindCapacity

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindAddEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindAddEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindRemoveEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindRemoveEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindIsClusterIDinList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindIsClusterIDinList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindRemoveClusterIdFromList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindRemoveClusterIdFromList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindAddClusterIdToList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindAddClusterIdToList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindFindExisting::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindFindExisting

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindRemoveDev::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindRemoveDev

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindRemoveSrcDev::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindRemoveSrcDev

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindNumBoundTo::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindNumBoundTo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindNumReflections::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindNumReflections

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindFind::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindFind

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindAddressClear::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindAddressClear

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindUpdateAddr::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindUpdateAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindingAddrMgsHelperFind::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindingAddrMgsHelperFind

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindingAddrMgsHelperConvert::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindingAddrMgsHelperConvert

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindingAddrMgsHelperConvertShort::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindingAddrMgsHelperConvertShort

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindAddrMgrLocalLoad::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindAddrMgrLocalLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindAddrIndexGet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindAddrIndexGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??GetBindingTableEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GetBindingTableEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BindInitNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindInitNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BindSetDefaultNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindSetDefaultNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BindCopyBackupToNewNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindCopyBackupToNewNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BindUpgradeTableInNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindUpgradeTableInNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BindRestoreFromNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindRestoreFromNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BindWriteNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindWriteNV

        END
// 1404 
// 1405 #else // !BINDINGTABLE_NV_SINGLES
// 1406 /*********************************************************************
// 1407  * @fn          BindInitNV
// 1408  *
// 1409  * @brief       Initialize the Binding NV Item
// 1410  *
// 1411  * @param       none
// 1412  *
// 1413  * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
// 1414  *              exist in NV, NV_OPER_FAILED if failure.
// 1415  */
// 1416 byte BindInitNV( void )
// 1417 {
// 1418   bindTableIndex_t x;
// 1419 
// 1420   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
// 1421   {
// 1422     // Initialize each binding record
// 1423     osal_nv_item_init_ex( ZCD_NV_EX_BINDING_TABLE, x, NV_BIND_REC_SIZE, NULL );
// 1424   }
// 1425   return ( ZSUCCESS );
// 1426 }
// 1427 
// 1428 /*********************************************************************
// 1429  * @fn          BindSetDefaultNV
// 1430  *
// 1431  * @brief       Write the defaults to NV
// 1432  *
// 1433  * @param       none
// 1434  *
// 1435  * @return      none
// 1436  */
// 1437 void BindSetDefaultNV( void )
// 1438 {
// 1439   BindingEntry_t bind;
// 1440   bindTableIndex_t x;
// 1441 
// 1442   // Initialize a binding record
// 1443   osal_memset( &bind, 0xFF, sizeof ( BindingEntry_t ) );
// 1444 
// 1445   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
// 1446   {
// 1447     // Over write each binding record with an "empty" record
// 1448     osal_nv_write_ex( ZCD_NV_EX_BINDING_TABLE, x, 0, NV_BIND_REC_SIZE, &bind );
// 1449   }
// 1450 }
// 1451 
// 1452 /*********************************************************************
// 1453  * @fn          BindRestoreFromNV
// 1454  *
// 1455  * @brief       Restore the binding table from NV
// 1456  *
// 1457  * @param       none
// 1458  *
// 1459  * @return      Number of entries restored (non-emtpy)
// 1460  */
// 1461 uint16 BindRestoreFromNV( void )
// 1462 {
// 1463   bindTableIndex_t x;
// 1464   uint16 validRecsCount = 0;
// 1465 
// 1466   // Read in the device list
// 1467   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
// 1468   {
// 1469     if ( osal_nv_read_ex( ZCD_NV_EX_BINDING_TABLE, x, 0,
// 1470                      (uint16)NV_BIND_REC_SIZE, &BindingTable[x] ) == ZSUCCESS )
// 1471     {
// 1472       // Check for non-empty record
// 1473       if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
// 1474       {
// 1475         // Count non-empty records
// 1476         validRecsCount++;
// 1477       }
// 1478     }
// 1479   }
// 1480   return ( validRecsCount );
// 1481 }
// 1482 
// 1483 /*********************************************************************
// 1484  * @fn          BindWriteNV
// 1485  *
// 1486  * @brief       Copy the Binding Table in NV
// 1487  *
// 1488  * @param       none
// 1489  *
// 1490  * @return      none
// 1491  */
// 1492 void BindWriteNV( void )
// 1493 {
// 1494   bindTableIndex_t x;
// 1495 
// 1496   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
// 1497   {
// 1498     // Save the record to NV
// 1499     osal_nv_write_ex( ZCD_NV_EX_BINDING_TABLE, x, 0,
// 1500                      (uint16)NV_BIND_REC_SIZE, &BindingTable[x] );
// 1501   }
// 1502 }
// 1503 #endif // BINDINGTABLE_NV_SINGLES
// 1504 
// 1505 /*********************************************************************
// 1506 *********************************************************************/
// 
// 3 849 bytes in segment BANKED_CODE
//   174 bytes in segment BANK_RELAYS
//    15 bytes in segment XDATA_Z
// 
// 4 023 bytes of CODE  memory
//    15 bytes of XDATA memory
//
//Errors: none
//Warnings: none
