///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               26/Oct/2017  14:48:35
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
//        Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c"
//        -D BDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D
//        NV_RESTORE -D xPOWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK
//        -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
//        xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
//        ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D
//        ZCL_SCENES -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -lC "C:\Texas
//        Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
//        -lA "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
//        Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
//        "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List\zcl_samplelight.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_samplelight

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zclSampleLight_BasicResetCB::?relay`,0203H
        PUBLIC `??zclSampleLight_Init::?relay`
        FUNCTION `??zclSampleLight_Init::?relay`,0203H
        FUNCTION `??zclSampleLight_OnOffCB::?relay`,0203H
        FUNCTION `??zclSampleLight_ProcessCommissioningStatus::?r`,0203H
        PUBLIC `??zclSampleLight_UiActionToggleLight::?relay`
        FUNCTION `??zclSampleLight_UiActionToggleLight::?relay`,0203H
        PUBLIC `??zclSampleLight_UiUpdateLcd::?relay`
        FUNCTION `??zclSampleLight_UiUpdateLcd::?relay`,0203H
        PUBLIC `??zclSampleLight_UpdateLedState::?relay`
        FUNCTION `??zclSampleLight_UpdateLedState::?relay`,0203H
        PUBLIC `??zclSampleLight_event_loop::?relay`
        FUNCTION `??zclSampleLight_event_loop::?relay`,0203H
        PUBWEAK __Constant_2710
        PUBLIC sLightOff
        PUBLIC sLightOn
        PUBLIC zclSampleLightSeqNum
        FUNCTION zclSampleLight_BasicResetCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleLight_DstAddr
        PUBLIC zclSampleLight_Init
        FUNCTION zclSampleLight_Init,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        FUNCTION zclSampleLight_OnOffCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION zclSampleLight_ProcessCommissioningStatus,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC zclSampleLight_TaskID
        PUBLIC zclSampleLight_UiActionToggleLight
        FUNCTION zclSampleLight_UiActionToggleLight,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleLight_UiStatesMain
        PUBLIC zclSampleLight_UiUpdateLcd
        FUNCTION zclSampleLight_UiUpdateLcd,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleLight_UpdateLedState
        FUNCTION zclSampleLight_UpdateLedState,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleLight_event_loop
        FUNCTION zclSampleLight_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
`?<Name UI_ActionBackFromApp 4>` SYMBOL "UI_ActionBackFromAppMenu"
`??UI_ActionBackFromAppMenu::?relay` SYMBOL "?relay", `?<Name UI_ActionBackFromApp 4>`
UI_DeviceStateUpdated SYMBOL "UI_DeviceStateUpdated"
`??UI_DeviceStateUpdated::?relay` SYMBOL "?relay", UI_DeviceStateUpdated
UI_Init             SYMBOL "UI_Init"
`??UI_Init::?relay` SYMBOL "?relay", UI_Init
UI_MainStateMachine SYMBOL "UI_MainStateMachine"
`??UI_MainStateMachine::?relay` SYMBOL "?relay", UI_MainStateMachine
UI_UpdateComissioningStatus SYMBOL "UI_UpdateComissioningStatus"
`??UI_UpdateComissioningStatus::?relay` SYMBOL "?relay", UI_UpdateComissioningStatus
UI_UpdateLcd        SYMBOL "UI_UpdateLcd"
`??UI_UpdateLcd::?relay` SYMBOL "?relay", UI_UpdateLcd
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
bdb_RegisterCommissioningStatusCB SYMBOL "bdb_RegisterCommissioningStatusCB"
`??bdb_RegisterCommissioningStatusCB::?relay` SYMBOL "?relay", bdb_RegisterCommissioningStatusCB
bdb_RegisterSimpleDescriptor SYMBOL "bdb_RegisterSimpleDescriptor"
`??bdb_RegisterSimpleDescriptor::?relay` SYMBOL "?relay", bdb_RegisterSimpleDescriptor
bdb_StartCommissioning SYMBOL "bdb_StartCommissioning"
`??bdb_StartCommissioning::?relay` SYMBOL "?relay", bdb_StartCommissioning
bdb_ZedAttemptRecoverNwk SYMBOL "bdb_ZedAttemptRecoverNwk"
`??bdb_ZedAttemptRecoverNwk::?relay` SYMBOL "?relay", bdb_ZedAttemptRecoverNwk
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclSampleLight_ResetAttributesToDefaultValues SYMBOL "zclSampleLight_ResetAttributesToDefaultValues"
??zclSampleLight_ResetAttributesToDefaultValues SYMBOL "?relay", zclSampleLight_ResetAttributesToDefaultValues
zcl_getRawAFMsg     SYMBOL "zcl_getRawAFMsg"
`??zcl_getRawAFMsg::?relay` SYMBOL "?relay", zcl_getRawAFMsg
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zclSampleLight_Init SYMBOL "zclSampleLight_Init"
`??zclSampleLight_Init::?relay` SYMBOL "?relay", zclSampleLight_Init
zclSampleLight_UiActionToggleLight SYMBOL "zclSampleLight_UiActionToggleLight"
`??zclSampleLight_UiActionToggleLight::?relay` SYMBOL "?relay", zclSampleLight_UiActionToggleLight
zclSampleLight_UiUpdateLcd SYMBOL "zclSampleLight_UiUpdateLcd"
`??zclSampleLight_UiUpdateLcd::?relay` SYMBOL "?relay", zclSampleLight_UiUpdateLcd
zclSampleLight_UpdateLedState SYMBOL "zclSampleLight_UpdateLedState"
`??zclSampleLight_UpdateLedState::?relay` SYMBOL "?relay", zclSampleLight_UpdateLedState
zclSampleLight_event_loop SYMBOL "zclSampleLight_event_loop"
`??zclSampleLight_event_loop::?relay` SYMBOL "?relay", zclSampleLight_event_loop

        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??UI_ActionBackFromAppMenu::?relay`
        FUNCTION `??UI_ActionBackFromAppMenu::?relay`,00H
        EXTERN `??UI_DeviceStateUpdated::?relay`
        FUNCTION `??UI_DeviceStateUpdated::?relay`,00H
        EXTERN `??UI_Init::?relay`
        FUNCTION `??UI_Init::?relay`,00H
        EXTERN `??UI_MainStateMachine::?relay`
        FUNCTION `??UI_MainStateMachine::?relay`,00H
        EXTERN `??UI_UpdateComissioningStatus::?relay`
        FUNCTION `??UI_UpdateComissioningStatus::?relay`,00H
        EXTERN `??UI_UpdateLcd::?relay`
        FUNCTION `??UI_UpdateLcd::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??bdb_RegisterCommissioningStatusCB::?relay`
        FUNCTION `??bdb_RegisterCommissioningStatusCB::?relay`,00H
        EXTERN `??bdb_RegisterSimpleDescriptor::?relay`
        FUNCTION `??bdb_RegisterSimpleDescriptor::?relay`,00H
        EXTERN `??bdb_StartCommissioning::?relay`
        FUNCTION `??bdb_StartCommissioning::?relay`,00H
        EXTERN `??bdb_ZedAttemptRecoverNwk::?relay`
        FUNCTION `??bdb_ZedAttemptRecoverNwk::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN ??zclSampleLight_ResetAttributesToDefaultValues
        FUNCTION ??zclSampleLight_ResetAttributesToDefaultValues,00H
        EXTERN `??zcl_getRawAFMsg::?relay`
        FUNCTION `??zcl_getRawAFMsg::?relay`,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UI_DeviceStateUpdated
        FUNCTION UI_DeviceStateUpdated,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UI_Init
        FUNCTION UI_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UI_MainStateMachine
        FUNCTION UI_MainStateMachine,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UI_UpdateComissioningStatus
        FUNCTION UI_UpdateComissioningStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UI_UpdateLcd
        FUNCTION UI_UpdateLcd,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterCommissioningStatusCB
        FUNCTION bdb_RegisterCommissioningStatusCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterSimpleDescriptor
        FUNCTION bdb_RegisterSimpleDescriptor,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_StartCommissioning
        FUNCTION bdb_StartCommissioning,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_ZedAttemptRecoverNwk
        FUNCTION bdb_ZedAttemptRecoverNwk,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleLight_Attrs
        EXTERN zclSampleLight_IdentifyTime
        EXTERN zclSampleLight_NumAttributes
        EXTERN zclSampleLight_OnOff
        EXTERN zclSampleLight_ResetAttributesToDefaultValues
        FUNCTION zclSampleLight_ResetAttributesToDefaultValues,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleLight_SimpleDesc
        EXTERN zcl_getRawAFMsg
        FUNCTION zcl_getRawAFMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zdpExternalStateTaskID

// C:\Texas Instruments\Z-Stack 3.0.0\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_sampleLight.c
//    3   Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4   Revision:       $Revision: 40796 $
//    5 
//    6 
//    7   Description:    Zigbee Cluster Library - sample light application.
//    8 
//    9 
//   10   Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42   This application implements a ZigBee Light, based on Z-Stack 3.0. It can be configured as an
//   43   On/Off light or as a dimmable light, by undefining or defining ZCL_LEVEL_CTRL, respectively.
//   44 
//   45   This application is based on the common sample-application user interface. Please see the main
//   46   comment in zcl_sampleapp_ui.c. The rest of this comment describes only the content specific for
//   47   this sample applicetion.
//   48   
//   49   Application-specific UI peripherals being used:
//   50 
//   51   - LEDs:
//   52     LED1 reflect the current light state (On / Off accordingly).
//   53 
//   54   Application-specific menu system:
//   55 
//   56     <TOGGLE LIGHT> Toggle the local light and display its status and level
//   57       Press OK to toggle the local light on and off.
//   58       This screen shows the following information
//   59         Line1: (only populated if ZCL_LEVEL_CTRL is defined)
//   60           LEVEL XXX - xxx is the current level of the light if the light state is ON, or the target level
//   61             of the light when the light state is off. The target level is the level that the light will be
//   62             set to when it is switched from off to on using the on or the toggle commands.
//   63         Line2:
//   64           LIGHT OFF / ON: shows the current state of the light.
//   65       Note when ZCL_LEVEL_CTRL is enabled:
//   66         - If the light state is ON and the light level is X, and then the light receives the OFF or TOGGLE 
//   67           commands: The level will decrease gradually until it reaches 1, and only then the light state will
//   68           be changed to OFF. The level then will be restored to X, with the state staying OFF. At this stage
//   69           the light is not lighting, and the level represent the target level for the next ON or TOGGLE 
//   70           commands.
//   71         - If the light state is OFF and the light level is X, and then the light receives the ON or TOGGLE
//   72           commands; The level will be set to 1, the light state will be set to ON, and then the level will
//   73           increase gradually until it reaches level X.
//   74         - Any level-setting command will affect the level directly, and may also affect the on/off state,
//   75           depending on the command's arguments.       
//   76 
//   77 *********************************************************************/
//   78 
//   79 /*********************************************************************
//   80  * INCLUDES
//   81  */
//   82 #include "ZComDef.h"
//   83 #include "OSAL.h"
//   84 #include "AF.h"
//   85 #include "ZDApp.h"
//   86 #include "ZDObject.h"
//   87 #include "MT_SYS.h"
//   88 
//   89 #include "nwk_util.h"
//   90 
//   91 #include "zcl.h"
//   92 #include "zcl_general.h"
//   93 #include "zcl_ha.h"
//   94 #include "zcl_diagnostic.h"
//   95 
//   96 #include "zcl_samplelight.h"
//   97    
//   98 #include "bdb.h"
//   99 #include "bdb_interface.h"
//  100 
//  101  //GP_UPDATE
//  102 #include "gp_interface.h"
//  103    
//  104 #include "onboard.h"
//  105 
//  106 /* HAL */
//  107 #include "hal_lcd.h"
//  108 #include "hal_led.h"
//  109 #include "hal_key.h"
//  110 
//  111 #include "NLMEDE.h"
//  112 
//  113 // Added to include TouchLink initiator functionality 
//  114 #if defined ( BDB_TL_INITIATOR )
//  115   #include "bdb_touchlink_initiator.h"
//  116 #endif // BDB_TL_INITIATOR
//  117 
//  118 #if defined ( BDB_TL_TARGET )
//  119   #include "bdb_touchlink_target.h"
//  120 #endif // BDB_TL_TARGET
//  121 
//  122 #if defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET )
//  123   #include "bdb_touchlink.h"
//  124 #endif
//  125 
//  126 #include "zcl_sampleapps_ui.h"
//  127 
//  128 /*********************************************************************
//  129  * MACROS
//  130  */
//  131 #define UI_STATE_TOGGLE_LIGHT 1 //UI_STATE_BACK_FROM_APP_MENU is item #0, so app item numbers should start from 1
//  132 
//  133 #define APP_TITLE "TI Sample Light"
//  134 
//  135 /*********************************************************************
//  136  * TYPEDEFS
//  137  */
//  138 
//  139 /*********************************************************************
//  140  * GLOBAL VARIABLES
//  141  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  142 byte zclSampleLight_TaskID;
zclSampleLight_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  143 uint8 zclSampleLightSeqNum;
zclSampleLightSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  144 
//  145 /*********************************************************************
//  146  * GLOBAL FUNCTIONS
//  147  */
//  148 extern void TestingDecrypt(void);
//  149 /*********************************************************************
//  150  * LOCAL VARIABLES
//  151  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  152 afAddrType_t zclSampleLight_DstAddr;
zclSampleLight_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  153 
//  154 // Test Endpoint to allow SYS_APP_MSGs

        RSEG XDATA_I:XDATA:NOROOT(0)
//  155 static endPointDesc_t sampleLight_TestEp =
sampleLight_TestEp:
        DATA8
        DS 7
        REQUIRE `?<Initializer for sampleLight_TestEp>`
        REQUIRE __INIT_XDATA_I
//  156 {
//  157   SAMPLELIGHT_ENDPOINT,
//  158   0,
//  159   &zclSampleLight_TaskID,
//  160   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  161   (afNetworkLatencyReq_t)0            // No Network Latency req
//  162 };
//  163 
//  164 #ifdef ZCL_LEVEL_CTRL
//  165 uint8 zclSampleLight_WithOnOff;       // set to TRUE if state machine should set light on/off
//  166 uint8 zclSampleLight_NewLevel;        // new level when done moving
//  167 uint8 zclSampleLight_LevelChangeCmd; // current level change was triggered by an on/off command
//  168 bool  zclSampleLight_NewLevelUp;      // is direction to new level up or down?
//  169 int32 zclSampleLight_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
//  170 int32 zclSampleLight_Rate32;          // rate in units, fixed point (e.g. 16.123)
//  171 uint8 zclSampleLight_LevelLastLevel;  // to save the Current Level before the light was turned OFF
//  172 #endif
//  173 
//  174 /*********************************************************************
//  175  * LOCAL FUNCTIONS
//  176  */
//  177 static void zclSampleLight_HandleKeys( byte shift, byte keys );
//  178 static void zclSampleLight_BasicResetCB( void );
//  179 static void zclSampleLight_OnOffCB( uint8 cmd );
//  180 //GP_UPDATE
//  181 #if (ZG_BUILD_RTR_TYPE)
//  182 static void gp_CommissioningMode(bool isEntering);
//  183 static uint8 gp_ChangeChannelReq(void);
//  184 #endif
//  185 
//  186 
//  187 static void zclSampleLight_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg);
//  188 
//  189 
//  190 #ifdef ZCL_LEVEL_CTRL
//  191 static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
//  192 static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd );
//  193 static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd );
//  194 static void zclSampleLight_LevelControlStopCB( void );
//  195 static void zclSampleLight_DefaultMove( uint8 OnOff );
//  196 static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel );
//  197 static uint16 zclSampleLight_GetTime ( uint8 level, uint16 time );
//  198 static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate );
//  199 static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time );
//  200 static void zclSampleLight_AdjustLightLevel( void );
//  201 #endif
//  202 
//  203 // Functions to process ZCL Foundation incoming Command/Response messages
//  204 static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  205 #ifdef ZCL_READ
//  206 static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  207 #endif
//  208 #ifdef ZCL_WRITE
//  209 static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  210 #endif
//  211 static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  212 #ifdef ZCL_DISCOVER
//  213 static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  214 static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  215 static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  216 #endif
//  217 
//  218 void zclSampleLight_UiActionToggleLight(uint16 keys);
//  219 void zclSampleLight_UiUpdateLcd(uint8 uiCurrentState, char * line[3]);
//  220 void zclSampleLight_UpdateLedState(void);
//  221 
//  222 /*********************************************************************
//  223  * CONSTANTS
//  224  */

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  225 const uiState_t zclSampleLight_UiStatesMain[] = 
zclSampleLight_UiStatesMain:
        DB 254
        DB 1
        DATA16
        DW 4
        DW `??UI_ActionBackFromAppMenu::?relay`
        DATA8
        DB 0
        DB 254
        DATA16
        DW 4
        DW `??zclSampleLight_UiActionToggleLight::?relay`
//  226 {
//  227   /*  UI_STATE_BACK_FROM_APP_MENU  */   {UI_STATE_DEFAULT_MOVE,       UI_STATE_TOGGLE_LIGHT,  UI_KEY_SW_5_PRESSED, &UI_ActionBackFromAppMenu}, //do not change this line, except for the second item, which should point to the last entry in this menu
//  228   /*  UI_STATE_TOGGLE_LIGHT        */   {UI_STATE_BACK_FROM_APP_MENU, UI_STATE_DEFAULT_MOVE,  UI_KEY_SW_5_PRESSED, &zclSampleLight_UiActionToggleLight},
//  229 };
//  230 
//  231 #define LEVEL_CHANGED_BY_LEVEL_CMD  0
//  232 #define LEVEL_CHANGED_BY_ON_CMD     1
//  233 #define LEVEL_CHANGED_BY_OFF_CMD    2
//  234 
//  235 /*********************************************************************
//  236  * STATUS STRINGS
//  237  */
//  238 #ifdef LCD_SUPPORTED

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  239   const char sLightOn[]      = "   LIGHT ON     ";
sLightOn:
        DB "   LIGHT ON     "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  240   const char sLightOff[]     = "   LIGHT OFF    ";
sLightOff:
        DB "   LIGHT OFF    "
//  241   #ifdef ZCL_LEVEL_CTRL
//  242     char sLightLevel[]        = "   LEVEL ###    "; // displays level 1-254
//  243   #endif
//  244 #endif
//  245 
//  246 /*********************************************************************
//  247  * REFERENCED EXTERNALS
//  248  */
//  249 extern int16 zdpExternalStateTaskID;
//  250 
//  251 /*********************************************************************
//  252  * ZCL General Profile Callback table
//  253  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  254 static zclGeneral_AppCallbacks_t zclSampleLight_CmdCallbacks =
zclSampleLight_CmdCallbacks:
        DATA8
        DS 24
        REQUIRE `?<Initializer for zclSampleLight_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  255 {
//  256   zclSampleLight_BasicResetCB,            // Basic Cluster Reset command
//  257   NULL,                                   // Identify Trigger Effect command
//  258   zclSampleLight_OnOffCB,                 // On/Off cluster commands
//  259   NULL,                                   // On/Off cluster enhanced command Off with Effect
//  260   NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
//  261   NULL,                                   // On/Off cluster enhanced command On with Timed Off
//  262 #ifdef ZCL_LEVEL_CTRL
//  263   zclSampleLight_LevelControlMoveToLevelCB, // Level Control Move to Level command
//  264   zclSampleLight_LevelControlMoveCB,        // Level Control Move command
//  265   zclSampleLight_LevelControlStepCB,        // Level Control Step command
//  266   zclSampleLight_LevelControlStopCB,        // Level Control Stop command
//  267 #endif
//  268 #ifdef ZCL_GROUPS
//  269   NULL,                                   // Group Response commands
//  270 #endif
//  271 #ifdef ZCL_SCENES
//  272   NULL,                                  // Scene Store Request command
//  273   NULL,                                  // Scene Recall Request command
//  274   NULL,                                  // Scene Response command
//  275 #endif
//  276 #ifdef ZCL_ALARMS
//  277   NULL,                                  // Alarm (Response) commands
//  278 #endif
//  279 #ifdef SE_UK_EXT
//  280   NULL,                                  // Get Event Log command
//  281   NULL,                                  // Publish Event Log command
//  282 #endif
//  283   NULL,                                  // RSSI Location command
//  284   NULL                                   // RSSI Location Response command
//  285 };
//  286 
//  287 /*********************************************************************
//  288  * @fn          zclSampleLight_Init
//  289  *
//  290  * @brief       Initialization function for the zclGeneral layer.
//  291  *
//  292  * @param       none
//  293  *
//  294  * @return      none
//  295  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  296 void zclSampleLight_Init( byte task_id )
zclSampleLight_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclSampleLight_Init
        CODE
//  297 {
        FUNCALL zclSampleLight_Init, bdb_RegisterSimpleDescriptor
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zclSampleLight_ResetAttributesToDefaultValues
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, bdb_RegisterCommissioningStatusCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, UI_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, UI_UpdateLcd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
//  298   zclSampleLight_TaskID = task_id;
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    @DPTR,A
//  299 
//  300   // Set destination address to indirect
//  301   zclSampleLight_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#zclSampleLight_DstAddr + 8
        CLR     A
        MOVX    @DPTR,A
//  302   zclSampleLight_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  303   zclSampleLight_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#zclSampleLight_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  304 
//  305   // Register the Simple Descriptor for this application
//  306   bdb_RegisterSimpleDescriptor( &zclSampleLight_SimpleDesc );
        ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
        MOV     R2,#zclSampleLight_SimpleDesc & 0xff
        MOV     R3,#(zclSampleLight_SimpleDesc >> 8) & 0xff
        LCALL   `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
//  307 
//  308   // Register the ZCL General Cluster Library callback functions
//  309   zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zclSampleLight_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV     R2,#zclSampleLight_CmdCallbacks & 0xff
        MOV     R3,#(zclSampleLight_CmdCallbacks >> 8) & 0xff
        MOV     R1,#0x8
        LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  310 
//  311   // Register the application's attribute list
//  312   zclSampleLight_ResetAttributesToDefaultValues();
        ; Setup parameters for call to function zclSampleLight_ResetAttributesToDefaultValues
        LCALL   ??zclSampleLight_ResetAttributesToDefaultValues; Banked call to: zclSampleLight_ResetAttributesToDefaultValues
//  313   zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zclSampleLight_NumAttributes, zclSampleLight_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R4,#zclSampleLight_Attrs & 0xff
        MOV     R5,#(zclSampleLight_Attrs >> 8) & 0xff
        MOV     DPTR,#zclSampleLight_NumAttributes
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        MOV     R1,#0x8
        LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  314 
//  315 #ifdef ZCL_LEVEL_CTRL
//  316   zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
//  317 #endif
//  318 
//  319   // Register the Application to receive the unprocessed Foundation command/response messages
//  320   zcl_registerForMsg( zclSampleLight_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  321 
//  322 #ifdef ZCL_DISCOVER
//  323   // Register the application's command list
//  324   zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zclSampleLight_Cmds );
//  325 #endif
//  326 
//  327   // Register for all key events - This app will handle all key events
//  328   RegisterForKeys( zclSampleLight_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  329   
//  330   bdb_RegisterCommissioningStatusCB( zclSampleLight_ProcessCommissioningStatus );
        ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
        MOV     R2,#`??zclSampleLight_ProcessCommissioningStatus::?r` & 0xff
        MOV     R3,#(`??zclSampleLight_ProcessCommissioningStatus::?r` >> 8) & 0xff
        LCALL   `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
//  331   
//  332   // Register for a test endpoint
//  333   afRegister( &sampleLight_TestEp );
        ; Setup parameters for call to function afRegister
        MOV     R2,#sampleLight_TestEp & 0xff
        MOV     R3,#(sampleLight_TestEp >> 8) & 0xff
        LCALL   `??afRegister::?relay`; Banked call to: afRegister
//  334 
//  335 #ifdef ZCL_DIAGNOSTIC
//  336   // Register the application's callback function to read/write attribute data.
//  337   // This is only required when the attribute data format is unknown to ZCL.
//  338   zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
//  339 
//  340   if ( zclDiagnostic_InitStats() == ZSuccess )
//  341   {
//  342     // Here the user could start the timer to save Diagnostics to NV
//  343   }
//  344 #endif
//  345   
//  346 //GP_UPDATE  
//  347 #if (ZG_BUILD_RTR_TYPE)  
//  348   gp_RegisterCommissioningModeCB(gp_CommissioningMode);
//  349   gp_RegisterGPChangeChannelReqCB(gp_ChangeChannelReq);
//  350 #endif
//  351   
//  352   zdpExternalStateTaskID = zclSampleLight_TaskID;
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     DPTR,#zdpExternalStateTaskID
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  353 
//  354   UI_Init(zclSampleLight_TaskID, SAMPLEAPP_LCD_AUTO_UPDATE_EVT, SAMPLEAPP_KEY_AUTO_REPEAT_EVT, &zclSampleLight_IdentifyTime, APP_TITLE, &zclSampleLight_UiUpdateLcd, zclSampleLight_UiStatesMain);
        ; Setup parameters for call to function UI_Init
        MOV     ?V0,#zclSampleLight_UiStatesMain & 0xff
        MOV     ?V1,#(zclSampleLight_UiStatesMain >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#`??zclSampleLight_UiUpdateLcd::?relay` & 0xff
        MOV     ?V1,#(`??zclSampleLight_UiUpdateLcd::?relay` >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0,#`?<Constant "TI Sample Light">` & 0xff
        MOV     ?V1,#(`?<Constant "TI Sample Light">` >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V0,#zclSampleLight_IdentifyTime & 0xff
        MOV     ?V1,#(zclSampleLight_IdentifyTime >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??UI_Init::?relay`  ; Banked call to: UI_Init
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
//  355 
//  356   UI_UpdateLcd();
          CFI EndBlock cfiBlock0
        ; Setup parameters for call to function UI_UpdateLcd
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  357 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  358 
//  359 /*********************************************************************
//  360  * @fn          zclSample_event_loop
//  361  *
//  362  * @brief       Event Loop Processor for zclGeneral.
//  363  *
//  364  * @param       none
//  365  *
//  366  * @return      none
//  367  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  368 uint16 zclSampleLight_event_loop( uint8 task_id, uint16 events )
zclSampleLight_event_loop:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
        CODE
//  369 {
        FUNCALL zclSampleLight_event_loop, bdb_ZedAttemptRecoverNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, UI_DeviceStateUpdated
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, UI_MainStateMachine
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, UI_UpdateLcd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, UI_MainStateMachine
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  370   afIncomingMSGPacket_t *MSGpkt;
//  371 
//  372   (void)task_id;  // Intentionally unreferenced parameter
//  373 
//  374   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     ??zclSampleLight_event_loop_0
//  375   {
//  376     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleLight_TaskID )) )
//  377     {
//  378       switch ( MSGpkt->hdr.event )
//  379       {
//  380         case ZCL_INCOMING_MSG:
//  381           // Incoming ZCL Foundation command/response messages
//  382           zclSampleLight_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  383           break;
//  384 
//  385         case KEY_CHANGE:
//  386           zclSampleLight_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  387           break;
//  388 
//  389         case ZDO_STATE_CHANGE:
//  390           UI_DeviceStateUpdated((devStates_t)(MSGpkt->hdr.status));
//  391           break;
//  392 
//  393         default:
//  394           break;
//  395       }
//  396 
//  397       // Release the memory
//  398       osal_msg_deallocate( (uint8 *)MSGpkt );
//  399     }
//  400 
//  401     // return unprocessed events
//  402     return (events ^ SYS_EVENT_MSG);
//  403   }
//  404 
//  405 #ifdef ZCL_LEVEL_CTRL
//  406   if ( events & SAMPLELIGHT_LEVEL_CTRL_EVT )
//  407   {
//  408     zclSampleLight_AdjustLightLevel();
//  409     return ( events ^ SAMPLELIGHT_LEVEL_CTRL_EVT );
//  410   }
//  411 #endif
//  412 
//  413 #if ZG_BUILD_ENDDEVICE_TYPE    
//  414   if ( events & SAMPLEAPP_END_DEVICE_REJOIN_EVT )
        MOV     A,R6
        ANL     A,#0x4
        JNZ     $+5
        LJMP    ??zclSampleLight_event_loop_1 & 0xFFFF
//  415   {
//  416     bdb_ZedAttemptRecoverNwk();
        ; Setup parameters for call to function bdb_ZedAttemptRecoverNwk
        LCALL   `??bdb_ZedAttemptRecoverNwk::?relay`; Banked call to: bdb_ZedAttemptRecoverNwk
//  417     return ( events ^ SAMPLEAPP_END_DEVICE_REJOIN_EVT );
        MOV     A,R6
        XRL     A,#0x4
        LJMP    ??zclSampleLight_event_loop_2 & 0xFFFF
//  418   }
??zclSampleLight_event_loop_3:
        ; Setup parameters for call to function UI_DeviceStateUpdated
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??UI_DeviceStateUpdated::?relay`; Banked call to: UI_DeviceStateUpdated
??zclSampleLight_event_loop_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zclSampleLight_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??zclSampleLight_event_loop_5
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x34
        JZ      ??zclSampleLight_event_loop_6
        ADD     A,#0x74
        JZ      ??zclSampleLight_event_loop_7
        ADD     A,#-0x11
        JZ      ??zclSampleLight_event_loop_3
        SJMP    ??zclSampleLight_event_loop_4
??zclSampleLight_event_loop_6:
        MOV     A,R2
        ADD     A,#0x17
        MOV     R0,A
        CLR     A
        ADDC    A,?V1
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
        JZ      ??zclSampleLight_event_loop_8
        ADD     A,#-0x3
        JNZ     ??zclSampleLight_event_loop_9
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_0:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JNC     ??zclSampleLight_event_loop_9
        INC     R0
        SJMP    ??CrossCallReturnLabel_0
??zclSampleLight_event_loop_8:
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        SJMP    ??zclSampleLight_event_loop_10
??zclSampleLight_event_loop_11:
        INC     R0
??zclSampleLight_event_loop_10:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JC      ??zclSampleLight_event_loop_11
??zclSampleLight_event_loop_9:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JZ      ??zclSampleLight_event_loop_4
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP    ??zclSampleLight_event_loop_4
??zclSampleLight_event_loop_7:
        ; Setup parameters for call to function UI_MainStateMachine
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   `??UI_MainStateMachine::?relay`; Banked call to: UI_MainStateMachine
        SJMP    ??zclSampleLight_event_loop_4
??zclSampleLight_event_loop_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        SJMP    ??zclSampleLight_event_loop_12
//  419 #endif
//  420 
//  421   if ( events & SAMPLEAPP_LCD_AUTO_UPDATE_EVT )
??zclSampleLight_event_loop_1:
        MOV     A,R6
        ANL     A,#0x10
        JZ      ??zclSampleLight_event_loop_13
//  422   {
//  423     UI_UpdateLcd();
        ; Setup parameters for call to function UI_UpdateLcd
        LCALL   `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
//  424     return ( events ^ SAMPLEAPP_LCD_AUTO_UPDATE_EVT );
        MOV     A,R6
        XRL     A,#0x10
        SJMP    ??zclSampleLight_event_loop_2
//  425   }
//  426 
//  427   if ( events & SAMPLEAPP_KEY_AUTO_REPEAT_EVT )
??zclSampleLight_event_loop_13:
        MOV     A,R6
        ANL     A,#0x20
        JZ      ??zclSampleLight_event_loop_14
//  428   {
//  429     UI_MainStateMachine(UI_KEY_AUTO_PRESSED);
        ; Setup parameters for call to function UI_MainStateMachine
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        LCALL   `??UI_MainStateMachine::?relay`; Banked call to: UI_MainStateMachine
//  430     return ( events ^ SAMPLEAPP_KEY_AUTO_REPEAT_EVT );
        MOV     A,R6
        XRL     A,#0x20
??zclSampleLight_event_loop_2:
        MOV     R2,A
        MOV     A,R7
??zclSampleLight_event_loop_12:
        MOV     R3,A
        SJMP    ??zclSampleLight_event_loop_15
//  431   }
//  432 
//  433   // Discard unknown events
//  434   return 0;
??zclSampleLight_event_loop_14:
        MOV     R2,#0x0
        MOV     R3,#0x0
??zclSampleLight_event_loop_15:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
//  435 }
          CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond3 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function zclSampleLight_event_loop
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     R0,#0x0
        RET
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5
//  436 
//  437 
//  438 /*********************************************************************
//  439  * @fn      zclSampleLight_HandleKeys
//  440  *
//  441  * @brief   Handles all key events for this device.
//  442  *
//  443  * @param   shift - true if in shift/alt.
//  444  * @param   keys - bit field for key events. Valid entries:
//  445  *                 HAL_KEY_SW_5
//  446  *                 HAL_KEY_SW_4
//  447  *                 HAL_KEY_SW_2
//  448  *                 HAL_KEY_SW_1
//  449  *
//  450  * @return  none
//  451  */
//  452 static void zclSampleLight_HandleKeys( byte shift, byte keys )
//  453 {
//  454   UI_MainStateMachine(keys);
//  455 }
//  456 
//  457 //GP_UPDATE
//  458 #if (ZG_BUILD_RTR_TYPE)
//  459 /*********************************************************************
//  460  * @fn      gp_CommissioningMode
//  461  *
//  462  * @brief   Callback that notifies the application that gp Proxy is entering 
//  463  *          into commissioning mode
//  464  *
//  465  * @param   isEntering - 
//  466  *
//  467  * @return  
//  468  */
//  469 static void gp_CommissioningMode(bool isEntering)
//  470 {
//  471   if(isEntering)
//  472   {
//  473     //Led on indicating enter commissioning mode
//  474   }
//  475   else
//  476   {
//  477     //Led off indicating enter commissioning mode
//  478   }
//  479 }
//  480 
//  481 
//  482 
//  483 //GP_UPDATE
//  484 /*********************************************************************
//  485  * @fn      gp_ChangeChannelReq
//  486  *
//  487  * @brief   Callback function to notify the application about a GP commissioning 
//  488  * request that will change the current channel for at most 
//  489  * gpBirectionalCommissioningChangeChannelTimeout ms
//  490  *
//  491  * @param   channel - Channel in which the commissioning will take place
//  492  *
//  493  * @return  TRUE to allow change channel, FALSE to do not allow
//  494  */
//  495 static uint8 gp_ChangeChannelReq(void)
//  496 {
//  497   bool allowChangeChannel = TRUE;
//  498   
//  499   //Check application state to decide if allow change channel or not
//  500   
//  501   return allowChangeChannel;
//  502 }
//  503 
//  504 #endif
//  505 
//  506 
//  507 /*********************************************************************
//  508  * @fn      zclSampleLight_ProcessCommissioningStatus
//  509  *
//  510  * @brief   Callback in which the status of the commissioning process are reported
//  511  *
//  512  * @param   bdbCommissioningModeMsg - Context message of the status of a commissioning process
//  513  *
//  514  * @return  none
//  515  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  516 static void zclSampleLight_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
zclSampleLight_ProcessCommissioningStatus:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function zclSampleLight_ProcessCommissioningStatus
        CODE
//  517 {
        FUNCALL zclSampleLight_ProcessCommissioningStatus, bdb_StartCommissioning
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessCommissioningStatus, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessCommissioningStatus, UI_UpdateComissioningStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  518   switch(bdbCommissioningModeMsg->bdbCommissioningMode)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,#-0x2
        JZ      ??zclSampleLight_ProcessCommissioningStatus_0
        ADD     A,#-0x3
        JZ      ??zclSampleLight_ProcessCommissioningStatus_1
        SJMP    ??zclSampleLight_ProcessCommissioningStatus_2
//  519   {
//  520     case BDB_COMMISSIONING_FORMATION:
//  521       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
??zclSampleLight_ProcessCommissioningStatus_0:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??zclSampleLight_ProcessCommissioningStatus_2
//  522       {
//  523         //After formation, perform nwk steering again plus the remaining commissioning modes that has not been process yet
//  524         bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
        ; Setup parameters for call to function bdb_StartCommissioning
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,#0x2
        MOV     R1,A
        LCALL   `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
        SJMP    ??zclSampleLight_ProcessCommissioningStatus_2
//  525       }
//  526       else
//  527       {
//  528         //Want to try other channels?
//  529         //try with bdb_setChannelAttribute
//  530       }
//  531     break;
//  532     case BDB_COMMISSIONING_NWK_STEERING:
//  533       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
//  534       {
//  535         //YOUR JOB:
//  536         //We are on the nwk, what now?
//  537       }
//  538       else
//  539       {
//  540         //See the possible errors for nwk steering procedure
//  541         //No suitable networks found
//  542         //Want to try other channels?
//  543         //try with bdb_setChannelAttribute
//  544       }
//  545     break;
//  546     case BDB_COMMISSIONING_FINDING_BINDING:
//  547       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
//  548       {
//  549         //YOUR JOB:
//  550       }
//  551       else
//  552       {
//  553         //YOUR JOB:
//  554         //retry?, wait for user interaction?
//  555       }
//  556     break;
//  557     case BDB_COMMISSIONING_INITIALIZATION:
//  558       //Initialization notification can only be successful. Failure on initialization 
//  559       //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
//  560       
//  561       //YOUR JOB:
//  562       //We are on a network, what now?
//  563       
//  564     break;
//  565 #if ZG_BUILD_ENDDEVICE_TYPE    
//  566     case BDB_COMMISSIONING_PARENT_LOST:
//  567       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
??zclSampleLight_ProcessCommissioningStatus_1:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0xd
        JZ      ??zclSampleLight_ProcessCommissioningStatus_2
//  568       {
//  569         //We did recover from losing parent
//  570       }
//  571       else
//  572       {
//  573         //Parent not found, attempt to rejoin again after a fixed delay
//  574         osal_start_timerEx(zclSampleLight_TaskID, SAMPLEAPP_END_DEVICE_REJOIN_EVT, SAMPLEAPP_END_DEVICE_REJOIN_DELAY);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_2710
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
//  575       }
//  576     break;
//  577 #endif 
//  578   }
//  579   
//  580   UI_UpdateComissioningStatus(bdbCommissioningModeMsg);
??zclSampleLight_ProcessCommissioningStatus_2:
        ; Setup parameters for call to function UI_UpdateComissioningStatus
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??UI_UpdateComissioningStatus::?relay`; Banked call to: UI_UpdateComissioningStatus
//  581 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock6
//  582 
//  583 /*********************************************************************
//  584  * @fn      zclSampleLight_BasicResetCB
//  585  *
//  586  * @brief   Callback from the ZCL General Cluster Library
//  587  *          to set all the Basic Cluster attributes to default values.
//  588  *
//  589  * @param   none
//  590  *
//  591  * @return  none
//  592  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  593 static void zclSampleLight_BasicResetCB( void )
zclSampleLight_BasicResetCB:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function zclSampleLight_BasicResetCB
        CODE
//  594 {
        FUNCALL zclSampleLight_BasicResetCB, zclSampleLight_ResetAttributesToDefaultValues
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, zclSampleLight_UpdateLedState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, UI_UpdateLcd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  595   //Reset every attribute in all supported cluster to their default value.
//  596 
//  597   zclSampleLight_ResetAttributesToDefaultValues();
        ; Setup parameters for call to function zclSampleLight_ResetAttributesToDefaultValues
        LCALL   ??zclSampleLight_ResetAttributesToDefaultValues; Banked call to: zclSampleLight_ResetAttributesToDefaultValues
//  598 
//  599   zclSampleLight_UpdateLedState();
        ; Setup parameters for call to function zclSampleLight_UpdateLedState
        LCALL   `??zclSampleLight_UpdateLedState::?relay`; Banked call to: zclSampleLight_UpdateLedState
//  600 
//  601   // update the display
//  602   UI_UpdateLcd( ); 
        ; Setup parameters for call to function UI_UpdateLcd
        LCALL   `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
//  603 }
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock7
//  604 
//  605 /*********************************************************************
//  606  * @fn      zclSampleLight_OnOffCB
//  607  *
//  608  * @brief   Callback from the ZCL General Cluster Library when
//  609  *          it received an On/Off Command for this application.
//  610  *
//  611  * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
//  612  *
//  613  * @return  none
//  614  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  615 static void zclSampleLight_OnOffCB( uint8 cmd )
zclSampleLight_OnOffCB:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function zclSampleLight_OnOffCB
        CODE
//  616 {
        FUNCALL zclSampleLight_OnOffCB, zcl_getRawAFMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_OnOffCB, zclSampleLight_UpdateLedState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_OnOffCB, UI_UpdateLcd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  617   afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
        ; Setup parameters for call to function zcl_getRawAFMsg
        LCALL   `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
        MOV     DPL,R2
        MOV     DPH,R3
//  618 
//  619   uint8 OnOff;
//  620 
//  621   zclSampleLight_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPTR,#zclSampleLight_DstAddr
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  622 
//  623 
//  624   // Turn on the light
//  625   if ( cmd == COMMAND_ON )
        MOV     A,#0x1
        XRL     A,R6
        JZ      ??zclSampleLight_OnOffCB_0
//  626   {
//  627     OnOff = LIGHT_ON;
//  628   }
//  629   // Turn off the light
//  630   else if ( cmd == COMMAND_OFF )
        MOV     A,R6
        JZ      ??zclSampleLight_OnOffCB_1
//  631   {
//  632     OnOff = LIGHT_OFF;
//  633   }
//  634   // Toggle the light
//  635   else if ( cmd == COMMAND_TOGGLE )
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??zclSampleLight_OnOffCB_2
//  636   {
//  637 #ifdef ZCL_LEVEL_CTRL
//  638     if (zclSampleLight_LevelRemainingTime > 0) 
//  639     {
//  640       if (zclSampleLight_NewLevelUp)
//  641       {
//  642         OnOff = LIGHT_OFF;
//  643       }
//  644       else
//  645       {
//  646         OnOff = LIGHT_ON;
//  647       }
//  648     }
//  649     else
//  650     {
//  651       if (zclSampleLight_OnOff == LIGHT_ON)
//  652       {
//  653         OnOff = LIGHT_OFF;
//  654       }
//  655       else
//  656       {
//  657         OnOff = LIGHT_ON;
//  658       }
//  659     }
//  660 #else
//  661     if (zclSampleLight_OnOff == LIGHT_ON)
        MOV     DPTR,#zclSampleLight_OnOff
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclSampleLight_OnOffCB_0
//  662     {
//  663       OnOff = LIGHT_OFF;
??zclSampleLight_OnOffCB_1:
        MOV     R0,#0x0
        SJMP    ??zclSampleLight_OnOffCB_2
//  664     }
//  665     else
//  666     {
//  667       OnOff = LIGHT_ON;
??zclSampleLight_OnOffCB_0:
        MOV     R0,#0x1
//  668     }
//  669 #endif
//  670   }
//  671 
//  672 #ifdef ZCL_LEVEL_CTRL
//  673   zclSampleLight_LevelChangeCmd = (OnOff == LIGHT_ON ? LEVEL_CHANGED_BY_ON_CMD : LEVEL_CHANGED_BY_OFF_CMD);
//  674 
//  675   zclSampleLight_DefaultMove(OnOff);
//  676 #else
//  677   zclSampleLight_OnOff = OnOff;
??zclSampleLight_OnOffCB_2:
        MOV     A,R0
        MOV     DPTR,#zclSampleLight_OnOff
        MOVX    @DPTR,A
//  678 #endif
//  679 
//  680   zclSampleLight_UpdateLedState();
        ; Setup parameters for call to function zclSampleLight_UpdateLedState
        LCALL   `??zclSampleLight_UpdateLedState::?relay`; Banked call to: zclSampleLight_UpdateLedState
//  681   
//  682   // update the display
//  683   UI_UpdateLcd( );
        ; Setup parameters for call to function UI_UpdateLcd
        LJMP    ?Subroutine0 & 0xFFFF
//  684 }
          CFI EndBlock cfiBlock8
//  685 
//  686 #ifdef ZCL_LEVEL_CTRL
//  687 /*********************************************************************
//  688  * @fn      zclSampleLight_TimeRateHelper
//  689  *
//  690  * @brief   Calculate time based on rate, and startup level state machine
//  691  *
//  692  * @param   newLevel - new level for current level
//  693  *
//  694  * @return  diff (directly), zclSampleLight_CurrentLevel32 and zclSampleLight_NewLevel, zclSampleLight_NewLevelUp
//  695  */
//  696 static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel )
//  697 {
//  698   uint32 diff;
//  699   uint32 newLevel32;
//  700 
//  701   // remember current and new level
//  702   zclSampleLight_NewLevel = newLevel;
//  703   zclSampleLight_CurrentLevel32 = (uint32)1000 * zclSampleLight_LevelCurrentLevel;
//  704 
//  705   // calculate diff
//  706   newLevel32 = (uint32)1000 * newLevel;
//  707   if ( zclSampleLight_LevelCurrentLevel > newLevel )
//  708   {
//  709     diff = zclSampleLight_CurrentLevel32 - newLevel32;
//  710     zclSampleLight_NewLevelUp = FALSE;  // moving down
//  711   }
//  712   else
//  713   {
//  714     diff = newLevel32 - zclSampleLight_CurrentLevel32;
//  715     zclSampleLight_NewLevelUp = TRUE;   // moving up
//  716   }
//  717 
//  718   return ( diff );
//  719 }
//  720 
//  721 /*********************************************************************
//  722  * @fn      zclSampleLight_MoveBasedOnRate
//  723  *
//  724  * @brief   Calculate time based on rate, and startup level state machine
//  725  *
//  726  * @param   newLevel - new level for current level
//  727  * @param   rate16   - fixed point rate (e.g. 16.123)
//  728  *
//  729  * @return  none
//  730  */
//  731 static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate )
//  732 {
//  733   uint32 diff;
//  734 
//  735   // determine how much time (in 10ths of seconds) based on the difference and rate
//  736   zclSampleLight_Rate32 = rate;
//  737   diff = zclSampleLight_TimeRateHelper( newLevel );
//  738   zclSampleLight_LevelRemainingTime = diff / rate;
//  739   if ( !zclSampleLight_LevelRemainingTime )
//  740   {
//  741     zclSampleLight_LevelRemainingTime = 1;
//  742   }
//  743 
//  744   osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
//  745 }
//  746 
//  747 /*********************************************************************
//  748  * @fn      zclSampleLight_MoveBasedOnTime
//  749  *
//  750  * @brief   Calculate rate based on time, and startup level state machine
//  751  *
//  752  * @param   newLevel  - new level for current level
//  753  * @param   time      - in 10ths of seconds
//  754  *
//  755  * @return  none
//  756  */
//  757 static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time )
//  758 {
//  759   uint16 diff;
//  760 
//  761   // determine rate (in units) based on difference and time
//  762   diff = zclSampleLight_TimeRateHelper( newLevel );
//  763   zclSampleLight_LevelRemainingTime = zclSampleLight_GetTime( newLevel, time );
//  764   zclSampleLight_Rate32 = diff / time;
//  765 
//  766   osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
//  767 }
//  768 
//  769 /*********************************************************************
//  770  * @fn      zclSampleLight_GetTime
//  771  *
//  772  * @brief   Determine amount of time that MoveXXX will take to complete.
//  773  *
//  774  * @param   level = new level to move to
//  775  *          time  = 0xffff=default, or 0x0000-n amount of time in tenths of seconds.
//  776  *
//  777  * @return  none
//  778  */
//  779 static uint16 zclSampleLight_GetTime( uint8 newLevel, uint16 time )
//  780 {
//  781   // there is a hiearchy of the amount of time to use for transistioning
//  782   // check each one in turn. If none of defaults are set, then use fastest
//  783   // time possible.
//  784   if ( time == 0xFFFF )
//  785   {
//  786     // use On or Off Transition Time if set (not 0xffff)
//  787     if ( zclSampleLight_LevelCurrentLevel > newLevel )
//  788     {
//  789       time = zclSampleLight_LevelOffTransitionTime;
//  790     }
//  791     else
//  792     {
//  793       time = zclSampleLight_LevelOnTransitionTime;
//  794     }
//  795 
//  796     // else use OnOffTransitionTime if set (not 0xffff)
//  797     if ( time == 0xFFFF )
//  798     {
//  799       time = zclSampleLight_LevelOnOffTransitionTime;
//  800     }
//  801 
//  802     // else as fast as possible
//  803     if ( time == 0xFFFF )
//  804     {
//  805       time = 1;
//  806     }
//  807   }
//  808 
//  809   if ( time == 0 )
//  810   {
//  811     time = 1; // as fast as possible
//  812   }
//  813 
//  814   return ( time );
//  815 }
//  816 
//  817 /*********************************************************************
//  818  * @fn      zclSampleLight_DefaultMove
//  819  *
//  820  * @brief   We were turned on/off. Use default time to move to on or off.
//  821  *
//  822  * @param   zclSampleLight_OnOff - must be set prior to calling this function.
//  823  *
//  824  * @return  none
//  825  */
//  826 static void zclSampleLight_DefaultMove( uint8 OnOff )
//  827 {
//  828   uint8  newLevel;
//  829   uint32 rate;      // fixed point decimal (3 places, eg. 16.345)
//  830   uint16 time;
//  831 
//  832   // if moving to on position, move to on level
//  833   if ( OnOff )
//  834   {
//  835     if (zclSampleLight_OnOff == LIGHT_OFF)
//  836     {
//  837       zclSampleLight_LevelCurrentLevel = ATTR_LEVEL_MIN_LEVEL;
//  838     }
//  839     
//  840     if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
//  841     {
//  842       // The last Level (before going OFF) should be used)
//  843       newLevel = zclSampleLight_LevelLastLevel;
//  844     }
//  845     else
//  846     {
//  847       newLevel = zclSampleLight_LevelOnLevel;
//  848     }
//  849 
//  850     time = zclSampleLight_LevelOnTransitionTime;
//  851 
//  852   }
//  853   else
//  854   {
//  855     newLevel = ATTR_LEVEL_MIN_LEVEL;
//  856 
//  857     time = zclSampleLight_LevelOffTransitionTime;
//  858   }
//  859 
//  860   // else use OnOffTransitionTime if set (not 0xffff)
//  861   if ( time == 0xFFFF )
//  862   {
//  863     time = zclSampleLight_LevelOnOffTransitionTime;
//  864   }
//  865 
//  866   // else as fast as possible
//  867   if ( time == 0xFFFF )
//  868   {
//  869     time = 1;
//  870   }
//  871 
//  872   // calculate rate based on time (int 10ths) for full transition (1-254)
//  873   rate = 255000 / time;    // units per tick, fixed point, 3 decimal places (e.g. 8500 = 8.5 units per tick)
//  874 
//  875   // start up state machine.
//  876   zclSampleLight_WithOnOff = TRUE;
//  877   zclSampleLight_MoveBasedOnRate( newLevel, rate );
//  878 }
//  879 
//  880 /*********************************************************************
//  881  * @fn      zclSampleLight_AdjustLightLevel
//  882  *
//  883  * @brief   Called each 10th of a second while state machine running
//  884  *
//  885  * @param   none
//  886  *
//  887  * @return  none
//  888  */
//  889 static void zclSampleLight_AdjustLightLevel( void )
//  890 {
//  891   // one tick (10th of a second) less
//  892   if ( zclSampleLight_LevelRemainingTime )
//  893   {
//  894     --zclSampleLight_LevelRemainingTime;
//  895   }
//  896 
//  897   // no time left, done
//  898   if ( zclSampleLight_LevelRemainingTime == 0)
//  899   {
//  900     zclSampleLight_LevelCurrentLevel = zclSampleLight_NewLevel;
//  901   }
//  902 
//  903   // still time left, keep increment/decrementing
//  904   else
//  905   {
//  906     if ( zclSampleLight_NewLevelUp )
//  907     {
//  908       zclSampleLight_CurrentLevel32 += zclSampleLight_Rate32;
//  909     }
//  910     else
//  911     {
//  912       zclSampleLight_CurrentLevel32 -= zclSampleLight_Rate32;
//  913     }
//  914     zclSampleLight_LevelCurrentLevel = (uint8)( zclSampleLight_CurrentLevel32 / 1000 );
//  915   }
//  916 
//  917   if (( zclSampleLight_LevelChangeCmd == LEVEL_CHANGED_BY_LEVEL_CMD ) && ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ))
//  918   {
//  919     zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
//  920   }
//  921 
//  922   // also affect on/off
//  923   if ( zclSampleLight_WithOnOff )
//  924   {
//  925     if ( zclSampleLight_LevelCurrentLevel > ATTR_LEVEL_MIN_LEVEL )
//  926     {
//  927       zclSampleLight_OnOff = LIGHT_ON;
//  928     }
//  929     else
//  930     {
//  931       if (zclSampleLight_LevelChangeCmd != LEVEL_CHANGED_BY_ON_CMD)
//  932       {
//  933         zclSampleLight_OnOff = LIGHT_OFF;
//  934       }
//  935       else
//  936       {
//  937         zclSampleLight_OnOff = LIGHT_ON;
//  938       }
//  939       
//  940       if (( zclSampleLight_LevelChangeCmd != LEVEL_CHANGED_BY_LEVEL_CMD ) && ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ))
//  941       {
//  942         zclSampleLight_LevelCurrentLevel = zclSampleLight_LevelLastLevel;
//  943       }
//  944     }
//  945   }
//  946 
//  947   zclSampleLight_UpdateLedState();
//  948   
//  949   // display light level as we go
//  950   UI_UpdateLcd( );
//  951 
//  952   // keep ticking away
//  953   if ( zclSampleLight_LevelRemainingTime )
//  954   {
//  955     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
//  956   }
//  957 }
//  958 
//  959 /*********************************************************************
//  960  * @fn      zclSampleLight_LevelControlMoveToLevelCB
//  961  *
//  962  * @brief   Callback from the ZCL General Cluster Library when
//  963  *          it received a LevelControlMoveToLevel Command for this application.
//  964  *
//  965  * @param   pCmd - ZigBee command parameters
//  966  *
//  967  * @return  none
//  968  */
//  969 static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd )
//  970 {
//  971   zclSampleLight_LevelChangeCmd = LEVEL_CHANGED_BY_LEVEL_CMD;
//  972 
//  973   zclSampleLight_WithOnOff = pCmd->withOnOff;
//  974   zclSampleLight_MoveBasedOnTime( pCmd->level, pCmd->transitionTime );
//  975 }
//  976 
//  977 /*********************************************************************
//  978  * @fn      zclSampleLight_LevelControlMoveCB
//  979  *
//  980  * @brief   Callback from the ZCL General Cluster Library when
//  981  *          it received a LevelControlMove Command for this application.
//  982  *
//  983  * @param   pCmd - ZigBee command parameters
//  984  *
//  985  * @return  none
//  986  */
//  987 static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd )
//  988 {
//  989   uint8 newLevel;
//  990   uint32 rate;
//  991 
//  992   // convert rate from units per second to units per tick (10ths of seconds)
//  993   // and move at that right up or down
//  994   zclSampleLight_WithOnOff = pCmd->withOnOff;
//  995 
//  996   if ( pCmd->moveMode == LEVEL_MOVE_UP )
//  997   {
//  998     newLevel = ATTR_LEVEL_MAX_LEVEL;  // fully on
//  999   }
// 1000   else
// 1001   {
// 1002     newLevel = ATTR_LEVEL_MIN_LEVEL; // fully off
// 1003   }
// 1004 
// 1005   zclSampleLight_LevelChangeCmd = LEVEL_CHANGED_BY_LEVEL_CMD;
// 1006 
// 1007   rate = (uint32)100 * pCmd->rate;
// 1008   zclSampleLight_MoveBasedOnRate( newLevel, rate );
// 1009 }
// 1010 
// 1011 /*********************************************************************
// 1012  * @fn      zclSampleLight_LevelControlStepCB
// 1013  *
// 1014  * @brief   Callback from the ZCL General Cluster Library when
// 1015  *          it received an On/Off Command for this application.
// 1016  *
// 1017  * @param   pCmd - ZigBee command parameters
// 1018  *
// 1019  * @return  none
// 1020  */
// 1021 static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd )
// 1022 {
// 1023   uint8 newLevel;
// 1024 
// 1025   // determine new level, but don't exceed boundaries
// 1026   if ( pCmd->stepMode == LEVEL_MOVE_UP )
// 1027   {
// 1028     if ( (uint16)zclSampleLight_LevelCurrentLevel + pCmd->amount > ATTR_LEVEL_MAX_LEVEL )
// 1029     {
// 1030       newLevel = ATTR_LEVEL_MAX_LEVEL;
// 1031     }
// 1032     else
// 1033     {
// 1034       newLevel = zclSampleLight_LevelCurrentLevel + pCmd->amount;
// 1035     }
// 1036   }
// 1037   else
// 1038   {
// 1039     if ( pCmd->amount >= zclSampleLight_LevelCurrentLevel )
// 1040     {
// 1041       newLevel = ATTR_LEVEL_MIN_LEVEL;
// 1042     }
// 1043     else
// 1044     {
// 1045       newLevel = zclSampleLight_LevelCurrentLevel - pCmd->amount;
// 1046     }
// 1047   }
// 1048   
// 1049   zclSampleLight_LevelChangeCmd = LEVEL_CHANGED_BY_LEVEL_CMD;
// 1050 
// 1051   // move to the new level
// 1052   zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1053   zclSampleLight_MoveBasedOnTime( newLevel, pCmd->transitionTime );
// 1054 }
// 1055 
// 1056 /*********************************************************************
// 1057  * @fn      zclSampleLight_LevelControlStopCB
// 1058  *
// 1059  * @brief   Callback from the ZCL General Cluster Library when
// 1060  *          it received an Level Control Stop Command for this application.
// 1061  *
// 1062  * @param   pCmd - ZigBee command parameters
// 1063  *
// 1064  * @return  none
// 1065  */
// 1066 static void zclSampleLight_LevelControlStopCB( void )
// 1067 {
// 1068   // stop immediately
// 1069   osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT );
// 1070   zclSampleLight_LevelRemainingTime = 0;
// 1071 }
// 1072 #endif
// 1073 
// 1074 /******************************************************************************
// 1075  *
// 1076  *  Functions for processing ZCL Foundation incoming Command/Response messages
// 1077  *
// 1078  *****************************************************************************/
// 1079 
// 1080 /*********************************************************************
// 1081  * @fn      zclSampleLight_ProcessIncomingMsg
// 1082  *
// 1083  * @brief   Process ZCL Foundation incoming message
// 1084  *
// 1085  * @param   pInMsg - pointer to the received message
// 1086  *
// 1087  * @return  none
// 1088  */
// 1089 static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
// 1090 {
// 1091   switch ( pInMsg->zclHdr.commandID )
// 1092   {
// 1093 #ifdef ZCL_READ
// 1094     case ZCL_CMD_READ_RSP:
// 1095       zclSampleLight_ProcessInReadRspCmd( pInMsg );
// 1096       break;
// 1097 #endif
// 1098 #ifdef ZCL_WRITE
// 1099     case ZCL_CMD_WRITE_RSP:
// 1100       zclSampleLight_ProcessInWriteRspCmd( pInMsg );
// 1101       break;
// 1102 #endif
// 1103     case ZCL_CMD_CONFIG_REPORT:
// 1104     case ZCL_CMD_CONFIG_REPORT_RSP:
// 1105     case ZCL_CMD_READ_REPORT_CFG:
// 1106     case ZCL_CMD_READ_REPORT_CFG_RSP:
// 1107     case ZCL_CMD_REPORT:
// 1108       //bdb_ProcessIncomingReportingMsg( pInMsg );
// 1109       break;
// 1110 
// 1111     case ZCL_CMD_DEFAULT_RSP:
// 1112       zclSampleLight_ProcessInDefaultRspCmd( pInMsg );
// 1113       break;
// 1114 #ifdef ZCL_DISCOVER
// 1115     case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
// 1116       zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
// 1117       break;
// 1118 
// 1119     case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
// 1120       zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
// 1121       break;
// 1122 
// 1123     case ZCL_CMD_DISCOVER_ATTRS_RSP:
// 1124       zclSampleLight_ProcessInDiscAttrsRspCmd( pInMsg );
// 1125       break;
// 1126 
// 1127     case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
// 1128       zclSampleLight_ProcessInDiscAttrsExtRspCmd( pInMsg );
// 1129       break;
// 1130 #endif
// 1131     default:
// 1132       break;
// 1133   }
// 1134 
// 1135   if ( pInMsg->attrCmd )
// 1136     osal_mem_free( pInMsg->attrCmd );
// 1137 }
// 1138 
// 1139 #ifdef ZCL_READ
// 1140 /*********************************************************************
// 1141  * @fn      zclSampleLight_ProcessInReadRspCmd
// 1142  *
// 1143  * @brief   Process the "Profile" Read Response Command
// 1144  *
// 1145  * @param   pInMsg - incoming message to process
// 1146  *
// 1147  * @return  none
// 1148  */
// 1149 static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
// 1150 {
// 1151   zclReadRspCmd_t *readRspCmd;
// 1152   uint8 i;
// 1153 
// 1154   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
// 1155   for (i = 0; i < readRspCmd->numAttr; i++)
// 1156   {
// 1157     // Notify the originator of the results of the original read attributes
// 1158     // attempt and, for each successfull request, the value of the requested
// 1159     // attribute
// 1160   }
// 1161 
// 1162   return ( TRUE );
// 1163 }
// 1164 #endif // ZCL_READ
// 1165 
// 1166 #ifdef ZCL_WRITE
// 1167 /*********************************************************************
// 1168  * @fn      zclSampleLight_ProcessInWriteRspCmd
// 1169  *
// 1170  * @brief   Process the "Profile" Write Response Command
// 1171  *
// 1172  * @param   pInMsg - incoming message to process
// 1173  *
// 1174  * @return  none
// 1175  */
// 1176 static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
// 1177 {
// 1178   zclWriteRspCmd_t *writeRspCmd;
// 1179   uint8 i;
// 1180 
// 1181   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
// 1182   for ( i = 0; i < writeRspCmd->numAttr; i++ )
// 1183   {
// 1184     // Notify the device of the results of the its original write attributes
// 1185     // command.
// 1186   }
// 1187 
// 1188   return ( TRUE );
// 1189 }
// 1190 #endif // ZCL_WRITE
// 1191 
// 1192 /*********************************************************************
// 1193  * @fn      zclSampleLight_ProcessInDefaultRspCmd
// 1194  *
// 1195  * @brief   Process the "Profile" Default Response Command
// 1196  *
// 1197  * @param   pInMsg - incoming message to process
// 1198  *
// 1199  * @return  none
// 1200  */
// 1201 static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
// 1202 {
// 1203   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
// 1204 
// 1205   // Device is notified of the Default Response command.
// 1206   (void)pInMsg;
// 1207 
// 1208   return ( TRUE );
// 1209 }
// 1210 
// 1211 #ifdef ZCL_DISCOVER
// 1212 /*********************************************************************
// 1213  * @fn      zclSampleLight_ProcessInDiscCmdsRspCmd
// 1214  *
// 1215  * @brief   Process the Discover Commands Response Command
// 1216  *
// 1217  * @param   pInMsg - incoming message to process
// 1218  *
// 1219  * @return  none
// 1220  */
// 1221 static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
// 1222 {
// 1223   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
// 1224   uint8 i;
// 1225 
// 1226   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
// 1227   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
// 1228   {
// 1229     // Device is notified of the result of its attribute discovery command.
// 1230   }
// 1231 
// 1232   return ( TRUE );
// 1233 }
// 1234 
// 1235 /*********************************************************************
// 1236  * @fn      zclSampleLight_ProcessInDiscAttrsRspCmd
// 1237  *
// 1238  * @brief   Process the "Profile" Discover Attributes Response Command
// 1239  *
// 1240  * @param   pInMsg - incoming message to process
// 1241  *
// 1242  * @return  none
// 1243  */
// 1244 static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
// 1245 {
// 1246   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
// 1247   uint8 i;
// 1248 
// 1249   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
// 1250   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1251   {
// 1252     // Device is notified of the result of its attribute discovery command.
// 1253   }
// 1254 
// 1255   return ( TRUE );
// 1256 }
// 1257 
// 1258 /*********************************************************************
// 1259  * @fn      zclSampleLight_ProcessInDiscAttrsExtRspCmd
// 1260  *
// 1261  * @brief   Process the "Profile" Discover Attributes Extended Response Command
// 1262  *
// 1263  * @param   pInMsg - incoming message to process
// 1264  *
// 1265  * @return  none
// 1266  */
// 1267 static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
// 1268 {
// 1269   zclDiscoverAttrsExtRsp_t *discoverRspCmd;
// 1270   uint8 i;
// 1271 
// 1272   discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
// 1273   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1274   {
// 1275     // Device is notified of the result of its attribute discovery command.
// 1276   }
// 1277 
// 1278   return ( TRUE );
// 1279 }
// 1280 #endif // ZCL_DISCOVER
// 1281 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1282 void zclSampleLight_UiActionToggleLight(uint16 keys)
zclSampleLight_UiActionToggleLight:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function zclSampleLight_UiActionToggleLight
        CODE
// 1283 {
        FUNCALL zclSampleLight_UiActionToggleLight, zclSampleLight_OnOffCB
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1284   zclSampleLight_OnOffCB(COMMAND_TOGGLE);
        ; Setup parameters for call to function zclSampleLight_OnOffCB
        MOV     R1,#0x2
        LCALL   `??zclSampleLight_OnOffCB::?relay`; Banked call to: zclSampleLight_OnOffCB
// 1285 }
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock9
// 1286 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1287 void zclSampleLight_UpdateLedState(void)
zclSampleLight_UpdateLedState:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function zclSampleLight_UpdateLedState
        CODE
// 1288 {
        FUNCALL zclSampleLight_UpdateLedState, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_UpdateLedState, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1289   // set the LED1 based on light (on or off)
// 1290   if ( zclSampleLight_OnOff == LIGHT_ON )
        MOV     DPTR,#zclSampleLight_OnOff
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclSampleLight_UpdateLedState_0
// 1291   {
// 1292     HalLedSet ( UI_LED_APP, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        SJMP    ??zclSampleLight_UpdateLedState_1
// 1293   }
// 1294   else
// 1295   {
// 1296     HalLedSet ( UI_LED_APP, HAL_LED_MODE_OFF );
??zclSampleLight_UpdateLedState_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
??zclSampleLight_UpdateLedState_1:
        MOV     R1,#0x1
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
// 1297   }
// 1298 }
          CFI EndBlock cfiBlock10
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock11
// 1299 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1300 void zclSampleLight_UiUpdateLcd(uint8 UiState, char * line[3])
zclSampleLight_UiUpdateLcd:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function zclSampleLight_UiUpdateLcd
        CODE
// 1301 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1302 #ifdef LCD_SUPPORTED
// 1303 #ifdef ZCL_LEVEL_CTRL
// 1304   zclHA_uint8toa( zclSampleLight_LevelCurrentLevel, &sLightLevel[9] );
// 1305   line[0] = (char *)sLightLevel;
// 1306 #endif // ZCL_LEVEL_CTRL
// 1307   line[1] = (char *)(zclSampleLight_OnOff ? sLightOn : sLightOff);
        MOV     DPTR,#zclSampleLight_OnOff
        MOVX    A,@DPTR
        JZ      ??zclSampleLight_UiUpdateLcd_0
        MOV     R0,#sLightOn & 0xff
        MOV     R1,#(sLightOn >> 8) & 0xff
        SJMP    ??zclSampleLight_UiUpdateLcd_1
??zclSampleLight_UiUpdateLcd_0:
        MOV     R0,#sLightOff & 0xff
        MOV     R1,#(sLightOff >> 8) & 0xff
??zclSampleLight_UiUpdateLcd_1:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1308   line[2] = "< TOGGLE LIGHT >";
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#`?<Constant "< TOGGLE LIGHT >">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "< TOGGLE LIGHT >">` >> 8) & 0xff
        MOVX    @DPTR,A
// 1309 #endif
// 1310 }
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock12

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sampleLight_TestEp>`:
        DATA8
        DB 8
        DB 0
        DATA16
        DW zclSampleLight_TaskID
        DW 0H
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleLight_CmdCallbacks>`:
        DATA16
        DW `??zclSampleLight_BasicResetCB::?relay`
        DW 0H
        DW `??zclSampleLight_OnOffCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_ProcessCommissioningStatus::?r`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_ProcessCommissioningStatus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_BasicResetCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_OnOffCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_OnOffCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_UiActionToggleLight::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_UiActionToggleLight

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_UpdateLedState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_UpdateLedState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_UiUpdateLcd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_UiUpdateLcd

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "TI Sample Light">`:
        DB "TI Sample Light"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "< TOGGLE LIGHT >">`:
        DB "< TOGGLE LIGHT >"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2710:
        DD 10000

        END
// 1311 
// 1312 /****************************************************************************
// 1313 ****************************************************************************/
// 1314 
// 1315 
// 
// 660 bytes in segment BANKED_CODE
//  48 bytes in segment BANK_RELAYS
//  31 bytes in segment XDATA_I
//  31 bytes in segment XDATA_ID
//  83 bytes in segment XDATA_ROM_C
//  14 bytes in segment XDATA_Z
// 
// 739 bytes of CODE  memory
//  79 bytes of CONST memory (+ 4 bytes shared)
//  45 bytes of XDATA memory
//
//Errors: none
//Warnings: none
