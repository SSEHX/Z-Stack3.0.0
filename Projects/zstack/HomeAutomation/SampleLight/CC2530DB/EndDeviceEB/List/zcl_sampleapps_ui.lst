###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                26/Oct/2017  14:48:35
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\Source\zcl_sampleapps_ui.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
#        Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\Source\zcl_sampleapps_ui.c" -D
#        BDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE
#        -D xPOWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
#        xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D
#        ZCL_SCENES -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -lC "C:\Texas
#        Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
#        -lA "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
#        "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List\zcl_sampleapps_ui.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack
#        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\Obj\zcl_sampleapps_ui.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack 3.0.0\Projects\zstack\HomeAutomation\Source\zcl_sampleapps_ui.c
      1          /**************************************************************************************************
      2            Filename:       zcl_sampleapps_ui.c
      3            Revised:        $Date: 2016-8-1 16:04:46 -0700 (Fri, 24 Oct 2014) $
      4            Revision:       $Revision: 40796 $
      5          
      6          
      7            Description:    Z-Stack Sample Application User Interface.
      8          
      9          
     10            Copyright 2006-2016 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42            This file implements the user interface that is common to most of the Z-Stack sample applications.
     43          
     44            The sample applications are intended for the following platforms:
     45            - CC2530EM+SmartRF05
     46            - CC2538EM+SmartRF06
     47          
     48            The UI peripherals being used:
     49          
     50            - LCD based menu system:
     51              only using 3 lines of 16 characters each, for compatibility accross platforms.
     52          
     53            - Switches: 
     54              Using 4 directional switches and one selection switch. On SmartRF05, these are implemented by
     55              the joystick.
     56          
     57              - The switches have the following functionality, where applicable:
     58                - Left/Right: depending on the menu screen, these are used for either:
     59                  - move to the previous/next menu screen
     60                  - move to the previous/next digit/sub-item within a menu screen
     61                - Up/Down: change the value of the currently selected item
     62                - Ok (Select): execute the operation associated with the current menu screeen
     63          
     64            - LEDs:
     65              LED1 is used differently by the individual applications.
     66              the 3 other LEDs are common accross all the applications, and function as follows:
     67          
     68              - LED2: device state and type
     69                - Off: not connected to network
     70                - Constantly on: connected to the network as an end device
     71                - Blinking, 4 seconds period, 95% duty cycle: connected to the network as a router
     72                - Blinking, 4 seconds period, 75% duty cycle: connected to the network as a coordinator
     73          
     74              - LED3: identify status
     75                - Off: device is not identifying
     76                - Blinking, 1 second period, 50% duty cycle: device is identifying
     77          
     78              - LED4: open for joining status
     79                - Off: other devices cannot join through this device
     80                - Blinking, 1 second period, 25% duty cycle: other devices can join using standard comissioning
     81                - Blinking, 1 second period, 75% duty cycle: other devices can join using touchlink (i.e
     82                  touchlink is enabled on the current device as a target)
     83                - On: device can join using either standard comissioning or touchlink
     84          
     85            The menu system:
     86          
     87              <HELP> Wellcome screen
     88                Displays the sample application name.
     89                Press and hold [OK] to show a simple help screen.
     90                
     91                Help screen
     92                Release [OK] to go back to the welcome screen.
     93                
     94              <CONFIGURE> Configuration sub-menu
     95                Press [OK] to display the configuration sub-menu
     96                
     97                <ADD INSTL CODE> install code sub-menu
     98                  Press [OK] to display the install code sub-menu
     99                  
    100                  <SET INSTL CODE> set install code
    101                    Press [OK] to to edit the install code
    102                    
    103                    Install code editing screen
    104                      Press [LEFT] / [RIGHT] to select a digit
    105                      Press [UP] / [DOWN] to change the selected digit
    106                      press [OK] to to go back to the higher menu level
    107                      
    108                  <SET I.C. ADDR> set install code address (coordinator only)
    109                    Press [OK] to to edit the install code address
    110          
    111                    Install code address editing screen
    112                      Press [LEFT] / [RIGHT] to select a digit
    113                      Press [UP] / [DOWN] to change the selected digit
    114                      press [OK] to to go back to the higher menu level
    115                      
    116                  <APLY INST CODE> apply install code
    117                    Press [OK] to apply the address+Install-Code pair (coordinator) or the Install-Code (Routers and End-Devices)
    118                    This menu screen also displays the status of the last apply-install-code operation
    119          
    120                  <BACK> go back to higher menu level
    121                    press [OK] to to go back to the higher menu level
    122                  
    123                <T.L. TRGT TIME> Set the touchlink enable duration
    124                  Press and hold [UP] / [DOWN] to increase / decrease the displayed time. The longer the press, the faster
    125                  the change. 
    126                  The maximum duration is 86400 seconds. Increasing it above this value will display '(forever)' - 
    127                  in this setting, the touchlink target will stay active once started and untill manually stopped.
    128                  The minimum duration is 1 second. Decreasing it below this value sets tohchlink target to always disabled.
    129                  This menu item is only available if BDB_TL_TARGET is defined.
    130          
    131                <T.L. STEALING> enable/disable touchlink stealing
    132                  Press [OK] to toggle (enable/disable) touchlink stealing.
    133                  When stealing is enabled, a touchlink target may be 'stolen' by another device acting as a touchlink 
    134                  initiator, which will take it out of its existing network and add it to another network.
    135                  This menu item is only available if BDB_TL_TARGET is defined.
    136          
    137                <T.L. INITIATOR> enable/disable touchlink initiator
    138                  Press [OK] to toggle (enable/disable) touchlink initiator.
    139                  When enabled, touchlink initiator functionality will be executed as part of the commissioning procedure.
    140                  This menu item is only available if BDB_TL_INITIATOR is defined.
    141          
    142                <NWK FORMATION> enable/disable network formation for when cannot connect to an existing network
    143                  Press [OK] to toggle (enable/disable) network formation.
    144                  When enabled, network formation will be executed as part of the commissioning procedure, unless 
    145                  the device has already joined a network.
    146          
    147                <NWK STEERING> enable/disable attempting to connect to an existing network
    148                  Press [OK] to toggle (enable/disable) network steering.
    149                  When enabled, network steering will be executed as part of the commissioning procedure, so the
    150                  device will try to join an existing network, and will open the network for joining of other devices
    151                  once it is joined.
    152          
    153                <FINDNG+BINDNG> enable/disable finding and binding
    154                  Press [OK] to toggle (enable/disable) finding and binding (F&B).
    155                  When enabled, finding and binding will be executed as part of the commissioning procedure, so the
    156                  device will either start identifying, look for matchng devices that are currently identifying, or 
    157                  both (depending of whether it is a F&B target, initiator, or both).
    158                
    159                <PRI CHANL MASK> set the primary channel mask
    160                  Press [OK] to edit the primary channel list
    161          
    162                  Primary channel list editing screen
    163                    Press [LEFT] / [RIGHT] to select a channel (from channel 11 to channel 26)
    164                    Press [UP] / [DOWN] to enable / disable the selected channel, accordingly.
    165                    press [OK] to to go back to the higher menu level
    166          
    167                <SEC CHANL MASK> set the secondary channel mask
    168                  Press [OK] to edit the secondary channel list
    169                  
    170                  Secondary channel list editing screen
    171                    Press [LEFT] / [RIGHT] to select a channel (from channel 11 to channel 26)
    172                    Press [UP] / [DOWN] to enable / disable the selected channel, accordingly
    173                    press [OK] to to go back to the higher menu level
    174                  
    175                <PAN ID> set the PAN ID
    176                  Press [OK] to edit the PAN ID to create / connect to
    177                  
    178                  PAN ID editing screen
    179                    Press [LEFT] / [RIGHT] to select the digit to edit
    180                    Press [UP] / [DOWN] to change the selected digit
    181                    press [OK] to to go back to the higher menu level
    182                  
    183                <BACK> go back to higher menu level
    184                  press [OK] to to go back to the higher menu level
    185                
    186              <COMMISSION> start comissionin
    187                Press [OK] to start the commissioning procedure. (Note: this is disabled if a previous comissioning is
    188                already on-going).
    189                This procedure will execute the following methods, depending on whether they are enabled or disabled
    190                in the respective configuration item):
    191                  - Touchlink (as Touchlink Initiator)
    192                  - Network Steering
    193                  - Network Formation
    194                  - Finding and Binding
    195                This screen shows the following information
    196                  Line1:
    197                    Current commissioning method being executed:
    198                      TL: Touchlink
    199                      NS: Network Steering
    200                      NF: Network Formation
    201                      FB: Finding And Binding
    202                      PL: Parent Lost (for end devices only)
    203                      -- - idle (commissioning not currently active)
    204                    Network status
    205                      NotOnNwk - not currently connected to a network
    206                      FORM - network was formed by the current device during the latest execution of the NF method
    207                      JOIN - the current device joined an existing network during the latest execution of the NS method
    208                      TCHL - the current device joined a network using touchlink 
    209                      EXST - the device was already connected to a network when the commissioning was started
    210                    Joining permission state (not showing on end devices):
    211                      CLOSED - the current device is closed for joining of other devices
    212                      OpenXXX - the current device is open for joining of other devices, and will close in XXX seconds
    213                  Line2:
    214                    IdXXX - The device is identifying (if XXX > 0), and will stop identifying in XXX seconds.
    215                    SrchXXX/YY - The device is currently performing F&B as an Initiator (if XXX > 0), and will stop in
    216                      XXX seconds. YY is the number of matching endpoints that were foind, for which bindings were 
    217                      successfully created or already existed.
    218                  
    219              <T.L. TARGET> start touchlink target
    220                Press [OK] to start / stop touchlink target functionality.
    221                When not active, pressing [OK] will start touchlink target for the duration defined by the respective
    222                configuration item.
    223                When active, pressing OK will immidiately stop touchlink target functionality.
    224                This menu item is only available if BDB_TL_TARGET is defined.
    225          
    226              <APP MENU> application-specific sub-menu
    227                Press [OK] to enter the application-specific sub-menu.
    228                See the main comment in the specific application c file for more details.
    229                
    230              <INFO> device and network information
    231                This screen has no operation related to it. It shows the following information:
    232                  Line1:
    233                    Device IEEE address
    234                  Line2: (only meaningful when the device is on a network)
    235                    nXXXX - the Network pan-id
    236                    cXX - the Channel the network is active on
    237                    aXXXX - the short Address of the device
    238                  Line3:
    239                    XXX (YYY) - the device is not connected to a network.
    240                      XXX is either ZR, ZC or ZED, depending on the build configuration.
    241                      YYY is the network-state value (see definition of devStates_t in ZDApp.h).
    242                    ZC - the device is connected to a network as a coordinator.
    243                    ZR CENT - the device is connected to a centralized network as a router.
    244                    ZR DIST - the device is connected to a distributed network as a router.
    245                    ZED pXXXX - the device is connected to a network as an end device. Parent address is XXXX.
    246          
    247              <RESET TO FN> reset the device to factory-new
    248                Press [OK] to reset the device to factory-new. The device will disconnect from the network, and 
    249                all configurations and network information will be deleted.
    250          
    251          *********************************************************************/
    252          
    253          #ifdef LEGACY_LCD_DEBUG
    254          #error Please disable LEGACY_LCD_DEBUG.
    255          #endif
    256          
    257          #if (BDB_INSTALL_CODE_USE!=BDB_INSTALL_CODE_USE_IC_CRC)
    258          #warning Install-Code functionality is disabled. To enable, make sure BDB_INSTALL_CODE_USE==BDB_INSTALL_CODE_USE_IC_CRC
    259          #endif
    260          
    261          /*********************************************************************
    262           * INCLUDES
    263           */
    264          #include "hal_types.h"
    265          #include "hal_key.h"
    266          #include "bdb_interface.h"
    267          #include "hal_lcd.h"
    268          #include "hal_led.h"
    269          #include "zcl.h"
    270          #include "zdapp.h"
    271          #include "zcl_sampleapps_ui.h"
    272          
    273          #ifdef BDB_TL_TARGET
    274            #include "bdb_touchlink_target.h"
    275          #endif
    276          
    277          
    278          /*********************************************************************
    279           * CONSTANT-MACROS AND ENUMERATIONS
    280           */
    281          enum
    282          {
    283            UI_STATE_DEFAULT = 0,
    284            UI_STATE_CONFIGURE,
    285            UI_STATE_COMMISSION,
    286          #ifdef BDB_TL_TARGET
    287            UI_STATE_TOGGLE_TL_TARGET,
    288          #endif
    289            UI_STATE_APP_SPECIFIC_MENU,
    290            UI_STATE_INFO,
    291            UI_STATE_RESET_TO_FACTORY_NEW,
    292            UI_STATE_STATE_HELP,
    293            UI_STATE_SET_INST_CODE,
    294          #ifdef BDB_TL_TARGET
    295            UI_STATE_TOUCHLINK_TARGET,
    296            UI_STATE_TOUCHLINK_STEALING,
    297          #endif
    298          #ifdef BDB_TL_INITIATOR
    299            UI_STATE_TOUCHLINK_INITIATOR,
    300          #endif
    301            UI_STATE_NETWORK_FORMATION,
    302            UI_STATE_NETWORK_STEERING,
    303            UI_STATE_FINDING_AND_BINDING,
    304            UI_STATE_SET_PRI_CHANEL_MASK_0,
    305            UI_STATE_SET_SEC_CHANEL_MASK_0,
    306            UI_STATE_SET_PAN_ID_0,
    307            UI_STATE_BACK_FROM_CONFIGURE,
    308            UI_STATE_SET_PRI_CHANEL_MASK_1,
    309            UI_STATE_SET_SEC_CHANEL_MASK_1,
    310            UI_STATE_SET_PAN_ID_1,
    311            UI_STATE_SET_INST_CODE_0,
    312          #if (ZG_BUILD_COORDINATOR_TYPE)
    313            UI_STATE_SET_INST_CODE_ADDR_0,
    314          #endif
    315            UI_STATE_SET_INST_CODE_DONE,
    316            UI_STATE_BACK_FROM_INSTALL_CODE,
    317            UI_STATE_SET_INST_CODE_1,
    318          #if (ZG_BUILD_COORDINATOR_TYPE)
    319            UI_STATE_SET_INST_CODE_ADDR_1,
    320          #endif
    321          };
    322          
    323          #define DEFAULT_COMISSIONING_MODE (BDB_COMMISSIONING_MODE_NWK_STEERING | BDB_COMMISSIONING_MODE_NWK_FORMATION | BDB_COMMISSIONING_MODE_FINDING_BINDING)
    324          
    325          #define TOUCHLINK_TIMEOUT_INCREMENTS_INITIAL 1000
    326          #define TOUCHLINK_TIMEOUT_INCREMENTS_MAX 10000000
    327          
    328          #define DEFAULT_TOUCHLINK_TARGET_TIMEOUT 30000
    329          
    330          #define LCD_CURSOR_UPDATE_INTERVAL 500
    331          
    332          #define LCD_AUTO_REFRESH_INTERVAL_ON_COMISSIONING_SCREEN 250
    333          
    334          #define LCD_AUTO_UPDATE_INTERVAL_ON_TOUCHLINK_TARGET_SCREEN 1000
    335          #define LCD_AUTO_UPDATE_INTERVAL_ON_TOUCHLINK_TARGET_SCREEN_END 50
    336          
    337          #define LCD_LINE_LENGTH 16
    338          
    339          #define STATUS_UNKNOWN 0xFF
    340          
    341          #define LCD_CURSOR_CHAR ' '
    342          
    343          #define UI_INSTALL_CODE_DEFAULT {0x83,0xFE,0xD3,0x40,0x7A,0x93,0x97,0x23,0xA5,0xC6,0x39,0xB2,0x69,0x16,0xD5,0x05,0xC3,0xB5} //This install code produces the key: 66B6900981E1EE3CA4206B6B861C02BB
    344          #define UI_INSTALL_CODE_ADDR_DEFAULT {0xE7,0xFC,0x0E,0x04,0x00,0x4B,0x12,0x00}
    345          
    346          
    347          #ifdef HAL_BOARD_CC2538
    348          #define UI_LCD_LINE_1 HAL_LCD_LINE_3
    349          #define UI_LCD_LINE_2 HAL_LCD_LINE_4
    350          #define UI_LCD_LINE_3 HAL_LCD_LINE_5
    351          
    352          #define LCD_CC2538_PREFIX_COUNT 3
    353          #else
    354          #define UI_LCD_LINE_1 HAL_LCD_LINE_1
    355          #define UI_LCD_LINE_2 HAL_LCD_LINE_2
    356          #define UI_LCD_LINE_3 HAL_LCD_LINE_3
    357          
    358          #define LCD_CC2538_PREFIX_COUNT 0
    359          #endif
    360          
    361          #define UI_LED_IDENTIFY_DUTY_CYCLE    50
    362          
    363          #define UI_LED_COORDINATOR_DUTY_CYCLE 75
    364          #define UI_LED_ROUTER_DUTY_CYCLE      95
    365          #define UI_LED_END_DEVICE_DUTY_CYCLE 100
    366          
    367          #define UI_LED_DEVICE_STATE_FLASH_TIME 4000
    368          
    369          #define UI_LED_DEVICE_STATE       HAL_LED_2
    370          #define UI_LED_IDENTIFY           HAL_LED_3
    371          #define UI_LED_NETWORK_OPEN_STATE HAL_LED_4
    372          
    373          #define NWK_OPEN_FOR_JOINING 0x1
    374          #define NWK_OPEN_TOUCHLINK_AS_TARGET 0x2
    375          
    376          /*********************************************************************
    377           * TYPEDEFS
    378           */
    379             
    380          /*********************************************************************
    381          * LOCAL FUNCTIONS DECLARATIONS
    382          */
    383          static void uiUintToString(uint32 value, char * str, uint8 base, uint8 num_of_digists, bool pad0, bool reverse);
    384          static void uiArrayToString(uint8 * buf, char * str, uint8 num_of_digists, bool big_endian);
    385          static void uiCreateChannelMaskString(uint32 channel_mask, char * str);
    386          
    387          
    388          #ifdef BDB_TL_TARGET
    389          static void uiActionToggleTlTarget(uint16 keys);
    390          #endif
    391          static void uiActionStartComissioning(uint16 keys);
    392          static void uiActionSetInstallCode(uint16 keys);
    393          static void uiActionResetToFactoryNew(uint16 keys);
    394          static void uiActionConfigureEnables(uint16 keys);
    395          static void uiActionMenuJump(uint16 keys);
    396          static void uiActionProcessConfigureChannels(uint16 keys);
    397          static void uiActionProcessConfigurePanId(uint16 keys);
    398          static void uiActionProcessPrepareInstallCode(uint16 keys);
    399          static void uiActionAppSecificMenu(uint16 keys);
    400          
    401          static void *uiProcessPermitJoin( void *duration );
    402          
    403          static void uiProcessIdentifyTimeChange( uint8 endpoint );
    404          
    405          static void uiProcessBindNotification( bdbBindNotificationData_t *data );
    406          
    407          #ifdef BDB_TL_TARGET
    408          static void uiProcessTouchlinkTargetEnable( uint8 enable );
    409          #endif
    410          
    411          /*********************************************************************
    412           * CONSTANTS
    413           */

   \                                 In  segment XDATA_ROM_C, align 1
    414          static const uiState_t gui_states_main[] = 
   \                     gui_states_main:
   \   000000   FE           DB 254
   \   000001   05           DB 5
   \   000002   0400         DW 4
   \   000004   ....         DW `??uiActionMenuJump::?relay`
   \   000006   FE           DB 254
   \   000007   FE           DB 254
   \   000008   0400         DW 4
   \   00000A   ....         DW `??uiActionMenuJump::?relay`
   \   00000C   FE           DB 254
   \   00000D   FE           DB 254
   \   00000E   0400         DW 4
   \   000010   ....         DW `??uiActionStartComissioning::?relay`
   \   000012   FE           DB 254
   \   000013   FE           DB 254
   \   000014   0400         DW 4
   \   000016   ....         DW `??uiActionAppSecificMenu::?relay`
   \   000018   FE           DB 254
   \   000019   FE           DB 254
   \   00001A   0000         DW 0
   \   00001C   0000         DW 0H
   \   00001E   00           DB 0
   \   00001F   FE           DB 254
   \   000020   0400         DW 4
   \   000022   ....         DW `??uiActionResetToFactoryNew::?relay`
   \   000024   FF           DB 255
   \   000025   FF           DB 255
   \   000026   0004         DW 1024
   \   000028   ....         DW `??uiActionMenuJump::?relay`
   \   00002A   FE           DB 254
   \   00002B   0E           DB 14
   \   00002C   0400         DW 4
   \   00002E   ....         DW `??uiActionMenuJump::?relay`
   \   000030   FE           DB 254
   \   000031   FE           DB 254
   \   000032   0400         DW 4
   \   000034   ....         DW `??uiActionConfigureEnables::?relay`
   \   000036   FE           DB 254
   \   000037   FE           DB 254
   \   000038   0400         DW 4
   \   00003A   ....         DW `??uiActionConfigureEnables::?relay`
   \   00003C   FE           DB 254
   \   00003D   FE           DB 254
   \   00003E   0400         DW 4
   \   000040   ....         DW `??uiActionConfigureEnables::?relay`
   \   000042   FE           DB 254
   \   000043   FE           DB 254
   \   000044   0400         DW 4
   \   000046   ....         DW `??uiActionMenuJump::?relay`
   \   000048   FE           DB 254
   \   000049   FE           DB 254
   \   00004A   0400         DW 4
   \   00004C   ....         DW `??uiActionMenuJump::?relay`
   \   00004E   FE           DB 254
   \   00004F   FE           DB 254
   \   000050   0400         DW 4
   \   000052   ....         DW `??uiActionMenuJump::?relay`
   \   000054   07           DB 7
   \   000055   FE           DB 254
   \   000056   0400         DW 4
   \   000058   ....         DW `??uiActionMenuJump::?relay`
   \   00005A   FF           DB 255
   \   00005B   FF           DB 255
   \   00005C   1F04         DW 1055
   \   00005E   ....         DW `??uiActionProcessConfigureChannels::?relay`
   \   000060   FF           DB 255
   \   000061   FF           DB 255
   \   000062   1F04         DW 1055
   \   000064   ....         DW `??uiActionProcessConfigureChannels::?relay`
   \   000066   FF           DB 255
   \   000067   FF           DB 255
   \   000068   1F04         DW 1055
   \   00006A   ....         DW `??uiActionProcessConfigurePanId::?relay`
   \   00006C   FE           DB 254
   \   00006D   14           DB 20
   \   00006E   0400         DW 4
   \   000070   ....         DW `??uiActionMenuJump::?relay`
   \   000072   FE           DB 254
   \   000073   FE           DB 254
   \   000074   0400         DW 4
   \   000076   ....         DW `??uiActionSetInstallCode::?relay`
   \   000078   12           DB 18
   \   000079   FE           DB 254
   \   00007A   0400         DW 4
   \   00007C   ....         DW `??uiActionMenuJump::?relay`
   \   00007E   FF           DB 255
   \   00007F   FF           DB 255
   \   000080   1F04         DW 1055
   \   000082   ....         DW `??uiActionProcessPrepareInstallCode::?relay`
    415          {
    416            /*  UI_STATE_DEFAULT                */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_RESET_TO_FACTORY_NEW,    UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
    417            /*  UI_STATE_CONFIGURE              */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
    418            /*  UI_STATE_COMMISSION             */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionStartComissioning},
    419          #ifdef BDB_TL_TARGET
    420            /*  UI_STATE_TOGGLE_TL_TARGET       */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionToggleTlTarget},
    421          #endif
    422            /*  UI_STATE_APP_SPECIFIC_MENU      */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionAppSecificMenu},
    423            /*  UI_STATE_INFO                   */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            0, NULL},
    424            /*  UI_STATE_RESET_TO_FACTORY_NEW   */ {UI_STATE_DEFAULT,               UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionResetToFactoryNew},
    425          
    426            /*  UI_STATE_STATE_HELP             */ {UI_STATE_UNCHANGED,             UI_STATE_UNCHANGED,               UI_KEY_SW_5_RELEASED,&uiActionMenuJump},
    427          
    428            /*  UI_STATE_SET_INST_CODE          */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_BACK_FROM_CONFIGURE,     UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
    429          #ifdef BDB_TL_TARGET
    430            /*  UI_STATE_TOUCHLINK_TARGET       */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED | UI_KEY_SW_1_RELEASED | UI_KEY_SW_3_RELEASED, &uiActionConfigureEnables},
    431            /*  UI_STATE_TOUCHLINK_STEALING     */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionConfigureEnables},
    432          #endif
    433          #ifdef BDB_TL_INITIATOR
    434            /*  UI_STATE_TOUCHLINK_INITIATOR    */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionConfigureEnables},
    435          #endif
    436            /*  UI_STATE_NETWORK_FORMATION      */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionConfigureEnables},
    437            /*  UI_STATE_NETWORK_STEERING       */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionConfigureEnables},
    438            /*  UI_STATE_FINDING_AND_BINDING    */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionConfigureEnables},
    439            /*  UI_STATE_SET_PRI_CHANEL_MASK_0  */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
    440            /*  UI_STATE_SET_SEC_CHANEL_MASK_0  */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
    441            /*  UI_STATE_SET_PAN_ID_0           */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
    442            /*  UI_STATE_BACK_FROM_CONFIGURE    */ {UI_STATE_SET_INST_CODE,         UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
    443          
    444            /*  UI_STATE_SET_PRI_CHANEL_MASK_1  */ {UI_STATE_UNCHANGED,             UI_STATE_UNCHANGED,               UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED | UI_KEY_SW_5_PRESSED | UI_KEY_SW_2_PRESSED  | UI_KEY_SW_4_PRESSED | UI_KEY_SW_5_RELEASED , &uiActionProcessConfigureChannels},
    445            /*  UI_STATE_SET_SEC_CHANEL_MASK_1  */ {UI_STATE_UNCHANGED,             UI_STATE_UNCHANGED,               UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED | UI_KEY_SW_5_PRESSED | UI_KEY_SW_2_PRESSED  | UI_KEY_SW_4_PRESSED | UI_KEY_SW_5_RELEASED , &uiActionProcessConfigureChannels},
    446            /*  UI_STATE_SET_PAN_ID_1           */ {UI_STATE_UNCHANGED,             UI_STATE_UNCHANGED,               UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED | UI_KEY_SW_5_PRESSED | UI_KEY_SW_2_PRESSED  | UI_KEY_SW_4_PRESSED | UI_KEY_SW_5_RELEASED , &uiActionProcessConfigurePanId},
    447          
    448            /*  UI_STATE_SET_INST_CODE_0        */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_BACK_FROM_INSTALL_CODE,  UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
    449          #if (ZG_BUILD_COORDINATOR_TYPE)
    450            /*  UI_STATE_SET_INST_CODE_ADDR_0   */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
    451          #endif  
    452            /*  UI_STATE_SET_INST_CODE_DONE     */ {UI_STATE_DEFAULT_MOVE,          UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionSetInstallCode},
    453            /*  UI_STATE_BACK_FROM_INSTALL_CODE */ {UI_STATE_SET_INST_CODE_0,       UI_STATE_DEFAULT_MOVE,            UI_KEY_SW_5_PRESSED, &uiActionMenuJump},
    454          
    455            /*  UI_STATE_SET_INST_CODE_1        */ {UI_STATE_UNCHANGED,             UI_STATE_UNCHANGED,               UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED | UI_KEY_SW_5_PRESSED | UI_KEY_SW_2_PRESSED  | UI_KEY_SW_4_PRESSED | UI_KEY_SW_5_RELEASED , &uiActionProcessPrepareInstallCode},
    456          #if (ZG_BUILD_COORDINATOR_TYPE)
    457            /*  UI_STATE_SET_INST_CODE_ADDR_1   */ {UI_STATE_UNCHANGED,             UI_STATE_UNCHANGED,               UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED | UI_KEY_SW_5_PRESSED | UI_KEY_SW_2_PRESSED  | UI_KEY_SW_4_PRESSED | UI_KEY_SW_5_RELEASED , &uiActionProcessPrepareInstallCode},
    458          #endif
    459          };
    460          
    461          /*********************************************************************
    462           * GLOBAL VARIABLES
    463           */
    464          
    465          /*********************************************************************
    466           * GLOBAL FUNCTIONS
    467           */
    468          
    469          /*********************************************************************
    470           * EXTERNAL REFERENCES
    471           */
    472          extern uint8 aExtendedAddress[];
    473          
    474          /*********************************************************************
    475           * LOCAL VARIABLES
    476           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    477          static uint8 uiAppTaskId;
   \                     uiAppTaskId:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    478          static uint16 uiLcdAutoUpdateEvent;
   \                     uiLcdAutoUpdateEvent:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    479          static uint16 * pUiIdentifyTimeAttribute;
   \                     pUiIdentifyTimeAttribute:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    480          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    481          static uiAppUpdateLcd_t uiAppUpdateLcd;
   \                     uiAppUpdateLcd:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    482          static const uiState_t * uiAppStatesMain = NULL;
   \                     uiAppStatesMain:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    483          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    484          static uint8 FBMatchesFound = 0;
   \                     FBMatchesFound:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    485          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    486          static int uiCurrentState = UI_STATE_DEFAULT;
   \                     uiCurrentState:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    487          static bool uiCommissioningIsInitializing = FALSE;
   \                     uiCommissioningIsInitializing:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    488          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    489          static uint8 uiLcdCursorLine = 0xFF;
   \                     uiLcdCursorLine:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for uiLcdCursorLine>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    490          static uint8 uiLcdCursorCol;
   \                     uiLcdCursorCol:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    491          static uint8 uiLcdCursorState;
   \                     uiLcdCursorState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    492          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    493          static uint8 uiSelectedBdbComissioningModes = DEFAULT_COMISSIONING_MODE;
   \                     uiSelectedBdbComissioningModes:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for uiSelectedBdbComissioningMod`
   \   000001                REQUIRE __INIT_XDATA_I
    494          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    495          static ZStatus_t uiAddInstallCodeLastStatus = STATUS_UNKNOWN;
   \                     uiAddInstallCodeLastStatus:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for uiAddInstallCodeLastStatus>`
   \   000001                REQUIRE __INIT_XDATA_I
    496          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    497          static char * uiCommissioningStateStr = "--";
   \                     uiCommissioningStateStr:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for uiCommissioningStateStr>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    498          static char * uiCommissioningNetworkConnrctionStr = NULL;
   \                     uiCommissioningNetworkConnrctionStr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    499          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    500          static bool uiComissioningIsActive = FALSE;
   \                     uiComissioningIsActive:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    501          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    502          static bool uiResetInitiated = FALSE;
   \                     uiResetInitiated:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    503          
    504          #ifdef BDB_TL_TARGET
    505          static uint16 uiKeyAutoRepeatEvent;
    506          static uint32 uiLcdAutoUpdateInterval;
    507          
    508          static uint16 uiAutoKeyRepeatDelay = 500;
    509          static uint32 uiAutoKeyRepeatCount = 0;
    510          
    511          static uint32 uiTouchlinkTargetTimeout = DEFAULT_TOUCHLINK_TARGET_TIMEOUT;
    512          #endif
    513          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    514          static uint8 uiInstallCode[] = UI_INSTALL_CODE_DEFAULT;
   \                     uiInstallCode:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for uiInstallCode>`
   \   000012                REQUIRE __INIT_XDATA_I
    515          #if (ZG_BUILD_COORDINATOR_TYPE)
    516          static uint8 uiInstallCodeAddr[Z_EXTADDR_LEN] = UI_INSTALL_CODE_ADDR_DEFAULT;
    517          #endif
    518          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    519          static const uiState_t * uiStates = gui_states_main;
   \                     uiStates:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for uiStates>`
   \   000002                REQUIRE __INIT_XDATA_I
    520          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    521          static char * uiAppTitleStr;
   \                     uiAppTitleStr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    522          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    523          static uint8 uiNetworkOpenStateLedDutyCycle[] = {0, 25, 75, 100}; //25% = open for joining; 75% = touchlink target; 100% = both;
   \                     uiNetworkOpenStateLedDutyCycle:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for uiNetworkOpenStateLedDutyCyc`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    524          static uint8 uiNwkOpenState = 0x00;
   \                     uiNwkOpenState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    525          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    526          static devStates_t uiNwkStateShadow = DEV_HOLD;
   \                     uiNwkStateShadow:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    527          
    528          /*********************************************************************
    529           * LOCAL UTILITY FUNCTIONS
    530           */
    531          
    532          /*********************************************************************
    533           * @fn          uiUintToString
    534           *
    535           * @brief       format an integer into a string buffer.
    536           *
    537           * @param       value - 32bit unsigned int value to be formatted
    538           *              str - pointer to a buffer to store the formatted bnumber
    539           *              base - base represenation of the value. currently only tested base 10 and 16
    540           *              num_of_digists - number of digits to include in the formatted string
    541           *              pad0 - should be set to TRUE to pad the number with leading 0's as required
    542           *              reverse - should be set to TRUE to reverse the output string
    543           *
    544           * @return      none
    545           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    546          static void uiUintToString (uint32 value, char * str, uint8 base, uint8 num_of_digists, bool pad0, bool reverse)
   \                     uiUintToString:
    547          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V4,R2
   \   000014   8B..         MOV     ?V5,R3
   \   000016   8C..         MOV     ?V6,R4
   \   000018   8D..         MOV     ?V7,R5
    548            int i;
    549            uint8 index;
    550            
    551            for (i = 0; i < num_of_digists; i++)
   \   00001A   7A00         MOV     R2,#0x0
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   F5..         MOV     ?V8,A
   \   000020   E4           CLR     A
   \   000021   F5..         MOV     ?V9,A
   \   000023   F5..         MOV     ?V10,A
   \   000025   F5..         MOV     ?V11,A
   \   000027   741B         MOV     A,#0x1b
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   FC           MOV     R4,A
   \   00002E   741C         MOV     A,#0x1c
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FE           MOV     R6,A
   \   000035   741D         MOV     A,#0x1d
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   FD           MOV     R5,A
   \   00003C   8005         SJMP    ??uiUintToString_0
   \                     ??uiUintToString_1:
   \   00003E   0A           INC     R2
   \   00003F   EA           MOV     A,R2
   \   000040   7001         JNZ     ??uiUintToString_0
   \   000042   0B           INC     R3
   \                     ??uiUintToString_0:
   \   000043   EC           MOV     A,R4
   \   000044   F8           MOV     R0,A
   \   000045   C3           CLR     C
   \   000046   EA           MOV     A,R2
   \   000047   98           SUBB    A,R0
   \   000048   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00004B   5069         JNC     ??uiUintToString_2
    552            {
    553              index = (reverse ? i : num_of_digists - 1 - i);
   \   00004D   ED           MOV     A,R5
   \   00004E   6003         JZ      ??uiUintToString_3
   \   000050   EA           MOV     A,R2
   \   000051   8007         SJMP    ??uiUintToString_4
   \                     ??uiUintToString_3:
   \   000053   EA           MOV     A,R2
   \   000054   F8           MOV     R0,A
   \   000055   74FF         MOV     A,#-0x1
   \   000057   2C           ADD     A,R4
   \   000058   C3           CLR     C
   \   000059   98           SUBB    A,R0
   \                     ??uiUintToString_4:
   \   00005A   FF           MOV     R7,A
    554              str[index] = '0' + (value % base);
   \   00005B   85....       MOV     ?V12,?V8
   \   00005E   85....       MOV     ?V13,?V9
   \   000061   85....       MOV     ?V14,?V10
   \   000064   85....       MOV     ?V15,?V11
   \   000067   85....       MOV     ?V0,?V4
   \   00006A   85....       MOV     ?V1,?V5
   \   00006D   85....       MOV     ?V2,?V6
   \   000070   85....       MOV     ?V3,?V7
   \   000073   78..         MOV     R0,#?V0
   \   000075   79..         MOV     R1,#?V12
   \   000077   12....       LCALL   ?UL_DIV_MOD
   \   00007A   E5..         MOV     A,?V12
   \   00007C   2430         ADD     A,#0x30
   \   00007E   F5..         MOV     ?V0,A
   \   000080   EF           MOV     A,R7
   \   000081   F8           MOV     R0,A
   \   000082   7419         MOV     A,#0x19
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00008A   E5..         MOV     A,?V0
   \   00008C   F0           MOVX    @DPTR,A
    555              if (str[index] > '9')
   \   00008D   C3           CLR     C
   \   00008E   943A         SUBB    A,#0x3a
   \   000090   4004         JC      ??uiUintToString_5
    556              {
    557                str[index] += 'A' - '0' - 10;
   \   000092   E0           MOVX    A,@DPTR
   \   000093   2407         ADD     A,#0x7
   \   000095   F0           MOVX    @DPTR,A
    558              }
    559              value /= base;
   \                     ??uiUintToString_5:
   \   000096   85....       MOV     ?V0,?V8
   \   000099   85....       MOV     ?V1,?V9
   \   00009C   85....       MOV     ?V2,?V10
   \   00009F   85....       MOV     ?V3,?V11
   \   0000A2   78..         MOV     R0,#?V4
   \   0000A4   79..         MOV     R1,#?V0
   \   0000A6   12....       LCALL   ?UL_DIV_MOD
    560              if ((!pad0) && (value == 0))
   \   0000A9   EE           MOV     A,R6
   \   0000AA   7092         JNZ     ??uiUintToString_1
   \   0000AC   E5..         MOV     A,?V4
   \   0000AE   45..         ORL     A,?V5
   \   0000B0   45..         ORL     A,?V6
   \   0000B2   45..         ORL     A,?V7
   \   0000B4   7088         JNZ     ??uiUintToString_1
    561              {
    562                break;
    563              }
    564            }
    565          }
   \                     ??uiUintToString_2:
   \   0000B6   7401         MOV     A,#0x1
   \   0000B8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BB   7F10         MOV     R7,#0x10
   \   0000BD   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   EB           MOV     A,R3
   \   000001                REQUIRE ??Subroutine32_0
   \   000001                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   9400         SUBB    A,#0x0
   \   000002   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000004   65D0         XRL     A,PSW
   \   000006   33           RLC     A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   F8           MOV     R0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   3400         ADDC    A,#0x0
   \   000007   F9           MOV     R1,A
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   22           RET
    566          
    567          /*********************************************************************
    568           * @fn          uiArrayToString
    569           *
    570           * @brief       format a memory buffer into a string buffer in hex representation.
    571           *
    572           * @param       buf - pointer to a bufer to be formatted
    573           *              str - pointer to a buffer to store the formatted string
    574           *              num_of_digists - number of digits to include in the formatted string
    575           *              big_endian - whether the memory content should be represented as big or little endian
    576           *
    577           * @return      none
    578           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    579          static void uiArrayToString (uint8 * buf, char * str, uint8 num_of_digists, bool big_endian)
   \                     uiArrayToString:
    580          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   \   00000D   89..         MOV     ?V6,R1
    581            int i;
    582            uint8 stringIndex;
    583            uint8 value;
    584            
    585            for (i = 0; i < num_of_digists; i++)
   \   00000F   7C00         MOV     R4,#0x0
   \   000011   7D00         MOV     R5,#0x0
   \   000013   740F         MOV     A,#0xf
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V3,A
   \   00001B   805E         SJMP    ??uiArrayToString_0
    586            {
    587              stringIndex = (big_endian ? i : num_of_digists - 1 - i);
   \                     ??uiArrayToString_1:
   \   00001D   EC           MOV     A,R4
   \   00001E   F8           MOV     R0,A
   \   00001F   74FF         MOV     A,#-0x1
   \   000021   25..         ADD     A,?V6
   \   000023   C3           CLR     C
   \   000024   98           SUBB    A,R0
   \                     ??uiArrayToString_2:
   \   000025   F5..         MOV     ?V2,A
    588              value = (buf[i / 2] >> (4 * (i % 2))) & 0x0F;
    589              str[stringIndex] = '0' + value;
   \   000027   EC           MOV     A,R4
   \   000028   F8           MOV     R0,A
   \   000029   ED           MOV     A,R5
   \   00002A   F9           MOV     R1,A
   \   00002B   7A02         MOV     R2,#0x2
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   12....       LCALL   ?S_DIV_MOD
   \   000032   89..         MOV     ?V5,R1
   \   000034   EE           MOV     A,R6
   \   000035   28           ADD     A,R0
   \   000036   F582         MOV     DPL,A
   \   000038   EF           MOV     A,R7
   \   000039   35..         ADDC    A,?V5
   \   00003B   F583         MOV     DPH,A
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F5..         MOV     ?V4,A
   \   000040   75..00       MOV     ?V5,#0x0
   \   000043   EC           MOV     A,R4
   \   000044   F8           MOV     R0,A
   \   000045   ED           MOV     A,R5
   \   000046   F9           MOV     R1,A
   \   000047   7A02         MOV     R2,#0x2
   \   000049   7B00         MOV     R3,#0x0
   \   00004B   12....       LCALL   ?S_DIV_MOD
   \   00004E   EA           MOV     A,R2
   \   00004F   33           RLC     A
   \   000050   33           RLC     A
   \   000051   54FC         ANL     A,#0xfc
   \   000053   78..         MOV     R0,#?V4
   \   000055   12....       LCALL   ?SS_SHR
   \   000058   E5..         MOV     A,?V4
   \   00005A   540F         ANL     A,#0xf
   \   00005C   2430         ADD     A,#0x30
   \   00005E   FA           MOV     R2,A
   \   00005F   A8..         MOV     R0,?V2
   \   000061   E5..         MOV     A,?V0
   \   000063   28           ADD     A,R0
   \   000064   F582         MOV     DPL,A
   \   000066   E4           CLR     A
   \   000067   35..         ADDC    A,?V1
   \   000069   F583         MOV     DPH,A
   \   00006B   EA           MOV     A,R2
   \   00006C   F0           MOVX    @DPTR,A
    590              if (str[stringIndex] > '9')
   \   00006D   C3           CLR     C
   \   00006E   943A         SUBB    A,#0x3a
   \   000070   4004         JC      ??uiArrayToString_3
    591              {
    592                str[stringIndex] += 'A' - '0' - 10;
   \   000072   E0           MOVX    A,@DPTR
   \   000073   2407         ADD     A,#0x7
   \   000075   F0           MOVX    @DPTR,A
    593              }
   \                     ??uiArrayToString_3:
   \   000076   0C           INC     R4
   \   000077   EC           MOV     A,R4
   \   000078   7001         JNZ     ??uiArrayToString_0
   \   00007A   0D           INC     R5
   \                     ??uiArrayToString_0:
   \   00007B   A8..         MOV     R0,?V6
   \   00007D   C3           CLR     C
   \   00007E   EC           MOV     A,R4
   \   00007F   98           SUBB    A,R0
   \   000080   ED           MOV     A,R5
   \   000081   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000084   5007         JNC     ??uiArrayToString_4
   \   000086   E5..         MOV     A,?V3
   \   000088   6093         JZ      ??uiArrayToString_1
   \   00008A   EC           MOV     A,R4
   \   00008B   8098         SJMP    ??uiArrayToString_2
    594            }
    595          }
   \                     ??uiArrayToString_4:
   \   00008D   7F07         MOV     R7,#0x7
   \   00008F   02....       LJMP    ?BANKED_LEAVE_XDATA
    596          
    597          /*********************************************************************
    598           * @fn          uiCreateChannelMaskString
    599           *
    600           * @brief       format a channel mask into a string bugger
    601           *
    602           * @param       channel_mask - bitmask of the enabled / disabled channels (bits 11-26 represent the
    603           *                respective channels)
    604           *              str - pointer to a buffer to store the formatted string
    605           *
    606           * @return      none
    607           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    608          static void uiCreateChannelMaskString(uint32 channel_mask, char * str)
   \                     uiCreateChannelMaskString:
    609          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   \   00000E   8C..         MOV     ?V6,R4
   \   000010   8D..         MOV     ?V7,R5
    610            int i;
    611            uint32 mask = 0x00000800;
   \   000012   75..00       MOV     ?V0,#0x0
   \   000015   75..08       MOV     ?V1,#0x8
   \   000018   75..00       MOV     ?V2,#0x0
   \   00001B   75..00       MOV     ?V3,#0x0
    612            
    613            for (i = 0; i < 16; i++)
   \   00001E   7A00         MOV     R2,#0x0
   \   000020   7B00         MOV     R3,#0x0
   \   000022   7415         MOV     A,#0x15
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   12....       LCALL   ??Subroutine33_0 & 0xFFFF
    614            {
    615              str[i] = channel_mask & mask ? '*' : '-';
   \                     ??CrossCallReturnLabel_71:
   \   00002A   85....       MOV     ?V8,?V4
   \   00002D   85....       MOV     ?V9,?V5
   \   000030   85....       MOV     ?V10,?V6
   \   000033   85....       MOV     ?V11,?V7
   \   000036   78..         MOV     R0,#?V8
   \   000038   79..         MOV     R1,#?V0
   \   00003A   12....       LCALL   ?L_AND
   \   00003D   E5..         MOV     A,?V8
   \   00003F   45..         ORL     A,?V9
   \   000041   45..         ORL     A,?V10
   \   000043   45..         ORL     A,?V11
   \   000045   85..82       MOV     DPL,?XSP + 0
   \   000048   85..83       MOV     DPH,?XSP + 1
   \   00004B   6004         JZ      ??uiCreateChannelMaskString_0
   \   00004D   742A         MOV     A,#0x2a
   \   00004F   8002         SJMP    ??uiCreateChannelMaskString_1
   \                     ??uiCreateChannelMaskString_0:
   \   000051   742D         MOV     A,#0x2d
   \                     ??uiCreateChannelMaskString_1:
   \   000053   F0           MOVX    @DPTR,A
   \   000054   E0           MOVX    A,@DPTR
   \   000055   C0E0         PUSH    A
   \   000057   EC           MOV     A,R4
   \   000058   2A           ADD     A,R2
   \   000059   F582         MOV     DPL,A
   \   00005B   ED           MOV     A,R5
   \   00005C   3B           ADDC    A,R3
   \   00005D   F583         MOV     DPH,A
   \   00005F   D0E0         POP     A
   \   000061   F0           MOVX    @DPTR,A
    616              mask <<= 1;
   \   000062   7401         MOV     A,#0x1
   \   000064   78..         MOV     R0,#?V0
   \   000066   12....       LCALL   ?L_SHL
    617            }
   \   000069   0A           INC     R2
   \   00006A   EA           MOV     A,R2
   \   00006B   7001         JNZ     ??uiCreateChannelMaskString_2
   \   00006D   0B           INC     R3
   \                     ??uiCreateChannelMaskString_2:
   \   00006E   C3           CLR     C
   \   00006F   9410         SUBB    A,#0x10
   \   000071   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000074   40B4         JC      ??CrossCallReturnLabel_71
    618            
    619            str[16] = 0;
   \   000076   EC           MOV     A,R4
   \   000077   2410         ADD     A,#0x10
   \   000079   F582         MOV     DPL,A
   \   00007B   E4           CLR     A
   \   00007C   3D           ADDC    A,R5
   \   00007D   F583         MOV     DPH,A
   \   00007F   E4           CLR     A
   \   000080   F0           MOVX    @DPTR,A
    620          }
   \   000081   04           INC     A
   \   000082   12....       LCALL   ?DEALLOC_XSTACK8
   \   000085   7F0C         MOV     R7,#0xc
   \   000087   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET
    621          
    622          
    623          /*********************************************************************
    624           * LOCAL FUNCTIONS
    625           */
    626          
    627          /*********************************************************************
    628           * @fn          uiActionMenuJump
    629           *
    630           * @brief       State-machine action for jumping to another state
    631           *
    632           * @param       keys - the keypress code that triggered the call to this function
    633           *
    634           * @return      none
    635           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    636          static void uiActionMenuJump(uint16 keys)
   \                     uiActionMenuJump:
    637          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    638            switch (uiCurrentState)
   \   000005   90....       MOV     DPTR,#uiCurrentState
   \   000008   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00000B   7069         JNZ     ??uiActionMenuJump_0
   \   00000D   E5..         MOV     A,?V0
   \   00000F   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for uiActionMenuJump>_0`:
   \   000012   00           DB        0
   \   000013   0A           DB        10
   \   000014   00           DB        0
   \   000015   ....         DW        ??uiActionMenuJump_1
   \   000017   01           DB        1
   \   000018   ....         DW        ??uiActionMenuJump_2
   \   00001A   06           DB        6
   \   00001B   ....         DW        ??uiActionMenuJump_3
   \   00001D   07           DB        7
   \   00001E   ....         DW        ??uiActionMenuJump_4
   \   000020   0B           DB        11
   \   000021   ....         DW        ??uiActionMenuJump_5
   \   000023   0C           DB        12
   \   000024   ....         DW        ??uiActionMenuJump_6
   \   000026   0D           DB        13
   \   000027   ....         DW        ??uiActionMenuJump_7
   \   000029   0E           DB        14
   \   00002A   ....         DW        ??uiActionMenuJump_8
   \   00002C   12           DB        18
   \   00002D   ....         DW        ??uiActionMenuJump_9
   \   00002F   14           DB        20
   \   000030   ....         DW        ??uiActionMenuJump_2
   \   000032   ....         DW        ??uiActionMenuJump_0
    639            {
    640              case UI_STATE_DEFAULT:
    641                uiCurrentState = UI_STATE_STATE_HELP;
   \                     ??uiActionMenuJump_1:
   \   000034   90....       MOV     DPTR,#uiCurrentState
   \   000037   7406         MOV     A,#0x6
   \   000039   8037         SJMP    ??uiActionMenuJump_10
    642                break;
    643              case UI_STATE_STATE_HELP:
    644                uiCurrentState = UI_STATE_DEFAULT;
   \                     ??uiActionMenuJump_3:
   \   00003B   90....       MOV     DPTR,#uiCurrentState
   \   00003E   E4           CLR     A
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   8032         SJMP    ??uiActionMenuJump_11
    645                break;
    646              case UI_STATE_CONFIGURE:
    647                uiCurrentState = UI_STATE_SET_INST_CODE;
    648                break;
    649              case UI_STATE_BACK_FROM_CONFIGURE:
    650                uiCurrentState = UI_STATE_CONFIGURE;
   \                     ??uiActionMenuJump_8:
   \   000043   90....       MOV     DPTR,#uiCurrentState
   \   000046   7401         MOV     A,#0x1
   \   000048   8028         SJMP    ??uiActionMenuJump_10
    651                break;
    652              case UI_STATE_SET_PRI_CHANEL_MASK_0:
    653                uiCurrentState = UI_STATE_SET_PRI_CHANEL_MASK_1;
   \                     ??uiActionMenuJump_5:
   \   00004A   90....       MOV     DPTR,#uiCurrentState
   \   00004D   740F         MOV     A,#0xf
   \   00004F   8021         SJMP    ??uiActionMenuJump_10
    654                break;
    655              case UI_STATE_SET_SEC_CHANEL_MASK_0:
    656                uiCurrentState = UI_STATE_SET_SEC_CHANEL_MASK_1;
   \                     ??uiActionMenuJump_6:
   \   000051   90....       MOV     DPTR,#uiCurrentState
   \   000054   7410         MOV     A,#0x10
   \   000056   801A         SJMP    ??uiActionMenuJump_10
    657                break;
    658              case UI_STATE_SET_PAN_ID_0:
    659                uiCurrentState = UI_STATE_SET_PAN_ID_1;
   \                     ??uiActionMenuJump_7:
   \   000058   90....       MOV     DPTR,#uiCurrentState
   \   00005B   7411         MOV     A,#0x11
   \   00005D   8013         SJMP    ??uiActionMenuJump_10
    660                break;
    661              case UI_STATE_SET_INST_CODE:
    662                uiCurrentState = UI_STATE_SET_INST_CODE_0;
   \                     ??uiActionMenuJump_4:
   \   00005F   90....       MOV     DPTR,#uiCurrentState
   \   000062   7412         MOV     A,#0x12
   \   000064   800C         SJMP    ??uiActionMenuJump_10
    663                break;
    664              case UI_STATE_SET_INST_CODE_0:
    665                uiCurrentState = UI_STATE_SET_INST_CODE_1;
   \                     ??uiActionMenuJump_9:
   \   000066   90....       MOV     DPTR,#uiCurrentState
   \   000069   7415         MOV     A,#0x15
   \   00006B   8005         SJMP    ??uiActionMenuJump_10
    666                break;
    667          #if (ZG_BUILD_COORDINATOR_TYPE)
    668              case UI_STATE_SET_INST_CODE_ADDR_0:
    669                uiCurrentState = UI_STATE_SET_INST_CODE_ADDR_1;
    670                break;
    671          #endif
    672              case UI_STATE_BACK_FROM_INSTALL_CODE:
    673                uiCurrentState = UI_STATE_SET_INST_CODE;
   \                     ??uiActionMenuJump_2:
   \   00006D   90....       MOV     DPTR,#uiCurrentState
   \   000070   7407         MOV     A,#0x7
   \                     ??uiActionMenuJump_10:
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   E4           CLR     A
   \                     ??uiActionMenuJump_11:
   \   000075   F0           MOVX    @DPTR,A
    674                break;
    675            }
    676          }
   \                     ??uiActionMenuJump_0:
   \   000076                REQUIRE ?Subroutine0
   \   000076                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET
    677          
    678          /*********************************************************************
    679           * @fn          uiActionStartComissioning
    680           *
    681           * @brief       State-machine action for starting comissioning
    682           *
    683           * @param       keys - the keypress code that triggered the call to this function
    684           *
    685           * @return      none
    686           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    687          static void uiActionStartComissioning(uint16 keys)
   \                     uiActionStartComissioning:
    688          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    689            if ((!uiComissioningIsActive) && (uiSelectedBdbComissioningModes != 0))
   \   000004   90....       MOV     DPTR,#uiComissioningIsActive
   \   000007   E0           MOVX    A,@DPTR
   \   000008   703D         JNZ     ??uiActionStartComissioning_0
   \   00000A   90....       MOV     DPTR,#uiSelectedBdbComissioningModes
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6037         JZ      ??uiActionStartComissioning_0
    690            {
    691              uiComissioningIsActive = TRUE;
   \   000010   90....       MOV     DPTR,#uiComissioningIsActive
   \   000013   7401         MOV     A,#0x1
   \   000015   F0           MOVX    @DPTR,A
    692          
    693              FBMatchesFound = 0;
   \   000016   90....       MOV     DPTR,#FBMatchesFound
   \   000019   E4           CLR     A
   \   00001A   F0           MOVX    @DPTR,A
    694              
    695              //update LCD now, since bdb_StartCommissioning() is blocking for a few seconds,
    696              // and we want to give a prompt response to the user
    697              uiCommissioningIsInitializing = TRUE;
   \   00001B   90....       MOV     DPTR,#uiCommissioningIsInitializing
   \   00001E   04           INC     A
   \   00001F   F0           MOVX    @DPTR,A
    698              UI_UpdateLcd();
   \   000020                ; Setup parameters for call to function UI_UpdateLcd
   \   000020   12....       LCALL   `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
    699          
    700              //if already on the network - mark it as 'existing connection'
    701              if ((uiNwkStateShadow == DEV_END_DEVICE) || (uiNwkStateShadow == DEV_ZB_COORD) || (uiNwkStateShadow == DEV_ROUTER))
   \   000023   90....       MOV     DPTR,#uiNwkStateShadow
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6406         XRL     A,#0x6
   \   000029   600A         JZ      ??uiActionStartComissioning_1
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   6409         XRL     A,#0x9
   \   00002E   6005         JZ      ??uiActionStartComissioning_1
   \   000030   E0           MOVX    A,@DPTR
   \   000031   6407         XRL     A,#0x7
   \   000033   700A         JNZ     ??uiActionStartComissioning_2
    702              {
    703                uiCommissioningNetworkConnrctionStr = "EXST";
   \                     ??uiActionStartComissioning_1:
   \   000035   90....       MOV     DPTR,#uiCommissioningNetworkConnrctionStr
   \   000038   74..         MOV     A,#`?<Constant "EXST">` & 0xff
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   74..         MOV     A,#(`?<Constant "EXST">` >> 8) & 0xff
   \   00003E   F0           MOVX    @DPTR,A
    704              }
    705              
    706              bdb_StartCommissioning(uiSelectedBdbComissioningModes);
   \                     ??uiActionStartComissioning_2:
   \   00003F                ; Setup parameters for call to function bdb_StartCommissioning
   \   00003F   90....       MOV     DPTR,#uiSelectedBdbComissioningModes
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F9           MOV     R1,A
   \   000044   12....       LCALL   `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    707            }
    708          }
   \                     ??uiActionStartComissioning_0:
   \   000047   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    709          
    710          /*********************************************************************
    711           * @fn          uiActionSetInstallCode
    712           *
    713           * @brief       State-machine action for setting the install code
    714           *
    715           * @param       keys - the keypress code that triggered the call to this function
    716           *
    717           * @return      none
    718           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    719          static void uiActionSetInstallCode(uint16 keys)
   \                     uiActionSetInstallCode:
    720          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    721            uint16 crc = bdb_GenerateInstallCodeCRC(uiInstallCode);
   \   000005                ; Setup parameters for call to function bdb_GenerateInstallCodeCRC
   \   000005   7A..         MOV     R2,#uiInstallCode & 0xff
   \   000007   7B..         MOV     R3,#(uiInstallCode >> 8) & 0xff
   \   000009   12....       LCALL   `??bdb_GenerateInstallCodeCRC::?relay`; Banked call to: bdb_GenerateInstallCodeCRC
    722            uiInstallCode[INSTALL_CODE_LEN] = crc & 0xFF;
   \   00000C   EA           MOV     A,R2
   \   00000D   90....       MOV     DPTR,#uiInstallCode + 16
   \   000010   F0           MOVX    @DPTR,A
    723            uiInstallCode[INSTALL_CODE_LEN + 1] = crc >> 8;
   \   000011   EB           MOV     A,R3
   \   000012   A3           INC     DPTR
   \   000013   F0           MOVX    @DPTR,A
    724          
    725          #if (ZG_BUILD_COORDINATOR_TYPE)
    726            if (ZG_DEVICE_COORDINATOR_TYPE)
    727            {  
    728              uiAddInstallCodeLastStatus = bdb_addInstallCode(uiInstallCode, uiInstallCodeAddr);
    729            }
    730            else
    731            {
    732              uiAddInstallCodeLastStatus = bdb_setActiveCentralizedLinkKey(FALSE, uiInstallCode);
    733            }
    734          #else
    735            uiAddInstallCodeLastStatus = bdb_setActiveCentralizedLinkKey(FALSE, uiInstallCode);
   \   000014                ; Setup parameters for call to function bdb_setActiveCentralizedLinkKey
   \   000014   7A..         MOV     R2,#uiInstallCode & 0xff
   \   000016   7B..         MOV     R3,#(uiInstallCode >> 8) & 0xff
   \   000018   7900         MOV     R1,#0x0
   \   00001A   12....       LCALL   `??bdb_setActiveCentralizedLinkKey::?relay`; Banked call to: bdb_setActiveCentralizedLinkKey
   \   00001D   E9           MOV     A,R1
   \   00001E   90....       MOV     DPTR,#uiAddInstallCodeLastStatus
   \   000021   F0           MOVX    @DPTR,A
    736          #endif
    737          }
   \   000022   80..         SJMP    ?Subroutine0
    738          
    739          /*********************************************************************
    740           * @fn          uiActionAppSecificMenu
    741           *
    742           * @brief       State-machine action for executing the application-specific sub-menus
    743           *
    744           * @param       keys - the keypress code that triggered the call to this function
    745           *
    746           * @return      none
    747           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    748          void uiActionAppSecificMenu(uint16 keys)
   \                     uiActionAppSecificMenu:
    749          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    750            if (uiAppStatesMain != NULL)
   \   000004   90....       MOV     DPTR,#uiAppStatesMain
   \   000007   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00000A   600F         JZ      ??uiActionAppSecificMenu_0
    751            {
    752              uiStates = uiAppStatesMain;
   \   00000C   90....       MOV     DPTR,#uiStates
   \   00000F   12....       LCALL   ??Subroutine37_0 & 0xFFFF
    753              uiCurrentState = 1; //do not start from 0, which is the 'back' menu item
   \                     ??CrossCallReturnLabel_110:
   \   000012   90....       MOV     DPTR,#uiCurrentState
   \   000015   7401         MOV     A,#0x1
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   E4           CLR     A
   \   00001A   F0           MOVX    @DPTR,A
    754            }
    755          }
   \                     ??uiActionAppSecificMenu_0:
   \   00001B   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   49           ORL     A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    756          
    757          /*********************************************************************
    758           * @fn          UI_ActionBackFromAppMenu
    759           *
    760           * @brief       Application state-machine action for returning to the common menu
    761           *
    762           * @param       keys - the keypress code that triggered the call to this function
    763           *
    764           * @return      none
    765           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    766          void UI_ActionBackFromAppMenu(uint16 keys)
   \                     UI_ActionBackFromAppMenu:
    767          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    768            uiStates = gui_states_main;
   \   000004   90....       MOV     DPTR,#uiStates
   \   000007   74..         MOV     A,#gui_states_main & 0xff
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   74..         MOV     A,#(gui_states_main >> 8) & 0xff
   \   00000D   F0           MOVX    @DPTR,A
    769            uiCurrentState = UI_STATE_APP_SPECIFIC_MENU;
   \   00000E   90....       MOV     DPTR,#uiCurrentState
   \   000011   7403         MOV     A,#0x3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   E4           CLR     A
   \   000016   F0           MOVX    @DPTR,A
    770          }
   \   000017   02....       LJMP    ?Subroutine1 & 0xFFFF
    771          
    772          #ifdef BDB_TL_TARGET
    773          /*********************************************************************
    774           * @fn          uiActionToggleTlTarget
    775           *
    776           * @brief       State-machine action for toggling touchlink-target functionality
    777           *
    778           * @param       keys - the keypress code that triggered the call to this function
    779           *
    780           * @return      none
    781           */
    782          void uiActionToggleTlTarget(uint16 keys)
    783          {
    784            if (!touchLinkTargetEnabled)
    785            {
    786              if (uiTouchlinkTargetTimeout > 0)
    787              {
    788                touchLinkTarget_EnableCommissioning( uiTouchlinkTargetTimeout );
    789                uiLcdAutoUpdateInterval = LCD_AUTO_UPDATE_INTERVAL_ON_TOUCHLINK_TARGET_SCREEN;
    790              }
    791            }
    792            else
    793            {
    794              touchLinkTarget_DisableCommissioning();
    795              uiLcdAutoUpdateInterval = LCD_AUTO_UPDATE_INTERVAL_ON_TOUCHLINK_TARGET_SCREEN_END;
    796            }
    797          }
    798          #endif
    799          
    800          /*********************************************************************
    801           * @fn          uiActionProcessConfigureChannels
    802           *
    803           * @brief       State-machine action for configuring channel masks
    804           *
    805           * @param       keys - the keypress code that triggered the call to this function
    806           *
    807           * @return      none
    808           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    809          static void uiActionProcessConfigureChannels(uint16 keys)
   \                     uiActionProcessConfigureChannels:
    810          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    811            uint32 * channelMask;
    812            
    813            uiLcdCursorLine = 1;
   \   000005   90....       MOV     DPTR,#uiLcdCursorLine
   \   000008   7401         MOV     A,#0x1
   \   00000A   F0           MOVX    @DPTR,A
    814            uiLcdCursorState = 0;
   \   00000B   90....       MOV     DPTR,#uiLcdCursorState
   \   00000E   E4           CLR     A
   \   00000F   F0           MOVX    @DPTR,A
    815          
    816            if (uiCurrentState == UI_STATE_SET_PRI_CHANEL_MASK_1)
   \   000010   90....       MOV     DPTR,#uiCurrentState
   \   000013   E0           MOVX    A,@DPTR
   \   000014   640F         XRL     A,#0xf
   \   000016   7002         JNZ     ??uiActionProcessConfigureChannels_0
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \                     ??uiActionProcessConfigureChannels_0:
   \   00001A   7006         JNZ     ??uiActionProcessConfigureChannels_1
    817            {
    818              channelMask = &bdbAttributes.bdbPrimaryChannelSet;
   \   00001C   7C..         MOV     R4,#(bdbAttributes + 4) & 0xff
   \   00001E   7D..         MOV     R5,#((bdbAttributes + 4) >> 8) & 0xff
   \   000020   8004         SJMP    ??uiActionProcessConfigureChannels_2
    819            }
    820            else
    821            {
    822              channelMask = &bdbAttributes.bdbSecondaryChannelSet;
   \                     ??uiActionProcessConfigureChannels_1:
   \   000022   7C..         MOV     R4,#bdbAttributes & 0xff
   \   000024   7D..         MOV     R5,#(bdbAttributes >> 8) & 0xff
    823            }
    824          
    825            if (keys & UI_KEY_SW_5_RELEASED)
   \                     ??uiActionProcessConfigureChannels_2:
   \   000026   EB           MOV     A,R3
   \   000027   5404         ANL     A,#0x4
   \   000029   6005         JZ      ??uiActionProcessConfigureChannels_3
    826            {
    827              uiLcdCursorCol = 0;
   \   00002B   90....       MOV     DPTR,#uiLcdCursorCol
   \   00002E   E4           CLR     A
   \   00002F   F0           MOVX    @DPTR,A
    828            }
    829            
    830            if (keys & UI_KEY_SW_1_PRESSED)
   \                     ??uiActionProcessConfigureChannels_3:
   \   000030   EA           MOV     A,R2
   \   000031   A2E0         MOV     C,0xE0 /* A   */.0
   \   000033   5020         JNC     ??uiActionProcessConfigureChannels_4
    831            {
    832              *channelMask |= ((uint32)0x00000800 << uiLcdCursorCol);
   \   000035   75..00       MOV     ?V0,#0x0
   \   000038   75..08       MOV     ?V1,#0x8
   \   00003B   75..00       MOV     ?V2,#0x0
   \   00003E   75..00       MOV     ?V3,#0x0
   \   000041   90....       MOV     DPTR,#uiLcdCursorCol
   \   000044   E0           MOVX    A,@DPTR
   \   000045   78..         MOV     R0,#?V0
   \   000047   12....       LCALL   ?L_SHL
   \   00004A   8C82         MOV     DPL,R4
   \   00004C   8D83         MOV     DPH,R5
   \   00004E   78..         MOV     R0,#?V0
   \   000050   12....       LCALL   ?L_IOR_TO_X
    833              uiLcdCursorState = 1;
   \   000053   8027         SJMP    ??uiActionProcessConfigureChannels_5
    834            }
    835            else if (keys & UI_KEY_SW_3_PRESSED)
   \                     ??uiActionProcessConfigureChannels_4:
   \   000055   5410         ANL     A,#0x10
   \   000057   602A         JZ      ??uiActionProcessConfigureChannels_6
    836            {
    837              *channelMask &= ~(((uint32)0x00000800 << uiLcdCursorCol));
   \   000059   75..00       MOV     ?V0,#0x0
   \   00005C   75..08       MOV     ?V1,#0x8
   \   00005F   75..00       MOV     ?V2,#0x0
   \   000062   75..00       MOV     ?V3,#0x0
   \   000065   90....       MOV     DPTR,#uiLcdCursorCol
   \   000068   E0           MOVX    A,@DPTR
   \   000069   78..         MOV     R0,#?V0
   \   00006B   12....       LCALL   ?L_SHL
   \   00006E   78..         MOV     R0,#?V0
   \   000070   12....       LCALL   ?L_NOT
   \   000073   8C82         MOV     DPL,R4
   \   000075   8D83         MOV     DPH,R5
   \   000077   78..         MOV     R0,#?V0
   \   000079   12....       LCALL   ?L_AND_TO_X
    838              uiLcdCursorState = 1;
   \                     ??uiActionProcessConfigureChannels_5:
   \   00007C   90....       MOV     DPTR,#uiLcdCursorState
   \   00007F   7401         MOV     A,#0x1
   \   000081   8044         SJMP    ??CrossCallReturnLabel_0
    839            }
    840            else if (keys & UI_KEY_SW_2_PRESSED)
   \                     ??uiActionProcessConfigureChannels_6:
   \   000083   EA           MOV     A,R2
   \   000084   5402         ANL     A,#0x2
   \   000086   6010         JZ      ??uiActionProcessConfigureChannels_7
    841            {
    842              if (uiLcdCursorCol < 15)
   \   000088   90....       MOV     DPTR,#uiLcdCursorCol
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   C3           CLR     C
   \   00008D   940F         SUBB    A,#0xf
   \   00008F   5004         JNC     ??uiActionProcessConfigureChannels_8
    843              {
    844                uiLcdCursorCol++;
   \   000091   E0           MOVX    A,@DPTR
   \   000092   04           INC     A
   \   000093   8032         SJMP    ??CrossCallReturnLabel_0
    845              }
    846              else
    847              {
    848                uiLcdCursorCol = 0;
   \                     ??uiActionProcessConfigureChannels_8:
   \   000095   E4           CLR     A
   \   000096   802F         SJMP    ??CrossCallReturnLabel_0
    849              }
    850            }
    851            else if (keys & UI_KEY_SW_4_PRESSED)
   \                     ??uiActionProcessConfigureChannels_7:
   \   000098   EA           MOV     A,R2
   \   000099   5408         ANL     A,#0x8
   \   00009B   600D         JZ      ??uiActionProcessConfigureChannels_9
    852            {
    853              if (uiLcdCursorCol > 0)
   \   00009D   90....       MOV     DPTR,#uiLcdCursorCol
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   6003         JZ      ??uiActionProcessConfigureChannels_10
    854              {
    855                uiLcdCursorCol--;
   \   0000A3   14           DEC     A
   \   0000A4   8021         SJMP    ??CrossCallReturnLabel_0
    856              }
    857              else
    858              {
    859                uiLcdCursorCol = 15;
   \                     ??uiActionProcessConfigureChannels_10:
   \   0000A6   740F         MOV     A,#0xf
   \   0000A8   801D         SJMP    ??CrossCallReturnLabel_0
    860              }
    861            }
    862            else if (keys & UI_KEY_SW_5_PRESSED)
   \                     ??uiActionProcessConfigureChannels_9:
   \   0000AA   EA           MOV     A,R2
   \   0000AB   5404         ANL     A,#0x4
   \   0000AD   6019         JZ      ??uiActionProcessConfigureChannels_11
    863            {
    864              if (uiCurrentState == UI_STATE_SET_PRI_CHANEL_MASK_1)
   \   0000AF   90....       MOV     DPTR,#uiCurrentState
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   640F         XRL     A,#0xf
   \   0000B5   7002         JNZ     ??uiActionProcessConfigureChannels_12
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \                     ??uiActionProcessConfigureChannels_12:
   \   0000B9   90....       MOV     DPTR,#uiCurrentState
   \   0000BC   7004         JNZ     ??uiActionProcessConfigureChannels_13
    865              {
    866                uiCurrentState = UI_STATE_SET_PRI_CHANEL_MASK_0;
   \   0000BE   740B         MOV     A,#0xb
   \   0000C0   8002         SJMP    ??uiActionProcessConfigureChannels_14
    867              }
    868              else
    869              {
    870                uiCurrentState = UI_STATE_SET_SEC_CHANEL_MASK_0;
   \                     ??uiActionProcessConfigureChannels_13:
   \   0000C2   740C         MOV     A,#0xc
    871              }
    872              
    873              uiLcdCursorLine = 0xFF;
    874            }
   \                     ??uiActionProcessConfigureChannels_14:
   \   0000C4   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000C7   F0           MOVX    @DPTR,A
    875          }
   \                     ??uiActionProcessConfigureChannels_11:
   \   0000C8                REQUIRE ?Subroutine2
   \   0000C8                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E4           CLR     A
   \   000003   F0           MOVX    @DPTR,A
   \   000004   90....       MOV     DPTR,#uiLcdCursorLine
   \   000007   74FF         MOV     A,#-0x1
   \   000009   22           RET
    876          
    877          /*********************************************************************
    878           * @fn          uiActionProcessConfigurePanId
    879           *
    880           * @brief       State-machine action for configuring the PAN ID
    881           *
    882           * @param       keys - the keypress code that triggered the call to this function
    883           *
    884           * @return      none
    885           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    886          static void uiActionProcessConfigurePanId(uint16 keys)
   \                     uiActionProcessConfigurePanId:
    887          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    888            uint8 shift;
    889            uint8 digit;
    890            
    891            uiLcdCursorLine = 0;
   \   000005   90....       MOV     DPTR,#uiLcdCursorLine
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
    892            uiLcdCursorState = 0;
   \   00000A   90....       MOV     DPTR,#uiLcdCursorState
   \   00000D   F0           MOVX    @DPTR,A
    893            
    894            if (keys & UI_KEY_SW_5_RELEASED)
   \   00000E   EB           MOV     A,R3
   \   00000F   5404         ANL     A,#0x4
   \   000011   6006         JZ      ??uiActionProcessConfigurePanId_0
    895            {
    896              uiLcdCursorCol = 6;
   \   000013   90....       MOV     DPTR,#uiLcdCursorCol
   \   000016   7406         MOV     A,#0x6
   \   000018   F0           MOVX    @DPTR,A
    897            }
    898          
    899            if ((keys & UI_KEY_SW_1_PRESSED) || (keys & UI_KEY_SW_3_PRESSED))
   \                     ??uiActionProcessConfigurePanId_0:
   \   000019   EA           MOV     A,R2
   \   00001A   5411         ANL     A,#0x11
   \   00001C   607E         JZ      ??uiActionProcessConfigurePanId_1
    900            {
    901              shift = 4 * (9 - uiLcdCursorCol);
   \   00001E   90....       MOV     DPTR,#uiLcdCursorCol
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F8           MOV     R0,A
   \   000023   7409         MOV     A,#0x9
   \   000025   C3           CLR     C
   \   000026   98           SUBB    A,R0
   \   000027   33           RLC     A
   \   000028   33           RLC     A
   \   000029   54FC         ANL     A,#0xfc
   \   00002B   FC           MOV     R4,A
    902              digit = (zgConfigPANID >> shift) & 0xF;
   \   00002C   90....       MOV     DPTR,#zgConfigPANID
   \   00002F   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000032   F5..         MOV     ?V1,A
   \   000034   EC           MOV     A,R4
   \   000035   78..         MOV     R0,#?V0
   \   000037   12....       LCALL   ?US_SHR
   \   00003A   E5..         MOV     A,?V0
   \   00003C   540F         ANL     A,#0xf
   \   00003E   F9           MOV     R1,A
    903              if (keys & UI_KEY_SW_1_PRESSED)
   \   00003F   EA           MOV     A,R2
   \   000040   A2E0         MOV     C,0xE0 /* A   */.0
   \   000042   500D         JNC     ??uiActionProcessConfigurePanId_2
    904              {
    905                if (digit < 15)
   \   000044   E9           MOV     A,R1
   \   000045   C3           CLR     C
   \   000046   940F         SUBB    A,#0xf
   \   000048   5003         JNC     ??uiActionProcessConfigurePanId_3
    906                {
    907                  digit++;
   \   00004A   09           INC     R1
   \   00004B   8010         SJMP    ??uiActionProcessConfigurePanId_4
    908                }
    909                else
    910                {
    911                  digit = 0;
   \                     ??uiActionProcessConfigurePanId_3:
   \   00004D   7900         MOV     R1,#0x0
   \   00004F   800C         SJMP    ??uiActionProcessConfigurePanId_4
    912                }
    913              }
    914              else if (keys & UI_KEY_SW_3_PRESSED)
   \                     ??uiActionProcessConfigurePanId_2:
   \   000051   5410         ANL     A,#0x10
   \   000053   6008         JZ      ??uiActionProcessConfigurePanId_4
    915              {
    916                if (digit > 0)
   \   000055   E9           MOV     A,R1
   \   000056   6003         JZ      ??uiActionProcessConfigurePanId_5
    917                {
    918                  digit--;
   \   000058   19           DEC     R1
   \   000059   8002         SJMP    ??uiActionProcessConfigurePanId_4
    919                }
    920                else
    921                {
    922                  digit = 15;
   \                     ??uiActionProcessConfigurePanId_5:
   \   00005B   790F         MOV     R1,#0xf
    923                }
    924              }
    925          
    926              zgConfigPANID &= ~((uint32)0xF << shift);
    927              zgConfigPANID |= (uint32)digit << shift;
   \                     ??uiActionProcessConfigurePanId_4:
   \   00005D   75..0F       MOV     ?V0,#0xf
   \   000060   75..00       MOV     ?V1,#0x0
   \   000063   75..00       MOV     ?V2,#0x0
   \   000066   75..00       MOV     ?V3,#0x0
   \   000069   EC           MOV     A,R4
   \   00006A   78..         MOV     R0,#?V0
   \   00006C   12....       LCALL   ?L_SHL
   \   00006F   E5..         MOV     A,?V0
   \   000071   F4           CPL     A
   \   000072   FA           MOV     R2,A
   \   000073   E5..         MOV     A,?V1
   \   000075   F4           CPL     A
   \   000076   FB           MOV     R3,A
   \   000077   90....       MOV     DPTR,#zgConfigPANID
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   5A           ANL     A,R2
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   5B           ANL     A,R3
   \   000080   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000083   EC           MOV     A,R4
   \   000084   78..         MOV     R0,#?V0
   \   000086   12....       LCALL   ?L_SHL
   \   000089   90....       MOV     DPTR,#zgConfigPANID
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   45..         ORL     A,?V0
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   A3           INC     DPTR
   \   000091   E0           MOVX    A,@DPTR
   \   000092   45..         ORL     A,?V1
   \   000094   F0           MOVX    @DPTR,A
    928              uiLcdCursorState = 1;
   \   000095   90....       MOV     DPTR,#uiLcdCursorState
   \   000098   7401         MOV     A,#0x1
   \   00009A   805C         SJMP    ??CrossCallReturnLabel_1
    929            }
    930            else if (keys & UI_KEY_SW_2_PRESSED)
   \                     ??uiActionProcessConfigurePanId_1:
   \   00009C   EA           MOV     A,R2
   \   00009D   5402         ANL     A,#0x2
   \   00009F   600D         JZ      ??uiActionProcessConfigurePanId_6
    931            {
    932              if (uiLcdCursorCol < 9)
   \   0000A1   90....       MOV     DPTR,#uiLcdCursorCol
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   C3           CLR     C
   \   0000A6   9409         SUBB    A,#0x9
   \   0000A8   504F         JNC     ??uiActionProcessConfigurePanId_7
    933              {
    934                uiLcdCursorCol++;
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   04           INC     A
   \   0000AC   804A         SJMP    ??CrossCallReturnLabel_1
    935              }
    936            }
    937            else if (keys & UI_KEY_SW_4_PRESSED)
   \                     ??uiActionProcessConfigurePanId_6:
   \   0000AE   EA           MOV     A,R2
   \   0000AF   5408         ANL     A,#0x8
   \   0000B1   600D         JZ      ??uiActionProcessConfigurePanId_8
    938            {
    939              if (uiLcdCursorCol > 6)
   \   0000B3   90....       MOV     DPTR,#uiLcdCursorCol
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   C3           CLR     C
   \   0000B8   9407         SUBB    A,#0x7
   \   0000BA   403D         JC      ??uiActionProcessConfigurePanId_7
    940              {
    941                uiLcdCursorCol--;
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   14           DEC     A
   \   0000BE   8038         SJMP    ??CrossCallReturnLabel_1
    942              }
    943            }
    944            else if (keys & UI_KEY_SW_5_PRESSED)
   \                     ??uiActionProcessConfigurePanId_8:
   \   0000C0   EA           MOV     A,R2
   \   0000C1   5404         ANL     A,#0x4
   \   0000C3   6034         JZ      ??uiActionProcessConfigurePanId_7
    945            {
    946              osal_nv_write(ZCD_NV_PANID, 0, osal_nv_item_len( ZCD_NV_PANID ), &zgConfigPANID); //todo: check and display result of osal_nv_write()
   \   0000C5                ; Setup parameters for call to function osal_nv_item_len
   \   0000C5   7A83         MOV     R2,#-0x7d
   \   0000C7   7B00         MOV     R3,#0x0
   \   0000C9   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   0000CC   8A..         MOV     ?V0,R2
   \   0000CE   8B..         MOV     ?V1,R3
   \   0000D0                ; Setup parameters for call to function osal_nv_write
   \   0000D0   75....       MOV     ?V2,#zgConfigPANID & 0xff
   \   0000D3   75....       MOV     ?V3,#(zgConfigPANID >> 8) & 0xff
   \   0000D6   78..         MOV     R0,#?V2
   \   0000D8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DB   78..         MOV     R0,#?V0
   \   0000DD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E0   7C00         MOV     R4,#0x0
   \   0000E2   7D00         MOV     R5,#0x0
   \   0000E4   7A83         MOV     R2,#-0x7d
   \   0000E6   7B00         MOV     R3,#0x0
   \   0000E8   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000EB   7404         MOV     A,#0x4
   \   0000ED   12....       LCALL   ?DEALLOC_XSTACK8
    947          
    948              uiCurrentState = UI_STATE_SET_PAN_ID_0;
   \   0000F0   90....       MOV     DPTR,#uiCurrentState
   \   0000F3   740D         MOV     A,#0xd
   \   0000F5   12....       LCALL   ?Subroutine4 & 0xFFFF
    949              
    950              uiLcdCursorLine = 0xFF;
    951            }
   \                     ??CrossCallReturnLabel_1:
   \   0000F8   F0           MOVX    @DPTR,A
    952          }
   \                     ??uiActionProcessConfigurePanId_7:
   \   0000F9   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   89..         MOV     ?V0,R1
   \   000003   E4           CLR     A
   \   000004   F5..         MOV     ?V1,A
   \   000006   F5..         MOV     ?V2,A
   \   000008   F5..         MOV     ?V3,A
   \   00000A   22           RET
    953          
    954          /*********************************************************************
    955           * @fn          uiActionProcessPrepareInstallCode
    956           *
    957           * @brief       State-machine action for editing the install-code and the install-code address
    958           *
    959           * @param       keys - the keypress code that triggered the call to this function
    960           *
    961           * @return      none
    962           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    963          static void uiActionProcessPrepareInstallCode(uint16 keys)
   \                     uiActionProcessPrepareInstallCode:
    964          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    965            static uint8 * pCurrentModifiedField;
    966            static uint8 CurrentModifiedFieldLen;
    967            static bool CurrentModifiedFieldIsBigEndian;
    968            
    969            static uint8 index;
    970          
    971            uint8 shift;
    972            uint8 digit;
    973            uint8 bufIndex;
    974            uint16 crc;
    975          
    976            uiLcdCursorState = 0;
   \   000009   90....       MOV     DPTR,#uiLcdCursorState
   \   00000C   E4           CLR     A
   \   00000D   F0           MOVX    @DPTR,A
    977            
    978            if (keys & UI_KEY_SW_5_RELEASED)
   \   00000E   EF           MOV     A,R7
   \   00000F   5404         ANL     A,#0x4
   \   000011   602A         JZ      ??uiActionProcessPrepareInstallCode_0
    979            {
    980              index = 0;
   \   000013   90....       MOV     DPTR,#??index
   \   000016   E4           CLR     A
   \   000017   F0           MOVX    @DPTR,A
    981              
    982          #if (ZG_BUILD_COORDINATOR_TYPE)
    983              if (uiCurrentState == UI_STATE_SET_INST_CODE_ADDR_1)
    984              {
    985                pCurrentModifiedField = uiInstallCodeAddr;
    986                CurrentModifiedFieldLen = sizeof(uiInstallCodeAddr);
    987                CurrentModifiedFieldIsBigEndian = FALSE;
    988              }
    989              else
    990          #endif
    991              {
    992                pCurrentModifiedField = uiInstallCode;
   \   000018   90....       MOV     DPTR,#??pCurrentModifiedField
   \   00001B   74..         MOV     A,#uiInstallCode & 0xff
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   74..         MOV     A,#(uiInstallCode >> 8) & 0xff
   \   000021   F0           MOVX    @DPTR,A
    993                CurrentModifiedFieldLen = INSTALL_CODE_LEN;
   \   000022   90....       MOV     DPTR,#??CurrentModifiedFieldLen
   \   000025   7410         MOV     A,#0x10
   \   000027   F0           MOVX    @DPTR,A
    994                CurrentModifiedFieldIsBigEndian = TRUE;
   \   000028   90....       MOV     DPTR,#??CurrentModifiedFieldIsBigEndian
   \   00002B   7401         MOV     A,#0x1
   \   00002D   F0           MOVX    @DPTR,A
    995          
    996                crc = bdb_GenerateInstallCodeCRC(uiInstallCode);
   \   00002E                ; Setup parameters for call to function bdb_GenerateInstallCodeCRC
   \   00002E   7A..         MOV     R2,#uiInstallCode & 0xff
   \   000030   7B..         MOV     R3,#(uiInstallCode >> 8) & 0xff
   \   000032   12....       LCALL   `??bdb_GenerateInstallCodeCRC::?relay`; Banked call to: bdb_GenerateInstallCodeCRC
    997                uiInstallCode[INSTALL_CODE_LEN] = crc & 0xFF;
   \   000035   EA           MOV     A,R2
   \   000036   90....       MOV     DPTR,#uiInstallCode + 16
   \   000039   F0           MOVX    @DPTR,A
    998                uiInstallCode[INSTALL_CODE_LEN + 1] = crc >> 8;
   \   00003A   EB           MOV     A,R3
   \   00003B   A3           INC     DPTR
   \   00003C   F0           MOVX    @DPTR,A
    999              }
   1000            }
   1001          
   1002            if ((keys & UI_KEY_SW_1_PRESSED) || (keys & UI_KEY_SW_3_PRESSED))
   \                     ??uiActionProcessPrepareInstallCode_0:
   \   00003D   90....       MOV     DPTR,#??index
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FA           MOV     R2,A
   \   000042   EE           MOV     A,R6
   \   000043   5411         ANL     A,#0x11
   \   000045   FC           MOV     R4,A
   \   000046   7003         JNZ     $+5
   \   000048   02....       LJMP    ??uiActionProcessPrepareInstallCode_1 & 0xFFFF
   1003            {
   1004              shift = 4 * ((CurrentModifiedFieldIsBigEndian ? index : (index + 1)) % 2);
   \   00004B   90....       MOV     DPTR,#??CurrentModifiedFieldIsBigEndian
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   6006         JZ      ??uiActionProcessPrepareInstallCode_2
   \   000051   EA           MOV     A,R2
   \   000052   F8           MOV     R0,A
   \   000053   7900         MOV     R1,#0x0
   \   000055   8008         SJMP    ??uiActionProcessPrepareInstallCode_3
   \                     ??uiActionProcessPrepareInstallCode_2:
   \   000057   EA           MOV     A,R2
   \   000058   2401         ADD     A,#0x1
   \   00005A   F8           MOV     R0,A
   \   00005B   E4           CLR     A
   \   00005C   3400         ADDC    A,#0x0
   \   00005E   F9           MOV     R1,A
   \                     ??uiActionProcessPrepareInstallCode_3:
   \   00005F   7A02         MOV     R2,#0x2
   \   000061   7B00         MOV     R3,#0x0
   \   000063   12....       LCALL   ?S_DIV_MOD
   \   000066   EA           MOV     A,R2
   \   000067   33           RLC     A
   \   000068   33           RLC     A
   \   000069   54FC         ANL     A,#0xfc
   \   00006B   FA           MOV     R2,A
   1005              bufIndex = (CurrentModifiedFieldIsBigEndian ? (index / 2) : (CurrentModifiedFieldLen - 1 - (index / 2)));
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   90....       MOV     DPTR,#??index
   \   000070   6005         JZ      ??uiActionProcessPrepareInstallCode_4
   \   000072   E0           MOVX    A,@DPTR
   \   000073   C3           CLR     C
   \   000074   13           RRC     A
   \   000075   800B         SJMP    ??uiActionProcessPrepareInstallCode_5
   \                     ??uiActionProcessPrepareInstallCode_4:
   \   000077   E0           MOVX    A,@DPTR
   \   000078   C3           CLR     C
   \   000079   13           RRC     A
   \   00007A   F8           MOV     R0,A
   \   00007B   90....       MOV     DPTR,#??CurrentModifiedFieldLen
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   14           DEC     A
   \   000080   C3           CLR     C
   \   000081   98           SUBB    A,R0
   \                     ??uiActionProcessPrepareInstallCode_5:
   \   000082   F8           MOV     R0,A
   1006              digit = (pCurrentModifiedField[bufIndex] >> shift) & 0xF;
   \   000083   90....       MOV     DPTR,#??pCurrentModifiedField
   \   000086   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   F5..         MOV     ?V0,A
   \   00008C   75..00       MOV     ?V1,#0x0
   \   00008F   EA           MOV     A,R2
   \   000090   78..         MOV     R0,#?V0
   \   000092   12....       LCALL   ?SS_SHR
   \   000095   E5..         MOV     A,?V0
   \   000097   540F         ANL     A,#0xf
   \   000099   F9           MOV     R1,A
   1007          
   1008              if (keys & UI_KEY_SW_1_PRESSED)
   \   00009A   EE           MOV     A,R6
   \   00009B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00009D   500D         JNC     ??uiActionProcessPrepareInstallCode_6
   1009              {
   1010                if (digit < 15)
   \   00009F   E9           MOV     A,R1
   \   0000A0   C3           CLR     C
   \   0000A1   940F         SUBB    A,#0xf
   \   0000A3   5003         JNC     ??uiActionProcessPrepareInstallCode_7
   1011                {
   1012                  digit++;
   \   0000A5   09           INC     R1
   \   0000A6   8010         SJMP    ??uiActionProcessPrepareInstallCode_8
   1013                }
   1014                else
   1015                {
   1016                  digit = 0;
   \                     ??uiActionProcessPrepareInstallCode_7:
   \   0000A8   7900         MOV     R1,#0x0
   \   0000AA   800C         SJMP    ??uiActionProcessPrepareInstallCode_8
   1017                }
   1018              }
   1019              else if (keys & UI_KEY_SW_3_PRESSED)
   \                     ??uiActionProcessPrepareInstallCode_6:
   \   0000AC   5410         ANL     A,#0x10
   \   0000AE   6008         JZ      ??uiActionProcessPrepareInstallCode_8
   1020              {
   1021                if (digit > 0)
   \   0000B0   E9           MOV     A,R1
   \   0000B1   6003         JZ      ??uiActionProcessPrepareInstallCode_9
   1022                {
   1023                  digit--;
   \   0000B3   19           DEC     R1
   \   0000B4   8002         SJMP    ??uiActionProcessPrepareInstallCode_8
   1024                }
   1025                else
   1026                {
   1027                  digit = 15;
   \                     ??uiActionProcessPrepareInstallCode_9:
   \   0000B6   790F         MOV     R1,#0xf
   1028                }
   1029              }
   1030              
   1031              pCurrentModifiedField[bufIndex] &= ~((uint32)0xF << shift);
   \                     ??uiActionProcessPrepareInstallCode_8:
   \   0000B8   75..0F       MOV     ?V0,#0xf
   \   0000BB   75..00       MOV     ?V1,#0x0
   \   0000BE   75..00       MOV     ?V2,#0x0
   \   0000C1   75..00       MOV     ?V3,#0x0
   \   0000C4   EA           MOV     A,R2
   \   0000C5   78..         MOV     R0,#?V0
   \   0000C7   12....       LCALL   ?L_SHL
   \   0000CA   E5..         MOV     A,?V0
   \   0000CC   F4           CPL     A
   \   0000CD   F8           MOV     R0,A
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   58           ANL     A,R0
   \   0000D0   12....       LCALL   ?Subroutine6 & 0xFFFF
   1032              pCurrentModifiedField[bufIndex] |= (uint32)digit << shift;
   \                     ??CrossCallReturnLabel_7:
   \   0000D3   EA           MOV     A,R2
   \   0000D4   78..         MOV     R0,#?V0
   \   0000D6   12....       LCALL   ?L_SHL
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   45..         ORL     A,?V0
   \   0000DC   F0           MOVX    @DPTR,A
   1033              uiLcdCursorState = 1;
   \   0000DD   90....       MOV     DPTR,#uiLcdCursorState
   \   0000E0   7401         MOV     A,#0x1
   \   0000E2   8042         SJMP    ??uiActionProcessPrepareInstallCode_10
   1034            }
   1035            else if (keys & UI_KEY_SW_2_PRESSED)
   \                     ??uiActionProcessPrepareInstallCode_1:
   \   0000E4   EE           MOV     A,R6
   \   0000E5   5402         ANL     A,#0x2
   \   0000E7   6028         JZ      ??uiActionProcessPrepareInstallCode_11
   1036            {
   1037              if (index < CurrentModifiedFieldLen * 2 - 1)
   \   0000E9   90....       MOV     DPTR,#??CurrentModifiedFieldLen
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   25E0         ADD     A,0xE0 /* A   */
   \   0000EF   F8           MOV     R0,A
   \   0000F0   E4           CLR     A
   \   0000F1   33           RLC     A
   \   0000F2   F9           MOV     R1,A
   \   0000F3   E8           MOV     A,R0
   \   0000F4   24FF         ADD     A,#-0x1
   \   0000F6   18           DEC     R0
   \   0000F7   E9           MOV     A,R1
   \   0000F8   34FF         ADDC    A,#-0x1
   \   0000FA   F9           MOV     R1,A
   \   0000FB   C3           CLR     C
   \   0000FC   EA           MOV     A,R2
   \   0000FD   98           SUBB    A,R0
   \   0000FE   E4           CLR     A
   \   0000FF   99           SUBB    A,R1
   \   000100   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000102   65D0         XRL     A,PSW
   \   000104   33           RLC     A
   \   000105   90....       MOV     DPTR,#??index
   \   000108   5004         JNC     ??uiActionProcessPrepareInstallCode_12
   1038              {
   1039                index++;
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   04           INC     A
   \   00010C   8018         SJMP    ??uiActionProcessPrepareInstallCode_10
   1040              }
   1041              else
   1042              {
   1043                index = 0;
   \                     ??uiActionProcessPrepareInstallCode_12:
   \   00010E   E4           CLR     A
   \   00010F   8015         SJMP    ??uiActionProcessPrepareInstallCode_10
   1044              }
   1045            }
   1046            else if (keys & UI_KEY_SW_4_PRESSED)
   \                     ??uiActionProcessPrepareInstallCode_11:
   \   000111   EE           MOV     A,R6
   \   000112   5408         ANL     A,#0x8
   \   000114   6011         JZ      ??uiActionProcessPrepareInstallCode_13
   1047            {
   1048              if (index > 0)
   \   000116   E0           MOVX    A,@DPTR
   \   000117   6003         JZ      ??uiActionProcessPrepareInstallCode_14
   1049              {
   1050                index --;
   \   000119   14           DEC     A
   \   00011A   800A         SJMP    ??uiActionProcessPrepareInstallCode_10
   1051              }
   1052              else
   1053              {
   1054                index = (CurrentModifiedFieldLen * 2 - 1);
   \                     ??uiActionProcessPrepareInstallCode_14:
   \   00011C   90....       MOV     DPTR,#??CurrentModifiedFieldLen
   \   00011F   E0           MOVX    A,@DPTR
   \   000120   C3           CLR     C
   \   000121   33           RLC     A
   \   000122   14           DEC     A
   \   000123   90....       MOV     DPTR,#??index
   \                     ??uiActionProcessPrepareInstallCode_10:
   \   000126   F0           MOVX    @DPTR,A
   1055              }
   1056            }
   1057            
   1058            uiLcdCursorLine = index / LCD_LINE_LENGTH;
   \                     ??uiActionProcessPrepareInstallCode_13:
   \   000127   90....       MOV     DPTR,#??index
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   C4           SWAP    A
   \   00012C   540F         ANL     A,#0xf
   \   00012E   90....       MOV     DPTR,#uiLcdCursorLine
   \   000131   F0           MOVX    @DPTR,A
   1059            uiLcdCursorCol = index % LCD_LINE_LENGTH;
   \   000132   90....       MOV     DPTR,#??index
   \   000135   E0           MOVX    A,@DPTR
   \   000136   540F         ANL     A,#0xf
   \   000138   90....       MOV     DPTR,#uiLcdCursorCol
   \   00013B   F0           MOVX    @DPTR,A
   1060          
   1061            if ((uiCurrentState == UI_STATE_SET_INST_CODE_1) && ((keys & UI_KEY_SW_1_PRESSED) || (keys & UI_KEY_SW_3_PRESSED)))
   \   00013C   90....       MOV     DPTR,#uiCurrentState
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   6415         XRL     A,#0x15
   \   000142   7002         JNZ     ??uiActionProcessPrepareInstallCode_15
   \   000144   A3           INC     DPTR
   \   000145   E0           MOVX    A,@DPTR
   \                     ??uiActionProcessPrepareInstallCode_15:
   \   000146   7012         JNZ     ??uiActionProcessPrepareInstallCode_16
   \   000148   EC           MOV     A,R4
   \   000149   600F         JZ      ??uiActionProcessPrepareInstallCode_16
   1062            {
   1063              crc = bdb_GenerateInstallCodeCRC(uiInstallCode);
   \   00014B                ; Setup parameters for call to function bdb_GenerateInstallCodeCRC
   \   00014B   7A..         MOV     R2,#uiInstallCode & 0xff
   \   00014D   7B..         MOV     R3,#(uiInstallCode >> 8) & 0xff
   \   00014F   12....       LCALL   `??bdb_GenerateInstallCodeCRC::?relay`; Banked call to: bdb_GenerateInstallCodeCRC
   1064              uiInstallCode[INSTALL_CODE_LEN] = crc & 0xFF;
   \   000152   EA           MOV     A,R2
   \   000153   90....       MOV     DPTR,#uiInstallCode + 16
   \   000156   F0           MOVX    @DPTR,A
   1065              uiInstallCode[INSTALL_CODE_LEN + 1] = crc >> 8;
   \   000157   EB           MOV     A,R3
   \   000158   A3           INC     DPTR
   \   000159   F0           MOVX    @DPTR,A
   1066            }
   1067          
   1068            if (keys & UI_KEY_SW_5_PRESSED)
   \                     ??uiActionProcessPrepareInstallCode_16:
   \   00015A   EE           MOV     A,R6
   \   00015B   5404         ANL     A,#0x4
   \   00015D   6009         JZ      ??uiActionProcessPrepareInstallCode_17
   1069            {
   1070          #if (ZG_BUILD_COORDINATOR_TYPE)
   1071              if (uiCurrentState == UI_STATE_SET_INST_CODE_ADDR_1)
   1072              {
   1073                uiCurrentState = UI_STATE_SET_INST_CODE_ADDR_0;
   1074              }
   1075              else
   1076          #endif
   1077              {
   1078                uiCurrentState = UI_STATE_SET_INST_CODE_0;
   \   00015F   90....       MOV     DPTR,#uiCurrentState
   \   000162   7412         MOV     A,#0x12
   \   000164   12....       LCALL   ?Subroutine4 & 0xFFFF
   1079              }
   1080              
   1081              uiLcdCursorLine = 0xFF;
   1082            }
   \                     ??CrossCallReturnLabel_2:
   \   000167   F0           MOVX    @DPTR,A
   1083          }
   \                     ??uiActionProcessPrepareInstallCode_17:
   \   000168   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??pCurrentModifiedField:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??CurrentModifiedFieldLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??CurrentModifiedFieldIsBigEndian:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??index:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
   1084          
   1085          /*********************************************************************
   1086           * @fn          uiActionConfigureEnables
   1087           *
   1088           * @brief       State-machine action for toggling various configurations on and off
   1089           *
   1090           * @param       keys - the keypress code that triggered the call to this function
   1091           *
   1092           * @return      none
   1093           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1094          static void uiActionConfigureEnables(uint16 keys)
   \                     uiActionConfigureEnables:
   1095          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1096          #if defined ( BDB_TL_TARGET )
   1097            static uint32 TouchlinkTimeoutIncements = TOUCHLINK_TIMEOUT_INCREMENTS_INITIAL;
   1098          #endif
   1099          
   1100            switch (uiCurrentState)
   \   000005   90....       MOV     DPTR,#uiCurrentState
   \   000008   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00000B   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for uiActionConfigureEnables>_0`:
   \   00000E   0800         DW        8
   \   000010   02           DB        2
   \   000011   ....         DW        ??uiActionConfigureEnables_0
   \   000013   ....         DW        ??uiActionConfigureEnables_1
   \   000015   ....         DW        ??uiActionConfigureEnables_2
   \   000017   ....         DW        ??uiActionConfigureEnables_3
   1101            {
   1102          #ifdef BDB_TL_TARGET
   1103              case UI_STATE_TOUCHLINK_TARGET:
   1104                if (keys & UI_KEY_SW_1_PRESSED)
   1105                {
   1106                  if (uiTouchlinkTargetTimeout < TOUCHLINK_TARGET_PERPETUAL - TouchlinkTimeoutIncements)
   1107                  {
   1108                    uiTouchlinkTargetTimeout += TouchlinkTimeoutIncements;
   1109                  }
   1110                  else
   1111                  {
   1112                    uiTouchlinkTargetTimeout = TOUCHLINK_TARGET_PERPETUAL;
   1113                  }
   1114                }
   1115                else if ((keys & UI_KEY_SW_3_PRESSED) && (uiTouchlinkTargetTimeout >= TouchlinkTimeoutIncements))
   1116                {
   1117                  if ((uiTouchlinkTargetTimeout % TouchlinkTimeoutIncements) != 0)
   1118                  {
   1119                    uiTouchlinkTargetTimeout -= uiTouchlinkTargetTimeout % TouchlinkTimeoutIncements;
   1120                  }
   1121                  else
   1122                  {
   1123                    uiTouchlinkTargetTimeout -= TouchlinkTimeoutIncements;
   1124                  }
   1125                }
   1126          
   1127                if ((keys & (UI_KEY_SW_1_PRESSED | UI_KEY_SW_3_PRESSED)) && ((uiTouchlinkTargetTimeout > 0) && (uiTouchlinkTargetTimeout < TOUCHLINK_TARGET_PERPETUAL)))
   1128                {
   1129                  osal_start_timerEx(uiAppTaskId, uiKeyAutoRepeatEvent, uiAutoKeyRepeatDelay);
   1130                  uiAutoKeyRepeatDelay = 100;
   1131                  if (TouchlinkTimeoutIncements < TOUCHLINK_TIMEOUT_INCREMENTS_MAX)
   1132                  {
   1133                    uiAutoKeyRepeatCount++;
   1134                    if (uiAutoKeyRepeatCount == 3)
   1135                    {
   1136                      uiAutoKeyRepeatCount = 0;
   1137                      TouchlinkTimeoutIncements *= 2;
   1138                    }
   1139                  }
   1140                }
   1141                else
   1142                {
   1143                  osal_stop_timerEx(uiAppTaskId, uiKeyAutoRepeatEvent);
   1144                  uiAutoKeyRepeatDelay = 500;
   1145                  uiAutoKeyRepeatCount = 0;
   1146                  TouchlinkTimeoutIncements = 1000;
   1147                }
   1148                break;
   1149              case UI_STATE_TOUCHLINK_STEALING:
   1150                bdb_TouchlinkSetAllowStealing( ! bdb_TouchlinkGetAllowStealing() );
   1151                break;
   1152          #endif
   1153          #ifdef BDB_TL_INITIATOR
   1154              case UI_STATE_TOUCHLINK_INITIATOR:
   1155                uiSelectedBdbComissioningModes ^= BDB_COMMISSIONING_MODE_INITIATOR_TL;
   1156                break;
   1157          #endif
   1158              case UI_STATE_NETWORK_FORMATION:
   1159                uiSelectedBdbComissioningModes ^= BDB_COMMISSIONING_MODE_NWK_FORMATION;
   \                     ??uiActionConfigureEnables_1:
   \   000019   90....       MOV     DPTR,#uiSelectedBdbComissioningModes
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6404         XRL     A,#0x4
   \   00001F   800E         SJMP    ??uiActionConfigureEnables_4
   1160                break;
   1161              case UI_STATE_NETWORK_STEERING:
   1162                uiSelectedBdbComissioningModes ^= BDB_COMMISSIONING_MODE_NWK_STEERING;
   \                     ??uiActionConfigureEnables_2:
   \   000021   90....       MOV     DPTR,#uiSelectedBdbComissioningModes
   \   000024   E0           MOVX    A,@DPTR
   \   000025   6402         XRL     A,#0x2
   \   000027   8006         SJMP    ??uiActionConfigureEnables_4
   1163                break;
   1164              case UI_STATE_FINDING_AND_BINDING:
   1165                uiSelectedBdbComissioningModes ^= BDB_COMMISSIONING_MODE_FINDING_BINDING;
   \                     ??uiActionConfigureEnables_3:
   \   000029   90....       MOV     DPTR,#uiSelectedBdbComissioningModes
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6408         XRL     A,#0x8
   \                     ??uiActionConfigureEnables_4:
   \   00002F   F0           MOVX    @DPTR,A
   1166                break;
   1167            }
   1168          }
   \                     ??uiActionConfigureEnables_0:
   \   000030   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000003   F5..         MOV     ?V1,A
   \   000005   78..         MOV     R0,#?V0
   \   000007   22           RET
   1169          
   1170          /*********************************************************************
   1171           * @fn          uiActionResetToFactoryNew
   1172           *
   1173           * @brief       State-machine action for resetting the device to factory new
   1174           *
   1175           * @param       keys - the keypress code that triggered the call to this function
   1176           *
   1177           * @return      none
   1178           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1179          static void uiActionResetToFactoryNew(uint16 keys)
   \                     uiActionResetToFactoryNew:
   1180          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1181            uiResetInitiated = TRUE;
   \   000004   90....       MOV     DPTR,#uiResetInitiated
   \   000007   7401         MOV     A,#0x1
   \   000009   F0           MOVX    @DPTR,A
   1182            bdb_resetLocalAction();
   \   00000A                ; Setup parameters for call to function bdb_resetLocalAction
   \   00000A   12....       LCALL   `??bdb_resetLocalAction::?relay`; Banked call to: bdb_resetLocalAction
   1183          }
   \   00000D   02....       LJMP    ?Subroutine1 & 0xFFFF
   1184            
   1185          /*********************************************************************
   1186           * @fn          UI_MainStateMachine
   1187           *
   1188           * @brief       This is the main UI state machine engine.
   1189           *              This function should be called from the application's key handler, and also from its event-loop
   1190           *              for processing the key-repress event.
   1191           *
   1192           * @param       current_keys - a bitmask of the keys that are currently pressed, or 0xFFFF when this function
   1193           *              is invoked to handle key auto-repeat.
   1194           *
   1195           * @return      none
   1196           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1197          void UI_MainStateMachine( uint16 current_keys ) //argument is uint16 to allow 8 bits for the keys (for future use), and another unique value to mark a re-press of the previous keys.
   \                     UI_MainStateMachine:
   1198          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1199            static byte PrevKeys = 0; //holds the keys that were pressed during the previous time this function was called. (Does not hold the keys that were released.)
   1200          
   1201            uint8 SavedLcdCursorLine = uiLcdCursorLine;
   \   000005   90....       MOV     DPTR,#uiLcdCursorLine
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F5..         MOV     ?V0,A
   1202            bool LcdUpdateIsRequired = FALSE;
   1203            uint16 keys; //will hold the bitmask of the currently pressed keys at the lower 8 bits, and the keys that have just been released at the higher 8 bits.
   1204          
   1205            if (uiResetInitiated)
   \   00000B   90....       MOV     DPTR,#uiResetInitiated
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   6003         JZ      $+5
   \   000011   02....       LJMP    ??UI_MainStateMachine_0 & 0xFFFF
   1206            {
   1207              return;
   1208            }
   1209            
   1210            if (current_keys == UI_KEY_AUTO_PRESSED)
   \   000014   90....       MOV     DPTR,#??PrevKeys
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   74FF         MOV     A,#-0x1
   \   00001B   6A           XRL     A,R2
   \   00001C   7003         JNZ     ??UI_MainStateMachine_1
   \   00001E   74FF         MOV     A,#-0x1
   \   000020   6B           XRL     A,R3
   \                     ??UI_MainStateMachine_1:
   \   000021   7006         JNZ     ??UI_MainStateMachine_2
   1211            {
   1212              keys = PrevKeys;
   \   000023   E8           MOV     A,R0
   \   000024   FE           MOV     R6,A
   \   000025   7F00         MOV     R7,#0x0
   \   000027   8009         SJMP    ??UI_MainStateMachine_3
   1213            }
   1214            else
   1215            {
   1216              keys = (current_keys | (((PrevKeys ^ current_keys) & PrevKeys) << 8));
   \                     ??UI_MainStateMachine_2:
   \   000029   E8           MOV     A,R0
   \   00002A   6A           XRL     A,R2
   \   00002B   58           ANL     A,R0
   \   00002C   F9           MOV     R1,A
   \   00002D   EA           MOV     A,R2
   \   00002E   FE           MOV     R6,A
   \   00002F   EB           MOV     A,R3
   \   000030   49           ORL     A,R1
   \   000031   FF           MOV     R7,A
   1217            }
   1218            
   1219            uiLcdCursorLine = 0xFF;
   \                     ??UI_MainStateMachine_3:
   \   000032   90....       MOV     DPTR,#uiLcdCursorLine
   \   000035   74FF         MOV     A,#-0x1
   \   000037   F0           MOVX    @DPTR,A
   1220          
   1221            if ((keys & UI_KEY_SW_2_PRESSED) && (uiStates[uiCurrentState].next_state != UI_STATE_UNCHANGED))
   \   000038   90....       MOV     DPTR,#uiCurrentState
   \   00003B   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00003E   E8           MOV     A,R0
   \   00003F   75F006       MOV     B,#0x6
   \   000042   A4           MUL     AB
   \   000043   F8           MOV     R0,A
   \   000044   AAF0         MOV     R2,B
   \   000046   75F006       MOV     B,#0x6
   \   000049   E9           MOV     A,R1
   \   00004A   A4           MUL     AB
   \   00004B   2A           ADD     A,R2
   \   00004C   F9           MOV     R1,A
   \   00004D   90....       MOV     DPTR,#uiStates
   \   000050   E0           MOVX    A,@DPTR
   \   000051   28           ADD     A,R0
   \   000052   F8           MOV     R0,A
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   39           ADDC    A,R1
   \   000056   F9           MOV     R1,A
   \   000057   EE           MOV     A,R6
   \   000058   5402         ANL     A,#0x2
   \   00005A   601D         JZ      ??UI_MainStateMachine_4
   \   00005C   8882         MOV     DPL,R0
   \   00005E   8983         MOV     DPH,R1
   \   000060   E0           MOVX    A,@DPTR
   \   000061   FA           MOV     R2,A
   \   000062   74FF         MOV     A,#-0x1
   \   000064   6A           XRL     A,R2
   \   000065   6012         JZ      ??UI_MainStateMachine_4
   1222            {
   1223              if (uiStates[uiCurrentState].next_state == UI_STATE_DEFAULT_MOVE)
   \   000067   74FE         MOV     A,#-0x2
   \   000069   6A           XRL     A,R2
   \   00006A   7030         JNZ     ??UI_MainStateMachine_5
   1224              {
   1225                uiCurrentState++;
   \   00006C   90....       MOV     DPTR,#uiCurrentState
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   2401         ADD     A,#0x1
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   3400         ADDC    A,#0x0
   \   000077   802A         SJMP    ??UI_MainStateMachine_6
   1226              }
   1227              else
   1228              {
   1229                uiCurrentState = uiStates[uiCurrentState].next_state;
   1230              }
   1231              
   1232              LcdUpdateIsRequired = TRUE;
   1233            }
   1234            else if ((keys & UI_KEY_SW_4_PRESSED) && (uiStates[uiCurrentState].prev_state != UI_STATE_UNCHANGED))
   \                     ??UI_MainStateMachine_4:
   \   000079   EE           MOV     A,R6
   \   00007A   5408         ANL     A,#0x8
   \   00007C   602B         JZ      ??UI_MainStateMachine_7
   \   00007E   8882         MOV     DPL,R0
   \   000080   8983         MOV     DPH,R1
   \   000082   A3           INC     DPTR
   \   000083   E0           MOVX    A,@DPTR
   \   000084   FA           MOV     R2,A
   \   000085   74FF         MOV     A,#-0x1
   \   000087   6A           XRL     A,R2
   \   000088   601F         JZ      ??UI_MainStateMachine_7
   1235            {
   1236              if (uiStates[uiCurrentState].prev_state == UI_STATE_DEFAULT_MOVE)
   \   00008A   74FE         MOV     A,#-0x2
   \   00008C   6A           XRL     A,R2
   \   00008D   700D         JNZ     ??UI_MainStateMachine_5
   1237              {
   1238                uiCurrentState--;
   \   00008F   90....       MOV     DPTR,#uiCurrentState
   \   000092   E0           MOVX    A,@DPTR
   \   000093   24FF         ADD     A,#-0x1
   \   000095   F0           MOVX    @DPTR,A
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   34FF         ADDC    A,#-0x1
   \   00009A   8007         SJMP    ??UI_MainStateMachine_6
   1239              }
   1240              else
   1241              {
   1242                uiCurrentState = uiStates[uiCurrentState].prev_state;
   \                     ??UI_MainStateMachine_5:
   \   00009C   EA           MOV     A,R2
   \   00009D   90....       MOV     DPTR,#uiCurrentState
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   A3           INC     DPTR
   \   0000A2   E4           CLR     A
   \                     ??UI_MainStateMachine_6:
   \   0000A3   F0           MOVX    @DPTR,A
   1243              }
   1244              
   1245              LcdUpdateIsRequired = TRUE;
   1246            }
   1247            else if ((keys & uiStates[uiCurrentState].keys_mask) && (uiStates[uiCurrentState].state_func != NULL))
   1248            {
   1249              uiStates[uiCurrentState].state_func(keys);
   1250              
   1251              LcdUpdateIsRequired = TRUE;
   1252            }
   1253          
   1254            if (LcdUpdateIsRequired)
   1255            {
   1256              UI_UpdateLcd();
   \                     ??UI_MainStateMachine_8:
   \   0000A4                ; Setup parameters for call to function UI_UpdateLcd
   \   0000A4   12....       LCALL   `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
   \   0000A7   8035         SJMP    ??UI_MainStateMachine_9
   1257            }
   \                     ??UI_MainStateMachine_7:
   \   0000A9   8882         MOV     DPL,R0
   \   0000AB   8983         MOV     DPH,R1
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   5E           ANL     A,R6
   \   0000B1   FA           MOV     R2,A
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   5F           ANL     A,R7
   \   0000B5   FB           MOV     R3,A
   \   0000B6   EA           MOV     A,R2
   \   0000B7   4B           ORL     A,R3
   \   0000B8   601E         JZ      ??UI_MainStateMachine_10
   \   0000BA   8882         MOV     DPL,R0
   \   0000BC   8983         MOV     DPH,R1
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0000C5   8882         MOV     DPL,R0
   \   0000C7   8983         MOV     DPH,R1
   \   0000C9   E582         MOV     A,DPL
   \   0000CB   4583         ORL     A,DPH
   \   0000CD   6009         JZ      ??UI_MainStateMachine_10
   \   0000CF                ; Setup parameters for indirect call
   \   0000CF   EE           MOV     A,R6
   \   0000D0   FA           MOV     R2,A
   \   0000D1   EF           MOV     A,R7
   \   0000D2   FB           MOV     R3,A
   \   0000D3   12....       LCALL   ?CALL_IND
   \   0000D6   80CC         SJMP    ??UI_MainStateMachine_8
   1258            else
   1259            {
   1260              uiLcdCursorLine = SavedLcdCursorLine;
   \                     ??UI_MainStateMachine_10:
   \   0000D8   E5..         MOV     A,?V0
   \   0000DA   90....       MOV     DPTR,#uiLcdCursorLine
   \   0000DD   F0           MOVX    @DPTR,A
   1261            }
   1262          
   1263            PrevKeys = keys & 0xFF; //only remember the keys that are currently pressed. Released keys are irrelevant. the 0xFF is not needed, since the target is uint8, but it is there just so it is clear that this assignment of uint16 into uint8 is intentional.
   \                     ??UI_MainStateMachine_9:
   \   0000DE   EE           MOV     A,R6
   \   0000DF   90....       MOV     DPTR,#??PrevKeys
   \   0000E2   F0           MOVX    @DPTR,A
   1264          }
   \                     ??UI_MainStateMachine_0:
   \   0000E3                REQUIRE ?Subroutine3
   \   0000E3                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??PrevKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
   1265          
   1266          /*********************************************************************
   1267           * @fn          UI_UpdateComissioningStatus
   1268           *
   1269           * @brief       Update the comissioning status to be displayed when the respective menu-screen is selected.
   1270           *              This function should be called from the application, from within the function registered to
   1271           *              be notified about these events.
   1272           *
   1273           * @param       bdbCommissioningModeMsg - comissioning mode and state information
   1274           *
   1275           * @return      none
   1276           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1277          void UI_UpdateComissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
   \                     UI_UpdateComissioningStatus:
   1278          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1279            uiCommissioningIsInitializing = FALSE;
   \   000004   90....       MOV     DPTR,#uiCommissioningIsInitializing
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   1280            
   1281            switch(bdbCommissioningModeMsg->bdbCommissioningMode)
   \   000009   78..         MOV     R0,#`?<Constant "--">` & 0xff
   \   00000B   79..         MOV     R1,#(`?<Constant "--">` >> 8) & 0xff
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   605A         JZ      ??UI_UpdateComissioningStatus_0
   \   000015   14           DEC     A
   \   000016   602C         JZ      ??UI_UpdateComissioningStatus_1
   \   000018   14           DEC     A
   \   000019   6009         JZ      ??UI_UpdateComissioningStatus_2
   \   00001B   14           DEC     A
   \   00001C   6046         JZ      ??UI_UpdateComissioningStatus_3
   \   00001E   24FE         ADD     A,#-0x2
   \   000020   6058         JZ      ??UI_UpdateComissioningStatus_4
   \   000022   806F         SJMP    ??UI_UpdateComissioningStatus_5
   1282            {
   1283              case BDB_COMMISSIONING_FORMATION:
   1284                uiCommissioningStateStr = "NF";
   \                     ??UI_UpdateComissioningStatus_2:
   \   000024   90....       MOV     DPTR,#uiCommissioningStateStr
   \   000027   74..         MOV     A,#`?<Constant "NF">` & 0xff
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   74..         MOV     A,#(`?<Constant "NF">` >> 8) & 0xff
   \   00002D   12....       LCALL   ?Subroutine9 & 0xFFFF
   1285                if ((bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS) && (uiCommissioningNetworkConnrctionStr == NULL))
   \                     ??CrossCallReturnLabel_12:
   \   000030   7061         JNZ     ??UI_UpdateComissioningStatus_5
   \   000032   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000035   EC           MOV     A,R4
   \   000036   4D           ORL     A,R5
   \   000037   7063         JNZ     ??UI_UpdateComissioningStatus_6
   1286                {
   1287                  uiCommissioningNetworkConnrctionStr = "FORM";
   \   000039   90....       MOV     DPTR,#uiCommissioningNetworkConnrctionStr
   \   00003C   74..         MOV     A,#`?<Constant "FORM">` & 0xff
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   74..         MOV     A,#(`?<Constant "FORM">` >> 8) & 0xff
   \   000042   804E         SJMP    ??UI_UpdateComissioningStatus_7
   1288                }
   1289                break;
   1290              case BDB_COMMISSIONING_NWK_STEERING:
   1291                uiCommissioningStateStr = "NS";
   \                     ??UI_UpdateComissioningStatus_1:
   \   000044   90....       MOV     DPTR,#uiCommissioningStateStr
   \   000047   74..         MOV     A,#`?<Constant "NS">` & 0xff
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   74..         MOV     A,#(`?<Constant "NS">` >> 8) & 0xff
   \   00004D   12....       LCALL   ?Subroutine9 & 0xFFFF
   1292                if ((bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS) && (uiCommissioningNetworkConnrctionStr == NULL))
   \                     ??CrossCallReturnLabel_13:
   \   000050   7041         JNZ     ??UI_UpdateComissioningStatus_5
   \   000052   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000055   EC           MOV     A,R4
   \   000056   4D           ORL     A,R5
   \   000057   7043         JNZ     ??UI_UpdateComissioningStatus_6
   1293                {
   1294                  uiCommissioningNetworkConnrctionStr = "JOIN";
   \   000059   90....       MOV     DPTR,#uiCommissioningNetworkConnrctionStr
   \   00005C   74..         MOV     A,#`?<Constant "JOIN">` & 0xff
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   74..         MOV     A,#(`?<Constant "JOIN">` >> 8) & 0xff
   \   000062   802E         SJMP    ??UI_UpdateComissioningStatus_7
   1295                }
   1296                break;
   1297              case BDB_COMMISSIONING_FINDING_BINDING:
   1298                uiCommissioningStateStr = "FB";
   \                     ??UI_UpdateComissioningStatus_3:
   \   000064   90....       MOV     DPTR,#uiCommissioningStateStr
   \   000067   74..         MOV     A,#`?<Constant "FB">` & 0xff
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   A3           INC     DPTR
   \   00006B   74..         MOV     A,#(`?<Constant "FB">` >> 8) & 0xff
   \   00006D   8023         SJMP    ??UI_UpdateComissioningStatus_7
   1299                break;
   1300              case BDB_COMMISSIONING_INITIALIZATION:
   1301                uiCommissioningStateStr = "IN";
   \                     ??UI_UpdateComissioningStatus_0:
   \   00006F   90....       MOV     DPTR,#uiCommissioningStateStr
   \   000072   74..         MOV     A,#`?<Constant "IN">` & 0xff
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   \   000076   74..         MOV     A,#(`?<Constant "IN">` >> 8) & 0xff
   \   000078   8018         SJMP    ??UI_UpdateComissioningStatus_7
   1302                break;
   1303          #if ZG_BUILD_ENDDEVICE_TYPE    
   1304              case BDB_COMMISSIONING_PARENT_LOST:
   1305                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
   \                     ??UI_UpdateComissioningStatus_4:
   \   00007A   8A82         MOV     DPL,R2
   \   00007C   8B83         MOV     DPH,R3
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   640D         XRL     A,#0xd
   \   000081   90....       MOV     DPTR,#uiCommissioningStateStr
   \   000084   7006         JNZ     ??UI_UpdateComissioningStatus_8
   1306                {
   1307                  uiCommissioningStateStr = "--";
   \   000086   E8           MOV     A,R0
   \   000087   F0           MOVX    @DPTR,A
   \   000088   A3           INC     DPTR
   \   000089   E9           MOV     A,R1
   \   00008A   8006         SJMP    ??UI_UpdateComissioningStatus_7
   1308                }
   1309                else
   1310                {
   1311                  uiCommissioningStateStr = "PL";
   \                     ??UI_UpdateComissioningStatus_8:
   \   00008C   74..         MOV     A,#`?<Constant "PL">` & 0xff
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   A3           INC     DPTR
   \   000090   74..         MOV     A,#(`?<Constant "PL">` >> 8) & 0xff
   \                     ??UI_UpdateComissioningStatus_7:
   \   000092   F0           MOVX    @DPTR,A
   1312                }
   1313                break;
   1314          #endif
   1315          #if BDB_TOUCHLINK_CAPABILITY_ENABLED
   1316              case BDB_COMMISSIONING_TOUCHLINK:
   1317                uiCommissioningStateStr = "TL";
   1318                if ((bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS) && (uiCommissioningNetworkConnrctionStr == NULL))
   1319                {
   1320                  uiCommissioningNetworkConnrctionStr = "TCHL";
   1321                }
   1322                break;
   1323          #endif
   1324            }
   1325          
   1326            if ((bdbCommissioningModeMsg->bdbCommissioningStatus != BDB_COMMISSIONING_IN_PROGRESS) && (bdbCommissioningModeMsg->bdbRemainingCommissioningModes == 0))
   \                     ??UI_UpdateComissioningStatus_5:
   \   000093   8A82         MOV     DPL,R2
   \   000095   8B83         MOV     DPH,R3
   \   000097   E0           MOVX    A,@DPTR
   \   000098   6401         XRL     A,#0x1
   \   00009A   6014         JZ      ??UI_UpdateComissioningStatus_9
   \                     ??UI_UpdateComissioningStatus_6:
   \   00009C   8A82         MOV     DPL,R2
   \   00009E   8B83         MOV     DPH,R3
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   700B         JNZ     ??UI_UpdateComissioningStatus_9
   1327            {
   1328              uiCommissioningStateStr = "--";
   \   0000A5   90....       MOV     DPTR,#uiCommissioningStateStr
   \   0000A8   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   1329          
   1330              uiComissioningIsActive = FALSE;
   \                     ??CrossCallReturnLabel_111:
   \   0000AB   90....       MOV     DPTR,#uiComissioningIsActive
   \   0000AE   E4           CLR     A
   \   0000AF   F0           MOVX    @DPTR,A
   1331            }
   1332            
   1333            UI_UpdateLcd();
   \                     ??UI_UpdateComissioningStatus_9:
   \   0000B0                ; Setup parameters for call to function UI_UpdateLcd
   \   0000B0   12....       LCALL   `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
   1334          }
   \   0000B3                REQUIRE ?Subroutine1
   \   0000B3                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   90....       MOV     DPTR,#uiCommissioningNetworkConnrctionStr
   \   000003                REQUIRE ??Subroutine33_0
   \   000003                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET
   1335          
   1336          
   1337          void HalLcd_HW_WriteChar(uint8 line, uint8 col, char text);
   1338          
   1339          
   1340          /*********************************************************************
   1341           * @fn          UI_UpdateLcd
   1342           *
   1343           * @brief       Update the LCD display.
   1344           *              This function should be called by the application when handling the display-auto-refresh event, and
   1345           *              also whenevet an action that may change the information being displayed is executed.
   1346           *
   1347           * @param       none
   1348           *
   1349           * @return      none
   1350           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1351          void UI_UpdateLcd( void )
   \                     UI_UpdateLcd:
   1352          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 58
   \   000005   74C6         MOV     A,#-0x3a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1353            char * line[3];
   1354            char LineBuf[3][LCD_CC2538_PREFIX_COUNT + LCD_LINE_LENGTH + 1];
   1355            uint8 i;
   1356            uint8 *xad;
   1357            bool LcdAutoRefreshRequired = FALSE;
   \   00000A   7E00         MOV     R6,#0x0
   1358            uint8 FBRemainingTimeLeft;
   1359            uint8 PermitJoinDuration;
   1360            
   1361            LineBuf[0][LCD_CC2538_PREFIX_COUNT] = 0;
   \   00000C   7407         MOV     A,#0x7
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E4           CLR     A
   \   000012   F0           MOVX    @DPTR,A
   1362            LineBuf[1][LCD_CC2538_PREFIX_COUNT] = 0;
   \   000013   7418         MOV     A,#0x18
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   E4           CLR     A
   \   000019   F0           MOVX    @DPTR,A
   1363            LineBuf[2][LCD_CC2538_PREFIX_COUNT] = 0;
   \   00001A   7429         MOV     A,#0x29
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E4           CLR     A
   \   000020   F0           MOVX    @DPTR,A
   1364            line[0] = LineBuf[0] + LCD_CC2538_PREFIX_COUNT;
   \   000021   7407         MOV     A,#0x7
   \   000023   12....       LCALL   ?XSTACK_DISP100_8
   \   000026   12....       LCALL   ?Subroutine8 & 0xFFFF
   1365            line[1] = LineBuf[1] + LCD_CC2538_PREFIX_COUNT;
   \                     ??CrossCallReturnLabel_118:
   \   000029   7418         MOV     A,#0x18
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   A882         MOV     R0,DPL
   \   000030   A983         MOV     R1,DPH
   \   000032   7402         MOV     A,#0x2
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   1366            line[2] = LineBuf[2] + LCD_CC2538_PREFIX_COUNT;
   \                     ??CrossCallReturnLabel_112:
   \   00003A   7429         MOV     A,#0x29
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   A882         MOV     R0,DPL
   \   000041   A983         MOV     R1,DPH
   \   000043   7404         MOV     A,#0x4
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   1367          
   1368          #ifdef HAL_BOARD_CC2538
   1369            for (i = 0; i < LCD_CC2538_PREFIX_COUNT; i++)
   1370            {
   1371              LineBuf[0][i] = ' ';
   1372              LineBuf[1][i] = ' ';
   1373              LineBuf[2][i] = ' ';
   1374            }
   1375          #endif
   1376          
   1377            osal_stop_timerEx(uiAppTaskId, uiLcdAutoUpdateEvent);
   \                     ??CrossCallReturnLabel_113:
   \   00004B                ; Setup parameters for call to function osal_stop_timerEx
   \   00004B   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00004E   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1378          
   1379            if (uiStates == uiAppStatesMain)
   \   000051   90....       MOV     DPTR,#uiStates
   \   000054   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000057   E0           MOVX    A,@DPTR
   \   000058   68           XRL     A,R0
   \   000059   7003         JNZ     ??UI_UpdateLcd_0
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   69           XRL     A,R1
   \                     ??UI_UpdateLcd_0:
   \   00005E   7020         JNZ     ??UI_UpdateLcd_1
   1380            {
   1381              if (uiCurrentState == UI_STATE_BACK_FROM_APP_MENU)
   \   000060   90....       MOV     DPTR,#uiCurrentState
   \   000063   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000066   7003         JNZ     $+5
   \   000068   02....       LJMP    ??UI_UpdateLcd_2 & 0xFFFF
   1382              {
   1383                line[2] = "<     BACK     >";
   1384              }
   1385              else
   1386              {
   1387                uiAppUpdateLcd(uiCurrentState, line);
   \   00006B                ; Setup parameters for indirect call
   \   00006B   AA..         MOV     R2,?XSP + 0
   \   00006D   AB..         MOV     R3,?XSP + 1
   \   00006F   90....       MOV     DPTR,#uiCurrentState
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F9           MOV     R1,A
   \   000074   90....       MOV     DPTR,#uiAppUpdateLcd
   \   000077   12....       LCALL   ?Subroutine18 & 0xFFFF
   1388              }
   1389            }
   \                     ??CrossCallReturnLabel_43:
   \   00007A   12....       LCALL   ?CALL_IND
   \   00007D   02....       LJMP    ??UI_UpdateLcd_3 & 0xFFFF
   1390            else
   1391            {
   1392              switch (uiCurrentState)
   \                     ??UI_UpdateLcd_1:
   \   000080   7A..         MOV     R2,#`?<Constant "1234567890123456">` & 0xff
   \   000082   7B..         MOV     R3,#(`?<Constant "1234567890123456">` >> 8) & 0xff
   \   000084   75....       MOV     ?V4,#`?<Constant "    0x          ">` & 0xff
   \   000087   75....       MOV     ?V5,#(`?<Constant "    0x          ">` >> 8) & 0xff
   \   00008A   8E..         MOV     ?V6,R6
   \   00008C   75....       MOV     ?V0,#`?<Constant "    0xFFFF (any)">` & 0xff
   \   00008F   75....       MOV     ?V1,#(`?<Constant "    0xFFFF (any)">` >> 8) & 0xff
   \   000092   8E..         MOV     ?V2,R6
   \   000094   90....       MOV     DPTR,#uiCurrentState
   \   000097   E0           MOVX    A,@DPTR
   \   000098   F5..         MOV     ?V8,A
   \   00009A   A3           INC     DPTR
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F5..         MOV     ?V9,A
   \   00009E   78..         MOV     R0,#?V8
   \   0000A0   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for UI_UpdateLcd>_0`:
   \   0000A3   0000         DW        0
   \   0000A5   15           DB        21
   \   0000A6   ....         DW        ??UI_UpdateLcd_3
   \   0000A8   ....         DW        ??UI_UpdateLcd_4
   \   0000AA   ....         DW        ??UI_UpdateLcd_5
   \   0000AC   ....         DW        ??UI_UpdateLcd_6
   \   0000AE   ....         DW        ??UI_UpdateLcd_7
   \   0000B0   ....         DW        ??UI_UpdateLcd_8
   \   0000B2   ....         DW        ??UI_UpdateLcd_9
   \   0000B4   ....         DW        ??UI_UpdateLcd_10
   \   0000B6   ....         DW        ??UI_UpdateLcd_11
   \   0000B8   ....         DW        ??UI_UpdateLcd_12
   \   0000BA   ....         DW        ??UI_UpdateLcd_13
   \   0000BC   ....         DW        ??UI_UpdateLcd_14
   \   0000BE   ....         DW        ??UI_UpdateLcd_15
   \   0000C0   ....         DW        ??UI_UpdateLcd_16
   \   0000C2   ....         DW        ??UI_UpdateLcd_17
   \   0000C4   ....         DW        ??UI_UpdateLcd_2
   \   0000C6   ....         DW        ??UI_UpdateLcd_18
   \   0000C8   ....         DW        ??UI_UpdateLcd_19
   \   0000CA   ....         DW        ??UI_UpdateLcd_20
   \   0000CC   ....         DW        ??UI_UpdateLcd_21
   \   0000CE   ....         DW        ??UI_UpdateLcd_22
   \   0000D0   ....         DW        ??UI_UpdateLcd_2
   \   0000D2   ....         DW        ??UI_UpdateLcd_23
   1393              {
   1394                case UI_STATE_FINDING_AND_BINDING:
   1395                  line[1] = uiSelectedBdbComissioningModes & BDB_COMMISSIONING_MODE_FINDING_BINDING ? "ENABLED" : "DISABLED";
   \                     ??UI_UpdateLcd_14:
   \   0000D4   90....       MOV     DPTR,#uiSelectedBdbComissioningModes
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000DA   5006         JNC     ??UI_UpdateLcd_24
   \   0000DC   78..         MOV     R0,#`?<Constant "ENABLED">` & 0xff
   \   0000DE   79..         MOV     R1,#(`?<Constant "ENABLED">` >> 8) & 0xff
   \   0000E0   8004         SJMP    ??UI_UpdateLcd_25
   \                     ??UI_UpdateLcd_24:
   \   0000E2   78..         MOV     R0,#`?<Constant "DISABLED">` & 0xff
   \   0000E4   79..         MOV     R1,#(`?<Constant "DISABLED">` >> 8) & 0xff
   \                     ??UI_UpdateLcd_25:
   \   0000E6   7402         MOV     A,#0x2
   \   0000E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EB   12....       LCALL   ?Subroutine7 & 0xFFFF
   1396                  line[2] = "<FINDNG+BINDNG >";
   \                     ??CrossCallReturnLabel_9:
   \   0000EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F1   74..         MOV     A,#`?<Constant "<FINDNG+BINDNG >">` & 0xff
   \   0000F3   F0           MOVX    @DPTR,A
   \   0000F4   A3           INC     DPTR
   \   0000F5   74..         MOV     A,#(`?<Constant "<FINDNG+BINDNG >">` >> 8) & 0xff
   \   0000F7   02....       LJMP    ??UI_UpdateLcd_26 & 0xFFFF
   1397                  break;
   1398                case UI_STATE_BACK_FROM_CONFIGURE:
   1399                  line[2] = "<     BACK     >";
   1400                  break;
   1401                case UI_STATE_BACK_FROM_INSTALL_CODE:
   1402                  line[2] = "<     BACK     >";
   \                     ??UI_UpdateLcd_2:
   \   0000FA   7404         MOV     A,#0x4
   \   0000FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FF   74..         MOV     A,#`?<Constant "<     BACK     >">` & 0xff
   \   000101   F0           MOVX    @DPTR,A
   \   000102   A3           INC     DPTR
   \   000103   74..         MOV     A,#(`?<Constant "<     BACK     >">` >> 8) & 0xff
   \   000105   02....       LJMP    ??UI_UpdateLcd_26 & 0xFFFF
   1403                  break;
   1404                case UI_STATE_NETWORK_FORMATION:
   1405                  line[1] = uiSelectedBdbComissioningModes & BDB_COMMISSIONING_MODE_NWK_FORMATION ? "ENABLED" : "DISABLED";
   \                     ??UI_UpdateLcd_12:
   \   000108   90....       MOV     DPTR,#uiSelectedBdbComissioningModes
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   A2E2         MOV     C,0xE0 /* A   */.2
   \   00010E   5006         JNC     ??UI_UpdateLcd_27
   \   000110   78..         MOV     R0,#`?<Constant "ENABLED">` & 0xff
   \   000112   79..         MOV     R1,#(`?<Constant "ENABLED">` >> 8) & 0xff
   \   000114   8004         SJMP    ??UI_UpdateLcd_28
   \                     ??UI_UpdateLcd_27:
   \   000116   78..         MOV     R0,#`?<Constant "DISABLED">` & 0xff
   \   000118   79..         MOV     R1,#(`?<Constant "DISABLED">` >> 8) & 0xff
   \                     ??UI_UpdateLcd_28:
   \   00011A   7402         MOV     A,#0x2
   \   00011C   12....       LCALL   ?XSTACK_DISP0_8
   \   00011F   12....       LCALL   ?Subroutine7 & 0xFFFF
   1406                  line[2] = "<NWK FORMATION >";
   \                     ??CrossCallReturnLabel_10:
   \   000122   12....       LCALL   ?XSTACK_DISP0_8
   \   000125   74..         MOV     A,#`?<Constant "<NWK FORMATION >">` & 0xff
   \   000127   F0           MOVX    @DPTR,A
   \   000128   A3           INC     DPTR
   \   000129   74..         MOV     A,#(`?<Constant "<NWK FORMATION >">` >> 8) & 0xff
   \   00012B   02....       LJMP    ??UI_UpdateLcd_26 & 0xFFFF
   1407                  break;
   1408                case UI_STATE_NETWORK_STEERING:
   1409                  line[1] = uiSelectedBdbComissioningModes & BDB_COMMISSIONING_MODE_NWK_STEERING ? "ENABLED" : "DISABLED";
   \                     ??UI_UpdateLcd_13:
   \   00012E   90....       MOV     DPTR,#uiSelectedBdbComissioningModes
   \   000131   E0           MOVX    A,@DPTR
   \   000132   A2E1         MOV     C,0xE0 /* A   */.1
   \   000134   5006         JNC     ??UI_UpdateLcd_29
   \   000136   78..         MOV     R0,#`?<Constant "ENABLED">` & 0xff
   \   000138   79..         MOV     R1,#(`?<Constant "ENABLED">` >> 8) & 0xff
   \   00013A   8004         SJMP    ??UI_UpdateLcd_30
   \                     ??UI_UpdateLcd_29:
   \   00013C   78..         MOV     R0,#`?<Constant "DISABLED">` & 0xff
   \   00013E   79..         MOV     R1,#(`?<Constant "DISABLED">` >> 8) & 0xff
   \                     ??UI_UpdateLcd_30:
   \   000140   7402         MOV     A,#0x2
   \   000142   12....       LCALL   ?XSTACK_DISP0_8
   \   000145   12....       LCALL   ?Subroutine7 & 0xFFFF
   1410                  line[2] = "< NWK STEERING >";
   \                     ??CrossCallReturnLabel_11:
   \   000148   12....       LCALL   ?XSTACK_DISP0_8
   \   00014B   74..         MOV     A,#`?<Constant "< NWK STEERING >">` & 0xff
   \   00014D   F0           MOVX    @DPTR,A
   \   00014E   A3           INC     DPTR
   \   00014F   74..         MOV     A,#(`?<Constant "< NWK STEERING >">` >> 8) & 0xff
   \   000151   02....       LJMP    ??UI_UpdateLcd_26 & 0xFFFF
   1411                  break;
   1412          #ifdef BDB_TL_TARGET
   1413                case UI_STATE_TOGGLE_TL_TARGET:
   1414                  {
   1415                    uint32 temp_u32;
   1416          
   1417                    temp_u32 = touchLinkTarget_GetTimer();
   1418                    if (temp_u32 == 0)
   1419                    {
   1420                      line[1] = "DISABLED        ";
   1421                    }
   1422                    else if (temp_u32 == TOUCHLINK_TARGET_PERPETUAL)
   1423                    {
   1424                      line[1] = "ENABLED FOREVER ";
   1425                    }
   1426                    else
   1427                    {
   1428                      uiConstStrCpy(line[1], "ENABLED (     s)");
   1429                      uiUintToString( temp_u32 / 1000 + ((temp_u32 % 1000) > 0 ? 1 : 0), line[1] + 9, 10, 5, FALSE, FALSE); //note: timeouts longer than 65535 seconds will not display correctly
   1430                      osal_start_timerEx(uiAppTaskId, uiLcdAutoUpdateEvent, uiLcdAutoUpdateInterval);
   1431                    }
   1432                  }
   1433                  line[2] = "< T.L. TARGET  >";
   1434                  break;
   1435                case UI_STATE_TOUCHLINK_TARGET:
   1436                  if (uiTouchlinkTargetTimeout == 0)
   1437                  {
   1438                    line[1] = "DISABLED        ";
   1439                  }
   1440                  else if (uiTouchlinkTargetTimeout == TOUCHLINK_TARGET_PERPETUAL)
   1441                  {
   1442                    line[1] = "Enable (forever)";
   1443                  }
   1444                  else
   1445                  {
   1446                    uiConstStrCpy(line[1], "Enable For     s");
   1447                    uiUintToString( uiTouchlinkTargetTimeout / 1000 + ((uiTouchlinkTargetTimeout % 1000) > 0 ? 1 : 0), line[1] + 10, 10, 5, FALSE, FALSE); //note: timeouts longer than 65535 seconds will not display correctly
   1448                    line[1][16] = 0;
   1449                  }
   1450                  line[2] = "<T.L. TRGT TIME>";
   1451                  break;
   1452                case UI_STATE_TOUCHLINK_STEALING:
   1453                  line[1] = bdb_TouchlinkGetAllowStealing() ? "ENABLED" : "DISABLED";
   1454                  line[2] = "<T.L. STEALING >";
   1455                  break;
   1456          #endif
   1457          #ifdef BDB_TL_INITIATOR
   1458                case UI_STATE_TOUCHLINK_INITIATOR:
   1459                  line[1] = uiSelectedBdbComissioningModes & BDB_COMMISSIONING_MODE_INITIATOR_TL ? "ENABLED" : "DISABLED";
   1460                  line[2] = "<T.L. INITIATOR>";
   1461                  break;
   1462          #endif
   1463                case UI_STATE_CONFIGURE:
   1464                  line[2] = "<  CONFIGURE   >";
   \                     ??UI_UpdateLcd_5:
   \   000154   7404         MOV     A,#0x4
   \   000156   12....       LCALL   ?XSTACK_DISP0_8
   \   000159   74..         MOV     A,#`?<Constant "<  CONFIGURE   >">` & 0xff
   \   00015B   F0           MOVX    @DPTR,A
   \   00015C   A3           INC     DPTR
   \   00015D   74..         MOV     A,#(`?<Constant "<  CONFIGURE   >">` >> 8) & 0xff
   \   00015F   02....       LJMP    ??UI_UpdateLcd_26 & 0xFFFF
   1465                  break;
   1466                case UI_STATE_RESET_TO_FACTORY_NEW:
   1467                  if (uiResetInitiated)
   \                     ??UI_UpdateLcd_9:
   \   000162   90....       MOV     DPTR,#uiResetInitiated
   \   000165   E0           MOVX    A,@DPTR
   \   000166   601B         JZ      ??UI_UpdateLcd_31
   1468                  {
   1469                    line[0] = "Resetting,";
   \   000168   85..82       MOV     DPL,?XSP + 0
   \   00016B   85..83       MOV     DPH,?XSP + 1
   \   00016E   74..         MOV     A,#`?<Constant "Resetting,">` & 0xff
   \   000170   F0           MOVX    @DPTR,A
   \   000171   A3           INC     DPTR
   \   000172   74..         MOV     A,#(`?<Constant "Resetting,">` >> 8) & 0xff
   \   000174   F0           MOVX    @DPTR,A
   1470                    line[1] = "Please wait...";
   \   000175   7402         MOV     A,#0x2
   \   000177   12....       LCALL   ?XSTACK_DISP0_8
   \   00017A   74..         MOV     A,#`?<Constant "Please wait...">` & 0xff
   \   00017C   F0           MOVX    @DPTR,A
   \   00017D   A3           INC     DPTR
   \   00017E   74..         MOV     A,#(`?<Constant "Please wait...">` >> 8) & 0xff
   \   000180   02....       LJMP    ??UI_UpdateLcd_26 & 0xFFFF
   1471                  }
   1472                  else
   1473                  {
   1474                    line[2] = "< RESET TO FN  >";
   \                     ??UI_UpdateLcd_31:
   \   000183   7404         MOV     A,#0x4
   \   000185   12....       LCALL   ?XSTACK_DISP0_8
   \   000188   74..         MOV     A,#`?<Constant "< RESET TO FN  >">` & 0xff
   \   00018A   F0           MOVX    @DPTR,A
   \   00018B   A3           INC     DPTR
   \   00018C   74..         MOV     A,#(`?<Constant "< RESET TO FN  >">` >> 8) & 0xff
   \   00018E   02....       LJMP    ??UI_UpdateLcd_26 & 0xFFFF
   1475                  }
   1476                  break;
   1477                case UI_STATE_DEFAULT:
   1478                  line[0] = uiAppTitleStr;
   \                     ??UI_UpdateLcd_4:
   \   000191   90....       MOV     DPTR,#uiAppTitleStr
   \   000194   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000197   12....       LCALL   ?Subroutine8 & 0xFFFF
   1479                  line[1] = "hold OK for help";
   \                     ??CrossCallReturnLabel_119:
   \   00019A   7402         MOV     A,#0x2
   \   00019C   12....       LCALL   ?XSTACK_DISP0_8
   \   00019F   74..         MOV     A,#`?<Constant "hold OK for help">` & 0xff
   \   0001A1   F0           MOVX    @DPTR,A
   \   0001A2   A3           INC     DPTR
   \   0001A3   74..         MOV     A,#(`?<Constant "hold OK for help">` >> 8) & 0xff
   \   0001A5   F0           MOVX    @DPTR,A
   1480                  line[2] = "<     HELP     >";
   \   0001A6   7404         MOV     A,#0x4
   \   0001A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AB   74..         MOV     A,#`?<Constant "<     HELP     >">` & 0xff
   \   0001AD   F0           MOVX    @DPTR,A
   \   0001AE   A3           INC     DPTR
   \   0001AF   74..         MOV     A,#(`?<Constant "<     HELP     >">` >> 8) & 0xff
   \   0001B1   02....       LJMP    ??UI_UpdateLcd_26 & 0xFFFF
   1481                  break;
   1482                case UI_STATE_STATE_HELP:
   1483          #ifdef HAL_BOARD_CC2538
   1484                  line[0] = "< > to move     ";
   1485                  line[1] = "^ v change value";
   1486          #else
   1487                  line[0] = "\x1B \x1A to move     ";
   \                     ??UI_UpdateLcd_10:
   \   0001B4   85..82       MOV     DPL,?XSP + 0
   \   0001B7   85..83       MOV     DPH,?XSP + 1
   \   0001BA   74..         MOV     A,#`?<Constant "\\033 \\032 to move     ">` & 0xff
   \   0001BC   F0           MOVX    @DPTR,A
   \   0001BD   A3           INC     DPTR
   \   0001BE   74..         MOV     A,#(`?<Constant "\\033 \\032 to move     ">` >> 8) & 0xff
   \   0001C0   F0           MOVX    @DPTR,A
   1488                  line[1] = "\x18 \x19 change value";
   \   0001C1   7402         MOV     A,#0x2
   \   0001C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C6   74..         MOV     A,#`?<Constant "\\030 \\031 change value">` & 0xff
   \   0001C8   F0           MOVX    @DPTR,A
   \   0001C9   A3           INC     DPTR
   \   0001CA   74..         MOV     A,#(`?<Constant "\\030 \\031 change value">` >> 8) & 0xff
   \   0001CC   F0           MOVX    @DPTR,A
   1489          #endif        
   1490                  line[2] = "OK to execute   ";
   \   0001CD   7404         MOV     A,#0x4
   \   0001CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D2   74..         MOV     A,#`?<Constant "OK to execute   ">` & 0xff
   \   0001D4   F0           MOVX    @DPTR,A
   \   0001D5   A3           INC     DPTR
   \   0001D6   74..         MOV     A,#(`?<Constant "OK to execute   ">` >> 8) & 0xff
   \   0001D8   02....       LJMP    ??UI_UpdateLcd_26 & 0xFFFF
   1491                  break;
   1492                case UI_STATE_COMMISSION:
   1493                  if (uiCommissioningIsInitializing)
   \                     ??UI_UpdateLcd_6:
   \   0001DB   90....       MOV     DPTR,#uiCommissioningIsInitializing
   \   0001DE   E0           MOVX    A,@DPTR
   \   0001DF   601A         JZ      ??UI_UpdateLcd_32
   1494                  {
   1495                    uiConstStrCpy(line[0], "Please wait...  ");
   \   0001E1                ; Setup parameters for call to function osal_memcpy
   \   0001E1   75....       MOV     ?V0,#`?<Constant "Please wait...  ">` & 0xff
   \   0001E4   75....       MOV     ?V1,#(`?<Constant "Please wait...  ">` >> 8) & 0xff
   \   0001E7   78..         MOV     R0,#?V0
   \   0001E9   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001EC   7C11         MOV     R4,#0x11
   \   0001EE   7D00         MOV     R5,#0x0
   \   0001F0   7403         MOV     A,#0x3
   \   0001F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F5   12....       LCALL   ?Subroutine16 & 0xFFFF
   1496                  }
   \                     ??CrossCallReturnLabel_23:
   \   0001F8   02....       LJMP    ??UI_UpdateLcd_33 & 0xFFFF
   1497                  else
   1498                  {
   1499                    uiConstStrCpy(line[0], "xx              "); // TL/NF/NS/FB/-- TCHL/FORM/JOIN count/CLOSE
   \                     ??UI_UpdateLcd_32:
   \   0001FB                ; Setup parameters for call to function osal_memcpy
   \   0001FB   75....       MOV     ?V0,#`?<Constant "xx              ">` & 0xff
   \   0001FE   75....       MOV     ?V1,#(`?<Constant "xx              ">` >> 8) & 0xff
   \   000201   78..         MOV     R0,#?V0
   \   000203   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000206   7C11         MOV     R4,#0x11
   \   000208   7D00         MOV     R5,#0x0
   \   00020A   7403         MOV     A,#0x3
   \   00020C   12....       LCALL   ?XSTACK_DISP0_8
   \   00020F   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000212   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000215   7403         MOV     A,#0x3
   \   000217   12....       LCALL   ?DEALLOC_XSTACK8
   1500          
   1501                    osal_memcpy(line[0] + 0, uiCommissioningStateStr, 2);
   \   00021A                ; Setup parameters for call to function osal_memcpy
   \   00021A   90....       MOV     DPTR,#uiCommissioningStateStr
   \   00021D   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000220   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000223   7C02         MOV     R4,#0x2
   \   000225   7D00         MOV     R5,#0x0
   \   000227   7403         MOV     A,#0x3
   \   000229   12....       LCALL   ?XSTACK_DISP0_8
   \   00022C   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00022F   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000232   7403         MOV     A,#0x3
   \   000234   12....       LCALL   ?DEALLOC_XSTACK8
   1502          
   1503                    if ((uiNwkStateShadow != DEV_END_DEVICE) && (uiNwkStateShadow != DEV_ZB_COORD) && (uiNwkStateShadow != DEV_ROUTER))
   \   000237   85..82       MOV     DPL,?XSP + 0
   \   00023A   85..83       MOV     DPH,?XSP + 1
   \   00023D   E0           MOVX    A,@DPTR
   \   00023E   2403         ADD     A,#0x3
   \   000240   FA           MOV     R2,A
   \   000241   A3           INC     DPTR
   \   000242   E0           MOVX    A,@DPTR
   \   000243   3400         ADDC    A,#0x0
   \   000245   FB           MOV     R3,A
   \   000246   90....       MOV     DPTR,#uiNwkStateShadow
   \   000249   E0           MOVX    A,@DPTR
   \   00024A   6406         XRL     A,#0x6
   \   00024C   601A         JZ      ??UI_UpdateLcd_34
   \   00024E   E0           MOVX    A,@DPTR
   \   00024F   6409         XRL     A,#0x9
   \   000251   6015         JZ      ??UI_UpdateLcd_34
   \   000253   E0           MOVX    A,@DPTR
   \   000254   6407         XRL     A,#0x7
   \   000256   6010         JZ      ??UI_UpdateLcd_34
   1504                    {
   1505                      uiConstStrOver(line[0] + 3, "NotOnNwk");
   \   000258                ; Setup parameters for call to function osal_memcpy
   \   000258   75....       MOV     ?V0,#`?<Constant "NotOnNwk">` & 0xff
   \   00025B   75....       MOV     ?V1,#(`?<Constant "NotOnNwk">` >> 8) & 0xff
   \   00025E   78..         MOV     R0,#?V0
   \   000260   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000263   7C08         MOV     R4,#0x8
   \   000265   02....       LJMP    ??UI_UpdateLcd_35 & 0xFFFF
   1506                    }
   1507                    else
   1508                    {
   1509                      if (uiCommissioningNetworkConnrctionStr != NULL)
   \                     ??UI_UpdateLcd_34:
   \   000268   90....       MOV     DPTR,#uiCommissioningNetworkConnrctionStr
   \   00026B   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00026E   602A         JZ      ??UI_UpdateLcd_36
   1510                      {
   1511                        osal_memcpy(line[0] + 3, uiCommissioningNetworkConnrctionStr, 4);
   \   000270                ; Setup parameters for call to function osal_memcpy
   \   000270   90....       MOV     DPTR,#uiCommissioningNetworkConnrctionStr
   \   000273   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000276   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000279   7C04         MOV     R4,#0x4
   \   00027B   7D00         MOV     R5,#0x0
   \   00027D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000280   7403         MOV     A,#0x3
   \   000282   12....       LCALL   ?DEALLOC_XSTACK8
   1512                        line[0][7] = ' ';
   \   000285   85..82       MOV     DPL,?XSP + 0
   \   000288   85..83       MOV     DPH,?XSP + 1
   \   00028B   12....       LCALL   ?Subroutine31 & 0xFFFF
   1513                      }
   \                     ??CrossCallReturnLabel_80:
   \   00028E   C8           XCH     A,R0
   \   00028F   2407         ADD     A,#0x7
   \   000291   F582         MOV     DPL,A
   \   000293   E4           CLR     A
   \   000294   38           ADDC    A,R0
   \   000295   F583         MOV     DPH,A
   \   000297   7420         MOV     A,#0x20
   \   000299   F0           MOVX    @DPTR,A
   1514          
   1515                      if ((uiNwkStateShadow == DEV_ZB_COORD) || (uiNwkStateShadow == DEV_ROUTER))
   \                     ??UI_UpdateLcd_36:
   \   00029A   90....       MOV     DPTR,#uiNwkStateShadow
   \   00029D   E0           MOVX    A,@DPTR
   \   00029E   6409         XRL     A,#0x9
   \   0002A0   6005         JZ      ??UI_UpdateLcd_37
   \   0002A2   E0           MOVX    A,@DPTR
   \   0002A3   6407         XRL     A,#0x7
   \   0002A5   707E         JNZ     ??UI_UpdateLcd_38
   1516                      {
   1517                        PermitJoinDuration = NLME_GetRemainingPermitJoiningDuration();
   \                     ??UI_UpdateLcd_37:
   \   0002A7                ; Setup parameters for call to function NLME_GetRemainingPermitJoiningDuration
   \   0002A7   12....       LCALL   `??NLME_GetRemainingPermitJoiningDuration::?rela`; Banked call to: NLME_GetRemainingPermitJoiningDuration
   \   0002AA   E9           MOV     A,R1
   \   0002AB   FF           MOV     R7,A
   1518                        
   1519                        if (PermitJoinDuration > 0)
   \   0002AC   85..82       MOV     DPL,?XSP + 0
   \   0002AF   85..83       MOV     DPH,?XSP + 1
   \   0002B2   E0           MOVX    A,@DPTR
   \   0002B3   2408         ADD     A,#0x8
   \   0002B5   FA           MOV     R2,A
   \   0002B6   A3           INC     DPTR
   \   0002B7   E0           MOVX    A,@DPTR
   \   0002B8   3400         ADDC    A,#0x0
   \   0002BA   FB           MOV     R3,A
   \   0002BB   EF           MOV     A,R7
   \   0002BC   6050         JZ      ??UI_UpdateLcd_39
   1520                        {
   1521                          uiConstStrOver(line[0] + 8, "Open");
   \   0002BE                ; Setup parameters for call to function osal_memcpy
   \   0002BE   75....       MOV     ?V0,#`?<Constant "Open">` & 0xff
   \   0002C1   75....       MOV     ?V1,#(`?<Constant "Open">` >> 8) & 0xff
   \   0002C4   78..         MOV     R0,#?V0
   \   0002C6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0002C9   7C04         MOV     R4,#0x4
   \   0002CB   7D00         MOV     R5,#0x0
   \   0002CD   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0002D0   7403         MOV     A,#0x3
   \   0002D2   12....       LCALL   ?DEALLOC_XSTACK8
   1522                          uiUintToString(PermitJoinDuration, line[0] + 12, 10, 3, TRUE, FALSE);
   \   0002D5                ; Setup parameters for call to function uiUintToString
   \   0002D5   8E..         MOV     ?V0,R6
   \   0002D7   78..         MOV     R0,#?V0
   \   0002D9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002DC   75..01       MOV     ?V0,#0x1
   \   0002DF   78..         MOV     R0,#?V0
   \   0002E1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002E4   75..03       MOV     ?V0,#0x3
   \   0002E7   78..         MOV     R0,#?V0
   \   0002E9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002EC   7403         MOV     A,#0x3
   \   0002EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F1   E0           MOVX    A,@DPTR
   \   0002F2   240C         ADD     A,#0xc
   \   0002F4   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0002F7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002FA   790A         MOV     R1,#0xa
   \   0002FC   EF           MOV     A,R7
   \   0002FD   FA           MOV     R2,A
   \   0002FE   E4           CLR     A
   \   0002FF   FB           MOV     R3,A
   \   000300   FC           MOV     R4,A
   \   000301   FD           MOV     R5,A
   \   000302   12....       LCALL   `??uiUintToString::?relay`; Banked call to: uiUintToString
   \   000305   7405         MOV     A,#0x5
   \   000307   12....       LCALL   ?DEALLOC_XSTACK8
   1523                          LcdAutoRefreshRequired = TRUE;
   \   00030A   7E01         MOV     R6,#0x1
   \   00030C   8017         SJMP    ??UI_UpdateLcd_38
   1524                        }
   1525                        else
   1526                        {
   1527                          uiConstStrOver(line[0] + 8, "CLOSED");
   \                     ??UI_UpdateLcd_39:
   \   00030E                ; Setup parameters for call to function osal_memcpy
   \   00030E   75....       MOV     ?V0,#`?<Constant "CLOSED">` & 0xff
   \   000311   75....       MOV     ?V1,#(`?<Constant "CLOSED">` >> 8) & 0xff
   \   000314   78..         MOV     R0,#?V0
   \   000316   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000319   7C06         MOV     R4,#0x6
   \                     ??UI_UpdateLcd_35:
   \   00031B   7D00         MOV     R5,#0x0
   \                     ??UI_UpdateLcd_33:
   \   00031D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000320   7403         MOV     A,#0x3
   \   000322   12....       LCALL   ?DEALLOC_XSTACK8
   1528                        }
   1529                      }
   1530                     }
   1531                  }
   1532                  
   1533                  uiConstStrCpy(line[1], "Id000 Srch000/00"); // IDENTIFYING, SEARCHING   - IDFYcnt SRCHcnt
   \                     ??UI_UpdateLcd_38:
   \   000325                ; Setup parameters for call to function osal_memcpy
   \   000325   75....       MOV     ?V0,#`?<Constant "Id000 Srch000/00">` & 0xff
   \   000328   75....       MOV     ?V1,#(`?<Constant "Id000 Srch000/00">` >> 8) & 0xff
   \   00032B   78..         MOV     R0,#?V0
   \   00032D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000330   7C11         MOV     R4,#0x11
   \   000332   7D00         MOV     R5,#0x0
   \   000334   7405         MOV     A,#0x5
   \   000336   12....       LCALL   ?XSTACK_DISP0_8
   \   000339   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00033C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00033F   7403         MOV     A,#0x3
   \   000341   12....       LCALL   ?DEALLOC_XSTACK8
   1534          
   1535                  uiUintToString(*pUiIdentifyTimeAttribute, line[1] + 2, 10, 3, TRUE, FALSE);
   \   000344                ; Setup parameters for call to function uiUintToString
   \   000344   75..00       MOV     ?V0,#0x0
   \   000347   78..         MOV     R0,#?V0
   \   000349   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00034C   75..01       MOV     ?V0,#0x1
   \   00034F   78..         MOV     R0,#?V0
   \   000351   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000354   75..03       MOV     ?V0,#0x3
   \   000357   78..         MOV     R0,#?V0
   \   000359   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00035C   7405         MOV     A,#0x5
   \   00035E   12....       LCALL   ?XSTACK_DISP0_8
   \   000361   E0           MOVX    A,@DPTR
   \   000362   2402         ADD     A,#0x2
   \   000364   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000367   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00036A   790A         MOV     R1,#0xa
   \   00036C   90....       MOV     DPTR,#pUiIdentifyTimeAttribute
   \   00036F   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000372   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000375   12....       LCALL   `??uiUintToString::?relay`; Banked call to: uiUintToString
   \   000378   7405         MOV     A,#0x5
   \   00037A   12....       LCALL   ?DEALLOC_XSTACK8
   1536                  bdb_GetFBInitiatorStatus(&FBRemainingTimeLeft, NULL);
   \   00037D                ; Setup parameters for call to function bdb_GetFBInitiatorStatus
   \   00037D   7C00         MOV     R4,#0x0
   \   00037F   7D00         MOV     R5,#0x0
   \   000381   7406         MOV     A,#0x6
   \   000383   12....       LCALL   ?XSTACK_DISP101_8
   \   000386   12....       LCALL   `??bdb_GetFBInitiatorStatus::?relay`; Banked call to: bdb_GetFBInitiatorStatus
   1537                  uiUintToString(FBRemainingTimeLeft, line[1] + 10, 10, 3, TRUE, FALSE);
   \   000389                ; Setup parameters for call to function uiUintToString
   \   000389   75..00       MOV     ?V0,#0x0
   \   00038C   78..         MOV     R0,#?V0
   \   00038E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000391   75..01       MOV     ?V0,#0x1
   \   000394   78..         MOV     R0,#?V0
   \   000396   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000399   75..03       MOV     ?V0,#0x3
   \   00039C   78..         MOV     R0,#?V0
   \   00039E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003A1   7405         MOV     A,#0x5
   \   0003A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0003A6   E0           MOVX    A,@DPTR
   \   0003A7   240A         ADD     A,#0xa
   \   0003A9   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   0003AC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003AF   790A         MOV     R1,#0xa
   \   0003B1   740B         MOV     A,#0xb
   \   0003B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0003B6   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0003B9   12....       LCALL   `??uiUintToString::?relay`; Banked call to: uiUintToString
   \   0003BC   7405         MOV     A,#0x5
   \   0003BE   12....       LCALL   ?DEALLOC_XSTACK8
   1538                  uiUintToString(FBMatchesFound, line[1] + 14, 10, 2, TRUE, FALSE);
   \   0003C1                ; Setup parameters for call to function uiUintToString
   \   0003C1   75..00       MOV     ?V0,#0x0
   \   0003C4   78..         MOV     R0,#?V0
   \   0003C6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003C9   75..01       MOV     ?V0,#0x1
   \   0003CC   78..         MOV     R0,#?V0
   \   0003CE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003D1   75..02       MOV     ?V0,#0x2
   \   0003D4   78..         MOV     R0,#?V0
   \   0003D6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003D9   7405         MOV     A,#0x5
   \   0003DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0003DE   E0           MOVX    A,@DPTR
   \   0003DF   240E         ADD     A,#0xe
   \   0003E1   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   0003E4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003E7   790A         MOV     R1,#0xa
   \   0003E9   90....       MOV     DPTR,#FBMatchesFound
   \   0003EC   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0003EF   12....       LCALL   `??uiUintToString::?relay`; Banked call to: uiUintToString
   \   0003F2   7405         MOV     A,#0x5
   \   0003F4   12....       LCALL   ?DEALLOC_XSTACK8
   1539          
   1540                  if ((*pUiIdentifyTimeAttribute > 0) || (FBRemainingTimeLeft > 0) || (uiCommissioningStateStr != "--"))
   \   0003F7   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0003FA   7016         JNZ     ??UI_UpdateLcd_40
   \   0003FC   7406         MOV     A,#0x6
   \   0003FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000401   E0           MOVX    A,@DPTR
   \   000402   700E         JNZ     ??UI_UpdateLcd_40
   \   000404   90....       MOV     DPTR,#uiCommissioningStateStr
   \   000407   E0           MOVX    A,@DPTR
   \   000408   64..         XRL     A,#`?<Constant "--">` & 0xff
   \   00040A   7004         JNZ     ??UI_UpdateLcd_41
   \   00040C   A3           INC     DPTR
   \   00040D   E0           MOVX    A,@DPTR
   \   00040E   64..         XRL     A,#(`?<Constant "--">` >> 8) & 0xff
   \                     ??UI_UpdateLcd_41:
   \   000410   6002         JZ      ??UI_UpdateLcd_42
   1541                  {
   1542                    LcdAutoRefreshRequired = TRUE;
   \                     ??UI_UpdateLcd_40:
   \   000412   7E01         MOV     R6,#0x1
   1543                  }
   1544          
   1545                  line[2] = "<  COMMISSION  >";
   \                     ??UI_UpdateLcd_42:
   \   000414   7404         MOV     A,#0x4
   \   000416   12....       LCALL   ?XSTACK_DISP0_8
   \   000419   74..         MOV     A,#`?<Constant "<  COMMISSION  >">` & 0xff
   \   00041B   F0           MOVX    @DPTR,A
   \   00041C   A3           INC     DPTR
   \   00041D   74..         MOV     A,#(`?<Constant "<  COMMISSION  >">` >> 8) & 0xff
   \   00041F   F0           MOVX    @DPTR,A
   1546                  
   1547                  if (LcdAutoRefreshRequired)
   \   000420   EE           MOV     A,R6
   \   000421   A2E0         MOV     C,0xE0 /* A   */.0
   \   000423   4003         JC      $+5
   \   000425   02....       LJMP    ??UI_UpdateLcd_3 & 0xFFFF
   1548                  {
   1549                    osal_start_timerEx(uiAppTaskId, uiLcdAutoUpdateEvent, LCD_AUTO_REFRESH_INTERVAL_ON_COMISSIONING_SCREEN);
   \   000428                ; Setup parameters for call to function osal_start_timerEx
   \   000428   90....       MOV     DPTR,#__Constant_fa
   \   00042B   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00042E   12....       LCALL   ?Subroutine15 & 0xFFFF
   1550                  }
   \                     ??CrossCallReturnLabel_21:
   \   000431   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000434   7404         MOV     A,#0x4
   \   000436   12....       LCALL   ?DEALLOC_XSTACK8
   \   000439   02....       LJMP    ??UI_UpdateLcd_3 & 0xFFFF
   1551                  break;
   1552                case UI_STATE_SET_INST_CODE:
   1553                  line[2] = "<ADD INSTL CODE>";
   \                     ??UI_UpdateLcd_11:
   \   00043C   7404         MOV     A,#0x4
   \   00043E   12....       LCALL   ?XSTACK_DISP0_8
   \   000441   74..         MOV     A,#`?<Constant "<ADD INSTL CODE>">` & 0xff
   \   000443   F0           MOVX    @DPTR,A
   \   000444   A3           INC     DPTR
   \   000445   74..         MOV     A,#(`?<Constant "<ADD INSTL CODE>">` >> 8) & 0xff
   \   000447   02....       LJMP    ??UI_UpdateLcd_26 & 0xFFFF
   1554                  break;
   1555                case UI_STATE_SET_INST_CODE_0:
   1556                  uiArrayToString(uiInstallCode, line[0], 16, TRUE); 
   \                     ??UI_UpdateLcd_21:
   \   00044A                ; Setup parameters for call to function uiArrayToString
   \   00044A   75..01       MOV     ?V0,#0x1
   \   00044D   78..         MOV     R0,#?V0
   \   00044F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000452   7910         MOV     R1,#0x10
   \   000454   7401         MOV     A,#0x1
   \   000456   12....       LCALL   ?XSTACK_DISP0_8
   \   000459   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00045C   12....       LCALL   `??uiArrayToString::?relay`; Banked call to: uiArrayToString
   \   00045F   7401         MOV     A,#0x1
   \   000461   12....       LCALL   ?DEALLOC_XSTACK8
   1557                  uiArrayToString(uiInstallCode + 8, line[1], 16, TRUE); 
   \   000464                ; Setup parameters for call to function uiArrayToString
   \   000464   78..         MOV     R0,#?V0
   \   000466   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000469   7910         MOV     R1,#0x10
   \   00046B   7403         MOV     A,#0x3
   \   00046D   12....       LCALL   ?XSTACK_DISP0_8
   \   000470   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000473   12....       LCALL   `??uiArrayToString::?relay`; Banked call to: uiArrayToString
   \   000476   7401         MOV     A,#0x1
   \   000478   12....       LCALL   ?DEALLOC_XSTACK8
   1558                  line[0][16] = 0;
   \   00047B   12....       LCALL   ?Subroutine13 & 0xFFFF
   1559                  line[1][16] = 0;
   \                     ??CrossCallReturnLabel_15:
   \   00047E   12....       LCALL   ?XSTACK_DISP0_8
   \   000481   12....       LCALL   ?Subroutine14 & 0xFFFF
   1560                  line[2] = "<SET INSTL CODE>";
   \                     ??CrossCallReturnLabel_17:
   \   000484   7404         MOV     A,#0x4
   \   000486   12....       LCALL   ?XSTACK_DISP0_8
   \   000489   74..         MOV     A,#`?<Constant "<SET INSTL CODE>">` & 0xff
   \   00048B   F0           MOVX    @DPTR,A
   \   00048C   A3           INC     DPTR
   \   00048D   74..         MOV     A,#(`?<Constant "<SET INSTL CODE>">` >> 8) & 0xff
   \   00048F   02....       LJMP    ??UI_UpdateLcd_26 & 0xFFFF
   1561                  break;
   1562          #if (ZG_BUILD_COORDINATOR_TYPE)
   1563                case UI_STATE_SET_INST_CODE_ADDR_0:
   1564                  uiArrayToString(uiInstallCodeAddr, line[0],16, FALSE); 
   1565                  line[0][16] = 0;
   1566                  line[2] = "<SET I.C. ADDR >";
   1567                  break;
   1568          #endif
   1569                case UI_STATE_SET_INST_CODE_DONE:
   1570                  line[0] = "Last status:";
   \                     ??UI_UpdateLcd_22:
   \   000492   85..82       MOV     DPL,?XSP + 0
   \   000495   85..83       MOV     DPH,?XSP + 1
   \   000498   74..         MOV     A,#`?<Constant "Last status:">` & 0xff
   \   00049A   F0           MOVX    @DPTR,A
   \   00049B   A3           INC     DPTR
   \   00049C   74..         MOV     A,#(`?<Constant "Last status:">` >> 8) & 0xff
   \   00049E   F0           MOVX    @DPTR,A
   1571                  
   1572                  switch (uiAddInstallCodeLastStatus)
   \   00049F   90....       MOV     DPTR,#uiAddInstallCodeLastStatus
   \   0004A2   E0           MOVX    A,@DPTR
   \   0004A3   6010         JZ      ??UI_UpdateLcd_43
   \   0004A5   04           INC     A
   \   0004A6   701B         JNZ     ??UI_UpdateLcd_44
   1573                  {
   1574                    case STATUS_UNKNOWN:
   1575                      line[1] = "---";
   \   0004A8   7402         MOV     A,#0x2
   \   0004AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0004AD   74..         MOV     A,#`?<Constant "---">` & 0xff
   \   0004AF   F0           MOVX    @DPTR,A
   \   0004B0   A3           INC     DPTR
   \   0004B1   74..         MOV     A,#(`?<Constant "---">` >> 8) & 0xff
   \   0004B3   800B         SJMP    ??UI_UpdateLcd_45
   1576                      break;
   1577                    case ZSuccess:
   1578                      line[1] = "SUCCESS";
   \                     ??UI_UpdateLcd_43:
   \   0004B5   7402         MOV     A,#0x2
   \   0004B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0004BA   74..         MOV     A,#`?<Constant "SUCCESS">` & 0xff
   \   0004BC   F0           MOVX    @DPTR,A
   \   0004BD   A3           INC     DPTR
   \   0004BE   74..         MOV     A,#(`?<Constant "SUCCESS">` >> 8) & 0xff
   \                     ??UI_UpdateLcd_45:
   \   0004C0   F0           MOVX    @DPTR,A
   1579                      break;
   \   0004C1   8054         SJMP    ??UI_UpdateLcd_46
   1580                    default:
   1581                      uiConstStrCpy(line[1], "ERROR (0x  )    ");
   \                     ??UI_UpdateLcd_44:
   \   0004C3                ; Setup parameters for call to function osal_memcpy
   \   0004C3   75....       MOV     ?V0,#`?<Constant "ERROR (0x  )    ">` & 0xff
   \   0004C6   75....       MOV     ?V1,#(`?<Constant "ERROR (0x  )    ">` >> 8) & 0xff
   \   0004C9   78..         MOV     R0,#?V0
   \   0004CB   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0004CE   7C11         MOV     R4,#0x11
   \   0004D0   7D00         MOV     R5,#0x0
   \   0004D2   7405         MOV     A,#0x5
   \   0004D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0004D7   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0004DA   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0004DD   7403         MOV     A,#0x3
   \   0004DF   12....       LCALL   ?DEALLOC_XSTACK8
   1582                      uiUintToString( uiAddInstallCodeLastStatus, line[1] + 9, 16, 2, TRUE, FALSE);
   \   0004E2                ; Setup parameters for call to function uiUintToString
   \   0004E2   8E..         MOV     ?V0,R6
   \   0004E4   78..         MOV     R0,#?V0
   \   0004E6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0004E9   75..01       MOV     ?V0,#0x1
   \   0004EC   78..         MOV     R0,#?V0
   \   0004EE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0004F1   75..02       MOV     ?V0,#0x2
   \   0004F4   78..         MOV     R0,#?V0
   \   0004F6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0004F9   7405         MOV     A,#0x5
   \   0004FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0004FE   E0           MOVX    A,@DPTR
   \   0004FF   2409         ADD     A,#0x9
   \   000501   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000504   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000507   7910         MOV     R1,#0x10
   \   000509   90....       MOV     DPTR,#uiAddInstallCodeLastStatus
   \   00050C   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00050F   12....       LCALL   `??uiUintToString::?relay`; Banked call to: uiUintToString
   \   000512   7405         MOV     A,#0x5
   \   000514   12....       LCALL   ?DEALLOC_XSTACK8
   1583                      break;
   1584                  }
   1585                  line[2] = "<APLY INST CODE>";
   \                     ??UI_UpdateLcd_46:
   \   000517   7404         MOV     A,#0x4
   \   000519   12....       LCALL   ?XSTACK_DISP0_8
   \   00051C   74..         MOV     A,#`?<Constant "<APLY INST CODE>">` & 0xff
   \   00051E   F0           MOVX    @DPTR,A
   \   00051F   A3           INC     DPTR
   \   000520   74..         MOV     A,#(`?<Constant "<APLY INST CODE>">` >> 8) & 0xff
   \   000522   02....       LJMP    ??UI_UpdateLcd_26 & 0xFFFF
   1586                  break;
   1587          #if (ZG_BUILD_COORDINATOR_TYPE)
   1588                case UI_STATE_SET_INST_CODE_ADDR_1:
   1589                  uiArrayToString(uiInstallCodeAddr, line[0],16, FALSE); 
   1590                  line[0][16] = 0;
   1591                  line[2] = "       I.C. ADDR";
   1592                  break;
   1593          #endif
   1594                case UI_STATE_SET_INST_CODE_1:
   1595                  uiArrayToString(uiInstallCode, line[0], 16, TRUE); 
   \                     ??UI_UpdateLcd_23:
   \   000525                ; Setup parameters for call to function uiArrayToString
   \   000525   75..01       MOV     ?V0,#0x1
   \   000528   78..         MOV     R0,#?V0
   \   00052A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00052D   7910         MOV     R1,#0x10
   \   00052F   7401         MOV     A,#0x1
   \   000531   12....       LCALL   ?XSTACK_DISP0_8
   \   000534   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000537   12....       LCALL   `??uiArrayToString::?relay`; Banked call to: uiArrayToString
   \   00053A   7401         MOV     A,#0x1
   \   00053C   12....       LCALL   ?DEALLOC_XSTACK8
   1596                  uiArrayToString(uiInstallCode + 8, line[1], 16, TRUE); 
   \   00053F                ; Setup parameters for call to function uiArrayToString
   \   00053F   78..         MOV     R0,#?V0
   \   000541   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000544   7910         MOV     R1,#0x10
   \   000546   7403         MOV     A,#0x3
   \   000548   12....       LCALL   ?XSTACK_DISP0_8
   \   00054B   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00054E   12....       LCALL   `??uiArrayToString::?relay`; Banked call to: uiArrayToString
   \   000551   7401         MOV     A,#0x1
   \   000553   12....       LCALL   ?DEALLOC_XSTACK8
   1597                  line[0][16] = 0;
   \   000556   12....       LCALL   ?Subroutine13 & 0xFFFF
   1598                  line[1][16] = 0;
   \                     ??CrossCallReturnLabel_16:
   \   000559   12....       LCALL   ?XSTACK_DISP0_8
   \   00055C   12....       LCALL   ?Subroutine14 & 0xFFFF
   1599                  uiConstStrCpy(line[2], "       INST CODE");
   \                     ??CrossCallReturnLabel_18:
   \   00055F                ; Setup parameters for call to function osal_memcpy
   \   00055F   75....       MOV     ?V0,#`?<Constant "       INST CODE">` & 0xff
   \   000562   75....       MOV     ?V1,#(`?<Constant "       INST CODE">` >> 8) & 0xff
   \   000565   78..         MOV     R0,#?V0
   \   000567   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00056A   7C11         MOV     R4,#0x11
   \   00056C   7D00         MOV     R5,#0x0
   \   00056E   7407         MOV     A,#0x7
   \   000570   12....       LCALL   ?XSTACK_DISP0_8
   \   000573   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000576   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000579   7403         MOV     A,#0x3
   \   00057B   12....       LCALL   ?DEALLOC_XSTACK8
   1600                  uiArrayToString( uiInstallCode + 16, line[2], 4, TRUE);
   \   00057E                ; Setup parameters for call to function uiArrayToString
   \   00057E   75..01       MOV     ?V0,#0x1
   \   000581   78..         MOV     R0,#?V0
   \   000583   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000586   7904         MOV     R1,#0x4
   \   000588   7405         MOV     A,#0x5
   \   00058A   12....       LCALL   ?XSTACK_DISP0_8
   \   00058D   12....       LCALL   ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000590   7A..         MOV     R2,#(uiInstallCode + 16) & 0xff
   \   000592   7B..         MOV     R3,#((uiInstallCode + 16) >> 8) & 0xff
   \   000594   12....       LCALL   `??uiArrayToString::?relay`; Banked call to: uiArrayToString
   \   000597   7401         MOV     A,#0x1
   \   000599   12....       LCALL   ?DEALLOC_XSTACK8
   1601                  break;
   \   00059C   02....       LJMP    ??UI_UpdateLcd_3 & 0xFFFF
   1602                case UI_STATE_APP_SPECIFIC_MENU:
   1603                  line[2] = "<   APP MENU   >";
   \                     ??UI_UpdateLcd_7:
   \   00059F   7404         MOV     A,#0x4
   \   0005A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0005A4   74..         MOV     A,#`?<Constant "<   APP MENU   >">` & 0xff
   \   0005A6   F0           MOVX    @DPTR,A
   \   0005A7   A3           INC     DPTR
   \   0005A8   74..         MOV     A,#(`?<Constant "<   APP MENU   >">` >> 8) & 0xff
   \   0005AA   02....       LJMP    ??UI_UpdateLcd_26 & 0xFFFF
   1604                  break;
   1605                case UI_STATE_SET_PRI_CHANEL_MASK_0:
   1606                  line[0] = "1234567890123456";
   \                     ??UI_UpdateLcd_15:
   \   0005AD   12....       LCALL   ?Subroutine5 & 0xFFFF
   1607                  uiCreateChannelMaskString(bdbAttributes.bdbPrimaryChannelSet, line[1]);
   \                     ??CrossCallReturnLabel_3:
   \   0005B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0005B3   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0005B6   90....       MOV     DPTR,#bdbAttributes + 4
   \   0005B9   12....       LCALL   ?XLOAD_R2345
   \   0005BC   12....       LCALL   `??uiCreateChannelMaskString::?relay`; Banked call to: uiCreateChannelMaskString
   \   0005BF   7402         MOV     A,#0x2
   \   0005C1   12....       LCALL   ?DEALLOC_XSTACK8
   1608                  line[2] = "<PRI CHANL MASK>";
   \   0005C4   7404         MOV     A,#0x4
   \   0005C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0005C9   74..         MOV     A,#`?<Constant "<PRI CHANL MASK>">` & 0xff
   \   0005CB   F0           MOVX    @DPTR,A
   \   0005CC   A3           INC     DPTR
   \   0005CD   74..         MOV     A,#(`?<Constant "<PRI CHANL MASK>">` >> 8) & 0xff
   \   0005CF   02....       LJMP    ??UI_UpdateLcd_26 & 0xFFFF
   1609                  break;
   1610                case UI_STATE_SET_SEC_CHANEL_MASK_0:
   1611                  line[0] = "1234567890123456";
   \                     ??UI_UpdateLcd_16:
   \   0005D2   12....       LCALL   ?Subroutine5 & 0xFFFF
   1612                  uiCreateChannelMaskString(bdbAttributes.bdbSecondaryChannelSet, line[1]);
   \                     ??CrossCallReturnLabel_4:
   \   0005D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0005D8   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0005DB   90....       MOV     DPTR,#bdbAttributes
   \   0005DE   12....       LCALL   ?XLOAD_R2345
   \   0005E1   12....       LCALL   `??uiCreateChannelMaskString::?relay`; Banked call to: uiCreateChannelMaskString
   \   0005E4   7402         MOV     A,#0x2
   \   0005E6   12....       LCALL   ?DEALLOC_XSTACK8
   1613                  line[2] = "<SEC CHANL MASK>";
   \   0005E9   7404         MOV     A,#0x4
   \   0005EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0005EE   74..         MOV     A,#`?<Constant "<SEC CHANL MASK>">` & 0xff
   \   0005F0   F0           MOVX    @DPTR,A
   \   0005F1   A3           INC     DPTR
   \   0005F2   74..         MOV     A,#(`?<Constant "<SEC CHANL MASK>">` >> 8) & 0xff
   \   0005F4   02....       LJMP    ??UI_UpdateLcd_26 & 0xFFFF
   1614                  break;
   1615                case UI_STATE_SET_PRI_CHANEL_MASK_1:
   1616                  line[0] = "1234567890123456";
   \                     ??UI_UpdateLcd_18:
   \   0005F7   12....       LCALL   ?Subroutine5 & 0xFFFF
   1617                  uiCreateChannelMaskString(bdbAttributes.bdbPrimaryChannelSet, line[1]);
   \                     ??CrossCallReturnLabel_5:
   \   0005FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0005FD   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000600   90....       MOV     DPTR,#bdbAttributes + 4
   \   000603   12....       LCALL   ?XLOAD_R2345
   \   000606   12....       LCALL   `??uiCreateChannelMaskString::?relay`; Banked call to: uiCreateChannelMaskString
   \   000609   7402         MOV     A,#0x2
   \   00060B   12....       LCALL   ?DEALLOC_XSTACK8
   1618                  line[2] = " PRI CHANL MASK ";
   \   00060E   7404         MOV     A,#0x4
   \   000610   12....       LCALL   ?XSTACK_DISP0_8
   \   000613   74..         MOV     A,#`?<Constant " PRI CHANL MASK ">` & 0xff
   \   000615   F0           MOVX    @DPTR,A
   \   000616   A3           INC     DPTR
   \   000617   74..         MOV     A,#(`?<Constant " PRI CHANL MASK ">` >> 8) & 0xff
   \   000619   02....       LJMP    ??UI_UpdateLcd_26 & 0xFFFF
   1619                  break;
   1620                case UI_STATE_SET_SEC_CHANEL_MASK_1:
   1621                  line[0] = "1234567890123456";
   \                     ??UI_UpdateLcd_19:
   \   00061C   12....       LCALL   ?Subroutine5 & 0xFFFF
   1622                  uiCreateChannelMaskString(bdbAttributes.bdbSecondaryChannelSet, line[1]);
   \                     ??CrossCallReturnLabel_6:
   \   00061F   12....       LCALL   ?XSTACK_DISP0_8
   \   000622   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000625   90....       MOV     DPTR,#bdbAttributes
   \   000628   12....       LCALL   ?XLOAD_R2345
   \   00062B   12....       LCALL   `??uiCreateChannelMaskString::?relay`; Banked call to: uiCreateChannelMaskString
   \   00062E   7402         MOV     A,#0x2
   \   000630   12....       LCALL   ?DEALLOC_XSTACK8
   1623                  line[2] = " SEC CHANL MASK ";
   \   000633   7404         MOV     A,#0x4
   \   000635   12....       LCALL   ?XSTACK_DISP0_8
   \   000638   74..         MOV     A,#`?<Constant " SEC CHANL MASK ">` & 0xff
   \   00063A   F0           MOVX    @DPTR,A
   \   00063B   A3           INC     DPTR
   \   00063C   74..         MOV     A,#(`?<Constant " SEC CHANL MASK ">` >> 8) & 0xff
   \   00063E   02....       LJMP    ??UI_UpdateLcd_26 & 0xFFFF
   1624                  break;
   1625                case UI_STATE_SET_PAN_ID_0:
   1626                  if (zgConfigPANID == 0xFFFF)
   \                     ??UI_UpdateLcd_17:
   \   000641   90....       MOV     DPTR,#zgConfigPANID
   \   000644   E0           MOVX    A,@DPTR
   \   000645   F4           CPL     A
   \   000646   7003         JNZ     ??UI_UpdateLcd_47
   \   000648   A3           INC     DPTR
   \   000649   E0           MOVX    A,@DPTR
   \   00064A   F4           CPL     A
   \                     ??UI_UpdateLcd_47:
   \   00064B   701B         JNZ     ??UI_UpdateLcd_48
   1627                  {
   1628                    uiConstStrCpy(line[0], "    0xFFFF (any)");
   \   00064D                ; Setup parameters for call to function osal_memcpy
   \   00064D   78..         MOV     R0,#?V0
   \   00064F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000652   7C11         MOV     R4,#0x11
   \   000654   7D00         MOV     R5,#0x0
   \   000656   7403         MOV     A,#0x3
   \   000658   12....       LCALL   ?XSTACK_DISP0_8
   \   00065B   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00065E   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000661   7403         MOV     A,#0x3
   \   000663   12....       LCALL   ?DEALLOC_XSTACK8
   \   000666   8046         SJMP    ??UI_UpdateLcd_49
   1629                  }
   1630                  else
   1631                  {
   1632                    uiConstStrCpy(line[0], "    0x          ");
   \                     ??UI_UpdateLcd_48:
   \   000668                ; Setup parameters for call to function osal_memcpy
   \   000668   78..         MOV     R0,#?V4
   \   00066A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00066D   7C11         MOV     R4,#0x11
   \   00066F   7D00         MOV     R5,#0x0
   \   000671   7403         MOV     A,#0x3
   \   000673   12....       LCALL   ?XSTACK_DISP0_8
   \   000676   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000679   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00067C   7403         MOV     A,#0x3
   \   00067E   12....       LCALL   ?DEALLOC_XSTACK8
   1633                    uiUintToString( zgConfigPANID, line[0] + 6, 16, 4, TRUE, FALSE);
   \   000681                ; Setup parameters for call to function uiUintToString
   \   000681   8E..         MOV     ?V0,R6
   \   000683   78..         MOV     R0,#?V0
   \   000685   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000688   75..01       MOV     ?V0,#0x1
   \   00068B   78..         MOV     R0,#?V0
   \   00068D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000690   75..04       MOV     ?V0,#0x4
   \   000693   78..         MOV     R0,#?V0
   \   000695   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000698   7403         MOV     A,#0x3
   \   00069A   12....       LCALL   ?XSTACK_DISP0_8
   \   00069D   12....       LCALL   ?Subroutine10 & 0xFFFF
   1634                  }
   \                     ??CrossCallReturnLabel_108:
   \   0006A0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0006A3   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   0006A6   12....       LCALL   `??uiUintToString::?relay`; Banked call to: uiUintToString
   \   0006A9   7405         MOV     A,#0x5
   \   0006AB   12....       LCALL   ?DEALLOC_XSTACK8
   1635                  line[2] = "<    PAN ID    >";
   \                     ??UI_UpdateLcd_49:
   \   0006AE   7404         MOV     A,#0x4
   \   0006B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0006B3   74..         MOV     A,#`?<Constant "<    PAN ID    >">` & 0xff
   \   0006B5   F0           MOVX    @DPTR,A
   \   0006B6   A3           INC     DPTR
   \   0006B7   74..         MOV     A,#(`?<Constant "<    PAN ID    >">` >> 8) & 0xff
   \   0006B9   8078         SJMP    ??UI_UpdateLcd_26
   1636                  break;
   1637                case UI_STATE_SET_PAN_ID_1:
   1638                  if (zgConfigPANID == 0xFFFF)
   \                     ??UI_UpdateLcd_20:
   \   0006BB   90....       MOV     DPTR,#zgConfigPANID
   \   0006BE   E0           MOVX    A,@DPTR
   \   0006BF   F4           CPL     A
   \   0006C0   7003         JNZ     ??UI_UpdateLcd_50
   \   0006C2   A3           INC     DPTR
   \   0006C3   E0           MOVX    A,@DPTR
   \   0006C4   F4           CPL     A
   \                     ??UI_UpdateLcd_50:
   \   0006C5   701B         JNZ     ??UI_UpdateLcd_51
   1639                  {
   1640                    uiConstStrCpy(line[0], "    0xFFFF (any)");
   \   0006C7                ; Setup parameters for call to function osal_memcpy
   \   0006C7   78..         MOV     R0,#?V0
   \   0006C9   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0006CC   7C11         MOV     R4,#0x11
   \   0006CE   7D00         MOV     R5,#0x0
   \   0006D0   7403         MOV     A,#0x3
   \   0006D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0006D5   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0006D8   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0006DB   7403         MOV     A,#0x3
   \   0006DD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0006E0   8046         SJMP    ??UI_UpdateLcd_52
   1641                  }
   1642                  else
   1643                  {
   1644                    uiConstStrCpy(line[0], "    0x          ");
   \                     ??UI_UpdateLcd_51:
   \   0006E2                ; Setup parameters for call to function osal_memcpy
   \   0006E2   78..         MOV     R0,#?V4
   \   0006E4   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0006E7   7C11         MOV     R4,#0x11
   \   0006E9   7D00         MOV     R5,#0x0
   \   0006EB   7403         MOV     A,#0x3
   \   0006ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0006F0   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0006F3   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0006F6   7403         MOV     A,#0x3
   \   0006F8   12....       LCALL   ?DEALLOC_XSTACK8
   1645                    uiUintToString( zgConfigPANID, line[0] + 6, 16, 4, TRUE, FALSE);
   \   0006FB                ; Setup parameters for call to function uiUintToString
   \   0006FB   8E..         MOV     ?V0,R6
   \   0006FD   78..         MOV     R0,#?V0
   \   0006FF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000702   75..01       MOV     ?V0,#0x1
   \   000705   78..         MOV     R0,#?V0
   \   000707   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00070A   75..04       MOV     ?V0,#0x4
   \   00070D   78..         MOV     R0,#?V0
   \   00070F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000712   7403         MOV     A,#0x3
   \   000714   12....       LCALL   ?XSTACK_DISP0_8
   \   000717   12....       LCALL   ?Subroutine10 & 0xFFFF
   1646                  }
   \                     ??CrossCallReturnLabel_109:
   \   00071A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00071D   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000720   12....       LCALL   `??uiUintToString::?relay`; Banked call to: uiUintToString
   \   000723   7405         MOV     A,#0x5
   \   000725   12....       LCALL   ?DEALLOC_XSTACK8
   1647                  line[2] = "     PAN ID     ";
   \                     ??UI_UpdateLcd_52:
   \   000728   7404         MOV     A,#0x4
   \   00072A   12....       LCALL   ?XSTACK_DISP0_8
   \   00072D   74..         MOV     A,#`?<Constant "     PAN ID     ">` & 0xff
   \   00072F   F0           MOVX    @DPTR,A
   \   000730   A3           INC     DPTR
   \   000731   74..         MOV     A,#(`?<Constant "     PAN ID     ">` >> 8) & 0xff
   \                     ??UI_UpdateLcd_26:
   \   000733   F0           MOVX    @DPTR,A
   1648                  break;
   \   000734   02....       LJMP    ??UI_UpdateLcd_3 & 0xFFFF
   1649                case UI_STATE_INFO:
   1650                  // Display the extended address.
   1651                  xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
   \                     ??UI_UpdateLcd_8:
   \   000737   7A..         MOV     R2,#(aExtendedAddress + 7) & 0xff
   \   000739   7B..         MOV     R3,#((aExtendedAddress + 7) >> 8) & 0xff
   1652                  
   1653                  for (i = 0; i < Z_EXTADDR_LEN * 2; xad--)
   \   00073B   7C00         MOV     R4,#0x0
   1654                  {
   1655                    uint8 ch;
   1656                    ch = (*xad >> 4) & 0x0F;
   \                     ??UI_UpdateLcd_53:
   \   00073D   8A82         MOV     DPL,R2
   \   00073F   8B83         MOV     DPH,R3
   \   000741   E0           MOVX    A,@DPTR
   \   000742   C4           SWAP    A
   \   000743   540F         ANL     A,#0xf
   \   000745   FD           MOV     R5,A
   1657                    line[0][i++] = ch + (( ch < 10 ) ? '0' : '7');
   \   000746   EC           MOV     A,R4
   \   000747   FE           MOV     R6,A
   \   000748   7401         MOV     A,#0x1
   \   00074A   2E           ADD     A,R6
   \   00074B   FC           MOV     R4,A
   \   00074C   ED           MOV     A,R5
   \   00074D   C3           CLR     C
   \   00074E   940A         SUBB    A,#0xa
   \   000750   5004         JNC     ??UI_UpdateLcd_54
   \   000752   7830         MOV     R0,#0x30
   \   000754   8002         SJMP    ??UI_UpdateLcd_55
   \                     ??UI_UpdateLcd_54:
   \   000756   7837         MOV     R0,#0x37
   \                     ??UI_UpdateLcd_55:
   \   000758   E8           MOV     A,R0
   \   000759   2D           ADD     A,R5
   \   00075A   C0E0         PUSH    A
   \   00075C   85..82       MOV     DPL,?XSP + 0
   \   00075F   85..83       MOV     DPH,?XSP + 1
   \   000762   E0           MOVX    A,@DPTR
   \   000763   2E           ADD     A,R6
   \   000764   FD           MOV     R5,A
   \   000765   A3           INC     DPTR
   \   000766   E0           MOVX    A,@DPTR
   \   000767   3400         ADDC    A,#0x0
   \   000769   8D82         MOV     DPL,R5
   \   00076B   F583         MOV     DPH,A
   \   00076D   D0E0         POP     A
   \   00076F   12....       LCALL   ?Subroutine9 & 0xFFFF
   1658                    ch = *xad & 0x0F;
   \                     ??CrossCallReturnLabel_14:
   \   000772   540F         ANL     A,#0xf
   \   000774   FD           MOV     R5,A
   1659                    line[0][i++] = ch + (( ch < 10 ) ? '0' : '7');
   \   000775   EC           MOV     A,R4
   \   000776   FF           MOV     R7,A
   \   000777   7401         MOV     A,#0x1
   \   000779   2C           ADD     A,R4
   \   00077A   FC           MOV     R4,A
   \   00077B   ED           MOV     A,R5
   \   00077C   C3           CLR     C
   \   00077D   940A         SUBB    A,#0xa
   \   00077F   5004         JNC     ??UI_UpdateLcd_56
   \   000781   7830         MOV     R0,#0x30
   \   000783   8002         SJMP    ??UI_UpdateLcd_57
   \                     ??UI_UpdateLcd_56:
   \   000785   7837         MOV     R0,#0x37
   \                     ??UI_UpdateLcd_57:
   \   000787   E8           MOV     A,R0
   \   000788   2D           ADD     A,R5
   \   000789   C0E0         PUSH    A
   \   00078B   85..82       MOV     DPL,?XSP + 0
   \   00078E   85..83       MOV     DPH,?XSP + 1
   \   000791   E0           MOVX    A,@DPTR
   \   000792   2F           ADD     A,R7
   \   000793   FD           MOV     R5,A
   \   000794   A3           INC     DPTR
   \   000795   E0           MOVX    A,@DPTR
   \   000796   3400         ADDC    A,#0x0
   \   000798   8D82         MOV     DPL,R5
   \   00079A   F583         MOV     DPH,A
   \   00079C   D0E0         POP     A
   \   00079E   F0           MOVX    @DPTR,A
   1660                  }
   \   00079F   EA           MOV     A,R2
   \   0007A0   24FF         ADD     A,#-0x1
   \   0007A2   EB           MOV     A,R3
   \   0007A3   34FF         ADDC    A,#-0x1
   \   0007A5   1A           DEC     R2
   \   0007A6   FB           MOV     R3,A
   \   0007A7   EC           MOV     A,R4
   \   0007A8   C3           CLR     C
   \   0007A9   9410         SUBB    A,#0x10
   \   0007AB   4090         JC      ??UI_UpdateLcd_53
   1661                  
   1662                  line[0][Z_EXTADDR_LEN*2] = '\0';
   \   0007AD   85..82       MOV     DPL,?XSP + 0
   \   0007B0   85..83       MOV     DPH,?XSP + 1
   \   0007B3   12....       LCALL   ?Subroutine14 & 0xFFFF
   1663          
   1664                  uiConstStrCpy( line[1], "nxxxx cxx axxxx ");
   \                     ??CrossCallReturnLabel_19:
   \   0007B6                ; Setup parameters for call to function osal_memcpy
   \   0007B6   75....       MOV     ?V0,#`?<Constant "nxxxx cxx axxxx ">` & 0xff
   \   0007B9   75....       MOV     ?V1,#(`?<Constant "nxxxx cxx axxxx ">` >> 8) & 0xff
   \   0007BC   78..         MOV     R0,#?V0
   \   0007BE   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0007C1   7C11         MOV     R4,#0x11
   \   0007C3   7D00         MOV     R5,#0x0
   \   0007C5   7405         MOV     A,#0x5
   \   0007C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0007CA   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0007CD   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0007D0   7403         MOV     A,#0x3
   \   0007D2   12....       LCALL   ?DEALLOC_XSTACK8
   1665          
   1666                  uiUintToString( _NIB.nwkPanId, line[1] + 1 , 16, 4, TRUE, FALSE);
   \   0007D5                ; Setup parameters for call to function uiUintToString
   \   0007D5   75..00       MOV     ?V0,#0x0
   \   0007D8   78..         MOV     R0,#?V0
   \   0007DA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0007DD   75..01       MOV     ?V0,#0x1
   \   0007E0   78..         MOV     R0,#?V0
   \   0007E2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0007E5   75..04       MOV     ?V0,#0x4
   \   0007E8   78..         MOV     R0,#?V0
   \   0007EA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0007ED   7405         MOV     A,#0x5
   \   0007EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0007F2   E0           MOVX    A,@DPTR
   \   0007F3   2401         ADD     A,#0x1
   \   0007F5   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0007F8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0007FB   7910         MOV     R1,#0x10
   \   0007FD   90....       MOV     DPTR,#_NIB + 33
   \   000800   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000803   12....       LCALL   `??uiUintToString::?relay`; Banked call to: uiUintToString
   \   000806   7405         MOV     A,#0x5
   \   000808   12....       LCALL   ?DEALLOC_XSTACK8
   1667                  line[1][5] = ' ';
   \   00080B   7402         MOV     A,#0x2
   \   00080D   12....       LCALL   ?XSTACK_DISP0_8
   \   000810   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000813   A3           INC     DPTR
   \   000814   A3           INC     DPTR
   \   000815   A3           INC     DPTR
   \   000816   A3           INC     DPTR
   \   000817   A3           INC     DPTR
   \   000818   7420         MOV     A,#0x20
   \   00081A   F0           MOVX    @DPTR,A
   1668                  
   1669                  uiUintToString( _NIB.nwkLogicalChannel, (void *)(line[1] + 7), 10, 2, TRUE, FALSE );
   \   00081B                ; Setup parameters for call to function uiUintToString
   \   00081B   75..00       MOV     ?V0,#0x0
   \   00081E   78..         MOV     R0,#?V0
   \   000820   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000823   75..01       MOV     ?V0,#0x1
   \   000826   78..         MOV     R0,#?V0
   \   000828   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00082B   75..02       MOV     ?V0,#0x2
   \   00082E   78..         MOV     R0,#?V0
   \   000830   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000833   7405         MOV     A,#0x5
   \   000835   12....       LCALL   ?XSTACK_DISP0_8
   \   000838   E0           MOVX    A,@DPTR
   \   000839   2407         ADD     A,#0x7
   \   00083B   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00083E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000841   790A         MOV     R1,#0xa
   \   000843   90....       MOV     DPTR,#_NIB + 22
   \   000846   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000849   12....       LCALL   `??uiUintToString::?relay`; Banked call to: uiUintToString
   \   00084C   7405         MOV     A,#0x5
   \   00084E   12....       LCALL   ?DEALLOC_XSTACK8
   1670                  line[1][9] = ' ';
   \   000851   7402         MOV     A,#0x2
   \   000853   12....       LCALL   ?XSTACK_DISP0_8
   \   000856   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000859   C8           XCH     A,R0
   \   00085A   2409         ADD     A,#0x9
   \   00085C   F582         MOV     DPL,A
   \   00085E   E4           CLR     A
   \   00085F   38           ADDC    A,R0
   \   000860   F583         MOV     DPH,A
   \   000862   7420         MOV     A,#0x20
   \   000864   F0           MOVX    @DPTR,A
   1671                  
   1672                  uiUintToString( _NIB.nwkDevAddress, line[1] + 11, 16, 4, TRUE, FALSE );
   \   000865                ; Setup parameters for call to function uiUintToString
   \   000865   75..00       MOV     ?V0,#0x0
   \   000868   78..         MOV     R0,#?V0
   \   00086A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00086D   75..01       MOV     ?V0,#0x1
   \   000870   78..         MOV     R0,#?V0
   \   000872   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000875   75..04       MOV     ?V0,#0x4
   \   000878   78..         MOV     R0,#?V0
   \   00087A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00087D   7405         MOV     A,#0x5
   \   00087F   12....       LCALL   ?XSTACK_DISP0_8
   \   000882   E0           MOVX    A,@DPTR
   \   000883   240B         ADD     A,#0xb
   \   000885   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000888   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00088B   7910         MOV     R1,#0x10
   \   00088D   90....       MOV     DPTR,#_NIB + 20
   \   000890   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000893   12....       LCALL   `??uiUintToString::?relay`; Banked call to: uiUintToString
   \   000896   7405         MOV     A,#0x5
   \   000898   12....       LCALL   ?DEALLOC_XSTACK8
   1673          
   1674                  uiConstStrCpy(line[2], "          <INFO>");
   \   00089B                ; Setup parameters for call to function osal_memcpy
   \   00089B   75....       MOV     ?V0,#`?<Constant "          <INFO>">` & 0xff
   \   00089E   75....       MOV     ?V1,#(`?<Constant "          <INFO>">` >> 8) & 0xff
   \   0008A1   78..         MOV     R0,#?V0
   \   0008A3   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0008A6   7C11         MOV     R4,#0x11
   \   0008A8   7D00         MOV     R5,#0x0
   \   0008AA   7407         MOV     A,#0x7
   \   0008AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0008AF   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0008B2   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0008B5   7403         MOV     A,#0x3
   \   0008B7   12....       LCALL   ?DEALLOC_XSTACK8
   1675                  switch (uiNwkStateShadow)
   \   0008BA   7404         MOV     A,#0x4
   \   0008BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0008BF   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0008C2   90....       MOV     DPTR,#uiNwkStateShadow
   \   0008C5   E0           MOVX    A,@DPTR
   \   0008C6   24FA         ADD     A,#-0x6
   \   0008C8   604A         JZ      ??UI_UpdateLcd_58
   \   0008CA   14           DEC     A
   \   0008CB   6018         JZ      ??UI_UpdateLcd_59
   \   0008CD   24FE         ADD     A,#-0x2
   \   0008CF   6003         JZ      $+5
   \   0008D1   02....       LJMP    ??UI_UpdateLcd_60 & 0xFFFF
   1676                  {
   1677                    case DEV_ZB_COORD:
   1678                      uiConstStrOver(line[2], "ZC");
   \   0008D4                ; Setup parameters for call to function osal_memcpy
   \   0008D4   75....       MOV     ?V0,#`?<Constant "ZC">` & 0xff
   \   0008D7   75....       MOV     ?V1,#(`?<Constant "ZC">` >> 8) & 0xff
   \   0008DA   78..         MOV     R0,#?V0
   \   0008DC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0008DF   7C02         MOV     R4,#0x2
   \   0008E1   7D00         MOV     R5,#0x0
   \   0008E3   8024         SJMP    ??CrossCallReturnLabel_36
   1679                      break;
   1680                    case DEV_ROUTER:
   1681                      if (APSME_IsDistributedSecurity())
   \                     ??UI_UpdateLcd_59:
   \   0008E5                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   0008E5   12....       LCALL   `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   0008E8   E9           MOV     A,R1
   \   0008E9   6008         JZ      ??UI_UpdateLcd_61
   1682                      {
   1683                        uiConstStrOver(line[2], "ZR DIST");
   \   0008EB                ; Setup parameters for call to function osal_memcpy
   \   0008EB   75....       MOV     ?V0,#`?<Constant "ZR DIST">` & 0xff
   \   0008EE   75....       MOV     ?V1,#(`?<Constant "ZR DIST">` >> 8) & 0xff
   \   0008F1   8006         SJMP    ??UI_UpdateLcd_62
   1684                      }
   1685                      else
   1686                      {
   1687                        uiConstStrOver(line[2], "ZR CENT");
   \                     ??UI_UpdateLcd_61:
   \   0008F3                ; Setup parameters for call to function osal_memcpy
   \   0008F3   75....       MOV     ?V0,#`?<Constant "ZR CENT">` & 0xff
   \   0008F6   75....       MOV     ?V1,#(`?<Constant "ZR CENT">` >> 8) & 0xff
   \                     ??UI_UpdateLcd_62:
   \   0008F9   78..         MOV     R0,#?V0
   \   0008FB   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0008FE   7C07         MOV     R4,#0x7
   \   000900   7D00         MOV     R5,#0x0
   \   000902   EC           MOV     A,R4
   \   000903   12....       LCALL   ?XSTACK_DISP0_8
   \   000906   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000909   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00090C   7403         MOV     A,#0x3
   \   00090E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000911   02....       LJMP    ??UI_UpdateLcd_3 & 0xFFFF
   1688                      }
   1689                      break;
   1690                    case DEV_END_DEVICE:
   1691                      uiConstStrOver(line[2], "ZED p");
   \                     ??UI_UpdateLcd_58:
   \   000914                ; Setup parameters for call to function osal_memcpy
   \   000914   75....       MOV     ?V0,#`?<Constant "ZED p">` & 0xff
   \   000917   75....       MOV     ?V1,#(`?<Constant "ZED p">` >> 8) & 0xff
   \   00091A   78..         MOV     R0,#?V0
   \   00091C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00091F   7C05         MOV     R4,#0x5
   \   000921   7D00         MOV     R5,#0x0
   \   000923   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000926   7403         MOV     A,#0x3
   \   000928   12....       LCALL   ?DEALLOC_XSTACK8
   1692                      uiUintToString( _NIB.nwkCoordAddress, line[2] + 5, 16, 4, TRUE, FALSE );
   \   00092B                ; Setup parameters for call to function uiUintToString
   \   00092B   75..00       MOV     ?V0,#0x0
   \   00092E   78..         MOV     R0,#?V0
   \   000930   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000933   75..01       MOV     ?V0,#0x1
   \   000936   78..         MOV     R0,#?V0
   \   000938   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00093B   75..04       MOV     ?V0,#0x4
   \   00093E   78..         MOV     R0,#?V0
   \   000940   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000943   7407         MOV     A,#0x7
   \   000945   12....       LCALL   ?XSTACK_DISP0_8
   \   000948   E0           MOVX    A,@DPTR
   \   000949   2405         ADD     A,#0x5
   \   00094B   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00094E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000951   7910         MOV     R1,#0x10
   \   000953   90....       MOV     DPTR,#_NIB + 23
   \   000956   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000959   8046         SJMP    ??UI_UpdateLcd_63
   1693                      break;
   1694                    default:
   1695          #if ZG_BUILD_COORDINATOR_TYPE
   1696                      uiConstStrOver(line[2], "ZC (   )");
   1697                      uiUintToString( uiNwkStateShadow, line[2] + 4, 10, 3, TRUE, FALSE );
   1698          #elif ZG_BUILD_RTRONLY_TYPE
   1699                      uiConstStrOver(line[2], "ZR (   )");
   1700                      uiUintToString( uiNwkStateShadow, line[2] + 4, 10, 3, TRUE, FALSE );
   1701          #elif ZG_BUILD_ENDDEVICE_TYPE
   1702                      uiConstStrOver(line[2], "ZED (   )");
   \                     ??UI_UpdateLcd_60:
   \   00095B                ; Setup parameters for call to function osal_memcpy
   \   00095B   75....       MOV     ?V0,#`?<Constant "ZED (   )">` & 0xff
   \   00095E   75....       MOV     ?V1,#(`?<Constant "ZED (   )">` >> 8) & 0xff
   \   000961   78..         MOV     R0,#?V0
   \   000963   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000966   7C09         MOV     R4,#0x9
   \   000968   7D00         MOV     R5,#0x0
   \   00096A   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00096D   7403         MOV     A,#0x3
   \   00096F   12....       LCALL   ?DEALLOC_XSTACK8
   1703                      uiUintToString( uiNwkStateShadow, line[2] + 5, 10, 3, TRUE, FALSE );
   \   000972                ; Setup parameters for call to function uiUintToString
   \   000972   75..00       MOV     ?V0,#0x0
   \   000975   78..         MOV     R0,#?V0
   \   000977   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00097A   75..01       MOV     ?V0,#0x1
   \   00097D   78..         MOV     R0,#?V0
   \   00097F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000982   75..03       MOV     ?V0,#0x3
   \   000985   78..         MOV     R0,#?V0
   \   000987   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00098A   7407         MOV     A,#0x7
   \   00098C   12....       LCALL   ?XSTACK_DISP0_8
   \   00098F   E0           MOVX    A,@DPTR
   \   000990   2405         ADD     A,#0x5
   \   000992   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000995   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000998   790A         MOV     R1,#0xa
   \   00099A   90....       MOV     DPTR,#uiNwkStateShadow
   \   00099D   E0           MOVX    A,@DPTR
   \   00099E   FA           MOV     R2,A
   \   00099F   E4           CLR     A
   \   0009A0   FB           MOV     R3,A
   \                     ??UI_UpdateLcd_63:
   \   0009A1   FC           MOV     R4,A
   \   0009A2   FD           MOV     R5,A
   \   0009A3   12....       LCALL   `??uiUintToString::?relay`; Banked call to: uiUintToString
   \   0009A6   7405         MOV     A,#0x5
   \   0009A8   12....       LCALL   ?DEALLOC_XSTACK8
   1704          #else
   1705                      uiConstStrOver(line[2], "(   )");
   1706                      uiUintToString( uiNwkStateShadow, line[2] + 1, 10, 3, TRUE, FALSE );
   1707          #endif
   1708                      break;
   1709                  }
   1710                  
   1711                  break;
   1712                default:
   1713                  break;
   1714              }
   1715            }
   1716          
   1717            if (uiLcdCursorLine != 0xFF)
   \                     ??UI_UpdateLcd_3:
   \   0009AB   90....       MOV     DPTR,#uiLcdCursorLine
   \   0009AE   E0           MOVX    A,@DPTR
   \   0009AF   F4           CPL     A
   \   0009B0   604B         JZ      ??UI_UpdateLcd_64
   1718            {
   1719              if (uiLcdCursorState == 0)
   \   0009B2   90....       MOV     DPTR,#uiLcdCursorState
   \   0009B5   E0           MOVX    A,@DPTR
   \   0009B6   702D         JNZ     ??UI_UpdateLcd_65
   1720              {
   1721                line[uiLcdCursorLine][uiLcdCursorCol] = LCD_CURSOR_CHAR; //note: the cursor must point to a writeable memory location, i.e. not const
   \   0009B8   90....       MOV     DPTR,#uiLcdCursorCol
   \   0009BB   E0           MOVX    A,@DPTR
   \   0009BC   FA           MOV     R2,A
   \   0009BD   90....       MOV     DPTR,#uiLcdCursorLine
   \   0009C0   E0           MOVX    A,@DPTR
   \   0009C1   25E0         ADD     A,0xE0 /* A   */
   \   0009C3   F8           MOV     R0,A
   \   0009C4   E4           CLR     A
   \   0009C5   33           RLC     A
   \   0009C6   F9           MOV     R1,A
   \   0009C7   85..82       MOV     DPL,?XSP + 0
   \   0009CA   85..83       MOV     DPH,?XSP + 1
   \   0009CD   E582         MOV     A,DPL
   \   0009CF   28           ADD     A,R0
   \   0009D0   F582         MOV     DPL,A
   \   0009D2   E583         MOV     A,DPH
   \   0009D4   39           ADDC    A,R1
   \   0009D5   F583         MOV     DPH,A
   \   0009D7   E0           MOVX    A,@DPTR
   \   0009D8   2A           ADD     A,R2
   \   0009D9   F8           MOV     R0,A
   \   0009DA   A3           INC     DPTR
   \   0009DB   E0           MOVX    A,@DPTR
   \   0009DC   3400         ADDC    A,#0x0
   \   0009DE   8882         MOV     DPL,R0
   \   0009E0   F583         MOV     DPH,A
   \   0009E2   7420         MOV     A,#0x20
   \   0009E4   F0           MOVX    @DPTR,A
   1722              }
   1723              uiLcdCursorState ^= 1;
   \                     ??UI_UpdateLcd_65:
   \   0009E5   90....       MOV     DPTR,#uiLcdCursorState
   \   0009E8   E0           MOVX    A,@DPTR
   \   0009E9   6401         XRL     A,#0x1
   \   0009EB   F0           MOVX    @DPTR,A
   1724              
   1725              osal_start_timerEx(uiAppTaskId, uiLcdAutoUpdateEvent, LCD_CURSOR_UPDATE_INTERVAL);
   \   0009EC                ; Setup parameters for call to function osal_start_timerEx
   \   0009EC   90....       MOV     DPTR,#__Constant_1f4
   \   0009EF   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0009F2   12....       LCALL   ?Subroutine15 & 0xFFFF
   1726            }
   \                     ??CrossCallReturnLabel_22:
   \   0009F5   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0009F8   7404         MOV     A,#0x4
   \   0009FA   12....       LCALL   ?DEALLOC_XSTACK8
   1727          
   1728          #ifdef HAL_BOARD_CC2538
   1729            for (i = 0; i < 3; i++)
   1730            {
   1731              if (line[i] != LineBuf[i] + LCD_CC2538_PREFIX_COUNT)
   1732              {
   1733                osal_memcpy(LineBuf[i] + LCD_CC2538_PREFIX_COUNT, line[i], LCD_LINE_LENGTH + 1);
   1734              }
   1735              
   1736              line[i] = LineBuf[i];
   1737            }
   1738          #endif
   1739            
   1740          #ifdef LCD_SUPPORTED
   1741            HalLcd_HW_Clear();
   \                     ??UI_UpdateLcd_64:
   \   0009FD                ; Setup parameters for call to function HalLcd_HW_Clear
   \   0009FD   12....       LCALL   `??HalLcd_HW_Clear::?relay`; Banked call to: HalLcd_HW_Clear
   1742            HalLcdWriteString( line[0], UI_LCD_LINE_1 );
   \   000A00                ; Setup parameters for call to function HalLcdWriteString
   \   000A00   7901         MOV     R1,#0x1
   \   000A02   85..82       MOV     DPL,?XSP + 0
   \   000A05   85..83       MOV     DPH,?XSP + 1
   \   000A08   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000A0B   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1743            HalLcdWriteString( line[1], UI_LCD_LINE_2 );
   \   000A0E                ; Setup parameters for call to function HalLcdWriteString
   \   000A0E   7902         MOV     R1,#0x2
   \   000A10   E9           MOV     A,R1
   \   000A11   12....       LCALL   ?XSTACK_DISP0_8
   \   000A14   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000A17   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1744            HalLcdWriteString( line[2], UI_LCD_LINE_3 );
   \   000A1A                ; Setup parameters for call to function HalLcdWriteString
   \   000A1A   7903         MOV     R1,#0x3
   \   000A1C   7404         MOV     A,#0x4
   \   000A1E   12....       LCALL   ?XSTACK_DISP0_8
   \   000A21   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000A24   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1745          
   1746          #ifdef DEBUG_LCD_REFRESH
   1747            {
   1748              static bool toggle=TRUE;
   1749              HalLcd_HW_WriteChar(3,15,(toggle = !toggle) ? '>' : ' ');
   1750            }
   1751          #endif
   1752          
   1753          #endif
   1754          }
   \   000A27   743A         MOV     A,#0x3a
   \   000A29   12....       LCALL   ?DEALLOC_XSTACK8
   \   000A2C   7F0A         MOV     R7,#0xa
   \   000A2E   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   7A..         MOV     R2,#(uiInstallCode + 8) & 0xff
   \   000007   7B..         MOV     R3,#((uiInstallCode + 8) >> 8) & 0xff
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   7A..         MOV     R2,#uiInstallCode & 0xff
   \   000007   7B..         MOV     R3,#(uiInstallCode >> 8) & 0xff
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   E4           CLR     A
   \   000003   FB           MOV     R3,A
   \   000004   FC           MOV     R4,A
   \   000005   FD           MOV     R5,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000003   F583         MOV     DPH,A
   \   000005   8882         MOV     DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   90....       MOV     DPTR,#uiLcdAutoUpdateEvent
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FB           MOV     R3,A
   \   000008   90....       MOV     DPTR,#uiAppTaskId
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000003   C8           XCH     A,R0
   \   000004   2410         ADD     A,#0x10
   \   000006   F582         MOV     DPL,A
   \   000008   E4           CLR     A
   \   000009   38           ADDC    A,R0
   \   00000A   F583         MOV     DPH,A
   \   00000C   E4           CLR     A
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000009   7402         MOV     A,#0x2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   90....       MOV     DPTR,#pUiIdentifyTimeAttribute
   \   000003   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000006                REQUIRE ??Subroutine34_0
   \   000006                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   7910         MOV     R1,#0x10
   \   000002   90....       MOV     DPTR,#zgConfigPANID
   \   000005                REQUIRE ??Subroutine35_0
   \   000005                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000003   FC           MOV     R4,A
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000003   AA..         MOV     R2,?V0
   \   000005   FB           MOV     R3,A
   \   000006   E4           CLR     A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2406         ADD     A,#0x6
   \   000003                REQUIRE ??Subroutine36_0
   \   000003                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   F5..         MOV     ?V0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   3400         ADDC    A,#0x0
   \   000006   F5..         MOV     ?V1,A
   \   000008   78..         MOV     R0,#?V0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine37_0
   \   000006                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   7404         MOV     A,#0x4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   EA           MOV     A,R2
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   EB           MOV     A,R3
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B                ; Setup parameters for call to function uiCreateChannelMaskString
   \   00000B                ; Setup parameters for call to function uiCreateChannelMaskString
   \   00000B                ; Setup parameters for call to function uiCreateChannelMaskString
   \   00000B                ; Setup parameters for call to function uiCreateChannelMaskString
   \   00000B   7402         MOV     A,#0x2
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000003   F9           MOV     R1,A
   \   000004   90....       MOV     DPTR,#uiAppStatesMain
   \   000007   22           RET
   1755          
   1756          /*********************************************************************
   1757           * @fn          uiProcessPermitJoin
   1758           *
   1759           * @brief       Update the Network-Joining status LED
   1760           *
   1761           * @param       duration - The time left for joining, or 0 if the device is closed for joining
   1762           *
   1763           * @return      none
   1764           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1765          static void *uiProcessPermitJoin( void *duration )
   \                     uiProcessPermitJoin:
   1766          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1767            if (*(uint8 *)duration > 0)
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   90....       MOV     DPTR,#uiNwkOpenState
   \   00000C   6005         JZ      ??uiProcessPermitJoin_0
   1768            {
   1769              uiNwkOpenState |= NWK_OPEN_FOR_JOINING;
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   D2E0         SETB    0xE0 /* A   */.0
   \   000011   8003         SJMP    ??uiProcessPermitJoin_1
   1770            }
   1771            else
   1772            {
   1773              uiNwkOpenState &= ~NWK_OPEN_FOR_JOINING;
   \                     ??uiProcessPermitJoin_0:
   \   000013   E0           MOVX    A,@DPTR
   \   000014   C2E0         CLR     0xE0 /* A   */.0
   \                     ??uiProcessPermitJoin_1:
   \   000016   F0           MOVX    @DPTR,A
   1774            }
   1775          
   1776            HalLedBlink ( UI_LED_NETWORK_OPEN_STATE, 0, uiNetworkOpenStateLedDutyCycle[uiNwkOpenState], HAL_LED_DEFAULT_FLASH_TIME );
   \   000017                ; Setup parameters for call to function HalLedBlink
   \   000017   7CE8         MOV     R4,#-0x18
   \   000019   7D03         MOV     R5,#0x3
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F8           MOV     R0,A
   \   00001D   74..         MOV     A,#uiNetworkOpenStateLedDutyCycle & 0xff
   \   00001F   28           ADD     A,R0
   \   000020   F582         MOV     DPL,A
   \   000022   E4           CLR     A
   \   000023   34..         ADDC    A,#(uiNetworkOpenStateLedDutyCycle >> 8) & 0xff
   \   000025   F583         MOV     DPH,A
   \   000027   E0           MOVX    A,@DPTR
   \   000028   FB           MOV     R3,A
   \   000029   7A00         MOV     R2,#0x0
   \   00002B   7908         MOV     R1,#0x8
   \   00002D   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
   1777            
   1778            UI_UpdateLcd();
   \   000030                ; Setup parameters for call to function UI_UpdateLcd
   \   000030   12....       LCALL   `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
   1779            
   1780            return ( NULL );
   \   000033   7A00         MOV     R2,#0x0
   \   000035   7B00         MOV     R3,#0x0
   \   000037   02....       LJMP    ?Subroutine1 & 0xFFFF
   1781          }
   1782          
   1783          /*********************************************************************
   1784           * @fn          UI_Init
   1785           *
   1786           * @brief       Initialize the user-interface module.
   1787           *              This function must be called by the application during its initializatin.
   1788           *
   1789           * @param       app_task_id_value - the task-id of the application task
   1790           *              lcd_auto_update_event_value - the event mask (single bit) for using as the lcd-auto-update event.
   1791           *              key_auto_repeat_event_value - the event mask (single bit) for using as the key-auto-repeat event. 
   1792           *              ui_IdentifyTimeAttribute_value - a pointer to the identify attribute's value.
   1793           *              app_title_value - a pointer to a string, holding the title of the sample app.
   1794           *              _uiAppUpdateLcd - a pointer to a fuction to update the LCD when displaying the application-
   1795           *                specific screens.
   1796           *              _uiAppStatesMain - a pointer to the application-specific state-table.
   1797           *
   1798           * @return      none
   1799           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1800          void UI_Init(uint8 app_task_id_value, uint16 lcd_auto_update_event_value, uint16 key_auto_repeat_event_value, uint16 * ui_IdentifyTimeAttribute_value, char * app_title_value, uiAppUpdateLcd_t _uiAppUpdateLcd, const uiState_t _uiAppStatesMain[])
   \                     UI_Init:
   1801          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   1802            uiAppTaskId = app_task_id_value;
   \   000006   90....       MOV     DPTR,#uiAppTaskId
   \   000009   F0           MOVX    @DPTR,A
   1803            uiLcdAutoUpdateEvent = lcd_auto_update_event_value;
   \   00000A   90....       MOV     DPTR,#uiLcdAutoUpdateEvent
   \   00000D   EA           MOV     A,R2
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   A3           INC     DPTR
   \   000010   EB           MOV     A,R3
   \   000011   F0           MOVX    @DPTR,A
   1804            pUiIdentifyTimeAttribute = ui_IdentifyTimeAttribute_value;
   \   000012   7409         MOV     A,#0x9
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00001A   90....       MOV     DPTR,#pUiIdentifyTimeAttribute
   \   00001D   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   1805            uiAppTitleStr = app_title_value;
   \                     ??CrossCallReturnLabel_114:
   \   000020   740B         MOV     A,#0xb
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000028   90....       MOV     DPTR,#uiAppTitleStr
   \   00002B   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   1806            uiAppUpdateLcd = _uiAppUpdateLcd;
   \                     ??CrossCallReturnLabel_115:
   \   00002E   740D         MOV     A,#0xd
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000036   90....       MOV     DPTR,#uiAppUpdateLcd
   \   000039   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   1807            uiAppStatesMain = _uiAppStatesMain;
   \                     ??CrossCallReturnLabel_116:
   \   00003C   740F         MOV     A,#0xf
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000044   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   1808          #ifdef BDB_TL_TARGET
   1809            uiKeyAutoRepeatEvent = key_auto_repeat_event_value;
   1810          #endif
   1811          
   1812            ZDO_RegisterForZdoCB(ZDO_PERMIT_JOIN_CBID, &uiProcessPermitJoin);
   \                     ??CrossCallReturnLabel_117:
   \   000047                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000047   7A..         MOV     R2,#`??uiProcessPermitJoin::?relay` & 0xff
   \   000049   7B..         MOV     R3,#(`??uiProcessPermitJoin::?relay` >> 8) & 0xff
   \   00004B   7907         MOV     R1,#0x7
   \   00004D   12....       LCALL   `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   1813            
   1814            bdb_RegisterIdentifyTimeChangeCB( uiProcessIdentifyTimeChange );
   \   000050                ; Setup parameters for call to function bdb_RegisterIdentifyTimeChangeCB
   \   000050   7A..         MOV     R2,#`??uiProcessIdentifyTimeChange::?relay` & 0xff
   \   000052   7B..         MOV     R3,#(`??uiProcessIdentifyTimeChange::?relay` >> 8) & 0xff
   \   000054   12....       LCALL   `??bdb_RegisterIdentifyTimeChangeCB::?relay`; Banked call to: bdb_RegisterIdentifyTimeChangeCB
   1815            bdb_RegisterBindNotificationCB( uiProcessBindNotification );
   \   000057                ; Setup parameters for call to function bdb_RegisterBindNotificationCB
   \   000057   7A..         MOV     R2,#`??uiProcessBindNotification::?relay` & 0xff
   \   000059   7B..         MOV     R3,#(`??uiProcessBindNotification::?relay` >> 8) & 0xff
   \   00005B   12....       LCALL   `??bdb_RegisterBindNotificationCB::?relay`; Banked call to: bdb_RegisterBindNotificationCB
   1816            
   1817          #ifdef BDB_TL_TARGET
   1818            bdb_RegisterTouchlinkTargetEnableCB( uiProcessTouchlinkTargetEnable );
   1819          #endif
   1820          
   1821            bdb_StartCommissioning(BDB_COMMISSIONING_REJOIN_EXISTING_NETWORK_ON_STARTUP);
   \   00005E                ; Setup parameters for call to function bdb_StartCommissioning
   \   00005E   7900         MOV     R1,#0x0
   \   000060   12....       LCALL   `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
   1822          }
   \   000063   02....       LJMP    ?Subroutine3 & 0xFFFF
   1823          
   1824          /*********************************************************************
   1825           * @fn      uiProcessTouchlinkTargetEnable
   1826           *
   1827           * @brief   Uopdate the UI when the touchlink target functionality is enabled or disabled
   1828           *
   1829           * @param   enable - the current state of the touchlink target (0 - disabled; 1 - enabled)
   1830           *
   1831           * @return  none
   1832           */
   1833          #ifdef BDB_TL_TARGET
   1834          static void uiProcessTouchlinkTargetEnable( uint8 enable )
   1835          {
   1836            if ( enable )
   1837            {
   1838              uiNwkOpenState |= NWK_OPEN_TOUCHLINK_AS_TARGET;
   1839            }
   1840            else
   1841            {
   1842              uiNwkOpenState &= ~NWK_OPEN_TOUCHLINK_AS_TARGET;
   1843            }
   1844          
   1845            HalLedBlink ( UI_LED_NETWORK_OPEN_STATE, 0, uiNetworkOpenStateLedDutyCycle[uiNwkOpenState], HAL_LED_DEFAULT_FLASH_TIME );
   1846          
   1847            UI_UpdateLcd();
   1848          }
   1849          #endif
   1850          
   1851          /*********************************************************************
   1852           * @fn      uiProcessIdentifyTimeChange
   1853           *
   1854           * @brief   Uopdate the UI when the identify time attribute's value has changed
   1855           *
   1856           * @param   endpoint - the endpoints which had its identify time attribute changed
   1857           *
   1858           * @return  none
   1859           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1860          static void uiProcessIdentifyTimeChange( uint8 endpoint )
   \                     uiProcessIdentifyTimeChange:
   1861          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1862            if ( *pUiIdentifyTimeAttribute > 0 )
   \   000004   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000007   600F         JZ      ??uiProcessIdentifyTimeChange_0
   1863            {
   1864              HalLedBlink ( UI_LED_IDENTIFY, 0xFF, UI_LED_IDENTIFY_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
   \   000009                ; Setup parameters for call to function HalLedBlink
   \   000009   7CE8         MOV     R4,#-0x18
   \   00000B   7D03         MOV     R5,#0x3
   \   00000D   7B32         MOV     R3,#0x32
   \   00000F   7AFF         MOV     R2,#-0x1
   \   000011   7904         MOV     R1,#0x4
   \   000013   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
   \   000016   8007         SJMP    ??uiProcessIdentifyTimeChange_1
   1865            }
   1866            else
   1867            {
   1868              HalLedSet ( UI_LED_IDENTIFY, HAL_LED_MODE_OFF );
   \                     ??uiProcessIdentifyTimeChange_0:
   \   000018                ; Setup parameters for call to function HalLedSet
   \   000018   7A00         MOV     R2,#0x0
   \   00001A   7904         MOV     R1,#0x4
   \   00001C   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   1869            }
   1870          }
   \                     ??uiProcessIdentifyTimeChange_1:
   \   00001F   02....       LJMP    ?Subroutine1 & 0xFFFF
   1871          
   1872          /*********************************************************************
   1873           * @fn      uiProcessBindNotification
   1874           *
   1875           * @brief   Uopdate the UI when a bind is added
   1876           *
   1877           * @param   data - information about the new binding entry
   1878           *
   1879           * @return  none
   1880           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1881          static void uiProcessBindNotification( bdbBindNotificationData_t *data )
   \                     uiProcessBindNotification:
   1882          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1883            //note: 'data' argument contains information about the new binding, which can be useful for the user's application
   1884          
   1885            if (FBMatchesFound < 255)
   \   000004   90....       MOV     DPTR,#FBMatchesFound
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F4           CPL     A
   \   000009   6003         JZ      ??uiProcessBindNotification_0
   1886            {
   1887              FBMatchesFound++;
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   04           INC     A
   \   00000D   F0           MOVX    @DPTR,A
   1888            }
   1889          }
   \                     ??uiProcessBindNotification_0:
   \   00000E   02....       LJMP    ?Subroutine1 & 0xFFFF
   1890          
   1891          /*********************************************************************
   1892           * @fn      UI_DeviceStateUpdated
   1893           *
   1894           * @brief   Uopdate the UI when the device state has changed
   1895           *
   1896           * @param   NwkState - the new network-state of the device
   1897           *
   1898           * @return  none
   1899           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1900          void UI_DeviceStateUpdated(devStates_t NwkState)
   \                     UI_DeviceStateUpdated:
   1901          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   1902            uint8 LedDutyCycle;
   1903          
   1904            uiNwkStateShadow = NwkState;
   \   000006   90....       MOV     DPTR,#uiNwkStateShadow
   \   000009   F0           MOVX    @DPTR,A
   1905          
   1906            switch (NwkState)
   \   00000A   24FA         ADD     A,#-0x6
   \   00000C   600F         JZ      ??UI_DeviceStateUpdated_0
   \   00000E   14           DEC     A
   \   00000F   6008         JZ      ??UI_DeviceStateUpdated_1
   \   000011   24FE         ADD     A,#-0x2
   \   000013   700C         JNZ     ??UI_DeviceStateUpdated_2
   1907            {
   1908              case DEV_ZB_COORD:
   1909                LedDutyCycle = UI_LED_COORDINATOR_DUTY_CYCLE;
   \   000015   7B4B         MOV     R3,#0x4b
   1910                break;
   \   000017   800A         SJMP    ??UI_DeviceStateUpdated_3
   1911              case DEV_ROUTER:
   1912                LedDutyCycle = UI_LED_ROUTER_DUTY_CYCLE;
   \                     ??UI_DeviceStateUpdated_1:
   \   000019   7B5F         MOV     R3,#0x5f
   1913                break;
   \   00001B   8006         SJMP    ??UI_DeviceStateUpdated_3
   1914              case DEV_END_DEVICE:
   1915                LedDutyCycle = UI_LED_END_DEVICE_DUTY_CYCLE;
   \                     ??UI_DeviceStateUpdated_0:
   \   00001D   7B64         MOV     R3,#0x64
   1916                break;
   \   00001F   8002         SJMP    ??UI_DeviceStateUpdated_3
   1917              default:
   1918                LedDutyCycle = 0;
   \                     ??UI_DeviceStateUpdated_2:
   \   000021   7B00         MOV     R3,#0x0
   1919                break;
   1920            }
   1921            
   1922            HalLedBlink ( UI_LED_DEVICE_STATE, 0, LedDutyCycle, UI_LED_DEVICE_STATE_FLASH_TIME );
   \                     ??UI_DeviceStateUpdated_3:
   \   000023                ; Setup parameters for call to function HalLedBlink
   \   000023   7CA0         MOV     R4,#-0x60
   \   000025   7D0F         MOV     R5,#0xf
   \   000027   7A00         MOV     R2,#0x0
   \   000029   7902         MOV     R1,#0x2
   \   00002B   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
   1923          
   1924            UI_UpdateLcd();
   \   00002E                ; Setup parameters for call to function UI_UpdateLcd
   \   00002E   12....       LCALL   `??UI_UpdateLcd::?relay`; Banked call to: UI_UpdateLcd
   1925          }
   \   000031   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for uiLcdCursorLine>`:
   \   000000   FF           DB 255

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for uiSelectedBdbComissioningMod`:
   \   000000   0E           DB 14

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for uiAddInstallCodeLastStatus>`:
   \   000000   FF           DB 255

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for uiCommissioningStateStr>`:
   \   000000   ....         DW `?<Constant "--">`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for uiInstallCode>`:
   \   000000   83           DB 131
   \   000001   FE           DB 254
   \   000002   D3           DB 211
   \   000003   40           DB 64
   \   000004   7A           DB 122
   \   000005   93           DB 147
   \   000006   97           DB 151
   \   000007   23           DB 35
   \   000008   A5           DB 165
   \   000009   C6           DB 198
   \   00000A   39           DB 57
   \   00000B   B2           DB 178
   \   00000C   69           DB 105
   \   00000D   16           DB 22
   \   00000E   D5           DB 213
   \   00000F   05           DB 5
   \   000010   C3           DB 195
   \   000011   B5           DB 181

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for uiStates>`:
   \   000000   ....         DW gui_states_main

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for uiNetworkOpenStateLedDutyCyc`:
   \   000000   00           DB 0
   \   000001   19           DB 25
   \   000002   4B           DB 75
   \   000003   64           DB 100

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uiUintToString::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uiUintToString

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uiArrayToString::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uiArrayToString

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uiCreateChannelMaskString::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uiCreateChannelMaskString

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uiActionMenuJump::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uiActionMenuJump

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uiActionStartComissioning::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uiActionStartComissioning

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uiActionSetInstallCode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uiActionSetInstallCode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uiActionAppSecificMenu::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uiActionAppSecificMenu

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UI_ActionBackFromAppMenu::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UI_ActionBackFromAppMenu

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uiActionProcessConfigureChannels::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uiActionProcessConfigureChannels

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uiActionProcessConfigurePanId::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uiActionProcessConfigurePanId

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uiActionProcessPrepareInstallCode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uiActionProcessPrepareInstallCode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uiActionConfigureEnables::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uiActionConfigureEnables

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uiActionResetToFactoryNew::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uiActionResetToFactoryNew

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UI_MainStateMachine::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UI_MainStateMachine

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UI_UpdateComissioningStatus::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UI_UpdateComissioningStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UI_UpdateLcd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UI_UpdateLcd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uiProcessPermitJoin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uiProcessPermitJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UI_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UI_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uiProcessIdentifyTimeChange::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uiProcessIdentifyTimeChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uiProcessBindNotification::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uiProcessBindNotification

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UI_DeviceStateUpdated::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UI_DeviceStateUpdated

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "--">`:
   \   000000   2D2D00       DB "--"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EXST">`:
   \   000000   45585354     DB "EXST"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "NF">`:
   \   000000   4E4600       DB "NF"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "FORM">`:
   \   000000   464F524D     DB "FORM"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "NS">`:
   \   000000   4E5300       DB "NS"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "JOIN">`:
   \   000000   4A4F494E     DB "JOIN"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "FB">`:
   \   000000   464200       DB "FB"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "IN">`:
   \   000000   494E00       DB "IN"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "PL">`:
   \   000000   504C00       DB "PL"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<     BACK     >">`:
   \   000000   3C202020     DB "<     BACK     >"
   \            20204241
   \            434B2020
   \            2020203E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ENABLED">`:
   \   000000   454E4142     DB "ENABLED"
   \            4C454400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DISABLED">`:
   \   000000   44495341     DB "DISABLED"
   \            424C4544
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<FINDNG+BINDNG >">`:
   \   000000   3C46494E     DB "<FINDNG+BINDNG >"
   \            444E472B
   \            42494E44
   \            4E47203E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<NWK FORMATION >">`:
   \   000000   3C4E574B     DB "<NWK FORMATION >"
   \            20464F52
   \            4D415449
   \            4F4E203E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "< NWK STEERING >">`:
   \   000000   3C204E57     DB "< NWK STEERING >"
   \            4B205354
   \            45455249
   \            4E47203E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<  CONFIGURE   >">`:
   \   000000   3C202043     DB "<  CONFIGURE   >"
   \            4F4E4649
   \            47555245
   \            2020203E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Resetting,">`:
   \   000000   52657365     DB "Resetting,"
   \            7474696E
   \            672C00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Please wait...">`:
   \   000000   506C6561     DB "Please wait..."
   \            73652077
   \            6169742E
   \            2E2E00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "< RESET TO FN  >">`:
   \   000000   3C205245     DB "< RESET TO FN  >"
   \            53455420
   \            544F2046
   \            4E20203E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "hold OK for help">`:
   \   000000   686F6C64     DB "hold OK for help"
   \            204F4B20
   \            666F7220
   \            68656C70
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<     HELP     >">`:
   \   000000   3C202020     DB "<     HELP     >"
   \            20204845
   \            4C502020
   \            2020203E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\033 \\032 to move     ">`:
   \   000000   1B201A20     DB "\033 \032 to move     "
   \            746F206D
   \            6F766520
   \            20202020
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\030 \\031 change value">`:
   \   000000   18201920     DB "\030 \031 change value"
   \            6368616E
   \            67652076
   \            616C7565
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OK to execute   ">`:
   \   000000   4F4B2074     DB "OK to execute   "
   \            6F206578
   \            65637574
   \            65202020
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Please wait...  ">`:
   \   000000   506C6561     DB "Please wait...  "
   \            73652077
   \            6169742E
   \            2E2E2020
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "xx              ">`:
   \   000000   78782020     DB "xx              "
   \            20202020
   \            20202020
   \            20202020
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "NotOnNwk">`:
   \   000000   4E6F744F     DB "NotOnNwk"
   \            6E4E776B
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Open">`:
   \   000000   4F70656E     DB "Open"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CLOSED">`:
   \   000000   434C4F53     DB "CLOSED"
   \            454400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Id000 Srch000/00">`:
   \   000000   49643030     DB "Id000 Srch000/00"
   \            30205372
   \            63683030
   \            302F3030
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<  COMMISSION  >">`:
   \   000000   3C202043     DB "<  COMMISSION  >"
   \            4F4D4D49
   \            5353494F
   \            4E20203E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<ADD INSTL CODE>">`:
   \   000000   3C414444     DB "<ADD INSTL CODE>"
   \            20494E53
   \            544C2043
   \            4F44453E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<SET INSTL CODE>">`:
   \   000000   3C534554     DB "<SET INSTL CODE>"
   \            20494E53
   \            544C2043
   \            4F44453E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Last status:">`:
   \   000000   4C617374     DB "Last status:"
   \            20737461
   \            7475733A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "---">`:
   \   000000   2D2D2D00     DB "---"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SUCCESS">`:
   \   000000   53554343     DB "SUCCESS"
   \            45535300

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ERROR (0x  )    ">`:
   \   000000   4552524F     DB "ERROR (0x  )    "
   \            52202830
   \            78202029
   \            20202020
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<APLY INST CODE>">`:
   \   000000   3C41504C     DB "<APLY INST CODE>"
   \            5920494E
   \            53542043
   \            4F44453E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "       INST CODE">`:
   \   000000   20202020     DB "       INST CODE"
   \            20202049
   \            4E535420
   \            434F4445
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<   APP MENU   >">`:
   \   000000   3C202020     DB "<   APP MENU   >"
   \            41505020
   \            4D454E55
   \            2020203E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "1234567890123456">`:
   \   000000   31323334     DB "1234567890123456"
   \            35363738
   \            39303132
   \            33343536
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<PRI CHANL MASK>">`:
   \   000000   3C505249     DB "<PRI CHANL MASK>"
   \            20434841
   \            4E4C204D
   \            41534B3E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<SEC CHANL MASK>">`:
   \   000000   3C534543     DB "<SEC CHANL MASK>"
   \            20434841
   \            4E4C204D
   \            41534B3E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " PRI CHANL MASK ">`:
   \   000000   20505249     DB " PRI CHANL MASK "
   \            20434841
   \            4E4C204D
   \            41534B20
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " SEC CHANL MASK ">`:
   \   000000   20534543     DB " SEC CHANL MASK "
   \            20434841
   \            4E4C204D
   \            41534B20
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "    0xFFFF (any)">`:
   \   000000   20202020     DB "    0xFFFF (any)"
   \            30784646
   \            46462028
   \            616E7929
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "    0x          ">`:
   \   000000   20202020     DB "    0x          "
   \            30782020
   \            20202020
   \            20202020
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<    PAN ID    >">`:
   \   000000   3C202020     DB "<    PAN ID    >"
   \            2050414E
   \            20494420
   \            2020203E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "     PAN ID     ">`:
   \   000000   20202020     DB "     PAN ID     "
   \            2050414E
   \            20494420
   \            20202020
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "nxxxx cxx axxxx ">`:
   \   000000   6E787878     DB "nxxxx cxx axxxx "
   \            78206378
   \            78206178
   \            78787820
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "          <INFO>">`:
   \   000000   20202020     DB "          <INFO>"
   \            20202020
   \            20203C49
   \            4E464F3E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZC">`:
   \   000000   5A4300       DB "ZC"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZR DIST">`:
   \   000000   5A522044     DB "ZR DIST"
   \            49535400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZR CENT">`:
   \   000000   5A522043     DB "ZR CENT"
   \            454E5400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZED p">`:
   \   000000   5A454420     DB "ZED p"
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZED (   )">`:
   \   000000   5A454420     DB "ZED (   )"
   \            28202020
   \            2900    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_fa:
   \   000000   FA000000     DD 250

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1f4:
   \   000000   F4010000     DD 500
   1926          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   UI_ActionBackFromAppMenu
      0      9   UI_DeviceStateUpdated
        0      9   -> HalLedBlink
        0      9   -> UI_UpdateLcd
      0     17   UI_Init
        0      9   -> ZDO_RegisterForZdoCB
        0      9   -> bdb_RegisterBindNotificationCB
        0      9   -> bdb_RegisterIdentifyTimeChangeCB
        0      9   -> bdb_StartCommissioning
      0      9   UI_MainStateMachine
        0      9   -> UI_UpdateLcd
      2      0   UI_UpdateComissioningStatus
        2      0   -> UI_UpdateLcd
      1     90   UI_UpdateLcd
        0     76   -> APSME_IsDistributedSecurity
        0     76   -> HalLcdWriteString
        0     76   -> HalLcd_HW_Clear
        0     76   -> NLME_GetRemainingPermitJoiningDuration
        0     76   -> bdb_GetFBInitiatorStatus
        0     79   -> osal_memcpy
        0     80   -> osal_start_timerEx
        0     76   -> osal_stop_timerEx
        0     77   -> uiArrayToString
        0     78   -> uiCreateChannelMaskString
        0     81   -> uiUintToString
      2      0   uiActionAppSecificMenu
      0     10   uiActionConfigureEnables
      0     10   uiActionMenuJump
      0     12   uiActionProcessConfigureChannels
      0     16   uiActionProcessConfigurePanId
        0     12   -> osal_nv_item_len
        0     16   -> osal_nv_write
      0     12   uiActionProcessPrepareInstallCode
        0     12   -> bdb_GenerateInstallCodeCRC
      2      0   uiActionResetToFactoryNew
        2      0   -> bdb_resetLocalAction
      0     10   uiActionSetInstallCode
        0     10   -> bdb_GenerateInstallCodeCRC
        0     10   -> bdb_setActiveCentralizedLinkKey
      2      0   uiActionStartComissioning
        2      0   -> UI_UpdateLcd
        2      0   -> bdb_StartCommissioning
      1     92   uiArrayToString
      1     99   uiCreateChannelMaskString
      2      0   uiProcessBindNotification
      2      0   uiProcessIdentifyTimeChange
        2      0   -> HalLedBlink
        2      0   -> HalLedSet
      2      0   uiProcessPermitJoin
        2      0   -> HalLedBlink
        2      0   -> UI_UpdateLcd
      1    106   uiUintToString


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      17  ?<Constant "          <INFO>">
      17  ?<Constant "       INST CODE">
      17  ?<Constant "     PAN ID     ">
      17  ?<Constant "    0x          ">
      17  ?<Constant "    0xFFFF (any)">
      17  ?<Constant " PRI CHANL MASK ">
      17  ?<Constant " SEC CHANL MASK ">
       3  ?<Constant "--">
       4  ?<Constant "---">
      17  ?<Constant "1234567890123456">
      17  ?<Constant "<     BACK     >">
      17  ?<Constant "<     HELP     >">
      17  ?<Constant "<    PAN ID    >">
      17  ?<Constant "<   APP MENU   >">
      17  ?<Constant "<  COMMISSION  >">
      17  ?<Constant "<  CONFIGURE   >">
      17  ?<Constant "< NWK STEERING >">
      17  ?<Constant "< RESET TO FN  >">
      17  ?<Constant "<ADD INSTL CODE>">
      17  ?<Constant "<APLY INST CODE>">
      17  ?<Constant "<FINDNG+BINDNG >">
      17  ?<Constant "<NWK FORMATION >">
      17  ?<Constant "<PRI CHANL MASK>">
      17  ?<Constant "<SEC CHANL MASK>">
      17  ?<Constant "<SET INSTL CODE>">
       7  ?<Constant "CLOSED">
       9  ?<Constant "DISABLED">
       8  ?<Constant "ENABLED">
      17  ?<Constant "ERROR (0x  )    ">
       5  ?<Constant "EXST">
       3  ?<Constant "FB">
       5  ?<Constant "FORM">
       3  ?<Constant "IN">
      17  ?<Constant "Id000 Srch000/00">
       5  ?<Constant "JOIN">
      13  ?<Constant "Last status:">
       3  ?<Constant "NF">
       3  ?<Constant "NS">
       9  ?<Constant "NotOnNwk">
      17  ?<Constant "OK to execute   ">
       5  ?<Constant "Open">
       3  ?<Constant "PL">
      17  ?<Constant "Please wait...  ">
      15  ?<Constant "Please wait...">
      11  ?<Constant "Resetting,">
       8  ?<Constant "SUCCESS">
       3  ?<Constant "ZC">
      10  ?<Constant "ZED (   )">
       6  ?<Constant "ZED p">
       8  ?<Constant "ZR CENT">
       8  ?<Constant "ZR DIST">
      17  ?<Constant "\030 \031 change value">
      17  ?<Constant "\033 \032 to move     ">
      17  ?<Constant "hold OK for help">
      17  ?<Constant "nxxxx cxx axxxx ">
      17  ?<Constant "xx              ">
       1  ?<Initializer for uiAddInstallCodeLastStatus>
       2  ?<Initializer for uiCommissioningStateStr>
      18  ?<Initializer for uiInstallCode>
       1  ?<Initializer for uiLcdCursorLine>
       4  ?<Initializer for uiNetworkOpenStateLedDutyCyc
       1  ?<Initializer for uiSelectedBdbComissioningMod
       2  ?<Initializer for uiStates>
       8  ??Subroutine32_0
       6  ??Subroutine33_0
       7  ??Subroutine34_0
       6  ??Subroutine35_0
      11  ??Subroutine36_0
       6  ??Subroutine37_0
       5  ?Subroutine0
       7  ?Subroutine1
       3  ?Subroutine10
       5  ?Subroutine11
       6  ?Subroutine12
      12  ?Subroutine13
       4  ?Subroutine14
      14  ?Subroutine15
       6  ?Subroutine16
       8  ?Subroutine17
       4  ?Subroutine18
      13  ?Subroutine19
       5  ?Subroutine2
       7  ?Subroutine20
      10  ?Subroutine21
      10  ?Subroutine22
       3  ?Subroutine23
       8  ?Subroutine24
       5  ?Subroutine25
       1  ?Subroutine26
      15  ?Subroutine27
       8  ?Subroutine28
       8  ?Subroutine29
       5  ?Subroutine3
       6  ?Subroutine30
       5  ?Subroutine31
      10  ?Subroutine4
      14  ?Subroutine5
      11  ?Subroutine6
       8  ?Subroutine7
       6  ?Subroutine8
       7  ?Subroutine9
       1  CurrentModifiedFieldIsBigEndian
       1  CurrentModifiedFieldLen
       1  FBMatchesFound
       1  PrevKeys
      26  UI_ActionBackFromAppMenu
       6  UI_ActionBackFromAppMenu::?relay
      52  UI_DeviceStateUpdated
       6  UI_DeviceStateUpdated::?relay
     102  UI_Init
       6  UI_Init::?relay
     227  UI_MainStateMachine
       6  UI_MainStateMachine::?relay
     179  UI_UpdateComissioningStatus
       6  UI_UpdateComissioningStatus::?relay
    2609  UI_UpdateLcd
       6  UI_UpdateLcd::?relay
       4  __Constant_1f4
       4  __Constant_fa
     132  gui_states_main
       1  index
       2  pCurrentModifiedField
       2  pUiIdentifyTimeAttribute
      30  uiActionAppSecificMenu
       6  uiActionAppSecificMenu::?relay
      51  uiActionConfigureEnables
       6  uiActionConfigureEnables::?relay
     118  uiActionMenuJump
       6  uiActionMenuJump::?relay
     200  uiActionProcessConfigureChannels
       6  uiActionProcessConfigureChannels::?relay
     252  uiActionProcessConfigurePanId
       6  uiActionProcessConfigurePanId::?relay
     363  uiActionProcessPrepareInstallCode
       6  uiActionProcessPrepareInstallCode::?relay
      16  uiActionResetToFactoryNew
       6  uiActionResetToFactoryNew::?relay
      36  uiActionSetInstallCode
       6  uiActionSetInstallCode::?relay
      74  uiActionStartComissioning
       6  uiActionStartComissioning::?relay
       1  uiAddInstallCodeLastStatus
       2  uiAppStatesMain
       1  uiAppTaskId
       2  uiAppTitleStr
       2  uiAppUpdateLcd
     146  uiArrayToString
       6  uiArrayToString::?relay
       1  uiComissioningIsActive
       1  uiCommissioningIsInitializing
       2  uiCommissioningNetworkConnrctionStr
       2  uiCommissioningStateStr
     138  uiCreateChannelMaskString
       6  uiCreateChannelMaskString::?relay
       2  uiCurrentState
      18  uiInstallCode
       2  uiLcdAutoUpdateEvent
       1  uiLcdCursorCol
       1  uiLcdCursorLine
       1  uiLcdCursorState
       4  uiNetworkOpenStateLedDutyCycle
       1  uiNwkOpenState
       1  uiNwkStateShadow
      17  uiProcessBindNotification
       6  uiProcessBindNotification::?relay
      34  uiProcessIdentifyTimeChange
       6  uiProcessIdentifyTimeChange::?relay
      58  uiProcessPermitJoin
       6  uiProcessPermitJoin::?relay
       1  uiResetInitiated
       1  uiSelectedBdbComissioningModes
       2  uiStates
     192  uiUintToString
       6  uiUintToString::?relay

 
 5 203 bytes in segment BANKED_CODE
   126 bytes in segment BANK_RELAYS
    29 bytes in segment XDATA_I
    29 bytes in segment XDATA_ID
   841 bytes in segment XDATA_ROM_C
    29 bytes in segment XDATA_Z
 
 5 358 bytes of CODE  memory
   833 bytes of CONST memory (+ 8 bytes shared)
    58 bytes of XDATA memory

Errors: none
Warnings: none
