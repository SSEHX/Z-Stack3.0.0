///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               26/Oct/2017  14:48:10
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack 3.0.0\Components\stack\GP\gp_common.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
//        Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        "C:\Texas Instruments\Z-Stack 3.0.0\Components\stack\GP\gp_common.c"
//        -D BDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D
//        NV_RESTORE -D xPOWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK
//        -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
//        xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
//        ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D
//        ZCL_SCENES -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -lC "C:\Texas
//        Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
//        -lA "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
//        Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
//        "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Texas Instruments\Z-Stack
//        3.0.0\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\EndDeviceEB\List\gp_common.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME gp_common

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?V11
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_AND_X
        EXTERN ?L_EQ_X
        EXTERN ?L_IOR
        EXTERN ?L_IOR_TO_X
        EXTERN ?L_IOR_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_SHL
        EXTERN ?L_SUB_FROM_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?SC_DIV_MOD
        EXTERN ?UL_GE_X
        EXTERN ?XLOAD_R0123
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN ?XSTORE_R0123
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??GP_DataCnf::?relay`
        FUNCTION `??GP_DataCnf::?relay`,0203H
        PUBLIC `??GP_DataInd::?relay`
        FUNCTION `??GP_DataInd::?relay`,0203H
        FUNCTION `??GP_RecoveryKey::?relay`,0203H
        PUBLIC `??GP_SecReq::?relay`
        FUNCTION `??GP_SecReq::?relay`,0203H
        PUBLIC `??gp_PopulateField::?relay`
        FUNCTION `??gp_PopulateField::?relay`,0203H
        PUBLIC `??gp_ProxyTblInit::?relay`
        FUNCTION `??gp_ProxyTblInit::?relay`,0203H
        PUBLIC `??gp_RegisterCommissioningModeCB::?relay`
        FUNCTION `??gp_RegisterCommissioningModeCB::?relay`,0203H
        PUBLIC `??gp_RegisterGPChangeChannelReqCB::?relay`
        FUNCTION `??gp_RegisterGPChangeChannelReqCB::?relay`,0203H
        PUBLIC `??gp_RegisterGPChangeChannelReqForBDBCB::?relay`
        FUNCTION `??gp_RegisterGPChangeChannelReqForBDBCB::?relay`,0203H
        FUNCTION `??gp_SecurityOperationProxy::?relay`,0203H
        FUNCTION `??gp_ZclPairingParse::?relay`,0203H
        FUNCTION `??gp_ZclProxyTableReqParse::?relay`,0203H
        PUBLIC `??gp_endpointInit::?relay`
        FUNCTION `??gp_endpointInit::?relay`,0203H
        PUBLIC `??gp_expireDuplicateFiltering::?relay`
        FUNCTION `??gp_expireDuplicateFiltering::?relay`,0203H
        PUBLIC `??gp_getProxyTableByGpId::?relay`
        FUNCTION `??gp_getProxyTableByGpId::?relay`,0203H
        PUBLIC `??gp_getProxyTableByIndex::?relay`
        FUNCTION `??gp_getProxyTableByIndex::?relay`,0203H
        PUBLIC `??gp_returnOperationalChannel::?relay`
        FUNCTION `??gp_returnOperationalChannel::?relay`,0203H
        PUBLIC `??gp_stopCommissioningMode::?relay`
        FUNCTION `??gp_stopCommissioningMode::?relay`,0203H
        PUBLIC `??zclGp_DataIndParse::?relay`
        FUNCTION `??zclGp_DataIndParse::?relay`,0203H
        FUNCTION `??zclGp_GpPairingCommandCB::?relay`,0203H
        FUNCTION `??zclGp_GpProxyCommissioningModeCB::?relay`,0203H
        FUNCTION `??zclGp_GpProxyTableReqCB::?relay`,0203H
        FUNCTION `??zclGp_GpResponseCommandCB::?relay`,0203H
        PUBLIC `??zclGp_ManteinanceIndParse::?relay`
        FUNCTION `??zclGp_ManteinanceIndParse::?relay`,0203H
        PUBLIC GP_DataCnf
        FUNCTION GP_DataCnf,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC GP_DataInd
        FUNCTION GP_DataInd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        FUNCTION GP_RecoveryKey,0a1203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 40, STACK
        PUBLIC GP_SecReq
        FUNCTION GP_SecReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 44, STACK
        PUBWEAK __Constant_10000
        PUBWEAK __Constant_1388
        PUBWEAK __Constant_20000
        PUBWEAK __Constant_ff
        PUBWEAK __Constant_ff00
        PUBWEAK __Constant_ff0000
        PUBLIC gp_DataIndList
        PUBLIC gp_PopulateField
        FUNCTION gp_PopulateField,0a1203H
        ARGFRAME XSTACK, 84, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC gp_ProxyTblInit
        FUNCTION gp_ProxyTblInit,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 80, STACK
        PUBLIC gp_RegisterCommissioningModeCB
        FUNCTION gp_RegisterCommissioningModeCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC gp_RegisterGPChangeChannelReqCB
        FUNCTION gp_RegisterGPChangeChannelReqCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC gp_RegisterGPChangeChannelReqForBDBCB
        FUNCTION gp_RegisterGPChangeChannelReqForBDBCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION gp_SecurityOperationProxy,0a1203H
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 96, STACK
        FUNCTION gp_ZclPairingParse,0a1203H
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 87, STACK
        FUNCTION gp_ZclProxyTableReqParse,0a1203H
        ARGFRAME XSTACK, 100, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC gp_commissionerAddress
        PUBLIC gp_commissioningOptions
        PUBLIC gp_commissioningUnicastAddress
        PUBLIC gp_endpointInit
        FUNCTION gp_endpointInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC gp_expireDuplicateFiltering
        FUNCTION gp_expireDuplicateFiltering,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC gp_getProxyTableByGpId
        FUNCTION gp_getProxyTableByGpId,0a1203H
        ARGFRAME XSTACK, 99, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC gp_getProxyTableByIndex
        FUNCTION gp_getProxyTableByIndex,0a1203H
        ARGFRAME XSTACK, 100, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        PUBLIC gp_returnOperationalChannel
        FUNCTION gp_returnOperationalChannel,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        PUBLIC gp_stopCommissioningMode
        FUNCTION gp_stopCommissioningMode,021203H
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC gp_tempLogicalChannel
        PUBLIC pZclGp_ProxyTableEntries
        PUBLIC pZclGp_gppBlockedGPDID
        PUBLIC zclGp_Attrs
        PUBLIC zclGp_DataIndParse
        FUNCTION zclGp_DataIndParse,0a1203H
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 89, STACK
        FUNCTION zclGp_GpPairingCommandCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 53, STACK
        FUNCTION zclGp_GpProxyCommissioningModeCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION zclGp_GpProxyTableReqCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 102, STACK
        FUNCTION zclGp_GpResponseCommandCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 101, STACK
        PUBLIC zclGp_ManteinanceIndParse
        FUNCTION zclGp_ManteinanceIndParse,0a1203H
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC zclGp_NumAttributes
        PUBLIC zclGp_clusterRevision
        PUBLIC zclGp_gpLinkKey
        PUBLIC zclGp_gpSharedSecurityKey
        PUBLIC zclGp_gpSharedSecurityKeyType
        PUBLIC zclGp_gppActiveFunctionality
        PUBLIC zclGp_gppFunctionality
        PUBLIC zclGp_gppMaxProxyTableEntries
        PUBLIC zclGp_gppMaxSearchCounter
        PUBLIC zclGp_gppNotificationRetryNumber
        PUBLIC zclGp_gppNotificationRetryTimer
        PUBLIC zgGP_InCommissioningMode
        PUBLIC zgpSharedKey
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
GP_DataReq          SYMBOL "GP_DataReq"
`??GP_DataReq::?relay` SYMBOL "?relay", GP_DataReq
ZDSecMgrReadKeyFromNv SYMBOL "ZDSecMgrReadKeyFromNv"
`??ZDSecMgrReadKeyFromNv::?relay` SYMBOL "?relay", ZDSecMgrReadKeyFromNv
ZMacSetReq          SYMBOL "ZMacSetReq"
`??ZMacSetReq::?relay` SYMBOL "?relay", ZMacSetReq
bdb_RegisterSimpleDescriptor SYMBOL "bdb_RegisterSimpleDescriptor"
`??bdb_RegisterSimpleDescriptor::?relay` SYMBOL "?relay", bdb_RegisterSimpleDescriptor
gp_DataIndAppendToList SYMBOL "gp_DataIndAppendToList"
`??gp_DataIndAppendToList::?relay` SYMBOL "?relay", gp_DataIndAppendToList
gp_DataIndGet       SYMBOL "gp_DataIndGet"
`??gp_DataIndGet::?relay` SYMBOL "?relay", gp_DataIndGet
gp_DataIndReleaseFromList SYMBOL "gp_DataIndReleaseFromList"
`??gp_DataIndReleaseFromList::?relay` SYMBOL "?relay", gp_DataIndReleaseFromList
gp_FreeGpTxQueue    SYMBOL "gp_FreeGpTxQueue"
`??gp_FreeGpTxQueue::?relay` SYMBOL "?relay", gp_FreeGpTxQueue
gp_GetHandle        SYMBOL "gp_GetHandle"
`??gp_GetHandle::?relay` SYMBOL "?relay", gp_GetHandle
gp_PairingUpdateProxyTlb SYMBOL "gp_PairingUpdateProxyTlb"
`??gp_PairingUpdateProxyTlb::?relay` SYMBOL "?relay", gp_PairingUpdateProxyTlb
osal_build_uint16   SYMBOL "osal_build_uint16"
`??osal_build_uint16::?relay` SYMBOL "?relay", osal_build_uint16
osal_build_uint32   SYMBOL "osal_build_uint32"
`??osal_build_uint32::?relay` SYMBOL "?relay", osal_build_uint32
osal_get_timeoutEx  SYMBOL "osal_get_timeoutEx"
`??osal_get_timeoutEx::?relay` SYMBOL "?relay", osal_get_timeoutEx
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcmp         SYMBOL "osal_memcmp"
`??osal_memcmp::?relay` SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
pt_ZclReadGetProxyEntry SYMBOL "pt_ZclReadGetProxyEntry"
`??pt_ZclReadGetProxyEntry::?relay` SYMBOL "?relay", pt_ZclReadGetProxyEntry
zclGp_RegisterCmdCallbacks SYMBOL "zclGp_RegisterCmdCallbacks"
`??zclGp_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGp_RegisterCmdCallbacks
zclGp_SendGpCommissioningNotificationCommand SYMBOL "zclGp_SendGpCommissioningNotificationCommand"
`??zclGp_SendGpCommissioningNotificationCommand:` SYMBOL "?relay", zclGp_SendGpCommissioningNotificationCommand
zclGp_SendGpNotificationCommand SYMBOL "zclGp_SendGpNotificationCommand"
`??zclGp_SendGpNotificationCommand::?relay` SYMBOL "?relay", zclGp_SendGpNotificationCommand
zclGp_SendGpProxyTableResponse SYMBOL "zclGp_SendGpProxyTableResponse"
`??zclGp_SendGpProxyTableResponse::?relay` SYMBOL "?relay", zclGp_SendGpProxyTableResponse
`?<Name zclGpp_ReadWriteAttr 60>` SYMBOL "zclGpp_ReadWriteAttrCB"
`??zclGpp_ReadWriteAttrCB::?relay` SYMBOL "?relay", `?<Name zclGpp_ReadWriteAttr 60>`
zcl_ReadAttrData    SYMBOL "zcl_ReadAttrData"
`??zcl_ReadAttrData::?relay` SYMBOL "?relay", zcl_ReadAttrData
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerReadWriteCB SYMBOL "zcl_registerReadWriteCB"
`??zcl_registerReadWriteCB::?relay` SYMBOL "?relay", zcl_registerReadWriteCB
GP_DataCnf          SYMBOL "GP_DataCnf"
`??GP_DataCnf::?relay` SYMBOL "?relay", GP_DataCnf
GP_DataInd          SYMBOL "GP_DataInd"
`??GP_DataInd::?relay` SYMBOL "?relay", GP_DataInd
GP_SecReq           SYMBOL "GP_SecReq"
`??GP_SecReq::?relay` SYMBOL "?relay", GP_SecReq
gp_PopulateField    SYMBOL "gp_PopulateField"
`??gp_PopulateField::?relay` SYMBOL "?relay", gp_PopulateField
gp_ProxyTblInit     SYMBOL "gp_ProxyTblInit"
`??gp_ProxyTblInit::?relay` SYMBOL "?relay", gp_ProxyTblInit
gp_RegisterCommissioningModeCB SYMBOL "gp_RegisterCommissioningModeCB"
`??gp_RegisterCommissioningModeCB::?relay` SYMBOL "?relay", gp_RegisterCommissioningModeCB
gp_RegisterGPChangeChannelReqCB SYMBOL "gp_RegisterGPChangeChannelReqCB"
`??gp_RegisterGPChangeChannelReqCB::?relay` SYMBOL "?relay", gp_RegisterGPChangeChannelReqCB
gp_RegisterGPChangeChannelReqForBDBCB SYMBOL "gp_RegisterGPChangeChannelReqForBDBCB"
`??gp_RegisterGPChangeChannelReqForBDBCB::?relay` SYMBOL "?relay", gp_RegisterGPChangeChannelReqForBDBCB
gp_endpointInit     SYMBOL "gp_endpointInit"
`??gp_endpointInit::?relay` SYMBOL "?relay", gp_endpointInit
gp_expireDuplicateFiltering SYMBOL "gp_expireDuplicateFiltering"
`??gp_expireDuplicateFiltering::?relay` SYMBOL "?relay", gp_expireDuplicateFiltering
gp_getProxyTableByGpId SYMBOL "gp_getProxyTableByGpId"
`??gp_getProxyTableByGpId::?relay` SYMBOL "?relay", gp_getProxyTableByGpId
gp_getProxyTableByIndex SYMBOL "gp_getProxyTableByIndex"
`??gp_getProxyTableByIndex::?relay` SYMBOL "?relay", gp_getProxyTableByIndex
gp_returnOperationalChannel SYMBOL "gp_returnOperationalChannel"
`??gp_returnOperationalChannel::?relay` SYMBOL "?relay", gp_returnOperationalChannel
gp_stopCommissioningMode SYMBOL "gp_stopCommissioningMode"
`??gp_stopCommissioningMode::?relay` SYMBOL "?relay", gp_stopCommissioningMode
zclGp_DataIndParse  SYMBOL "zclGp_DataIndParse"
`??zclGp_DataIndParse::?relay` SYMBOL "?relay", zclGp_DataIndParse
zclGp_ManteinanceIndParse SYMBOL "zclGp_ManteinanceIndParse"
`??zclGp_ManteinanceIndParse::?relay` SYMBOL "?relay", zclGp_ManteinanceIndParse

        EXTERN `??GP_DataReq::?relay`
        FUNCTION `??GP_DataReq::?relay`,00H
        EXTERN `??ZDSecMgrReadKeyFromNv::?relay`
        FUNCTION `??ZDSecMgrReadKeyFromNv::?relay`,00H
        EXTERN `??ZMacSetReq::?relay`
        FUNCTION `??ZMacSetReq::?relay`,00H
        EXTERN `??bdb_RegisterSimpleDescriptor::?relay`
        FUNCTION `??bdb_RegisterSimpleDescriptor::?relay`,00H
        EXTERN `??gp_DataIndAppendToList::?relay`
        FUNCTION `??gp_DataIndAppendToList::?relay`,00H
        EXTERN `??gp_DataIndGet::?relay`
        FUNCTION `??gp_DataIndGet::?relay`,00H
        EXTERN `??gp_DataIndReleaseFromList::?relay`
        FUNCTION `??gp_DataIndReleaseFromList::?relay`,00H
        EXTERN `??gp_FreeGpTxQueue::?relay`
        FUNCTION `??gp_FreeGpTxQueue::?relay`,00H
        EXTERN `??gp_GetHandle::?relay`
        FUNCTION `??gp_GetHandle::?relay`,00H
        EXTERN `??gp_PairingUpdateProxyTlb::?relay`
        FUNCTION `??gp_PairingUpdateProxyTlb::?relay`,00H
        EXTERN `??osal_build_uint16::?relay`
        FUNCTION `??osal_build_uint16::?relay`,00H
        EXTERN `??osal_build_uint32::?relay`
        FUNCTION `??osal_build_uint32::?relay`,00H
        EXTERN `??osal_get_timeoutEx::?relay`
        FUNCTION `??osal_get_timeoutEx::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcmp::?relay`
        FUNCTION `??osal_memcmp::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??pt_ZclReadGetProxyEntry::?relay`
        FUNCTION `??pt_ZclReadGetProxyEntry::?relay`,00H
        EXTERN `??zclGp_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGp_RegisterCmdCallbacks::?relay`,00H
        EXTERN `??zclGp_SendGpCommissioningNotificationCommand:`
        FUNCTION `??zclGp_SendGpCommissioningNotificationCommand:`,00H
        EXTERN `??zclGp_SendGpNotificationCommand::?relay`
        FUNCTION `??zclGp_SendGpNotificationCommand::?relay`,00H
        EXTERN `??zclGp_SendGpProxyTableResponse::?relay`
        FUNCTION `??zclGp_SendGpProxyTableResponse::?relay`,00H
        EXTERN `??zclGpp_ReadWriteAttrCB::?relay`
        FUNCTION `??zclGpp_ReadWriteAttrCB::?relay`,00H
        EXTERN `??zcl_ReadAttrData::?relay`
        FUNCTION `??zcl_ReadAttrData::?relay`,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerReadWriteCB::?relay`
        FUNCTION `??zcl_registerReadWriteCB::?relay`,00H
        EXTERN GP_DataReq
        FUNCTION GP_DataReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrReadKeyFromNv
        FUNCTION ZDSecMgrReadKeyFromNv,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 97, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN bdb_RegisterSimpleDescriptor
        FUNCTION bdb_RegisterSimpleDescriptor,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gp_DataIndAppendToList
        FUNCTION gp_DataIndAppendToList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gp_DataIndGet
        FUNCTION gp_DataIndGet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gp_DataIndReleaseFromList
        FUNCTION gp_DataIndReleaseFromList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gp_FreeGpTxQueue
        FUNCTION gp_FreeGpTxQueue,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gp_GetHandle
        FUNCTION gp_GetHandle,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 97, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gp_PairingUpdateProxyTlb
        FUNCTION gp_PairingUpdateProxyTlb,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gp_TaskID
        EXTERN osal_build_uint16
        FUNCTION osal_build_uint16,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint32
        FUNCTION osal_build_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 97, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 97, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 100, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 100, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 96, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 100, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 97, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 97, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 101, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN pt_ZclReadGetProxyEntry
        FUNCTION pt_ZclReadGetProxyEntry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 102, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGp_RegisterCmdCallbacks
        FUNCTION zclGp_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGp_SendGpCommissioningNotificationCommand
        FUNCTION zclGp_SendGpCommissioningNotificationCommand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGp_SendGpNotificationCommand
        FUNCTION zclGp_SendGpNotificationCommand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGp_SendGpProxyTableResponse
        FUNCTION zclGp_SendGpProxyTableResponse,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 100, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_InSeqNum
        EXTERN zcl_ReadAttrData
        FUNCTION zcl_ReadAttrData,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerReadWriteCB
        FUNCTION zcl_registerReadWriteCB,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack 3.0.0\Components\stack\GP\gp_common.c
//    1 /**************************************************************************************************
//    2   Filename:       gp_common.c
//    3   Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
//    4   Revision:       $Revision: - $
//    5 
//    6   Description:    This file contains the implementation of the cGP stub.
//    7 
//    8 
//    9   Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "ZGlobals.h"
//   45 //GP_UPDATE
//   46 
//   47 #include "ZComDef.h"
//   48 #include "zcl_general.h"
//   49 #include "AF.h"
//   50 #include "gp_common.h"
//   51 #include "gp_interface.h"
//   52 #include "zcl_green_power.h"
//   53 #include "OSAL.h"
//   54 #include "dGP_stub.h"
//   55 #include "mac_api.h"
//   56 #include "ZDSecMgr.h"
//   57 #include "bdb.h"
//   58 
//   59  /*********************************************************************
//   60  * MACROS
//   61  */ 
//   62 
//   63    
//   64  /*********************************************************************
//   65  * CONSTANTS
//   66  */
//   67 
//   68 #define PGG_COMMISSIONING_WINDOW   180  //180 seconds by defaut
//   69 
//   70 
//   71 #ifdef GP_SHARED_KEY

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//   72   CONFIG_ITEM uint8 zgpSharedKey[SEC_KEY_LEN] = GP_SHARED_KEY;
zgpSharedKey:
        DB 192
        DB 193
        DB 194
        DB 195
        DB 196
        DB 197
        DB 198
        DB 199
        DB 200
        DB 201
        DB 202
        DB 203
        DB 204
        DB 205
        DB 206
        DB 207
//   73 #else
//   74   CONFIG_ITEM uint8 zgpSharedKey[SEC_KEY_LEN] = {0xFF};
//   75 #endif
//   76 
//   77 /*********************************************************************
//   78  * TYPEDEFS
//   79  */
//   80    
//   81  /*********************************************************************
//   82  * GLOBAL VARIABLES
//   83  */
//   84 
//   85 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   86 uint8  zclGp_gppMaxProxyTableEntries = GPP_MAX_PROXY_TABLE_ENTRIES;
zclGp_gppMaxProxyTableEntries:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclGp_gppMaxProxyTableEntrie`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   87 uint8 *pZclGp_ProxyTableEntries = NULL;
pZclGp_ProxyTableEntries:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//   88 uint8  zclGp_gppNotificationRetryNumber = GPP_NOTIFICATION_RETRY_NUMBER;
zclGp_gppNotificationRetryNumber:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclGp_gppNotificationRetryNu`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   89 uint8  zclGp_gppNotificationRetryTimer = GPP_NOTIFICATION_RETRY_TIMER;
zclGp_gppNotificationRetryTimer:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclGp_gppNotificationRetryTi`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   90 uint8  zclGp_gppMaxSearchCounter = GPP_MAX_SEARCH_COUNTER;
zclGp_gppMaxSearchCounter:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclGp_gppMaxSearchCounter>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   91 uint8 *pZclGp_gppBlockedGPDID = NULL;
pZclGp_gppBlockedGPDID:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   92 uint8  zclGp_gppFunctionality[3] = {0};
zclGp_gppFunctionality:
        DS 3
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   93 uint8  zclGp_gppActiveFunctionality[3] = {0};
zclGp_gppActiveFunctionality:
        DS 3
        REQUIRE __INIT_XDATA_Z
//   94 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   95 uint8  zclGp_gpSharedSecurityKeyType = GP_SHARED_SEC_KEY_TYPE;
zclGp_gpSharedSecurityKeyType:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   96 uint8  zclGp_gpSharedSecurityKey[SEC_KEY_LEN] = {0};
zclGp_gpSharedSecurityKey:
        DS 16
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//   97 uint8  zclGp_gpLinkKey[SEC_KEY_LEN] = GP_LINK_LEY;
zclGp_gpLinkKey:
        DATA8
        DS 16
        REQUIRE `?<Initializer for zclGp_gpLinkKey>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   98 uint16 zclGp_clusterRevision = GP_CLUSTER_REVISION;
zclGp_clusterRevision:
        DATA16
        DS 2
        REQUIRE `?<Initializer for zclGp_clusterRevision>`
        REQUIRE __INIT_XDATA_I
//   99 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  100 static gpCommissioningMode_t  pfnCommissioningMode = NULL;
pfnCommissioningMode:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  101 static gpChangeChannelReq_t   pfnChangeChannelReq = NULL;
pfnChangeChannelReq:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  102 static gpChangeChannelReq_t   pfnChangeChannelReqForBDB = NULL;
pfnChangeChannelReqForBDB:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  103 
//  104 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  105 uint8 gp_commissioningOptions = 0;           //Commissioning Options from the ommissioningMode command
gp_commissioningOptions:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  106 uint16 gp_commissioningUnicastAddress = 0;   //address of the device to which send the notifications
gp_commissioningUnicastAddress:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  107 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  108 uint8  zgGP_InCommissioningMode = FALSE;     // Global flag that states if in commissioning mode or in operational mode.
zgGP_InCommissioningMode:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  109 uint16 gp_commissionerAddress = 0xFFFF;      //Address to which send the notifications during commissioning mode
gp_commissionerAddress:
        DATA16
        DS 2
        REQUIRE `?<Initializer for gp_commissionerAddress>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  110 byte   gp_tempLogicalChannel = 0;            //Holder of the operational nwk channel
gp_tempLogicalChannel:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  111 
//  112 
//  113 
//  114   
//  115 
//  116 /*********************************************************************
//  117  * ATTRIBUTE DEFINITIONS - Uses REAL cluster IDs
//  118  */

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  119 CONST zclAttrRec_t zclGp_Attrs[] =
zclGp_Attrs:
        DATA16
        DW 33
        DW 16
        DATA8
        DB 32
        DB 129
        DATA16
        DW zclGp_gppMaxProxyTableEntries
        DW 33
        DW 17
        DATA8
        DB 67
        DB 129
        DATA16
        DW 0H
        DW 33
        DW 18
        DATA8
        DB 32
        DB 131
        DATA16
        DW zclGp_gppNotificationRetryNumber
        DW 33
        DW 19
        DATA8
        DB 32
        DB 131
        DATA16
        DW zclGp_gppNotificationRetryTimer
        DW 33
        DW 20
        DATA8
        DB 32
        DB 131
        DATA16
        DW zclGp_gppMaxSearchCounter
        DW 33
        DW 21
        DATA8
        DB 67
        DB 129
        DATA16
        DW pZclGp_gppBlockedGPDID
        DW 33
        DW 22
        DATA8
        DB 26
        DB 129
        DATA16
        DW zclGp_gppFunctionality
        DW 33
        DW 23
        DATA8
        DB 26
        DB 129
        DATA16
        DW zclGp_gppActiveFunctionality
        DW 33
        DW 32
        DATA8
        DB 24
        DB 131
        DATA16
        DW zclGp_gpSharedSecurityKeyType
        DW 33
        DW 33
        DATA8
        DB 241
        DB 131
        DATA16
        DW zclGp_gpSharedSecurityKey
        DW 33
        DW 34
        DATA8
        DB 241
        DB 131
        DATA16
        DW zclGp_gpLinkKey
        DW 33
        DW 65533
        DATA8
        DB 32
        DB 129
        DATA16
        DW zclGp_clusterRevision
//  120 {
//  121   // *** Green Power Proxy Cluster Attributes ***
//  122   {
//  123     ZCL_CLUSTER_ID_GREEN_POWER,
//  124     {  // Attribute record
//  125       ATTRID_GP_GPP_MAX_PROXY_TABLE_ENTRIES,
//  126       ZCL_DATATYPE_UINT8,
//  127       ACCESS_CONTROL_READ | ACCESS_CLIENT,
//  128       (void *)&zclGp_gppMaxProxyTableEntries
//  129     }
//  130   },
//  131   {
//  132     ZCL_CLUSTER_ID_GREEN_POWER,
//  133     {  // Attribute record
//  134       ATTRID_GP_PROXY_TABLE,
//  135       ZCL_DATATYPE_LONG_OCTET_STR,
//  136       ACCESS_CONTROL_READ | ACCESS_CLIENT,
//  137       NULL // Use application's callback to Read this attribute
//  138     }
//  139   },
//  140   {
//  141     ZCL_CLUSTER_ID_GREEN_POWER,
//  142     {  // Attribute record
//  143       ATTRID_GP_GPP_NOTIFICATION_RETRY_NUMBER,
//  144       ZCL_DATATYPE_UINT8,
//  145       ACCESS_CONTROL_READ | ACCESS_CONTROL_WRITE | ACCESS_CLIENT,
//  146       (void *)&zclGp_gppNotificationRetryNumber
//  147     }
//  148   },
//  149   {
//  150     ZCL_CLUSTER_ID_GREEN_POWER,
//  151     {  // Attribute record
//  152       ATTRID_GP_GPP_NOTIFICATION_RETRY_TIMER,
//  153       ZCL_DATATYPE_UINT8,
//  154       ACCESS_CONTROL_READ | ACCESS_CONTROL_WRITE | ACCESS_CLIENT,
//  155       (void *)&zclGp_gppNotificationRetryTimer
//  156     }
//  157   },
//  158   {
//  159     ZCL_CLUSTER_ID_GREEN_POWER,
//  160     {  // Attribute record
//  161       ATTRID_GP_GPP_MAX_SEARCH_COUNTER,
//  162       ZCL_DATATYPE_UINT8,
//  163       ACCESS_CONTROL_READ | ACCESS_CONTROL_WRITE | ACCESS_CLIENT,
//  164       (void *)&zclGp_gppMaxSearchCounter
//  165     }
//  166   },
//  167   {
//  168     ZCL_CLUSTER_ID_GREEN_POWER,
//  169     {  // Attribute record
//  170       ATTRID_GP_GPP_BLOCKED_GPD_ID,
//  171       ZCL_DATATYPE_LONG_OCTET_STR,
//  172       ACCESS_CONTROL_READ | ACCESS_CLIENT,
//  173       (void *)&pZclGp_gppBlockedGPDID
//  174     }
//  175   },
//  176   {
//  177     ZCL_CLUSTER_ID_GREEN_POWER,
//  178     {  // Attribute record
//  179       ATTRID_GP_GPP_FUNCTIONALITY,
//  180       ZCL_DATATYPE_BITMAP24,
//  181       ACCESS_CONTROL_READ | ACCESS_CLIENT,
//  182       (void *)&zclGp_gppFunctionality
//  183     }
//  184   },
//  185   {
//  186     ZCL_CLUSTER_ID_GREEN_POWER,
//  187     {  // Attribute record
//  188       ATTRID_GP_GPP_ACTIVE_FUNCTIONALITY,
//  189       ZCL_DATATYPE_BITMAP24,
//  190       ACCESS_CONTROL_READ | ACCESS_CLIENT,
//  191       (void *)&zclGp_gppActiveFunctionality
//  192     }
//  193   },
//  194   {
//  195     ZCL_CLUSTER_ID_GREEN_POWER,
//  196     {  // Attribute record
//  197       ATTRID_GP_SHARED_SEC_KEY_TYPE,
//  198       ZCL_DATATYPE_BITMAP8,
//  199       ACCESS_CONTROL_READ | ACCESS_CONTROL_WRITE | ACCESS_CLIENT,
//  200       (void *)&zclGp_gpSharedSecurityKeyType
//  201     }
//  202   },
//  203   {
//  204     ZCL_CLUSTER_ID_GREEN_POWER,
//  205     {  // Attribute record
//  206       ATTRID_GP_SHARED_SEC_KEY,
//  207       ZCL_DATATYPE_128_BIT_SEC_KEY,
//  208       ACCESS_CONTROL_READ | ACCESS_CONTROL_WRITE | ACCESS_CLIENT,
//  209       (void *)&zclGp_gpSharedSecurityKey
//  210     }
//  211   },
//  212   {
//  213     ZCL_CLUSTER_ID_GREEN_POWER,
//  214     {  // Attribute record
//  215       ATTRID_GP_LINK_KEY,
//  216       ZCL_DATATYPE_128_BIT_SEC_KEY,
//  217       ACCESS_CONTROL_READ | ACCESS_CONTROL_WRITE | ACCESS_CLIENT,
//  218       (void *)&zclGp_gpLinkKey
//  219     }
//  220   },
//  221   {
//  222     ZCL_CLUSTER_ID_GREEN_POWER,
//  223     {  // Attribute record
//  224       ATTRID_CLUSTER_REVISION,
//  225       ZCL_DATATYPE_UINT8,
//  226       ACCESS_CONTROL_READ | ACCESS_CLIENT,
//  227       (void *)&zclGp_clusterRevision
//  228     }
//  229   }
//  230 };
//  231 
//  232 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  233 uint8 CONST zclGp_NumAttributes = ( sizeof(zclGp_Attrs) / sizeof(zclGp_Attrs[0]) );
zclGp_NumAttributes:
        DB 12
//  234 
//  235  /*********************************************************************
//  236  * EXTERNAL VARIABLES
//  237  */
//  238 
//  239 //List to filter duplicated packets

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  240 gp_DataInd_t        *gp_DataIndList;
gp_DataIndList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  241 
//  242 extern uint32 gpTimeTempBackoff;
//  243 extern uint16 gpTimeTempTimer;
//  244 extern bool   gpLockTimestamp;
//  245 /*********************************************************************
//  246  * EXTERNAL FUNCTIONS
//  247  */
//  248 
//  249 
//  250 /*********************************************************************
//  251  * LOCAL VARIABLES
//  252  */
//  253 // This is the Cluster ID List and should be filled with Application
//  254 // specific cluster IDs.
//  255 #define GREEN_POWER_EP_MAX_INCLUSTERS       1

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  256 static const cId_t greenPower_EP_InClusterList[GREEN_POWER_EP_MAX_INCLUSTERS] =
greenPower_EP_InClusterList:
        DW 33
//  257 {
//  258   ZCL_CLUSTER_ID_GREEN_POWER
//  259 };
//  260 
//  261 #define GREEN_POWER_EP_MAX_OUTCLUSTERS       1

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  262 static const cId_t greenPower_EP_OutClusterList[GREEN_POWER_EP_MAX_OUTCLUSTERS] =
greenPower_EP_OutClusterList:
        DW 33
//  263 {
//  264   ZCL_CLUSTER_ID_GREEN_POWER
//  265 };
//  266 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  267 static SimpleDescriptionFormat_t greenPower_EP_SimpleDesc =
greenPower_EP_SimpleDesc:
        DATA8
        DS 12
        REQUIRE `?<Initializer for greenPower_EP_SimpleDesc>`
        REQUIRE __INIT_XDATA_I
//  268 {
//  269   GREEN_POWER_INTERNAL_ENDPOINT,         //  int Endpoint;
//  270   ZCL_GP_PROFILE_ID,                     //  uint16 AppProfId;
//  271   ZCL_GP_DEVICEID_PROXY_BASIC,           //  uint16 AppDeviceId;
//  272   0,                                     //  int   AppDevVer:4;
//  273   0,                                     //  int   AppFlags:4;
//  274   GREEN_POWER_EP_MAX_INCLUSTERS,         //  byte  AppNumInClusters;
//  275   (cId_t *)greenPower_EP_InClusterList,  //  byte *pAppInClusterList;
//  276   GREEN_POWER_EP_MAX_OUTCLUSTERS,        //  byte  AppNumInClusters;
//  277   (cId_t *)greenPower_EP_OutClusterList  //  byte *pAppInClusterList;
//  278 };
//  279 
//  280 
//  281 
//  282 
//  283  /*********************************************************************
//  284  * LOCAL FUNCTIONS
//  285  */
//  286 static void GP_ProccessCommissioningNotification(gp_DataInd_t *gp_DataInd);
//  287 static void GP_ProccessNotification(gp_DataInd_t *gp_DataInd);
//  288 
//  289 static void zclGp_GpPairingCommandCB( zclGpPairing_t *pCmd );
//  290 static void zclGp_GpProxyTableReqCB( zclGpProxyTableRequest_t *pCmd );
//  291 static void zclGp_GpProxyCommissioningModeCB(zclGpProxyCommissioningMode_t* pCmd);
//  292 static void zclGp_GpResponseCommandCB(zclGpResponse_t* pCmd);
//  293 static void gp_u32CastPointer( uint8 *data, uint8 *p );
//  294 static void gp_u16CastPointer( uint8 *data, uint8 *p );
//  295 static void gp_u8CastPointer( uint8 *data, uint8 *p );
//  296 static void gp_ZclPairingParse( zclGpPairing_t* pCmd, gpPairingCmd_t* payload );
//  297 static void gp_ZclProxyTableReqParse( zclGpProxyTableRequest_t* pCmd, gpProxyTableReqCmd_t* payload );
//  298 static uint8 gp_SecurityOperationProxy( gp_DataInd_t* pInd, uint8* pKeyType, uint8* pKey);
//  299 static gp_DataInd_t* gp_DataIndFindDuplicate(uint8 handle, uint8 secLvl);
//  300 static uint8 GP_RecoveryKey(uint8 GPDFKeyType,uint8 KeyType, uint8 status, uint8 *Key);
//  301  
//  302 
//  303 
//  304 
//  305 /*********************************************************************
//  306  * ZCL General Profile Callback table
//  307  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  308 static zclGp_AppCallbacks_t zclGpProxy_CmdCallbacks =
zclGpProxy_CmdCallbacks:
        DATA8
        DS 8
        REQUIRE `?<Initializer for zclGpProxy_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  309 {
//  310   zclGp_GpPairingCommandCB,            //
//  311   zclGp_GpProxyTableReqCB,
//  312   zclGp_GpProxyCommissioningModeCB,    //
//  313   zclGp_GpResponseCommandCB  
//  314 };
//  315 
//  316 /*********************************************************************
//  317  * PUBLIC FUNCTIONS
//  318  *********************************************************************/
//  319 
//  320 
//  321  

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  322 void gp_endpointInit(void)
gp_endpointInit:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function gp_endpointInit
        CODE
//  323 {
        FUNCALL gp_endpointInit, bdb_RegisterSimpleDescriptor
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_endpointInit, zclGp_RegisterCmdCallbacks
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_endpointInit, zcl_registerAttrList
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_endpointInit, zcl_registerReadWriteCB
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_endpointInit, gp_ProxyTblInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  324 
//  325   bdb_RegisterSimpleDescriptor( &greenPower_EP_SimpleDesc );
        ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
        MOV     R2,#greenPower_EP_SimpleDesc & 0xff
        MOV     R3,#(greenPower_EP_SimpleDesc >> 8) & 0xff
        LCALL   `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
//  326   
//  327   zclGp_RegisterCmdCallbacks( GREEN_POWER_INTERNAL_ENDPOINT, &zclGpProxy_CmdCallbacks );
        ; Setup parameters for call to function zclGp_RegisterCmdCallbacks
        MOV     R2,#zclGpProxy_CmdCallbacks & 0xff
        MOV     R3,#(zclGpProxy_CmdCallbacks >> 8) & 0xff
        MOV     R1,#-0xe
        LCALL   `??zclGp_RegisterCmdCallbacks::?relay`; Banked call to: zclGp_RegisterCmdCallbacks
//  328   
//  329   // Register the application's attribute list
//  330   zcl_registerAttrList( GREEN_POWER_INTERNAL_ENDPOINT, zclGp_NumAttributes, zclGp_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R4,#zclGp_Attrs & 0xff
        MOV     R5,#(zclGp_Attrs >> 8) & 0xff
        MOV     R2,#0xc
        MOV     R1,#-0xe
        LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  331   
//  332   zcl_registerReadWriteCB( GREEN_POWER_INTERNAL_ENDPOINT, zclGpp_ReadWriteAttrCB, NULL );
        ; Setup parameters for call to function zcl_registerReadWriteCB
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#`??zclGpp_ReadWriteAttrCB::?relay` & 0xff
        MOV     R3,#(`??zclGpp_ReadWriteAttrCB::?relay` >> 8) & 0xff
        MOV     R1,#-0xe
        LCALL   `??zcl_registerReadWriteCB::?relay`; Banked call to: zcl_registerReadWriteCB
//  333   
//  334   gp_ProxyTblInit( FALSE );
        ; Setup parameters for call to function gp_ProxyTblInit
        MOV     R1,#0x0
        LCALL   `??gp_ProxyTblInit::?relay`; Banked call to: gp_ProxyTblInit
//  335 
//  336 }
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock0
//  337 
//  338 /*********************************************************************
//  339  * @fn      gp_stopCommissioningMode
//  340  *
//  341  * @brief   Stops the commissioning mode
//  342  *
//  343  * @param   none
//  344  *
//  345  * @return  none
//  346  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  347 void gp_stopCommissioningMode(void)
gp_stopCommissioningMode:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function gp_stopCommissioningMode
        CODE
//  348 {
        FUNCALL gp_stopCommissioningMode, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_stopCommissioningMode, gp_FreeGpTxQueue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  349   //Callback to notify about the end of the commissioning mode
//  350   gp_commissioningOptions = 0;
        MOV     DPTR,#gp_commissioningOptions
        CLR     A
        MOVX    @DPTR,A
//  351   zgGP_InCommissioningMode = FALSE;
        MOV     DPTR,#zgGP_InCommissioningMode
        MOVX    @DPTR,A
//  352   gp_commissionerAddress = 0xFFFF;
        MOV     DPTR,#gp_commissionerAddress
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  353   osal_stop_timerEx(gp_TaskID,GP_COMMISSIONING_WINDOW_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#gp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
//  354   
//  355   //Release the gpTxQueue, proxy does not support bidirectional communication on operational mode
//  356   //A.3.2.8
//  357   gp_FreeGpTxQueue();
        ; Setup parameters for call to function gp_FreeGpTxQueue
        LCALL   `??gp_FreeGpTxQueue::?relay`; Banked call to: gp_FreeGpTxQueue
//  358   
//  359   //Notify the user that we have exited the commissioning mode
//  360   if(pfnCommissioningMode)
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_40:
        JZ      ??gp_stopCommissioningMode_0
//  361   {
//  362     pfnCommissioningMode(FALSE);
        ; Setup parameters for indirect call
        MOV     R1,#0x0
        LCALL   ??Subroutine41_0 & 0xFFFF
//  363   }
??CrossCallReturnLabel_93:
        LCALL   ?CALL_IND
//  364 }
??gp_stopCommissioningMode_0:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function gp_stopCommissioningMode
          CFI Conditional ??CrossCallReturnLabel_40
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function zclGp_GpProxyCommissioningModeCB
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOV     DPTR,#pfnCommissioningMode
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4
        REQUIRE ??Subroutine31_0
        ; // Fall through to label ??Subroutine31_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine31_0:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function GP_DataInd
          CFI Conditional ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 72)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function GP_DataInd
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 72)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function gp_stopCommissioningMode
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond7) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond7) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond7) CFA_SP SP+-7
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function zclGp_GpProxyCommissioningModeCB
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker9 Using cfiCommon1
          CFI (cfiPicker9) NoFunction
          CFI (cfiPicker9) Picker
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiPicker9
//  365 
//  366 /*********************************************************************
//  367  * @fn      zclGp_ManteinanceIndParse
//  368  *
//  369  * @brief   Parse the Gp Manteinance indication to Gp Notification command
//  370  *
//  371  * @param   pInd - Pointer to the incoming data
//  372  *
//  373  * @return  ZStatus_t
//  374  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  375 ZStatus_t zclGp_ManteinanceIndParse( gp_DataInd_t *pInd, gpCommissioningNotificationCmd_t *pGpNotification )
zclGp_ManteinanceIndParse:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function zclGp_ManteinanceIndParse
        CODE
//  376 {
        FUNCALL zclGp_ManteinanceIndParse, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R4
        MOV     ?V1,R5
//  377   uint8 currEntry[PROXY_TBL_ENTRY_LEN] = {0};
//  378   uint8  ntfOpt[2] = {0x00, 0x00};
        MOV     DPTR,#`?<Constant {0, 0}>`
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x2
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  379   int8 RSSI;
//  380   uint8 LQI;
//  381   
//  382   if ( pInd->GPDCmmdID != GP_CHANNEL_REQ_COMMAND_ID )
        MOV     A,R6
        ADD     A,#0x2a
        MOV     ?V2,A
        CLR     A
        ADDC    A,R7
        MOV     ?V3,A
        MOV     DPL,?V2
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0xe3
        JZ      ??zclGp_ManteinanceIndParse_0
//  383   {
//  384     if ( PROXY_TBL_COMP_APPLICTION_ID( pInd->appID, GP_OPT_APP_ID_GPD ) )
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_91:
        ANL     A,#0x7
        MOV     R0,A
        JNZ     ??zclGp_ManteinanceIndParse_1
//  385     {
//  386       pGpNotification->gpdId = pInd->SrcId;
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL   ?XLOAD_R0123
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        LCALL   ?XSTORE_R0123
//  387       ntfOpt[0] = GP_OPT_APP_ID_GPD;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        SJMP    ??zclGp_ManteinanceIndParse_2
//  388     }
//  389     else if ( PROXY_TBL_COMP_APPLICTION_ID( pInd->appID, GP_OPT_APP_ID_IEEE ) )
??zclGp_ManteinanceIndParse_1:
        MOV     A,#0x2
        XRL     A,R0
        JNZ     ??zclGp_ManteinanceIndParse_0
//  390     {
//  391       osal_memcpy( pGpNotification->gpdIEEE, &(pInd->srcAddr.addr.extAddr), Z_EXTADDR_LEN );
        ; Setup parameters for call to function osal_memcpy
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,?V0
        ADD     A,#0x6
        MOV     R2,A
        CLR     A
        ADDC    A,?V1
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
//  392       pGpNotification->ep = pInd->EndPoint;
        MOV     A,R6
        ADD     A,#0x25
        LCALL   ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_84:
        PUSH    A
          CFI CFA_SP SP+-1
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_64:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  393       ntfOpt[0] = GP_OPT_APP_ID_IEEE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
??zclGp_ManteinanceIndParse_2:
        MOVX    @DPTR,A
//  394     }
//  395   }
//  396   
//  397   // Set the options bit field
//  398   ( pInd->RxAfterTx == TRUE ) ?PROXY_TBL_SET_RX_AFTER_TX( ( uint8* )&ntfOpt[0] ) : PROXY_TBL_CLR_RX_AFTER_TX( ( uint8* )&ntfOpt[0] );
??zclGp_ManteinanceIndParse_0:
        MOV     A,R6
        ADD     A,#0x20
        LCALL   ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_85:
        XRL     A,#0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JNZ     ??zclGp_ManteinanceIndParse_3
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.3
        SJMP    ??zclGp_ManteinanceIndParse_4
??zclGp_ManteinanceIndParse_3:
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.3
??zclGp_ManteinanceIndParse_4:
        MOVX    @DPTR,A
//  399   GP_CNTF_SET_SEC_LEVEL( ( uint8* )&ntfOpt[0], currEntry[PROXY_TBL_ENTRY_SEC_OPT] );
        MOVX    A,@DPTR
        ANL     A,#0xcf
        MOVX    @DPTR,A
//  400   GP_CNTF_SET_SEC_KEY_TYPE( ( uint16* )ntfOpt, currEntry[PROXY_TBL_ENTRY_SEC_OPT] );
        ANL     A,#0x3f
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0xfe
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine38_0 & 0xFFFF
//  401   if( pInd->status == GP_DATA_IND_STATUS_AUTH_FAILURE )
??CrossCallReturnLabel_69:
        MOV     A,?V0
        ADD     A,#0x1a
        MOV     R0,A
        CLR     A
        ADDC    A,?V1
        MOV     R1,A
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     A,R6
        ADD     A,#0xd
        LCALL   ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_86:
        XRL     A,#0x3
        JNZ     ??zclGp_ManteinanceIndParse_5
//  402   {
//  403     GP_CNTF_SET_SEC_FAIL( ( uint8* )&ntfOpt[1] );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.1
        MOVX    @DPTR,A
//  404     pGpNotification->mic = pInd->MIC;
        MOV     A,R6
        ADD     A,#0x2b
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        LCALL   ?XLOAD_R0123
        MOV     DPL,?V4
        MOV     DPH,?V5
        LCALL   ?XSTORE_R0123
        SJMP    ??CrossCallReturnLabel_52
//  405   }
//  406   else
//  407   {
//  408     GP_CNTF_CLR_SEC_FAIL( ( uint8* )&ntfOpt[1] );
??zclGp_ManteinanceIndParse_5:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.1
        MOVX    @DPTR,A
//  409     pGpNotification->mic = 0xFFFFFFFF;
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine6 & 0xFFFF
//  410   }
//  411   GP_CNTF_SET_BIDIRECTIONAL_CAP( ( uint8* )&ntfOpt[1] );
//  412 
//  413   GP_CNTF_SET_PROXY_INFO( ( uint8* )&ntfOpt[1] );
??CrossCallReturnLabel_52:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ORL     A,#0xc
        MOVX    @DPTR,A
//  414   
//  415   pGpNotification->options |= ( ( ntfOpt[0] ) & 0x00FF );
//  416   pGpNotification->options |= ( ( ( ntfOpt[1] ) <<  8 ) & 0xFF00 );
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     R0,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        ORL     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,R1
        MOVX    @DPTR,A
//  417   
//  418   pGpNotification->gpdSecCounter = pInd->GPDSecFrameCounter;
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   ?XLOAD_R0123
        MOV     A,?V0
        ADD     A,#0xf
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_55:
        LCALL   ?XSTORE_R0123
//  419   pGpNotification->cmdId = pInd->GPDCmmdID;
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0
        ADD     A,#0x13
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_56:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  420 
//  421   if ( pInd->GPDasduLength > 0 )
        MOV     A,R6
        ADD     A,#0x2f
        LCALL   ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_87:
        JZ      ??CrossCallReturnLabel_76
//  422   {
//  423     pGpNotification->payloadLen = pInd->GPDasduLength;
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0
        ADD     A,#0x14
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_57:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  424     pGpNotification->cmdPayload = pInd->GPDasdu;
        MOV     A,R6
        ADD     A,#0x30
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     A,?V0
        ADD     A,#0x15
        LCALL   ?Subroutine8 & 0xFFFF
//  425   }
//  426   
//  427   pGpNotification->gppShortAddr = _NIB.nwkDevAddress;
??CrossCallReturnLabel_76:
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_44:
        MOV     A,?V0
        ADD     A,#0x17
        LCALL   ?Subroutine8 & 0xFFFF
//  428   
//  429   RSSI = pInd->Rssi;
??CrossCallReturnLabel_77:
        MOV     A,R6
        ADD     A,#0xe
        LCALL   ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_88:
        MOV     R0,A
//  430   ( RSSI > 8 ) ?RSSI = 8 : ( RSSI < -109 ) ?RSSI = -109 : NULL;
        CLR     C
        SUBB    A,#0x9
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??zclGp_ManteinanceIndParse_6
        MOV     R0,#0x3b
        SJMP    ??zclGp_ManteinanceIndParse_7
??zclGp_ManteinanceIndParse_6:
        MOV     A,R0
        CLR     C
        SUBB    A,#-0x6d
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??zclGp_ManteinanceIndParse_8
        MOV     R0,#0x0
        SJMP    ??zclGp_ManteinanceIndParse_7
??zclGp_ManteinanceIndParse_8:
        MOV     A,#0x6e
        ADD     A,R0
        MOV     B,#0x2
        LCALL   ?SC_DIV_MOD
        MOV     R0,A
//  431   RSSI += 110;
//  432   RSSI /= 2;
//  433   
//  434   ( pInd->LinkQuality == 0 ) ?LQI = 0 : ( pInd->LinkQuality > 0 ) ?LQI = 2 : NULL;
??zclGp_ManteinanceIndParse_7:
        MOV     A,R6
        ADD     A,#0xf
        LCALL   ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_89:
        JNZ     ??zclGp_ManteinanceIndParse_9
        MOV     R1,#0x0
        SJMP    ??zclGp_ManteinanceIndParse_10
??zclGp_ManteinanceIndParse_9:
        MOV     R1,#0x2
//  435   
//  436   pGpNotification->gppGpdLink = RSSI;
//  437   pGpNotification->gppGpdLink |= ( LQI << 6 );
??zclGp_ManteinanceIndParse_10:
        MOV     A,R1
        SWAP    A
        RLC     A
        RLC     A
        ANL     A,#0xc0
        ORL     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0
        ADD     A,#0x19
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_58:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  438     
//  439   return SUCCESS;
        MOV     R1,#0x0
        MOV     A,#0x2
          CFI EndBlock cfiBlock10
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  440 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Valid
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond12 Using cfiCommon0
          CFI Function zclGp_ManteinanceIndParse
          CFI Conditional ??CrossCallReturnLabel_44
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function zclGp_DataIndParse
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond13) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker14 Using cfiCommon1
          CFI (cfiPicker14) NoFunction
          CFI (cfiPicker14) Picker
        MOV     DPTR,#_NIB + 20
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiPicker14
        REQUIRE ??Subroutine32_0
        ; // Fall through to label ??Subroutine32_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine32_0:
          CFI Block cfiCond15 Using cfiCommon0
          CFI Function zclGp_GpProxyCommissioningModeCB
          CFI Conditional ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function zclGp_GpProxyCommissioningModeCB
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function zclGp_ManteinanceIndParse
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function zclGp_DataIndParse
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond18) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_49:
        RET
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function gp_stopCommissioningMode
          CFI Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_40
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-9
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function zclGp_GpProxyCommissioningModeCB
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_41
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-4
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function GP_DataInd
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_38
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-4
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 72)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function GP_DataInd
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_39
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-4
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 72)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function zclGp_ManteinanceIndParse
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_44
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-4
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function zclGp_DataIndParse
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_45
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond25) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-4
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function zclGp_GpProxyCommissioningModeCB
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_42
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-4
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function zclGp_GpProxyCommissioningModeCB
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_43
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-4
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function zclGp_GpResponseCommandCB
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_10
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-4
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 97)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function zclGp_GpResponseCommandCB
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_11
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond29) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-4
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 97)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function gp_PopulateField
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_12
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-4
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function gp_getProxyTableByGpId
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_13
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-4
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker32 Using cfiCommon1
          CFI (cfiPicker32) NoFunction
          CFI (cfiPicker32) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiPicker32

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond33 Using cfiCommon0
          CFI Function zclGp_ManteinanceIndParse
          CFI Conditional ??CrossCallReturnLabel_52
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function gp_ZclPairingParse
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 84)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function gp_ZclProxyTableReqParse
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker36 Using cfiCommon1
          CFI (cfiPicker36) NoFunction
          CFI (cfiPicker36) Picker
        MOV     A,#-0x1
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiPicker36
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine33_0:
          CFI Block cfiCond37 Using cfiCommon0
          CFI Function gp_ZclPairingParse
          CFI Conditional ??CrossCallReturnLabel_50
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 84)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function gp_returnOperationalChannel
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-2
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function zclGp_ManteinanceIndParse
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function gp_ZclPairingParse
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 84)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function gp_ZclProxyTableReqParse
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-2
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker42 Using cfiCommon1
          CFI (cfiPicker42) NoFunction
          CFI (cfiPicker42) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiPicker42
//  441 
//  442 /*********************************************************************
//  443  * @fn      zclGp_DataIndParse
//  444  *
//  445 
//  446  * @brief   Parse the Gp Data indication to Gp Notification command
//  447  *
//  448  * @param   pInd - Pointer to the incoming data
//  449  *
//  450  * @return  ZStatus_t
//  451  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  452 ZStatus_t zclGp_DataIndParse( gp_DataInd_t *pInd, gpNotificationCmd_t *pGpNotification )
zclGp_DataIndParse:
          CFI Block cfiBlock43 Using cfiCommon0
          CFI Function zclGp_DataIndParse
        CODE
//  453 {
        FUNCALL zclGp_DataIndParse, gp_getProxyTableByIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 86, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 86, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_DataIndParse, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 89, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 89, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_DataIndParse, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 89, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 89, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_DataIndParse, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 89, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 89, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V12
        REQUIRE ?V13
        MOV     A,#-0x16
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 64
        MOV     A,#-0x40
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 86)
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V6,R4
        MOV     ?V7,R5
//  454   uint8 currEntry[PROXY_TBL_ENTRY_LEN] = {0};
        MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x40
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  455   uint8  ntfOpt[2] = {0x00, 0x00};
        MOV     R6,#0x0
//  456   uint8 i;
//  457   int8 RSSI;
//  458   uint8 LQI;
//  459   uint8 status;
//  460   
//  461   for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
        MOV     R7,#0x0
        MOV     A,R2
        ADD     A,#0x11
        MOV     ?V0,A
        CLR     A
        ADDC    A,?V5
        MOV     ?V1,A
        MOV     ?V2,R6
        MOV     A,R2
        ADD     A,#0x21
        MOV     ?V12,A
        CLR     A
        ADDC    A,?V5
        MOV     ?V13,A
//  462   {
//  463     status = gp_getProxyTableByIndex( ( ZCD_NV_PROXY_TABLE_START + i ), currEntry );
??zclGp_DataIndParse_0:
        ; Setup parameters for call to function gp_getProxyTableByIndex
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,R7
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_78:
        LCALL   `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
        MOV     A,R1
        MOV     R0,A
//  464 
//  465     if ( status == NV_OPER_FAILED )
        MOV     A,#0xa
        XRL     A,R0
        JNZ     ??zclGp_DataIndParse_1
//  466     {
//  467       return status;
        MOV     R1,#0xa
        LJMP    ??zclGp_DataIndParse_2 & 0xFFFF
//  468     }
//  469     
//  470     // if the entry is empty
//  471     if ( status == NV_INVALID_DATA )
??zclGp_DataIndParse_1:
        MOV     A,#0xd
        XRL     A,R0
        JNZ     $+5
        LJMP    ??zclGp_DataIndParse_3 & 0xFFFF
//  472     {
//  473       continue;
//  474     }
//  475   
//  476     if ( PROXY_TBL_COMP_APPLICTION_ID( pInd->appID, currEntry[PROXY_TBL_ENTRY_OPT] ) )
        MOV     A,?V4
        ADD     A,#0x1c
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV     R4,A
        ANL     A,#0x7
        MOV     R2,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ANL     A,#0x7
        XRL     A,R2
        JNZ     ??zclGp_DataIndParse_4
        CLR     A
??zclGp_DataIndParse_4:
        JZ      $+5
        LJMP    ??zclGp_DataIndParse_3 & 0xFFFF
//  477     {
//  478       if ( pInd->appID == GP_OPT_APP_ID_GPD )
        MOV     A,R4
        JNZ     ??zclGp_DataIndParse_5
//  479       {
//  480         if ( osal_memcmp( &pInd->SrcId, &currEntry[PROXY_TBL_ENTRY_GPD_ID + 4], sizeof ( uint32 ) ) )
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V8,R1
        MOV     ?V9,R2
        MOV     ?V10,R6
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 89)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     DPL,?V12
        MOV     DPH,?V13
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     R3,#0x0
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 86)
        MOV     A,R1
        JZ      ??zclGp_DataIndParse_3
//  481         {
//  482           // Entry found
//  483           pGpNotification->gpdId = pInd->SrcId;
        MOV     DPL,?V12
        MOV     DPH,?V13
        LCALL   ?XLOAD_R0123
        MOV     DPL,?V6
        MOV     DPH,?V7
        INC     DPTR
        INC     DPTR
        LCALL   ?XSTORE_R0123
//  484           ntfOpt[0] = GP_OPT_APP_ID_GPD;
//  485           break;
        SJMP    ??zclGp_DataIndParse_6
//  486         }
//  487       }
//  488       else if ( pInd->appID == GP_OPT_APP_ID_IEEE )
??zclGp_DataIndParse_5:
        MOV     A,#0x2
        XRL     A,R4
        JNZ     ??zclGp_DataIndParse_3
//  489       {
//  490         if ( osal_memcmp( &pInd->srcAddr, &currEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN ) )
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V8,R1
        MOV     ?V9,R2
        MOV     ?V10,R6
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 89)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,?V0
        MOV     R2,?V1
        MOV     R3,?V2
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 86)
        MOV     A,R1
        JZ      ??zclGp_DataIndParse_3
//  491         {
//  492           // Entry found
//  493           osal_memcpy( pGpNotification->gpdIEEE, &(pInd->srcAddr.addr.extAddr), Z_EXTADDR_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 89)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,?V6
        ADD     A,#0x6
        MOV     R2,A
        CLR     A
        ADDC    A,?V7
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 86)
//  494           pGpNotification->ep = pInd->EndPoint;
        MOV     A,?V4
        ADD     A,#0x25
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_26:
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V6
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,?V7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  495           ntfOpt[0] = GP_OPT_APP_ID_IEEE;
        MOV     R6,#0x2
//  496           break;
        SJMP    ??zclGp_DataIndParse_6
//  497         }
//  498       }
//  499     }
//  500     else
//  501     {
//  502       continue;
//  503     }
//  504   }
??zclGp_DataIndParse_3:
        INC     R7
        MOV     A,R7
        CLR     C
        SUBB    A,#0x6
        JNC     $+5
        LJMP    ??zclGp_DataIndParse_0 & 0xFFFF
//  505   
//  506   // Set the options bit field
//  507   GP_NTF_SET_ALSO_UNICAST( ( uint8* )&ntfOpt[0], currEntry[PROXY_TBL_ENTRY_OPT] );
//  508   GP_NTF_SET_ALSO_DGROUP( ( uint8* )&ntfOpt[0], currEntry[PROXY_TBL_ENTRY_OPT] );
//  509   GP_NTF_SET_ALSO_CGROUP( ( uint8* )&ntfOpt[0], currEntry[PROXY_TBL_ENTRY_OPT] );
//  510   GP_NTF_SET_SEC_LEVEL( ( uint8* )&ntfOpt[0], currEntry[PROXY_TBL_ENTRY_SEC_OPT] );
??zclGp_DataIndParse_6:
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        SWAP    A
        RLC     A
        RLC     A
        ANL     A,#0xc0
        MOV     R2,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        CLR     A
        RLC     A
        SWAP    A
        RLC     A
        MOV     R1,A
        MOVX    A,@DPTR
        RRC     A
        RRC     A
        RRC     A
        ANL     A,#0x1f
        ANL     A,#0x18
        ORL     A,R6
        ORL     A,R1
        ANL     A,#0x3f
        ORL     A,R2
        MOV     R6,A
//  511   GP_NTF_SET_SEC_KEY_TYPE( ( uint8* )&ntfOpt[1], currEntry[PROXY_TBL_ENTRY_SEC_OPT] );
        MOV     A,R0
        RRC     A
        RRC     A
        ANL     A,#0x3f
        ANL     A,#0x7
        MOV     R0,A
//  512   pInd->RxAfterTx ?PROXY_TBL_SET_RX_AFTER_TX( ( uint8* )&ntfOpt[1] ) : PROXY_TBL_CLR_RX_AFTER_TX( ( uint8* )&ntfOpt[1] );
        MOV     A,?V4
        ADD     A,#0x20
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_27:
        JZ      ??zclGp_DataIndParse_7
        MOV     A,R0
        SETB    0xE0 /* A   */.3
        MOV     R0,A
//  513   PROXY_TBL_CLR_TX_QUEUE_FULL( ( uint8* )&ntfOpt[1] );
//  514   PROXY_TBL_SET_BIDIRECTIONAL_CAP( ( uint8* )&ntfOpt[1] );
//  515   PROXY_TBL_SET_PROXY_INFO( ( uint8* )&ntfOpt[1] );
//  516   
//  517   pGpNotification->options |= ( ( ntfOpt[0] ) & 0x00FF );
//  518   pGpNotification->options |= ( ( ( ntfOpt[1] ) <<  8 ) & 0xFF00 );
??zclGp_DataIndParse_7:
        MOV     A,R6
        MOV     R2,A
        MOV     A,#0x60
        ORL     A,R0
        MOV     R1,A
        MOV     A,R2
        MOV     R0,A
        MOV     DPL,?V6
        MOV     DPH,?V7
        MOVX    A,@DPTR
        ORL     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,R1
        MOVX    @DPTR,A
//  519   
//  520   pGpNotification->gpdSecCounter = pInd->GPDSecFrameCounter;
        MOV     A,?V4
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_34:
        ADDC    A,?V5
        MOV     DPH,A
        LCALL   ?XLOAD_R0123
        MOV     A,?V6
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,?V7
        MOV     DPH,A
        LCALL   ?XSTORE_R0123
//  521   pGpNotification->cmdId = pInd->GPDCmmdID;
        MOV     A,?V4
        ADD     A,#0x2a
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_28:
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,?V7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  522 
//  523   if ( pInd->GPDasduLength > 0 )
        MOV     A,?V4
        ADD     A,#0x2f
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_29:
        JZ      ??CrossCallReturnLabel_74
//  524   {
//  525     pGpNotification->payloadLen = pInd->GPDasduLength;
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V6
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,?V7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  526     pGpNotification->cmdPayload = pInd->GPDasdu;
        MOV     A,?V4
        ADD     A,#0x30
        MOV     R0,A
        CLR     A
        ADDC    A,?V5
        MOV     R1,A
        MOV     A,?V6
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,?V7
        LCALL   ??Subroutine37_0 & 0xFFFF
//  527   }
//  528   
//  529   pGpNotification->gppShortAddr = _NIB.nwkDevAddress;
??CrossCallReturnLabel_74:
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_45:
        MOV     A,?V6
        ADD     A,#0x17
        MOV     DPL,A
        CLR     A
        ADDC    A,?V7
        LCALL   ??Subroutine37_0 & 0xFFFF
//  530   
//  531   RSSI = pInd->Rssi;
??CrossCallReturnLabel_75:
        MOV     A,?V4
        ADD     A,#0xe
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV     R1,A
//  532   ( RSSI > 8 ) ?RSSI = 8 : ( RSSI < -109 ) ?RSSI = -109 : NULL;
        CLR     C
        SUBB    A,#0x9
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??zclGp_DataIndParse_8
        MOV     R0,#0x76
        SJMP    ??zclGp_DataIndParse_9
??zclGp_DataIndParse_8:
        MOV     A,R1
        CLR     C
        SUBB    A,#-0x6d
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??zclGp_DataIndParse_10
        MOV     R0,#0x1
        SJMP    ??zclGp_DataIndParse_9
??zclGp_DataIndParse_10:
        MOV     A,#0x6e
        ADD     A,R1
        MOV     R0,A
//  533   RSSI += 110;
//  534   RSSI /= 2;
??zclGp_DataIndParse_9:
        MOV     A,R0
        MOV     B,#0x2
        LCALL   ?SC_DIV_MOD
        MOV     R1,A
//  535   
//  536   ( pInd->LinkQuality == 0 ) ?LQI = 0 : ( pInd->LinkQuality > 0 ) ?LQI = 2 : NULL;
        MOV     A,?V4
        ADD     A,#0xf
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_31:
        JNZ     ??zclGp_DataIndParse_11
        MOV     R0,#0x0
        SJMP    ??zclGp_DataIndParse_12
??zclGp_DataIndParse_11:
        MOV     R0,#0x2
//  537   
//  538   pGpNotification->gppGpdLink = RSSI;
//  539   pGpNotification->gppGpdLink |= ( LQI << 6 );
??zclGp_DataIndParse_12:
        MOV     A,R0
        SWAP    A
        RLC     A
        RLC     A
        ANL     A,#0xc0
        ORL     A,R1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V6
        ADD     A,#0x19
        MOV     DPL,A
        CLR     A
        ADDC    A,?V7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  540     
//  541   return SUCCESS;
        MOV     R1,#0x0
??zclGp_DataIndParse_2:
        MOV     A,#0x40
          CFI EndBlock cfiBlock43
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  542 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock44 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 86)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Valid
        MOV     R7,#0xe
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock44

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond45 Using cfiCommon0
          CFI Function zclGp_DataIndParse
          CFI Conditional ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function zclGp_DataIndParse
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond46) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-2
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function zclGp_DataIndParse
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond47) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-2
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function zclGp_DataIndParse
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-2
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function zclGp_DataIndParse
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond49) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-2
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function zclGp_DataIndParse
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond50) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function zclGp_DataIndParse
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker52 Using cfiCommon1
          CFI (cfiPicker52) NoFunction
          CFI (cfiPicker52) Picker
        MOV     DPL,A
        CLR     A
        ADDC    A,?V5
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiPicker52
//  543 
//  544 /*********************************************************************
//  545  * @fn      zclGp_GpPairingCommandCB
//  546  *
//  547  * @brief   Callback from the ZCL GreenPower Cluster Library when
//  548  *          it received an Gp Notification Command for this application.
//  549  *
//  550  * @param   pCmd - command payload
//  551  *
//  552  * @return  none
//  553  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  554 static void zclGp_GpPairingCommandCB( zclGpPairing_t *pCmd )
zclGp_GpPairingCommandCB:
          CFI Block cfiBlock53 Using cfiCommon0
          CFI Function zclGp_GpPairingCommandCB
        CODE
//  555 {
        FUNCALL zclGp_GpPairingCommandCB, gp_ZclPairingParse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_GpPairingCommandCB, gp_PairingUpdateProxyTlb
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_GpPairingCommandCB, gp_stopCommissioningMode
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 53
        MOV     A,#-0x35
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 53)
//  556   gpPairingCmd_t pairingPayload = {0x00};
        MOV     DPTR,#`?<Constant {0, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0,`
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x35
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  557 
//  558   gp_ZclPairingParse( pCmd, &pairingPayload );
        ; Setup parameters for call to function gp_ZclPairingParse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        LCALL   `??gp_ZclPairingParse::?relay`; Banked call to: gp_ZclPairingParse
//  559   gp_PairingUpdateProxyTlb( &pairingPayload );
        ; Setup parameters for call to function gp_PairingUpdateProxyTlb
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??gp_PairingUpdateProxyTlb::?relay`; Banked call to: gp_PairingUpdateProxyTlb
//  560   
//  561   
//  562   if(gp_commissioningOptions & GP_COMM_OPT_EXIT_ON_PAIRING_SUCCESS_MASK)
        MOV     DPTR,#gp_commissioningOptions
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.2
        JNC     ??zclGp_GpPairingCommandCB_0
//  563   {
//  564     gp_stopCommissioningMode();
        ; Setup parameters for call to function gp_stopCommissioningMode
        LCALL   `??gp_stopCommissioningMode::?relay`; Banked call to: gp_stopCommissioningMode
//  565   }
//  566 }
??zclGp_GpPairingCommandCB_0:
        MOV     A,#0x35
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock53
//  567 
//  568 /*********************************************************************
//  569  * @fn      zclGp_GpProxyTableReqCB
//  570  *
//  571  * @brief   Callback from the ZCL GreenPower Cluster Library when
//  572  *          it received a Gp proxy table req.
//  573  *
//  574  * @param   pCmd - command payload
//  575  *
//  576  * @return  none
//  577  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  578 static void zclGp_GpProxyTableReqCB( zclGpProxyTableRequest_t *pCmd )
zclGp_GpProxyTableReqCB:
          CFI Block cfiBlock54 Using cfiCommon0
          CFI Function zclGp_GpProxyTableReqCB
        CODE
//  579 {
        FUNCALL zclGp_GpProxyTableReqCB, gp_ZclProxyTableReqParse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 100, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 100, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_GpProxyTableReqCB, gp_getProxyTableByIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 100, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 100, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_GpProxyTableReqCB, zclGp_SendGpProxyTableResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 100, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 100, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_GpProxyTableReqCB, pt_ZclReadGetProxyEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 102, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 102, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_GpProxyTableReqCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 100, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 100, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_GpProxyTableReqCB, pt_ZclReadGetProxyEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 102, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 102, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_GpProxyTableReqCB, zclGp_SendGpProxyTableResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 100, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 100, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_GpProxyTableReqCB, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 100, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 100, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 86
        MOV     A,#-0x56
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 100)
        MOV     ?V0,R2
        MOV     ?V1,R3
//  580   uint8 i;
//  581   uint8 status;
//  582   uint8* buf = NULL;
//  583   uint8 currEntry[PROXY_TBL_ENTRY_LEN] = {0};
        MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x40
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  584   
//  585   zclGpProxyTableResponse_t proxyTblRsp = {0};
        MOV     DPTR,#`?<Constant {0}>`
        INC     A
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x6
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  586   gpProxyTableReqCmd_t proxyTblReqPayload = {0};
        MOV     DPTR,#`?<Constant {0, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0,_1`
        MOV     A,#0xf
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  587   
//  588   proxyTblRsp.proxyTableEntry = NULL;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  589 
//  590   gp_ZclProxyTableReqParse( pCmd, &proxyTblReqPayload );
        ; Setup parameters for call to function gp_ZclProxyTableReqParse
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP102_8
        LCALL   `??gp_ZclProxyTableReqParse::?relay`; Banked call to: gp_ZclProxyTableReqParse
//  591   
//  592 
//  593   for ( i = proxyTblReqPayload.index; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V3,A
        SJMP    ??zclGp_GpProxyTableReqCB_0
//  594   {
//  595     status = gp_getProxyTableByIndex( ( ZCD_NV_PROXY_TABLE_START + i ), currEntry );
//  596 
//  597     if ( status == NV_OPER_FAILED )
//  598     {
//  599       break;
//  600     }
//  601     
//  602     // if the entry is not empty
//  603     if ( status == SUCCESS )
??zclGp_GpProxyTableReqCB_1:
        MOV     A,R0
        JNZ     ??zclGp_GpProxyTableReqCB_2
//  604     {
//  605       proxyTblRsp.tableEntriesTotal += 1;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  606     }
??zclGp_GpProxyTableReqCB_2:
        INC     ?V3
??zclGp_GpProxyTableReqCB_0:
        MOV     A,?V3
        CLR     C
        SUBB    A,#0x6
        JNC     ??zclGp_GpProxyTableReqCB_3
        ; Setup parameters for call to function gp_getProxyTableByIndex
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP102_8
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_81:
        LCALL   `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
        MOV     A,R1
        MOV     R0,A
        MOV     A,#0xa
        XRL     A,R0
        JNZ     ??zclGp_GpProxyTableReqCB_1
//  607   }
//  608   
//  609   if ( proxyTblRsp.tableEntriesTotal == 0x00 )
??zclGp_GpProxyTableReqCB_3:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JNZ     ??zclGp_GpProxyTableReqCB_4
//  610   {
//  611     proxyTblRsp.status = SUCCESS;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  612     proxyTblRsp.startIndex = 0xFF;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  613     proxyTblRsp.entriesCount = 0x00;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ?Subroutine9 & 0xFFFF
//  614     // Send response and exit
//  615     zclGp_SendGpProxyTableResponse( pCmd->srcAddr, &proxyTblRsp, zcl_InSeqNum );
??CrossCallReturnLabel_4:
        LCALL   ?XSTACK_DISP102_8
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_104:
        LCALL   `??zclGp_SendGpProxyTableResponse::?relay`; Banked call to: zclGp_SendGpProxyTableResponse
//  616     return;
        LJMP    ??zclGp_GpProxyTableReqCB_5 & 0xFFFF
//  617   }
//  618 
//  619   
//  620   if ( GP_IS_REQ_TPY_INDEX ( proxyTblReqPayload.options ) )
??zclGp_GpProxyTableReqCB_4:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        RRC     A
        RRC     A
        RRC     A
        ANL     A,#0x1f
        ANL     A,#0x3
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??zclGp_GpProxyTableReqCB_5 & 0xFFFF
//  621   {
//  622     uint8 entryLen = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
//  623     uint8 maxEntryLen = 0;
        MOV     ?V2,#0x0
//  624     
//  625     for ( i = proxyTblReqPayload.index; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V3,A
        SJMP    ??zclGp_GpProxyTableReqCB_6
??zclGp_GpProxyTableReqCB_7:
        INC     ?V3
??zclGp_GpProxyTableReqCB_6:
        MOV     A,?V3
        CLR     C
        SUBB    A,#0x6
        JNC     ??zclGp_GpProxyTableReqCB_8
//  626     {    
//  627       maxEntryLen = entryLen;    // Save the last iteration Lenght
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V2,A
//  628       
//  629       // Get the length of the payload
//  630       status = pt_ZclReadGetProxyEntry ( ( ZCD_NV_PROXY_TABLE_START + i ), NULL, &entryLen );
//  631 
//  632       if ( status != ZSuccess )
        ; Setup parameters for call to function pt_ZclReadGetProxyEntry
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 102)
        MOV     R4,#0x0
        MOV     R5,#0x0
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_82:
        LCALL   `??pt_ZclReadGetProxyEntry::?relay`; Banked call to: pt_ZclReadGetProxyEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 100)
        MOV     A,R1
        JNZ     ??zclGp_GpProxyTableReqCB_8
//  633       {
//  634         break;
//  635       }
//  636       
//  637       if ( entryLen >= 75 )   // max payload for entries
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x4b
        JC      ??zclGp_GpProxyTableReqCB_7
//  638       {
//  639         entryLen = maxEntryLen;   // The last valid lenght is the MAX for this packet
        MOV     A,?V2
        MOVX    @DPTR,A
//  640         break;
//  641       }
//  642     }
//  643 
//  644     buf = zcl_mem_alloc( entryLen );
??zclGp_GpProxyTableReqCB_8:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R6,?V4
        MOV     R7,?V5
//  645  
//  646     if ( buf != NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??zclGp_GpProxyTableReqCB_5 & 0xFFFF
//  647     {
//  648       // Load the buffer - serially
//  649       uint8 *pBuf = buf;
//  650     
//  651       entryLen = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
//  652       proxyTblRsp.entriesCount = 0;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  653       for ( i = proxyTblReqPayload.index; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V3,A
        SJMP    ??zclGp_GpProxyTableReqCB_9
??zclGp_GpProxyTableReqCB_10:
        INC     ?V3
??zclGp_GpProxyTableReqCB_9:
        MOV     A,?V3
        CLR     C
        SUBB    A,#0x6
        JNC     ??zclGp_GpProxyTableReqCB_11
//  654       {  
//  655         status = pt_ZclReadGetProxyEntry ( ( ZCD_NV_PROXY_TABLE_START + i ), pBuf, &entryLen );
        ; Setup parameters for call to function pt_ZclReadGetProxyEntry
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 102)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_83:
        LCALL   `??pt_ZclReadGetProxyEntry::?relay`; Banked call to: pt_ZclReadGetProxyEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 100)
        MOV     A,R1
        MOV     R0,A
//  656         if ( status == NV_OPER_FAILED )
        MOV     A,#0xa
        XRL     A,R0
        JZ      ??zclGp_GpProxyTableReqCB_11
//  657         {
//  658           break;
//  659         }
//  660         
//  661         if ( status != NV_INVALID_DATA )
        MOV     A,#0xd
        XRL     A,R0
        JZ      ??zclGp_GpProxyTableReqCB_12
//  662         {
//  663           proxyTblRsp.entriesCount += 1;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  664         }
//  665         
//  666         if ( entryLen >= maxEntryLen )   // to see if we reched the MAX calculated payload
??zclGp_GpProxyTableReqCB_12:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,?V2
        JC      ??zclGp_GpProxyTableReqCB_10
//  667         {
//  668           break;
//  669         }
//  670       }
//  671       
//  672       // Send response and exit
//  673       proxyTblRsp.startIndex = proxyTblReqPayload.index;
??zclGp_GpProxyTableReqCB_11:
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  674       proxyTblRsp.proxyTableEntry = buf;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ?Subroutine9 & 0xFFFF
//  675       zclGp_SendGpProxyTableResponse( pCmd->srcAddr, &proxyTblRsp, zcl_InSeqNum );
??CrossCallReturnLabel_5:
        LCALL   ?XSTACK_DISP102_8
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_105:
        LCALL   `??zclGp_SendGpProxyTableResponse::?relay`; Banked call to: zclGp_SendGpProxyTableResponse
//  676       zcl_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  677     }
//  678   }
//  679 }
??zclGp_GpProxyTableReqCB_5:
        MOV     A,#0x56
          CFI EndBlock cfiBlock54
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock55 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 100)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock55
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine34_0:
          CFI Block cfiBlock56 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock56

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond57 Using cfiCommon0
          CFI Function zclGp_GpProxyTableReqCB
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 100)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function zclGp_GpProxyTableReqCB
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-2
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 100)
          CFI Block cfiPicker59 Using cfiCommon1
          CFI (cfiPicker59) NoFunction
          CFI (cfiPicker59) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function zclGp_SendGpProxyTableResponse
        ; Setup parameters for call to function zclGp_SendGpProxyTableResponse
        MOV     DPTR,#zcl_InSeqNum
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x1
        RET
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiPicker59

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>`:
        DB 0
        DB 0, 0, 0, 0, 0
//  680 
//  681 
//  682 /*********************************************************************
//  683  * @fn      zclGp_GpResponseCommandCB
//  684  *
//  685  * @brief   Callback from the ZCL GreenPower Cluster Library when
//  686  *          it received a Gp Response command.
//  687  *
//  688  * @param   pCmd - command payload
//  689  *
//  690  * @return  none
//  691  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  692 static void zclGp_GpResponseCommandCB(zclGpResponse_t *pCmd)
zclGp_GpResponseCommandCB:
          CFI Block cfiBlock60 Using cfiCommon0
          CFI Function zclGp_GpResponseCommandCB
        CODE
//  693 {
        FUNCALL zclGp_GpResponseCommandCB, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 97, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 97, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_GpResponseCommandCB, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 97, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 97, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_GpResponseCommandCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 100, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 100, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_GpResponseCommandCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 100, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 100, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_GpResponseCommandCB, gp_GetHandle
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 97, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 97, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_GpResponseCommandCB, gp_getProxyTableByGpId
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 99, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 99, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_GpResponseCommandCB, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 101, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 101, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_GpResponseCommandCB, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 97, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 97, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_GpResponseCommandCB, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 97, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 97, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_GpResponseCommandCB, gp_getProxyTableByGpId
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 99, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 99, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_GpResponseCommandCB, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 101, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 101, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_GpResponseCommandCB, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 97, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 97, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V12
        REQUIRE ?V13
        MOV     A,#-0x16
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 75
        MOV     A,#-0x4b
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 97)
        MOV     ?V2,R2
        MOV     ?V3,R3
//  694   gp_DataReq_t  *gp_DataReq;
//  695   gpd_ID_t      gpd_ID;
//  696   uint8         endpoint = 0;
//  697   uint8         command;
//  698   uint8         payloadLen = 0;
//  699   
//  700   //No bidirectional communication in operational mode
//  701   //A.3.2.8
//  702   if(!zgGP_InCommissioningMode)
        MOV     DPTR,#zgGP_InCommissioningMode
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??zclGp_GpResponseCommandCB_0 & 0xFFFF
//  703   {
//  704     return;
//  705   }
//  706   
//  707   gpd_ID.AppID = pCmd->options & GP_RSP_CMD_OPT_APP_ID_MASK;
        MOV     A,R2
        ADD     A,#0x2
        MOV     ?V12,A
        CLR     A
        ADDC    A,?V3
        MOV     ?V13,A
        MOV     DPL,?V12
        MOV     DPH,A
        MOVX    A,@DPTR
        ANL     A,#0x7
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  708   if(gpd_ID.AppID == GP_APP_ID_DEFAULT)
        JZ      $+5
        LJMP    ??zclGp_GpResponseCommandCB_0 & 0xFFFF
//  709   {
//  710     gpd_ID.GPDId.SrcID = osal_build_uint32(pCmd->pData,sizeof(uint32));
        MOV     A,R2
        ADD     A,#0x6
        MOV     R6,A
        CLR     A
        ADDC    A,?V3
        MOV     R7,A
        ; Setup parameters for call to function osal_build_uint32
        MOV     R1,#0x4
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_99:
        LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R0123
//  711     pCmd->pData += sizeof(uint32);
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#0x4
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        LCALL   ?Subroutine7 & 0xFFFF
//  712   }
//  713   else if(gpd_ID.AppID == GP_APP_ID_DEFAULT)
//  714   {
//  715     gpd_ID.GPDId.SrcID = osal_build_uint32(pCmd->pData,sizeof(uint32));
//  716     pCmd->pData += sizeof(uint32);
//  717     
//  718     endpoint = *pCmd->pData;
//  719     pCmd->pData++;
//  720   }
//  721   else
//  722   {
//  723     //Invalid app ID
//  724     return;
//  725   }
//  726   
//  727   command  = *pCmd->pData;
??CrossCallReturnLabel_2:
        MOV     ?V5,A
//  728   pCmd->pData++;
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        LCALL   ?Subroutine7 & 0xFFFF
//  729   payloadLen = *pCmd->pData;
??CrossCallReturnLabel_3:
        MOV     ?V4,A
//  730   pCmd->pData++;
        INC     DPTR
        INC     R0
        MOV     R1,DPH
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine38_0 & 0xFFFF
//  731    
//  732   gp_DataReq = (gp_DataReq_t*)osal_msg_allocate(sizeof(gp_DataReq_t) + payloadLen);  
??CrossCallReturnLabel_70:
        ; Setup parameters for call to function osal_msg_allocate
        MOV     A,?V4
        ADD     A,#0x15
        MOV     R2,A
        CLR     A
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V0,R2
        MOV     ?V1,R3
//  733   
//  734   if(gp_DataReq == NULL)
        MOV     A,R2
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??zclGp_GpResponseCommandCB_0 & 0xFFFF
//  735   {
//  736     //FAIL no memory
//  737     return;
//  738   }
//  739   if(payloadLen == 0xFF)
        MOV     A,#-0x1
        XRL     A,?V4
        JNZ     ??zclGp_GpResponseCommandCB_1
//  740   {
//  741     payloadLen = 0;
        MOV     ?V4,#0x0
//  742   }
//  743   gp_DataReq->TxOptions = GP_OPT_USE_TX_QUEUE_MASK;
??zclGp_GpResponseCommandCB_1:
        MOV     A,R2
        ADD     A,#0x3
        MOV     ?V6,A
        CLR     A
        ADDC    A,?V1
        MOV     ?V7,A
        MOV     DPL,?V6
        MOV     DPH,A
        MOV     A,#0x1
        MOVX    @DPTR,A
//  744   gp_DataReq->EndPoint = endpoint;
        MOV     A,R2
        ADD     A,#0xd
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_59:
        CLR     A
        MOVX    @DPTR,A
//  745   osal_memcpy(gp_DataReq->GPDasdu,pCmd->pData,payloadLen);
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V9,A
        MOV     ?V10,#0x0
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 100)
        MOV     R4,?V4
        MOV     R5,#0x0
        MOV     A,R2
        ADD     A,#0x14
        MOV     R2,A
        CLR     A
        ADDC    A,?V1
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 97)
//  746   gp_DataReq->GPDasduLength = payloadLen;
        MOV     A,?V0
        ADD     A,#0x13
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_60:
        MOV     A,?V4
        MOVX    @DPTR,A
//  747   gp_DataReq->GPDCmmdId = command;
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_65:
        MOV     A,?V5
        MOVX    @DPTR,A
//  748   osal_memcpy(&gp_DataReq->gpd_ID,&gpd_ID,sizeof(gpd_ID_t));
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V8,R0
        MOV     ?V9,R1
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 100)
        MOV     R4,#0x9
        MOV     R5,#0x0
        MOV     A,?V0
        ADD     A,#0x4
        MOV     R2,A
        CLR     A
        ADDC    A,?V1
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 97)
//  749 
//  750   gp_DataReq->GPEPhandle = gp_GetHandle(GPEP_HANDLE_TYPE);
        ; Setup parameters for call to function gp_GetHandle
        MOV     R1,#0x1
        LCALL   `??gp_GetHandle::?relay`; Banked call to: gp_GetHandle
        MOV     A,?V0
        ADD     A,#0xf
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_61:
        MOV     A,R1
        MOVX    @DPTR,A
//  751       
//  752   gp_DataReq->hdr.event = GP_DATA_REQ;
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOV     A,#0x5
        MOVX    @DPTR,A
//  753   gp_DataReq->hdr.status = 0;  
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  754   
//  755   if(pCmd->options & GP_RSP_CMD_OPT_TRANSMIT_ON_ENDPOINT_MATCH_MASK)
        MOV     DPL,?V12
        MOV     DPH,?V13
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JNC     ??zclGp_GpResponseCommandCB_2
//  756   {
//  757     gp_DataReq->TxOptions |= GP_OPT_TX_ON_MATCHING_ENDPOINT_MASK;
        MOV     DPL,?V6
        MOV     DPH,?V7
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.5
        MOVX    @DPTR,A
//  758   }
//  759             
//  760   if(pCmd->tempMasterShortAddr == _NIB.nwkDevAddress)
??zclGp_GpResponseCommandCB_2:
        MOV     A,?V0
        ADD     A,#0x2
        MOV     R6,A
        CLR     A
        ADDC    A,?V1
        MOV     R7,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_10:
        JNZ     ??zclGp_GpResponseCommandCB_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??zclGp_GpResponseCommandCB_3:
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        JZ      $+5
        LJMP    ??zclGp_GpResponseCommandCB_4 & 0xFFFF
//  761   {
//  762     uint16 NvProxyTableIndex;
//  763     uint8  ProxyTableEntryTemp[PROXY_TBL_ENTRY_LEN];
//  764        
//  765     if ( gp_getProxyTableByGpId(&gpd_ID,ProxyTableEntryTemp,&NvProxyTableIndex) != ZSuccess )
        ; Setup parameters for call to function gp_getProxyTableByGpId
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 99)
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??gp_getProxyTableByGpId::?relay`; Banked call to: gp_getProxyTableByGpId
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 97)
        MOV     A,R1
        JZ      $+5
        LJMP    ??zclGp_GpResponseCommandCB_0 & 0xFFFF
//  766     {
//  767       return;
//  768     }
//  769     
//  770     if(pCmd->dstAddr == _NIB.nwkDevAddress)
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_11:
        JNZ     ??zclGp_GpResponseCommandCB_5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??zclGp_GpResponseCommandCB_5:
        JZ      $+5
        LJMP    ??zclGp_GpResponseCommandCB_6 & 0xFFFF
//  771     {
//  772       //Update FirstToForward to 1
//  773       if(PROXY_TBL_GET_FIRST_TO_FORWARD(ProxyTableEntryTemp[PROXY_TBL_ENTRY_OPT]) == 0)
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JC      ??zclGp_GpResponseCommandCB_7
//  774       {
//  775         PROXY_TBL_SET_FIRST_TO_FORWARD(&ProxyTableEntryTemp[PROXY_TBL_ENTRY_OPT]);
        SETB    0xE0 /* A   */.1
        MOVX    @DPTR,A
//  776         osal_nv_write(NvProxyTableIndex,PROXY_TBL_ENTRY_OPT,2,&ProxyTableEntryTemp[PROXY_TBL_ENTRY_OPT]);
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 99)
        MOV     ?V4,#0x2
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 101)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine42_0 & 0xFFFF
//  777       }
??CrossCallReturnLabel_100:
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 97)
//  778       
//  779       //Depends on TempMasterAddress
//  780       gp_DataReq->Action = TRUE;
??zclGp_GpResponseCommandCB_7:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x1
        MOVX    @DPTR,A
//  781       
//  782       //Step 6 of Section A.3.9.1 The Procedure
//  783       //Check if we are in a different channel
//  784       if((pCmd->tempMasterTxChannel + 0x0B) != _NIB.nwkLogicalChannel)
        MOV     A,?V2
        ADD     A,#0x5
        MOV     R0,A
        CLR     A
        ADDC    A,?V3
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#0xb
        MOV     R2,A
        CLR     A
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPTR,#_NIB + 22
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??zclGp_GpResponseCommandCB_8
        MOV     A,R3
??zclGp_GpResponseCommandCB_8:
        JNZ     $+5
        LJMP    ??zclGp_GpResponseCommandCB_6 & 0xFFFF
//  785       {
//  786         //did we got permission to attend channel request?
//  787         if(osal_get_timeoutEx(gp_TaskID,GP_CHANNEL_CONFIGURATION_TIMEOUT))
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV     R2,#0x8
        MOV     R3,#0x0
        MOV     DPTR,#gp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV     A,R2
        ORL     A,R3
        ORL     A,R4
        ORL     A,R5
        JZ      ??zclGp_GpResponseCommandCB_6
//  788         {
//  789           gp_tempLogicalChannel = _NIB.nwkLogicalChannel;
        MOV     DPTR,#_NIB + 22
        MOVX    A,@DPTR
        MOV     DPTR,#gp_tempLogicalChannel
        MOVX    @DPTR,A
//  790           _NIB.nwkLogicalChannel = pCmd->tempMasterTxChannel;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine14 & 0xFFFF
//  791           ZMacSetReq( ZMacChannel, &(_NIB.nwkLogicalChannel) );
//  792         }
//  793       }
//  794     }
//  795   }
??CrossCallReturnLabel_8:
        LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
        SJMP    ??zclGp_GpResponseCommandCB_6
//  796   else
//  797   {
//  798     uint16 NvProxyTableIndex;
//  799     uint8  ProxyTableEntryTemp[PROXY_TBL_ENTRY_LEN];
//  800        
//  801     if( gp_getProxyTableByGpId(&gpd_ID,ProxyTableEntryTemp,&NvProxyTableIndex) != ZSuccess )
??zclGp_GpResponseCommandCB_4:
        ; Setup parameters for call to function gp_getProxyTableByGpId
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 99)
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??gp_getProxyTableByGpId::?relay`; Banked call to: gp_getProxyTableByGpId
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 97)
        MOV     A,R1
        JNZ     ??zclGp_GpResponseCommandCB_0
//  802     {
//  803       return;
//  804     }
//  805 
//  806     //Update FirstToForward to 0
//  807     if(PROXY_TBL_GET_FIRST_TO_FORWARD(ProxyTableEntryTemp[PROXY_TBL_ENTRY_OPT]) == 1)
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??zclGp_GpResponseCommandCB_9
//  808     {
//  809       PROXY_TBL_SET_FIRST_TO_FORWARD(&ProxyTableEntryTemp[PROXY_TBL_ENTRY_OPT]);
        SETB    0xE0 /* A   */.1
        MOVX    @DPTR,A
//  810       osal_nv_write(NvProxyTableIndex,PROXY_TBL_ENTRY_OPT,2,&ProxyTableEntryTemp[PROXY_TBL_ENTRY_OPT]);
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 99)
        MOV     ?V2,#0x2
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 101)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine42_0 & 0xFFFF
//  811     }    
??CrossCallReturnLabel_101:
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 97)
//  812     
//  813     gp_DataReq->Action = 0;
??zclGp_GpResponseCommandCB_9:
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
//  814   }
//  815   
//  816   osal_msg_send(gp_TaskID,(uint8*)gp_DataReq);
??zclGp_GpResponseCommandCB_6:
        ; Setup parameters for call to function osal_msg_send
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     DPTR,#gp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
//  817 }
??zclGp_GpResponseCommandCB_0:
        MOV     A,#0x4b
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock60

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond61 Using cfiCommon0
          CFI Function zclGp_ManteinanceIndParse
          CFI Conditional ??CrossCallReturnLabel_64
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function zclGp_GpResponseCommandCB
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond62) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond62) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond62) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond62) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond62) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond62) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond62) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond62) CFA_SP SP+-2
          CFI (cfiCond62) CFA_XSP16 add(XSP16, 97)
          CFI Block cfiPicker63 Using cfiCommon1
          CFI (cfiPicker63) NoFunction
          CFI (cfiPicker63) Picker
        MOV     A,?V0
        ADD     A,#0xe
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiPicker63
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine35_0:
          CFI Block cfiCond64 Using cfiCommon0
          CFI Function zclGp_ManteinanceIndParse
          CFI Conditional ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function zclGp_ManteinanceIndParse
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function zclGp_ManteinanceIndParse
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function zclGp_ManteinanceIndParse
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function zclGp_GpResponseCommandCB
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond68) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-2
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 97)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function zclGp_GpResponseCommandCB
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond69) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond69) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond69) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-2
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 97)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function zclGp_GpResponseCommandCB
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond70) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-2
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 97)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function GP_SecReq
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond71) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond71) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond71) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-2
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function GP_SecReq
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond72) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond72) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond72) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond72) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond72) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-2
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function zclGp_ManteinanceIndParse
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function zclGp_GpResponseCommandCB
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond74) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond74) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond74) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-2
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 97)
          CFI Block cfiPicker75 Using cfiCommon1
          CFI (cfiPicker75) NoFunction
          CFI (cfiPicker75) Picker
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiPicker75

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond76 Using cfiCommon0
          CFI Function zclGp_GpResponseCommandCB
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 97)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function zclGp_GpResponseCommandCB
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond77) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond77) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond77) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-2
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 97)
          CFI Block cfiPicker78 Using cfiCommon1
          CFI (cfiPicker78) NoFunction
          CFI (cfiPicker78) Picker
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_46:
        MOV     DPTR,#_NIB + 20
        MOVX    A,@DPTR
        XRL     A,R0
        RET
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiPicker78

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond79 Using cfiCommon0
          CFI Function zclGp_GpResponseCommandCB
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 97)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function zclGp_GpResponseCommandCB
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond80) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond80) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond80) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond80) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+-2
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 97)
          CFI Block cfiPicker81 Using cfiCommon1
          CFI (cfiPicker81) NoFunction
          CFI (cfiPicker81) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiPicker81
//  818 
//  819 
//  820 
//  821 /*********************************************************************
//  822  * @fn      zclGp_GpProxyCommissioningModeCB
//  823  *
//  824  * @brief   Callback from the ZCL GreenPower Cluster Library when
//  825  *          it received a Gp Commissioning Mode command.
//  826  *
//  827  * @param   pCmd - command payload
//  828  *
//  829  * @return  none
//  830  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  831 static void zclGp_GpProxyCommissioningModeCB(zclGpProxyCommissioningMode_t* pCmd)
zclGp_GpProxyCommissioningModeCB:
          CFI Block cfiBlock82 Using cfiCommon0
          CFI Function zclGp_GpProxyCommissioningModeCB
        CODE
//  832 {
        FUNCALL zclGp_GpProxyCommissioningModeCB, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_GpProxyCommissioningModeCB, gp_stopCommissioningMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  833   gp_commissioningOptions = pCmd->options;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#gp_commissioningOptions
        MOVX    @DPTR,A
//  834   uint32 CommissioningWindow = PGG_COMMISSIONING_WINDOW;
//  835   
//  836   if ( ( zgGP_InCommissioningMode == TRUE ) && ( gp_commissionerAddress != pCmd->srcAddr ) )
        MOV     DPTR,#zgGP_InCommissioningMode
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclGp_GpProxyCommissioningModeCB_0
        MOV     DPTR,#gp_commissionerAddress
        LCALL   ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??zclGp_GpProxyCommissioningModeCB_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??zclGp_GpProxyCommissioningModeCB_1:
        JNZ     ??zclGp_GpProxyCommissioningModeCB_2
//  837   {
//  838     // If is in commissioning mode and the soruce address is different from 
//  839     // the device that set the proxy in commissioning mode, then drop
//  840     // the request.
//  841     return;
//  842   }
//  843 
//  844   //Enter in commissioning mode
//  845   if(gp_commissioningOptions & GP_COMM_OPT_ACTION_MASK)
??zclGp_GpProxyCommissioningModeCB_0:
        MOV     DPTR,#gp_commissioningOptions
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??zclGp_GpProxyCommissioningModeCB_3
//  846   {
//  847   
//  848 #if 0
//  849     if(gp_commissioningOptions & GP_COMM_OPT_CHANNEL_PRES_MASK)
//  850     {
//  851       //Section A.3.3.5.3, channel field is not supported in the current version of the spec
//  852     }
//  853 #endif
//  854  
//  855     if(gp_commissioningOptions & GP_COMM_OPT_EXIT_ON_WINDOW_EXPIRATION_MASK)
        MOV     C,0xE0 /* A   */.1
        JNC     ??CrossCallReturnLabel_71
//  856     {
//  857       CommissioningWindow = osal_build_uint16(pCmd->pData);
        MOV     A,R6
        ADD     A,#0x3
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_102:
        LCALL   `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
//  858       pCmd->pData += sizeof(uint16);
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        ADD     A,#0x2
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ??Subroutine38_0 & 0xFFFF
//  859       
//  860       
//  861     }
//  862     if(gp_commissioningOptions & GP_COMM_OPT_UNICAST_COMM_MASK)
??CrossCallReturnLabel_71:
        MOV     DPTR,#gp_commissioningOptions
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.5
        JNC     ??zclGp_GpProxyCommissioningModeCB_4
//  863     {
//  864       gp_commissionerAddress = pCmd->srcAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine32_0 & 0xFFFF
//  865     }
??CrossCallReturnLabel_43:
        MOV     DPTR,#gp_commissionerAddress
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        SJMP    ??zclGp_GpProxyCommissioningModeCB_5
//  866     else
//  867     {
//  868       gp_commissionerAddress = 0xFFFF;
??zclGp_GpProxyCommissioningModeCB_4:
        MOV     DPTR,#gp_commissionerAddress
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
??zclGp_GpProxyCommissioningModeCB_5:
        MOVX    @DPTR,A
//  869     }
//  870     
//  871     //Convert to timer units
//  872     CommissioningWindow = CommissioningWindow * 1000;
//  873     
//  874     //Exit upon expire
//  875     zgGP_InCommissioningMode = TRUE;
        MOV     DPTR,#zgGP_InCommissioningMode
        MOV     A,#0x1
        MOVX    @DPTR,A
//  876     
//  877     //Notify the user about entering in commissioning mode
//  878     if(pfnCommissioningMode)
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_41:
        JZ      ??zclGp_GpProxyCommissioningModeCB_2
//  879     {
//  880       pfnCommissioningMode(TRUE);
        ; Setup parameters for indirect call
        MOV     R1,#0x1
        LCALL   ??Subroutine41_0 & 0xFFFF
//  881     }
//  882   }
??CrossCallReturnLabel_94:
        LCALL   ?CALL_IND
        SJMP    ??zclGp_GpProxyCommissioningModeCB_2
//  883   //Exit commissioning mode
//  884   else
//  885   { 
//  886     gp_stopCommissioningMode();
??zclGp_GpProxyCommissioningModeCB_3:
        ; Setup parameters for call to function gp_stopCommissioningMode
        LCALL   `??gp_stopCommissioningMode::?relay`; Banked call to: gp_stopCommissioningMode
//  887   }
//  888 }
??zclGp_GpProxyCommissioningModeCB_2:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock82
//  889 
//  890  /*********************************************************************
//  891  * @fn          gp_ZclPairingParse
//  892  *
//  893  * @brief       Parse the pairing data message payload
//  894  *
//  895  * @param       
//  896  *
//  897  * @return      
//  898  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  899 static void gp_ZclPairingParse( zclGpPairing_t* pCmd, gpPairingCmd_t* payload )
gp_ZclPairingParse:
          CFI Block cfiBlock83 Using cfiCommon0
          CFI Function gp_ZclPairingParse
        CODE
//  900 {
        FUNCALL gp_ZclPairingParse, gp_PopulateField
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 84, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 84, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_ZclPairingParse, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 84, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 84, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_ZclPairingParse, gp_PopulateField
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 84, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 84, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_ZclPairingParse, gp_PopulateField
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 84, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 84, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_ZclPairingParse, gp_PopulateField
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 84, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 84, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_ZclPairingParse, gp_PopulateField
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 84, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 84, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_ZclPairingParse, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 84, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 84, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_ZclPairingParse, gp_PopulateField
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 84, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 84, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_ZclPairingParse, gp_getProxyTableByIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 84, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 84, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_ZclPairingParse, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 87, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 87, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_ZclPairingParse, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 87, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 87, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_ZclPairingParse, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 84, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 84, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_ZclPairingParse, gp_PopulateField
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 84, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 84, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_ZclPairingParse, gp_PopulateField
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 84, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 84, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_ZclPairingParse, gp_PopulateField
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 84, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 84, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_ZclPairingParse, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 84, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 84, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_ZclPairingParse, gp_PopulateField
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 84, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 84, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_ZclPairingParse, gp_PopulateField
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 84, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 84, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 64
        MOV     A,#-0x40
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 84)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  901 
//  902   payload->options |= ( ( ( uint32 ) pCmd->options[2] << 16 ) & 0x00FF0000 );
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
        CLR     A
        MOV     ?V1,A
        MOV     ?V2,A
        MOV     ?V3,A
        MOV     A,#0x10
        MOV     R0,#?V0
        LCALL   ?L_SHL
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V0
        LCALL   ?L_IOR_TO_X
//  903   payload->options |= ( ( ( uint32 ) pCmd->options[1] <<  8 ) & 0x0000FF00 );
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
        CLR     A
        MOV     ?V2,A
        MOV     A,#0x8
        MOV     R0,#?V0
        LCALL   ?L_SHL
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V0
        LCALL   ?L_IOR_TO_X
//  904   payload->options |= ( ( ( uint32 ) pCmd->options[0] )       & 0x000000FF );
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
        CLR     A
        MOV     ?V1,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V0
        LCALL   ?L_IOR_TO_X
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     A,?V0
        ANL     A,#0x7
        MOV     R0,A
        MOV     A,R6
        ADD     A,#0x10
        MOV     ?V4,A
        CLR     A
        ADDC    A,R7
        MOV     ?V5,A
        MOV     A,R6
        ADD     A,#0x8
        MOV     ?V2,A
        CLR     A
        ADDC    A,R7
        MOV     ?V3,A
        MOV     A,R6
        ADD     A,#0x4
        MOV     ?V10,A
        CLR     A
        ADDC    A,R7
        MOV     ?V11,A
        MOV     A,R2
        ADD     A,#0x5
        MOV     ?V0,A
        CLR     A
        ADDC    A,R3
        MOV     ?V1,A
        MOV     A,R0
        JNZ     ??gp_ZclPairingParse_0
//  905     
//  906   // Options bitfield
//  907   // If Application Id bitfield is 0b000
//  908   if( GP_IS_APPLICATION_ID_GPD( payload->options ) )
//  909   {        
//  910     // Populate GPD ID
//  911     gp_PopulateField( ( uint8* )&payload->gpdId, &pCmd->pData, sizeof( payload->gpdId ) );
        ; Setup parameters for call to function gp_PopulateField
        MOV     R1,#0x4
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     R2,?V10
        MOV     R3,?V11
        LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
//  912     
//  913     // Populate GPD IEEE Invalid
//  914     osal_memset ( &payload->gpdIEEE, 0xFF, Z_EXTADDR_LEN );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#-0x1
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  915     // Populate EP Invalid
//  916     payload->ep = 0xFF;
        MOV     DPL,?V4
        MOV     DPH,?V5
        MOV     A,#-0x1
        MOVX    @DPTR,A
        SJMP    ??gp_ZclPairingParse_1
//  917   }
//  918   // If Application Id bitfield is 0b010
//  919   else if( GP_IS_APPLICATION_ID_IEEE( payload->options ) )
??gp_ZclPairingParse_0:
        MOV     A,#0x2
        XRL     A,R0
        JNZ     ??gp_ZclPairingParse_1
//  920   {
//  921     // Populate GPD ID Invalid
//  922     payload->gpdId = 0xFFFFFFFF;
        MOV     DPL,?V10
        MOV     DPH,?V11
        LCALL   ?Subroutine5 & 0xFFFF
//  923     
//  924     // Populate GPD IEEE
//  925     gp_PopulateField( ( uint8* )&payload->gpdIEEE, &pCmd->pData, Z_EXTADDR_LEN );
??CrossCallReturnLabel_0:
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
//  926     // Populate EP
//  927     gp_PopulateField( ( uint8* )&payload->ep, &pCmd->pData, sizeof( payload->ep ) );
        ; Setup parameters for call to function gp_PopulateField
        MOV     R1,#0x1
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     R2,?V4
        MOV     R3,?V5
        LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
//  928   }
//  929   
//  930   // If Remove GPD bit is 0b0
//  931   if( !GP_REMOVE_GPD( payload->options ) )
??gp_ZclPairingParse_1:
        MOV     A,R6
        ADD     A,#0x11
        MOV     ?V8,A
        CLR     A
        ADDC    A,R7
        MOV     ?V9,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     A,?V4
        ANL     A,#0x10
        JZ      $+5
        LJMP    ??gp_ZclPairingParse_2 & 0xFFFF
//  932   {
//  933     // Communication Mode 0b00 or 0b11
//  934     if( ( GP_IS_COMMUNICATION_MODE_FULL_UNICAST( payload->options ) ) || ( GP_IS_COMMUNICATION_MODE_LIGHT_UNICAST( payload->options ) ) )
        MOV     A,?V4
        SWAP    A
        RRC     A
        ANL     A,#0x7
        ANL     A,#0x3
        MOV     R0,A
        MOV     A,R6
        ADD     A,#0x1b
        MOV     ?V4,A
        CLR     A
        ADDC    A,R7
        MOV     ?V5,A
        MOV     A,R6
        ADD     A,#0x19
        MOV     ?V2,A
        CLR     A
        ADDC    A,R7
        MOV     ?V3,A
        MOV     A,R0
        JZ      ??gp_ZclPairingParse_3
        MOV     A,#0x3
        XRL     A,R0
        JNZ     ??gp_ZclPairingParse_4
//  935     {
//  936       // Populate Sink Addesses
//  937       gp_PopulateField( ( uint8* )&payload->sinkIEEE, &pCmd->pData, Z_EXTADDR_LEN );
??gp_ZclPairingParse_3:
        ; Setup parameters for call to function gp_PopulateField
        MOV     R1,#0x8
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     R2,?V8
        MOV     R3,?V9
        LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
//  938       gp_PopulateField( ( uint8* )&payload->sinkNwkAddr, &pCmd->pData, sizeof( payload->sinkNwkAddr ) );
        ; Setup parameters for call to function gp_PopulateField
        MOV     R1,#0x2
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
//  939       
//  940       // Populate Grp Address Ivalid
//  941       payload->sinkGroupID = 0xFFFF;
        MOV     DPL,?V4
        MOV     DPH,?V5
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        SJMP    ??gp_ZclPairingParse_5
//  942     }
//  943     // Communication Mode 0b01 or 0b10
//  944     else if ( ( GP_IS_COMMUNICATION_MODE_GRPCAST_DGROUP_ID( payload->options ) ) || ( GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( payload->options ) ) )
??gp_ZclPairingParse_4:
        MOV     A,#0x1
        XRL     A,R0
        JZ      ??gp_ZclPairingParse_6
        MOV     A,#0x2
        XRL     A,R0
        JNZ     ??gp_ZclPairingParse_5
//  945     {
//  946       // Populate Sink Addesses Invalid
//  947       osal_memset ( &payload->sinkIEEE, 0xFF, Z_EXTADDR_LEN );
??gp_ZclPairingParse_6:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#-0x1
        MOV     R2,?V8
        MOV     R3,?V9
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  948       payload->sinkNwkAddr = 0xFFFF;
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  949       
//  950       // Populate Grp Address
//  951       gp_PopulateField( ( uint8* )&payload->sinkGroupID, &pCmd->pData, sizeof( payload->sinkGroupID ) );
        ; Setup parameters for call to function gp_PopulateField
        MOV     R1,#0x2
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     R2,?V4
        MOV     R3,?V5
        LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
//  952     }
//  953   }
//  954   else
//  955   {
//  956     uint8 i;
//  957     uint8 status;
//  958     uint8 currEntry[PROXY_TBL_ENTRY_LEN] = {0};
//  959       
//  960     // Remove
//  961     for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
//  962     {
//  963       status = gp_getProxyTableByIndex( ( ZCD_NV_PROXY_TABLE_START + i ), currEntry );
//  964 
//  965       if ( status == NV_OPER_FAILED )
//  966       {
//  967         // FAIL
//  968         return;
//  969       }
//  970     
//  971       // if the entry is empty
//  972       if ( status == NV_INVALID_DATA )
//  973       {
//  974         // Look for the next entry
//  975         continue;
//  976       }
//  977       
//  978       if( GP_IS_APPLICATION_ID_GPD( payload->options ) )
//  979       {
//  980         if ( osal_memcmp( &currEntry[PROXY_TBL_ENTRY_GPD_ID + 4], &payload->gpdId, sizeof ( uint32 ) ) )
//  981         {
//  982           // Remove this GPD entry
//  983           osal_memset( currEntry, 0xFF, PROXY_TBL_ENTRY_LEN );
//  984         }
//  985       }
//  986       else if( GP_IS_APPLICATION_ID_IEEE( payload->options ) )
//  987       {   
//  988         if ( osal_memcmp( &currEntry[PROXY_TBL_ENTRY_GPD_ID ], payload->sinkIEEE, Z_EXTADDR_LEN ) )
//  989         {
//  990           // Remove this GPD entry
//  991           osal_memset( currEntry, 0xFF, PROXY_TBL_ENTRY_LEN );
//  992         }
//  993       }
//  994     }
//  995     return;
//  996   }
//  997   
//  998   // If Add Sink bit is 0b1
//  999   if ( GP_ADD_SINK( payload->options ) )
??gp_ZclPairingParse_5:
        MOV     A,R6
        ADD     A,#0x34
        MOV     ?V10,A
        CLR     A
        ADDC    A,R7
        MOV     ?V11,A
        MOV     A,R6
        ADD     A,#0x32
        MOV     ?V8,A
        CLR     A
        ADDC    A,R7
        MOV     ?V9,A
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_32:
        MOV     A,R6
        ADD     A,#0x1d
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL   ?L_MOV_X
        MOV     A,?V4
        ANL     A,#0x8
        JZ      $+5
        LJMP    ??gp_ZclPairingParse_7 & 0xFFFF
// 1000   {
// 1001     // Populate Device ID
// 1002     gp_PopulateField( ( uint8* )&payload->deviceId, &pCmd->pData, sizeof( payload->deviceId ) );
// 1003     
// 1004     if ( GP_SEC_COUNTER( payload->options ) )
// 1005     {
// 1006       // Populate GPD security frame counter
// 1007       gp_PopulateField( ( uint8* )&payload->gpdSecCounter, &pCmd->pData, sizeof( payload->gpdSecCounter ) );
// 1008     }
// 1009     else
// 1010     {
// 1011       payload->gpdSecCounter = 0xFFFFFFFF;
// 1012     }
// 1013     
// 1014     if ( GP_SEC_KEY ( payload->options ) )
// 1015     {
// 1016       gp_PopulateField( ( uint8* )&payload->gpdKey, &pCmd->pData, SEC_KEY_LEN );
// 1017     }
// 1018     else
// 1019     {
// 1020       osal_memset ( &payload->gpdKey, 0xFF, SEC_KEY_LEN );
// 1021     }
// 1022     
// 1023     if ( GP_ALIAS ( payload->options ) )
// 1024     {
// 1025       gp_PopulateField( ( uint8* )&payload->assignedAlias, &pCmd->pData, sizeof( payload->assignedAlias ) );
// 1026     }
// 1027     else
// 1028     {
// 1029       payload->assignedAlias = 0xFFFF;
// 1030     }
// 1031     if ( GP_FORWARDING_RADIUS ( payload->options ) )
// 1032     {
// 1033       gp_PopulateField( ( uint8* )&payload->forwardingRadius, &pCmd->pData, sizeof( payload->forwardingRadius ) );
// 1034     }
// 1035     else
// 1036     {
// 1037       payload->forwardingRadius = 0xFF;
// 1038     }
// 1039   }
// 1040   else
// 1041   {
// 1042     // Ivalidate every field
// 1043     payload->deviceId = 0xFF;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x1
        MOVX    @DPTR,A
// 1044     payload->gpdSecCounter = 0xFFFFFFFF;
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ??Subroutine33_0 & 0xFFFF
// 1045     payload->assignedAlias = 0xFFFF;
??CrossCallReturnLabel_50:
        MOV     DPL,?V8
        MOV     DPH,?V9
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1046     payload->forwardingRadius = 0xFF;
        MOV     DPL,?V10
        MOV     DPH,?V11
??gp_ZclPairingParse_8:
        MOVX    @DPTR,A
// 1047   }
// 1048 }
??gp_ZclPairingParse_9:
        MOV     A,#0x40
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI CFA_XSP16 add(XSP16, 84)
??gp_ZclPairingParse_2:
        MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2`
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x40
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        MOV     ?V0,#0x0
??gp_ZclPairingParse_10:
        ; Setup parameters for call to function gp_getProxyTableByIndex
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,?V0
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_79:
        LCALL   `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
        MOV     A,R1
        MOV     R0,A
        MOV     A,#0xa
        XRL     A,R0
        JZ      ??gp_ZclPairingParse_9
        MOV     A,#0xd
        XRL     A,R0
        JZ      ??gp_ZclPairingParse_11
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     A,?V4
        ANL     A,#0x7
        MOV     R0,A
        JNZ     ??gp_ZclPairingParse_12
        ; Setup parameters for call to function osal_memcmp
        MOV     ?V4,?V10
        MOV     ?V5,?V11
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 87)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     R3,#0x0
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 84)
        MOV     A,R1
        JNZ     ??gp_ZclPairingParse_13
        SJMP    ??gp_ZclPairingParse_11
??gp_ZclPairingParse_12:
        MOV     A,#0x2
        XRL     A,R0
        JNZ     ??gp_ZclPairingParse_11
        ; Setup parameters for call to function osal_memcmp
        MOV     ?V4,?V8
        MOV     ?V5,?V9
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 87)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     R3,#0x0
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 84)
        MOV     A,R1
        JZ      ??gp_ZclPairingParse_11
??gp_ZclPairingParse_13:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x40
        MOV     R5,#0x0
        MOV     R1,#-0x1
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
??gp_ZclPairingParse_11:
        INC     ?V0
        MOV     A,?V0
        CLR     C
        SUBB    A,#0x6
        JNC     $+5
        LJMP    ??gp_ZclPairingParse_10 & 0xFFFF
        LJMP    ??gp_ZclPairingParse_9 & 0xFFFF
??gp_ZclPairingParse_7:
        ; Setup parameters for call to function gp_PopulateField
        MOV     R1,#0x1
        MOV     R4,?V0
        MOV     R5,?V1
        LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     A,?V5
        ANL     A,#0x40
        JZ      ??gp_ZclPairingParse_14
        ; Setup parameters for call to function gp_PopulateField
        MOV     R1,#0x4
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
        SJMP    ??CrossCallReturnLabel_53
??gp_ZclPairingParse_14:
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_53:
        MOV     A,R6
        ADD     A,#0x22
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL   ?L_MOV_X
        MOV     A,?V5
        ANL     A,#0x80
        JZ      ??gp_ZclPairingParse_15
        ; Setup parameters for call to function gp_PopulateField
        MOV     R1,#0x10
        MOV     R4,?V0
        MOV     R5,?V1
        LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
        SJMP    ??gp_ZclPairingParse_16
??gp_ZclPairingParse_15:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#-0x1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
??gp_ZclPairingParse_16:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_10000
        MOV     R0,#?V4
        LCALL   ?L_AND_X
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_67:
        JZ      ??gp_ZclPairingParse_17
        ; Setup parameters for call to function gp_PopulateField
        MOV     R1,#0x2
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     R2,?V8
        MOV     R3,?V9
        LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
        SJMP    ??gp_ZclPairingParse_18
??gp_ZclPairingParse_17:
        MOV     DPL,?V8
        MOV     DPH,?V9
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
??gp_ZclPairingParse_18:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_20000
        MOV     R0,#?V4
        LCALL   ?L_AND_X
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_68:
        JZ      ??gp_ZclPairingParse_19
        ; Setup parameters for call to function gp_PopulateField
        MOV     R1,#0x1
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     R2,?V10
        MOV     R3,?V11
        LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
        LJMP    ??gp_ZclPairingParse_9 & 0xFFFF
??gp_ZclPairingParse_19:
        MOV     DPL,?V10
        MOV     DPH,?V11
        MOV     A,#-0x1
        LJMP    ??gp_ZclPairingParse_8 & 0xFFFF
          CFI EndBlock cfiBlock83

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond84 Using cfiCommon0
          CFI Function gp_ZclPairingParse
          CFI Conditional ??CrossCallReturnLabel_67
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 84)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function gp_ZclPairingParse
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-2
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 84)
          CFI Block cfiPicker86 Using cfiCommon1
          CFI (cfiPicker86) NoFunction
          CFI (cfiPicker86) Picker
        MOV     A,?V4
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiPicker86
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine36_0:
          CFI Block cfiCond87 Using cfiCommon0
          CFI Function GP_DataInd
          CFI Conditional ??CrossCallReturnLabel_66
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 72)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function gp_ZclPairingParse
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond88) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond88) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond88) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-2
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 84)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function gp_ZclPairingParse
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond89) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 84)
          CFI Block cfiPicker90 Using cfiCommon1
          CFI (cfiPicker90) NoFunction
          CFI (cfiPicker90) Picker
        ORL     A,?V5
        ORL     A,?V6
        ORL     A,?V7
        RET
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiPicker90

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond91 Using cfiCommon0
          CFI Function gp_ZclPairingParse
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 84)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function gp_ZclPairingParse
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 84)
          CFI Block cfiPicker93 Using cfiCommon1
          CFI (cfiPicker93) NoFunction
          CFI (cfiPicker93) Picker
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V4
        RET
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiPicker93
// 1049 
// 1050  /*********************************************************************
// 1051  * @fn          gp_ZclProxyTableReqParse
// 1052  *
// 1053  * @brief       Parse the proxy table request data message payload
// 1054  *
// 1055  * @param       
// 1056  *
// 1057  * @return      
// 1058  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1059 static void gp_ZclProxyTableReqParse( zclGpProxyTableRequest_t* pCmd, gpProxyTableReqCmd_t* payload )
gp_ZclProxyTableReqParse:
          CFI Block cfiBlock94 Using cfiCommon0
          CFI Function gp_ZclProxyTableReqParse
        CODE
// 1060 {
        FUNCALL gp_ZclProxyTableReqParse, gp_PopulateField
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_ZclProxyTableReqParse, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_ZclProxyTableReqParse, gp_PopulateField
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_ZclProxyTableReqParse, gp_PopulateField
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_ZclProxyTableReqParse, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_ZclProxyTableReqParse, gp_PopulateField
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
// 1061 
// 1062   payload->options =  pCmd->options;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    @DPTR,A
// 1063     
// 1064   // If Request type bitfield is 0b00
// 1065   if( GP_IS_REQ_TYP_GPD( payload->options ) )
        RRC     A
        RRC     A
        RRC     A
        ANL     A,#0x1f
        ANL     A,#0x3
        MOV     R0,A
        MOV     A,R4
        ADD     A,#0xe
        MOV     ?V4,A
        CLR     A
        ADDC    A,R5
        MOV     ?V5,A
        MOV     A,R4
        ADD     A,#0xd
        MOV     ?V2,A
        CLR     A
        ADDC    A,R5
        MOV     ?V3,A
        MOV     A,R4
        ADD     A,#0x5
        MOV     ?V0,A
        CLR     A
        ADDC    A,R5
        MOV     ?V1,A
        INC     DPTR
        MOV     A,R2
        ADD     A,#0x3
        MOV     R6,A
        CLR     A
        ADDC    A,R3
        MOV     R7,A
        MOV     A,R0
        JNZ     ??gp_ZclProxyTableReqParse_0
// 1066   {  
// 1067     // If Application Id bitfield is 0b000
// 1068     if( GP_IS_APPLICATION_ID_GPD( payload->options ) )
        MOV     A,#0x7
        ANL     A,R1
        MOV     R0,A
        JNZ     ??gp_ZclProxyTableReqParse_1
// 1069     {        
// 1070       // Populate GPD ID
// 1071       gp_PopulateField( ( uint8* )&payload->gpdId, &pCmd->pData, sizeof( payload->gpdId ) );
        ; Setup parameters for call to function gp_PopulateField
        MOV     R1,#0x4
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
// 1072     
// 1073       // Populate GPD IEEE Invalid
// 1074       osal_memset ( &payload->gpdIEEE, 0xFF, Z_EXTADDR_LEN );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#-0x1
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1075       // Populate EP Invalid
// 1076       payload->ep = 0xFF;
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOV     A,#-0x1
        MOVX    @DPTR,A
        SJMP    ??gp_ZclProxyTableReqParse_2
// 1077     }
// 1078     // If Application Id bitfield is 0b010
// 1079     else if( GP_IS_APPLICATION_ID_IEEE( payload->options ) )
??gp_ZclProxyTableReqParse_1:
        MOV     A,#0x2
        XRL     A,R0
        JNZ     ??gp_ZclProxyTableReqParse_2
// 1080     {
// 1081       // Populate GPD ID Invalid
// 1082       payload->gpdId = 0xFFFFFFFF;
        LCALL   ?Subroutine5 & 0xFFFF
// 1083     
// 1084       // Populate GPD IEEE
// 1085       gp_PopulateField( ( uint8* )&payload->gpdIEEE, &pCmd->pData, Z_EXTADDR_LEN );
??CrossCallReturnLabel_1:
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
// 1086       // Populate EP
// 1087       gp_PopulateField( ( uint8* )&payload->ep, &pCmd->pData, sizeof( payload->ep ) );
        ; Setup parameters for call to function gp_PopulateField
        MOV     R1,#0x1
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
// 1088     }
// 1089     // Populate Index Invalid
// 1090     payload->index = 0xFF;
??gp_ZclProxyTableReqParse_2:
        MOV     DPL,?V4
        MOV     DPH,?V5
        MOV     A,#-0x1
        MOVX    @DPTR,A
        SJMP    ??gp_ZclProxyTableReqParse_3
// 1091   }
// 1092   // If Request type bitfield is 0b01
// 1093   else if( GP_IS_REQ_TPY_INDEX( payload->options ) )
??gp_ZclProxyTableReqParse_0:
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??gp_ZclProxyTableReqParse_3
// 1094   {
// 1095     // Populate GPD ID Invalid
// 1096     payload->gpdId = 0xFFFFFFFF;
        LCALL   ?Subroutine6 & 0xFFFF
// 1097     
// 1098     // Populate GPD IEEE Invalid
// 1099     osal_memset ( &payload->gpdIEEE, 0xFF, Z_EXTADDR_LEN );
??CrossCallReturnLabel_54:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,A
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1100     
// 1101     // Populate EP Invalid
// 1102     payload->ep = 0xFF;
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOV     A,#-0x1
        MOVX    @DPTR,A
// 1103     
// 1104     // Populate index
// 1105     gp_PopulateField( ( uint8* )&payload->index, &pCmd->pData, sizeof( payload->index ) );
        ; Setup parameters for call to function gp_PopulateField
        MOV     R1,#0x1
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V4
        MOV     R3,?V5
        LCALL   `??gp_PopulateField::?relay`; Banked call to: gp_PopulateField
// 1106   }
// 1107 
// 1108 }
??gp_ZclProxyTableReqParse_3:
        LJMP    ??Subroutine34_0 & 0xFFFF
          CFI EndBlock cfiBlock94

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond95 Using cfiCommon0
          CFI Function gp_ZclPairingParse
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 84)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function gp_ZclProxyTableReqParse
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-2
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker97 Using cfiCommon1
          CFI (cfiPicker97) NoFunction
          CFI (cfiPicker97) Picker
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function gp_PopulateField
        ; Setup parameters for call to function gp_PopulateField
        MOV     R1,#0x8
        RET
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiPicker97
// 1109 
// 1110  /*********************************************************************
// 1111  * @fn          gp_PopulateField
// 1112  *
// 1113  * @brief       General function fill the proxy table vector item
// 1114  *
// 1115  * @param       
// 1116  *
// 1117  * @return      
// 1118  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1119 void gp_PopulateField( uint8* pField, uint8** pData, uint8 size )
gp_PopulateField:
          CFI Block cfiBlock98 Using cfiCommon0
          CFI Function gp_PopulateField
        CODE
// 1120 {
        FUNCALL gp_PopulateField, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_PopulateField, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        MOV     A,#-0x11
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
        ; Saved register size: 17
        ; Auto size: 0
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     ?V8,R1
// 1121   switch ( size )
        MOV     A,R1
        DEC     A
        JZ      ??gp_PopulateField_0
        DEC     A
        JZ      ??gp_PopulateField_1
        ADD     A,#-0x2
        JZ      ??gp_PopulateField_2
        ADD     A,#-0x4
        JNZ     $+5
        LJMP    ??gp_PopulateField_3 & 0xFFFF
        ADD     A,#-0x8
        JNZ     $+5
        LJMP    ??gp_PopulateField_4 & 0xFFFF
        LJMP    ??gp_PopulateField_5 & 0xFFFF
// 1122   {
// 1123     case ( sizeof( uint8 ) ):
// 1124       gp_u8CastPointer( pField, *pData );
??gp_PopulateField_0:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_97:
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ORL     A,R0
        SJMP    ??gp_PopulateField_6
// 1125       break;
// 1126     case ( sizeof( uint16 ) ):
// 1127       gp_u16CastPointer( pField, *pData );
??gp_PopulateField_1:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_12:
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPH,R3
        MOV     DPL,R2
        MOVX    A,@DPTR
        ORL     A,R4
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        ORL     A,R1
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
??gp_PopulateField_6:
        MOVX    @DPTR,A
// 1128       break;
        LJMP    ??gp_PopulateField_5 & 0xFFFF
// 1129     case ( sizeof( uint32 ) ):
// 1130       gp_u32CastPointer( pField, *pData );
??gp_PopulateField_2:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_ff
        MOV     R0,#?V0
        LCALL   ?L_AND_X
        MOV     DPH,R3
        MOV     DPL,R2
        MOV     R0,#?V0
        LCALL   ?L_IOR_X
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0
        LCALL   ?L_MOV_TO_X
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     A,#0x8
        MOV     R0,#?V4
        LCALL   ?L_SHL
        MOV     DPTR,#__Constant_ff00
        MOV     R0,#?V4
        LCALL   ?L_AND_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?L_IOR
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0
        LCALL   ?L_MOV_TO_X
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     A,#0x10
        MOV     R0,#?V4
        LCALL   ?L_SHL
        MOV     DPTR,#__Constant_ff0000
        MOV     R0,#?V4
        LCALL   ?L_AND_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?L_IOR
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0
        LCALL   ?L_MOV_TO_X
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     A,#0x18
        MOV     R0,#?V4
        LCALL   ?L_SHL
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?L_IOR
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0
        LCALL   ?L_MOV_TO_X
// 1131       break;
        SJMP    ??gp_PopulateField_5
// 1132     case ( Z_EXTADDR_LEN ):
// 1133       osal_memcpy( pField, *pData, Z_EXTADDR_LEN );
??gp_PopulateField_3:
        ; Setup parameters for call to function osal_memcpy
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,#0x8
        SJMP    ??gp_PopulateField_7
          CFI CFA_XSP16 add(XSP16, 17)
// 1134       break;
// 1135     case ( SEC_KEY_LEN ):
// 1136       osal_memcpy( pField, *pData, SEC_KEY_LEN );
??gp_PopulateField_4:
        ; Setup parameters for call to function osal_memcpy
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,#0x10
??gp_PopulateField_7:
        MOV     R5,#0x0
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
// 1137       break;
// 1138   }
// 1139   *pData += size;
??gp_PopulateField_5:
        MOV     R0,?V8
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine38_0 & 0xFFFF
// 1140 }
??CrossCallReturnLabel_72:
        MOV     R7,#0x9
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock98

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond99 Using cfiCommon0
          CFI Function gp_PopulateField
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function gp_PopulateField
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-2
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker101 Using cfiCommon1
          CFI (cfiPicker101) NoFunction
          CFI (cfiPicker101) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiPicker101

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond102 Using cfiCommon0
          CFI Function zclGp_ManteinanceIndParse
          CFI Conditional ??CrossCallReturnLabel_76
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function zclGp_ManteinanceIndParse
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker104 Using cfiCommon1
          CFI (cfiPicker104) NoFunction
          CFI (cfiPicker104) Picker
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiPicker104
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine37_0:
          CFI Block cfiCond105 Using cfiCommon0
          CFI Function zclGp_DataIndParse
          CFI Conditional ??CrossCallReturnLabel_74
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function zclGp_DataIndParse
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond106) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond106) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond106) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function zclGp_ManteinanceIndParse
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-2
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function zclGp_ManteinanceIndParse
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-2
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker109 Using cfiCommon1
          CFI (cfiPicker109) NoFunction
          CFI (cfiPicker109) Picker
        MOV     DPH,A
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiPicker109
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine38_0:
          CFI Block cfiCond110 Using cfiCommon0
          CFI Function zclGp_ManteinanceIndParse
          CFI Conditional ??CrossCallReturnLabel_69
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function zclGp_GpResponseCommandCB
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond111) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond111) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond111) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond111) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond111) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond111) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond111) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-2
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 97)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function zclGp_GpProxyCommissioningModeCB
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-2
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function gp_PopulateField
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-2
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function gp_getProxyTableByGpId
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-2
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function zclGp_DataIndParse
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond115) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond115) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond115) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond115) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond115) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-2
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function zclGp_DataIndParse
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond116) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-2
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function zclGp_ManteinanceIndParse
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-2
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function zclGp_ManteinanceIndParse
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-2
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker119 Using cfiCommon1
          CFI (cfiPicker119) NoFunction
          CFI (cfiPicker119) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiPicker119
// 1141 
// 1142  /*********************************************************************
// 1143  * @fn          gp_ProxyTblInit
// 1144  *
// 1145  * @brief       General function to init the NV items for proxy table
// 1146  *
// 1147  * @param       
// 1148  *
// 1149  * @return      
// 1150  */
// 1151 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1152 uint8 gp_ProxyTblInit( uint8 resetTable )
gp_ProxyTblInit:
          CFI Block cfiBlock120 Using cfiCommon0
          CFI Function gp_ProxyTblInit
        CODE
// 1153 {
        FUNCALL gp_ProxyTblInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_ProxyTblInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_ProxyTblInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 80, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 80, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 64
        MOV     A,#-0x40
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
        MOV     ?V1,R1
// 1154   uint8 i;
// 1155   uint8 status;
// 1156   uint8 emptyEntry[PROXY_TBL_ENTRY_LEN];
// 1157   
// 1158   osal_memset( emptyEntry, 0xFF, PROXY_TBL_ENTRY_LEN );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x40
        MOV     R5,#0x0
        MOV     R1,#-0x1
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1159   
// 1160   for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
        MOV     ?V0,#0x0
// 1161   {
// 1162     status = osal_nv_item_init( ( ZCD_NV_PROXY_TABLE_START + i ),
// 1163                                        PROXY_TBL_ENTRY_LEN, &emptyEntry );
??gp_ProxyTblInit_0:
        MOV     A,?V0
        ADD     A,#0x10
        MOV     R6,A
        CLR     A
        ADDC    A,#0x3
        MOV     R7,A
        ; Setup parameters for call to function osal_nv_item_init
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 78)
        MOV     R4,#0x40
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
        MOV     A,R1
        MOV     R1,A
// 1164     
// 1165     if ( ( status != SUCCESS ) && ( status != NV_ITEM_UNINIT ) )
        JZ      ??gp_ProxyTblInit_1
        MOV     A,#0x9
        XRL     A,R1
        JNZ     ??gp_ProxyTblInit_2
        SJMP    ??gp_ProxyTblInit_3
??gp_ProxyTblInit_1:
        MOV     A,#0x1
        XRL     A,?V1
        JNZ     ??gp_ProxyTblInit_3
// 1166     {
// 1167       return status;
// 1168     }
// 1169     if ( ( status == SUCCESS ) && ( resetTable == TRUE ) )
// 1170     {
// 1171       status = osal_nv_write( ( ZCD_NV_PROXY_TABLE_START + i ), 0,
// 1172                                     PROXY_TBL_ENTRY_LEN, &emptyEntry );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 78)
        MOV     ?V2,#0x40
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 80)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
        MOV     A,R1
        MOV     R1,A
// 1173     }
// 1174   }
??gp_ProxyTblInit_3:
        INC     ?V0
        MOV     A,?V0
        CLR     C
        SUBB    A,#0x6
        JC      ??gp_ProxyTblInit_0
// 1175   return status;
??gp_ProxyTblInit_2:
        MOV     A,#0x40
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock120
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
// 1176 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock121 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock121
// 1177 
// 1178 
// 1179  /*********************************************************************
// 1180  * @fn          gp_getProxyTableByGpId
// 1181  *
// 1182  * @brief       General function to get proxy table entry by gpd_ID (GP Src ID or Extended Adddress)
// 1183  *
// 1184  * @param       gpd_ID  - address to look for in the table
// 1185  *              pEntry  - buffer in which the entry of the table will be copied
// 1186  *
// 1187  * @return      
// 1188  */
// 1189 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1190 uint8 gp_getProxyTableByGpId(gpd_ID_t *gpd_ID, uint8 *pEntry,uint16 *NvProxyTableIndex)
gp_getProxyTableByGpId:
          CFI Block cfiBlock122 Using cfiCommon0
          CFI Function gp_getProxyTableByGpId
        CODE
// 1191 {
        FUNCALL gp_getProxyTableByGpId, gp_getProxyTableByIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_getProxyTableByGpId, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_getProxyTableByGpId, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        MOV     A,#-0x13
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 0
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     ?V4,R4
        MOV     ?V5,R5
// 1192   uint8 i;
// 1193   uint8 status;
// 1194 
// 1195   if((pEntry == NULL) ||  (gpd_ID == NULL))
        MOV     A,R4
        ORL     A,?V5
        JNZ     $+5
        LJMP    ??gp_getProxyTableByGpId_0 & 0xFFFF
        MOV     A,R2
        ORL     A,?V7
        JNZ     $+5
        LJMP    ??gp_getProxyTableByGpId_0 & 0xFFFF
// 1196   {
// 1197     return ZInvalidParameter;
// 1198   }     
// 1199   
// 1200 
// 1201   for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
        MOV     R6,#0x0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0,R1
        MOV     ?V1,R2
        MOV     ?V2,R6
// 1202   {
// 1203     status = gp_getProxyTableByIndex( ( ZCD_NV_PROXY_TABLE_START + i ), pEntry );
??gp_getProxyTableByGpId_1:
        ; Setup parameters for call to function gp_getProxyTableByIndex
        MOV     R4,?V4
        MOV     R5,?V5
        MOV     A,R6
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_80:
        LCALL   `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
        MOV     A,R1
        MOV     R0,A
// 1204 
// 1205     if ( status == NV_OPER_FAILED )
        MOV     A,#0xa
        XRL     A,R0
        JNZ     ??gp_getProxyTableByGpId_2
// 1206     {
// 1207       // FAIL
// 1208       return ZFailure;
        MOV     R1,#0x1
        LJMP    ??gp_getProxyTableByGpId_3 & 0xFFFF
// 1209     }
// 1210     
// 1211     // if the entry is empty
// 1212     if ( status == NV_INVALID_DATA )
??gp_getProxyTableByGpId_2:
        MOV     A,#0xd
        XRL     A,R0
        JZ      ??gp_getProxyTableByGpId_4
// 1213     {
// 1214       continue;
// 1215     }
// 1216 
// 1217     //Check that App ID is the same
// 1218 
// 1219     if ( PROXY_TBL_COMP_APPLICTION_ID( gpd_ID->AppID, pEntry[PROXY_TBL_ENTRY_OPT] ) )
        MOV     DPL,?V6
        MOV     DPH,?V7
        MOVX    A,@DPTR
        MOV     R4,A
        ANL     A,#0x7
        MOV     R2,A
        MOV     DPL,?V4
        MOV     DPH,?V5
        MOVX    A,@DPTR
        ANL     A,#0x7
        XRL     A,R2
        JNZ     ??gp_getProxyTableByGpId_5
        CLR     A
??gp_getProxyTableByGpId_5:
        JNZ     ??gp_getProxyTableByGpId_4
// 1220     {
// 1221       if ( gpd_ID->AppID == GP_OPT_APP_ID_GPD )
        MOV     A,R4
        JNZ     ??gp_getProxyTableByGpId_6
// 1222       {
// 1223         if ( osal_memcmp( &gpd_ID->GPDId.SrcID, &pEntry[PROXY_TBL_ENTRY_GPD_ID + 4], sizeof ( uint32 ) ) )
        ; Setup parameters for call to function osal_memcmp
        MOV     A,?V4
        ADD     A,#0x6
        MOV     ?V8,A
        CLR     A
        ADDC    A,?V5
        MOV     ?V9,A
        MOV     ?V10,#0x0
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R1,?V0
        MOV     R2,?V1
        MOV     R3,?V2
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        JNZ     ??gp_getProxyTableByGpId_7
        SJMP    ??gp_getProxyTableByGpId_4
// 1224         {
// 1225           // Entry found
// 1226           break;
// 1227         }
// 1228       }
// 1229 
// 1230       else if ( gpd_ID->AppID == GP_OPT_APP_ID_IEEE )
??gp_getProxyTableByGpId_6:
        MOV     A,#0x2
        XRL     A,R4
        JNZ     ??gp_getProxyTableByGpId_4
// 1231       {
// 1232         if ( osal_memcmp( &gpd_ID->GPDId.GPDExtAddr, &pEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN ) )
        ; Setup parameters for call to function osal_memcmp
        INC     DPTR
        INC     DPTR
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V8,R1
        MOV     ?V9,R2
        MOV     ?V10,#0x0
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,?V0
        MOV     R2,?V1
        MOV     R3,?V2
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        JNZ     ??gp_getProxyTableByGpId_7
// 1233         {
// 1234           // Entry found
// 1235           break;
// 1236         }
// 1237       }
// 1238     }
// 1239     else
// 1240     {
// 1241       continue;
// 1242     }
// 1243   }
??gp_getProxyTableByGpId_4:
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x6
        JNC     $+5
        LJMP    ??gp_getProxyTableByGpId_1 & 0xFFFF
// 1244 
// 1245   if(i <= GPP_MAX_PROXY_TABLE_ENTRIES)
??gp_getProxyTableByGpId_7:
        MOV     A,R6
        CLR     C
        SUBB    A,#0x6
        JNC     ??gp_getProxyTableByGpId_0
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
// 1246   {
// 1247     if(NvProxyTableIndex != NULL)
??CrossCallReturnLabel_13:
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??CrossCallReturnLabel_73
// 1248     {
// 1249       *NvProxyTableIndex = ZCD_NV_PROXY_TABLE_START + i;
        MOV     A,R6
        ADD     A,#0x10
        MOV     R0,A
        CLR     A
        ADDC    A,#0x3
        MOV     R1,A
        LCALL   ??Subroutine38_0 & 0xFFFF
// 1250     }
// 1251     return ZSuccess;
??CrossCallReturnLabel_73:
        MOV     R1,#0x0
        SJMP    ??gp_getProxyTableByGpId_3
// 1252   }
// 1253     
// 1254   return ZInvalidParameter;
??gp_getProxyTableByGpId_0:
        MOV     R1,#0x2
??gp_getProxyTableByGpId_3:
        MOV     R7,#0xb
        LJMP    ?BANKED_LEAVE_XDATA
// 1255 }
          CFI EndBlock cfiBlock122

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond123 Using cfiCommon0
          CFI Function zclGp_GpProxyTableReqCB
          CFI Conditional ??CrossCallReturnLabel_81
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 100)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function zclGp_GpProxyTableReqCB
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-2
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 102)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function zclGp_GpProxyTableReqCB
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-2
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 102)
          CFI Block cfiPicker126 Using cfiCommon1
          CFI (cfiPicker126) NoFunction
          CFI (cfiPicker126) Picker
        MOV     A,?V3
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiPicker126
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine39_0:
          CFI Block cfiCond127 Using cfiCommon0
          CFI Function zclGp_DataIndParse
          CFI Conditional ??CrossCallReturnLabel_78
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function gp_ZclPairingParse
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond128) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond128) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond128) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond128) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond128) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond128) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-2
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 84)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function gp_getProxyTableByGpId
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-2
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function zclGp_GpProxyTableReqCB
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-2
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 100)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function zclGp_GpProxyTableReqCB
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-2
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 102)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function zclGp_GpProxyTableReqCB
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-2
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 102)
          CFI Block cfiPicker133 Using cfiCommon1
          CFI (cfiPicker133) NoFunction
          CFI (cfiPicker133) Picker
        ADD     A,#0x10
        MOV     R2,A
        CLR     A
        ADDC    A,#0x3
        MOV     R3,A
        RET
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiPicker133

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond134 Using cfiCommon0
          CFI Function gp_PopulateField
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function gp_getProxyTableByGpId
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond135) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond135) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-2
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker136 Using cfiCommon1
          CFI (cfiPicker136) NoFunction
          CFI (cfiPicker136) Picker
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV     DPL,R0
        MOV     DPH,R1
        RET
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiPicker136
// 1256 
// 1257  /*********************************************************************
// 1258  * @fn          gp_SecurityOperationProxy
// 1259  *
// 1260  * @brief       Performs Security Operations according to Proxy
// 1261  *
// 1262  * @param       ind - pointer to gp data indication
// 1263  * @param       pFrameCounter 
// 1264  * @param       pKeyType 
// 1265  * @param       pkey Key to be used to decript the packet (if applies)
// 1266  *
// 1267  * @return      GP_SEC_RSP status
// 1268  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1269 uint8 gp_SecurityOperationProxy( gp_DataInd_t* pInd, uint8* pKeyType, uint8* pKey)
gp_SecurityOperationProxy:
          CFI Block cfiBlock137 Using cfiCommon0
          CFI Function gp_SecurityOperationProxy
        CODE
// 1270 {
        FUNCALL gp_SecurityOperationProxy, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 93, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_SecurityOperationProxy, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 96, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 96, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_SecurityOperationProxy, gp_getProxyTableByGpId
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 95, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 95, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_SecurityOperationProxy, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 96, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 96, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_SecurityOperationProxy, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 96, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 96, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_SecurityOperationProxy, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 93, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_SecurityOperationProxy, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 96, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 96, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 75
        MOV     A,#-0x4b
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 93)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V8,R4
        MOV     ?V9,R5
// 1271   uint8    currEntry[PROXY_TBL_ENTRY_LEN] = {0};
        MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_3`
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x40
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 1272   uint8    status;
// 1273   uint32   SecFrameCounter = 0;
// 1274   uint8    securityCheckFail = FALSE;
// 1275   uint8    endpointCheckFail = FALSE;
// 1276   uint16   NvProxyTableIndex = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1277   gpd_ID_t gpd_ID;
// 1278   
// 1279   
// 1280   if((pKeyType == NULL) || (pKey == NULL) || (pInd == NULL))
        MOV     A,?V8
        ORL     A,?V9
        JZ      ??gp_SecurityOperationProxy_0
        MOV     A,#0x5d
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??gp_SecurityOperationProxy_0
        MOV     A,R6
        ORL     A,R7
        JNZ     ??gp_SecurityOperationProxy_1
// 1281   {
// 1282     return GP_SEC_RSP_ERROR;
??gp_SecurityOperationProxy_0:
        MOV     R1,#0x4
        LJMP    ??gp_SecurityOperationProxy_2 & 0xFFFF
// 1283   }
// 1284   *pKeyType = 0;
??gp_SecurityOperationProxy_1:
        MOV     DPL,?V8
        MOV     DPH,?V9
        CLR     A
        MOVX    @DPTR,A
// 1285   osal_memset(pKey,0,SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,A
        MOV     R1,A
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1286   
// 1287   gpd_ID.AppID = pInd->appID;
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_92:
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1288   
// 1289   if(gpd_ID.AppID == GP_APP_ID_DEFAULT)
        JNZ     ??gp_SecurityOperationProxy_3
// 1290   {
// 1291     gpd_ID.GPDId.SrcID = pInd->SrcId;
        LCALL   ?Subroutine22 & 0xFFFF
// 1292   }
??CrossCallReturnLabel_22:
        LCALL   ?XLOAD_R0123
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R0123
        SJMP    ??gp_SecurityOperationProxy_4
// 1293   else
// 1294   {
// 1295     osal_memcpy(gpd_ID.GPDId.GPDExtAddr,pInd->srcAddr.addr.extAddr,Z_EXTADDR_LEN);
??gp_SecurityOperationProxy_3:
        ; Setup parameters for call to function osal_memcpy
        LCALL   ?Subroutine20 & 0xFFFF
// 1296   }
??CrossCallReturnLabel_18:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 96)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 93)
// 1297   
// 1298   status = gp_getProxyTableByGpId(&gpd_ID,currEntry,&NvProxyTableIndex);
??gp_SecurityOperationProxy_4:
        ; Setup parameters for call to function gp_getProxyTableByGpId
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 95)
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??gp_getProxyTableByGpId::?relay`; Banked call to: gp_getProxyTableByGpId
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 93)
        MOV     A,R1
        MOV     R0,A
// 1299   
// 1300   //Not found
// 1301   if(status == ZInvalidParameter)
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV     A,#0x2
        XRL     A,R0
        JNZ     ??gp_SecurityOperationProxy_5
// 1302   {
// 1303     //Section A.3.5.2.1 if in commissioning mode and GPDF from proxy that do not 
// 1304     //have entry, then drop frame
// 1305     if(zgGP_InCommissioningMode == FALSE)
        MOV     DPTR,#zgGP_InCommissioningMode
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??gp_SecurityOperationProxy_6 & 0xFFFF
// 1306     {
// 1307       return GP_SEC_RSP_DROP_FRAME;
// 1308     }
// 1309     if(pInd->GPDFKeyType == 0)
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??gp_SecurityOperationProxy_7 & 0xFFFF
// 1310     {
// 1311       //If there is no shared key, then pass unprocess
// 1312       if(osal_memcmp(pKey,zgpSharedKey,SEC_KEY_LEN))
        MOV     ?V4,#zgpSharedKey & 0xff
        MOV     ?V5,#(zgpSharedKey >> 8) & 0xff
        MOV     ?V6,#-0x80
        ; Setup parameters for call to function osal_memcmp
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 96)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     R3,#0x0
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 93)
        MOV     A,R1
        JNZ     ??gp_SecurityOperationProxy_7
// 1313       {
// 1314         return GP_SEC_RSP_PASS_UNPROCESSED;
// 1315       }
// 1316       osal_memcpy(pKey,zgpSharedKey,SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 96)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 93)
        SJMP    ??gp_SecurityOperationProxy_6
// 1317     }
// 1318     else
// 1319     {
// 1320       return GP_SEC_RSP_PASS_UNPROCESSED;
// 1321     }
// 1322   }
// 1323   
// 1324   //error
// 1325   else if(status == ZFailure)
??gp_SecurityOperationProxy_5:
        MOV     A,#0x1
        XRL     A,R0
        JZ      ??gp_SecurityOperationProxy_6
// 1326   {
// 1327     //Not found, or error, drop the frame
// 1328     return GP_SEC_RSP_DROP_FRAME;
// 1329   }
// 1330   
// 1331   //Found
// 1332   else
// 1333   {
// 1334     
// 1335 //Active/Inactive entries in the proxy table are not supported    
// 1336 #if 1    
// 1337       //Check security Section A.3.7.3.3
// 1338       //Check framecounter freshness
// 1339       SecFrameCounter = osal_build_uint32(&currEntry[PROXY_TBL_ENTRY_SEC_FRAME],sizeof(uint32));
        ; Setup parameters for call to function osal_build_uint32
        MOV     R1,#0x4
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V6,R4
        MOV     ?V7,R5
// 1340       if(SecFrameCounter >= pInd->GPDSecFrameCounter)
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV     R0,#?V4
        LCALL   ?UL_GE_X
        JC      ??gp_SecurityOperationProxy_8
// 1341       {
// 1342         securityCheckFail = TRUE;
// 1343       }
// 1344       //Compare the security level
// 1345       else if(pInd->GPDFSecLvl != GP_GET_SEC_LEVEL(currEntry[PROXY_TBL_ENTRY_SEC_OPT]))
        MOV     A,R6
        ADD     A,#0x1d
        LCALL   ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_90:
        JNZ     ??gp_SecurityOperationProxy_8
// 1346       {
// 1347         securityCheckFail = TRUE;
// 1348       }
// 1349       //Mapping of security key type (section A.1.4.1.3 Table 12)
// 1350       else if((GP_GET_SEC_KEY_TYPE(currEntry[PROXY_TBL_ENTRY_SEC_OPT]) <= 0x03)
// 1351               && (pInd->GPDFKeyType == 1))
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??gp_SecurityOperationProxy_9
// 1352       {
// 1353         securityCheckFail = TRUE;
// 1354       }
// 1355       else if(  ((GP_GET_SEC_KEY_TYPE(currEntry[PROXY_TBL_ENTRY_SEC_OPT]) == 0x07) ||
// 1356                  (GP_GET_SEC_KEY_TYPE(currEntry[PROXY_TBL_ENTRY_SEC_OPT]) == 0x04)) 
// 1357                && (pInd->GPDFKeyType == 0) )
// 1358       {
// 1359         securityCheckFail = TRUE;
// 1360         
// 1361       }
// 1362       else if( (GP_GET_SEC_KEY_TYPE(currEntry[PROXY_TBL_ENTRY_SEC_OPT]) == 0x05) ||
// 1363                (GP_GET_SEC_KEY_TYPE(currEntry[PROXY_TBL_ENTRY_SEC_OPT]) == 0x06) )
// 1364       {
// 1365         //keytype reserved
// 1366         securityCheckFail = TRUE;
// 1367       }
// 1368       
// 1369       if(securityCheckFail == TRUE)
// 1370       {
// 1371         if(zgGP_InCommissioningMode == FALSE)
??gp_SecurityOperationProxy_8:
        MOV     DPTR,#zgGP_InCommissioningMode
        MOVX    A,@DPTR
        JNZ     ??gp_SecurityOperationProxy_7
// 1372         {
// 1373           return GP_SEC_RSP_DROP_FRAME;
??gp_SecurityOperationProxy_6:
        MOV     R1,#0x0
        SJMP    ??gp_SecurityOperationProxy_2
// 1374         }
// 1375         else
// 1376         {
// 1377           return GP_SEC_RSP_PASS_UNPROCESSED;
??gp_SecurityOperationProxy_7:
        MOV     R1,#0x2
        SJMP    ??gp_SecurityOperationProxy_2
// 1378         }
// 1379       }
// 1380       else
// 1381       {
// 1382         //Securty check success
// 1383         osal_memcpy(pKey,&currEntry[PROXY_TBL_ENTRY_GPD_KEY],SEC_KEY_LEN);
??gp_SecurityOperationProxy_9:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V4,R1
        MOV     ?V5,R2
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 96)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 93)
// 1384         *pKeyType = GP_GET_SEC_KEY_TYPE(currEntry[PROXY_TBL_ENTRY_SEC_OPT]);
        MOV     DPL,?V8
        MOV     DPH,?V9
        CLR     A
        MOVX    @DPTR,A
// 1385       
// 1386         //compare the endpoint
// 1387         if(endpointCheckFail)
// 1388         {
// 1389           return GP_SEC_RSP_TX_THEN_DROP;
// 1390         }
// 1391         else
// 1392         {
// 1393           return GP_SEC_RSP_MATCH;
        MOV     R1,#0x1
??gp_SecurityOperationProxy_2:
        MOV     A,#0x4b
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
// 1394         }
// 1395       }
// 1396       
// 1397 //Active/Inactive entries in the proxy table are not supported
// 1398 #else
// 1399     //Is active
// 1400     if(PROXY_TBL_GET_ENTRY_ACTIVE(currEntry[PROXY_TBL_ENTRY_OPT]))
// 1401     {
// 1402       //Check security Section A.3.7.3.3
// 1403       //Check framecounter freshness
// 1404       SecFrameCounter = osal_build_uint32(&currEntry[PROXY_TBL_ENTRY_SEC_FRAME],sizeof(uint32));
// 1405       if(SecFrameCounter >= pInd->GPDSecFrameCounter)
// 1406       {
// 1407         securityCheckFail = TRUE;
// 1408       }
// 1409       //Compare the security level
// 1410       else if(pInd->GPDFSecLvl != GP_GET_SEC_LEVEL(currEntry[PROXY_TBL_ENTRY_SEC_OPT]))
// 1411       {
// 1412         securityCheckFail = TRUE;
// 1413       }
// 1414       //Mapping of security key type (section A.1.4.1.3 Table 12)
// 1415       else if((GP_GET_SEC_KEY_TYPE(currEntry[PROXY_TBL_ENTRY_SEC_OPT]) <= 0x03)
// 1416               && (pInd->GPDFKeyType == 1))
// 1417       {
// 1418         securityCheckFail = TRUE;
// 1419       }
// 1420       else if(  ((GP_GET_SEC_KEY_TYPE(currEntry[PROXY_TBL_ENTRY_SEC_OPT]) == 0x07) ||
// 1421                  (GP_GET_SEC_KEY_TYPE(currEntry[PROXY_TBL_ENTRY_SEC_OPT]) == 0x04)) 
// 1422                && (pInd->GPDFKeyType == 0) )
// 1423       {
// 1424         securityCheckFail = TRUE;
// 1425         
// 1426       }
// 1427       else if( (GP_GET_SEC_KEY_TYPE(currEntry[PROXY_TBL_ENTRY_SEC_OPT]) == 0x05) ||
// 1428                (GP_GET_SEC_KEY_TYPE(currEntry[PROXY_TBL_ENTRY_SEC_OPT]) == 0x06) )
// 1429       {
// 1430         //keytype reserved
// 1431         securityCheckFail = TRUE;
// 1432       }
// 1433       
// 1434       if(securityCheckFail == TRUE)
// 1435       {
// 1436         if(zgGP_InCommissioningMode == FALSE)
// 1437         {
// 1438           return GP_SEC_RSP_DROP_FRAME;
// 1439         }
// 1440         else
// 1441         {
// 1442           return GP_SEC_RSP_PASS_UNPROCESSED;
// 1443         }
// 1444       }
// 1445       else
// 1446       {
// 1447         //Securty check success
// 1448         osal_memcpy(pKey,&currEntry[PROXY_TBL_ENTRY_GPD_KEY],SEC_KEY_LEN);
// 1449         *pKeyType = GP_GET_SEC_KEY_TYPE(currEntry[PROXY_TBL_ENTRY_SEC_OPT]);
// 1450       
// 1451         //compare the endpoint
// 1452         if(endpointCheckFail)
// 1453         {
// 1454           return GP_SEC_RSP_TX_THEN_DROP;
// 1455         }
// 1456         else
// 1457         {
// 1458           return GP_SEC_RSP_MATCH;
// 1459         }
// 1460       }
// 1461     }
// 1462 
// 1463     //Inactive
// 1464     else
// 1465     {
// 1466       //Found, inactive and in operational mode
// 1467       if(zgGP_InCommissioningMode == FALSE)
// 1468       {
// 1469         //Check framecounter freshness
// 1470         SecFrameCounter = osal_build_uint32(&currEntry[PROXY_TBL_ENTRY_SEC_FRAME],sizeof(uint32));
// 1471         if(SecFrameCounter < pInd->GPDSecFrameCounter)
// 1472         {
// 1473           //Update framecounter
// 1474            osal_memcpy(&currEntry[PROXY_TBL_ENTRY_SEC_FRAME],(uint8*)&pInd->GPDSecFrameCounter,sizeof(uint32));
// 1475 
// 1476            status = osal_nv_write( NvProxyTableIndex, 0,
// 1477                                PROXY_TBL_ENTRY_LEN, currEntry );
// 1478            
// 1479            if ( status != SUCCESS )
// 1480            {
// 1481              // FAIL
// 1482              return GP_SEC_RSP_ERROR;
// 1483            }
// 1484         }
// 1485         return GP_SEC_RSP_DROP_FRAME;
// 1486       }
// 1487       //Found,inactive, and in commissioning mode
// 1488       else
// 1489       {
// 1490         //If key type = 0, its the same as not found
// 1491         if(pInd->GPDFKeyType == 0)
// 1492         {
// 1493           Found = FALSE;
// 1494         }
// 1495         else
// 1496         {
// 1497           return GP_SEC_RSP_PASS_UNPROCESSED;
// 1498         }
// 1499       }
// 1500     }
// 1501 #endif
// 1502     
// 1503   }
// 1504 
// 1505 
// 1506   //Should not reach this point
// 1507   return GP_SEC_RSP_DROP_FRAME;
// 1508 }
          CFI EndBlock cfiBlock137

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond138 Using cfiCommon0
          CFI Function gp_ZclPairingParse
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 84)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function gp_SecurityOperationProxy
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-2
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 93)
          CFI Block cfiPicker140 Using cfiCommon1
          CFI (cfiPicker140) NoFunction
          CFI (cfiPicker140) Picker
        MOV     A,R6
        ADD     A,#0x1e
        MOV     ?V2,A
        CLR     A
        ADDC    A,R7
        MOV     ?V3,A
        RET
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiPicker140

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond141 Using cfiCommon0
          CFI Function zclGp_ManteinanceIndParse
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function gp_SecurityOperationProxy
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-2
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 93)
          CFI Block cfiPicker143 Using cfiCommon1
          CFI (cfiPicker143) NoFunction
          CFI (cfiPicker143) Picker
        MOV     A,R6
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_37:
        ADDC    A,R7
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiPicker143

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond144 Using cfiCommon0
          CFI Function zclGp_DataIndParse
          CFI Conditional ??CrossCallReturnLabel_34
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function zclGp_ManteinanceIndParse
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_23
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-4
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function gp_SecurityOperationProxy
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_24
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-4
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 93)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function GP_SecReq
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond147) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond147) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond147) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond147) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond147) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond147) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond147) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+-2
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function GP_SecReq
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond148) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond148) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond148) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond148) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-2
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiPicker149 Using cfiCommon1
          CFI (cfiPicker149) NoFunction
          CFI (cfiPicker149) Picker
        ADD     A,#0x26
        MOV     DPL,A
        CLR     A
        RET
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiPicker149

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond150 Using cfiCommon0
          CFI Function zclGp_ManteinanceIndParse
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function gp_SecurityOperationProxy
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond151) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-2
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 93)
          CFI Block cfiPicker152 Using cfiCommon1
          CFI (cfiPicker152) NoFunction
          CFI (cfiPicker152) Picker
        MOV     A,R6
        ADD     A,#0x21
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiPicker152

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond153 Using cfiCommon0
          CFI Function zclGp_ManteinanceIndParse
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function gp_SecurityOperationProxy
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond154) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-2
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 93)
          CFI Block cfiPicker155 Using cfiCommon1
          CFI (cfiPicker155) NoFunction
          CFI (cfiPicker155) Picker
        MOV     A,R6
        ADD     A,#0x11
        MOV     ?V4,A
        CLR     A
        ADDC    A,R7
        MOV     ?V5,A
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        RET
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiPicker155

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond156 Using cfiCommon0
          CFI Function zclGp_ManteinanceIndParse
          CFI Conditional ??CrossCallReturnLabel_91
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function gp_SecurityOperationProxy
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond157) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond157) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond157) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond157) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond157) CFA_SP SP+-2
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 93)
          CFI Block cfiPicker158 Using cfiCommon1
          CFI (cfiPicker158) NoFunction
          CFI (cfiPicker158) Picker
        MOV     A,R6
        ADD     A,#0x1c
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiPicker158
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine40_0:
          CFI Block cfiCond159 Using cfiCommon0
          CFI Function zclGp_ManteinanceIndParse
          CFI Conditional ??CrossCallReturnLabel_84
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function zclGp_ManteinanceIndParse
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-2
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function zclGp_ManteinanceIndParse
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond161) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+-2
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function zclGp_ManteinanceIndParse
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-2
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function zclGp_ManteinanceIndParse
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-2
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function zclGp_ManteinanceIndParse
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-2
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function gp_SecurityOperationProxy
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-2
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 93)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function zclGp_ManteinanceIndParse
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-2
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function gp_SecurityOperationProxy
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond167) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-2
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 93)
          CFI Block cfiPicker168 Using cfiCommon1
          CFI (cfiPicker168) NoFunction
          CFI (cfiPicker168) Picker
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiPicker168
// 1509 
// 1510  /*********************************************************************
// 1511  * @fn          gp_u32CastPointer
// 1512  *
// 1513  * @brief       General function fill uint32 from pionter.
// 1514  *
// 1515  * @param       pBitField - pointer to the bit field.
// 1516  *              bit       - position of the bit to set in the given bitfield.
// 1517  *
// 1518  * @return      
// 1519  */
// 1520 static void gp_u32CastPointer( uint8 *data, uint8 *p )
// 1521 {
// 1522     *( uint32* )data |= ( ( *( uint32* ) p++ )       & 0x000000FF );
// 1523     *( uint32* )data |= ( ( *( uint32* ) p++ <<  8 ) & 0x0000FF00 );
// 1524     *( uint32* )data |= ( ( *( uint32* ) p++ << 16 ) & 0x00FF0000 );
// 1525     *( uint32* )data |= ( ( *( uint32* ) p++ << 24 ) & 0xFF000000 );
// 1526 }
// 1527 
// 1528  /*********************************************************************
// 1529  * @fn          gp_u16CastPointer
// 1530  *
// 1531  * @brief       General function fill uint16 from pionter.
// 1532  *
// 1533  * @param       pBitField - pointer to the bit field.
// 1534  *              bit       - position of the bit to set in the given bitfield.
// 1535  *
// 1536  * @return      
// 1537  */
// 1538 static void gp_u16CastPointer( uint8 *data, uint8 *p )
// 1539 {
// 1540     *( uint16* )data |= ( ( *( uint16* ) p++ )       & 0x00FF );
// 1541     *( uint16* )data |= ( ( *( uint16* ) p++ <<  8 ) & 0xFF00 );
// 1542 }
// 1543 
// 1544  /*********************************************************************
// 1545  * @fn          gp_u8CastPointer
// 1546  *
// 1547  * @brief       General function fill uint16 from pionter.
// 1548  *
// 1549  * @param       pBitField - pointer to the bit field.
// 1550  *              bit       - position of the bit to set in the given bitfield.
// 1551  *
// 1552  * @return      
// 1553  */
// 1554 static void gp_u8CastPointer( uint8 *data, uint8 *p )
// 1555 {
// 1556     *( uint8* )data |= ( ( *( uint8* ) p ) );
// 1557 }
// 1558 
// 1559  /*********************************************************************
// 1560  * @fn          gp_getProxyTableByIndex
// 1561  *
// 1562  * @brief       General function to get proxy table entry by NV index
// 1563  *
// 1564  * @param       nvIndex - NV Id of proxy table
// 1565  *              pEntry  - pointer to PROXY_TBL_ENTRY_LEN array
// 1566  *
// 1567  * @return      
// 1568  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1569 uint8 gp_getProxyTableByIndex( uint16 nvIndex, uint8 *pEntry )
gp_getProxyTableByIndex:
          CFI Block cfiBlock169 Using cfiCommon0
          CFI Function gp_getProxyTableByIndex
        CODE
// 1570 {
        FUNCALL gp_getProxyTableByIndex, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_getProxyTableByIndex, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V4,R4
        MOV     ?V5,R5
// 1571   uint8 status;
// 1572   uint16 emptyEntry = 0xFFFF;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1573   
// 1574   
// 1575   if ( ( nvIndex < ZCD_NV_PROXY_TABLE_START ) || ( nvIndex > ZCD_NV_PROXY_TABLE_END ) )
        MOV     A,R2
        ADD     A,#-0x10
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#-0x4
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x30
        MOV     A,R1
        SUBB    A,#0x0
        JC      ??gp_getProxyTableByIndex_0
// 1576   {
// 1577     return NV_OPER_FAILED;
        MOV     R1,#0xa
        SJMP    ??gp_getProxyTableByIndex_1
// 1578   }
// 1579   
// 1580   status = osal_nv_read( nvIndex, 0,
// 1581                           PROXY_TBL_ENTRY_LEN, pEntry );
??gp_getProxyTableByIndex_0:
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0,#0x40
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,#0x0
        MOV     R5,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R1
        MOV     R6,A
// 1582   
// 1583   if ( status != SUCCESS )
        JNZ     ??gp_getProxyTableByIndex_2
// 1584   {
// 1585     // Return the failure status of NV read procedure
// 1586     return status;
// 1587   }
// 1588     
// 1589       
// 1590   // if the entry is empty
// 1591   if ( osal_memcmp( pEntry, &emptyEntry, sizeof ( uint16 ) ) )
        ; Setup parameters for call to function osal_memcmp
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     DPL,?V4
        MOV     DPH,?V5
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     R3,#0x0
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R1
        JZ      ??gp_getProxyTableByIndex_2
// 1592   {
// 1593     return NV_INVALID_DATA;
        MOV     R1,#0xd
        SJMP    ??gp_getProxyTableByIndex_1
// 1594   }
// 1595   
// 1596   return status;
??gp_getProxyTableByIndex_2:
        MOV     A,R6
        MOV     R1,A
??gp_getProxyTableByIndex_1:
        MOV     A,#0x2
        LJMP    ?Subroutine3 & 0xFFFF
// 1597 }
          CFI EndBlock cfiBlock169
// 1598 
// 1599 
// 1600 
// 1601 
// 1602 
// 1603 
// 1604 
// 1605 
// 1606 
// 1607 /*********************************************************************
// 1608  * @fn          GP_DataInd
// 1609  *
// 1610  * @brief       This passes the MCPS data indications received in MAC to the application
// 1611  *
// 1612  * @param       gp_DataInd
// 1613  *
// 1614  * @return      FreeMsg - TRUE if the message will be released, False if it will 
// 1615  *                        be keeped for duplicate filtering
// 1616  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1617 uint8 GP_DataInd(gp_DataInd_t *gp_DataInd)
GP_DataInd:
          CFI Block cfiBlock170 Using cfiCommon0
          CFI Function GP_DataInd
        CODE
// 1618 {
        FUNCALL GP_DataInd, gp_DataIndAppendToList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GP_DataInd, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GP_DataInd, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GP_DataInd, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GP_DataInd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GP_DataInd, zclGp_ManteinanceIndParse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GP_DataInd, zclGp_SendGpCommissioningNotificationCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GP_DataInd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GP_DataInd, zclGp_DataIndParse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GP_DataInd, zclGp_SendGpNotificationCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 56
        MOV     A,#-0x38
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 72)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1619   uint32  timeout;
// 1620   uint8   freeMsg = FALSE;
// 1621 
// 1622   gp_DataIndAppendToList(gp_DataInd, &gp_DataIndList);
        ; Setup parameters for call to function gp_DataIndAppendToList
        MOV     R4,#gp_DataIndList & 0xff
        MOV     R5,#(gp_DataIndList >> 8) & 0xff
        LCALL   `??gp_DataIndAppendToList::?relay`; Banked call to: gp_DataIndAppendToList
// 1623   
// 1624   gp_DataInd->SecReqHandling.timeout = gpDuplicateTimeout;
        MOV     A,R6
        ADD     A,#0x5
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV     A,#-0x30
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x7
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1625   //Consider the current time elepsed to the next timeout
// 1626   timeout = osal_get_timeoutEx(gp_TaskID,GP_DUPLICATE_FILTERING_TIMEOUT_EVENT);
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV     R2,#0x2
        MOV     R3,A
        MOV     DPTR,#gp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V6,R4
        MOV     ?V7,R5
// 1627   
// 1628   if(timeout)
        MOV     A,R2
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV     DPL,?V0
        MOV     DPH,?V1
        JZ      ??GP_DataInd_0
// 1629   {
// 1630     gp_DataInd->SecReqHandling.timeout += timeout;
        MOV     R0,#?V4
        LCALL   ?L_ADD_TO_X
        SJMP    ??GP_DataInd_1
// 1631   }  
// 1632   else
// 1633   {
// 1634     osal_start_timerEx(gp_TaskID,GP_DUPLICATE_FILTERING_TIMEOUT_EVENT,gp_DataInd->SecReqHandling.timeout);
??GP_DataInd_0:
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 76)
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#gp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 72)
// 1635   }  
// 1636   
// 1637   if ( zgGP_InCommissioningMode == TRUE )
??GP_DataInd_1:
        MOV     DPTR,#zgGP_InCommissioningMode
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??GP_DataInd_2 & 0xFFFF
// 1638   {
// 1639     if(gp_DataInd->GPDCmmdID == GP_CHANNEL_REQ_COMMAND_ID)
        MOV     A,R6
        ADD     A,#0x2a
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_16:
        MOVX    A,@DPTR
        XRL     A,#0xe3
        JNZ     ??GP_DataInd_3
// 1640     {
// 1641       if(pfnChangeChannelReqForBDB)
        MOV     DPTR,#pfnChangeChannelReqForBDB
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_38:
        JZ      ??GP_DataInd_4
// 1642       {
// 1643         //Check if we got permission from BDB
// 1644         if(!pfnChangeChannelReqForBDB())
        ; Setup parameters for indirect call
        LCALL   ??Subroutine41_0 & 0xFFFF
// 1645         {
// 1646           //No permisssion
// 1647           return freeMsg;
// 1648         }
// 1649       }
??CrossCallReturnLabel_95:
        LCALL   ?CALL_IND
        MOV     A,R1
        JNZ     $+5
        LJMP    ??GP_DataInd_5 & 0xFFFF
// 1650       if(pfnChangeChannelReq)
??GP_DataInd_4:
        MOV     DPTR,#pfnChangeChannelReq
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_39:
        JZ      ??GP_DataInd_6
// 1651       {
// 1652         //Check if we got permission from BDB
// 1653         if(!pfnChangeChannelReq())
        ; Setup parameters for indirect call
        LCALL   ??Subroutine41_0 & 0xFFFF
// 1654         {
// 1655           //No permisssion
// 1656           return freeMsg;
// 1657         }
// 1658       }
??CrossCallReturnLabel_96:
        LCALL   ?CALL_IND
        MOV     A,R1
        JZ      ??GP_DataInd_5
// 1659       
// 1660       osal_start_timerEx(gp_TaskID,GP_CHANNEL_CONFIGURATION_TIMEOUT,gpBirectionalCommissioningChangeChannelTimeout);
??GP_DataInd_6:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_1388
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 76)
        MOV     R2,#0x8
        MOV     R3,#0x0
        MOV     DPTR,#gp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 72)
// 1661       
// 1662     }
// 1663     GP_ProccessCommissioningNotification( gp_DataInd );
??GP_DataInd_3:
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#-0x20
        XRL     A,R0
        JZ      ??GP_DataInd_7
        MOV     A,#-0x1e
        XRL     A,R0
        JZ      ??GP_DataInd_7
        MOV     A,#-0x1d
        XRL     A,R0
        JNZ     ??GP_DataInd_5
??GP_DataInd_7:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x1e
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
        ; Setup parameters for call to function zclGp_ManteinanceIndParse
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP102_8
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??zclGp_ManteinanceIndParse::?relay`; Banked call to: zclGp_ManteinanceIndParse
        ; Setup parameters for call to function zclGp_SendGpCommissioningNotificationCommand
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??zclGp_SendGpCommissioningNotificationCommand:`; Banked call to: zclGp_SendGpCommissioningNotificationCommand
        SJMP    ??GP_DataInd_5
// 1664   }
// 1665   else if ( ( zgGP_InCommissioningMode == FALSE ) )
??GP_DataInd_2:
        MOVX    A,@DPTR
        JNZ     ??GP_DataInd_5
// 1666   {
// 1667     GP_ProccessNotification( gp_DataInd );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x1a
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
        ; Setup parameters for call to function zclGp_DataIndParse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??zclGp_DataIndParse::?relay`; Banked call to: zclGp_DataIndParse
        ; Setup parameters for call to function zclGp_SendGpNotificationCommand
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??zclGp_SendGpNotificationCommand::?relay`; Banked call to: zclGp_SendGpNotificationCommand
// 1668   }
// 1669   
// 1670   return freeMsg;
??GP_DataInd_5:
        MOV     R1,#0x0
        MOV     A,#0x38
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
// 1671 }
          CFI EndBlock cfiBlock170

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond171 Using cfiCommon0
          CFI Function zclGp_GpProxyCommissioningModeCB
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function GP_DataInd
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-2
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 72)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function GP_DataInd
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond173) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond173) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+-2
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 72)
          CFI Block cfiPicker174 Using cfiCommon1
          CFI (cfiPicker174) NoFunction
          CFI (cfiPicker174) Picker
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     ?V0,R0
        MOV     ?V1,R1
        ; Setup parameters for call to function osal_build_uint16
        MOV     DPL,R0
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiPicker174

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond175 Using cfiCommon0
          CFI Function gp_PopulateField
          CFI Conditional ??CrossCallReturnLabel_97
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function gp_expireDuplicateFiltering
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-2
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker177 Using cfiCommon1
          CFI (cfiPicker177) NoFunction
          CFI (cfiPicker177) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiPicker177
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine41_0:
          CFI Block cfiCond178 Using cfiCommon0
          CFI Function gp_stopCommissioningMode
          CFI Conditional ??CrossCallReturnLabel_93
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function zclGp_GpProxyCommissioningModeCB
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-2
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function GP_DataInd
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-2
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 72)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function GP_DataInd
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-2
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 72)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function gp_PopulateField
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond182) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond182) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond182) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond182) CFA_SP SP+-2
          CFI (cfiCond182) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond183 Using cfiCommon0
          CFI (cfiCond183) Function gp_expireDuplicateFiltering
          CFI (cfiCond183) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond183) CFA_SP SP+-2
          CFI (cfiCond183) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker184 Using cfiCommon1
          CFI (cfiPicker184) NoFunction
          CFI (cfiPicker184) Picker
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiCond183
          CFI EndBlock cfiPicker184
// 1672 
// 1673 /*********************************************************************
// 1674  * @fn          GP_ProccessCommissioningNotification
// 1675  *
// 1676  * @brief       General function to process the GP Manteinance Indication in operational mode
// 1677  *
// 1678  * @param       gp_DataInd
// 1679  *
// 1680  * @return      none
// 1681  */
// 1682 static void GP_ProccessCommissioningNotification(gp_DataInd_t *gp_DataInd)
// 1683 {
// 1684   gpCommissioningNotificationCmd_t gpNotification;
// 1685   
// 1686   if ( ( gp_DataInd->GPDCmmdID == GP_COMMISSIONING_COMMAND_ID ) || ( gp_DataInd->GPDCmmdID == GP_SUCCESS_COMMAND_ID ) ||
// 1687        ( gp_DataInd->GPDCmmdID == GP_CHANNEL_REQ_COMMAND_ID ) )
// 1688   {
// 1689   
// 1690     osal_memset( &gpNotification, 0, sizeof ( gpCommissioningNotificationCmd_t ) );
// 1691     zclGp_ManteinanceIndParse( gp_DataInd, &gpNotification );
// 1692   
// 1693     zclGp_SendGpCommissioningNotificationCommand ( &gpNotification );
// 1694   }
// 1695 }
// 1696 
// 1697 /*********************************************************************
// 1698  * @fn          GP_ProccessNotification
// 1699  *
// 1700  * @brief       General function to process the GP Data Indication in operational mode
// 1701  *
// 1702  * @param       gp_DataInd
// 1703  *
// 1704  * @return      none
// 1705  */
// 1706 static void GP_ProccessNotification(gp_DataInd_t *gp_DataInd)
// 1707 {
// 1708   gpNotificationCmd_t gpNotification;
// 1709   
// 1710   osal_memset( &gpNotification, 0, sizeof ( gpNotificationCmd_t ) );
// 1711   zclGp_DataIndParse( gp_DataInd, &gpNotification );
// 1712   
// 1713   zclGp_SendGpNotificationCommand ( &gpNotification );
// 1714 }
// 1715 
// 1716 /*********************************************************************
// 1717  * @fn          GP_SecReq
// 1718  *
// 1719  * @brief       Primitive from dGP stub to GP EndPoint notify about a protected GPDF
// 1720  *
// 1721  * @param       gp_SecReq 
// 1722  *
// 1723  * @return      none
// 1724  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1725 uint8 GP_SecReq(gp_SecReq_t *gp_SecReq)
GP_SecReq:
          CFI Block cfiBlock185 Using cfiCommon0
          CFI Function GP_SecReq
        CODE
// 1726 {
        FUNCALL GP_SecReq, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GP_SecReq, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GP_SecReq, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GP_SecReq, gp_DataIndGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GP_SecReq, gp_DataIndGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GP_SecReq, gp_SecurityOperationProxy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GP_SecReq, GP_RecoveryKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GP_SecReq, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GP_SecReq, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V14
        REQUIRE ?V15
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 17
        MOV     A,#-0x11
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     ?V0,R2
        MOV     ?V1,R3
// 1727   gp_SecRsp_t *gp_SecRsp = NULL;
// 1728   uint8 status;
// 1729 
// 1730   gp_SecRsp = (gp_SecRsp_t*)osal_msg_allocate(sizeof(gp_SecRsp_t));
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x24
        MOV     R3,#0x0
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
// 1731 
// 1732   //No mem, then do not release the msg, process later
// 1733   if(gp_SecRsp == NULL)
        MOV     A,R6
        ORL     A,R7
        JNZ     ??GP_SecReq_0
// 1734   {
// 1735     return FALSE;
        MOV     R1,#0x0
        LJMP    ??GP_SecReq_1 & 0xFFFF
// 1736   }
// 1737   
// 1738   gp_SecRsp->hdr.event = GP_SEC_RSP;
??GP_SecReq_0:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x8
        MOVX    @DPTR,A
// 1739   gp_SecRsp->hdr.status = ZSuccess;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
// 1740 
// 1741   gp_SecRsp->dGPStubHandle = gp_SecReq->dGPStubHandle;
        MOV     A,?V0
        ADD     A,#0x12
        MOV     ?V10,A
        CLR     A
        ADDC    A,?V1
        MOV     ?V11,A
        MOV     DPL,?V10
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
// 1742   gp_SecRsp->EndPoint = gp_SecReq->EndPoint;
        MOV     A,?V0
        ADD     A,#0xb
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_62:
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0xd
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1743 
// 1744   osal_memcpy(&gp_SecRsp->gp_SecData,&gp_SecReq->gp_SecData, sizeof(gp_SecData_t));
        MOV     A,?V0
        ADD     A,#0xc
        MOV     ?V8,A
        CLR     A
        ADDC    A,?V1
        MOV     ?V9,A
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,?V8
        MOV     ?V5,A
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 44)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0xe
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 41)
// 1745   osal_memcpy(&gp_SecRsp->gpd_ID,&gp_SecReq->gpd_ID, sizeof(gpd_ID_t));
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V4,R1
        MOV     ?V5,R2
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 44)
        MOV     R4,#0x9
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x4
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 41)
// 1746 
// 1747   gp_SecRsp->Status = GP_SEC_RSP_DROP_FRAME;
        MOV     A,R6
        ADD     A,#0x2
        MOV     ?V14,A
        CLR     A
        ADDC    A,R7
        MOV     ?V15,A
        MOV     DPL,?V14
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
// 1748  
// 1749   //Find duplicates A.3.6.1.2 Duplicate filtering
// 1750   if(NULL == gp_DataIndFindDuplicate(gp_SecReq->dGPStubHandle, gp_SecReq->gp_SecData.GPDFSecLvl))
        MOV     DPL,?V8
        MOV     DPH,?V9
        MOVX    A,@DPTR
        MOV     ?V12,A
        ; Setup parameters for call to function gp_DataIndGet
        MOV     DPL,?V10
        MOV     DPH,?V11
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??gp_DataIndGet::?relay`; Banked call to: gp_DataIndGet
        MOV     A,R2
        ORL     A,R3
        JNZ     $+5
        LJMP    ??GP_SecReq_2 & 0xFFFF
        MOV     DPTR,#gp_DataIndList
        SJMP    ??GP_SecReq_3
??GP_SecReq_4:
        MOV     A,?V2
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_35:
        ADDC    A,?V3
        MOV     DPH,A
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     A,R2
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_36:
        ADDC    A,R3
        MOV     DPH,A
        MOV     R0,#?V4
        LCALL   ?L_EQ_X
        JNZ     ??GP_SecReq_5
??GP_SecReq_6:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      $+5
        LJMP    ??GP_SecReq_7 & 0xFFFF
??GP_SecReq_5:
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
??GP_SecReq_3:
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     A,?V2
        ORL     A,?V3
        JZ      ??GP_SecReq_8
        MOV     A,?V12
        JNZ     ??GP_SecReq_4
        MOV     A,R2
        ADD     A,#0x10
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V2
        ADD     A,#0x10
        MOV     DPL,A
        CLR     A
        ADDC    A,?V3
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??GP_SecReq_5
        MOV     A,R2
        ADD     A,#0x1c
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V2
        ADD     A,#0x1c
        MOV     DPL,A
        CLR     A
        ADDC    A,?V3
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??GP_SecReq_5
        SJMP    ??GP_SecReq_6
??GP_SecReq_2:
        MOV     A,R6
        ORL     A,?V3
        JZ      $+5
        LJMP    ??GP_SecReq_7 & 0xFFFF
// 1751   {
// 1752     if(gp_SecReq->gp_SecData.GPDFSecLvl)
??GP_SecReq_8:
        MOV     DPL,?V8
        MOV     DPH,?V9
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??GP_SecReq_9 & 0xFFFF
// 1753     {
// 1754       gp_DataInd_t* temp;
// 1755       uint8   KeyType;
// 1756       uint8   Key[SEC_KEY_LEN];
// 1757       temp = gp_DataIndGet(gp_SecReq->dGPStubHandle);
        ; Setup parameters for call to function gp_DataIndGet
        MOV     DPL,?V10
        MOV     DPH,?V11
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??gp_DataIndGet::?relay`; Banked call to: gp_DataIndGet
// 1758 
// 1759       //Section A.3.7.3.3
// 1760       status = gp_SecurityOperationProxy(temp,&KeyType,Key);
        ; Setup parameters for call to function gp_SecurityOperationProxy
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP102_8
        LCALL   `??gp_SecurityOperationProxy::?relay`; Banked call to: gp_SecurityOperationProxy
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     A,R1
        MOV     ?V2,A
// 1761 
// 1762       switch(status)
        JZ      ??GP_SecReq_7
        DEC     A
        JZ      ??GP_SecReq_10
        DEC     A
        JZ      ??GP_SecReq_9
        DEC     A
        JZ      ??GP_SecReq_10
        DEC     A
        JZ      ??GP_SecReq_7
        SJMP    ??GP_SecReq_11
// 1763       {
// 1764         case GP_SEC_RSP_ERROR:  //This should not happen
// 1765         case GP_SEC_RSP_DROP_FRAME:
// 1766           gp_SecRsp->Status = GP_SEC_RSP_DROP_FRAME;
// 1767         break;
// 1768         
// 1769         case GP_SEC_RSP_PASS_UNPROCESSED:  
// 1770           gp_SecRsp->Status = GP_SEC_RSP_PASS_UNPROCESSED;
// 1771         break;
// 1772         
// 1773         case GP_SEC_RSP_MATCH:
// 1774         case GP_SEC_RSP_TX_THEN_DROP:
// 1775           if(GP_RecoveryKey(gp_SecReq->gp_SecData.GPDFKeyType,KeyType,status,Key) == GP_SEC_RSP_DROP_FRAME)
??GP_SecReq_10:
        ; Setup parameters for call to function GP_RecoveryKey
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP102_8
        MOV     R3,?V2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,?V0
        ADD     A,#0xd
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_63:
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??GP_RecoveryKey::?relay`; Banked call to: GP_RecoveryKey
        MOV     A,R1
        JZ      ??GP_SecReq_7
// 1776           {
// 1777             gp_SecRsp->Status = GP_SEC_RSP_DROP_FRAME;
// 1778           }
// 1779           else
// 1780           {
// 1781             gp_SecRsp->Status = status;
        MOV     DPL,?V14
        MOV     DPH,?V15
        MOV     A,?V2
        MOVX    @DPTR,A
// 1782             osal_memcpy(gp_SecRsp->GPDKey,Key,SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 44)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x14
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 41)
        SJMP    ??GP_SecReq_11
// 1783           }
// 1784         break;
// 1785       }
// 1786     }
// 1787     //No security
// 1788     else
// 1789     {
// 1790       gp_SecRsp->Status = GP_SEC_RSP_PASS_UNPROCESSED;
??GP_SecReq_9:
        MOV     DPL,?V14
        MOV     DPH,?V15
        MOV     A,#0x2
        SJMP    ??GP_SecReq_12
// 1791     }
// 1792   }
// 1793 
// 1794   //Found duplicate, then drop it
// 1795   else
// 1796   {
// 1797     gp_SecRsp->Status = GP_SEC_RSP_DROP_FRAME;
??GP_SecReq_7:
        MOV     DPL,?V14
        MOV     DPH,?V15
        CLR     A
??GP_SecReq_12:
        MOVX    @DPTR,A
// 1798   }
// 1799   
// 1800   osal_msg_send(gp_TaskID,(uint8*)gp_SecRsp);
??GP_SecReq_11:
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPTR,#gp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
// 1801   return TRUE;
        MOV     R1,#0x1
??GP_SecReq_1:
        MOV     A,#0x11
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
// 1802 }
          CFI EndBlock cfiBlock185
// 1803 
// 1804 /*********************************************************************
// 1805  * @fn          GP_RecoveryKey
// 1806  *
// 1807  * @brief       Procedure to retrive the key to be used to decrypt the GPDF
// 1808  *
// 1809  * @param       GPDFKeyType   KeyType from the GPDF
// 1810  * @param       KeyType       Key type in the Proxy table entry for this GPD
// 1811  * @param       Status        Previous status to search key (MATCH, TX_THEN_DROP)
// 1812  * @param       Key[out]      Key to be used
// 1813  *                       
// 1814  * @return      Status
// 1815  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1816 uint8 GP_RecoveryKey(uint8 GPDFKeyType,uint8 KeyType, uint8 status, uint8 *Key)
GP_RecoveryKey:
          CFI Block cfiBlock186 Using cfiCommon0
          CFI Function GP_RecoveryKey
        CODE
// 1817 {
        FUNCALL GP_RecoveryKey, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GP_RecoveryKey, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GP_RecoveryKey, zcl_ReadAttrData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GP_RecoveryKey, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GP_RecoveryKey, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GP_RecoveryKey, ZDSecMgrReadKeyFromNv
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,R2
        MOV     R7,A
        MOV     A,R3
        MOV     R6,A
// 1818   if(GPDFKeyType)
        MOV     A,R1
        JZ      ??GP_RecoveryKey_0
// 1819   {
// 1820     uint8 TempKey[SEC_KEY_LEN] = {0xFF};
        MOV     DPTR,#`?<Constant {255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,`
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x10
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 1821     if(KeyType == GP_SECURITY_KEY_TYPE_OUT_OF_BOX_GPD_KEY)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     ?V6,#0x0
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R1,?V0
        MOV     R2,?V1
        MOV     R3,#0x0
        MOV     A,#0x4
        XRL     A,R7
        JNZ     ??GP_RecoveryKey_1
// 1822     {
// 1823       //Is the key of the Proxy table entry empty?
// 1824       if(osal_memcmp(&Key,&TempKey,SEC_KEY_LEN))
        ; Setup parameters for call to function osal_memcmp
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     R4,#0x10
        MOV     R5,#0x0
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,R1
        JZ      ??GP_RecoveryKey_2
// 1825       {
// 1826         return GP_SEC_RSP_DROP_FRAME;
// 1827       }          
// 1828       else
// 1829       {
// 1830         //There is a key, then use it
// 1831         return status;
// 1832       }
// 1833     }
// 1834     else if(KeyType == GP_SECURITY_KEY_TYPE_DERIVED_IND_GPD_KEY)
// 1835     {
// 1836       //Is the key of the Proxy table entry empty?
// 1837       if(osal_memcmp(&Key,&TempKey,SEC_KEY_LEN))
// 1838       {
// 1839         return GP_SEC_RSP_DROP_FRAME;
// 1840       }  
// 1841       //There is a key, then use it. Derived keys are provided by the Sink 
// 1842       //device at paring time according to A.3.7.1.2.2
// 1843       return status;
// 1844     }
// 1845     else
// 1846     {
// 1847       return GP_SEC_RSP_DROP_FRAME;
// 1848     }
// 1849   }
// 1850   else
// 1851   {
// 1852     uint8  gpSharedSecKeyType;
// 1853     uint16 AttLen;
// 1854     uint8 TempKey[SEC_KEY_LEN] = {0xFF};
// 1855 
// 1856     //Get the SharedKeyType Attribute
// 1857     zcl_ReadAttrData(GREEN_POWER_INTERNAL_ENDPOINT,ZCL_CLUSTER_ID_GREEN_POWER,ATTRID_GP_SHARED_SEC_KEY_TYPE,&gpSharedSecKeyType,&AttLen);
// 1858 
// 1859     if(KeyType == gpSharedSecKeyType)
// 1860     {
// 1861       if(!osal_memcmp(TempKey,zgpSharedKey,SEC_KEY_LEN))
// 1862       {
// 1863         //Use key shared key
// 1864         osal_memcpy(Key,zgpSharedKey,SEC_KEY_LEN);
// 1865         return status;
// 1866       }
// 1867     }
// 1868     if(KeyType == GP_SECURITY_KEY_TYPE_ZIGBEE_NWK_KEY)
// 1869     {
// 1870       ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY,Key);
// 1871     }
// 1872     //There is a key, then use it. Derived keys are provided by the Sink 
// 1873     //device at paring time according to A.3.7.1.2.2
// 1874     else
// 1875     {
// 1876       return GP_SEC_RSP_DROP_FRAME;
??GP_RecoveryKey_3:
        MOV     R1,#0x0
??GP_RecoveryKey_4:
        MOV     A,#0x15
// 1877     }
        LJMP    ?Subroutine1 & 0xFFFF
??GP_RecoveryKey_1:
        MOV     A,#0x7
        XRL     A,R7
        JNZ     ??GP_RecoveryKey_3
        ; Setup parameters for call to function osal_memcmp
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     R4,#0x10
        MOV     R5,#0x0
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,R1
        JNZ     ??GP_RecoveryKey_3
??GP_RecoveryKey_2:
        MOV     A,R6
        MOV     R1,A
        SJMP    ??GP_RecoveryKey_4
??GP_RecoveryKey_0:
        MOV     DPTR,#`?<Constant {255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,_1`
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x10
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        ; Setup parameters for call to function zcl_ReadAttrData
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R2,#0x21
        MOV     R3,#0x0
        MOV     R1,#-0xe
        LCALL   `??zcl_ReadAttrData::?relay`; Banked call to: zcl_ReadAttrData
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,R7
        JNZ     ??GP_RecoveryKey_5
        MOV     ?V0,#zgpSharedKey & 0xff
        MOV     ?V1,#(zgpSharedKey >> 8) & 0xff
        MOV     ?V2,#-0x80
        ; Setup parameters for call to function osal_memcmp
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     R3,#0x0
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,R1
        JNZ     ??GP_RecoveryKey_5
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_103:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        LJMP    ??GP_RecoveryKey_2 & 0xFFFF
??GP_RecoveryKey_5:
        MOV     A,#0x1
        XRL     A,R7
        JZ      $+5
        LJMP    ??GP_RecoveryKey_3 & 0xFFFF
        ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#0x62
        MOV     R3,#0x0
        LCALL   `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
        LJMP    ??GP_RecoveryKey_2 & 0xFFFF
// 1878   }
// 1879   return status;
// 1880 }
          CFI EndBlock cfiBlock186

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond187 Using cfiCommon0
          CFI Function zclGp_GpProxyTableReqCB
          CFI Conditional ??CrossCallReturnLabel_104
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 100)
          CFI Block cfiCond188 Using cfiCommon0
          CFI (cfiCond188) Function zclGp_GpProxyTableReqCB
          CFI (cfiCond188) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond188) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond188) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond188) CFA_SP SP+-2
          CFI (cfiCond188) CFA_XSP16 add(XSP16, 100)
          CFI Block cfiPicker189 Using cfiCommon1
          CFI (cfiPicker189) NoFunction
          CFI (cfiPicker189) Picker
        MOV     DPL,?V0
        MOV     DPH,?V1
          CFI EndBlock cfiCond187
          CFI EndBlock cfiCond188
          CFI EndBlock cfiPicker189
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine42_0:
          CFI Block cfiCond190 Using cfiCommon0
          CFI Function zclGp_GpResponseCommandCB
          CFI Conditional ??CrossCallReturnLabel_99
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 97)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function zclGp_GpResponseCommandCB
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond191) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond191) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond191) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond191) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond191) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond191) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond191) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond191) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+-2
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 101)
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function zclGp_GpResponseCommandCB
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond192) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond192) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond192) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond192) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond192) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond192) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond192) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond192) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond192) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond192) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+-2
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 101)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function zclGp_GpProxyCommissioningModeCB
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+-2
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function GP_RecoveryKey
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond194) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond194) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond194) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond194) CFA_SP SP+-2
          CFI (cfiCond194) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function zclGp_GpProxyTableReqCB
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond195) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond195) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond195) CFA_SP SP+-2
          CFI (cfiCond195) CFA_XSP16 add(XSP16, 100)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function zclGp_GpProxyTableReqCB
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond196) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond196) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond196) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond196) CFA_SP SP+-2
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 100)
          CFI Block cfiPicker197 Using cfiCommon1
          CFI (cfiPicker197) NoFunction
          CFI (cfiPicker197) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiPicker197
// 1881 
// 1882 
// 1883 gp_DataInd_t* gp_DataIndFindDuplicate(uint8 handle, uint8 secLvl)
// 1884 {
// 1885   gp_DataInd_t* temp;
// 1886   gp_DataInd_t* tempList;
// 1887   temp = gp_DataIndGet(handle);
// 1888   
// 1889   if(temp != NULL)
// 1890   {
// 1891     tempList = gp_DataIndList;
// 1892     
// 1893     while(tempList != NULL)
// 1894     {
// 1895       //search for MAC seq num
// 1896       if(secLvl == 0)
// 1897       {
// 1898         if((temp->SeqNumber == tempList->SeqNumber) && (temp->appID == tempList->appID)&&
// 1899            (temp->SecReqHandling.dGPStubHandle != tempList->SecReqHandling.dGPStubHandle))
// 1900         {
// 1901           break;
// 1902         }
// 1903       }
// 1904       //Other secLevels uses SecFrameCounter
// 1905       else
// 1906       {
// 1907         if((temp->GPDSecFrameCounter == tempList->GPDSecFrameCounter) && 
// 1908            (temp->SecReqHandling.dGPStubHandle != tempList->SecReqHandling.dGPStubHandle))
// 1909         {
// 1910           
// 1911           break;
// 1912         }
// 1913       }
// 1914       tempList = tempList->SecReqHandling.next;
// 1915     }
// 1916   }
// 1917   return tempList;
// 1918 }
// 1919  
// 1920 /*********************************************************************
// 1921  * @fn          GP_DataCnf
// 1922  *
// 1923  * @brief       Primitive to notify GP EndPoint the status of a previews DataReq
// 1924  *
// 1925  * @param       gp_DataCnf
// 1926  *
// 1927  * @return      none
// 1928  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1929 void GP_DataCnf(gp_DataCnf_t *gp_DataCnf)
GP_DataCnf:
          CFI Block cfiBlock198 Using cfiCommon0
          CFI Function GP_DataCnf
        CODE
// 1930 {
        ; Saved register size: 0
        ; Auto size: 0
// 1931   //Current spec does not mandates to do anything with this.
// 1932   switch(gp_DataCnf->status)
// 1933   {
// 1934     case GP_DATA_CNF_TX_QUEUE_FULL:
// 1935     case GP_DATA_CNF_ENTRY_REPLACED:
// 1936     case GP_DATA_CNF_ENTRY_ADDED:
// 1937     case GP_DATA_CNF_ENTRY_EXPIRED:
// 1938     case GP_DATA_CNF_ENTRY_REMOVED:
// 1939     case GP_DATA_CNF_GPDF_SENDING_FINALIZED:
// 1940     break;
// 1941   }  
// 1942 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock198
// 1943 
// 1944  /*********************************************************************
// 1945  * PRIVATE FUNCTIONS
// 1946  *********************************************************************/
// 1947 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1948 void gp_RegisterCommissioningModeCB(gpCommissioningMode_t gpCommissioningMode)
gp_RegisterCommissioningModeCB:
          CFI Block cfiBlock199 Using cfiCommon0
          CFI Function gp_RegisterCommissioningModeCB
        CODE
// 1949 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1950   if(gpCommissioningMode)
        MOV     A,R2
        ORL     A,R3
        JZ      ??gp_RegisterCommissioningModeCB_0
// 1951   {
// 1952      pfnCommissioningMode = gpCommissioningMode;
        MOV     DPTR,#pfnCommissioningMode
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 1953   }
// 1954 }
??gp_RegisterCommissioningModeCB_0:
          CFI EndBlock cfiBlock199
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock200 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock200
// 1955 
// 1956 /*********************************************************************
// 1957  * @fn          gp_RegisterGPChangeChannelReqCB
// 1958  *
// 1959  * @brief       Register a callback in which the application will be notified about a change
// 1960  *              of channel for at most gpBirectionalCommissioningChangeChannelTimeout ms
// 1961  *              to perform GP bidirectional commissioning in the channel parameter.
// 1962  *
// 1963  * @param       gpChangeChannelReq
// 1964  *
// 1965  * @return      none
// 1966  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1967 void gp_RegisterGPChangeChannelReqCB(gpChangeChannelReq_t gpChangeChannelReq)
gp_RegisterGPChangeChannelReqCB:
          CFI Block cfiBlock201 Using cfiCommon0
          CFI Function gp_RegisterGPChangeChannelReqCB
        CODE
// 1968 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1969   if(gpChangeChannelReq)
        MOV     A,R2
        ORL     A,R3
        JZ      ??gp_RegisterGPChangeChannelReqCB_0
// 1970   {
// 1971     pfnChangeChannelReq = gpChangeChannelReq;
        MOV     DPTR,#pfnChangeChannelReq
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 1972   }
// 1973 }
??gp_RegisterGPChangeChannelReqCB_0:
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock201
// 1974 
// 1975 /*********************************************************************
// 1976  * @fn          gp_RegisterGPChangeChannelReqForBDBCB
// 1977  *
// 1978  * @brief       Register a callback in which the bdb will be notified about a change
// 1979  *              of channel for at most gpBirectionalCommissioningChangeChannelTimeout ms
// 1980  *              to perform GP bidirectional commissioning in the channel parameter.
// 1981  *
// 1982  * @param       gpChangeChannelReq
// 1983  *
// 1984  * @return      none
// 1985  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1986 void gp_RegisterGPChangeChannelReqForBDBCB(gpChangeChannelReq_t gpChangeChannelReq)
gp_RegisterGPChangeChannelReqForBDBCB:
          CFI Block cfiBlock202 Using cfiCommon0
          CFI Function gp_RegisterGPChangeChannelReqForBDBCB
        CODE
// 1987 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1988   if(gpChangeChannelReq)
        MOV     A,R2
        ORL     A,R3
        JZ      ??gp_RegisterGPChangeChannelReqForBDBCB_0
// 1989   {
// 1990     pfnChangeChannelReqForBDB = gpChangeChannelReq;
        MOV     DPTR,#pfnChangeChannelReqForBDB
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 1991   }
// 1992 }
??gp_RegisterGPChangeChannelReqForBDBCB_0:
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock202
// 1993 
// 1994 
// 1995 
// 1996 
// 1997 /*********************************************************************
// 1998  * @fn          gp_returnOperationalChannel
// 1999  *
// 2000  * @brief       Return to the operational channel after bidirectional commissioning
// 2001  *
// 2002  * @param       none
// 2003  *
// 2004  * @return      none
// 2005  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2006 void gp_returnOperationalChannel(void)
gp_returnOperationalChannel:
          CFI Block cfiBlock203 Using cfiCommon0
          CFI Function gp_returnOperationalChannel
        CODE
// 2007 {
        FUNCALL gp_returnOperationalChannel, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_returnOperationalChannel, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_returnOperationalChannel, GP_DataReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
// 2008   gp_DataReq_t gp_DataReq;
// 2009   _NIB.nwkLogicalChannel = gp_tempLogicalChannel;
        MOV     DPTR,#gp_tempLogicalChannel
        LCALL   ?Subroutine14 & 0xFFFF
// 2010   ZMacSetReq( ZMacChannel, &(_NIB.nwkLogicalChannel) );
??CrossCallReturnLabel_9:
        LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
// 2011   osal_stop_timerEx(gp_TaskID,GP_CHANNEL_CONFIGURATION_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x8
        MOV     R3,#0x0
        MOV     DPTR,#gp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 2012   
// 2013   gp_DataReq.Action = 0;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 2014   gp_DataReq.gpd_ID.AppID = GP_APP_ID_DEFAULT;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 2015   gp_DataReq.gpd_ID.GPDId.SrcID = 0;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ??Subroutine33_0 & 0xFFFF
// 2016   
// 2017   GP_DataReq(&gp_DataReq);
??CrossCallReturnLabel_51:
        ; Setup parameters for call to function GP_DataReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??GP_DataReq::?relay`; Banked call to: GP_DataReq
// 2018 }
        MOV     A,#0x15
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock203

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond204 Using cfiCommon0
          CFI Function zclGp_GpResponseCommandCB
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 97)
          CFI Block cfiCond205 Using cfiCommon0
          CFI (cfiCond205) Function gp_returnOperationalChannel
          CFI (cfiCond205) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond205) CFA_SP SP+-2
          CFI (cfiCond205) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiPicker206 Using cfiCommon1
          CFI (cfiPicker206) NoFunction
          CFI (cfiPicker206) Picker
        MOVX    A,@DPTR
        MOV     DPTR,#_NIB + 22
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZMacSetReq
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,#(_NIB + 22) & 0xff
        MOV     R3,#((_NIB + 22) >> 8) & 0xff
        MOV     R1,#-0x1f
        RET
          CFI EndBlock cfiCond204
          CFI EndBlock cfiCond205
          CFI EndBlock cfiPicker206
// 2019 
// 2020      
// 2021  /*********************************************************************
// 2022  * @fn          gp_expireDuplicateFiltering
// 2023  *
// 2024  * @brief       Process the expiration of the packets in the duplicate filtering
// 2025  *              list. Assumption is the first in the queue is the first into expire.
// 2026  *
// 2027  * @param       none
// 2028  *
// 2029  * @return      none
// 2030  */    

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2031 void gp_expireDuplicateFiltering(void)
gp_expireDuplicateFiltering:
          CFI Block cfiBlock207 Using cfiCommon0
          CFI Function gp_expireDuplicateFiltering
        CODE
// 2032 {
        FUNCALL gp_expireDuplicateFiltering, gp_DataIndReleaseFromList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 2033   gp_DataInd_t * temp;
// 2034   uint32 timeout;
// 2035   
// 2036   temp = gp_DataIndList;
        MOV     DPTR,#gp_DataIndList
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 2037   timeout = gp_DataIndList->SecReqHandling.timeout;
        MOV     DPTR,#gp_DataIndList
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_98:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        SJMP    ??gp_expireDuplicateFiltering_0
// 2038   
// 2039   while(temp != NULL)
// 2040   {
// 2041     if(timeout >= temp->SecReqHandling.timeout)
// 2042     {
// 2043       gp_DataInd_t *expired = temp;   
??gp_expireDuplicateFiltering_1:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
// 2044       
// 2045       temp = temp->SecReqHandling.next;
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 2046       gp_DataIndReleaseFromList(TRUE, expired,&gp_DataIndList);
        ; Setup parameters for call to function gp_DataIndReleaseFromList
        MOV     R4,#gp_DataIndList & 0xff
        MOV     R5,#(gp_DataIndList >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   `??gp_DataIndReleaseFromList::?relay`; Banked call to: gp_DataIndReleaseFromList
// 2047     }
??gp_expireDuplicateFiltering_0:
        MOV     A,R6
        ORL     A,R7
        JZ      ??gp_expireDuplicateFiltering_2
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x5
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0
        LCALL   ?UL_GE_X
        JC      ??gp_expireDuplicateFiltering_1
// 2048     else
// 2049     {
// 2050       temp->SecReqHandling.timeout -= timeout;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0
        LCALL   ?L_SUB_FROM_X
// 2051       temp = temp->SecReqHandling.next;
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        SJMP    ??gp_expireDuplicateFiltering_0
// 2052     }
// 2053   }
// 2054 }
??gp_expireDuplicateFiltering_2:
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock207

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclGp_gppMaxProxyTableEntrie`:
        DATA8
        DB 5

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclGp_gppNotificationRetryNu`:
        DATA8
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclGp_gppNotificationRetryTi`:
        DATA8
        DB 100

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclGp_gppMaxSearchCounter>`:
        DATA8
        DB 10

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclGp_gpLinkKey>`:
        DATA8
        DB 90
        DB 105
        DB 103
        DB 66
        DB 101
        DB 101
        DB 65
        DB 108
        DB 108
        DB 105
        DB 97
        DB 110
        DB 99
        DB 101
        DB 48
        DB 57

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclGp_clusterRevision>`:
        DATA16
        DW 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for gp_commissionerAddress>`:
        DATA16
        DW 65535

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for greenPower_EP_SimpleDesc>`:
        DATA8
        DB 242
        DATA16
        DW 41440
        DW 97
        DATA8
        DB 0
        DB 1
        DATA16
        DW greenPower_EP_InClusterList
        DATA8
        DB 1
        DATA16
        DW greenPower_EP_OutClusterList

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclGpProxy_CmdCallbacks>`:
        DATA16
        DW `??zclGp_GpPairingCommandCB::?relay`
        DW `??zclGp_GpProxyTableReqCB::?relay`
        DW `??zclGp_GpProxyCommissioningModeCB::?relay`
        DW `??zclGp_GpResponseCommandCB::?relay`

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_endpointInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_endpointInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_stopCommissioningMode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_stopCommissioningMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGp_ManteinanceIndParse::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGp_ManteinanceIndParse

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGp_DataIndParse::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGp_DataIndParse

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGp_GpPairingCommandCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGp_GpPairingCommandCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGp_GpProxyTableReqCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGp_GpProxyTableReqCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGp_GpResponseCommandCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGp_GpResponseCommandCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGp_GpProxyCommissioningModeCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGp_GpProxyCommissioningModeCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_ZclPairingParse::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_ZclPairingParse

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_ZclProxyTableReqParse::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_ZclProxyTableReqParse

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_PopulateField::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_PopulateField

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_ProxyTblInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_ProxyTblInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_getProxyTableByGpId::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_getProxyTableByGpId

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_SecurityOperationProxy::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_SecurityOperationProxy

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_getProxyTableByIndex::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_getProxyTableByIndex

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??GP_DataInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GP_DataInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??GP_SecReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GP_SecReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??GP_RecoveryKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GP_RecoveryKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??GP_DataCnf::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GP_DataCnf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_RegisterCommissioningModeCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_RegisterCommissioningModeCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_RegisterGPChangeChannelReqCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_RegisterGPChangeChannelReqCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_RegisterGPChangeChannelReqForBDBCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_RegisterGPChangeChannelReqForBDBCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_returnOperationalChannel::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_returnOperationalChannel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_expireDuplicateFiltering::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_expireDuplicateFiltering

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant {0, 0}>`:
        DATA8
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0,`:
        DATA32
        DD 0
        DD 0
        DATA8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DATA16
        DW 0
        DW 0
        DATA8
        DB 0
        DATA32
        DD 0
        DATA8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DATA16
        DW 0
        DATA8
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, {0, 0, 0, 0, 0, 0, 0, 0}, 0,_1`:
        DB 0
        DATA32
        DD 0
        DATA8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_3`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,`:
        DB 255
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,_1`:
        DB 255
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_10000:
        DD 65536

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_20000:
        DD 131072

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_ff:
        DD 255

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_ff00:
        DD 65280

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_ff0000:
        DD 16711680

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1388:
        DD 5000

        END
// 2055 
// 2056 /*********************************************************************
// 2057 *********************************************************************/
// 2058 
// 
// 6 347 bytes in segment BANKED_CODE
//   144 bytes in segment BANK_RELAYS
//   113 bytes in segment CODE_C
//    44 bytes in segment XDATA_I
//    44 bytes in segment XDATA_ID
//   392 bytes in segment XDATA_ROM_C
//    40 bytes in segment XDATA_Z
// 
// 6 648 bytes of CODE  memory
//   368 bytes of CONST memory (+ 24 bytes shared)
//    84 bytes of XDATA memory
//
//Errors: none
//Warnings: none
